
tdk_arm_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019078  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d54  08019248  08019248  0001a248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f9c  08019f9c  0001b128  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08019f9c  08019f9c  0001af9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019fa4  08019fa4  0001b128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08019fa4  08019fa4  0001afa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019fb0  08019fb0  0001afb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000128  20000000  08019fb4  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010f58  20000128  0801a0dc  0001b128  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011080  0801a0dc  0001c080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a7d3  00000000  00000000  0001b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000569e  00000000  00000000  0004592b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  0004afd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a3  00000000  00000000  0004cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d5aa  00000000  00000000  0004e15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026636  00000000  00000000  0007b705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee936  00000000  00000000  000a1d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00190671  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008304  00000000  00000000  001906e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001989ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000128 	.word	0x20000128
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019230 	.word	0x08019230

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000012c 	.word	0x2000012c
 800020c:	08019230 	.word	0x08019230

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_ldivmod>:
 8000b1c:	b97b      	cbnz	r3, 8000b3e <__aeabi_ldivmod+0x22>
 8000b1e:	b972      	cbnz	r2, 8000b3e <__aeabi_ldivmod+0x22>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bfbe      	ittt	lt
 8000b24:	2000      	movlt	r0, #0
 8000b26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b2a:	e006      	blt.n	8000b3a <__aeabi_ldivmod+0x1e>
 8000b2c:	bf08      	it	eq
 8000b2e:	2800      	cmpeq	r0, #0
 8000b30:	bf1c      	itt	ne
 8000b32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b3a:	f000 b9d3 	b.w	8000ee4 <__aeabi_idiv0>
 8000b3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b46:	2900      	cmp	r1, #0
 8000b48:	db09      	blt.n	8000b5e <__aeabi_ldivmod+0x42>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db1a      	blt.n	8000b84 <__aeabi_ldivmod+0x68>
 8000b4e:	f000 f84d 	bl	8000bec <__udivmoddi4>
 8000b52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4770      	bx	lr
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db1b      	blt.n	8000ba0 <__aeabi_ldivmod+0x84>
 8000b68:	f000 f840 	bl	8000bec <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4240      	negs	r0, r0
 8000b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	4770      	bx	lr
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	f000 f82f 	bl	8000bec <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4240      	negs	r0, r0
 8000b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9e:	4770      	bx	lr
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	f000 f821 	bl	8000bec <__udivmoddi4>
 8000baa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb2:	b004      	add	sp, #16
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bd0:	f000 b988 	b.w	8000ee4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	468e      	mov	lr, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	4688      	mov	r8, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d962      	bls.n	8000cc8 <__udivmoddi4+0xdc>
 8000c02:	fab2 f682 	clz	r6, r2
 8000c06:	b14e      	cbz	r6, 8000c1c <__udivmoddi4+0x30>
 8000c08:	f1c6 0320 	rsb	r3, r6, #32
 8000c0c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c10:	fa20 f303 	lsr.w	r3, r0, r3
 8000c14:	40b7      	lsls	r7, r6
 8000c16:	ea43 0808 	orr.w	r8, r3, r8
 8000c1a:	40b4      	lsls	r4, r6
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	fa1f fc87 	uxth.w	ip, r7
 8000c24:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c28:	0c23      	lsrs	r3, r4, #16
 8000c2a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c32:	fb01 f20c 	mul.w	r2, r1, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d909      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c40:	f080 80ea 	bcs.w	8000e18 <__udivmoddi4+0x22c>
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f240 80e7 	bls.w	8000e18 <__udivmoddi4+0x22c>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	443b      	add	r3, r7
 8000c4e:	1a9a      	subs	r2, r3, r2
 8000c50:	b2a3      	uxth	r3, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c62:	459c      	cmp	ip, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x8e>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c6c:	f080 80d6 	bcs.w	8000e1c <__udivmoddi4+0x230>
 8000c70:	459c      	cmp	ip, r3
 8000c72:	f240 80d3 	bls.w	8000e1c <__udivmoddi4+0x230>
 8000c76:	443b      	add	r3, r7
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7e:	eba3 030c 	sub.w	r3, r3, ip
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40f3      	lsrs	r3, r6
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xb6>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb0>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x14c>
 8000caa:	4573      	cmp	r3, lr
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xc8>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 8105 	bhi.w	8000ebe <__udivmoddi4+0x2d2>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4690      	mov	r8, r2
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0e5      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc6:	e7e2      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f000 8090 	beq.w	8000dee <__udivmoddi4+0x202>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f040 80a4 	bne.w	8000e20 <__udivmoddi4+0x234>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	b280      	uxth	r0, r0
 8000ce2:	b2bc      	uxth	r4, r7
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cea:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cf2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x11e>
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x11c>
 8000d02:	429a      	cmp	r2, r3
 8000d04:	f200 80e0 	bhi.w	8000ec8 <__udivmoddi4+0x2dc>
 8000d08:	46c4      	mov	ip, r8
 8000d0a:	1a9b      	subs	r3, r3, r2
 8000d0c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d10:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d18:	fb02 f404 	mul.w	r4, r2, r4
 8000d1c:	429c      	cmp	r4, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x144>
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x142>
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	f200 80ca 	bhi.w	8000ec2 <__udivmoddi4+0x2d6>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	1b1b      	subs	r3, r3, r4
 8000d32:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa0e f401 	lsl.w	r4, lr, r1
 8000d48:	fa20 f306 	lsr.w	r3, r0, r6
 8000d4c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d50:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d54:	4323      	orrs	r3, r4
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	fa1f fc87 	uxth.w	ip, r7
 8000d5e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d62:	0c1c      	lsrs	r4, r3, #16
 8000d64:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d6c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1a0>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 809c 	bcs.w	8000eba <__udivmoddi4+0x2ce>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f240 8099 	bls.w	8000eba <__udivmoddi4+0x2ce>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	eba4 040e 	sub.w	r4, r4, lr
 8000d90:	fa1f fe83 	uxth.w	lr, r3
 8000d94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d98:	fb09 4413 	mls	r4, r9, r3, r4
 8000d9c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000da0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da4:	45a4      	cmp	ip, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1ce>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dae:	f080 8082 	bcs.w	8000eb6 <__udivmoddi4+0x2ca>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d97f      	bls.n	8000eb6 <__udivmoddi4+0x2ca>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc6:	4564      	cmp	r4, ip
 8000dc8:	4673      	mov	r3, lr
 8000dca:	46e1      	mov	r9, ip
 8000dcc:	d362      	bcc.n	8000e94 <__udivmoddi4+0x2a8>
 8000dce:	d05f      	beq.n	8000e90 <__udivmoddi4+0x2a4>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x1fe>
 8000dd2:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	431e      	orrs	r6, r3
 8000de4:	40cc      	lsrs	r4, r1
 8000de6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e74f      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000dee:	fbb1 fcf2 	udiv	ip, r1, r2
 8000df2:	0c01      	lsrs	r1, r0, #16
 8000df4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4638      	mov	r0, r7
 8000e02:	463c      	mov	r4, r7
 8000e04:	46b8      	mov	r8, r7
 8000e06:	46be      	mov	lr, r7
 8000e08:	2620      	movs	r6, #32
 8000e0a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0e:	eba2 0208 	sub.w	r2, r2, r8
 8000e12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e16:	e766      	b.n	8000ce6 <__udivmoddi4+0xfa>
 8000e18:	4601      	mov	r1, r0
 8000e1a:	e718      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	e72c      	b.n	8000c7a <__udivmoddi4+0x8e>
 8000e20:	f1c6 0220 	rsb	r2, r6, #32
 8000e24:	fa2e f302 	lsr.w	r3, lr, r2
 8000e28:	40b7      	lsls	r7, r6
 8000e2a:	40b1      	lsls	r1, r6
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e34:	430a      	orrs	r2, r1
 8000e36:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb08 f904 	mul.w	r9, r8, r4
 8000e4a:	40b0      	lsls	r0, r6
 8000e4c:	4589      	cmp	r9, r1
 8000e4e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e52:	b280      	uxth	r0, r0
 8000e54:	d93e      	bls.n	8000ed4 <__udivmoddi4+0x2e8>
 8000e56:	1879      	adds	r1, r7, r1
 8000e58:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e5c:	d201      	bcs.n	8000e62 <__udivmoddi4+0x276>
 8000e5e:	4589      	cmp	r9, r1
 8000e60:	d81f      	bhi.n	8000ea2 <__udivmoddi4+0x2b6>
 8000e62:	eba1 0109 	sub.w	r1, r1, r9
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fb09 f804 	mul.w	r8, r9, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	b292      	uxth	r2, r2
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	4542      	cmp	r2, r8
 8000e7a:	d229      	bcs.n	8000ed0 <__udivmoddi4+0x2e4>
 8000e7c:	18ba      	adds	r2, r7, r2
 8000e7e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e82:	d2c4      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d2c2      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e88:	f1a9 0102 	sub.w	r1, r9, #2
 8000e8c:	443a      	add	r2, r7
 8000e8e:	e7be      	b.n	8000e0e <__udivmoddi4+0x222>
 8000e90:	45f0      	cmp	r8, lr
 8000e92:	d29d      	bcs.n	8000dd0 <__udivmoddi4+0x1e4>
 8000e94:	ebbe 0302 	subs.w	r3, lr, r2
 8000e98:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	46e1      	mov	r9, ip
 8000ea0:	e796      	b.n	8000dd0 <__udivmoddi4+0x1e4>
 8000ea2:	eba7 0909 	sub.w	r9, r7, r9
 8000ea6:	4449      	add	r1, r9
 8000ea8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eac:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb0:	fb09 f804 	mul.w	r8, r9, r4
 8000eb4:	e7db      	b.n	8000e6e <__udivmoddi4+0x282>
 8000eb6:	4673      	mov	r3, lr
 8000eb8:	e77f      	b.n	8000dba <__udivmoddi4+0x1ce>
 8000eba:	4650      	mov	r0, sl
 8000ebc:	e766      	b.n	8000d8c <__udivmoddi4+0x1a0>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e6fd      	b.n	8000cbe <__udivmoddi4+0xd2>
 8000ec2:	443b      	add	r3, r7
 8000ec4:	3a02      	subs	r2, #2
 8000ec6:	e733      	b.n	8000d30 <__udivmoddi4+0x144>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	443b      	add	r3, r7
 8000ece:	e71c      	b.n	8000d0a <__udivmoddi4+0x11e>
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x222>
 8000ed4:	eba1 0109 	sub.w	r1, r1, r9
 8000ed8:	46c4      	mov	ip, r8
 8000eda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ede:	fb09 f804 	mul.w	r8, r9, r4
 8000ee2:	e7c4      	b.n	8000e6e <__udivmoddi4+0x282>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_ZN10UART_servo9UART_SendEh>:
//servo control variale
//declare struct
//servo control function
//servo control variale
//servo control function
void UART_servo::UART_Send(uint8_t u8_data) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
	uint8_t *u8_pointer = &u8_data;
 8000ef4:	1cfb      	adds	r3, r7, #3
 8000ef6:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1, 100);
 8000ef8:	2364      	movs	r3, #100	@ 0x64
 8000efa:	2201      	movs	r2, #1
 8000efc:	68f9      	ldr	r1, [r7, #12]
 8000efe:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <_ZN10UART_servo9UART_SendEh+0x34>)
 8000f00:	f005 fb66 	bl	80065d0 <HAL_UART_Transmit>
	Checksum_Calc += u8_data;
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <_ZN10UART_servo9UART_SendEh+0x38>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <_ZN10UART_servo9UART_SendEh+0x38>)
 8000f12:	801a      	strh	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200048e4 	.word	0x200048e4
 8000f20:	20000144 	.word	0x20000144

08000f24 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>:
void UART_servo::UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	4611      	mov	r1, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	4603      	mov	r3, r0
 8000f34:	817b      	strh	r3, [r7, #10]
 8000f36:	460b      	mov	r3, r1
 8000f38:	813b      	strh	r3, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	80fb      	strh	r3, [r7, #6]
	Checksum_Calc = 0;
 8000f3e:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	801a      	strh	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8000f44:	897b      	ldrh	r3, [r7, #10]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	3b80      	subs	r3, #128	@ 0x80
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff ffca 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x83);              //header mark & command code
 8000f54:	2183      	movs	r1, #131	@ 0x83
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff ffc6 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x05);              //total data length
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff ffc2 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8000f64:	893b      	ldrh	r3, [r7, #8]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f7ff ffb7 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Position % 256);           //Servo Pos_L
 8000f7a:	893b      	ldrh	r3, [r7, #8]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff ffb1 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4619      	mov	r1, r3
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff ffa6 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Time % 256);          //Servo Time_L
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff ffa0 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff ff99 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000144 	.word	0x20000144

08000fc4 <_ZN10UART_servo3runEv>:
void UART_servo::run(){//put in timer IT
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	UART_Send_SetMotorPosition(motorId,(uint16_t)(800+7*pos),reflectime);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	8819      	ldrh	r1, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	00d2      	lsls	r2, r2, #3
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	891b      	ldrh	r3, [r3, #8]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff9b 	bl	8000f24 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_ZN10UART_servo10update_posEi>:
void UART_servo::update_pos(int _pos){
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
	pos = _pos;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	605a      	str	r2, [r3, #4]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>:
public:
	void UART_Send(uint8_t u8_data);
	void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time);
	void update_pos(int pos);
	void run();
    UART_servo(uint16_t id, uint16_t _reflect_time, UART_HandleTypeDef* _servo_uart)
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	817b      	strh	r3, [r7, #10]
 8001020:	4613      	mov	r3, r2
 8001022:	813b      	strh	r3, [r7, #8]
        : motorId(id), reflectime(_reflect_time), servo_uart(_servo_uart) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	897a      	ldrh	r2, [r7, #10]
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	893a      	ldrh	r2, [r7, #8]
 800102e:	811a      	strh	r2, [r3, #8]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	60da      	str	r2, [r3, #12]
        // 初始化其他成員變數
        Position = 0;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	805a      	strh	r2, [r3, #2]
        pos = 0;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
    }
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>:
#include "math.h"
#include "motor_config.h"

class MotorController{
public:
    MotorController(TIM_HandleTypeDef* enc, TIM_HandleTypeDef* pwm, uint32_t channel, GPIO_TypeDef* BGPIO, uint16_t BPin, double kp, double ki, double kd):
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6278      	str	r0, [r7, #36]	@ 0x24
 8001058:	6239      	str	r1, [r7, #32]
 800105a:	61fa      	str	r2, [r7, #28]
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001062:	ed87 1b02 	vstr	d1, [r7, #8]
 8001066:	ed87 2b00 	vstr	d2, [r7]
        _enc(enc), _pwm(pwm), _channel(channel), _BGPIO(BGPIO), _BPin(BPin), _kp(kp), _ki(ki), _kd(kd){}
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	4a3d      	ldr	r2, [pc, #244]	@ (8001164 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x114>)
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	6a3a      	ldr	r2, [r7, #32]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001086:	619a      	str	r2, [r3, #24]
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800108c:	839a      	strh	r2, [r3, #28]
 800108e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001092:	f7ff fcf3 	bl	8000a7c <__aeabi_d2f>
 8001096:	4602      	mov	r2, r0
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	621a      	str	r2, [r3, #32]
 800109c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010a0:	f7ff fcec 	bl	8000a7c <__aeabi_d2f>
 80010a4:	4602      	mov	r2, r0
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80010aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010ae:	f7ff fce5 	bl	8000a7c <__aeabi_d2f>
 80010b2:	4602      	mov	r2, r0
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	2200      	movs	r2, #0
 80010d2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	2200      	movs	r2, #0
 80010d8:	865a      	strh	r2, [r3, #50]	@ 0x32
 80010da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	645a      	str	r2, [r3, #68]	@ 0x44
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	649a      	str	r2, [r3, #72]	@ 0x48
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x118>)
 8001116:	651a      	str	r2, [r3, #80]	@ 0x50
 8001118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111a:	2200      	movs	r2, #0
 800111c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001122:	2200      	movs	r2, #0
 8001124:	659a      	str	r2, [r3, #88]	@ 0x58
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	2200      	movs	r2, #0
 800112a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	2200      	movs	r2, #0
 8001130:	661a      	str	r2, [r3, #96]	@ 0x60
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	2200      	movs	r2, #0
 8001136:	665a      	str	r2, [r3, #100]	@ 0x64
 8001138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113a:	2200      	movs	r2, #0
 800113c:	669a      	str	r2, [r3, #104]	@ 0x68
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x114>)
 8001142:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	675a      	str	r2, [r3, #116]	@ 0x74
 800114c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001152:	679a      	str	r2, [r3, #120]	@ 0x78
 8001154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001156:	2232      	movs	r2, #50	@ 0x32
 8001158:	67da      	str	r2, [r3, #124]	@ 0x7c
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	4618      	mov	r0, r3
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	437a0000 	.word	0x437a0000
 8001168:	42c80000 	.word	0x42c80000

0800116c <arm_init>:
#define CASCADE_STARTHIGHT 250.0f
float cascade_height = CASCADE_STARTHIGHT; //cascade起始高度
MotorController Motor_cas(&htim1, &htim12, TIM_CHANNEL_2, GPIOB, GPIO_PIN_12, 0.6, 30, 0);


void arm_init(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	// 手臂初始化邏輯
	HAL_Init();
 8001170:	f002 fa76 	bl	8003660 <HAL_Init>
	// 啟動 Encoder 與 PWM
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001174:	213c      	movs	r1, #60	@ 0x3c
 8001176:	4821      	ldr	r0, [pc, #132]	@ (80011fc <arm_init+0x90>)
 8001178:	f004 fb04 	bl	8005784 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800117c:	2108      	movs	r1, #8
 800117e:	4820      	ldr	r0, [pc, #128]	@ (8001200 <arm_init+0x94>)
 8001180:	f004 f992 	bl	80054a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8001184:	2104      	movs	r1, #4
 8001186:	481f      	ldr	r0, [pc, #124]	@ (8001204 <arm_init+0x98>)
 8001188:	f004 f98e 	bl	80054a8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001192:	481d      	ldr	r0, [pc, #116]	@ (8001208 <arm_init+0x9c>)
 8001194:	f003 f91e 	bl	80043d4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001198:	2100      	movs	r1, #0
 800119a:	4819      	ldr	r0, [pc, #100]	@ (8001200 <arm_init+0x94>)
 800119c:	f004 f984 	bl	80054a8 <HAL_TIM_PWM_Start>

	servo1.update_pos(servo1_pos);
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <arm_init+0xa0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	481a      	ldr	r0, [pc, #104]	@ (8001210 <arm_init+0xa4>)
 80011a8:	f7ff ff25 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo2.update_pos(servo2_pos);
 80011ac:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <arm_init+0xa8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4819      	ldr	r0, [pc, #100]	@ (8001218 <arm_init+0xac>)
 80011b4:	f7ff ff1f 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo3.update_pos(gripper_close);
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <arm_init+0xb0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	4818      	ldr	r0, [pc, #96]	@ (8001220 <arm_init+0xb4>)
 80011c0:	f7ff ff19 	bl	8000ff6 <_ZN10UART_servo10update_posEi>

	servo1.run();
 80011c4:	4812      	ldr	r0, [pc, #72]	@ (8001210 <arm_init+0xa4>)
 80011c6:	f7ff fefd 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo2.run();
 80011ca:	4813      	ldr	r0, [pc, #76]	@ (8001218 <arm_init+0xac>)
 80011cc:	f7ff fefa 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo3.run();
 80011d0:	4813      	ldr	r0, [pc, #76]	@ (8001220 <arm_init+0xb4>)
 80011d2:	f7ff fef7 	bl	8000fc4 <_ZN10UART_servo3runEv>

	// 初始化 Cascade
	Motor_cas.init(-1,-1);
 80011d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011da:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011de:	4811      	ldr	r0, [pc, #68]	@ (8001224 <arm_init+0xb8>)
 80011e0:	f000 f91f 	bl	8001422 <_ZN15MotorController4initEii>
	Motor_cas.setSpeed(0.0);
 80011e4:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8001228 <arm_init+0xbc>
 80011e8:	480e      	ldr	r0, [pc, #56]	@ (8001224 <arm_init+0xb8>)
 80011ea:	f000 f9b5 	bl	8001558 <_ZN15MotorController8setSpeedEf>
	arm_cascade_set_to_zero();
 80011ee:	f000 f85f 	bl	80012b0 <arm_cascade_set_to_zero>
	started = 1;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <arm_init+0xc0>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000477c 	.word	0x2000477c
 8001200:	2000480c 	.word	0x2000480c
 8001204:	20004854 	.word	0x20004854
 8001208:	40020400 	.word	0x40020400
 800120c:	20000000 	.word	0x20000000
 8001210:	20000148 	.word	0x20000148
 8001214:	20000004 	.word	0x20000004
 8001218:	20000158 	.word	0x20000158
 800121c:	20000008 	.word	0x20000008
 8001220:	20000168 	.word	0x20000168
 8001224:	20000180 	.word	0x20000180
 8001228:	00000000 	.word	0x00000000
 800122c:	2000017c 	.word	0x2000017c

08001230 <arm_timer_callback>:


void arm_timer_callback(void) {		// constantly run the servo in timer callback
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	if(started) Motor_cas.setgoal(cascade_height);
 8001234:	4b15      	ldr	r3, [pc, #84]	@ (800128c <arm_timer_callback+0x5c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d007      	beq.n	800124c <arm_timer_callback+0x1c>
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <arm_timer_callback+0x60>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	eeb0 0a67 	vmov.f32	s0, s15
 8001246:	4813      	ldr	r0, [pc, #76]	@ (8001294 <arm_timer_callback+0x64>)
 8001248:	f000 faec 	bl	8001824 <_ZN15MotorController7setgoalEf>
	Motor_cas.MotorOutput();
 800124c:	4811      	ldr	r0, [pc, #68]	@ (8001294 <arm_timer_callback+0x64>)
 800124e:	f000 f907 	bl	8001460 <_ZN15MotorController11MotorOutputEv>
	servo1.update_pos(servo1_pos);
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <arm_timer_callback+0x68>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	4810      	ldr	r0, [pc, #64]	@ (800129c <arm_timer_callback+0x6c>)
 800125a:	f7ff fecc 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo2.update_pos(servo2_pos);
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <arm_timer_callback+0x70>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4619      	mov	r1, r3
 8001264:	480f      	ldr	r0, [pc, #60]	@ (80012a4 <arm_timer_callback+0x74>)
 8001266:	f7ff fec6 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo3.update_pos(gripper_close);
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <arm_timer_callback+0x78>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4619      	mov	r1, r3
 8001270:	480e      	ldr	r0, [pc, #56]	@ (80012ac <arm_timer_callback+0x7c>)
 8001272:	f7ff fec0 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo1.run();
 8001276:	4809      	ldr	r0, [pc, #36]	@ (800129c <arm_timer_callback+0x6c>)
 8001278:	f7ff fea4 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo2.run();
 800127c:	4809      	ldr	r0, [pc, #36]	@ (80012a4 <arm_timer_callback+0x74>)
 800127e:	f7ff fea1 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo3.run();
 8001282:	480a      	ldr	r0, [pc, #40]	@ (80012ac <arm_timer_callback+0x7c>)
 8001284:	f7ff fe9e 	bl	8000fc4 <_ZN10UART_servo3runEv>
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000017c 	.word	0x2000017c
 8001290:	2000000c 	.word	0x2000000c
 8001294:	20000180 	.word	0x20000180
 8001298:	20000000 	.word	0x20000000
 800129c:	20000148 	.word	0x20000148
 80012a0:	20000004 	.word	0x20000004
 80012a4:	20000158 	.word	0x20000158
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000168 	.word	0x20000168

080012b0 <arm_cascade_set_to_zero>:


void arm_cascade_set_to_zero(void){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	set_to_zero = 0;
 80012b4:	4b15      	ldr	r3, [pc, #84]	@ (800130c <arm_cascade_set_to_zero+0x5c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
	cascade_height = CASCADE_STARTHIGHT + 30.0f; // 往上移動5公分
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <arm_cascade_set_to_zero+0x60>)
 80012bc:	4a15      	ldr	r2, [pc, #84]	@ (8001314 <arm_cascade_set_to_zero+0x64>)
 80012be:	601a      	str	r2, [r3, #0]
	while(!Motor_cas.goal_reached())
 80012c0:	e00a      	b.n	80012d8 <arm_cascade_set_to_zero+0x28>
	{
		Motor_cas.setgoal(cascade_height); // 以固定速度往上移動
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <arm_cascade_set_to_zero+0x60>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	eeb0 0a67 	vmov.f32	s0, s15
 80012cc:	4812      	ldr	r0, [pc, #72]	@ (8001318 <arm_cascade_set_to_zero+0x68>)
 80012ce:	f000 faa9 	bl	8001824 <_ZN15MotorController7setgoalEf>
		osDelay(10);
 80012d2:	200a      	movs	r0, #10
 80012d4:	f006 fdbe 	bl	8007e54 <osDelay>
	while(!Motor_cas.goal_reached())
 80012d8:	480f      	ldr	r0, [pc, #60]	@ (8001318 <arm_cascade_set_to_zero+0x68>)
 80012da:	f000 faf7 	bl	80018cc <_ZN15MotorController12goal_reachedEv>
 80012de:	4603      	mov	r3, r0
 80012e0:	f083 0301 	eor.w	r3, r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1eb      	bne.n	80012c2 <arm_cascade_set_to_zero+0x12>
	}
	while(!set_to_zero){
 80012ea:	e007      	b.n	80012fc <arm_cascade_set_to_zero+0x4c>
		Motor_cas.setSpeed(-0.3f); // 以固定速度往下移動
 80012ec:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800131c <arm_cascade_set_to_zero+0x6c>
 80012f0:	4809      	ldr	r0, [pc, #36]	@ (8001318 <arm_cascade_set_to_zero+0x68>)
 80012f2:	f000 f931 	bl	8001558 <_ZN15MotorController8setSpeedEf>
		osDelay(10);
 80012f6:	200a      	movs	r0, #10
 80012f8:	f006 fdac 	bl	8007e54 <osDelay>
	while(!set_to_zero){
 80012fc:	4b03      	ldr	r3, [pc, #12]	@ (800130c <arm_cascade_set_to_zero+0x5c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f3      	beq.n	80012ec <arm_cascade_set_to_zero+0x3c>
	}
	// Motor_cas.setSpeed(-1.0f); // 以固定速度往下移動
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000178 	.word	0x20000178
 8001310:	2000000c 	.word	0x2000000c
 8001314:	438c0000 	.word	0x438c0000
 8001318:	20000180 	.word	0x20000180
 800131c:	be99999a 	.word	0xbe99999a

08001320 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2) {
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2b04      	cmp	r3, #4
 800132e:	d10d      	bne.n	800134c <HAL_GPIO_EXTI_Callback+0x2c>
		set_to_zero = 1;
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <HAL_GPIO_EXTI_Callback+0x34>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
		Motor_cas.setSpeed(0.0f);
 8001336:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001358 <HAL_GPIO_EXTI_Callback+0x38>
 800133a:	4808      	ldr	r0, [pc, #32]	@ (800135c <HAL_GPIO_EXTI_Callback+0x3c>)
 800133c:	f000 f90c 	bl	8001558 <_ZN15MotorController8setSpeedEf>
		Motor_cas._cascade_height = CASCADE_STARTHIGHT;
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001342:	4a07      	ldr	r2, [pc, #28]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x40>)
 8001344:	601a      	str	r2, [r3, #0]
		cascade_height = CASCADE_STARTHIGHT;
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <HAL_GPIO_EXTI_Callback+0x44>)
 8001348:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x40>)
 800134a:	601a      	str	r2, [r3, #0]
	}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000178 	.word	0x20000178
 8001358:	00000000 	.word	0x00000000
 800135c:	20000180 	.word	0x20000180
 8001360:	437a0000 	.word	0x437a0000
 8001364:	2000000c 	.word	0x2000000c

08001368 <_Z41__static_initialization_and_destruction_0v>:
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af02      	add	r7, sp, #8
UART_servo servo1(1, 2000, &huart3);
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <_Z41__static_initialization_and_destruction_0v+0x70>)
 8001370:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001374:	2101      	movs	r1, #1
 8001376:	4819      	ldr	r0, [pc, #100]	@ (80013dc <_Z41__static_initialization_and_destruction_0v+0x74>)
 8001378:	f7ff fe4b 	bl	8001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
UART_servo servo2(3, 2000, &huart3);
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <_Z41__static_initialization_and_destruction_0v+0x70>)
 800137e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001382:	2103      	movs	r1, #3
 8001384:	4816      	ldr	r0, [pc, #88]	@ (80013e0 <_Z41__static_initialization_and_destruction_0v+0x78>)
 8001386:	f7ff fe44 	bl	8001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
UART_servo servo3(4, 2000, &huart3);
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <_Z41__static_initialization_and_destruction_0v+0x70>)
 800138c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001390:	2104      	movs	r1, #4
 8001392:	4814      	ldr	r0, [pc, #80]	@ (80013e4 <_Z41__static_initialization_and_destruction_0v+0x7c>)
 8001394:	f7ff fe3d 	bl	8001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
MotorController Motor_cas(&htim1, &htim12, TIM_CHANNEL_2, GPIOB, GPIO_PIN_12, 0.6, 30, 0);
 8001398:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <_Z41__static_initialization_and_destruction_0v+0x80>)
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	ed9f 2b07 	vldr	d2, [pc, #28]	@ 80013c0 <_Z41__static_initialization_and_destruction_0v+0x58>
 80013a6:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 80013c8 <_Z41__static_initialization_and_destruction_0v+0x60>
 80013aa:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 80013d0 <_Z41__static_initialization_and_destruction_0v+0x68>
 80013ae:	2304      	movs	r3, #4
 80013b0:	4a0e      	ldr	r2, [pc, #56]	@ (80013ec <_Z41__static_initialization_and_destruction_0v+0x84>)
 80013b2:	490f      	ldr	r1, [pc, #60]	@ (80013f0 <_Z41__static_initialization_and_destruction_0v+0x88>)
 80013b4:	480f      	ldr	r0, [pc, #60]	@ (80013f4 <_Z41__static_initialization_and_destruction_0v+0x8c>)
 80013b6:	f7ff fe4b 	bl	8001050 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
	...
 80013cc:	403e0000 	.word	0x403e0000
 80013d0:	33333333 	.word	0x33333333
 80013d4:	3fe33333 	.word	0x3fe33333
 80013d8:	200048e4 	.word	0x200048e4
 80013dc:	20000148 	.word	0x20000148
 80013e0:	20000158 	.word	0x20000158
 80013e4:	20000168 	.word	0x20000168
 80013e8:	40020400 	.word	0x40020400
 80013ec:	20004854 	.word	0x20004854
 80013f0:	2000477c 	.word	0x2000477c
 80013f4:	20000180 	.word	0x20000180

080013f8 <_GLOBAL__sub_I_servo1>:
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	f7ff ffb4 	bl	8001368 <_Z41__static_initialization_and_destruction_0v>
 8001400:	bd80      	pop	{r7, pc}

08001402 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	ed87 0a01 	vstr	s0, [r7, #4]
 800140c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001410:	eef0 7ae7 	vabs.f32	s15, s15
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_ZN15MotorController4initEii>:
float v = 0.5;
float e = 1.0;

//extern TIM_HandleTypeDef htim12;

void MotorController::init(int en_ctrl,int dir_ctrl) {
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
    HAL_TIM_Encoder_Start(_enc, TIM_CHANNEL_ALL);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	213c      	movs	r1, #60	@ 0x3c
 8001434:	4618      	mov	r0, r3
 8001436:	f004 f9a5 	bl	8005784 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(_pwm, _channel);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	4619      	mov	r1, r3
 8001444:	4610      	mov	r0, r2
 8001446:	f004 f82f 	bl	80054a8 <HAL_TIM_PWM_Start>
//	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
    _dir_ctrl = dir_ctrl;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	65da      	str	r2, [r3, #92]	@ 0x5c
    _en_ctrl = en_ctrl;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <_ZN15MotorController11MotorOutputEv>:

void MotorController::MotorOutput(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    ComputePID();
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f885 	bl	8001578 <_ZN15MotorController10ComputePIDEv>

    if (_dir_ctrl == 1){
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	2b01      	cmp	r3, #1
 8001474:	d112      	bne.n	800149c <_ZN15MotorController11MotorOutputEv+0x3c>
    	HAL_GPIO_WritePin(_BGPIO, _BPin, _pidOutput >= 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6998      	ldr	r0, [r3, #24]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	8b99      	ldrh	r1, [r3, #28]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001484:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	db01      	blt.n	8001492 <_ZN15MotorController11MotorOutputEv+0x32>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <_ZN15MotorController11MotorOutputEv+0x34>
 8001492:	2300      	movs	r3, #0
 8001494:	461a      	mov	r2, r3
 8001496:	f002 ff9d 	bl	80043d4 <HAL_GPIO_WritePin>
 800149a:	e014      	b.n	80014c6 <_ZN15MotorController11MotorOutputEv+0x66>
    }else{
    	HAL_GPIO_WritePin(_BGPIO, _BPin, _pidOutput >= 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6998      	ldr	r0, [r3, #24]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	8b99      	ldrh	r1, [r3, #28]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80014aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	bfac      	ite	ge
 80014b4:	2301      	movge	r3, #1
 80014b6:	2300      	movlt	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f083 0301 	eor.w	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	f002 ff87 	bl	80043d4 <HAL_GPIO_WritePin>
    }
    _pwmValue = (uint16_t)(fabs(_pidOutput) * PWM_ARR );///  10.0);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	f7ff ff97 	bl	8001402 <_ZSt4fabsf>
 80014d4:	eef0 7a40 	vmov.f32	s15, s0
 80014d8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001554 <_ZN15MotorController11MotorOutputEv+0xf4>
 80014dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e4:	ee17 3a90 	vmov	r3, s15
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (_pwmValue < 10) _pwmValue = 0;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80014f2:	2b09      	cmp	r3, #9
 80014f4:	d802      	bhi.n	80014fc <_ZN15MotorController11MotorOutputEv+0x9c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	865a      	strh	r2, [r3, #50]	@ 0x32
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d106      	bne.n	8001512 <_ZN15MotorController11MotorOutputEv+0xb2>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001510:	e01b      	b.n	800154a <_ZN15MotorController11MotorOutputEv+0xea>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b04      	cmp	r3, #4
 8001518:	d106      	bne.n	8001528 <_ZN15MotorController11MotorOutputEv+0xc8>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001526:	e010      	b.n	800154a <_ZN15MotorController11MotorOutputEv+0xea>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b08      	cmp	r3, #8
 800152e:	d106      	bne.n	800153e <_ZN15MotorController11MotorOutputEv+0xde>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800153c:	e005      	b.n	800154a <_ZN15MotorController11MotorOutputEv+0xea>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	447a0000 	.word	0x447a0000

08001558 <_ZN15MotorController8setSpeedEf>:

void MotorController::setSpeed(float speed) {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	ed87 0a00 	vstr	s0, [r7]
    _targetSpeed = speed;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <_ZN15MotorController10ComputePIDEv>:
float MotorController::getSpeed() {
//	updateSpeed();
    return _currentSpeed;
}

float MotorController::ComputePID() {
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    updateSpeed();
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f8a9 	bl	80016d8 <_ZN15MotorController11updateSpeedEv>
    _error = _targetSpeed - _currentSpeed;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    _integral += _error * (DT / 1000.0);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff f801 	bl	80005a8 <__aeabi_f2d>
 80015a6:	4604      	mov	r4, r0
 80015a8:	460d      	mov	r5, r1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe fffa 	bl	80005a8 <__aeabi_f2d>
 80015b4:	a345      	add	r3, pc, #276	@ (adr r3, 80016cc <_ZN15MotorController10ComputePIDEv+0x154>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff f84d 	bl	8000658 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4620      	mov	r0, r4
 80015c4:	4629      	mov	r1, r5
 80015c6:	f7fe fe91 	bl	80002ec <__adddf3>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fa53 	bl	8000a7c <__aeabi_d2f>
 80015d6:	4602      	mov	r2, r0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	64da      	str	r2, [r3, #76]	@ 0x4c
    if(_integral >= INTEGRAL_LIMIT) _integral = INTEGRAL_LIMIT;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80015e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80015e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ee:	db04      	blt.n	80015fa <_ZN15MotorController10ComputePIDEv+0x82>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80015f6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80015f8:	e00d      	b.n	8001616 <_ZN15MotorController10ComputePIDEv+0x9e>
    else if(_integral <= -INTEGRAL_LIMIT) _integral = -INTEGRAL_LIMIT;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001600:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	d803      	bhi.n	8001616 <_ZN15MotorController10ComputePIDEv+0x9e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8001614:	64da      	str	r2, [r3, #76]	@ 0x4c


    float derivative = (_error - _lastError) / (DT / 1000.0);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001626:	ee17 0a90 	vmov	r0, s15
 800162a:	f7fe ffbd 	bl	80005a8 <__aeabi_f2d>
 800162e:	a327      	add	r3, pc, #156	@ (adr r3, 80016cc <_ZN15MotorController10ComputePIDEv+0x154>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f93a 	bl	80008ac <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff fa1c 	bl	8000a7c <__aeabi_d2f>
 8001644:	4603      	mov	r3, r0
 8001646:	60fb      	str	r3, [r7, #12]

    _pidOutput = (_kp * _error) + (_ki * _integral); //+ (_kd * derivative);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	ed93 7a08 	vldr	s14, [r3, #32]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    // Update last error
    _lastError = _error;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	649a      	str	r2, [r3, #72]	@ 0x48
    if(_pidOutput > 1) _pidOutput = 1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001680:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	dd04      	ble.n	8001698 <_ZN15MotorController10ComputePIDEv+0x120>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001694:	635a      	str	r2, [r3, #52]	@ 0x34
 8001696:	e00c      	b.n	80016b2 <_ZN15MotorController10ComputePIDEv+0x13a>
    else if (_pidOutput < -1) _pidOutput = -1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800169e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80016a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	d502      	bpl.n	80016b2 <_ZN15MotorController10ComputePIDEv+0x13a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a06      	ldr	r2, [pc, #24]	@ (80016c8 <_ZN15MotorController10ComputePIDEv+0x150>)
 80016b0:	635a      	str	r2, [r3, #52]	@ 0x34
    return _pidOutput;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
//    pre_error = error;

	if (_pidOutput > 1) _pidOutput = 1;
	else if (_pidOutput < -1) _pidOutput = -1;
    return _pidOutput;
}
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bdb0      	pop	{r4, r5, r7, pc}
 80016c4:	f3af 8000 	nop.w
 80016c8:	bf800000 	.word	0xbf800000
 80016cc:	47ae147b 	.word	0x47ae147b
 80016d0:	3f847ae1 	.word	0x3f847ae1
 80016d4:	00000000 	.word	0x00000000

080016d8 <_ZN15MotorController11updateSpeedEv>:

float MotorController::updateSpeed() {
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	cnt = __HAL_TIM_GetCounter(_enc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	861a      	strh	r2, [r3, #48]	@ 0x30
	_cascade_height += -(float)cnt / (4.0f * ENCODER_RESOLUTION * REDUCTION_RATIO) * 3.14 * 35;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff58 	bl	80005a8 <__aeabi_f2d>
 80016f8:	4604      	mov	r4, r0
 80016fa:	460d      	mov	r5, r1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170a:	eef1 7a67 	vneg.f32	s15, s15
 800170e:	ee17 3a90 	vmov	r3, s15
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff48 	bl	80005a8 <__aeabi_f2d>
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	4b3c      	ldr	r3, [pc, #240]	@ (8001810 <_ZN15MotorController11updateSpeedEv+0x138>)
 800171e:	f7ff f8c5 	bl	80008ac <__aeabi_ddiv>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	a335      	add	r3, pc, #212	@ (adr r3, 8001800 <_ZN15MotorController11updateSpeedEv+0x128>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe ff92 	bl	8000658 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <_ZN15MotorController11updateSpeedEv+0x13c>)
 8001742:	f7fe ff89 	bl	8000658 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4620      	mov	r0, r4
 800174c:	4629      	mov	r1, r5
 800174e:	f7fe fdcd 	bl	80002ec <__adddf3>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff f98f 	bl	8000a7c <__aeabi_d2f>
 800175e:	4602      	mov	r2, r0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	601a      	str	r2, [r3, #0]
	_currentSpeed = (cnt/ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe ff0a 	bl	8000584 <__aeabi_i2d>
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <_ZN15MotorController11updateSpeedEv+0x140>)
 8001776:	f7ff f899 	bl	80008ac <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b25      	ldr	r3, [pc, #148]	@ (800181c <_ZN15MotorController11updateSpeedEv+0x144>)
 8001788:	f7ff f890 	bl	80008ac <__aeabi_ddiv>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <_ZN15MotorController11updateSpeedEv+0x148>)
 800179a:	f7ff f887 	bl	80008ac <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	a318      	add	r3, pc, #96	@ (adr r3, 8001808 <_ZN15MotorController11updateSpeedEv+0x130>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7ff f87e 	bl	80008ac <__aeabi_ddiv>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f960 	bl	8000a7c <__aeabi_d2f>
 80017bc:	4602      	mov	r2, r0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COUNTER(_enc, 0);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	@ 0x24
    _currentSpeed *= _en_ctrl;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    return _currentSpeed;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ec:	ee07 3a90 	vmov	s15, r3
}
 80017f0:	eeb0 0a67 	vmov.f32	s0, s15
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdb0      	pop	{r4, r5, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w
 8001800:	51eb851f 	.word	0x51eb851f
 8001804:	40091eb8 	.word	0x40091eb8
 8001808:	47ae147b 	.word	0x47ae147b
 800180c:	3f847ae1 	.word	0x3f847ae1
 8001810:	40d80000 	.word	0x40d80000
 8001814:	40418000 	.word	0x40418000
 8001818:	40700000 	.word	0x40700000
 800181c:	40380000 	.word	0x40380000
 8001820:	40100000 	.word	0x40100000

08001824 <_ZN15MotorController7setgoalEf>:

void MotorController::setgoal(float target_height) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	ed87 0a00 	vstr	s0, [r7]
	_targrt_height  = target_height;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	641a      	str	r2, [r3, #64]	@ 0x40
	if(fabs(_targrt_height - _cascade_height) <= e){
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001846:	eeb0 0a67 	vmov.f32	s0, s15
 800184a:	f7ff fdda 	bl	8001402 <_ZSt4fabsf>
 800184e:	eeb0 7a40 	vmov.f32	s14, s0
 8001852:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <_ZN15MotorController7setgoalEf+0x9c>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	bf94      	ite	ls
 8001862:	2301      	movls	r3, #1
 8001864:	2300      	movhi	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <_ZN15MotorController7setgoalEf+0x54>
		setSpeed(0.0);
 800186c:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80018c4 <_ZN15MotorController7setgoalEf+0xa0>
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff fe71 	bl	8001558 <_ZN15MotorController8setSpeedEf>
	}
	else if(_targrt_height - _cascade_height>0) setSpeed(v);
	else setSpeed(-v);
}
 8001876:	e01f      	b.n	80018b8 <_ZN15MotorController7setgoalEf+0x94>
	else if(_targrt_height - _cascade_height>0) setSpeed(v);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001888:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	dd08      	ble.n	80018a4 <_ZN15MotorController7setgoalEf+0x80>
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <_ZN15MotorController7setgoalEf+0xa4>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	eeb0 0a67 	vmov.f32	s0, s15
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff fe5b 	bl	8001558 <_ZN15MotorController8setSpeedEf>
}
 80018a2:	e009      	b.n	80018b8 <_ZN15MotorController7setgoalEf+0x94>
	else setSpeed(-v);
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <_ZN15MotorController7setgoalEf+0xa4>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	eef1 7a67 	vneg.f32	s15, s15
 80018ae:	eeb0 0a67 	vmov.f32	s0, s15
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fe50 	bl	8001558 <_ZN15MotorController8setSpeedEf>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000014 	.word	0x20000014
 80018c4:	00000000 	.word	0x00000000
 80018c8:	20000010 	.word	0x20000010

080018cc <_ZN15MotorController12goal_reachedEv>:

bool MotorController::goal_reached(){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
    if(fabs(_cascade_height-_targrt_height )<= e){
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	ed93 7a00 	vldr	s14, [r3]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80018e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e4:	eeb0 0a67 	vmov.f32	s0, s15
 80018e8:	f7ff fd8b 	bl	8001402 <_ZSt4fabsf>
 80018ec:	eeb0 7a40 	vmov.f32	s14, s0
 80018f0:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <_ZN15MotorController12goal_reachedEv+0x4c>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	bf94      	ite	ls
 8001900:	2301      	movls	r3, #1
 8001902:	2300      	movhi	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <_ZN15MotorController12goal_reachedEv+0x42>
        return true;
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <_ZN15MotorController12goal_reachedEv+0x44>
    } else
        return false;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000014 	.word	0x20000014

0800191c <mission_ctrl>:

void mission_init(void){
    arm_init();
}

void mission_ctrl(void){
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af02      	add	r7, sp, #8
    if(prev_mission_type != mission_type){
 8001922:	4b1d      	ldr	r3, [pc, #116]	@ (8001998 <mission_ctrl+0x7c>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <mission_ctrl+0x80>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d030      	beq.n	8001990 <mission_ctrl+0x74>
        prev_mission_type = mission_type;
 800192e:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <mission_ctrl+0x80>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a19      	ldr	r2, [pc, #100]	@ (8001998 <mission_ctrl+0x7c>)
 8001934:	6013      	str	r3, [r2, #0]
        task_created = 1;
 8001936:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <mission_ctrl+0x84>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]
        switch (mission_type)
 800193c:	4b17      	ldr	r3, [pc, #92]	@ (800199c <mission_ctrl+0x80>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d002      	beq.n	800194a <mission_ctrl+0x2e>
 8001944:	2b02      	cmp	r3, #2
 8001946:	d010      	beq.n	800196a <mission_ctrl+0x4e>
            if (!task_created) {
                xTaskCreate(mission_2, "mission_2", 512, NULL, 2, NULL);
            }
            break;
        default:
            break;
 8001948:	e022      	b.n	8001990 <mission_ctrl+0x74>
            if (!task_created) {
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <mission_ctrl+0x84>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d11b      	bne.n	800198a <mission_ctrl+0x6e>
                xTaskCreate(mission_1, "mission_1", 512, NULL, 2, NULL);
 8001952:	2300      	movs	r3, #0
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	2302      	movs	r3, #2
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001960:	4910      	ldr	r1, [pc, #64]	@ (80019a4 <mission_ctrl+0x88>)
 8001962:	4811      	ldr	r0, [pc, #68]	@ (80019a8 <mission_ctrl+0x8c>)
 8001964:	f007 f8d4 	bl	8008b10 <xTaskCreate>
            break;
 8001968:	e00f      	b.n	800198a <mission_ctrl+0x6e>
            if (!task_created) {
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <mission_ctrl+0x84>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10d      	bne.n	800198e <mission_ctrl+0x72>
                xTaskCreate(mission_2, "mission_2", 512, NULL, 2, NULL);
 8001972:	2300      	movs	r3, #0
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	2302      	movs	r3, #2
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2300      	movs	r3, #0
 800197c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001980:	490a      	ldr	r1, [pc, #40]	@ (80019ac <mission_ctrl+0x90>)
 8001982:	480b      	ldr	r0, [pc, #44]	@ (80019b0 <mission_ctrl+0x94>)
 8001984:	f007 f8c4 	bl	8008b10 <xTaskCreate>
            break;
 8001988:	e001      	b.n	800198e <mission_ctrl+0x72>
            break;
 800198a:	bf00      	nop
 800198c:	e000      	b.n	8001990 <mission_ctrl+0x74>
            break;
 800198e:	bf00      	nop
        }
    }
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000204 	.word	0x20000204
 800199c:	20000200 	.word	0x20000200
 80019a0:	2000020c 	.word	0x2000020c
 80019a4:	08019248 	.word	0x08019248
 80019a8:	080019b5 	.word	0x080019b5
 80019ac:	08019254 	.word	0x08019254
 80019b0:	08001a01 	.word	0x08001a01

080019b4 <mission_1>:

void mission_1(void *pvParameters){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    mission_status = 0 + 10*mission_type;
 80019bc:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <mission_1+0x40>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <mission_1+0x44>)
 80019cc:	601a      	str	r2, [r3, #0]
    
    /* add motion here */
    
    /* add motion here */

    mission_status = 1 + 10*mission_type;
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <mission_1+0x40>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	3301      	adds	r3, #1
 80019dc:	4a06      	ldr	r2, [pc, #24]	@ (80019f8 <mission_1+0x44>)
 80019de:	6013      	str	r3, [r2, #0]
    task_created = 0;
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <mission_1+0x48>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
    vTaskDelete(NULL);  // Delete current task when mission is complete
 80019e6:	2000      	movs	r0, #0
 80019e8:	f007 f9f0 	bl	8008dcc <vTaskDelete>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000200 	.word	0x20000200
 80019f8:	20000208 	.word	0x20000208
 80019fc:	2000020c 	.word	0x2000020c

08001a00 <mission_2>:

void mission_2(void *pvParameters){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    mission_status = 0 + 10*mission_type;
 8001a08:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <mission_2+0x40>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <mission_2+0x44>)
 8001a18:	601a      	str	r2, [r3, #0]

    /* add motion here */
    
    /* add motion here */

    mission_status = 1 + 10*mission_type;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <mission_2+0x40>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a06      	ldr	r2, [pc, #24]	@ (8001a44 <mission_2+0x44>)
 8001a2a:	6013      	str	r3, [r2, #0]
    task_created = 0;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <mission_2+0x48>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
    vTaskDelete(NULL);  // Delete current task when mission is complete
 8001a32:	2000      	movs	r0, #0
 8001a34:	f007 f9ca 	bl	8008dcc <vTaskDelete>
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000200 	.word	0x20000200
 8001a44:	20000208 	.word	0x20000208
 8001a48:	2000020c 	.word	0x2000020c

08001a4c <uros_init>:
#define MAX_PING_FAIL_COUNT 5


extern UART_HandleTypeDef USARTx;

void uros_init(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af02      	add	r7, sp, #8
  // Initialize micro-ROS
  rmw_uros_set_custom_transport(
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <uros_init+0x58>)
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <uros_init+0x5c>)
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <uros_init+0x60>)
 8001a5c:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <uros_init+0x64>)
 8001a5e:	4915      	ldr	r1, [pc, #84]	@ (8001ab4 <uros_init+0x68>)
 8001a60:	2001      	movs	r0, #1
 8001a62:	f00b fbb7 	bl	800d1d4 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);
  
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f00a ffcb 	bl	800ca04 <rcutils_get_zero_initialized_allocator>

  freeRTOS_allocator.allocate = microros_allocate;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <uros_init+0x6c>)
 8001a70:	607b      	str	r3, [r7, #4]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <uros_init+0x70>)
 8001a74:	60bb      	str	r3, [r7, #8]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <uros_init+0x74>)
 8001a78:	60fb      	str	r3, [r7, #12]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <uros_init+0x78>)
 8001a7c:	613b      	str	r3, [r7, #16]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00a ffcd 	bl	800ca20 <rcutils_set_default_allocator>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f083 0301 	eor.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <uros_init+0x4e>
  printf("Error on default allocators (line %d)\n", __LINE__); 
 8001a92:	2138      	movs	r1, #56	@ 0x38
 8001a94:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <uros_init+0x7c>)
 8001a96:	f016 fadf 	bl	8018058 <iprintf>
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	08002371 	.word	0x08002371
 8001aa8:	08002309 	.word	0x08002309
 8001aac:	080022e9 	.word	0x080022e9
 8001ab0:	080022bd 	.word	0x080022bd
 8001ab4:	2000489c 	.word	0x2000489c
 8001ab8:	08002a81 	.word	0x08002a81
 8001abc:	08002ac5 	.word	0x08002ac5
 8001ac0:	08002afd 	.word	0x08002afd
 8001ac4:	08002b69 	.word	0x08002b69
 8001ac8:	08019260 	.word	0x08019260

08001acc <uros_agent_status_check>:

void uros_agent_status_check(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  switch (status) {
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <uros_agent_status_check+0x4c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d81c      	bhi.n	8001b12 <uros_agent_status_check+0x46>
 8001ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae0 <uros_agent_status_check+0x14>)
 8001ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ade:	bf00      	nop
 8001ae0:	08001af5 	.word	0x08001af5
 8001ae4:	08001afb 	.word	0x08001afb
 8001ae8:	08001b01 	.word	0x08001b01
 8001aec:	08001b07 	.word	0x08001b07
 8001af0:	08001b0d 	.word	0x08001b0d
    case AGENT_WAITING:
      handle_state_agent_waiting();
 8001af4:	f000 f812 	bl	8001b1c <handle_state_agent_waiting>
      break;
 8001af8:	e00c      	b.n	8001b14 <uros_agent_status_check+0x48>
    case AGENT_AVAILABLE:
      handle_state_agent_available();
 8001afa:	f000 f821 	bl	8001b40 <handle_state_agent_available>
      break;
 8001afe:	e009      	b.n	8001b14 <uros_agent_status_check+0x48>
    case AGENT_CONNECTED:
      handle_state_agent_connected();
 8001b00:	f000 f82a 	bl	8001b58 <handle_state_agent_connected>
      break;
 8001b04:	e006      	b.n	8001b14 <uros_agent_status_check+0x48>
    case AGENT_TRYING:
      handle_state_agent_trying();
 8001b06:	f000 f859 	bl	8001bbc <handle_state_agent_trying>
      break;
 8001b0a:	e003      	b.n	8001b14 <uros_agent_status_check+0x48>
    case AGENT_DISCONNECTED:
      handle_state_agent_disconnected();
 8001b0c:	f000 f880 	bl	8001c10 <handle_state_agent_disconnected>
      break;
 8001b10:	e000      	b.n	8001b14 <uros_agent_status_check+0x48>
    default:
      break;
 8001b12:	bf00      	nop
  }
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000300 	.word	0x20000300

08001b1c <handle_state_agent_waiting>:

void handle_state_agent_waiting(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  status = (rmw_uros_ping_agent(100, 10) == RMW_RET_OK) ? AGENT_AVAILABLE : AGENT_WAITING;
 8001b20:	210a      	movs	r1, #10
 8001b22:	2064      	movs	r0, #100	@ 0x64
 8001b24:	f00b fb6c 	bl	800d200 <rmw_uros_ping_agent>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <handle_state_agent_waiting+0x16>
 8001b2e:	2201      	movs	r2, #1
 8001b30:	e000      	b.n	8001b34 <handle_state_agent_waiting+0x18>
 8001b32:	2200      	movs	r2, #0
 8001b34:	4b01      	ldr	r3, [pc, #4]	@ (8001b3c <handle_state_agent_waiting+0x20>)
 8001b36:	701a      	strb	r2, [r3, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000300 	.word	0x20000300

08001b40 <handle_state_agent_available>:
void handle_state_agent_available(void) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  uros_create_entities();
 8001b44:	f000 f870 	bl	8001c28 <uros_create_entities>
  status = AGENT_CONNECTED;
 8001b48:	4b02      	ldr	r3, [pc, #8]	@ (8001b54 <handle_state_agent_available+0x14>)
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000300 	.word	0x20000300

08001b58 <handle_state_agent_connected>:
void handle_state_agent_connected(void) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(20, 5) == RMW_RET_OK){
 8001b5c:	2105      	movs	r1, #5
 8001b5e:	2014      	movs	r0, #20
 8001b60:	f00b fb4e 	bl	800d200 <rmw_uros_ping_agent>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d009      	beq.n	8001b88 <handle_state_agent_connected+0x30>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(50));
 8001b74:	a30f      	add	r3, pc, #60	@ (adr r3, 8001bb4 <handle_state_agent_connected+0x5c>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	480b      	ldr	r0, [pc, #44]	@ (8001ba8 <handle_state_agent_connected+0x50>)
 8001b7c:	f00a fdce 	bl	800c71c <rclc_executor_spin_some>
    ping_fail_count = 0; // Reset ping fail count
 8001b80:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <handle_state_agent_connected+0x54>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
    ping_fail_count++;
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_TRYING;
    }
  }
}
 8001b86:	e00b      	b.n	8001ba0 <handle_state_agent_connected+0x48>
    ping_fail_count++;
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <handle_state_agent_connected+0x54>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	4a07      	ldr	r2, [pc, #28]	@ (8001bac <handle_state_agent_connected+0x54>)
 8001b90:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <handle_state_agent_connected+0x54>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	dd02      	ble.n	8001ba0 <handle_state_agent_connected+0x48>
      status = AGENT_TRYING;
 8001b9a:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <handle_state_agent_connected+0x58>)
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	701a      	strb	r2, [r3, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	20000278 	.word	0x20000278
 8001bac:	20000304 	.word	0x20000304
 8001bb0:	20000300 	.word	0x20000300
 8001bb4:	02faf080 	.word	0x02faf080
 8001bb8:	00000000 	.word	0x00000000

08001bbc <handle_state_agent_trying>:
void handle_state_agent_trying(void) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(50, 10) == RMW_RET_OK){
 8001bc0:	210a      	movs	r1, #10
 8001bc2:	2032      	movs	r0, #50	@ 0x32
 8001bc4:	f00b fb1c 	bl	800d200 <rmw_uros_ping_agent>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bf0c      	ite	eq
 8001bce:	2301      	moveq	r3, #1
 8001bd0:	2300      	movne	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <handle_state_agent_trying+0x2a>
    status = AGENT_CONNECTED;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <handle_state_agent_trying+0x4c>)
 8001bda:	2202      	movs	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
    ping_fail_count = 0; // Reset ping fail count
 8001bde:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <handle_state_agent_trying+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_DISCONNECTED;
      ping_fail_count = 0;
    }
  }
}
 8001be4:	e00e      	b.n	8001c04 <handle_state_agent_trying+0x48>
    ping_fail_count++;
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <handle_state_agent_trying+0x50>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	3301      	adds	r3, #1
 8001bec:	4a07      	ldr	r2, [pc, #28]	@ (8001c0c <handle_state_agent_trying+0x50>)
 8001bee:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <handle_state_agent_trying+0x50>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	dd05      	ble.n	8001c04 <handle_state_agent_trying+0x48>
      status = AGENT_DISCONNECTED;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <handle_state_agent_trying+0x4c>)
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	701a      	strb	r2, [r3, #0]
      ping_fail_count = 0;
 8001bfe:	4b03      	ldr	r3, [pc, #12]	@ (8001c0c <handle_state_agent_trying+0x50>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000300 	.word	0x20000300
 8001c0c:	20000304 	.word	0x20000304

08001c10 <handle_state_agent_disconnected>:
void handle_state_agent_disconnected(void) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  uros_destroy_entities();
 8001c14:	f000 f8a0 	bl	8001d58 <uros_destroy_entities>
  status = AGENT_WAITING;
 8001c18:	4b02      	ldr	r3, [pc, #8]	@ (8001c24 <handle_state_agent_disconnected+0x14>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000300 	.word	0x20000300

08001c28 <uros_create_entities>:


void uros_create_entities(void) {
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af02      	add	r7, sp, #8
  allocator = rcl_get_default_allocator();
 8001c2e:	4c3a      	ldr	r4, [pc, #232]	@ (8001d18 <uros_create_entities+0xf0>)
 8001c30:	463b      	mov	r3, r7
 8001c32:	4618      	mov	r0, r3
 8001c34:	f00a ff12 	bl	800ca5c <rcutils_get_default_allocator>
 8001c38:	4625      	mov	r5, r4
 8001c3a:	463c      	mov	r4, r7
 8001c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	602b      	str	r3, [r5, #0]

  init_options = rcl_get_zero_initialized_init_options();
 8001c44:	f008 ff02 	bl	800aa4c <rcl_get_zero_initialized_init_options>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4a34      	ldr	r2, [pc, #208]	@ (8001d1c <uros_create_entities+0xf4>)
 8001c4c:	6013      	str	r3, [r2, #0]
  rcl_init_options_init(&init_options, allocator);
 8001c4e:	4b32      	ldr	r3, [pc, #200]	@ (8001d18 <uros_create_entities+0xf0>)
 8001c50:	466c      	mov	r4, sp
 8001c52:	f103 020c 	add.w	r2, r3, #12
 8001c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c5a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c60:	482e      	ldr	r0, [pc, #184]	@ (8001d1c <uros_create_entities+0xf4>)
 8001c62:	f008 fef5 	bl	800aa50 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, DOMAIN_ID);
 8001c66:	2100      	movs	r1, #0
 8001c68:	482c      	ldr	r0, [pc, #176]	@ (8001d1c <uros_create_entities+0xf4>)
 8001c6a:	f008 ffed 	bl	800ac48 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator); // Initialize support structure
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d18 <uros_create_entities+0xf0>)
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <uros_create_entities+0xf4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	4829      	ldr	r0, [pc, #164]	@ (8001d20 <uros_create_entities+0xf8>)
 8001c7a:	f00a fd89 	bl	800c790 <rclc_support_init_with_options>

  rcl_init_options_fini(&init_options);
 8001c7e:	4827      	ldr	r0, [pc, #156]	@ (8001d1c <uros_create_entities+0xf4>)
 8001c80:	f008 ff4c 	bl	800ab1c <rcl_init_options_fini>
  
  rclc_node_init_default(&node, NODE_NAME, "", &support);                       // Initialize node
 8001c84:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <uros_create_entities+0xf8>)
 8001c86:	4a27      	ldr	r2, [pc, #156]	@ (8001d24 <uros_create_entities+0xfc>)
 8001c88:	4927      	ldr	r1, [pc, #156]	@ (8001d28 <uros_create_entities+0x100>)
 8001c8a:	4828      	ldr	r0, [pc, #160]	@ (8001d2c <uros_create_entities+0x104>)
 8001c8c:	f00a fdde 	bl	800c84c <rclc_node_init_default>

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 8001c90:	f00c fe32 	bl	800e8f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b26      	ldr	r3, [pc, #152]	@ (8001d30 <uros_create_entities+0x108>)
 8001c98:	4924      	ldr	r1, [pc, #144]	@ (8001d2c <uros_create_entities+0x104>)
 8001c9a:	4826      	ldr	r0, [pc, #152]	@ (8001d34 <uros_create_entities+0x10c>)
 8001c9c:	f00a fe12 	bl	800c8c4 <rclc_publisher_init_default>
    &arm_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/arm_status");
  arm_msg.data = -1;
 8001ca0:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <uros_create_entities+0x110>)
 8001ca2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ca6:	601a      	str	r2, [r3, #0]

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 8001ca8:	4822      	ldr	r0, [pc, #136]	@ (8001d34 <uros_create_entities+0x10c>)
 8001caa:	f009 fac5 	bl	800b238 <rcl_publisher_get_rmw_handle>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	210a      	movs	r1, #10
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f00c fa96 	bl	800e1e4 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&arm_pub),
    10);

  rclc_subscription_init_default(                                               // Initialize subscriber for arm command
 8001cb8:	f00c fe1e 	bl	800e8f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <uros_create_entities+0x114>)
 8001cc0:	491a      	ldr	r1, [pc, #104]	@ (8001d2c <uros_create_entities+0x104>)
 8001cc2:	481f      	ldr	r0, [pc, #124]	@ (8001d40 <uros_create_entities+0x118>)
 8001cc4:	f00a fe32 	bl	800c92c <rclc_subscription_init_default>
    &cmd_arm_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/cmd_arm");
  cmd_arm_msg.data = -1;
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <uros_create_entities+0x11c>)
 8001cca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cce:	601a      	str	r2, [r3, #0]

  rclc_timer_init_default(                                                      // Initialize timer for publishing pose
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <uros_create_entities+0x120>)
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001d10 <uros_create_entities+0xe8>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	4911      	ldr	r1, [pc, #68]	@ (8001d20 <uros_create_entities+0xf8>)
 8001cdc:	481b      	ldr	r0, [pc, #108]	@ (8001d4c <uros_create_entities+0x124>)
 8001cde:	f00a fe59 	bl	800c994 <rclc_timer_init_default>
    &pub_timer,
    &support,
    RCL_MS_TO_NS(100),
    pub_timer_cb);

  rclc_executor_init(&executor, &support.context, 2, &allocator);               // Create executor (1 timer + 2 subscriptions)
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <uros_create_entities+0xf0>)
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	490e      	ldr	r1, [pc, #56]	@ (8001d20 <uros_create_entities+0xf8>)
 8001ce8:	4819      	ldr	r0, [pc, #100]	@ (8001d50 <uros_create_entities+0x128>)
 8001cea:	f00a fa29 	bl	800c140 <rclc_executor_init>
  rclc_executor_add_subscription(&executor, &cmd_arm_sub, &cmd_arm_msg, &cmd_arm_sub_cb, ON_NEW_DATA); // Add arm subscriber to executor
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <uros_create_entities+0x12c>)
 8001cf4:	4a13      	ldr	r2, [pc, #76]	@ (8001d44 <uros_create_entities+0x11c>)
 8001cf6:	4912      	ldr	r1, [pc, #72]	@ (8001d40 <uros_create_entities+0x118>)
 8001cf8:	4815      	ldr	r0, [pc, #84]	@ (8001d50 <uros_create_entities+0x128>)
 8001cfa:	f00a fac5 	bl	800c288 <rclc_executor_add_subscription>
  rclc_executor_add_timer(&executor, &pub_timer); // Add pose publisher timer to executor
 8001cfe:	4913      	ldr	r1, [pc, #76]	@ (8001d4c <uros_create_entities+0x124>)
 8001d00:	4813      	ldr	r0, [pc, #76]	@ (8001d50 <uros_create_entities+0x128>)
 8001d02:	f00a faf5 	bl	800c2f0 <rclc_executor_add_timer>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	05f5e100 	.word	0x05f5e100
 8001d14:	00000000 	.word	0x00000000
 8001d18:	20000258 	.word	0x20000258
 8001d1c:	20000274 	.word	0x20000274
 8001d20:	20000224 	.word	0x20000224
 8001d24:	08019288 	.word	0x08019288
 8001d28:	0801928c 	.word	0x0801928c
 8001d2c:	2000026c 	.word	0x2000026c
 8001d30:	0801929c 	.word	0x0801929c
 8001d34:	20000210 	.word	0x20000210
 8001d38:	20000214 	.word	0x20000214
 8001d3c:	080192b0 	.word	0x080192b0
 8001d40:	20000218 	.word	0x20000218
 8001d44:	2000021c 	.word	0x2000021c
 8001d48:	08001de9 	.word	0x08001de9
 8001d4c:	20000220 	.word	0x20000220
 8001d50:	20000278 	.word	0x20000278
 8001d54:	08001db9 	.word	0x08001db9

08001d58 <uros_destroy_entities>:
void uros_destroy_entities(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
  rmw_context_t* rmw_context = rcl_context_get_rmw_context(&support.context);
 8001d5e:	4810      	ldr	r0, [pc, #64]	@ (8001da0 <uros_destroy_entities+0x48>)
 8001d60:	f008 fdfa 	bl	800a958 <rcl_context_get_rmw_context>
 8001d64:	6078      	str	r0, [r7, #4]
  (void) rmw_uros_set_context_entity_destroy_session_timeout(rmw_context, 0);
 8001d66:	2100      	movs	r1, #0
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f00c fa43 	bl	800e1f4 <rmw_uros_set_context_entity_destroy_session_timeout>

  // Destroy publisher
  rcl_publisher_fini(&arm_pub, &node);
 8001d6e:	490d      	ldr	r1, [pc, #52]	@ (8001da4 <uros_destroy_entities+0x4c>)
 8001d70:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <uros_destroy_entities+0x50>)
 8001d72:	f009 f9e3 	bl	800b13c <rcl_publisher_fini>

  // Destroy subscription
  rcl_subscription_fini(&cmd_arm_sub, &node);
 8001d76:	490b      	ldr	r1, [pc, #44]	@ (8001da4 <uros_destroy_entities+0x4c>)
 8001d78:	480c      	ldr	r0, [pc, #48]	@ (8001dac <uros_destroy_entities+0x54>)
 8001d7a:	f009 fb33 	bl	800b3e4 <rcl_subscription_fini>

  // Destroy timer
  rcl_timer_fini(&pub_timer);
 8001d7e:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <uros_destroy_entities+0x58>)
 8001d80:	f009 fd64 	bl	800b84c <rcl_timer_fini>

  // Destroy executor
  rclc_executor_fini(&executor);
 8001d84:	480b      	ldr	r0, [pc, #44]	@ (8001db4 <uros_destroy_entities+0x5c>)
 8001d86:	f00a fa4b 	bl	800c220 <rclc_executor_fini>

  // Destroy node
  rcl_node_fini(&node);
 8001d8a:	4806      	ldr	r0, [pc, #24]	@ (8001da4 <uros_destroy_entities+0x4c>)
 8001d8c:	f009 f8b4 	bl	800aef8 <rcl_node_fini>
  rclc_support_fini(&support);
 8001d90:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <uros_destroy_entities+0x48>)
 8001d92:	f00a fd31 	bl	800c7f8 <rclc_support_fini>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000224 	.word	0x20000224
 8001da4:	2000026c 	.word	0x2000026c
 8001da8:	20000210 	.word	0x20000210
 8001dac:	20000218 	.word	0x20000218
 8001db0:	20000220 	.word	0x20000220
 8001db4:	20000278 	.word	0x20000278

08001db8 <cmd_arm_sub_cb>:


void cmd_arm_sub_cb(const void* msgin) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	60fb      	str	r3, [r7, #12]
  cmd_arm_msg = *msg;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	@ (8001de0 <cmd_arm_sub_cb+0x28>)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6013      	str	r3, [r2, #0]
  mission_type = cmd_arm_msg.data;
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <cmd_arm_sub_cb+0x28>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <cmd_arm_sub_cb+0x2c>)
 8001dd2:	6013      	str	r3, [r2, #0]
  mission_ctrl();
 8001dd4:	f7ff fda2 	bl	800191c <mission_ctrl>
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	2000021c 	.word	0x2000021c
 8001de4:	20000200 	.word	0x20000200

08001de8 <pub_timer_cb>:

void pub_timer_cb(rcl_timer_t * timer, int64_t last_call_time){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	e9c7 2300 	strd	r2, r3, [r7]
  arm_msg.data = mission_status;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <pub_timer_cb+0x28>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a06      	ldr	r2, [pc, #24]	@ (8001e14 <pub_timer_cb+0x2c>)
 8001dfa:	6013      	str	r3, [r2, #0]
	rcl_publish(&arm_pub, &arm_msg, NULL);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4905      	ldr	r1, [pc, #20]	@ (8001e14 <pub_timer_cb+0x2c>)
 8001e00:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <pub_timer_cb+0x30>)
 8001e02:	f009 f9f5 	bl	800b1f0 <rcl_publish>
}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000208 	.word	0x20000208
 8001e14:	20000214 	.word	0x20000214
 8001e18:	20000210 	.word	0x20000210

08001e1c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	@ 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001e28:	f007 f8ea 	bl	8009000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8001f98 <pvPortMallocMicroROS+0x17c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001e34:	f000 f986 	bl	8002144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001e38:	4b58      	ldr	r3, [pc, #352]	@ (8001f9c <pvPortMallocMicroROS+0x180>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f040 8090 	bne.w	8001f66 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01e      	beq.n	8001e8a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d015      	beq.n	8001e8a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f023 0307 	bic.w	r3, r3, #7
 8001e64:	3308      	adds	r3, #8
 8001e66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e76:	f383 8811 	msr	BASEPRI, r3
 8001e7a:	f3bf 8f6f 	isb	sy
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	e7fd      	b.n	8001e86 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d06a      	beq.n	8001f66 <pvPortMallocMicroROS+0x14a>
 8001e90:	4b43      	ldr	r3, [pc, #268]	@ (8001fa0 <pvPortMallocMicroROS+0x184>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d865      	bhi.n	8001f66 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001e9a:	4b42      	ldr	r3, [pc, #264]	@ (8001fa4 <pvPortMallocMicroROS+0x188>)
 8001e9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001e9e:	4b41      	ldr	r3, [pc, #260]	@ (8001fa4 <pvPortMallocMicroROS+0x188>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001ea4:	e004      	b.n	8001eb0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d903      	bls.n	8001ec2 <pvPortMallocMicroROS+0xa6>
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f1      	bne.n	8001ea6 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001ec2:	4b35      	ldr	r3, [pc, #212]	@ (8001f98 <pvPortMallocMicroROS+0x17c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d04c      	beq.n	8001f66 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	4413      	add	r3, r2
 8001ed4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	1ad2      	subs	r2, r2, r3
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d920      	bls.n	8001f30 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00b      	beq.n	8001f18 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f04:	f383 8811 	msr	BASEPRI, r3
 8001f08:	f3bf 8f6f 	isb	sy
 8001f0c:	f3bf 8f4f 	dsb	sy
 8001f10:	613b      	str	r3, [r7, #16]
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1ad2      	subs	r2, r2, r3
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001f2a:	69b8      	ldr	r0, [r7, #24]
 8001f2c:	f000 f96c 	bl	8002208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <pvPortMallocMicroROS+0x184>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	4a19      	ldr	r2, [pc, #100]	@ (8001fa0 <pvPortMallocMicroROS+0x184>)
 8001f3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001f3e:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <pvPortMallocMicroROS+0x184>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b19      	ldr	r3, [pc, #100]	@ (8001fa8 <pvPortMallocMicroROS+0x18c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d203      	bcs.n	8001f52 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <pvPortMallocMicroROS+0x184>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <pvPortMallocMicroROS+0x18c>)
 8001f50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <pvPortMallocMicroROS+0x180>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001f66:	f007 f859 	bl	800901c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00b      	beq.n	8001f8c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f78:	f383 8811 	msr	BASEPRI, r3
 8001f7c:	f3bf 8f6f 	isb	sy
 8001f80:	f3bf 8f4f 	dsb	sy
 8001f84:	60fb      	str	r3, [r7, #12]
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3728      	adds	r7, #40	@ 0x28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20003f10 	.word	0x20003f10
 8001f9c:	20003f1c 	.word	0x20003f1c
 8001fa0:	20003f14 	.word	0x20003f14
 8001fa4:	20003f08 	.word	0x20003f08
 8001fa8:	20003f18 	.word	0x20003f18

08001fac <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d04a      	beq.n	8002054 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	425b      	negs	r3, r3
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4b22      	ldr	r3, [pc, #136]	@ (800205c <vPortFreeMicroROS+0xb0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10b      	bne.n	8001ff2 <vPortFreeMicroROS+0x46>
	__asm volatile
 8001fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fde:	f383 8811 	msr	BASEPRI, r3
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	f3bf 8f4f 	dsb	sy
 8001fea:	60fb      	str	r3, [r7, #12]
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	e7fd      	b.n	8001fee <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <vPortFreeMicroROS+0x66>
	__asm volatile
 8001ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ffe:	f383 8811 	msr	BASEPRI, r3
 8002002:	f3bf 8f6f 	isb	sy
 8002006:	f3bf 8f4f 	dsb	sy
 800200a:	60bb      	str	r3, [r7, #8]
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	e7fd      	b.n	800200e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <vPortFreeMicroROS+0xb0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d019      	beq.n	8002054 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d115      	bne.n	8002054 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <vPortFreeMicroROS+0xb0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	43db      	mvns	r3, r3
 8002032:	401a      	ands	r2, r3
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002038:	f006 ffe2 	bl	8009000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <vPortFreeMicroROS+0xb4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4413      	add	r3, r2
 8002046:	4a06      	ldr	r2, [pc, #24]	@ (8002060 <vPortFreeMicroROS+0xb4>)
 8002048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800204a:	6938      	ldr	r0, [r7, #16]
 800204c:	f000 f8dc 	bl	8002208 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002050:	f006 ffe4 	bl	800901c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002054:	bf00      	nop
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20003f1c 	.word	0x20003f1c
 8002060:	20003f14 	.word	0x20003f14

08002064 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002070:	2308      	movs	r3, #8
 8002072:	425b      	negs	r3, r3
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	4413      	add	r3, r2
 8002078:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	4b06      	ldr	r3, [pc, #24]	@ (800209c <getBlockSize+0x38>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	43db      	mvns	r3, r3
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]

	return count;
 800208c:	68fb      	ldr	r3, [r7, #12]
}
 800208e:	4618      	mov	r0, r3
 8002090:	371c      	adds	r7, #28
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20003f1c 	.word	0x20003f1c

080020a0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80020aa:	f006 ffa9 	bl	8009000 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80020ae:	6838      	ldr	r0, [r7, #0]
 80020b0:	f7ff feb4 	bl	8001e1c <pvPortMallocMicroROS>
 80020b4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d017      	beq.n	80020ec <pvPortReallocMicroROS+0x4c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d014      	beq.n	80020ec <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffce 	bl	8002064 <getBlockSize>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2208      	movs	r2, #8
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d201      	bcs.n	80020dc <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	68b8      	ldr	r0, [r7, #8]
 80020e2:	f016 f9d2 	bl	801848a <memcpy>

		vPortFreeMicroROS(pv);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ff60 	bl	8001fac <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80020ec:	f006 ff96 	bl	800901c <xTaskResumeAll>

	return newmem;
 80020f0:	68bb      	ldr	r3, [r7, #8]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002104:	f006 ff7c 	bl	8009000 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff fe82 	bl	8001e1c <pvPortMallocMicroROS>
 8002118:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800211e:	e004      	b.n	800212a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	613a      	str	r2, [r7, #16]
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	1e5a      	subs	r2, r3, #1
 800212e:	617a      	str	r2, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f5      	bne.n	8002120 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002134:	f006 ff72 	bl	800901c <xTaskResumeAll>
  	return mem;
 8002138:	68fb      	ldr	r3, [r7, #12]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800214a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800214e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002150:	4b27      	ldr	r3, [pc, #156]	@ (80021f0 <prvHeapInit+0xac>)
 8002152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00c      	beq.n	8002178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3307      	adds	r3, #7
 8002162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0307 	bic.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	4a1f      	ldr	r2, [pc, #124]	@ (80021f0 <prvHeapInit+0xac>)
 8002174:	4413      	add	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800217c:	4a1d      	ldr	r2, [pc, #116]	@ (80021f4 <prvHeapInit+0xb0>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <prvHeapInit+0xb0>)
 8002184:	2200      	movs	r2, #0
 8002186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002190:	2208      	movs	r2, #8
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0307 	bic.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4a15      	ldr	r2, [pc, #84]	@ (80021f8 <prvHeapInit+0xb4>)
 80021a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80021a6:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <prvHeapInit+0xb4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80021ae:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <prvHeapInit+0xb4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	1ad2      	subs	r2, r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <prvHeapInit+0xb4>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a0a      	ldr	r2, [pc, #40]	@ (80021fc <prvHeapInit+0xb8>)
 80021d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a09      	ldr	r2, [pc, #36]	@ (8002200 <prvHeapInit+0xbc>)
 80021da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80021dc:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <prvHeapInit+0xc0>)
 80021de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80021e2:	601a      	str	r2, [r3, #0]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	20000308 	.word	0x20000308
 80021f4:	20003f08 	.word	0x20003f08
 80021f8:	20003f10 	.word	0x20003f10
 80021fc:	20003f18 	.word	0x20003f18
 8002200:	20003f14 	.word	0x20003f14
 8002204:	20003f1c 	.word	0x20003f1c

08002208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002210:	4b28      	ldr	r3, [pc, #160]	@ (80022b4 <prvInsertBlockIntoFreeList+0xac>)
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e002      	b.n	800221c <prvInsertBlockIntoFreeList+0x14>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	d8f7      	bhi.n	8002216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	4413      	add	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	429a      	cmp	r2, r3
 8002236:	d108      	bne.n	800224a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	441a      	add	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	441a      	add	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d118      	bne.n	8002290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <prvInsertBlockIntoFreeList+0xb0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d00d      	beq.n	8002286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	441a      	add	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e008      	b.n	8002298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002286:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <prvInsertBlockIntoFreeList+0xb0>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e003      	b.n	8002298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	d002      	beq.n	80022a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20003f08 	.word	0x20003f08
 80022b8:	20003f10 	.word	0x20003f10

080022bc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80022ca:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80022cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022d0:	4904      	ldr	r1, [pc, #16]	@ (80022e4 <cubemx_transport_open+0x28>)
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f004 fa84 	bl	80067e0 <HAL_UART_Receive_DMA>
    return true;
 80022d8:	2301      	movs	r3, #1
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20003f20 	.word	0x20003f20

080022e8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80022f6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f004 fa96 	bl	800682a <HAL_UART_DMAStop>
    return true;
 80022fe:	2301      	movs	r3, #1
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800231c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	d11c      	bne.n	8002364 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	b29b      	uxth	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f004 f9d8 	bl	80066e8 <HAL_UART_Transmit_DMA>
 8002338:	4603      	mov	r3, r0
 800233a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800233c:	e002      	b.n	8002344 <cubemx_transport_write+0x3c>
            osDelay(1);
 800233e:	2001      	movs	r0, #1
 8002340:	f005 fd88 	bl	8007e54 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <cubemx_transport_write+0x4e>
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	d1f3      	bne.n	800233e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <cubemx_transport_write+0x58>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	e002      	b.n	8002366 <cubemx_transport_write+0x5e>
 8002360:	2300      	movs	r3, #0
 8002362:	e000      	b.n	8002366 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002364:	2300      	movs	r3, #0
    }
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002384:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800238a:	b672      	cpsid	i
}
 800238c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800239a:	4a1c      	ldr	r2, [pc, #112]	@ (800240c <cubemx_transport_read+0x9c>)
 800239c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800239e:	b662      	cpsie	i
}
 80023a0:	bf00      	nop
        __enable_irq();
        ms_used++;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3301      	adds	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f005 fd53 	bl	8007e54 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80023ae:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <cubemx_transport_read+0xa0>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b16      	ldr	r3, [pc, #88]	@ (800240c <cubemx_transport_read+0x9c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d103      	bne.n	80023c2 <cubemx_transport_read+0x52>
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	dbe3      	blt.n	800238a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80023c6:	e011      	b.n	80023ec <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <cubemx_transport_read+0xa0>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	440b      	add	r3, r1
 80023d2:	4910      	ldr	r1, [pc, #64]	@ (8002414 <cubemx_transport_read+0xa4>)
 80023d4:	5c8a      	ldrb	r2, [r1, r2]
 80023d6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80023d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <cubemx_transport_read+0xa0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002410 <cubemx_transport_read+0xa0>)
 80023e4:	6013      	str	r3, [r2, #0]
        wrote++;
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	3301      	adds	r3, #1
 80023ea:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80023ec:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <cubemx_transport_read+0xa0>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <cubemx_transport_read+0x9c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d003      	beq.n	8002400 <cubemx_transport_read+0x90>
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d3e3      	bcc.n	80023c8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002400:	69bb      	ldr	r3, [r7, #24]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20004724 	.word	0x20004724
 8002410:	20004720 	.word	0x20004720
 8002414:	20003f20 	.word	0x20003f20

08002418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800241c:	f001 f920 	bl	8003660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002420:	f000 f826 	bl	8002470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002424:	f000 fa9a 	bl	800295c <MX_GPIO_Init>
  MX_DMA_Init();
 8002428:	f000 fa70 	bl	800290c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800242c:	f000 fa1a 	bl	8002864 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002430:	f000 f8be 	bl	80025b0 <MX_TIM1_Init>
  MX_TIM5_Init();
 8002434:	f000 f962 	bl	80026fc <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8002438:	f000 fa3e 	bl	80028b8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800243c:	f000 f88a 	bl	8002554 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002440:	f000 f90e 	bl	8002660 <MX_TIM4_Init>
  MX_TIM12_Init();
 8002444:	f000 f9be 	bl	80027c4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002448:	f005 fc28 	bl	8007c9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800244c:	4a05      	ldr	r2, [pc, #20]	@ (8002464 <main+0x4c>)
 800244e:	2100      	movs	r1, #0
 8002450:	4805      	ldr	r0, [pc, #20]	@ (8002468 <main+0x50>)
 8002452:	f005 fc6d 	bl	8007d30 <osThreadNew>
 8002456:	4603      	mov	r3, r0
 8002458:	4a04      	ldr	r2, [pc, #16]	@ (800246c <main+0x54>)
 800245a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800245c:	f005 fc42 	bl	8007ce4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <main+0x48>
 8002464:	08019308 	.word	0x08019308
 8002468:	080035b1 	.word	0x080035b1
 800246c:	200049ec 	.word	0x200049ec

08002470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b094      	sub	sp, #80	@ 0x50
 8002474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002476:	f107 031c 	add.w	r3, r7, #28
 800247a:	2234      	movs	r2, #52	@ 0x34
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f015 fedc 	bl	801823c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002484:	f107 0308 	add.w	r3, r7, #8
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002494:	2300      	movs	r3, #0
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	4b2c      	ldr	r3, [pc, #176]	@ (800254c <SystemClock_Config+0xdc>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	4a2b      	ldr	r2, [pc, #172]	@ (800254c <SystemClock_Config+0xdc>)
 800249e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a4:	4b29      	ldr	r3, [pc, #164]	@ (800254c <SystemClock_Config+0xdc>)
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b0:	2300      	movs	r3, #0
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4b26      	ldr	r3, [pc, #152]	@ (8002550 <SystemClock_Config+0xe0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a25      	ldr	r2, [pc, #148]	@ (8002550 <SystemClock_Config+0xe0>)
 80024ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b23      	ldr	r3, [pc, #140]	@ (8002550 <SystemClock_Config+0xe0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024cc:	2302      	movs	r3, #2
 80024ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024d4:	2310      	movs	r3, #16
 80024d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d8:	2302      	movs	r3, #2
 80024da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024dc:	2300      	movs	r3, #0
 80024de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024e0:	2308      	movs	r3, #8
 80024e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80024e4:	23b4      	movs	r3, #180	@ 0xb4
 80024e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024e8:	2302      	movs	r3, #2
 80024ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80024ec:	2302      	movs	r3, #2
 80024ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024f0:	2302      	movs	r3, #2
 80024f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f4:	f107 031c 	add.w	r3, r7, #28
 80024f8:	4618      	mov	r0, r3
 80024fa:	f002 fc27 	bl	8004d4c <HAL_RCC_OscConfig>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002504:	f000 fab6 	bl	8002a74 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002508:	f002 f8da 	bl	80046c0 <HAL_PWREx_EnableOverDrive>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002512:	f000 faaf 	bl	8002a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002516:	230f      	movs	r3, #15
 8002518:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800251a:	2302      	movs	r3, #2
 800251c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002522:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002526:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800252c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	2105      	movs	r1, #5
 8002534:	4618      	mov	r0, r3
 8002536:	f002 f913 	bl	8004760 <HAL_RCC_ClockConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002540:	f000 fa98 	bl	8002a74 <Error_Handler>
  }
}
 8002544:	bf00      	nop
 8002546:	3750      	adds	r7, #80	@ 0x50
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	40007000 	.word	0x40007000

08002554 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002558:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <MX_I2C1_Init+0x50>)
 800255a:	4a13      	ldr	r2, [pc, #76]	@ (80025a8 <MX_I2C1_Init+0x54>)
 800255c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <MX_I2C1_Init+0x50>)
 8002560:	4a12      	ldr	r2, [pc, #72]	@ (80025ac <MX_I2C1_Init+0x58>)
 8002562:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002564:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <MX_I2C1_Init+0x50>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800256a:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <MX_I2C1_Init+0x50>)
 800256c:	2200      	movs	r2, #0
 800256e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002570:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <MX_I2C1_Init+0x50>)
 8002572:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002576:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002578:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <MX_I2C1_Init+0x50>)
 800257a:	2200      	movs	r2, #0
 800257c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800257e:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <MX_I2C1_Init+0x50>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002584:	4b07      	ldr	r3, [pc, #28]	@ (80025a4 <MX_I2C1_Init+0x50>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <MX_I2C1_Init+0x50>)
 800258c:	2200      	movs	r2, #0
 800258e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002590:	4804      	ldr	r0, [pc, #16]	@ (80025a4 <MX_I2C1_Init+0x50>)
 8002592:	f001 ff51 	bl	8004438 <HAL_I2C_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800259c:	f000 fa6a 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20004728 	.word	0x20004728
 80025a8:	40005400 	.word	0x40005400
 80025ac:	000186a0 	.word	0x000186a0

080025b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	@ 0x30
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025b6:	f107 030c 	add.w	r3, r7, #12
 80025ba:	2224      	movs	r2, #36	@ 0x24
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f015 fe3c 	bl	801823c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025cc:	4b22      	ldr	r3, [pc, #136]	@ (8002658 <MX_TIM1_Init+0xa8>)
 80025ce:	4a23      	ldr	r2, [pc, #140]	@ (800265c <MX_TIM1_Init+0xac>)
 80025d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025d2:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <MX_TIM1_Init+0xa8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002658 <MX_TIM1_Init+0xa8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80025de:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <MX_TIM1_Init+0xa8>)
 80025e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002658 <MX_TIM1_Init+0xa8>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <MX_TIM1_Init+0xa8>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f2:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <MX_TIM1_Init+0xa8>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025f8:	2303      	movs	r3, #3
 80025fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002600:	2301      	movs	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002610:	2301      	movs	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002614:	2300      	movs	r3, #0
 8002616:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800261c:	f107 030c 	add.w	r3, r7, #12
 8002620:	4619      	mov	r1, r3
 8002622:	480d      	ldr	r0, [pc, #52]	@ (8002658 <MX_TIM1_Init+0xa8>)
 8002624:	f003 f808 	bl	8005638 <HAL_TIM_Encoder_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800262e:	f000 fa21 	bl	8002a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	4619      	mov	r1, r3
 800263e:	4806      	ldr	r0, [pc, #24]	@ (8002658 <MX_TIM1_Init+0xa8>)
 8002640:	f003 fee6 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800264a:	f000 fa13 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	3730      	adds	r7, #48	@ 0x30
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000477c 	.word	0x2000477c
 800265c:	40010000 	.word	0x40010000

08002660 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002666:	f107 0308 	add.w	r3, r7, #8
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002674:	463b      	mov	r3, r7
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800267c:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <MX_TIM4_Init+0x94>)
 800267e:	4a1e      	ldr	r2, [pc, #120]	@ (80026f8 <MX_TIM4_Init+0x98>)
 8002680:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8002682:	4b1c      	ldr	r3, [pc, #112]	@ (80026f4 <MX_TIM4_Init+0x94>)
 8002684:	2259      	movs	r2, #89	@ 0x59
 8002686:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002688:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <MX_TIM4_Init+0x94>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800268e:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <MX_TIM4_Init+0x94>)
 8002690:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002694:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002696:	4b17      	ldr	r3, [pc, #92]	@ (80026f4 <MX_TIM4_Init+0x94>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269c:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <MX_TIM4_Init+0x94>)
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026a2:	4814      	ldr	r0, [pc, #80]	@ (80026f4 <MX_TIM4_Init+0x94>)
 80026a4:	f002 fdf0 	bl	8005288 <HAL_TIM_Base_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80026ae:	f000 f9e1 	bl	8002a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	4619      	mov	r1, r3
 80026be:	480d      	ldr	r0, [pc, #52]	@ (80026f4 <MX_TIM4_Init+0x94>)
 80026c0:	f003 faa0 	bl	8005c04 <HAL_TIM_ConfigClockSource>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80026ca:	f000 f9d3 	bl	8002a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026d6:	463b      	mov	r3, r7
 80026d8:	4619      	mov	r1, r3
 80026da:	4806      	ldr	r0, [pc, #24]	@ (80026f4 <MX_TIM4_Init+0x94>)
 80026dc:	f003 fe98 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80026e6:	f000 f9c5 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200047c4 	.word	0x200047c4
 80026f8:	40000800 	.word	0x40000800

080026fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	@ 0x28
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002702:	f107 0320 	add.w	r3, r7, #32
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	611a      	str	r2, [r3, #16]
 800271a:	615a      	str	r2, [r3, #20]
 800271c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800271e:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <MX_TIM5_Init+0xc0>)
 8002720:	4a27      	ldr	r2, [pc, #156]	@ (80027c0 <MX_TIM5_Init+0xc4>)
 8002722:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 8002724:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <MX_TIM5_Init+0xc0>)
 8002726:	2259      	movs	r2, #89	@ 0x59
 8002728:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272a:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <MX_TIM5_Init+0xc0>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8002730:	4b22      	ldr	r3, [pc, #136]	@ (80027bc <MX_TIM5_Init+0xc0>)
 8002732:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002736:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002738:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <MX_TIM5_Init+0xc0>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273e:	4b1f      	ldr	r3, [pc, #124]	@ (80027bc <MX_TIM5_Init+0xc0>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002744:	481d      	ldr	r0, [pc, #116]	@ (80027bc <MX_TIM5_Init+0xc0>)
 8002746:	f002 fe5f 	bl	8005408 <HAL_TIM_PWM_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002750:	f000 f990 	bl	8002a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002754:	2300      	movs	r3, #0
 8002756:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800275c:	f107 0320 	add.w	r3, r7, #32
 8002760:	4619      	mov	r1, r3
 8002762:	4816      	ldr	r0, [pc, #88]	@ (80027bc <MX_TIM5_Init+0xc0>)
 8002764:	f003 fe54 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800276e:	f000 f981 	bl	8002a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002772:	2360      	movs	r3, #96	@ 0x60
 8002774:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	4619      	mov	r1, r3
 8002788:	480c      	ldr	r0, [pc, #48]	@ (80027bc <MX_TIM5_Init+0xc0>)
 800278a:	f003 f979 	bl	8005a80 <HAL_TIM_PWM_ConfigChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002794:	f000 f96e 	bl	8002a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2204      	movs	r2, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4807      	ldr	r0, [pc, #28]	@ (80027bc <MX_TIM5_Init+0xc0>)
 80027a0:	f003 f96e 	bl	8005a80 <HAL_TIM_PWM_ConfigChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80027aa:	f000 f963 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80027ae:	4803      	ldr	r0, [pc, #12]	@ (80027bc <MX_TIM5_Init+0xc0>)
 80027b0:	f000 fbe6 	bl	8002f80 <HAL_TIM_MspPostInit>

}
 80027b4:	bf00      	nop
 80027b6:	3728      	adds	r7, #40	@ 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	2000480c 	.word	0x2000480c
 80027c0:	40000c00 	.word	0x40000c00

080027c4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
 80027d8:	615a      	str	r2, [r3, #20]
 80027da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80027dc:	4b1f      	ldr	r3, [pc, #124]	@ (800285c <MX_TIM12_Init+0x98>)
 80027de:	4a20      	ldr	r2, [pc, #128]	@ (8002860 <MX_TIM12_Init+0x9c>)
 80027e0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 90-1;
 80027e2:	4b1e      	ldr	r3, [pc, #120]	@ (800285c <MX_TIM12_Init+0x98>)
 80027e4:	2259      	movs	r2, #89	@ 0x59
 80027e6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e8:	4b1c      	ldr	r3, [pc, #112]	@ (800285c <MX_TIM12_Init+0x98>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 80027ee:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <MX_TIM12_Init+0x98>)
 80027f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027f4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f6:	4b19      	ldr	r3, [pc, #100]	@ (800285c <MX_TIM12_Init+0x98>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fc:	4b17      	ldr	r3, [pc, #92]	@ (800285c <MX_TIM12_Init+0x98>)
 80027fe:	2200      	movs	r2, #0
 8002800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002802:	4816      	ldr	r0, [pc, #88]	@ (800285c <MX_TIM12_Init+0x98>)
 8002804:	f002 fe00 	bl	8005408 <HAL_TIM_PWM_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800280e:	f000 f931 	bl	8002a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002812:	2360      	movs	r3, #96	@ 0x60
 8002814:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	2200      	movs	r2, #0
 8002826:	4619      	mov	r1, r3
 8002828:	480c      	ldr	r0, [pc, #48]	@ (800285c <MX_TIM12_Init+0x98>)
 800282a:	f003 f929 	bl	8005a80 <HAL_TIM_PWM_ConfigChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002834:	f000 f91e 	bl	8002a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	2204      	movs	r2, #4
 800283c:	4619      	mov	r1, r3
 800283e:	4807      	ldr	r0, [pc, #28]	@ (800285c <MX_TIM12_Init+0x98>)
 8002840:	f003 f91e 	bl	8005a80 <HAL_TIM_PWM_ConfigChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800284a:	f000 f913 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800284e:	4803      	ldr	r0, [pc, #12]	@ (800285c <MX_TIM12_Init+0x98>)
 8002850:	f000 fb96 	bl	8002f80 <HAL_TIM_MspPostInit>

}
 8002854:	bf00      	nop
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20004854 	.word	0x20004854
 8002860:	40001800 	.word	0x40001800

08002864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <MX_USART2_UART_Init+0x4c>)
 800286a:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <MX_USART2_UART_Init+0x50>)
 800286c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <MX_USART2_UART_Init+0x4c>)
 8002870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002876:	4b0e      	ldr	r3, [pc, #56]	@ (80028b0 <MX_USART2_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800287c:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <MX_USART2_UART_Init+0x4c>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002882:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <MX_USART2_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002888:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <MX_USART2_UART_Init+0x4c>)
 800288a:	220c      	movs	r2, #12
 800288c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288e:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <MX_USART2_UART_Init+0x4c>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002894:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <MX_USART2_UART_Init+0x4c>)
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800289a:	4805      	ldr	r0, [pc, #20]	@ (80028b0 <MX_USART2_UART_Init+0x4c>)
 800289c:	f003 fe48 	bl	8006530 <HAL_UART_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028a6:	f000 f8e5 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000489c 	.word	0x2000489c
 80028b4:	40004400 	.word	0x40004400

080028b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028bc:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <MX_USART3_UART_Init+0x48>)
 80028be:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <MX_USART3_UART_Init+0x4c>)
 80028c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 80028c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <MX_USART3_UART_Init+0x48>)
 80028c4:	4a10      	ldr	r2, [pc, #64]	@ (8002908 <MX_USART3_UART_Init+0x50>)
 80028c6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002900 <MX_USART3_UART_Init+0x48>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <MX_USART3_UART_Init+0x48>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <MX_USART3_UART_Init+0x48>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028da:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <MX_USART3_UART_Init+0x48>)
 80028dc:	220c      	movs	r2, #12
 80028de:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028e0:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <MX_USART3_UART_Init+0x48>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <MX_USART3_UART_Init+0x48>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028ec:	4804      	ldr	r0, [pc, #16]	@ (8002900 <MX_USART3_UART_Init+0x48>)
 80028ee:	f003 fe1f 	bl	8006530 <HAL_UART_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80028f8:	f000 f8bc 	bl	8002a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200048e4 	.word	0x200048e4
 8002904:	40004800 	.word	0x40004800
 8002908:	0007a120 	.word	0x0007a120

0800290c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <MX_DMA_Init+0x4c>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	4a0f      	ldr	r2, [pc, #60]	@ (8002958 <MX_DMA_Init+0x4c>)
 800291c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002920:	6313      	str	r3, [r2, #48]	@ 0x30
 8002922:	4b0d      	ldr	r3, [pc, #52]	@ (8002958 <MX_DMA_Init+0x4c>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2105      	movs	r1, #5
 8002932:	2010      	movs	r0, #16
 8002934:	f000 ff8e 	bl	8003854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002938:	2010      	movs	r0, #16
 800293a:	f000 ffa7 	bl	800388c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2105      	movs	r1, #5
 8002942:	2011      	movs	r0, #17
 8002944:	f000 ff86 	bl	8003854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002948:	2011      	movs	r0, #17
 800294a:	f000 ff9f 	bl	800388c <HAL_NVIC_EnableIRQ>

}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800

0800295c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	@ 0x28
 8002960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	60da      	str	r2, [r3, #12]
 8002970:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	4b3b      	ldr	r3, [pc, #236]	@ (8002a64 <MX_GPIO_Init+0x108>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a64 <MX_GPIO_Init+0x108>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6313      	str	r3, [r2, #48]	@ 0x30
 8002982:	4b38      	ldr	r3, [pc, #224]	@ (8002a64 <MX_GPIO_Init+0x108>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b34      	ldr	r3, [pc, #208]	@ (8002a64 <MX_GPIO_Init+0x108>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	4a33      	ldr	r2, [pc, #204]	@ (8002a64 <MX_GPIO_Init+0x108>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	6313      	str	r3, [r2, #48]	@ 0x30
 800299e:	4b31      	ldr	r3, [pc, #196]	@ (8002a64 <MX_GPIO_Init+0x108>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <MX_GPIO_Init+0x108>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a64 <MX_GPIO_Init+0x108>)
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002a64 <MX_GPIO_Init+0x108>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	4b26      	ldr	r3, [pc, #152]	@ (8002a64 <MX_GPIO_Init+0x108>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	4a25      	ldr	r2, [pc, #148]	@ (8002a64 <MX_GPIO_Init+0x108>)
 80029d0:	f043 0308 	orr.w	r3, r3, #8
 80029d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d6:	4b23      	ldr	r3, [pc, #140]	@ (8002a64 <MX_GPIO_Init+0x108>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2110      	movs	r1, #16
 80029e6:	4820      	ldr	r0, [pc, #128]	@ (8002a68 <MX_GPIO_Init+0x10c>)
 80029e8:	f001 fcf4 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80029ec:	2200      	movs	r2, #0
 80029ee:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80029f2:	481e      	ldr	r0, [pc, #120]	@ (8002a6c <MX_GPIO_Init+0x110>)
 80029f4:	f001 fcee 	bl	80043d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029f8:	2310      	movs	r3, #16
 80029fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fc:	2301      	movs	r3, #1
 80029fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4816      	ldr	r0, [pc, #88]	@ (8002a68 <MX_GPIO_Init+0x10c>)
 8002a10:	f001 fb4c 	bl	80040ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002a14:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	480f      	ldr	r0, [pc, #60]	@ (8002a6c <MX_GPIO_Init+0x110>)
 8002a2e:	f001 fb3d 	bl	80040ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a32:	2304      	movs	r3, #4
 8002a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a36:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	4619      	mov	r1, r3
 8002a46:	480a      	ldr	r0, [pc, #40]	@ (8002a70 <MX_GPIO_Init+0x114>)
 8002a48:	f001 fb30 	bl	80040ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2105      	movs	r1, #5
 8002a50:	2008      	movs	r0, #8
 8002a52:	f000 feff 	bl	8003854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a56:	2008      	movs	r0, #8
 8002a58:	f000 ff18 	bl	800388c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a5c:	bf00      	nop
 8002a5e:	3728      	adds	r7, #40	@ 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020c00 	.word	0x40020c00

08002a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a78:	b672      	cpsid	i
}
 8002a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <Error_Handler+0x8>

08002a80 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002abc <microros_allocate+0x3c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <microros_allocate+0x3c>)
 8002a98:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002a9a:	4b09      	ldr	r3, [pc, #36]	@ (8002ac0 <microros_allocate+0x40>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <microros_allocate+0x40>)
 8002aa8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff f9b6 	bl	8001e1c <pvPortMallocMicroROS>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20007978 	.word	0x20007978
 8002ac0:	2000797c 	.word	0x2000797c

08002ac4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00c      	beq.n	8002aee <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fac5 	bl	8002064 <getBlockSize>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4a06      	ldr	r2, [pc, #24]	@ (8002af8 <microros_deallocate+0x34>)
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <microros_deallocate+0x34>)
 8002ae6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff fa5f 	bl	8001fac <vPortFreeMicroROS>
  }
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000797c 	.word	0x2000797c

08002afc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002b08:	4b15      	ldr	r3, [pc, #84]	@ (8002b60 <microros_reallocate+0x64>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4413      	add	r3, r2
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <microros_reallocate+0x64>)
 8002b16:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <microros_reallocate+0x68>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4413      	add	r3, r2
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <microros_reallocate+0x68>)
 8002b26:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d104      	bne.n	8002b38 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002b2e:	68b8      	ldr	r0, [r7, #8]
 8002b30:	f7ff f974 	bl	8001e1c <pvPortMallocMicroROS>
 8002b34:	4603      	mov	r3, r0
 8002b36:	e00e      	b.n	8002b56 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7ff fa93 	bl	8002064 <getBlockSize>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4a08      	ldr	r2, [pc, #32]	@ (8002b64 <microros_reallocate+0x68>)
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <microros_reallocate+0x68>)
 8002b4a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f7ff faa6 	bl	80020a0 <pvPortReallocMicroROS>
 8002b54:	4603      	mov	r3, r0
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20007978 	.word	0x20007978
 8002b64:	2000797c 	.word	0x2000797c

08002b68 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	fb02 f303 	mul.w	r3, r2, r3
 8002b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb0 <microros_zero_allocate+0x48>)
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	4413      	add	r3, r2
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <microros_zero_allocate+0x48>)
 8002b86:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	4a08      	ldr	r2, [pc, #32]	@ (8002bb4 <microros_zero_allocate+0x4c>)
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	4413      	add	r3, r2
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <microros_zero_allocate+0x4c>)
 8002b9a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f7ff faab 	bl	80020fa <pvPortCallocMicroROS>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20007978 	.word	0x20007978
 8002bb4:	2000797c 	.word	0x2000797c

08002bb8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002bb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002bca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bce:	a320      	add	r3, pc, #128	@ (adr r3, 8002c50 <UTILS_NanosecondsToTimespec+0x98>)
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f7fd ffa2 	bl	8000b1c <__aeabi_ldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002be2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002be6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002c50 <UTILS_NanosecondsToTimespec+0x98>)
 8002be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bec:	f7fd ff96 	bl	8000b1c <__aeabi_ldivmod>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	da20      	bge.n	8002c3e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a11      	ldr	r2, [pc, #68]	@ (8002c48 <UTILS_NanosecondsToTimespec+0x90>)
 8002c02:	fb82 1203 	smull	r1, r2, r2, r3
 8002c06:	1712      	asrs	r2, r2, #28
 8002c08:	17db      	asrs	r3, r3, #31
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	6979      	ldr	r1, [r7, #20]
 8002c18:	17c8      	asrs	r0, r1, #31
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	ebb2 0804 	subs.w	r8, r2, r4
 8002c22:	eb63 0905 	sbc.w	r9, r3, r5
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	4906      	ldr	r1, [pc, #24]	@ (8002c4c <UTILS_NanosecondsToTimespec+0x94>)
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	441a      	add	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	609a      	str	r2, [r3, #8]
    }
}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c48:	44b82fa1 	.word	0x44b82fa1
 8002c4c:	3b9aca00 	.word	0x3b9aca00
 8002c50:	3b9aca00 	.word	0x3b9aca00
 8002c54:	00000000 	.word	0x00000000

08002c58 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c5c:	b08e      	sub	sp, #56	@ 0x38
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c62:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002c64:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002c68:	2300      	movs	r3, #0
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002c7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f006 fc50 	bl	8009524 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c86:	17da      	asrs	r2, r3, #31
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	61fa      	str	r2, [r7, #28]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	69b9      	ldr	r1, [r7, #24]
 8002c96:	000b      	movs	r3, r1
 8002c98:	2200      	movs	r2, #0
 8002c9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	461c      	mov	r4, r3
 8002ca4:	4615      	mov	r5, r2
 8002ca6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002caa:	1911      	adds	r1, r2, r4
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	416b      	adcs	r3, r5
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002cb6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002cba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	f04f 0400 	mov.w	r4, #0
 8002cc6:	f04f 0500 	mov.w	r5, #0
 8002cca:	015d      	lsls	r5, r3, #5
 8002ccc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002cd0:	0154      	lsls	r4, r2, #5
 8002cd2:	4622      	mov	r2, r4
 8002cd4:	462b      	mov	r3, r5
 8002cd6:	ebb2 0800 	subs.w	r8, r2, r0
 8002cda:	eb63 0901 	sbc.w	r9, r3, r1
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002cea:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002cee:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002cf2:	4690      	mov	r8, r2
 8002cf4:	4699      	mov	r9, r3
 8002cf6:	eb18 0a00 	adds.w	sl, r8, r0
 8002cfa:	eb49 0b01 	adc.w	fp, r9, r1
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d0a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d0e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d12:	ebb2 040a 	subs.w	r4, r2, sl
 8002d16:	603c      	str	r4, [r7, #0]
 8002d18:	eb63 030b 	sbc.w	r3, r3, fp
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d22:	4623      	mov	r3, r4
 8002d24:	181b      	adds	r3, r3, r0
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	462b      	mov	r3, r5
 8002d2a:	eb41 0303 	adc.w	r3, r1, r3
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d36:	f7ff ff3f 	bl	8002bb8 <UTILS_NanosecondsToTimespec>

    return 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3738      	adds	r7, #56	@ 0x38
 8002d40:	46bd      	mov	sp, r7
 8002d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	4b12      	ldr	r3, [pc, #72]	@ (8002d9c <HAL_MspInit+0x54>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	4a11      	ldr	r2, [pc, #68]	@ (8002d9c <HAL_MspInit+0x54>)
 8002d58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <HAL_MspInit+0x54>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <HAL_MspInit+0x54>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <HAL_MspInit+0x54>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d7a:	4b08      	ldr	r3, [pc, #32]	@ (8002d9c <HAL_MspInit+0x54>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d86:	2200      	movs	r2, #0
 8002d88:	210f      	movs	r1, #15
 8002d8a:	f06f 0001 	mvn.w	r0, #1
 8002d8e:	f000 fd61 	bl	8003854 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800

08002da0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	@ 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	@ (8002e24 <HAL_I2C_MspInit+0x84>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d12b      	bne.n	8002e1a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	4b18      	ldr	r3, [pc, #96]	@ (8002e28 <HAL_I2C_MspInit+0x88>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	4a17      	ldr	r2, [pc, #92]	@ (8002e28 <HAL_I2C_MspInit+0x88>)
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <HAL_I2C_MspInit+0x88>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dde:	23c0      	movs	r3, #192	@ 0xc0
 8002de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002de2:	2312      	movs	r3, #18
 8002de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dea:	2303      	movs	r3, #3
 8002dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dee:	2304      	movs	r3, #4
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	4619      	mov	r1, r3
 8002df8:	480c      	ldr	r0, [pc, #48]	@ (8002e2c <HAL_I2C_MspInit+0x8c>)
 8002dfa:	f001 f957 	bl	80040ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_I2C_MspInit+0x88>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	4a08      	ldr	r2, [pc, #32]	@ (8002e28 <HAL_I2C_MspInit+0x88>)
 8002e08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e0e:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <HAL_I2C_MspInit+0x88>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002e1a:	bf00      	nop
 8002e1c:	3728      	adds	r7, #40	@ 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40005400 	.word	0x40005400
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020400 	.word	0x40020400

08002e30 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	@ 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	@ (8002eb4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d12c      	bne.n	8002eac <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	4b18      	ldr	r3, [pc, #96]	@ (8002eb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	4a17      	ldr	r2, [pc, #92]	@ (8002eb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e62:	4b15      	ldr	r3, [pc, #84]	@ (8002eb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b11      	ldr	r3, [pc, #68]	@ (8002eb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	4a10      	ldr	r2, [pc, #64]	@ (8002eb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e90:	2302      	movs	r3, #2
 8002e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4805      	ldr	r0, [pc, #20]	@ (8002ebc <HAL_TIM_Encoder_MspInit+0x8c>)
 8002ea8:	f001 f900 	bl	80040ac <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002eac:	bf00      	nop
 8002eae:	3728      	adds	r7, #40	@ 0x28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40020000 	.word	0x40020000

08002ec0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8002f08 <HAL_TIM_Base_MspInit+0x48>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d115      	bne.n	8002efe <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f0c <HAL_TIM_Base_MspInit+0x4c>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	4a0c      	ldr	r2, [pc, #48]	@ (8002f0c <HAL_TIM_Base_MspInit+0x4c>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <HAL_TIM_Base_MspInit+0x4c>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2105      	movs	r1, #5
 8002ef2:	201e      	movs	r0, #30
 8002ef4:	f000 fcae 	bl	8003854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ef8:	201e      	movs	r0, #30
 8002efa:	f000 fcc7 	bl	800388c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40000800 	.word	0x40000800
 8002f0c:	40023800 	.word	0x40023800

08002f10 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	@ (8002f74 <HAL_TIM_PWM_MspInit+0x64>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10e      	bne.n	8002f40 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	4b14      	ldr	r3, [pc, #80]	@ (8002f78 <HAL_TIM_PWM_MspInit+0x68>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	4a13      	ldr	r2, [pc, #76]	@ (8002f78 <HAL_TIM_PWM_MspInit+0x68>)
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f32:	4b11      	ldr	r3, [pc, #68]	@ (8002f78 <HAL_TIM_PWM_MspInit+0x68>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002f3e:	e012      	b.n	8002f66 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0d      	ldr	r2, [pc, #52]	@ (8002f7c <HAL_TIM_PWM_MspInit+0x6c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d10d      	bne.n	8002f66 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <HAL_TIM_PWM_MspInit+0x68>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	4a09      	ldr	r2, [pc, #36]	@ (8002f78 <HAL_TIM_PWM_MspInit+0x68>)
 8002f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f5a:	4b07      	ldr	r3, [pc, #28]	@ (8002f78 <HAL_TIM_PWM_MspInit+0x68>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40000c00 	.word	0x40000c00
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40001800 	.word	0x40001800

08002f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	@ 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a24      	ldr	r2, [pc, #144]	@ (8003030 <HAL_TIM_MspPostInit+0xb0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d11e      	bne.n	8002fe0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	4b23      	ldr	r3, [pc, #140]	@ (8003034 <HAL_TIM_MspPostInit+0xb4>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	4a22      	ldr	r2, [pc, #136]	@ (8003034 <HAL_TIM_MspPostInit+0xb4>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb2:	4b20      	ldr	r3, [pc, #128]	@ (8003034 <HAL_TIM_MspPostInit+0xb4>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4817      	ldr	r0, [pc, #92]	@ (8003038 <HAL_TIM_MspPostInit+0xb8>)
 8002fda:	f001 f867 	bl	80040ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002fde:	e023      	b.n	8003028 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a15      	ldr	r2, [pc, #84]	@ (800303c <HAL_TIM_MspPostInit+0xbc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d11e      	bne.n	8003028 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b11      	ldr	r3, [pc, #68]	@ (8003034 <HAL_TIM_MspPostInit+0xb4>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	4a10      	ldr	r2, [pc, #64]	@ (8003034 <HAL_TIM_MspPostInit+0xb4>)
 8002ff4:	f043 0302 	orr.w	r3, r3, #2
 8002ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8003034 <HAL_TIM_MspPostInit+0xb4>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003006:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800300a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300c:	2302      	movs	r3, #2
 800300e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003014:	2300      	movs	r3, #0
 8003016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003018:	2309      	movs	r3, #9
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	4619      	mov	r1, r3
 8003022:	4807      	ldr	r0, [pc, #28]	@ (8003040 <HAL_TIM_MspPostInit+0xc0>)
 8003024:	f001 f842 	bl	80040ac <HAL_GPIO_Init>
}
 8003028:	bf00      	nop
 800302a:	3728      	adds	r7, #40	@ 0x28
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40000c00 	.word	0x40000c00
 8003034:	40023800 	.word	0x40023800
 8003038:	40020000 	.word	0x40020000
 800303c:	40001800 	.word	0x40001800
 8003040:	40020400 	.word	0x40020400

08003044 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08c      	sub	sp, #48	@ 0x30
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 031c 	add.w	r3, r7, #28
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a75      	ldr	r2, [pc, #468]	@ (8003238 <HAL_UART_MspInit+0x1f4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	f040 8094 	bne.w	8003190 <HAL_UART_MspInit+0x14c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003068:	2300      	movs	r3, #0
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	4b73      	ldr	r3, [pc, #460]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	4a72      	ldr	r2, [pc, #456]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 8003072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003076:	6413      	str	r3, [r2, #64]	@ 0x40
 8003078:	4b70      	ldr	r3, [pc, #448]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	4b6c      	ldr	r3, [pc, #432]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	4a6b      	ldr	r2, [pc, #428]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6313      	str	r3, [r2, #48]	@ 0x30
 8003094:	4b69      	ldr	r3, [pc, #420]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 8003096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030a0:	230c      	movs	r3, #12
 80030a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a4:	2302      	movs	r3, #2
 80030a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ac:	2303      	movs	r3, #3
 80030ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030b0:	2307      	movs	r3, #7
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b4:	f107 031c 	add.w	r3, r7, #28
 80030b8:	4619      	mov	r1, r3
 80030ba:	4861      	ldr	r0, [pc, #388]	@ (8003240 <HAL_UART_MspInit+0x1fc>)
 80030bc:	f000 fff6 	bl	80040ac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80030c0:	4b60      	ldr	r3, [pc, #384]	@ (8003244 <HAL_UART_MspInit+0x200>)
 80030c2:	4a61      	ldr	r2, [pc, #388]	@ (8003248 <HAL_UART_MspInit+0x204>)
 80030c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80030c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003244 <HAL_UART_MspInit+0x200>)
 80030c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003244 <HAL_UART_MspInit+0x200>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d4:	4b5b      	ldr	r3, [pc, #364]	@ (8003244 <HAL_UART_MspInit+0x200>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030da:	4b5a      	ldr	r3, [pc, #360]	@ (8003244 <HAL_UART_MspInit+0x200>)
 80030dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030e2:	4b58      	ldr	r3, [pc, #352]	@ (8003244 <HAL_UART_MspInit+0x200>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030e8:	4b56      	ldr	r3, [pc, #344]	@ (8003244 <HAL_UART_MspInit+0x200>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80030ee:	4b55      	ldr	r3, [pc, #340]	@ (8003244 <HAL_UART_MspInit+0x200>)
 80030f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80030f6:	4b53      	ldr	r3, [pc, #332]	@ (8003244 <HAL_UART_MspInit+0x200>)
 80030f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80030fc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030fe:	4b51      	ldr	r3, [pc, #324]	@ (8003244 <HAL_UART_MspInit+0x200>)
 8003100:	2200      	movs	r2, #0
 8003102:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003104:	484f      	ldr	r0, [pc, #316]	@ (8003244 <HAL_UART_MspInit+0x200>)
 8003106:	f000 fbcf 	bl	80038a8 <HAL_DMA_Init>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003110:	f7ff fcb0 	bl	8002a74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a4b      	ldr	r2, [pc, #300]	@ (8003244 <HAL_UART_MspInit+0x200>)
 8003118:	63da      	str	r2, [r3, #60]	@ 0x3c
 800311a:	4a4a      	ldr	r2, [pc, #296]	@ (8003244 <HAL_UART_MspInit+0x200>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003120:	4b4a      	ldr	r3, [pc, #296]	@ (800324c <HAL_UART_MspInit+0x208>)
 8003122:	4a4b      	ldr	r2, [pc, #300]	@ (8003250 <HAL_UART_MspInit+0x20c>)
 8003124:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003126:	4b49      	ldr	r3, [pc, #292]	@ (800324c <HAL_UART_MspInit+0x208>)
 8003128:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800312c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800312e:	4b47      	ldr	r3, [pc, #284]	@ (800324c <HAL_UART_MspInit+0x208>)
 8003130:	2240      	movs	r2, #64	@ 0x40
 8003132:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003134:	4b45      	ldr	r3, [pc, #276]	@ (800324c <HAL_UART_MspInit+0x208>)
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800313a:	4b44      	ldr	r3, [pc, #272]	@ (800324c <HAL_UART_MspInit+0x208>)
 800313c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003140:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003142:	4b42      	ldr	r3, [pc, #264]	@ (800324c <HAL_UART_MspInit+0x208>)
 8003144:	2200      	movs	r2, #0
 8003146:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003148:	4b40      	ldr	r3, [pc, #256]	@ (800324c <HAL_UART_MspInit+0x208>)
 800314a:	2200      	movs	r2, #0
 800314c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800314e:	4b3f      	ldr	r3, [pc, #252]	@ (800324c <HAL_UART_MspInit+0x208>)
 8003150:	2200      	movs	r2, #0
 8003152:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003154:	4b3d      	ldr	r3, [pc, #244]	@ (800324c <HAL_UART_MspInit+0x208>)
 8003156:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800315a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800315c:	4b3b      	ldr	r3, [pc, #236]	@ (800324c <HAL_UART_MspInit+0x208>)
 800315e:	2200      	movs	r2, #0
 8003160:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003162:	483a      	ldr	r0, [pc, #232]	@ (800324c <HAL_UART_MspInit+0x208>)
 8003164:	f000 fba0 	bl	80038a8 <HAL_DMA_Init>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800316e:	f7ff fc81 	bl	8002a74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a35      	ldr	r2, [pc, #212]	@ (800324c <HAL_UART_MspInit+0x208>)
 8003176:	639a      	str	r2, [r3, #56]	@ 0x38
 8003178:	4a34      	ldr	r2, [pc, #208]	@ (800324c <HAL_UART_MspInit+0x208>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2105      	movs	r1, #5
 8003182:	2026      	movs	r0, #38	@ 0x26
 8003184:	f000 fb66 	bl	8003854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003188:	2026      	movs	r0, #38	@ 0x26
 800318a:	f000 fb7f 	bl	800388c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800318e:	e04f      	b.n	8003230 <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART3)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2f      	ldr	r2, [pc, #188]	@ (8003254 <HAL_UART_MspInit+0x210>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d14a      	bne.n	8003230 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART3_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	4b27      	ldr	r3, [pc, #156]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	4a26      	ldr	r2, [pc, #152]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 80031a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031aa:	4b24      	ldr	r3, [pc, #144]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b20      	ldr	r3, [pc, #128]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	4a1f      	ldr	r2, [pc, #124]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c6:	4b1d      	ldr	r3, [pc, #116]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	4b19      	ldr	r3, [pc, #100]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	4a18      	ldr	r2, [pc, #96]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e2:	4b16      	ldr	r3, [pc, #88]	@ (800323c <HAL_UART_MspInit+0x1f8>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80031ee:	2320      	movs	r3, #32
 80031f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fa:	2303      	movs	r3, #3
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031fe:	2307      	movs	r3, #7
 8003200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003202:	f107 031c 	add.w	r3, r7, #28
 8003206:	4619      	mov	r1, r3
 8003208:	4813      	ldr	r0, [pc, #76]	@ (8003258 <HAL_UART_MspInit+0x214>)
 800320a:	f000 ff4f 	bl	80040ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800320e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321c:	2303      	movs	r3, #3
 800321e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003220:	2307      	movs	r3, #7
 8003222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003224:	f107 031c 	add.w	r3, r7, #28
 8003228:	4619      	mov	r1, r3
 800322a:	480c      	ldr	r0, [pc, #48]	@ (800325c <HAL_UART_MspInit+0x218>)
 800322c:	f000 ff3e 	bl	80040ac <HAL_GPIO_Init>
}
 8003230:	bf00      	nop
 8003232:	3730      	adds	r7, #48	@ 0x30
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40004400 	.word	0x40004400
 800323c:	40023800 	.word	0x40023800
 8003240:	40020000 	.word	0x40020000
 8003244:	2000492c 	.word	0x2000492c
 8003248:	40026088 	.word	0x40026088
 800324c:	2000498c 	.word	0x2000498c
 8003250:	400260a0 	.word	0x400260a0
 8003254:	40004800 	.word	0x40004800
 8003258:	40020800 	.word	0x40020800
 800325c:	40020400 	.word	0x40020400

08003260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08e      	sub	sp, #56	@ 0x38
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	4b33      	ldr	r3, [pc, #204]	@ (8003344 <HAL_InitTick+0xe4>)
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	4a32      	ldr	r2, [pc, #200]	@ (8003344 <HAL_InitTick+0xe4>)
 800327a:	f043 0310 	orr.w	r3, r3, #16
 800327e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003280:	4b30      	ldr	r3, [pc, #192]	@ (8003344 <HAL_InitTick+0xe4>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800328c:	f107 0210 	add.w	r2, r7, #16
 8003290:	f107 0314 	add.w	r3, r7, #20
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f001 fb7c 	bl	8004994 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80032a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80032a6:	f001 fb4d 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 80032aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80032ac:	e004      	b.n	80032b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032ae:	f001 fb49 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 80032b2:	4603      	mov	r3, r0
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ba:	4a23      	ldr	r2, [pc, #140]	@ (8003348 <HAL_InitTick+0xe8>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	0c9b      	lsrs	r3, r3, #18
 80032c2:	3b01      	subs	r3, #1
 80032c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80032c6:	4b21      	ldr	r3, [pc, #132]	@ (800334c <HAL_InitTick+0xec>)
 80032c8:	4a21      	ldr	r2, [pc, #132]	@ (8003350 <HAL_InitTick+0xf0>)
 80032ca:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032cc:	4b1f      	ldr	r3, [pc, #124]	@ (800334c <HAL_InitTick+0xec>)
 80032ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80032d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032d4:	4a1d      	ldr	r2, [pc, #116]	@ (800334c <HAL_InitTick+0xec>)
 80032d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80032da:	4b1c      	ldr	r3, [pc, #112]	@ (800334c <HAL_InitTick+0xec>)
 80032dc:	2200      	movs	r2, #0
 80032de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e0:	4b1a      	ldr	r3, [pc, #104]	@ (800334c <HAL_InitTick+0xec>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032e6:	4b19      	ldr	r3, [pc, #100]	@ (800334c <HAL_InitTick+0xec>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80032ec:	4817      	ldr	r0, [pc, #92]	@ (800334c <HAL_InitTick+0xec>)
 80032ee:	f001 ffcb 	bl	8005288 <HAL_TIM_Base_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80032f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d11b      	bne.n	8003338 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003300:	4812      	ldr	r0, [pc, #72]	@ (800334c <HAL_InitTick+0xec>)
 8003302:	f002 f811 	bl	8005328 <HAL_TIM_Base_Start_IT>
 8003306:	4603      	mov	r3, r0
 8003308:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800330c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003310:	2b00      	cmp	r3, #0
 8003312:	d111      	bne.n	8003338 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003314:	2036      	movs	r0, #54	@ 0x36
 8003316:	f000 fab9 	bl	800388c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b0f      	cmp	r3, #15
 800331e:	d808      	bhi.n	8003332 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003320:	2200      	movs	r2, #0
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	2036      	movs	r0, #54	@ 0x36
 8003326:	f000 fa95 	bl	8003854 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800332a:	4a0a      	ldr	r2, [pc, #40]	@ (8003354 <HAL_InitTick+0xf4>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e002      	b.n	8003338 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003338:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800333c:	4618      	mov	r0, r3
 800333e:	3738      	adds	r7, #56	@ 0x38
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	431bde83 	.word	0x431bde83
 800334c:	20007980 	.word	0x20007980
 8003350:	40001000 	.word	0x40001000
 8003354:	20000020 	.word	0x20000020

08003358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <NMI_Handler+0x4>

08003360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <HardFault_Handler+0x4>

08003368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <MemManage_Handler+0x4>

08003370 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <BusFault_Handler+0x4>

08003378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <UsageFault_Handler+0x4>

08003380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003392:	2004      	movs	r0, #4
 8003394:	f001 f838 	bl	8004408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}

0800339c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80033a0:	4802      	ldr	r0, [pc, #8]	@ (80033ac <DMA1_Stream5_IRQHandler+0x10>)
 80033a2:	f000 fc19 	bl	8003bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	2000492c 	.word	0x2000492c

080033b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80033b4:	4802      	ldr	r0, [pc, #8]	@ (80033c0 <DMA1_Stream6_IRQHandler+0x10>)
 80033b6:	f000 fc0f 	bl	8003bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000498c 	.word	0x2000498c

080033c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033c8:	4802      	ldr	r0, [pc, #8]	@ (80033d4 <TIM4_IRQHandler+0x10>)
 80033ca:	f002 fa69 	bl	80058a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	200047c4 	.word	0x200047c4

080033d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033dc:	4802      	ldr	r0, [pc, #8]	@ (80033e8 <USART2_IRQHandler+0x10>)
 80033de:	f003 faa3 	bl	8006928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	2000489c 	.word	0x2000489c

080033ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033f0:	4802      	ldr	r0, [pc, #8]	@ (80033fc <TIM6_DAC_IRQHandler+0x10>)
 80033f2:	f002 fa55 	bl	80058a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20007980 	.word	0x20007980

08003400 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return 1;
 8003404:	2301      	movs	r3, #1
}
 8003406:	4618      	mov	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <_kill>:

int _kill(int pid, int sig)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800341a:	f015 f801 	bl	8018420 <__errno>
 800341e:	4603      	mov	r3, r0
 8003420:	2216      	movs	r2, #22
 8003422:	601a      	str	r2, [r3, #0]
  return -1;
 8003424:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <_exit>:

void _exit (int status)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003438:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ffe7 	bl	8003410 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003442:	bf00      	nop
 8003444:	e7fd      	b.n	8003442 <_exit+0x12>

08003446 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e00a      	b.n	800346e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003458:	f3af 8000 	nop.w
 800345c:	4601      	mov	r1, r0
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	60ba      	str	r2, [r7, #8]
 8003464:	b2ca      	uxtb	r2, r1
 8003466:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3301      	adds	r3, #1
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	429a      	cmp	r2, r3
 8003474:	dbf0      	blt.n	8003458 <_read+0x12>
  }

  return len;
 8003476:	687b      	ldr	r3, [r7, #4]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	e009      	b.n	80034a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	60ba      	str	r2, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	dbf1      	blt.n	8003492 <_write+0x12>
  }
  return len;
 80034ae:	687b      	ldr	r3, [r7, #4]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <_close>:

int _close(int file)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034e0:	605a      	str	r2, [r3, #4]
  return 0;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <_isatty>:

int _isatty(int file)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034f8:	2301      	movs	r3, #1
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003506:	b480      	push	{r7}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003528:	4a14      	ldr	r2, [pc, #80]	@ (800357c <_sbrk+0x5c>)
 800352a:	4b15      	ldr	r3, [pc, #84]	@ (8003580 <_sbrk+0x60>)
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003534:	4b13      	ldr	r3, [pc, #76]	@ (8003584 <_sbrk+0x64>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800353c:	4b11      	ldr	r3, [pc, #68]	@ (8003584 <_sbrk+0x64>)
 800353e:	4a12      	ldr	r2, [pc, #72]	@ (8003588 <_sbrk+0x68>)
 8003540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003542:	4b10      	ldr	r3, [pc, #64]	@ (8003584 <_sbrk+0x64>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	429a      	cmp	r2, r3
 800354e:	d207      	bcs.n	8003560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003550:	f014 ff66 	bl	8018420 <__errno>
 8003554:	4603      	mov	r3, r0
 8003556:	220c      	movs	r2, #12
 8003558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800355e:	e009      	b.n	8003574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003560:	4b08      	ldr	r3, [pc, #32]	@ (8003584 <_sbrk+0x64>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003566:	4b07      	ldr	r3, [pc, #28]	@ (8003584 <_sbrk+0x64>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4413      	add	r3, r2
 800356e:	4a05      	ldr	r2, [pc, #20]	@ (8003584 <_sbrk+0x64>)
 8003570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003572:	68fb      	ldr	r3, [r7, #12]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20020000 	.word	0x20020000
 8003580:	00000400 	.word	0x00000400
 8003584:	200079cc 	.word	0x200079cc
 8003588:	20011080 	.word	0x20011080

0800358c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003590:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <SystemInit+0x20>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003596:	4a05      	ldr	r2, [pc, #20]	@ (80035ac <SystemInit+0x20>)
 8003598:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800359c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <StartDefaultTask>:
double currentsp = 0;
int sec = 0;


void StartDefaultTask(void *argument)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 80035b8:	4806      	ldr	r0, [pc, #24]	@ (80035d4 <StartDefaultTask+0x24>)
 80035ba:	f001 feb5 	bl	8005328 <HAL_TIM_Base_Start_IT>
	uros_init();
 80035be:	f7fe fa45 	bl	8001a4c <uros_init>
	arm_init();
 80035c2:	f7fd fdd3 	bl	800116c <arm_init>

    for(;;){
        uros_agent_status_check();
 80035c6:	f7fe fa81 	bl	8001acc <uros_agent_status_check>
        osDelay(1000/FREQUENCY);
 80035ca:	2032      	movs	r0, #50	@ 0x32
 80035cc:	f004 fc42 	bl	8007e54 <osDelay>
        uros_agent_status_check();
 80035d0:	bf00      	nop
 80035d2:	e7f8      	b.n	80035c6 <StartDefaultTask+0x16>
 80035d4:	200047c4 	.word	0x200047c4

080035d8 <HAL_TIM_PeriodElapsedCallback>:
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM4)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a07      	ldr	r2, [pc, #28]	@ (8003604 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d101      	bne.n	80035ee <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		arm_timer_callback();
 80035ea:	f7fd fe21 	bl	8001230 <arm_timer_callback>
	}
  /* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a05      	ldr	r2, [pc, #20]	@ (8003608 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d101      	bne.n	80035fc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		HAL_IncTick();
 80035f8:	f000 f854 	bl	80036a4 <HAL_IncTick>
	}
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40000800 	.word	0x40000800
 8003608:	40001000 	.word	0x40001000

0800360c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800360c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003644 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003610:	f7ff ffbc 	bl	800358c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003614:	480c      	ldr	r0, [pc, #48]	@ (8003648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003616:	490d      	ldr	r1, [pc, #52]	@ (800364c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003618:	4a0d      	ldr	r2, [pc, #52]	@ (8003650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800361a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800361c:	e002      	b.n	8003624 <LoopCopyDataInit>

0800361e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800361e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003622:	3304      	adds	r3, #4

08003624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003628:	d3f9      	bcc.n	800361e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800362a:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800362c:	4c0a      	ldr	r4, [pc, #40]	@ (8003658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003630:	e001      	b.n	8003636 <LoopFillZerobss>

08003632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003634:	3204      	adds	r2, #4

08003636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003638:	d3fb      	bcc.n	8003632 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800363a:	f014 fef7 	bl	801842c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800363e:	f7fe feeb 	bl	8002418 <main>
  bx  lr    
 8003642:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800364c:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8003650:	08019fb4 	.word	0x08019fb4
  ldr r2, =_sbss
 8003654:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8003658:	20011080 	.word	0x20011080

0800365c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800365c:	e7fe      	b.n	800365c <ADC_IRQHandler>
	...

08003660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003664:	4b0e      	ldr	r3, [pc, #56]	@ (80036a0 <HAL_Init+0x40>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0d      	ldr	r2, [pc, #52]	@ (80036a0 <HAL_Init+0x40>)
 800366a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800366e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <HAL_Init+0x40>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0a      	ldr	r2, [pc, #40]	@ (80036a0 <HAL_Init+0x40>)
 8003676:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800367a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800367c:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <HAL_Init+0x40>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a07      	ldr	r2, [pc, #28]	@ (80036a0 <HAL_Init+0x40>)
 8003682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003688:	2003      	movs	r0, #3
 800368a:	f000 f8d8 	bl	800383e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800368e:	200f      	movs	r0, #15
 8003690:	f7ff fde6 	bl	8003260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003694:	f7ff fb58 	bl	8002d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023c00 	.word	0x40023c00

080036a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a8:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <HAL_IncTick+0x20>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_IncTick+0x24>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	4a04      	ldr	r2, [pc, #16]	@ (80036c8 <HAL_IncTick+0x24>)
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000024 	.word	0x20000024
 80036c8:	200079d0 	.word	0x200079d0

080036cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return uwTick;
 80036d0:	4b03      	ldr	r3, [pc, #12]	@ (80036e0 <HAL_GetTick+0x14>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	200079d0 	.word	0x200079d0

080036e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003728 <__NVIC_SetPriorityGrouping+0x44>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003700:	4013      	ands	r3, r2
 8003702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800370c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003716:	4a04      	ldr	r2, [pc, #16]	@ (8003728 <__NVIC_SetPriorityGrouping+0x44>)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	60d3      	str	r3, [r2, #12]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003730:	4b04      	ldr	r3, [pc, #16]	@ (8003744 <__NVIC_GetPriorityGrouping+0x18>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	0a1b      	lsrs	r3, r3, #8
 8003736:	f003 0307 	and.w	r3, r3, #7
}
 800373a:	4618      	mov	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	2b00      	cmp	r3, #0
 8003758:	db0b      	blt.n	8003772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	f003 021f 	and.w	r2, r3, #31
 8003760:	4907      	ldr	r1, [pc, #28]	@ (8003780 <__NVIC_EnableIRQ+0x38>)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	2001      	movs	r0, #1
 800376a:	fa00 f202 	lsl.w	r2, r0, r2
 800376e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	e000e100 	.word	0xe000e100

08003784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	6039      	str	r1, [r7, #0]
 800378e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003794:	2b00      	cmp	r3, #0
 8003796:	db0a      	blt.n	80037ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	490c      	ldr	r1, [pc, #48]	@ (80037d0 <__NVIC_SetPriority+0x4c>)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	0112      	lsls	r2, r2, #4
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	440b      	add	r3, r1
 80037a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037ac:	e00a      	b.n	80037c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	4908      	ldr	r1, [pc, #32]	@ (80037d4 <__NVIC_SetPriority+0x50>)
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	3b04      	subs	r3, #4
 80037bc:	0112      	lsls	r2, r2, #4
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	440b      	add	r3, r1
 80037c2:	761a      	strb	r2, [r3, #24]
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	e000e100 	.word	0xe000e100
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d8:	b480      	push	{r7}
 80037da:	b089      	sub	sp, #36	@ 0x24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f1c3 0307 	rsb	r3, r3, #7
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	bf28      	it	cs
 80037f6:	2304      	movcs	r3, #4
 80037f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3304      	adds	r3, #4
 80037fe:	2b06      	cmp	r3, #6
 8003800:	d902      	bls.n	8003808 <NVIC_EncodePriority+0x30>
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3b03      	subs	r3, #3
 8003806:	e000      	b.n	800380a <NVIC_EncodePriority+0x32>
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800380c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43da      	mvns	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	401a      	ands	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003820:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	fa01 f303 	lsl.w	r3, r1, r3
 800382a:	43d9      	mvns	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	4313      	orrs	r3, r2
         );
}
 8003832:	4618      	mov	r0, r3
 8003834:	3724      	adds	r7, #36	@ 0x24
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ff4c 	bl	80036e4 <__NVIC_SetPriorityGrouping>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003866:	f7ff ff61 	bl	800372c <__NVIC_GetPriorityGrouping>
 800386a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	6978      	ldr	r0, [r7, #20]
 8003872:	f7ff ffb1 	bl	80037d8 <NVIC_EncodePriority>
 8003876:	4602      	mov	r2, r0
 8003878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff ff80 	bl	8003784 <__NVIC_SetPriority>
}
 8003884:	bf00      	nop
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff ff54 	bl	8003748 <__NVIC_EnableIRQ>
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038b4:	f7ff ff0a 	bl	80036cc <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e099      	b.n	80039f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0201 	bic.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e4:	e00f      	b.n	8003906 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038e6:	f7ff fef1 	bl	80036cc <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b05      	cmp	r3, #5
 80038f2:	d908      	bls.n	8003906 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2203      	movs	r2, #3
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e078      	b.n	80039f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e8      	bne.n	80038e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4b38      	ldr	r3, [pc, #224]	@ (8003a00 <HAL_DMA_Init+0x158>)
 8003920:	4013      	ands	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003932:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800393e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800394a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	2b04      	cmp	r3, #4
 800395e:	d107      	bne.n	8003970 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	4313      	orrs	r3, r2
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f023 0307 	bic.w	r3, r3, #7
 8003986:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	2b04      	cmp	r3, #4
 8003998:	d117      	bne.n	80039ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00e      	beq.n	80039ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fb01 	bl	8003fb4 <DMA_CheckFifoParam>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2240      	movs	r2, #64	@ 0x40
 80039bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80039c6:	2301      	movs	r3, #1
 80039c8:	e016      	b.n	80039f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fab8 	bl	8003f48 <DMA_CalcBaseAndBitshift>
 80039d8:	4603      	mov	r3, r0
 80039da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e0:	223f      	movs	r2, #63	@ 0x3f
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	f010803f 	.word	0xf010803f

08003a04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_DMA_Start_IT+0x26>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e040      	b.n	8003aac <HAL_DMA_Start_IT+0xa8>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d12f      	bne.n	8003a9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fa4a 	bl	8003eec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5c:	223f      	movs	r2, #63	@ 0x3f
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0216 	orr.w	r2, r2, #22
 8003a72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0208 	orr.w	r2, r2, #8
 8003a8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e005      	b.n	8003aaa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ac2:	f7ff fe03 	bl	80036cc <HAL_GetTick>
 8003ac6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d008      	beq.n	8003ae6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2280      	movs	r2, #128	@ 0x80
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e052      	b.n	8003b8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0216 	bic.w	r2, r2, #22
 8003af4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <HAL_DMA_Abort+0x62>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0208 	bic.w	r2, r2, #8
 8003b24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b36:	e013      	b.n	8003b60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b38:	f7ff fdc8 	bl	80036cc <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d90c      	bls.n	8003b60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2203      	movs	r2, #3
 8003b50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e015      	b.n	8003b8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e4      	bne.n	8003b38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b72:	223f      	movs	r2, #63	@ 0x3f
 8003b74:	409a      	lsls	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2280      	movs	r2, #128	@ 0x80
 8003bac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e00c      	b.n	8003bcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2205      	movs	r2, #5
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003be4:	4b8e      	ldr	r3, [pc, #568]	@ (8003e20 <HAL_DMA_IRQHandler+0x248>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a8e      	ldr	r2, [pc, #568]	@ (8003e24 <HAL_DMA_IRQHandler+0x24c>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	0a9b      	lsrs	r3, r3, #10
 8003bf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c02:	2208      	movs	r2, #8
 8003c04:	409a      	lsls	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01a      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d013      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0204 	bic.w	r2, r2, #4
 8003c2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c30:	2208      	movs	r2, #8
 8003c32:	409a      	lsls	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3c:	f043 0201 	orr.w	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c48:	2201      	movs	r2, #1
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d012      	beq.n	8003c7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	2201      	movs	r2, #1
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c72:	f043 0202 	orr.w	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7e:	2204      	movs	r2, #4
 8003c80:	409a      	lsls	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d012      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00b      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca8:	f043 0204 	orr.w	r2, r3, #4
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d043      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d03c      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd2:	2210      	movs	r2, #16
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d018      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d108      	bne.n	8003d08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d024      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	4798      	blx	r3
 8003d06:	e01f      	b.n	8003d48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01b      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
 8003d18:	e016      	b.n	8003d48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d107      	bne.n	8003d38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0208 	bic.w	r2, r2, #8
 8003d36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 808f 	beq.w	8003e78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8087 	beq.w	8003e78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6e:	2220      	movs	r2, #32
 8003d70:	409a      	lsls	r2, r3
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b05      	cmp	r3, #5
 8003d80:	d136      	bne.n	8003df0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0216 	bic.w	r2, r2, #22
 8003d90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695a      	ldr	r2, [r3, #20]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003da0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d103      	bne.n	8003db2 <HAL_DMA_IRQHandler+0x1da>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0208 	bic.w	r2, r2, #8
 8003dc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc6:	223f      	movs	r2, #63	@ 0x3f
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d07e      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
        }
        return;
 8003dee:	e079      	b.n	8003ee4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01d      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10d      	bne.n	8003e28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d031      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	4798      	blx	r3
 8003e1c:	e02c      	b.n	8003e78 <HAL_DMA_IRQHandler+0x2a0>
 8003e1e:	bf00      	nop
 8003e20:	2000001c 	.word	0x2000001c
 8003e24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d023      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	4798      	blx	r3
 8003e38:	e01e      	b.n	8003e78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10f      	bne.n	8003e68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0210 	bic.w	r2, r2, #16
 8003e56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d032      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d022      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2205      	movs	r2, #5
 8003e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d307      	bcc.n	8003ec0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f2      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x2cc>
 8003ebe:	e000      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ec0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
 8003ee2:	e000      	b.n	8003ee6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ee4:	bf00      	nop
    }
  }
}
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b40      	cmp	r3, #64	@ 0x40
 8003f18:	d108      	bne.n	8003f2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f2a:	e007      	b.n	8003f3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]
}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	3b10      	subs	r3, #16
 8003f58:	4a14      	ldr	r2, [pc, #80]	@ (8003fac <DMA_CalcBaseAndBitshift+0x64>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f62:	4a13      	ldr	r2, [pc, #76]	@ (8003fb0 <DMA_CalcBaseAndBitshift+0x68>)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d909      	bls.n	8003f8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003f7e:	f023 0303 	bic.w	r3, r3, #3
 8003f82:	1d1a      	adds	r2, r3, #4
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f88:	e007      	b.n	8003f9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	aaaaaaab 	.word	0xaaaaaaab
 8003fb0:	08019344 	.word	0x08019344

08003fb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d11f      	bne.n	800400e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d856      	bhi.n	8004082 <DMA_CheckFifoParam+0xce>
 8003fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fdc <DMA_CheckFifoParam+0x28>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08003fed 	.word	0x08003fed
 8003fe0:	08003fff 	.word	0x08003fff
 8003fe4:	08003fed 	.word	0x08003fed
 8003fe8:	08004083 	.word	0x08004083
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d046      	beq.n	8004086 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ffc:	e043      	b.n	8004086 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004006:	d140      	bne.n	800408a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800400c:	e03d      	b.n	800408a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004016:	d121      	bne.n	800405c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b03      	cmp	r3, #3
 800401c:	d837      	bhi.n	800408e <DMA_CheckFifoParam+0xda>
 800401e:	a201      	add	r2, pc, #4	@ (adr r2, 8004024 <DMA_CheckFifoParam+0x70>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	08004035 	.word	0x08004035
 8004028:	0800403b 	.word	0x0800403b
 800402c:	08004035 	.word	0x08004035
 8004030:	0800404d 	.word	0x0800404d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
      break;
 8004038:	e030      	b.n	800409c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d025      	beq.n	8004092 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800404a:	e022      	b.n	8004092 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004054:	d11f      	bne.n	8004096 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800405a:	e01c      	b.n	8004096 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d903      	bls.n	800406a <DMA_CheckFifoParam+0xb6>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b03      	cmp	r3, #3
 8004066:	d003      	beq.n	8004070 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004068:	e018      	b.n	800409c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
      break;
 800406e:	e015      	b.n	800409c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00e      	beq.n	800409a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
      break;
 8004080:	e00b      	b.n	800409a <DMA_CheckFifoParam+0xe6>
      break;
 8004082:	bf00      	nop
 8004084:	e00a      	b.n	800409c <DMA_CheckFifoParam+0xe8>
      break;
 8004086:	bf00      	nop
 8004088:	e008      	b.n	800409c <DMA_CheckFifoParam+0xe8>
      break;
 800408a:	bf00      	nop
 800408c:	e006      	b.n	800409c <DMA_CheckFifoParam+0xe8>
      break;
 800408e:	bf00      	nop
 8004090:	e004      	b.n	800409c <DMA_CheckFifoParam+0xe8>
      break;
 8004092:	bf00      	nop
 8004094:	e002      	b.n	800409c <DMA_CheckFifoParam+0xe8>
      break;   
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <DMA_CheckFifoParam+0xe8>
      break;
 800409a:	bf00      	nop
    }
  } 
  
  return status; 
 800409c:	7bfb      	ldrb	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop

080040ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	@ 0x24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	e165      	b.n	8004394 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040c8:	2201      	movs	r2, #1
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4013      	ands	r3, r2
 80040da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	f040 8154 	bne.w	800438e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d005      	beq.n	80040fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d130      	bne.n	8004160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	2203      	movs	r2, #3
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004134:	2201      	movs	r2, #1
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 0201 	and.w	r2, r3, #1
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	2b03      	cmp	r3, #3
 800416a:	d017      	beq.n	800419c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	2203      	movs	r2, #3
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43db      	mvns	r3, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4013      	ands	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d123      	bne.n	80041f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	08da      	lsrs	r2, r3, #3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3208      	adds	r2, #8
 80041b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	220f      	movs	r2, #15
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	43db      	mvns	r3, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4013      	ands	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4313      	orrs	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	08da      	lsrs	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3208      	adds	r2, #8
 80041ea:	69b9      	ldr	r1, [r7, #24]
 80041ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	2203      	movs	r2, #3
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 0203 	and.w	r2, r3, #3
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4313      	orrs	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 80ae 	beq.w	800438e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	4b5d      	ldr	r3, [pc, #372]	@ (80043ac <HAL_GPIO_Init+0x300>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423a:	4a5c      	ldr	r2, [pc, #368]	@ (80043ac <HAL_GPIO_Init+0x300>)
 800423c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004240:	6453      	str	r3, [r2, #68]	@ 0x44
 8004242:	4b5a      	ldr	r3, [pc, #360]	@ (80043ac <HAL_GPIO_Init+0x300>)
 8004244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800424e:	4a58      	ldr	r2, [pc, #352]	@ (80043b0 <HAL_GPIO_Init+0x304>)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	089b      	lsrs	r3, r3, #2
 8004254:	3302      	adds	r3, #2
 8004256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	220f      	movs	r2, #15
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43db      	mvns	r3, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4013      	ands	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a4f      	ldr	r2, [pc, #316]	@ (80043b4 <HAL_GPIO_Init+0x308>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d025      	beq.n	80042c6 <HAL_GPIO_Init+0x21a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a4e      	ldr	r2, [pc, #312]	@ (80043b8 <HAL_GPIO_Init+0x30c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d01f      	beq.n	80042c2 <HAL_GPIO_Init+0x216>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a4d      	ldr	r2, [pc, #308]	@ (80043bc <HAL_GPIO_Init+0x310>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d019      	beq.n	80042be <HAL_GPIO_Init+0x212>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a4c      	ldr	r2, [pc, #304]	@ (80043c0 <HAL_GPIO_Init+0x314>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_GPIO_Init+0x20e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a4b      	ldr	r2, [pc, #300]	@ (80043c4 <HAL_GPIO_Init+0x318>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00d      	beq.n	80042b6 <HAL_GPIO_Init+0x20a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a4a      	ldr	r2, [pc, #296]	@ (80043c8 <HAL_GPIO_Init+0x31c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d007      	beq.n	80042b2 <HAL_GPIO_Init+0x206>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a49      	ldr	r2, [pc, #292]	@ (80043cc <HAL_GPIO_Init+0x320>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d101      	bne.n	80042ae <HAL_GPIO_Init+0x202>
 80042aa:	2306      	movs	r3, #6
 80042ac:	e00c      	b.n	80042c8 <HAL_GPIO_Init+0x21c>
 80042ae:	2307      	movs	r3, #7
 80042b0:	e00a      	b.n	80042c8 <HAL_GPIO_Init+0x21c>
 80042b2:	2305      	movs	r3, #5
 80042b4:	e008      	b.n	80042c8 <HAL_GPIO_Init+0x21c>
 80042b6:	2304      	movs	r3, #4
 80042b8:	e006      	b.n	80042c8 <HAL_GPIO_Init+0x21c>
 80042ba:	2303      	movs	r3, #3
 80042bc:	e004      	b.n	80042c8 <HAL_GPIO_Init+0x21c>
 80042be:	2302      	movs	r3, #2
 80042c0:	e002      	b.n	80042c8 <HAL_GPIO_Init+0x21c>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_GPIO_Init+0x21c>
 80042c6:	2300      	movs	r3, #0
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	f002 0203 	and.w	r2, r2, #3
 80042ce:	0092      	lsls	r2, r2, #2
 80042d0:	4093      	lsls	r3, r2
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042d8:	4935      	ldr	r1, [pc, #212]	@ (80043b0 <HAL_GPIO_Init+0x304>)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	089b      	lsrs	r3, r3, #2
 80042de:	3302      	adds	r3, #2
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042e6:	4b3a      	ldr	r3, [pc, #232]	@ (80043d0 <HAL_GPIO_Init+0x324>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	43db      	mvns	r3, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4013      	ands	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800430a:	4a31      	ldr	r2, [pc, #196]	@ (80043d0 <HAL_GPIO_Init+0x324>)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004310:	4b2f      	ldr	r3, [pc, #188]	@ (80043d0 <HAL_GPIO_Init+0x324>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004334:	4a26      	ldr	r2, [pc, #152]	@ (80043d0 <HAL_GPIO_Init+0x324>)
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800433a:	4b25      	ldr	r3, [pc, #148]	@ (80043d0 <HAL_GPIO_Init+0x324>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	43db      	mvns	r3, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4013      	ands	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800435e:	4a1c      	ldr	r2, [pc, #112]	@ (80043d0 <HAL_GPIO_Init+0x324>)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004364:	4b1a      	ldr	r3, [pc, #104]	@ (80043d0 <HAL_GPIO_Init+0x324>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004388:	4a11      	ldr	r2, [pc, #68]	@ (80043d0 <HAL_GPIO_Init+0x324>)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3301      	adds	r3, #1
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b0f      	cmp	r3, #15
 8004398:	f67f ae96 	bls.w	80040c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	3724      	adds	r7, #36	@ 0x24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800
 80043b0:	40013800 	.word	0x40013800
 80043b4:	40020000 	.word	0x40020000
 80043b8:	40020400 	.word	0x40020400
 80043bc:	40020800 	.word	0x40020800
 80043c0:	40020c00 	.word	0x40020c00
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40021400 	.word	0x40021400
 80043cc:	40021800 	.word	0x40021800
 80043d0:	40013c00 	.word	0x40013c00

080043d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	807b      	strh	r3, [r7, #2]
 80043e0:	4613      	mov	r3, r2
 80043e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043e4:	787b      	ldrb	r3, [r7, #1]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ea:	887a      	ldrh	r2, [r7, #2]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043f0:	e003      	b.n	80043fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043f2:	887b      	ldrh	r3, [r7, #2]
 80043f4:	041a      	lsls	r2, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	619a      	str	r2, [r3, #24]
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004412:	4b08      	ldr	r3, [pc, #32]	@ (8004434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d006      	beq.n	800442c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800441e:	4a05      	ldr	r2, [pc, #20]	@ (8004434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fc ff7a 	bl	8001320 <HAL_GPIO_EXTI_Callback>
  }
}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40013c00 	.word	0x40013c00

08004438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e12b      	b.n	80046a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fe fc9e 	bl	8002da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2224      	movs	r2, #36	@ 0x24
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0201 	bic.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800448a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800449a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800449c:	f000 fa52 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 80044a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4a81      	ldr	r2, [pc, #516]	@ (80046ac <HAL_I2C_Init+0x274>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d807      	bhi.n	80044bc <HAL_I2C_Init+0x84>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a80      	ldr	r2, [pc, #512]	@ (80046b0 <HAL_I2C_Init+0x278>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	bf94      	ite	ls
 80044b4:	2301      	movls	r3, #1
 80044b6:	2300      	movhi	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e006      	b.n	80044ca <HAL_I2C_Init+0x92>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a7d      	ldr	r2, [pc, #500]	@ (80046b4 <HAL_I2C_Init+0x27c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	bf94      	ite	ls
 80044c4:	2301      	movls	r3, #1
 80044c6:	2300      	movhi	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e0e7      	b.n	80046a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4a78      	ldr	r2, [pc, #480]	@ (80046b8 <HAL_I2C_Init+0x280>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	0c9b      	lsrs	r3, r3, #18
 80044dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	4a6a      	ldr	r2, [pc, #424]	@ (80046ac <HAL_I2C_Init+0x274>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d802      	bhi.n	800450c <HAL_I2C_Init+0xd4>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	3301      	adds	r3, #1
 800450a:	e009      	b.n	8004520 <HAL_I2C_Init+0xe8>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	4a69      	ldr	r2, [pc, #420]	@ (80046bc <HAL_I2C_Init+0x284>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	099b      	lsrs	r3, r3, #6
 800451e:	3301      	adds	r3, #1
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	430b      	orrs	r3, r1
 8004526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004532:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	495c      	ldr	r1, [pc, #368]	@ (80046ac <HAL_I2C_Init+0x274>)
 800453c:	428b      	cmp	r3, r1
 800453e:	d819      	bhi.n	8004574 <HAL_I2C_Init+0x13c>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1e59      	subs	r1, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	fbb1 f3f3 	udiv	r3, r1, r3
 800454e:	1c59      	adds	r1, r3, #1
 8004550:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004554:	400b      	ands	r3, r1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_I2C_Init+0x138>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1e59      	subs	r1, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	fbb1 f3f3 	udiv	r3, r1, r3
 8004568:	3301      	adds	r3, #1
 800456a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800456e:	e051      	b.n	8004614 <HAL_I2C_Init+0x1dc>
 8004570:	2304      	movs	r3, #4
 8004572:	e04f      	b.n	8004614 <HAL_I2C_Init+0x1dc>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d111      	bne.n	80045a0 <HAL_I2C_Init+0x168>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	1e58      	subs	r0, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6859      	ldr	r1, [r3, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	440b      	add	r3, r1
 800458a:	fbb0 f3f3 	udiv	r3, r0, r3
 800458e:	3301      	adds	r3, #1
 8004590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e012      	b.n	80045c6 <HAL_I2C_Init+0x18e>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1e58      	subs	r0, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6859      	ldr	r1, [r3, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	0099      	lsls	r1, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b6:	3301      	adds	r3, #1
 80045b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_Init+0x196>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e022      	b.n	8004614 <HAL_I2C_Init+0x1dc>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10e      	bne.n	80045f4 <HAL_I2C_Init+0x1bc>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1e58      	subs	r0, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6859      	ldr	r1, [r3, #4]
 80045de:	460b      	mov	r3, r1
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	440b      	add	r3, r1
 80045e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80045e8:	3301      	adds	r3, #1
 80045ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045f2:	e00f      	b.n	8004614 <HAL_I2C_Init+0x1dc>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1e58      	subs	r0, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6859      	ldr	r1, [r3, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	0099      	lsls	r1, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	fbb0 f3f3 	udiv	r3, r0, r3
 800460a:	3301      	adds	r3, #1
 800460c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004610:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	6809      	ldr	r1, [r1, #0]
 8004618:	4313      	orrs	r3, r2
 800461a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69da      	ldr	r2, [r3, #28]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004642:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6911      	ldr	r1, [r2, #16]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68d2      	ldr	r2, [r2, #12]
 800464e:	4311      	orrs	r1, r2
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	430b      	orrs	r3, r1
 8004656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	000186a0 	.word	0x000186a0
 80046b0:	001e847f 	.word	0x001e847f
 80046b4:	003d08ff 	.word	0x003d08ff
 80046b8:	431bde83 	.word	0x431bde83
 80046bc:	10624dd3 	.word	0x10624dd3

080046c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80046ca:	2300      	movs	r3, #0
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4b20      	ldr	r3, [pc, #128]	@ (8004750 <HAL_PWREx_EnableOverDrive+0x90>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004750 <HAL_PWREx_EnableOverDrive+0x90>)
 80046d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046da:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <HAL_PWREx_EnableOverDrive+0x90>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004754 <HAL_PWREx_EnableOverDrive+0x94>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046ec:	f7fe ffee 	bl	80036cc <HAL_GetTick>
 80046f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046f2:	e009      	b.n	8004708 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046f4:	f7fe ffea 	bl	80036cc <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004702:	d901      	bls.n	8004708 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e01f      	b.n	8004748 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004708:	4b13      	ldr	r3, [pc, #76]	@ (8004758 <HAL_PWREx_EnableOverDrive+0x98>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004714:	d1ee      	bne.n	80046f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004716:	4b11      	ldr	r3, [pc, #68]	@ (800475c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004718:	2201      	movs	r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800471c:	f7fe ffd6 	bl	80036cc <HAL_GetTick>
 8004720:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004722:	e009      	b.n	8004738 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004724:	f7fe ffd2 	bl	80036cc <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004732:	d901      	bls.n	8004738 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e007      	b.n	8004748 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004738:	4b07      	ldr	r3, [pc, #28]	@ (8004758 <HAL_PWREx_EnableOverDrive+0x98>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004740:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004744:	d1ee      	bne.n	8004724 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40023800 	.word	0x40023800
 8004754:	420e0040 	.word	0x420e0040
 8004758:	40007000 	.word	0x40007000
 800475c:	420e0044 	.word	0x420e0044

08004760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0cc      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004774:	4b68      	ldr	r3, [pc, #416]	@ (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d90c      	bls.n	800479c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b65      	ldr	r3, [pc, #404]	@ (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b63      	ldr	r3, [pc, #396]	@ (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0b8      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d020      	beq.n	80047ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b4:	4b59      	ldr	r3, [pc, #356]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a58      	ldr	r2, [pc, #352]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047cc:	4b53      	ldr	r3, [pc, #332]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a52      	ldr	r2, [pc, #328]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d8:	4b50      	ldr	r3, [pc, #320]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	494d      	ldr	r1, [pc, #308]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d044      	beq.n	8004880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	4b47      	ldr	r3, [pc, #284]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d119      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e07f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d003      	beq.n	800481e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481a:	2b03      	cmp	r3, #3
 800481c:	d107      	bne.n	800482e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481e:	4b3f      	ldr	r3, [pc, #252]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e06f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482e:	4b3b      	ldr	r3, [pc, #236]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e067      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800483e:	4b37      	ldr	r3, [pc, #220]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 0203 	bic.w	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4934      	ldr	r1, [pc, #208]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	4313      	orrs	r3, r2
 800484e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004850:	f7fe ff3c 	bl	80036cc <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	e00a      	b.n	800486e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004858:	f7fe ff38 	bl	80036cc <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e04f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	4b2b      	ldr	r3, [pc, #172]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 020c 	and.w	r2, r3, #12
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	429a      	cmp	r2, r3
 800487e:	d1eb      	bne.n	8004858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004880:	4b25      	ldr	r3, [pc, #148]	@ (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d20c      	bcs.n	80048a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b22      	ldr	r3, [pc, #136]	@ (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b20      	ldr	r3, [pc, #128]	@ (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e032      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b4:	4b19      	ldr	r3, [pc, #100]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4916      	ldr	r1, [pc, #88]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048d2:	4b12      	ldr	r3, [pc, #72]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	490e      	ldr	r1, [pc, #56]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048e6:	f000 f887 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 80048ea:	4602      	mov	r2, r0
 80048ec:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	091b      	lsrs	r3, r3, #4
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	490a      	ldr	r1, [pc, #40]	@ (8004920 <HAL_RCC_ClockConfig+0x1c0>)
 80048f8:	5ccb      	ldrb	r3, [r1, r3]
 80048fa:	fa22 f303 	lsr.w	r3, r2, r3
 80048fe:	4a09      	ldr	r2, [pc, #36]	@ (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004902:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe fcaa 	bl	8003260 <HAL_InitTick>

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023c00 	.word	0x40023c00
 800491c:	40023800 	.word	0x40023800
 8004920:	0801932c 	.word	0x0801932c
 8004924:	2000001c 	.word	0x2000001c
 8004928:	20000020 	.word	0x20000020

0800492c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004930:	4b03      	ldr	r3, [pc, #12]	@ (8004940 <HAL_RCC_GetHCLKFreq+0x14>)
 8004932:	681b      	ldr	r3, [r3, #0]
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	2000001c 	.word	0x2000001c

08004944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004948:	f7ff fff0 	bl	800492c <HAL_RCC_GetHCLKFreq>
 800494c:	4602      	mov	r2, r0
 800494e:	4b05      	ldr	r3, [pc, #20]	@ (8004964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	0a9b      	lsrs	r3, r3, #10
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	4903      	ldr	r1, [pc, #12]	@ (8004968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800495a:	5ccb      	ldrb	r3, [r1, r3]
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40023800 	.word	0x40023800
 8004968:	0801933c 	.word	0x0801933c

0800496c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004970:	f7ff ffdc 	bl	800492c <HAL_RCC_GetHCLKFreq>
 8004974:	4602      	mov	r2, r0
 8004976:	4b05      	ldr	r3, [pc, #20]	@ (800498c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	0b5b      	lsrs	r3, r3, #13
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	4903      	ldr	r1, [pc, #12]	@ (8004990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004982:	5ccb      	ldrb	r3, [r1, r3]
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004988:	4618      	mov	r0, r3
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40023800 	.word	0x40023800
 8004990:	0801933c 	.word	0x0801933c

08004994 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	220f      	movs	r2, #15
 80049a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049a4:	4b12      	ldr	r3, [pc, #72]	@ (80049f0 <HAL_RCC_GetClockConfig+0x5c>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0203 	and.w	r2, r3, #3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049b0:	4b0f      	ldr	r3, [pc, #60]	@ (80049f0 <HAL_RCC_GetClockConfig+0x5c>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049bc:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <HAL_RCC_GetClockConfig+0x5c>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049c8:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <HAL_RCC_GetClockConfig+0x5c>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	08db      	lsrs	r3, r3, #3
 80049ce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049d6:	4b07      	ldr	r3, [pc, #28]	@ (80049f4 <HAL_RCC_GetClockConfig+0x60>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	601a      	str	r2, [r3, #0]
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800
 80049f4:	40023c00 	.word	0x40023c00

080049f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049fc:	b0a6      	sub	sp, #152	@ 0x98
 80049fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a1e:	4bc8      	ldr	r3, [pc, #800]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	f200 817e 	bhi.w	8004d28 <HAL_RCC_GetSysClockFreq+0x330>
 8004a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a69 	.word	0x08004a69
 8004a38:	08004d29 	.word	0x08004d29
 8004a3c:	08004d29 	.word	0x08004d29
 8004a40:	08004d29 	.word	0x08004d29
 8004a44:	08004a71 	.word	0x08004a71
 8004a48:	08004d29 	.word	0x08004d29
 8004a4c:	08004d29 	.word	0x08004d29
 8004a50:	08004d29 	.word	0x08004d29
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004d29 	.word	0x08004d29
 8004a5c:	08004d29 	.word	0x08004d29
 8004a60:	08004d29 	.word	0x08004d29
 8004a64:	08004be3 	.word	0x08004be3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a68:	4bb6      	ldr	r3, [pc, #728]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004a6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004a6e:	e15f      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a70:	4bb5      	ldr	r3, [pc, #724]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004a76:	e15b      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a78:	4bb1      	ldr	r3, [pc, #708]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a84:	4bae      	ldr	r3, [pc, #696]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d031      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a90:	4bab      	ldr	r3, [pc, #684]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	2200      	movs	r2, #0
 8004a98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004aa8:	4ba7      	ldr	r3, [pc, #668]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x350>)
 8004aaa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004aae:	462a      	mov	r2, r5
 8004ab0:	fb03 f202 	mul.w	r2, r3, r2
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	4aa2      	ldr	r2, [pc, #648]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	fba1 1202 	umull	r1, r2, r1, r2
 8004ac6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ac8:	460a      	mov	r2, r1
 8004aca:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004acc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004ace:	4413      	add	r3, r2
 8004ad0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ada:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004adc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ae0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004ae4:	f7fc f86a 	bl	8000bbc <__aeabi_uldivmod>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4613      	mov	r3, r2
 8004aee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004af2:	e064      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af4:	4b92      	ldr	r3, [pc, #584]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x348>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	099b      	lsrs	r3, r3, #6
 8004afa:	2200      	movs	r2, #0
 8004afc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004afe:	657a      	str	r2, [r7, #84]	@ 0x54
 8004b00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b08:	2300      	movs	r3, #0
 8004b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b0c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004b10:	4622      	mov	r2, r4
 8004b12:	462b      	mov	r3, r5
 8004b14:	f04f 0000 	mov.w	r0, #0
 8004b18:	f04f 0100 	mov.w	r1, #0
 8004b1c:	0159      	lsls	r1, r3, #5
 8004b1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b22:	0150      	lsls	r0, r2, #5
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4621      	mov	r1, r4
 8004b2a:	1a51      	subs	r1, r2, r1
 8004b2c:	6139      	str	r1, [r7, #16]
 8004b2e:	4629      	mov	r1, r5
 8004b30:	eb63 0301 	sbc.w	r3, r3, r1
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b42:	4659      	mov	r1, fp
 8004b44:	018b      	lsls	r3, r1, #6
 8004b46:	4651      	mov	r1, sl
 8004b48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	018a      	lsls	r2, r1, #6
 8004b50:	4651      	mov	r1, sl
 8004b52:	ebb2 0801 	subs.w	r8, r2, r1
 8004b56:	4659      	mov	r1, fp
 8004b58:	eb63 0901 	sbc.w	r9, r3, r1
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b70:	4690      	mov	r8, r2
 8004b72:	4699      	mov	r9, r3
 8004b74:	4623      	mov	r3, r4
 8004b76:	eb18 0303 	adds.w	r3, r8, r3
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	462b      	mov	r3, r5
 8004b7e:	eb49 0303 	adc.w	r3, r9, r3
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b90:	4629      	mov	r1, r5
 8004b92:	028b      	lsls	r3, r1, #10
 8004b94:	4621      	mov	r1, r4
 8004b96:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	028a      	lsls	r2, r1, #10
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004baa:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bb0:	f7fc f804 	bl	8000bbc <__aeabi_uldivmod>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4613      	mov	r3, r2
 8004bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bbe:	4b60      	ldr	r3, [pc, #384]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004bd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004be0:	e0a6      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004be2:	4b57      	ldr	r3, [pc, #348]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x348>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bee:	4b54      	ldr	r3, [pc, #336]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d02a      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bfa:	4b51      	ldr	r3, [pc, #324]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	099b      	lsrs	r3, r3, #6
 8004c00:	2200      	movs	r2, #0
 8004c02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c10:	fb03 f201 	mul.w	r2, r3, r1
 8004c14:	2300      	movs	r3, #0
 8004c16:	fb00 f303 	mul.w	r3, r0, r3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x350>)
 8004c1e:	fba0 1202 	umull	r1, r2, r0, r2
 8004c22:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c24:	460a      	mov	r2, r1
 8004c26:	673a      	str	r2, [r7, #112]	@ 0x70
 8004c28:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c2a:	4413      	add	r3, r2
 8004c2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c32:	2200      	movs	r2, #0
 8004c34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c36:	637a      	str	r2, [r7, #52]	@ 0x34
 8004c38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004c3c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004c40:	f7fb ffbc 	bl	8000bbc <__aeabi_uldivmod>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4613      	mov	r3, r2
 8004c4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c4e:	e05b      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c50:	4b3b      	ldr	r3, [pc, #236]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	099b      	lsrs	r3, r3, #6
 8004c56:	2200      	movs	r2, #0
 8004c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	623b      	str	r3, [r7, #32]
 8004c64:	2300      	movs	r3, #0
 8004c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c6c:	4642      	mov	r2, r8
 8004c6e:	464b      	mov	r3, r9
 8004c70:	f04f 0000 	mov.w	r0, #0
 8004c74:	f04f 0100 	mov.w	r1, #0
 8004c78:	0159      	lsls	r1, r3, #5
 8004c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c7e:	0150      	lsls	r0, r2, #5
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4641      	mov	r1, r8
 8004c86:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ca0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ca4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ca8:	eb63 050b 	sbc.w	r5, r3, fp
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	00eb      	lsls	r3, r5, #3
 8004cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cba:	00e2      	lsls	r2, r4, #3
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	461d      	mov	r5, r3
 8004cc0:	4643      	mov	r3, r8
 8004cc2:	18e3      	adds	r3, r4, r3
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	eb45 0303 	adc.w	r3, r5, r3
 8004ccc:	607b      	str	r3, [r7, #4]
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cda:	4629      	mov	r1, r5
 8004cdc:	028b      	lsls	r3, r1, #10
 8004cde:	4621      	mov	r1, r4
 8004ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	028a      	lsls	r2, r1, #10
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4619      	mov	r1, r3
 8004cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	61bb      	str	r3, [r7, #24]
 8004cf4:	61fa      	str	r2, [r7, #28]
 8004cf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cfa:	f7fb ff5f 	bl	8000bbc <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4613      	mov	r3, r2
 8004d04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d08:	4b0d      	ldr	r3, [pc, #52]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	0f1b      	lsrs	r3, r3, #28
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004d16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004d26:	e003      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d28:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004d2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004d2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3798      	adds	r7, #152	@ 0x98
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800
 8004d44:	00f42400 	.word	0x00f42400
 8004d48:	017d7840 	.word	0x017d7840

08004d4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e28d      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 8083 	beq.w	8004e72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d6c:	4b94      	ldr	r3, [pc, #592]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d019      	beq.n	8004dac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d78:	4b91      	ldr	r3, [pc, #580]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d106      	bne.n	8004d92 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d84:	4b8e      	ldr	r3, [pc, #568]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d90:	d00c      	beq.n	8004dac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d92:	4b8b      	ldr	r3, [pc, #556]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004d9a:	2b0c      	cmp	r3, #12
 8004d9c:	d112      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9e:	4b88      	ldr	r3, [pc, #544]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004daa:	d10b      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	4b84      	ldr	r3, [pc, #528]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d05b      	beq.n	8004e70 <HAL_RCC_OscConfig+0x124>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d157      	bne.n	8004e70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e25a      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCC_OscConfig+0x90>
 8004dce:	4b7c      	ldr	r3, [pc, #496]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a7b      	ldr	r2, [pc, #492]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e01d      	b.n	8004e18 <HAL_RCC_OscConfig+0xcc>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCC_OscConfig+0xb4>
 8004de6:	4b76      	ldr	r3, [pc, #472]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a75      	ldr	r2, [pc, #468]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	4b73      	ldr	r3, [pc, #460]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a72      	ldr	r2, [pc, #456]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCC_OscConfig+0xcc>
 8004e00:	4b6f      	ldr	r3, [pc, #444]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a6e      	ldr	r2, [pc, #440]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a6b      	ldr	r2, [pc, #428]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d013      	beq.n	8004e48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7fe fc54 	bl	80036cc <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fe fc50 	bl	80036cc <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	@ 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e21f      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3a:	4b61      	ldr	r3, [pc, #388]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0xdc>
 8004e46:	e014      	b.n	8004e72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fe fc40 	bl	80036cc <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fe fc3c 	bl	80036cc <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	@ 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e20b      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e62:	4b57      	ldr	r3, [pc, #348]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x104>
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d06f      	beq.n	8004f5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004e7e:	4b50      	ldr	r3, [pc, #320]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d017      	beq.n	8004eba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e8a:	4b4d      	ldr	r3, [pc, #308]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d105      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004e96:	4b4a      	ldr	r3, [pc, #296]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00b      	beq.n	8004eba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ea2:	4b47      	ldr	r3, [pc, #284]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004eaa:	2b0c      	cmp	r3, #12
 8004eac:	d11c      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eae:	4b44      	ldr	r3, [pc, #272]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d116      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eba:	4b41      	ldr	r3, [pc, #260]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x186>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d001      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e1d3      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4937      	ldr	r1, [pc, #220]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee6:	e03a      	b.n	8004f5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d020      	beq.n	8004f32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef0:	4b34      	ldr	r3, [pc, #208]	@ (8004fc4 <HAL_RCC_OscConfig+0x278>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef6:	f7fe fbe9 	bl	80036cc <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004efe:	f7fe fbe5 	bl	80036cc <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e1b4      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f10:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1c:	4b28      	ldr	r3, [pc, #160]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4925      	ldr	r1, [pc, #148]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	600b      	str	r3, [r1, #0]
 8004f30:	e015      	b.n	8004f5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f32:	4b24      	ldr	r3, [pc, #144]	@ (8004fc4 <HAL_RCC_OscConfig+0x278>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fe fbc8 	bl	80036cc <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f40:	f7fe fbc4 	bl	80036cc <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e193      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f52:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d036      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d016      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f72:	4b15      	ldr	r3, [pc, #84]	@ (8004fc8 <HAL_RCC_OscConfig+0x27c>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7fe fba8 	bl	80036cc <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f80:	f7fe fba4 	bl	80036cc <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e173      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f92:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc0 <HAL_RCC_OscConfig+0x274>)
 8004f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0f0      	beq.n	8004f80 <HAL_RCC_OscConfig+0x234>
 8004f9e:	e01b      	b.n	8004fd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa0:	4b09      	ldr	r3, [pc, #36]	@ (8004fc8 <HAL_RCC_OscConfig+0x27c>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa6:	f7fe fb91 	bl	80036cc <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fac:	e00e      	b.n	8004fcc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fae:	f7fe fb8d 	bl	80036cc <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d907      	bls.n	8004fcc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e15c      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	42470000 	.word	0x42470000
 8004fc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fcc:	4b8a      	ldr	r3, [pc, #552]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8004fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1ea      	bne.n	8004fae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8097 	beq.w	8005114 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fea:	4b83      	ldr	r3, [pc, #524]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10f      	bne.n	8005016 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005004:	6413      	str	r3, [r2, #64]	@ 0x40
 8005006:	4b7c      	ldr	r3, [pc, #496]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005016:	4b79      	ldr	r3, [pc, #484]	@ (80051fc <HAL_RCC_OscConfig+0x4b0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501e:	2b00      	cmp	r3, #0
 8005020:	d118      	bne.n	8005054 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005022:	4b76      	ldr	r3, [pc, #472]	@ (80051fc <HAL_RCC_OscConfig+0x4b0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a75      	ldr	r2, [pc, #468]	@ (80051fc <HAL_RCC_OscConfig+0x4b0>)
 8005028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800502c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502e:	f7fe fb4d 	bl	80036cc <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005036:	f7fe fb49 	bl	80036cc <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e118      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005048:	4b6c      	ldr	r3, [pc, #432]	@ (80051fc <HAL_RCC_OscConfig+0x4b0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d106      	bne.n	800506a <HAL_RCC_OscConfig+0x31e>
 800505c:	4b66      	ldr	r3, [pc, #408]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005060:	4a65      	ldr	r2, [pc, #404]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6713      	str	r3, [r2, #112]	@ 0x70
 8005068:	e01c      	b.n	80050a4 <HAL_RCC_OscConfig+0x358>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b05      	cmp	r3, #5
 8005070:	d10c      	bne.n	800508c <HAL_RCC_OscConfig+0x340>
 8005072:	4b61      	ldr	r3, [pc, #388]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005076:	4a60      	ldr	r2, [pc, #384]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005078:	f043 0304 	orr.w	r3, r3, #4
 800507c:	6713      	str	r3, [r2, #112]	@ 0x70
 800507e:	4b5e      	ldr	r3, [pc, #376]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005082:	4a5d      	ldr	r2, [pc, #372]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	6713      	str	r3, [r2, #112]	@ 0x70
 800508a:	e00b      	b.n	80050a4 <HAL_RCC_OscConfig+0x358>
 800508c:	4b5a      	ldr	r3, [pc, #360]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005090:	4a59      	ldr	r2, [pc, #356]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005092:	f023 0301 	bic.w	r3, r3, #1
 8005096:	6713      	str	r3, [r2, #112]	@ 0x70
 8005098:	4b57      	ldr	r3, [pc, #348]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509c:	4a56      	ldr	r2, [pc, #344]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800509e:	f023 0304 	bic.w	r3, r3, #4
 80050a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d015      	beq.n	80050d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ac:	f7fe fb0e 	bl	80036cc <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b2:	e00a      	b.n	80050ca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b4:	f7fe fb0a 	bl	80036cc <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e0d7      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ca:	4b4b      	ldr	r3, [pc, #300]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0ee      	beq.n	80050b4 <HAL_RCC_OscConfig+0x368>
 80050d6:	e014      	b.n	8005102 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fe faf8 	bl	80036cc <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e0:	f7fe faf4 	bl	80036cc <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e0c1      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f6:	4b40      	ldr	r3, [pc, #256]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1ee      	bne.n	80050e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005102:	7dfb      	ldrb	r3, [r7, #23]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d105      	bne.n	8005114 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005108:	4b3b      	ldr	r3, [pc, #236]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	4a3a      	ldr	r2, [pc, #232]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800510e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005112:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 80ad 	beq.w	8005278 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800511e:	4b36      	ldr	r3, [pc, #216]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	2b08      	cmp	r3, #8
 8005128:	d060      	beq.n	80051ec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d145      	bne.n	80051be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005132:	4b33      	ldr	r3, [pc, #204]	@ (8005200 <HAL_RCC_OscConfig+0x4b4>)
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005138:	f7fe fac8 	bl	80036cc <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005140:	f7fe fac4 	bl	80036cc <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e093      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005152:	4b29      	ldr	r3, [pc, #164]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69da      	ldr	r2, [r3, #28]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	019b      	lsls	r3, r3, #6
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	3b01      	subs	r3, #1
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	061b      	lsls	r3, r3, #24
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005188:	071b      	lsls	r3, r3, #28
 800518a:	491b      	ldr	r1, [pc, #108]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 800518c:	4313      	orrs	r3, r2
 800518e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005190:	4b1b      	ldr	r3, [pc, #108]	@ (8005200 <HAL_RCC_OscConfig+0x4b4>)
 8005192:	2201      	movs	r2, #1
 8005194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005196:	f7fe fa99 	bl	80036cc <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519e:	f7fe fa95 	bl	80036cc <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e064      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b0:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x452>
 80051bc:	e05c      	b.n	8005278 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051be:	4b10      	ldr	r3, [pc, #64]	@ (8005200 <HAL_RCC_OscConfig+0x4b4>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fe fa82 	bl	80036cc <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051cc:	f7fe fa7e 	bl	80036cc <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e04d      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051de:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <HAL_RCC_OscConfig+0x4ac>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x480>
 80051ea:	e045      	b.n	8005278 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d107      	bne.n	8005204 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e040      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40007000 	.word	0x40007000
 8005200:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005204:	4b1f      	ldr	r3, [pc, #124]	@ (8005284 <HAL_RCC_OscConfig+0x538>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d030      	beq.n	8005274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800521c:	429a      	cmp	r2, r3
 800521e:	d129      	bne.n	8005274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522a:	429a      	cmp	r2, r3
 800522c:	d122      	bne.n	8005274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005234:	4013      	ands	r3, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800523a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800523c:	4293      	cmp	r3, r2
 800523e:	d119      	bne.n	8005274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524a:	085b      	lsrs	r3, r3, #1
 800524c:	3b01      	subs	r3, #1
 800524e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005250:	429a      	cmp	r2, r3
 8005252:	d10f      	bne.n	8005274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d107      	bne.n	8005274 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40023800 	.word	0x40023800

08005288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e041      	b.n	800531e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fd fe06 	bl	8002ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f000 fd8c 	bl	8005de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d001      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e04e      	b.n	80053de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a23      	ldr	r2, [pc, #140]	@ (80053ec <HAL_TIM_Base_Start_IT+0xc4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d022      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800536a:	d01d      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1f      	ldr	r2, [pc, #124]	@ (80053f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d018      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1e      	ldr	r2, [pc, #120]	@ (80053f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d013      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1c      	ldr	r2, [pc, #112]	@ (80053f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00e      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1b      	ldr	r2, [pc, #108]	@ (80053fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d009      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a19      	ldr	r2, [pc, #100]	@ (8005400 <HAL_TIM_Base_Start_IT+0xd8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <HAL_TIM_Base_Start_IT+0x80>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a18      	ldr	r2, [pc, #96]	@ (8005404 <HAL_TIM_Base_Start_IT+0xdc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d111      	bne.n	80053cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b06      	cmp	r3, #6
 80053b8:	d010      	beq.n	80053dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0201 	orr.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	e007      	b.n	80053dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40010400 	.word	0x40010400
 8005400:	40014000 	.word	0x40014000
 8005404:	40001800 	.word	0x40001800

08005408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e041      	b.n	800549e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fd fd6e 	bl	8002f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3304      	adds	r3, #4
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f000 fccc 	bl	8005de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <HAL_TIM_PWM_Start+0x24>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	bf14      	ite	ne
 80054c4:	2301      	movne	r3, #1
 80054c6:	2300      	moveq	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	e022      	b.n	8005512 <HAL_TIM_PWM_Start+0x6a>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d109      	bne.n	80054e6 <HAL_TIM_PWM_Start+0x3e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b01      	cmp	r3, #1
 80054dc:	bf14      	ite	ne
 80054de:	2301      	movne	r3, #1
 80054e0:	2300      	moveq	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	e015      	b.n	8005512 <HAL_TIM_PWM_Start+0x6a>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d109      	bne.n	8005500 <HAL_TIM_PWM_Start+0x58>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	bf14      	ite	ne
 80054f8:	2301      	movne	r3, #1
 80054fa:	2300      	moveq	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	e008      	b.n	8005512 <HAL_TIM_PWM_Start+0x6a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b01      	cmp	r3, #1
 800550a:	bf14      	ite	ne
 800550c:	2301      	movne	r3, #1
 800550e:	2300      	moveq	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e07c      	b.n	8005614 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d104      	bne.n	800552a <HAL_TIM_PWM_Start+0x82>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005528:	e013      	b.n	8005552 <HAL_TIM_PWM_Start+0xaa>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b04      	cmp	r3, #4
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start+0x92>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005538:	e00b      	b.n	8005552 <HAL_TIM_PWM_Start+0xaa>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b08      	cmp	r3, #8
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start+0xa2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005548:	e003      	b.n	8005552 <HAL_TIM_PWM_Start+0xaa>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2201      	movs	r2, #1
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 ff32 	bl	80063c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a2d      	ldr	r2, [pc, #180]	@ (800561c <HAL_TIM_PWM_Start+0x174>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_TIM_PWM_Start+0xcc>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2c      	ldr	r2, [pc, #176]	@ (8005620 <HAL_TIM_PWM_Start+0x178>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d101      	bne.n	8005578 <HAL_TIM_PWM_Start+0xd0>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <HAL_TIM_PWM_Start+0xd2>
 8005578:	2300      	movs	r3, #0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800558c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a22      	ldr	r2, [pc, #136]	@ (800561c <HAL_TIM_PWM_Start+0x174>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d022      	beq.n	80055de <HAL_TIM_PWM_Start+0x136>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055a0:	d01d      	beq.n	80055de <HAL_TIM_PWM_Start+0x136>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005624 <HAL_TIM_PWM_Start+0x17c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d018      	beq.n	80055de <HAL_TIM_PWM_Start+0x136>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005628 <HAL_TIM_PWM_Start+0x180>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <HAL_TIM_PWM_Start+0x136>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1c      	ldr	r2, [pc, #112]	@ (800562c <HAL_TIM_PWM_Start+0x184>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00e      	beq.n	80055de <HAL_TIM_PWM_Start+0x136>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a16      	ldr	r2, [pc, #88]	@ (8005620 <HAL_TIM_PWM_Start+0x178>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d009      	beq.n	80055de <HAL_TIM_PWM_Start+0x136>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a18      	ldr	r2, [pc, #96]	@ (8005630 <HAL_TIM_PWM_Start+0x188>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d004      	beq.n	80055de <HAL_TIM_PWM_Start+0x136>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a16      	ldr	r2, [pc, #88]	@ (8005634 <HAL_TIM_PWM_Start+0x18c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d111      	bne.n	8005602 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b06      	cmp	r3, #6
 80055ee:	d010      	beq.n	8005612 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005600:	e007      	b.n	8005612 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40010000 	.word	0x40010000
 8005620:	40010400 	.word	0x40010400
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800
 800562c:	40000c00 	.word	0x40000c00
 8005630:	40014000 	.word	0x40014000
 8005634:	40001800 	.word	0x40001800

08005638 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e097      	b.n	800577c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7fd fbe5 	bl	8002e30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800567c:	f023 0307 	bic.w	r3, r3, #7
 8005680:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3304      	adds	r3, #4
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f000 fba9 	bl	8005de4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ba:	f023 0303 	bic.w	r3, r3, #3
 80056be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	4313      	orrs	r3, r2
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80056d8:	f023 030c 	bic.w	r3, r3, #12
 80056dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	4313      	orrs	r3, r2
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	011a      	lsls	r2, r3, #4
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	031b      	lsls	r3, r3, #12
 8005708:	4313      	orrs	r3, r2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005716:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800571e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	4313      	orrs	r3, r2
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005794:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800579c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80057ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d110      	bne.n	80057d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d102      	bne.n	80057c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057ba:	7b7b      	ldrb	r3, [r7, #13]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d001      	beq.n	80057c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e069      	b.n	8005898 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057d4:	e031      	b.n	800583a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d110      	bne.n	80057fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057dc:	7bbb      	ldrb	r3, [r7, #14]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d102      	bne.n	80057e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057e2:	7b3b      	ldrb	r3, [r7, #12]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d001      	beq.n	80057ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e055      	b.n	8005898 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057fc:	e01d      	b.n	800583a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d108      	bne.n	8005816 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005804:	7bbb      	ldrb	r3, [r7, #14]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d105      	bne.n	8005816 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800580a:	7b7b      	ldrb	r3, [r7, #13]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d102      	bne.n	8005816 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005810:	7b3b      	ldrb	r3, [r7, #12]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d001      	beq.n	800581a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e03e      	b.n	8005898 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2202      	movs	r2, #2
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2202      	movs	r2, #2
 8005836:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_TIM_Encoder_Start+0xc4>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b04      	cmp	r3, #4
 8005844:	d008      	beq.n	8005858 <HAL_TIM_Encoder_Start+0xd4>
 8005846:	e00f      	b.n	8005868 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2201      	movs	r2, #1
 800584e:	2100      	movs	r1, #0
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fdb7 	bl	80063c4 <TIM_CCxChannelCmd>
      break;
 8005856:	e016      	b.n	8005886 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2201      	movs	r2, #1
 800585e:	2104      	movs	r1, #4
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fdaf 	bl	80063c4 <TIM_CCxChannelCmd>
      break;
 8005866:	e00e      	b.n	8005886 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2201      	movs	r2, #1
 800586e:	2100      	movs	r1, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fda7 	bl	80063c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2201      	movs	r2, #1
 800587c:	2104      	movs	r1, #4
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fda0 	bl	80063c4 <TIM_CCxChannelCmd>
      break;
 8005884:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d020      	beq.n	8005904 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01b      	beq.n	8005904 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0202 	mvn.w	r2, #2
 80058d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fa5b 	bl	8005da6 <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa4d 	bl	8005d92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fa5e 	bl	8005dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	d020      	beq.n	8005950 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01b      	beq.n	8005950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0204 	mvn.w	r2, #4
 8005920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2202      	movs	r2, #2
 8005926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fa35 	bl	8005da6 <HAL_TIM_IC_CaptureCallback>
 800593c:	e005      	b.n	800594a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa27 	bl	8005d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fa38 	bl	8005dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d020      	beq.n	800599c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01b      	beq.n	800599c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0208 	mvn.w	r2, #8
 800596c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2204      	movs	r2, #4
 8005972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fa0f 	bl	8005da6 <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa01 	bl	8005d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fa12 	bl	8005dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 0310 	and.w	r3, r3, #16
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d020      	beq.n	80059e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01b      	beq.n	80059e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0210 	mvn.w	r2, #16
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2208      	movs	r2, #8
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f9e9 	bl	8005da6 <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f9db 	bl	8005d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f9ec 	bl	8005dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00c      	beq.n	8005a0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d007      	beq.n	8005a0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0201 	mvn.w	r2, #1
 8005a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fd fde6 	bl	80035d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00c      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fd76 	bl	800651c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00c      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f9bd 	bl	8005dce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00c      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0220 	mvn.w	r2, #32
 8005a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fd48 	bl	8006508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e0ae      	b.n	8005bfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b0c      	cmp	r3, #12
 8005aaa:	f200 809f 	bhi.w	8005bec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005aae:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005ae9 	.word	0x08005ae9
 8005ab8:	08005bed 	.word	0x08005bed
 8005abc:	08005bed 	.word	0x08005bed
 8005ac0:	08005bed 	.word	0x08005bed
 8005ac4:	08005b29 	.word	0x08005b29
 8005ac8:	08005bed 	.word	0x08005bed
 8005acc:	08005bed 	.word	0x08005bed
 8005ad0:	08005bed 	.word	0x08005bed
 8005ad4:	08005b6b 	.word	0x08005b6b
 8005ad8:	08005bed 	.word	0x08005bed
 8005adc:	08005bed 	.word	0x08005bed
 8005ae0:	08005bed 	.word	0x08005bed
 8005ae4:	08005bab 	.word	0x08005bab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68b9      	ldr	r1, [r7, #8]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fa1e 	bl	8005f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0208 	orr.w	r2, r2, #8
 8005b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0204 	bic.w	r2, r2, #4
 8005b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6999      	ldr	r1, [r3, #24]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	619a      	str	r2, [r3, #24]
      break;
 8005b26:	e064      	b.n	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fa6e 	bl	8006010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6999      	ldr	r1, [r3, #24]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	021a      	lsls	r2, r3, #8
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	619a      	str	r2, [r3, #24]
      break;
 8005b68:	e043      	b.n	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fac3 	bl	80060fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0208 	orr.w	r2, r2, #8
 8005b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0204 	bic.w	r2, r2, #4
 8005b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69d9      	ldr	r1, [r3, #28]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	61da      	str	r2, [r3, #28]
      break;
 8005ba8:	e023      	b.n	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fb17 	bl	80061e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69da      	ldr	r2, [r3, #28]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69d9      	ldr	r1, [r3, #28]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	021a      	lsls	r2, r3, #8
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	61da      	str	r2, [r3, #28]
      break;
 8005bea:	e002      	b.n	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_TIM_ConfigClockSource+0x1c>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e0b4      	b.n	8005d8a <HAL_TIM_ConfigClockSource+0x186>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c58:	d03e      	beq.n	8005cd8 <HAL_TIM_ConfigClockSource+0xd4>
 8005c5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5e:	f200 8087 	bhi.w	8005d70 <HAL_TIM_ConfigClockSource+0x16c>
 8005c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c66:	f000 8086 	beq.w	8005d76 <HAL_TIM_ConfigClockSource+0x172>
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6e:	d87f      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b70      	cmp	r3, #112	@ 0x70
 8005c72:	d01a      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0xa6>
 8005c74:	2b70      	cmp	r3, #112	@ 0x70
 8005c76:	d87b      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x16c>
 8005c78:	2b60      	cmp	r3, #96	@ 0x60
 8005c7a:	d050      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0x11a>
 8005c7c:	2b60      	cmp	r3, #96	@ 0x60
 8005c7e:	d877      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x16c>
 8005c80:	2b50      	cmp	r3, #80	@ 0x50
 8005c82:	d03c      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0xfa>
 8005c84:	2b50      	cmp	r3, #80	@ 0x50
 8005c86:	d873      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x16c>
 8005c88:	2b40      	cmp	r3, #64	@ 0x40
 8005c8a:	d058      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0x13a>
 8005c8c:	2b40      	cmp	r3, #64	@ 0x40
 8005c8e:	d86f      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x16c>
 8005c90:	2b30      	cmp	r3, #48	@ 0x30
 8005c92:	d064      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x15a>
 8005c94:	2b30      	cmp	r3, #48	@ 0x30
 8005c96:	d86b      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x16c>
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d060      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x15a>
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d867      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d05c      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x15a>
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d05a      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x15a>
 8005ca8:	e062      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cba:	f000 fb63 	bl	8006384 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ccc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	609a      	str	r2, [r3, #8]
      break;
 8005cd6:	e04f      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ce8:	f000 fb4c 	bl	8006384 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cfa:	609a      	str	r2, [r3, #8]
      break;
 8005cfc:	e03c      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f000 fac0 	bl	8006290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2150      	movs	r1, #80	@ 0x50
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fb19 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005d1c:	e02c      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f000 fadf 	bl	80062ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2160      	movs	r1, #96	@ 0x60
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fb09 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005d3c:	e01c      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f000 faa0 	bl	8006290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2140      	movs	r1, #64	@ 0x40
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 faf9 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005d5c:	e00c      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4619      	mov	r1, r3
 8005d68:	4610      	mov	r0, r2
 8005d6a:	f000 faf0 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005d6e:	e003      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
      break;
 8005d74:	e000      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a43      	ldr	r2, [pc, #268]	@ (8005f04 <TIM_Base_SetConfig+0x120>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d013      	beq.n	8005e24 <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e02:	d00f      	beq.n	8005e24 <TIM_Base_SetConfig+0x40>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a40      	ldr	r2, [pc, #256]	@ (8005f08 <TIM_Base_SetConfig+0x124>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00b      	beq.n	8005e24 <TIM_Base_SetConfig+0x40>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8005f0c <TIM_Base_SetConfig+0x128>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d007      	beq.n	8005e24 <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a3e      	ldr	r2, [pc, #248]	@ (8005f10 <TIM_Base_SetConfig+0x12c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <TIM_Base_SetConfig+0x40>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8005f14 <TIM_Base_SetConfig+0x130>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d108      	bne.n	8005e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a32      	ldr	r2, [pc, #200]	@ (8005f04 <TIM_Base_SetConfig+0x120>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d02b      	beq.n	8005e96 <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e44:	d027      	beq.n	8005e96 <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a2f      	ldr	r2, [pc, #188]	@ (8005f08 <TIM_Base_SetConfig+0x124>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d023      	beq.n	8005e96 <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a2e      	ldr	r2, [pc, #184]	@ (8005f0c <TIM_Base_SetConfig+0x128>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d01f      	beq.n	8005e96 <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a2d      	ldr	r2, [pc, #180]	@ (8005f10 <TIM_Base_SetConfig+0x12c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01b      	beq.n	8005e96 <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a2c      	ldr	r2, [pc, #176]	@ (8005f14 <TIM_Base_SetConfig+0x130>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d017      	beq.n	8005e96 <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a2b      	ldr	r2, [pc, #172]	@ (8005f18 <TIM_Base_SetConfig+0x134>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a2a      	ldr	r2, [pc, #168]	@ (8005f1c <TIM_Base_SetConfig+0x138>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00f      	beq.n	8005e96 <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a29      	ldr	r2, [pc, #164]	@ (8005f20 <TIM_Base_SetConfig+0x13c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00b      	beq.n	8005e96 <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a28      	ldr	r2, [pc, #160]	@ (8005f24 <TIM_Base_SetConfig+0x140>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d007      	beq.n	8005e96 <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a27      	ldr	r2, [pc, #156]	@ (8005f28 <TIM_Base_SetConfig+0x144>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d003      	beq.n	8005e96 <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a26      	ldr	r2, [pc, #152]	@ (8005f2c <TIM_Base_SetConfig+0x148>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d108      	bne.n	8005ea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8005f04 <TIM_Base_SetConfig+0x120>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_Base_SetConfig+0xf2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a10      	ldr	r2, [pc, #64]	@ (8005f14 <TIM_Base_SetConfig+0x130>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d103      	bne.n	8005ede <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f043 0204 	orr.w	r2, r3, #4
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	601a      	str	r2, [r3, #0]
}
 8005ef6:	bf00      	nop
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40010000 	.word	0x40010000
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40000800 	.word	0x40000800
 8005f10:	40000c00 	.word	0x40000c00
 8005f14:	40010400 	.word	0x40010400
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	40014400 	.word	0x40014400
 8005f20:	40014800 	.word	0x40014800
 8005f24:	40001800 	.word	0x40001800
 8005f28:	40001c00 	.word	0x40001c00
 8005f2c:	40002000 	.word	0x40002000

08005f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	f023 0201 	bic.w	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f023 0302 	bic.w	r3, r3, #2
 8005f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a20      	ldr	r2, [pc, #128]	@ (8006008 <TIM_OC1_SetConfig+0xd8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_OC1_SetConfig+0x64>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800600c <TIM_OC1_SetConfig+0xdc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d10c      	bne.n	8005fae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 0308 	bic.w	r3, r3, #8
 8005f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f023 0304 	bic.w	r3, r3, #4
 8005fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a15      	ldr	r2, [pc, #84]	@ (8006008 <TIM_OC1_SetConfig+0xd8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d003      	beq.n	8005fbe <TIM_OC1_SetConfig+0x8e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a14      	ldr	r2, [pc, #80]	@ (800600c <TIM_OC1_SetConfig+0xdc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d111      	bne.n	8005fe2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	621a      	str	r2, [r3, #32]
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40010000 	.word	0x40010000
 800600c:	40010400 	.word	0x40010400

08006010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f023 0210 	bic.w	r2, r3, #16
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800603e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f023 0320 	bic.w	r3, r3, #32
 800605a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a22      	ldr	r2, [pc, #136]	@ (80060f4 <TIM_OC2_SetConfig+0xe4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_OC2_SetConfig+0x68>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a21      	ldr	r2, [pc, #132]	@ (80060f8 <TIM_OC2_SetConfig+0xe8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d10d      	bne.n	8006094 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800607e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006092:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a17      	ldr	r2, [pc, #92]	@ (80060f4 <TIM_OC2_SetConfig+0xe4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_OC2_SetConfig+0x94>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a16      	ldr	r2, [pc, #88]	@ (80060f8 <TIM_OC2_SetConfig+0xe8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d113      	bne.n	80060cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40010400 	.word	0x40010400

080060fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0303 	bic.w	r3, r3, #3
 8006132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a21      	ldr	r2, [pc, #132]	@ (80061dc <TIM_OC3_SetConfig+0xe0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d003      	beq.n	8006162 <TIM_OC3_SetConfig+0x66>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a20      	ldr	r2, [pc, #128]	@ (80061e0 <TIM_OC3_SetConfig+0xe4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d10d      	bne.n	800617e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800617c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a16      	ldr	r2, [pc, #88]	@ (80061dc <TIM_OC3_SetConfig+0xe0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d003      	beq.n	800618e <TIM_OC3_SetConfig+0x92>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a15      	ldr	r2, [pc, #84]	@ (80061e0 <TIM_OC3_SetConfig+0xe4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d113      	bne.n	80061b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800619c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	621a      	str	r2, [r3, #32]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	40010000 	.word	0x40010000
 80061e0:	40010400 	.word	0x40010400

080061e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800622e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	031b      	lsls	r3, r3, #12
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a12      	ldr	r2, [pc, #72]	@ (8006288 <TIM_OC4_SetConfig+0xa4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_OC4_SetConfig+0x68>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a11      	ldr	r2, [pc, #68]	@ (800628c <TIM_OC4_SetConfig+0xa8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d109      	bne.n	8006260 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	019b      	lsls	r3, r3, #6
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	621a      	str	r2, [r3, #32]
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400

08006290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f023 0201 	bic.w	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f023 030a 	bic.w	r3, r3, #10
 80062cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b087      	sub	sp, #28
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	f023 0210 	bic.w	r2, r3, #16
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006318:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	031b      	lsls	r3, r3, #12
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800632a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	f043 0307 	orr.w	r3, r3, #7
 8006370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	609a      	str	r2, [r3, #8]
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800639e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	021a      	lsls	r2, r3, #8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	609a      	str	r2, [r3, #8]
}
 80063b8:	bf00      	nop
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2201      	movs	r2, #1
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1a      	ldr	r2, [r3, #32]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	43db      	mvns	r3, r3
 80063e6:	401a      	ands	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1a      	ldr	r2, [r3, #32]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	fa01 f303 	lsl.w	r3, r1, r3
 80063fc:	431a      	orrs	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006424:	2302      	movs	r3, #2
 8006426:	e05a      	b.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800644e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a21      	ldr	r2, [pc, #132]	@ (80064ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d022      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006474:	d01d      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1d      	ldr	r2, [pc, #116]	@ (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d018      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a1b      	ldr	r2, [pc, #108]	@ (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1a      	ldr	r2, [pc, #104]	@ (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00e      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a18      	ldr	r2, [pc, #96]	@ (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d009      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a17      	ldr	r2, [pc, #92]	@ (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d004      	beq.n	80064b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a15      	ldr	r2, [pc, #84]	@ (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10c      	bne.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40010000 	.word	0x40010000
 80064f0:	40000400 	.word	0x40000400
 80064f4:	40000800 	.word	0x40000800
 80064f8:	40000c00 	.word	0x40000c00
 80064fc:	40010400 	.word	0x40010400
 8006500:	40014000 	.word	0x40014000
 8006504:	40001800 	.word	0x40001800

08006508 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e042      	b.n	80065c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7fc fd74 	bl	8003044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2224      	movs	r2, #36	@ 0x24
 8006560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006572:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 f8d9 	bl	800772c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006588:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	695a      	ldr	r2, [r3, #20]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006598:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08a      	sub	sp, #40	@ 0x28
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	4613      	mov	r3, r2
 80065de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d175      	bne.n	80066dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_UART_Transmit+0x2c>
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e06e      	b.n	80066de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2221      	movs	r2, #33	@ 0x21
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800660e:	f7fd f85d 	bl	80036cc <HAL_GetTick>
 8006612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	88fa      	ldrh	r2, [r7, #6]
 8006618:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	88fa      	ldrh	r2, [r7, #6]
 800661e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006628:	d108      	bne.n	800663c <HAL_UART_Transmit+0x6c>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d104      	bne.n	800663c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	e003      	b.n	8006644 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006640:	2300      	movs	r3, #0
 8006642:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006644:	e02e      	b.n	80066a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2200      	movs	r2, #0
 800664e:	2180      	movs	r1, #128	@ 0x80
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fdaa 	bl	80071aa <UART_WaitOnFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2220      	movs	r2, #32
 8006660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e03a      	b.n	80066de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800667c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	3302      	adds	r3, #2
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	e007      	b.n	8006696 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	781a      	ldrb	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	3301      	adds	r3, #1
 8006694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1cb      	bne.n	8006646 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2200      	movs	r2, #0
 80066b6:	2140      	movs	r1, #64	@ 0x40
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 fd76 	bl	80071aa <UART_WaitOnFlagUntilTimeout>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e006      	b.n	80066de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	e000      	b.n	80066de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80066dc:	2302      	movs	r3, #2
  }
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3720      	adds	r7, #32
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08c      	sub	sp, #48	@ 0x30
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d162      	bne.n	80067c8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <HAL_UART_Transmit_DMA+0x26>
 8006708:	88fb      	ldrh	r3, [r7, #6]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e05b      	b.n	80067ca <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	88fa      	ldrh	r2, [r7, #6]
 800671c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	88fa      	ldrh	r2, [r7, #6]
 8006722:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2221      	movs	r2, #33	@ 0x21
 800672e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006736:	4a27      	ldr	r2, [pc, #156]	@ (80067d4 <HAL_UART_Transmit_DMA+0xec>)
 8006738:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673e:	4a26      	ldr	r2, [pc, #152]	@ (80067d8 <HAL_UART_Transmit_DMA+0xf0>)
 8006740:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	4a25      	ldr	r2, [pc, #148]	@ (80067dc <HAL_UART_Transmit_DMA+0xf4>)
 8006748:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674e:	2200      	movs	r2, #0
 8006750:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006752:	f107 0308 	add.w	r3, r7, #8
 8006756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675e:	6819      	ldr	r1, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3304      	adds	r3, #4
 8006766:	461a      	mov	r2, r3
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	f7fd f94b 	bl	8003a04 <HAL_DMA_Start_IT>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2210      	movs	r2, #16
 8006778:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e021      	b.n	80067ca <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800678e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3314      	adds	r3, #20
 8006796:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	617b      	str	r3, [r7, #20]
   return(result);
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3314      	adds	r3, #20
 80067ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80067b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6a39      	ldr	r1, [r7, #32]
 80067b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e5      	bne.n	8006790 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e000      	b.n	80067ca <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80067c8:	2302      	movs	r3, #2
  }
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3730      	adds	r7, #48	@ 0x30
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	08006ef9 	.word	0x08006ef9
 80067d8:	08006f93 	.word	0x08006f93
 80067dc:	08007117 	.word	0x08007117

080067e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	4613      	mov	r3, r2
 80067ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	d112      	bne.n	8006820 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <HAL_UART_Receive_DMA+0x26>
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e00b      	b.n	8006822 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	461a      	mov	r2, r3
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 fd20 	bl	800725c <UART_Start_Receive_DMA>
 800681c:	4603      	mov	r3, r0
 800681e:	e000      	b.n	8006822 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006820:	2302      	movs	r3, #2
  }
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b090      	sub	sp, #64	@ 0x40
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006832:	2300      	movs	r3, #0
 8006834:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006840:	2b80      	cmp	r3, #128	@ 0x80
 8006842:	bf0c      	ite	eq
 8006844:	2301      	moveq	r3, #1
 8006846:	2300      	movne	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b21      	cmp	r3, #33	@ 0x21
 8006856:	d128      	bne.n	80068aa <HAL_UART_DMAStop+0x80>
 8006858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800685a:	2b00      	cmp	r3, #0
 800685c:	d025      	beq.n	80068aa <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3314      	adds	r3, #20
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	623b      	str	r3, [r7, #32]
   return(result);
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006874:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3314      	adds	r3, #20
 800687c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800687e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800688c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e5      	bne.n	800685e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006896:	2b00      	cmp	r3, #0
 8006898:	d004      	beq.n	80068a4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd f908 	bl	8003ab4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fd7f 	bl	80073a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b4:	2b40      	cmp	r3, #64	@ 0x40
 80068b6:	bf0c      	ite	eq
 80068b8:	2301      	moveq	r3, #1
 80068ba:	2300      	movne	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b22      	cmp	r3, #34	@ 0x22
 80068ca:	d128      	bne.n	800691e <HAL_UART_DMAStop+0xf4>
 80068cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d025      	beq.n	800691e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3314      	adds	r3, #20
 80068d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3314      	adds	r3, #20
 80068f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068f2:	61fa      	str	r2, [r7, #28]
 80068f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	69b9      	ldr	r1, [r7, #24]
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e5      	bne.n	80068d2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006912:	4618      	mov	r0, r3
 8006914:	f7fd f8ce 	bl	8003ab4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fd6d 	bl	80073f8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3740      	adds	r7, #64	@ 0x40
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b0ba      	sub	sp, #232	@ 0xe8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800694e:	2300      	movs	r3, #0
 8006950:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006954:	2300      	movs	r3, #0
 8006956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800695a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10f      	bne.n	800698e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	d009      	beq.n	800698e <HAL_UART_IRQHandler+0x66>
 800697a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fe12 	bl	80075b0 <UART_Receive_IT>
      return;
 800698c:	e273      	b.n	8006e76 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800698e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 80de 	beq.w	8006b54 <HAL_UART_IRQHandler+0x22c>
 8006998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d106      	bne.n	80069b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80d1 	beq.w	8006b54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00b      	beq.n	80069d6 <HAL_UART_IRQHandler+0xae>
 80069be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ce:	f043 0201 	orr.w	r2, r3, #1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <HAL_UART_IRQHandler+0xd2>
 80069e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f2:	f043 0202 	orr.w	r2, r3, #2
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00b      	beq.n	8006a1e <HAL_UART_IRQHandler+0xf6>
 8006a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a16:	f043 0204 	orr.w	r2, r3, #4
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d011      	beq.n	8006a4e <HAL_UART_IRQHandler+0x126>
 8006a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d105      	bne.n	8006a42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d005      	beq.n	8006a4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a46:	f043 0208 	orr.w	r2, r3, #8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 820a 	beq.w	8006e6c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <HAL_UART_IRQHandler+0x14e>
 8006a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fd9d 	bl	80075b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a80:	2b40      	cmp	r3, #64	@ 0x40
 8006a82:	bf0c      	ite	eq
 8006a84:	2301      	moveq	r3, #1
 8006a86:	2300      	movne	r3, #0
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a92:	f003 0308 	and.w	r3, r3, #8
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x17a>
 8006a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d04f      	beq.n	8006b42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fca8 	bl	80073f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab2:	2b40      	cmp	r3, #64	@ 0x40
 8006ab4:	d141      	bne.n	8006b3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3314      	adds	r3, #20
 8006abc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ad0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3314      	adds	r3, #20
 8006ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1d9      	bne.n	8006ab6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d013      	beq.n	8006b32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8006d38 <HAL_UART_IRQHandler+0x410>)
 8006b10:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fd f83c 	bl	8003b94 <HAL_DMA_Abort_IT>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d016      	beq.n	8006b50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b30:	e00e      	b.n	8006b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f9ca 	bl	8006ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b38:	e00a      	b.n	8006b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f9c6 	bl	8006ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b40:	e006      	b.n	8006b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f9c2 	bl	8006ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006b4e:	e18d      	b.n	8006e6c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b50:	bf00      	nop
    return;
 8006b52:	e18b      	b.n	8006e6c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	f040 8167 	bne.w	8006e2c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b62:	f003 0310 	and.w	r3, r3, #16
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 8160 	beq.w	8006e2c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8159 	beq.w	8006e2c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	60bb      	str	r3, [r7, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	60bb      	str	r3, [r7, #8]
 8006b8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9a:	2b40      	cmp	r3, #64	@ 0x40
 8006b9c:	f040 80ce 	bne.w	8006d3c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80a9 	beq.w	8006d08 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	f080 80a2 	bcs.w	8006d08 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bd6:	f000 8088 	beq.w	8006cea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	330c      	adds	r3, #12
 8006be0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	330c      	adds	r3, #12
 8006c02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006c06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1d9      	bne.n	8006bda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3314      	adds	r3, #20
 8006c2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3314      	adds	r3, #20
 8006c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e1      	bne.n	8006c26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3314      	adds	r3, #20
 8006c68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3314      	adds	r3, #20
 8006c82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e3      	bne.n	8006c62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cba:	f023 0310 	bic.w	r3, r3, #16
 8006cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	330c      	adds	r3, #12
 8006cc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006ccc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006cce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e3      	bne.n	8006ca8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fc fee5 	bl	8003ab4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2202      	movs	r2, #2
 8006cee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f8ed 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006d06:	e0b3      	b.n	8006e70 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d10:	429a      	cmp	r2, r3
 8006d12:	f040 80ad 	bne.w	8006e70 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d20:	f040 80a6 	bne.w	8006e70 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f8d5 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
      return;
 8006d36:	e09b      	b.n	8006e70 <HAL_UART_IRQHandler+0x548>
 8006d38:	080074bf 	.word	0x080074bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 808e 	beq.w	8006e74 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 8089 	beq.w	8006e74 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006d86:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1e3      	bne.n	8006d62 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3314      	adds	r3, #20
 8006da0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	623b      	str	r3, [r7, #32]
   return(result);
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	f023 0301 	bic.w	r3, r3, #1
 8006db0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3314      	adds	r3, #20
 8006dba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006dbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e3      	bne.n	8006d9a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	330c      	adds	r3, #12
 8006de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0310 	bic.w	r3, r3, #16
 8006df6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	330c      	adds	r3, #12
 8006e00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006e04:	61fa      	str	r2, [r7, #28]
 8006e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	69b9      	ldr	r1, [r7, #24]
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	617b      	str	r3, [r7, #20]
   return(result);
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e3      	bne.n	8006de0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f85b 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e2a:	e023      	b.n	8006e74 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d009      	beq.n	8006e4c <HAL_UART_IRQHandler+0x524>
 8006e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fb4b 	bl	80074e0 <UART_Transmit_IT>
    return;
 8006e4a:	e014      	b.n	8006e76 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00e      	beq.n	8006e76 <HAL_UART_IRQHandler+0x54e>
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d008      	beq.n	8006e76 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fb8b 	bl	8007580 <UART_EndTransmit_IT>
    return;
 8006e6a:	e004      	b.n	8006e76 <HAL_UART_IRQHandler+0x54e>
    return;
 8006e6c:	bf00      	nop
 8006e6e:	e002      	b.n	8006e76 <HAL_UART_IRQHandler+0x54e>
      return;
 8006e70:	bf00      	nop
 8006e72:	e000      	b.n	8006e76 <HAL_UART_IRQHandler+0x54e>
      return;
 8006e74:	bf00      	nop
  }
}
 8006e76:	37e8      	adds	r7, #232	@ 0xe8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b090      	sub	sp, #64	@ 0x40
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d137      	bne.n	8006f84 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f16:	2200      	movs	r2, #0
 8006f18:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3314      	adds	r3, #20
 8006f20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	623b      	str	r3, [r7, #32]
   return(result);
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3314      	adds	r3, #20
 8006f38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e5      	bne.n	8006f1a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	330c      	adds	r3, #12
 8006f54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f6e:	61fa      	str	r2, [r7, #28]
 8006f70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	69b9      	ldr	r1, [r7, #24]
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e5      	bne.n	8006f4e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f82:	e002      	b.n	8006f8a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006f84:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006f86:	f7ff ff79 	bl	8006e7c <HAL_UART_TxCpltCallback>
}
 8006f8a:	bf00      	nop
 8006f8c:	3740      	adds	r7, #64	@ 0x40
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f7ff ff75 	bl	8006e90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b09c      	sub	sp, #112	@ 0x70
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d172      	bne.n	80070b0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fcc:	2200      	movs	r2, #0
 8006fce:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	330c      	adds	r3, #12
 8006fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fda:	e853 3f00 	ldrex	r3, [r3]
 8006fde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fe2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fe6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	330c      	adds	r3, #12
 8006fee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006ff0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ff2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ff6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e5      	bne.n	8006fd0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007004:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3314      	adds	r3, #20
 800700a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007016:	f023 0301 	bic.w	r3, r3, #1
 800701a:	667b      	str	r3, [r7, #100]	@ 0x64
 800701c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3314      	adds	r3, #20
 8007022:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007024:	647a      	str	r2, [r7, #68]	@ 0x44
 8007026:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800702a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e5      	bne.n	8007004 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3314      	adds	r3, #20
 800703e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	623b      	str	r3, [r7, #32]
   return(result);
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800704e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007050:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3314      	adds	r3, #20
 8007056:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007058:	633a      	str	r2, [r7, #48]	@ 0x30
 800705a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800705e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e5      	bne.n	8007038 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800706c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800706e:	2220      	movs	r2, #32
 8007070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007078:	2b01      	cmp	r3, #1
 800707a:	d119      	bne.n	80070b0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	e853 3f00 	ldrex	r3, [r3]
 800708a:	60fb      	str	r3, [r7, #12]
   return(result);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0310 	bic.w	r3, r3, #16
 8007092:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	330c      	adds	r3, #12
 800709a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800709c:	61fa      	str	r2, [r7, #28]
 800709e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a0:	69b9      	ldr	r1, [r7, #24]
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	e841 2300 	strex	r3, r2, [r1]
 80070a8:	617b      	str	r3, [r7, #20]
   return(result);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1e5      	bne.n	800707c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070b2:	2200      	movs	r2, #0
 80070b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d106      	bne.n	80070cc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070c2:	4619      	mov	r1, r3
 80070c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80070c6:	f7ff ff0b 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070ca:	e002      	b.n	80070d2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80070cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80070ce:	f7ff fee9 	bl	8006ea4 <HAL_UART_RxCpltCallback>
}
 80070d2:	bf00      	nop
 80070d4:	3770      	adds	r7, #112	@ 0x70
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2201      	movs	r2, #1
 80070ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d108      	bne.n	8007108 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	4619      	mov	r1, r3
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff feed 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007106:	e002      	b.n	800710e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f7ff fed5 	bl	8006eb8 <HAL_UART_RxHalfCpltCallback>
}
 800710e:	bf00      	nop
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800711e:	2300      	movs	r3, #0
 8007120:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007126:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007132:	2b80      	cmp	r3, #128	@ 0x80
 8007134:	bf0c      	ite	eq
 8007136:	2301      	moveq	r3, #1
 8007138:	2300      	movne	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b21      	cmp	r3, #33	@ 0x21
 8007148:	d108      	bne.n	800715c <UART_DMAError+0x46>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2200      	movs	r2, #0
 8007154:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007156:	68b8      	ldr	r0, [r7, #8]
 8007158:	f000 f926 	bl	80073a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007166:	2b40      	cmp	r3, #64	@ 0x40
 8007168:	bf0c      	ite	eq
 800716a:	2301      	moveq	r3, #1
 800716c:	2300      	movne	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b22      	cmp	r3, #34	@ 0x22
 800717c:	d108      	bne.n	8007190 <UART_DMAError+0x7a>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800718a:	68b8      	ldr	r0, [r7, #8]
 800718c:	f000 f934 	bl	80073f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007194:	f043 0210 	orr.w	r2, r3, #16
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800719c:	68b8      	ldr	r0, [r7, #8]
 800719e:	f7ff fe95 	bl	8006ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071a2:	bf00      	nop
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b086      	sub	sp, #24
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	603b      	str	r3, [r7, #0]
 80071b6:	4613      	mov	r3, r2
 80071b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ba:	e03b      	b.n	8007234 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071c2:	d037      	beq.n	8007234 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c4:	f7fc fa82 	bl	80036cc <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	6a3a      	ldr	r2, [r7, #32]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d302      	bcc.n	80071da <UART_WaitOnFlagUntilTimeout+0x30>
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e03a      	b.n	8007254 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d023      	beq.n	8007234 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b80      	cmp	r3, #128	@ 0x80
 80071f0:	d020      	beq.n	8007234 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b40      	cmp	r3, #64	@ 0x40
 80071f6:	d01d      	beq.n	8007234 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b08      	cmp	r3, #8
 8007204:	d116      	bne.n	8007234 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f8eb 	bl	80073f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2208      	movs	r2, #8
 8007226:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e00f      	b.n	8007254 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	4013      	ands	r3, r2
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	429a      	cmp	r2, r3
 8007242:	bf0c      	ite	eq
 8007244:	2301      	moveq	r3, #1
 8007246:	2300      	movne	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	429a      	cmp	r2, r3
 8007250:	d0b4      	beq.n	80071bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b098      	sub	sp, #96	@ 0x60
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	4613      	mov	r3, r2
 8007268:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	88fa      	ldrh	r2, [r7, #6]
 8007274:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2222      	movs	r2, #34	@ 0x22
 8007280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007288:	4a44      	ldr	r2, [pc, #272]	@ (800739c <UART_Start_Receive_DMA+0x140>)
 800728a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007290:	4a43      	ldr	r2, [pc, #268]	@ (80073a0 <UART_Start_Receive_DMA+0x144>)
 8007292:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007298:	4a42      	ldr	r2, [pc, #264]	@ (80073a4 <UART_Start_Receive_DMA+0x148>)
 800729a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a0:	2200      	movs	r2, #0
 80072a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80072a4:	f107 0308 	add.w	r3, r7, #8
 80072a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4619      	mov	r1, r3
 80072b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	f7fc fba2 	bl	8003a04 <HAL_DMA_Start_IT>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d008      	beq.n	80072d8 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2210      	movs	r2, #16
 80072ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e05d      	b.n	8007394 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80072d8:	2300      	movs	r3, #0
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d019      	beq.n	800732a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	330c      	adds	r3, #12
 80072fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800730c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	330c      	adds	r3, #12
 8007314:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007316:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007318:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800731c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e5      	bne.n	80072f6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3314      	adds	r3, #20
 8007330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800733a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733c:	f043 0301 	orr.w	r3, r3, #1
 8007340:	657b      	str	r3, [r7, #84]	@ 0x54
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3314      	adds	r3, #20
 8007348:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800734a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800734c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e5      	bne.n	800732a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3314      	adds	r3, #20
 8007364:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	617b      	str	r3, [r7, #20]
   return(result);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007374:	653b      	str	r3, [r7, #80]	@ 0x50
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3314      	adds	r3, #20
 800737c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800737e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6a39      	ldr	r1, [r7, #32]
 8007384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	61fb      	str	r3, [r7, #28]
   return(result);
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e5      	bne.n	800735e <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3760      	adds	r7, #96	@ 0x60
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	08006faf 	.word	0x08006faf
 80073a0:	080070db 	.word	0x080070db
 80073a4:	08007117 	.word	0x08007117

080073a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b089      	sub	sp, #36	@ 0x24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	330c      	adds	r3, #12
 80073b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	60bb      	str	r3, [r7, #8]
   return(result);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80073c6:	61fb      	str	r3, [r7, #28]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	69fa      	ldr	r2, [r7, #28]
 80073d0:	61ba      	str	r2, [r7, #24]
 80073d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	6979      	ldr	r1, [r7, #20]
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	613b      	str	r3, [r7, #16]
   return(result);
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e5      	bne.n	80073b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80073ec:	bf00      	nop
 80073ee:	3724      	adds	r7, #36	@ 0x24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b095      	sub	sp, #84	@ 0x54
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	330c      	adds	r3, #12
 8007406:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	330c      	adds	r3, #12
 800741e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007420:	643a      	str	r2, [r7, #64]	@ 0x40
 8007422:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007426:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800742e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e5      	bne.n	8007400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3314      	adds	r3, #20
 800743a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	61fb      	str	r3, [r7, #28]
   return(result);
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f023 0301 	bic.w	r3, r3, #1
 800744a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3314      	adds	r3, #20
 8007452:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007454:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007456:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800745a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e5      	bne.n	8007434 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800746c:	2b01      	cmp	r3, #1
 800746e:	d119      	bne.n	80074a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	330c      	adds	r3, #12
 8007476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f023 0310 	bic.w	r3, r3, #16
 8007486:	647b      	str	r3, [r7, #68]	@ 0x44
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	330c      	adds	r3, #12
 800748e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007490:	61ba      	str	r2, [r7, #24]
 8007492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	6979      	ldr	r1, [r7, #20]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	613b      	str	r3, [r7, #16]
   return(result);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e5      	bne.n	8007470 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2220      	movs	r2, #32
 80074a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80074b2:	bf00      	nop
 80074b4:	3754      	adds	r7, #84	@ 0x54
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f7ff fcfa 	bl	8006ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d8:	bf00      	nop
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b21      	cmp	r3, #33	@ 0x21
 80074f2:	d13e      	bne.n	8007572 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074fc:	d114      	bne.n	8007528 <UART_Transmit_IT+0x48>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d110      	bne.n	8007528 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800751a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	1c9a      	adds	r2, r3, #2
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	621a      	str	r2, [r3, #32]
 8007526:	e008      	b.n	800753a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	1c59      	adds	r1, r3, #1
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	6211      	str	r1, [r2, #32]
 8007532:	781a      	ldrb	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b29b      	uxth	r3, r3
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	4619      	mov	r1, r3
 8007548:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10f      	bne.n	800756e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800755c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800756c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	e000      	b.n	8007574 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007572:	2302      	movs	r3, #2
  }
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007596:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff fc6b 	bl	8006e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08c      	sub	sp, #48	@ 0x30
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80075bc:	2300      	movs	r3, #0
 80075be:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b22      	cmp	r3, #34	@ 0x22
 80075ca:	f040 80aa 	bne.w	8007722 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075d6:	d115      	bne.n	8007604 <UART_Receive_IT+0x54>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d111      	bne.n	8007604 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	1c9a      	adds	r2, r3, #2
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	629a      	str	r2, [r3, #40]	@ 0x28
 8007602:	e024      	b.n	800764e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007608:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007612:	d007      	beq.n	8007624 <UART_Receive_IT+0x74>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <UART_Receive_IT+0x82>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	b2da      	uxtb	r2, r3
 800762c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	e008      	b.n	8007644 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800763e:	b2da      	uxtb	r2, r3
 8007640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007642:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	b29b      	uxth	r3, r3
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	4619      	mov	r1, r3
 800765c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800765e:	2b00      	cmp	r3, #0
 8007660:	d15d      	bne.n	800771e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0220 	bic.w	r2, r2, #32
 8007670:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007680:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	695a      	ldr	r2, [r3, #20]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0201 	bic.w	r2, r2, #1
 8007690:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2220      	movs	r2, #32
 8007696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d135      	bne.n	8007714 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	330c      	adds	r3, #12
 80076b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	613b      	str	r3, [r7, #16]
   return(result);
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f023 0310 	bic.w	r3, r3, #16
 80076c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	330c      	adds	r3, #12
 80076cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ce:	623a      	str	r2, [r7, #32]
 80076d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	69f9      	ldr	r1, [r7, #28]
 80076d4:	6a3a      	ldr	r2, [r7, #32]
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	61bb      	str	r3, [r7, #24]
   return(result);
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e5      	bne.n	80076ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0310 	and.w	r3, r3, #16
 80076ec:	2b10      	cmp	r3, #16
 80076ee:	d10a      	bne.n	8007706 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff fbe7 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
 8007712:	e002      	b.n	800771a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7ff fbc5 	bl	8006ea4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	e002      	b.n	8007724 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	e000      	b.n	8007724 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007722:	2302      	movs	r3, #2
  }
}
 8007724:	4618      	mov	r0, r3
 8007726:	3730      	adds	r7, #48	@ 0x30
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800772c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007730:	b0c0      	sub	sp, #256	@ 0x100
 8007732:	af00      	add	r7, sp, #0
 8007734:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007748:	68d9      	ldr	r1, [r3, #12]
 800774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	ea40 0301 	orr.w	r3, r0, r1
 8007754:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	431a      	orrs	r2, r3
 8007764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	431a      	orrs	r2, r3
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007784:	f021 010c 	bic.w	r1, r1, #12
 8007788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007792:	430b      	orrs	r3, r1
 8007794:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80077a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a6:	6999      	ldr	r1, [r3, #24]
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	ea40 0301 	orr.w	r3, r0, r1
 80077b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4b8f      	ldr	r3, [pc, #572]	@ (80079f8 <UART_SetConfig+0x2cc>)
 80077bc:	429a      	cmp	r2, r3
 80077be:	d005      	beq.n	80077cc <UART_SetConfig+0xa0>
 80077c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	4b8d      	ldr	r3, [pc, #564]	@ (80079fc <UART_SetConfig+0x2d0>)
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d104      	bne.n	80077d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077cc:	f7fd f8ce 	bl	800496c <HAL_RCC_GetPCLK2Freq>
 80077d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80077d4:	e003      	b.n	80077de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077d6:	f7fd f8b5 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 80077da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077e8:	f040 810c 	bne.w	8007a04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80077fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80077fe:	4622      	mov	r2, r4
 8007800:	462b      	mov	r3, r5
 8007802:	1891      	adds	r1, r2, r2
 8007804:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007806:	415b      	adcs	r3, r3
 8007808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800780a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800780e:	4621      	mov	r1, r4
 8007810:	eb12 0801 	adds.w	r8, r2, r1
 8007814:	4629      	mov	r1, r5
 8007816:	eb43 0901 	adc.w	r9, r3, r1
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	f04f 0300 	mov.w	r3, #0
 8007822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800782a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800782e:	4690      	mov	r8, r2
 8007830:	4699      	mov	r9, r3
 8007832:	4623      	mov	r3, r4
 8007834:	eb18 0303 	adds.w	r3, r8, r3
 8007838:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800783c:	462b      	mov	r3, r5
 800783e:	eb49 0303 	adc.w	r3, r9, r3
 8007842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007852:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007856:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800785a:	460b      	mov	r3, r1
 800785c:	18db      	adds	r3, r3, r3
 800785e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007860:	4613      	mov	r3, r2
 8007862:	eb42 0303 	adc.w	r3, r2, r3
 8007866:	657b      	str	r3, [r7, #84]	@ 0x54
 8007868:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800786c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007870:	f7f9 f9a4 	bl	8000bbc <__aeabi_uldivmod>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4b61      	ldr	r3, [pc, #388]	@ (8007a00 <UART_SetConfig+0x2d4>)
 800787a:	fba3 2302 	umull	r2, r3, r3, r2
 800787e:	095b      	lsrs	r3, r3, #5
 8007880:	011c      	lsls	r4, r3, #4
 8007882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007886:	2200      	movs	r2, #0
 8007888:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800788c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007890:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007894:	4642      	mov	r2, r8
 8007896:	464b      	mov	r3, r9
 8007898:	1891      	adds	r1, r2, r2
 800789a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800789c:	415b      	adcs	r3, r3
 800789e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078a4:	4641      	mov	r1, r8
 80078a6:	eb12 0a01 	adds.w	sl, r2, r1
 80078aa:	4649      	mov	r1, r9
 80078ac:	eb43 0b01 	adc.w	fp, r3, r1
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078c4:	4692      	mov	sl, r2
 80078c6:	469b      	mov	fp, r3
 80078c8:	4643      	mov	r3, r8
 80078ca:	eb1a 0303 	adds.w	r3, sl, r3
 80078ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078d2:	464b      	mov	r3, r9
 80078d4:	eb4b 0303 	adc.w	r3, fp, r3
 80078d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80078dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80078ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078f0:	460b      	mov	r3, r1
 80078f2:	18db      	adds	r3, r3, r3
 80078f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80078f6:	4613      	mov	r3, r2
 80078f8:	eb42 0303 	adc.w	r3, r2, r3
 80078fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80078fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007902:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007906:	f7f9 f959 	bl	8000bbc <__aeabi_uldivmod>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	4611      	mov	r1, r2
 8007910:	4b3b      	ldr	r3, [pc, #236]	@ (8007a00 <UART_SetConfig+0x2d4>)
 8007912:	fba3 2301 	umull	r2, r3, r3, r1
 8007916:	095b      	lsrs	r3, r3, #5
 8007918:	2264      	movs	r2, #100	@ 0x64
 800791a:	fb02 f303 	mul.w	r3, r2, r3
 800791e:	1acb      	subs	r3, r1, r3
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007926:	4b36      	ldr	r3, [pc, #216]	@ (8007a00 <UART_SetConfig+0x2d4>)
 8007928:	fba3 2302 	umull	r2, r3, r3, r2
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007934:	441c      	add	r4, r3
 8007936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800793a:	2200      	movs	r2, #0
 800793c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007940:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007944:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007948:	4642      	mov	r2, r8
 800794a:	464b      	mov	r3, r9
 800794c:	1891      	adds	r1, r2, r2
 800794e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007950:	415b      	adcs	r3, r3
 8007952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007958:	4641      	mov	r1, r8
 800795a:	1851      	adds	r1, r2, r1
 800795c:	6339      	str	r1, [r7, #48]	@ 0x30
 800795e:	4649      	mov	r1, r9
 8007960:	414b      	adcs	r3, r1
 8007962:	637b      	str	r3, [r7, #52]	@ 0x34
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	f04f 0300 	mov.w	r3, #0
 800796c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007970:	4659      	mov	r1, fp
 8007972:	00cb      	lsls	r3, r1, #3
 8007974:	4651      	mov	r1, sl
 8007976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800797a:	4651      	mov	r1, sl
 800797c:	00ca      	lsls	r2, r1, #3
 800797e:	4610      	mov	r0, r2
 8007980:	4619      	mov	r1, r3
 8007982:	4603      	mov	r3, r0
 8007984:	4642      	mov	r2, r8
 8007986:	189b      	adds	r3, r3, r2
 8007988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800798c:	464b      	mov	r3, r9
 800798e:	460a      	mov	r2, r1
 8007990:	eb42 0303 	adc.w	r3, r2, r3
 8007994:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80079a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079ac:	460b      	mov	r3, r1
 80079ae:	18db      	adds	r3, r3, r3
 80079b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079b2:	4613      	mov	r3, r2
 80079b4:	eb42 0303 	adc.w	r3, r2, r3
 80079b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80079be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80079c2:	f7f9 f8fb 	bl	8000bbc <__aeabi_uldivmod>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007a00 <UART_SetConfig+0x2d4>)
 80079cc:	fba3 1302 	umull	r1, r3, r3, r2
 80079d0:	095b      	lsrs	r3, r3, #5
 80079d2:	2164      	movs	r1, #100	@ 0x64
 80079d4:	fb01 f303 	mul.w	r3, r1, r3
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	3332      	adds	r3, #50	@ 0x32
 80079de:	4a08      	ldr	r2, [pc, #32]	@ (8007a00 <UART_SetConfig+0x2d4>)
 80079e0:	fba2 2303 	umull	r2, r3, r2, r3
 80079e4:	095b      	lsrs	r3, r3, #5
 80079e6:	f003 0207 	and.w	r2, r3, #7
 80079ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4422      	add	r2, r4
 80079f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079f4:	e106      	b.n	8007c04 <UART_SetConfig+0x4d8>
 80079f6:	bf00      	nop
 80079f8:	40011000 	.word	0x40011000
 80079fc:	40011400 	.word	0x40011400
 8007a00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a16:	4642      	mov	r2, r8
 8007a18:	464b      	mov	r3, r9
 8007a1a:	1891      	adds	r1, r2, r2
 8007a1c:	6239      	str	r1, [r7, #32]
 8007a1e:	415b      	adcs	r3, r3
 8007a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a26:	4641      	mov	r1, r8
 8007a28:	1854      	adds	r4, r2, r1
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	eb43 0501 	adc.w	r5, r3, r1
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	00eb      	lsls	r3, r5, #3
 8007a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a3e:	00e2      	lsls	r2, r4, #3
 8007a40:	4614      	mov	r4, r2
 8007a42:	461d      	mov	r5, r3
 8007a44:	4643      	mov	r3, r8
 8007a46:	18e3      	adds	r3, r4, r3
 8007a48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a4c:	464b      	mov	r3, r9
 8007a4e:	eb45 0303 	adc.w	r3, r5, r3
 8007a52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a72:	4629      	mov	r1, r5
 8007a74:	008b      	lsls	r3, r1, #2
 8007a76:	4621      	mov	r1, r4
 8007a78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	008a      	lsls	r2, r1, #2
 8007a80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a84:	f7f9 f89a 	bl	8000bbc <__aeabi_uldivmod>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4b60      	ldr	r3, [pc, #384]	@ (8007c10 <UART_SetConfig+0x4e4>)
 8007a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	011c      	lsls	r4, r3, #4
 8007a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007aa0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007aa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	464b      	mov	r3, r9
 8007aac:	1891      	adds	r1, r2, r2
 8007aae:	61b9      	str	r1, [r7, #24]
 8007ab0:	415b      	adcs	r3, r3
 8007ab2:	61fb      	str	r3, [r7, #28]
 8007ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ab8:	4641      	mov	r1, r8
 8007aba:	1851      	adds	r1, r2, r1
 8007abc:	6139      	str	r1, [r7, #16]
 8007abe:	4649      	mov	r1, r9
 8007ac0:	414b      	adcs	r3, r1
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ad0:	4659      	mov	r1, fp
 8007ad2:	00cb      	lsls	r3, r1, #3
 8007ad4:	4651      	mov	r1, sl
 8007ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ada:	4651      	mov	r1, sl
 8007adc:	00ca      	lsls	r2, r1, #3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	189b      	adds	r3, r3, r2
 8007ae8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007aec:	464b      	mov	r3, r9
 8007aee:	460a      	mov	r2, r1
 8007af0:	eb42 0303 	adc.w	r3, r2, r3
 8007af4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b10:	4649      	mov	r1, r9
 8007b12:	008b      	lsls	r3, r1, #2
 8007b14:	4641      	mov	r1, r8
 8007b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b1a:	4641      	mov	r1, r8
 8007b1c:	008a      	lsls	r2, r1, #2
 8007b1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b22:	f7f9 f84b 	bl	8000bbc <__aeabi_uldivmod>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	4b38      	ldr	r3, [pc, #224]	@ (8007c10 <UART_SetConfig+0x4e4>)
 8007b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b32:	095b      	lsrs	r3, r3, #5
 8007b34:	2264      	movs	r2, #100	@ 0x64
 8007b36:	fb02 f303 	mul.w	r3, r2, r3
 8007b3a:	1acb      	subs	r3, r1, r3
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	3332      	adds	r3, #50	@ 0x32
 8007b40:	4a33      	ldr	r2, [pc, #204]	@ (8007c10 <UART_SetConfig+0x4e4>)
 8007b42:	fba2 2303 	umull	r2, r3, r2, r3
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b4c:	441c      	add	r4, r3
 8007b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b52:	2200      	movs	r2, #0
 8007b54:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b56:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	464b      	mov	r3, r9
 8007b60:	1891      	adds	r1, r2, r2
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	415b      	adcs	r3, r3
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b6c:	4641      	mov	r1, r8
 8007b6e:	1851      	adds	r1, r2, r1
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	4649      	mov	r1, r9
 8007b74:	414b      	adcs	r3, r1
 8007b76:	607b      	str	r3, [r7, #4]
 8007b78:	f04f 0200 	mov.w	r2, #0
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b84:	4659      	mov	r1, fp
 8007b86:	00cb      	lsls	r3, r1, #3
 8007b88:	4651      	mov	r1, sl
 8007b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b8e:	4651      	mov	r1, sl
 8007b90:	00ca      	lsls	r2, r1, #3
 8007b92:	4610      	mov	r0, r2
 8007b94:	4619      	mov	r1, r3
 8007b96:	4603      	mov	r3, r0
 8007b98:	4642      	mov	r2, r8
 8007b9a:	189b      	adds	r3, r3, r2
 8007b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b9e:	464b      	mov	r3, r9
 8007ba0:	460a      	mov	r2, r1
 8007ba2:	eb42 0303 	adc.w	r3, r2, r3
 8007ba6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	f04f 0300 	mov.w	r3, #0
 8007bbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	008b      	lsls	r3, r1, #2
 8007bc4:	4641      	mov	r1, r8
 8007bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bca:	4641      	mov	r1, r8
 8007bcc:	008a      	lsls	r2, r1, #2
 8007bce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007bd2:	f7f8 fff3 	bl	8000bbc <__aeabi_uldivmod>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4b0d      	ldr	r3, [pc, #52]	@ (8007c10 <UART_SetConfig+0x4e4>)
 8007bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8007be0:	095b      	lsrs	r3, r3, #5
 8007be2:	2164      	movs	r1, #100	@ 0x64
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	3332      	adds	r3, #50	@ 0x32
 8007bee:	4a08      	ldr	r2, [pc, #32]	@ (8007c10 <UART_SetConfig+0x4e4>)
 8007bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf4:	095b      	lsrs	r3, r3, #5
 8007bf6:	f003 020f 	and.w	r2, r3, #15
 8007bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4422      	add	r2, r4
 8007c02:	609a      	str	r2, [r3, #8]
}
 8007c04:	bf00      	nop
 8007c06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c10:	51eb851f 	.word	0x51eb851f

08007c14 <__NVIC_SetPriority>:
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	6039      	str	r1, [r7, #0]
 8007c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	db0a      	blt.n	8007c3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	490c      	ldr	r1, [pc, #48]	@ (8007c60 <__NVIC_SetPriority+0x4c>)
 8007c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c32:	0112      	lsls	r2, r2, #4
 8007c34:	b2d2      	uxtb	r2, r2
 8007c36:	440b      	add	r3, r1
 8007c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007c3c:	e00a      	b.n	8007c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	4908      	ldr	r1, [pc, #32]	@ (8007c64 <__NVIC_SetPriority+0x50>)
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	3b04      	subs	r3, #4
 8007c4c:	0112      	lsls	r2, r2, #4
 8007c4e:	b2d2      	uxtb	r2, r2
 8007c50:	440b      	add	r3, r1
 8007c52:	761a      	strb	r2, [r3, #24]
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	e000e100 	.word	0xe000e100
 8007c64:	e000ed00 	.word	0xe000ed00

08007c68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007c6c:	4b05      	ldr	r3, [pc, #20]	@ (8007c84 <SysTick_Handler+0x1c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007c70:	f001 fde2 	bl	8009838 <xTaskGetSchedulerState>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d001      	beq.n	8007c7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007c7a:	f002 fbdd 	bl	800a438 <xPortSysTickHandler>
  }
}
 8007c7e:	bf00      	nop
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	e000e010 	.word	0xe000e010

08007c88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	f06f 0004 	mvn.w	r0, #4
 8007c92:	f7ff ffbf 	bl	8007c14 <__NVIC_SetPriority>
#endif
}
 8007c96:	bf00      	nop
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca2:	f3ef 8305 	mrs	r3, IPSR
 8007ca6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007cae:	f06f 0305 	mvn.w	r3, #5
 8007cb2:	607b      	str	r3, [r7, #4]
 8007cb4:	e00c      	b.n	8007cd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce0 <osKernelInitialize+0x44>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d105      	bne.n	8007cca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007cbe:	4b08      	ldr	r3, [pc, #32]	@ (8007ce0 <osKernelInitialize+0x44>)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	607b      	str	r3, [r7, #4]
 8007cc8:	e002      	b.n	8007cd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007cca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cd0:	687b      	ldr	r3, [r7, #4]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	200079d4 	.word	0x200079d4

08007ce4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cea:	f3ef 8305 	mrs	r3, IPSR
 8007cee:	603b      	str	r3, [r7, #0]
  return(result);
 8007cf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8007cf6:	f06f 0305 	mvn.w	r3, #5
 8007cfa:	607b      	str	r3, [r7, #4]
 8007cfc:	e010      	b.n	8007d20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007d2c <osKernelStart+0x48>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d109      	bne.n	8007d1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d06:	f7ff ffbf 	bl	8007c88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d0a:	4b08      	ldr	r3, [pc, #32]	@ (8007d2c <osKernelStart+0x48>)
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d10:	f001 f906 	bl	8008f20 <vTaskStartScheduler>
      stat = osOK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	607b      	str	r3, [r7, #4]
 8007d18:	e002      	b.n	8007d20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d20:	687b      	ldr	r3, [r7, #4]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	200079d4 	.word	0x200079d4

08007d30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08e      	sub	sp, #56	@ 0x38
 8007d34:	af04      	add	r7, sp, #16
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d40:	f3ef 8305 	mrs	r3, IPSR
 8007d44:	617b      	str	r3, [r7, #20]
  return(result);
 8007d46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d17e      	bne.n	8007e4a <osThreadNew+0x11a>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d07b      	beq.n	8007e4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d52:	2380      	movs	r3, #128	@ 0x80
 8007d54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d56:	2318      	movs	r3, #24
 8007d58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d045      	beq.n	8007df6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <osThreadNew+0x48>
        name = attr->name;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d008      	beq.n	8007d9e <osThreadNew+0x6e>
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	2b38      	cmp	r3, #56	@ 0x38
 8007d90:	d805      	bhi.n	8007d9e <osThreadNew+0x6e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <osThreadNew+0x72>
        return (NULL);
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e054      	b.n	8007e4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	089b      	lsrs	r3, r3, #2
 8007db0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00e      	beq.n	8007dd8 <osThreadNew+0xa8>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	2ba7      	cmp	r3, #167	@ 0xa7
 8007dc0:	d90a      	bls.n	8007dd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d006      	beq.n	8007dd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <osThreadNew+0xa8>
        mem = 1;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	61bb      	str	r3, [r7, #24]
 8007dd6:	e010      	b.n	8007dfa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10c      	bne.n	8007dfa <osThreadNew+0xca>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d108      	bne.n	8007dfa <osThreadNew+0xca>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d104      	bne.n	8007dfa <osThreadNew+0xca>
          mem = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61bb      	str	r3, [r7, #24]
 8007df4:	e001      	b.n	8007dfa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d110      	bne.n	8007e22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e08:	9202      	str	r2, [sp, #8]
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	6a3a      	ldr	r2, [r7, #32]
 8007e14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 fe1a 	bl	8008a50 <xTaskCreateStatic>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	613b      	str	r3, [r7, #16]
 8007e20:	e013      	b.n	8007e4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d110      	bne.n	8007e4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	f107 0310 	add.w	r3, r7, #16
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 fe68 	bl	8008b10 <xTaskCreate>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d001      	beq.n	8007e4a <osThreadNew+0x11a>
            hTask = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e4a:	693b      	ldr	r3, [r7, #16]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3728      	adds	r7, #40	@ 0x28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e5c:	f3ef 8305 	mrs	r3, IPSR
 8007e60:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <osDelay+0x1c>
    stat = osErrorISR;
 8007e68:	f06f 0305 	mvn.w	r3, #5
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	e007      	b.n	8007e80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 f81a 	bl	8008eb4 <vTaskDelay>
    }
  }

  return (stat);
 8007e80:	68fb      	ldr	r3, [r7, #12]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4a07      	ldr	r2, [pc, #28]	@ (8007eb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007e9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	4a06      	ldr	r2, [pc, #24]	@ (8007ebc <vApplicationGetIdleTaskMemory+0x30>)
 8007ea2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2280      	movs	r2, #128	@ 0x80
 8007ea8:	601a      	str	r2, [r3, #0]
}
 8007eaa:	bf00      	nop
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	200079d8 	.word	0x200079d8
 8007ebc:	20007a80 	.word	0x20007a80

08007ec0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4a07      	ldr	r2, [pc, #28]	@ (8007eec <vApplicationGetTimerTaskMemory+0x2c>)
 8007ed0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	4a06      	ldr	r2, [pc, #24]	@ (8007ef0 <vApplicationGetTimerTaskMemory+0x30>)
 8007ed6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ede:	601a      	str	r2, [r3, #0]
}
 8007ee0:	bf00      	nop
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	20007c80 	.word	0x20007c80
 8007ef0:	20007d28 	.word	0x20007d28

08007ef4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f103 0208 	add.w	r2, r3, #8
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f103 0208 	add.w	r2, r3, #8
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f103 0208 	add.w	r2, r3, #8
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b085      	sub	sp, #20
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	601a      	str	r2, [r3, #0]
}
 8007f8a:	bf00      	nop
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f96:	b480      	push	{r7}
 8007f98:	b085      	sub	sp, #20
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fac:	d103      	bne.n	8007fb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e00c      	b.n	8007fd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	e002      	b.n	8007fc4 <vListInsert+0x2e>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d2f6      	bcs.n	8007fbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	601a      	str	r2, [r3, #0]
}
 8007ffc:	bf00      	nop
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	6892      	ldr	r2, [r2, #8]
 800801e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	6852      	ldr	r2, [r2, #4]
 8008028:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	429a      	cmp	r2, r3
 8008032:	d103      	bne.n	800803c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	1e5a      	subs	r2, r3, #1
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10b      	bne.n	8008088 <xQueueGenericReset+0x2c>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60bb      	str	r3, [r7, #8]
}
 8008082:	bf00      	nop
 8008084:	bf00      	nop
 8008086:	e7fd      	b.n	8008084 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008088:	f002 f946 	bl	800a318 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008094:	68f9      	ldr	r1, [r7, #12]
 8008096:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008098:	fb01 f303 	mul.w	r3, r1, r3
 800809c:	441a      	add	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080b8:	3b01      	subs	r3, #1
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80080be:	fb01 f303 	mul.w	r3, r1, r3
 80080c2:	441a      	add	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	22ff      	movs	r2, #255	@ 0xff
 80080cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	22ff      	movs	r2, #255	@ 0xff
 80080d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d114      	bne.n	8008108 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d01a      	beq.n	800811c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3310      	adds	r3, #16
 80080ea:	4618      	mov	r0, r3
 80080ec:	f001 f9b6 	bl	800945c <xTaskRemoveFromEventList>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d012      	beq.n	800811c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080f6:	4b0d      	ldr	r3, [pc, #52]	@ (800812c <xQueueGenericReset+0xd0>)
 80080f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	e009      	b.n	800811c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3310      	adds	r3, #16
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff fef1 	bl	8007ef4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3324      	adds	r3, #36	@ 0x24
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff feec 	bl	8007ef4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800811c:	f002 f92e 	bl	800a37c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008120:	2301      	movs	r3, #1
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	e000ed04 	.word	0xe000ed04

08008130 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008130:	b580      	push	{r7, lr}
 8008132:	b08e      	sub	sp, #56	@ 0x38
 8008134:	af02      	add	r7, sp, #8
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10b      	bne.n	800815c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008156:	bf00      	nop
 8008158:	bf00      	nop
 800815a:	e7fd      	b.n	8008158 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10b      	bne.n	800817a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	e7fd      	b.n	8008176 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <xQueueGenericCreateStatic+0x56>
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <xQueueGenericCreateStatic+0x5a>
 8008186:	2301      	movs	r3, #1
 8008188:	e000      	b.n	800818c <xQueueGenericCreateStatic+0x5c>
 800818a:	2300      	movs	r3, #0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10b      	bne.n	80081a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	623b      	str	r3, [r7, #32]
}
 80081a2:	bf00      	nop
 80081a4:	bf00      	nop
 80081a6:	e7fd      	b.n	80081a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d102      	bne.n	80081b4 <xQueueGenericCreateStatic+0x84>
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <xQueueGenericCreateStatic+0x88>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <xQueueGenericCreateStatic+0x8a>
 80081b8:	2300      	movs	r3, #0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10b      	bne.n	80081d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	61fb      	str	r3, [r7, #28]
}
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	e7fd      	b.n	80081d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081d6:	2350      	movs	r3, #80	@ 0x50
 80081d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b50      	cmp	r3, #80	@ 0x50
 80081de:	d00b      	beq.n	80081f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	61bb      	str	r3, [r7, #24]
}
 80081f2:	bf00      	nop
 80081f4:	bf00      	nop
 80081f6:	e7fd      	b.n	80081f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80081fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00d      	beq.n	8008220 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800820c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	4613      	mov	r3, r2
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	68b9      	ldr	r1, [r7, #8]
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 f805 	bl	800822a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008222:	4618      	mov	r0, r3
 8008224:	3730      	adds	r7, #48	@ 0x30
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	607a      	str	r2, [r7, #4]
 8008236:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d103      	bne.n	8008246 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	e002      	b.n	800824c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008258:	2101      	movs	r1, #1
 800825a:	69b8      	ldr	r0, [r7, #24]
 800825c:	f7ff fefe 	bl	800805c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008268:	bf00      	nop
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08e      	sub	sp, #56	@ 0x38
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800827e:	2300      	movs	r3, #0
 8008280:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10b      	bne.n	80082a4 <xQueueGenericSend+0x34>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	e7fd      	b.n	80082a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d103      	bne.n	80082b2 <xQueueGenericSend+0x42>
 80082aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <xQueueGenericSend+0x46>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e000      	b.n	80082b8 <xQueueGenericSend+0x48>
 80082b6:	2300      	movs	r3, #0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10b      	bne.n	80082d4 <xQueueGenericSend+0x64>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80082ce:	bf00      	nop
 80082d0:	bf00      	nop
 80082d2:	e7fd      	b.n	80082d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d103      	bne.n	80082e2 <xQueueGenericSend+0x72>
 80082da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d101      	bne.n	80082e6 <xQueueGenericSend+0x76>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e000      	b.n	80082e8 <xQueueGenericSend+0x78>
 80082e6:	2300      	movs	r3, #0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10b      	bne.n	8008304 <xQueueGenericSend+0x94>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	623b      	str	r3, [r7, #32]
}
 80082fe:	bf00      	nop
 8008300:	bf00      	nop
 8008302:	e7fd      	b.n	8008300 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008304:	f001 fa98 	bl	8009838 <xTaskGetSchedulerState>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d102      	bne.n	8008314 <xQueueGenericSend+0xa4>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <xQueueGenericSend+0xa8>
 8008314:	2301      	movs	r3, #1
 8008316:	e000      	b.n	800831a <xQueueGenericSend+0xaa>
 8008318:	2300      	movs	r3, #0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10b      	bne.n	8008336 <xQueueGenericSend+0xc6>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	61fb      	str	r3, [r7, #28]
}
 8008330:	bf00      	nop
 8008332:	bf00      	nop
 8008334:	e7fd      	b.n	8008332 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008336:	f001 ffef 	bl	800a318 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800833a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008342:	429a      	cmp	r2, r3
 8008344:	d302      	bcc.n	800834c <xQueueGenericSend+0xdc>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d129      	bne.n	80083a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008352:	f000 fa0f 	bl	8008774 <prvCopyDataToQueue>
 8008356:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	d010      	beq.n	8008382 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008362:	3324      	adds	r3, #36	@ 0x24
 8008364:	4618      	mov	r0, r3
 8008366:	f001 f879 	bl	800945c <xTaskRemoveFromEventList>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d013      	beq.n	8008398 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008370:	4b3f      	ldr	r3, [pc, #252]	@ (8008470 <xQueueGenericSend+0x200>)
 8008372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	e00a      	b.n	8008398 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008384:	2b00      	cmp	r3, #0
 8008386:	d007      	beq.n	8008398 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008388:	4b39      	ldr	r3, [pc, #228]	@ (8008470 <xQueueGenericSend+0x200>)
 800838a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800838e:	601a      	str	r2, [r3, #0]
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008398:	f001 fff0 	bl	800a37c <vPortExitCritical>
				return pdPASS;
 800839c:	2301      	movs	r3, #1
 800839e:	e063      	b.n	8008468 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d103      	bne.n	80083ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083a6:	f001 ffe9 	bl	800a37c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083aa:	2300      	movs	r3, #0
 80083ac:	e05c      	b.n	8008468 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d106      	bne.n	80083c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083b4:	f107 0314 	add.w	r3, r7, #20
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 f8db 	bl	8009574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083be:	2301      	movs	r3, #1
 80083c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083c2:	f001 ffdb 	bl	800a37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083c6:	f000 fe1b 	bl	8009000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083ca:	f001 ffa5 	bl	800a318 <vPortEnterCritical>
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083d4:	b25b      	sxtb	r3, r3
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083da:	d103      	bne.n	80083e4 <xQueueGenericSend+0x174>
 80083dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083ea:	b25b      	sxtb	r3, r3
 80083ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083f0:	d103      	bne.n	80083fa <xQueueGenericSend+0x18a>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083fa:	f001 ffbf 	bl	800a37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083fe:	1d3a      	adds	r2, r7, #4
 8008400:	f107 0314 	add.w	r3, r7, #20
 8008404:	4611      	mov	r1, r2
 8008406:	4618      	mov	r0, r3
 8008408:	f001 f8ca 	bl	80095a0 <xTaskCheckForTimeOut>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d124      	bne.n	800845c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008412:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008414:	f000 faa6 	bl	8008964 <prvIsQueueFull>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d018      	beq.n	8008450 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	3310      	adds	r3, #16
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	4611      	mov	r1, r2
 8008426:	4618      	mov	r0, r3
 8008428:	f000 ffc6 	bl	80093b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800842c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800842e:	f000 fa31 	bl	8008894 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008432:	f000 fdf3 	bl	800901c <xTaskResumeAll>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	f47f af7c 	bne.w	8008336 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800843e:	4b0c      	ldr	r3, [pc, #48]	@ (8008470 <xQueueGenericSend+0x200>)
 8008440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	e772      	b.n	8008336 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008452:	f000 fa1f 	bl	8008894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008456:	f000 fde1 	bl	800901c <xTaskResumeAll>
 800845a:	e76c      	b.n	8008336 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800845c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800845e:	f000 fa19 	bl	8008894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008462:	f000 fddb 	bl	800901c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008466:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008468:	4618      	mov	r0, r3
 800846a:	3738      	adds	r7, #56	@ 0x38
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	e000ed04 	.word	0xe000ed04

08008474 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b090      	sub	sp, #64	@ 0x40
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10b      	bne.n	80084a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800849e:	bf00      	nop
 80084a0:	bf00      	nop
 80084a2:	e7fd      	b.n	80084a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d103      	bne.n	80084b2 <xQueueGenericSendFromISR+0x3e>
 80084aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <xQueueGenericSendFromISR+0x42>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e000      	b.n	80084b8 <xQueueGenericSendFromISR+0x44>
 80084b6:	2300      	movs	r3, #0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10b      	bne.n	80084d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	e7fd      	b.n	80084d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d103      	bne.n	80084e2 <xQueueGenericSendFromISR+0x6e>
 80084da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d101      	bne.n	80084e6 <xQueueGenericSendFromISR+0x72>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e000      	b.n	80084e8 <xQueueGenericSendFromISR+0x74>
 80084e6:	2300      	movs	r3, #0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10b      	bne.n	8008504 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	623b      	str	r3, [r7, #32]
}
 80084fe:	bf00      	nop
 8008500:	bf00      	nop
 8008502:	e7fd      	b.n	8008500 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008504:	f001 ffe8 	bl	800a4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008508:	f3ef 8211 	mrs	r2, BASEPRI
 800850c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	61fa      	str	r2, [r7, #28]
 800851e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008520:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008522:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008526:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852c:	429a      	cmp	r2, r3
 800852e:	d302      	bcc.n	8008536 <xQueueGenericSendFromISR+0xc2>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d12f      	bne.n	8008596 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008538:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800853c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008544:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800854c:	f000 f912 	bl	8008774 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008550:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008558:	d112      	bne.n	8008580 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800855a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855e:	2b00      	cmp	r3, #0
 8008560:	d016      	beq.n	8008590 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008564:	3324      	adds	r3, #36	@ 0x24
 8008566:	4618      	mov	r0, r3
 8008568:	f000 ff78 	bl	800945c <xTaskRemoveFromEventList>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00e      	beq.n	8008590 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	e007      	b.n	8008590 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008580:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008584:	3301      	adds	r3, #1
 8008586:	b2db      	uxtb	r3, r3
 8008588:	b25a      	sxtb	r2, r3
 800858a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008590:	2301      	movs	r3, #1
 8008592:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008594:	e001      	b.n	800859a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008596:	2300      	movs	r3, #0
 8008598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800859a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800859c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3740      	adds	r7, #64	@ 0x40
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08c      	sub	sp, #48	@ 0x30
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085bc:	2300      	movs	r3, #0
 80085be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10b      	bne.n	80085e2 <xQueueReceive+0x32>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	623b      	str	r3, [r7, #32]
}
 80085dc:	bf00      	nop
 80085de:	bf00      	nop
 80085e0:	e7fd      	b.n	80085de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d103      	bne.n	80085f0 <xQueueReceive+0x40>
 80085e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d101      	bne.n	80085f4 <xQueueReceive+0x44>
 80085f0:	2301      	movs	r3, #1
 80085f2:	e000      	b.n	80085f6 <xQueueReceive+0x46>
 80085f4:	2300      	movs	r3, #0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10b      	bne.n	8008612 <xQueueReceive+0x62>
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	61fb      	str	r3, [r7, #28]
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	e7fd      	b.n	800860e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008612:	f001 f911 	bl	8009838 <xTaskGetSchedulerState>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d102      	bne.n	8008622 <xQueueReceive+0x72>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <xQueueReceive+0x76>
 8008622:	2301      	movs	r3, #1
 8008624:	e000      	b.n	8008628 <xQueueReceive+0x78>
 8008626:	2300      	movs	r3, #0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10b      	bne.n	8008644 <xQueueReceive+0x94>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	61bb      	str	r3, [r7, #24]
}
 800863e:	bf00      	nop
 8008640:	bf00      	nop
 8008642:	e7fd      	b.n	8008640 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008644:	f001 fe68 	bl	800a318 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	d01f      	beq.n	8008694 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008654:	68b9      	ldr	r1, [r7, #8]
 8008656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008658:	f000 f8f6 	bl	8008848 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800865c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865e:	1e5a      	subs	r2, r3, #1
 8008660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008662:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00f      	beq.n	800868c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866e:	3310      	adds	r3, #16
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fef3 	bl	800945c <xTaskRemoveFromEventList>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d007      	beq.n	800868c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800867c:	4b3c      	ldr	r3, [pc, #240]	@ (8008770 <xQueueReceive+0x1c0>)
 800867e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800868c:	f001 fe76 	bl	800a37c <vPortExitCritical>
				return pdPASS;
 8008690:	2301      	movs	r3, #1
 8008692:	e069      	b.n	8008768 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d103      	bne.n	80086a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800869a:	f001 fe6f 	bl	800a37c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800869e:	2300      	movs	r3, #0
 80086a0:	e062      	b.n	8008768 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d106      	bne.n	80086b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086a8:	f107 0310 	add.w	r3, r7, #16
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 ff61 	bl	8009574 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086b2:	2301      	movs	r3, #1
 80086b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086b6:	f001 fe61 	bl	800a37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086ba:	f000 fca1 	bl	8009000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086be:	f001 fe2b 	bl	800a318 <vPortEnterCritical>
 80086c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086c8:	b25b      	sxtb	r3, r3
 80086ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086ce:	d103      	bne.n	80086d8 <xQueueReceive+0x128>
 80086d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086de:	b25b      	sxtb	r3, r3
 80086e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086e4:	d103      	bne.n	80086ee <xQueueReceive+0x13e>
 80086e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086ee:	f001 fe45 	bl	800a37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086f2:	1d3a      	adds	r2, r7, #4
 80086f4:	f107 0310 	add.w	r3, r7, #16
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 ff50 	bl	80095a0 <xTaskCheckForTimeOut>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d123      	bne.n	800874e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008708:	f000 f916 	bl	8008938 <prvIsQueueEmpty>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d017      	beq.n	8008742 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008714:	3324      	adds	r3, #36	@ 0x24
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fe4c 	bl	80093b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008720:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008722:	f000 f8b7 	bl	8008894 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008726:	f000 fc79 	bl	800901c <xTaskResumeAll>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d189      	bne.n	8008644 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008730:	4b0f      	ldr	r3, [pc, #60]	@ (8008770 <xQueueReceive+0x1c0>)
 8008732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	e780      	b.n	8008644 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008744:	f000 f8a6 	bl	8008894 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008748:	f000 fc68 	bl	800901c <xTaskResumeAll>
 800874c:	e77a      	b.n	8008644 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800874e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008750:	f000 f8a0 	bl	8008894 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008754:	f000 fc62 	bl	800901c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008758:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800875a:	f000 f8ed 	bl	8008938 <prvIsQueueEmpty>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	f43f af6f 	beq.w	8008644 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008766:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008768:	4618      	mov	r0, r3
 800876a:	3730      	adds	r7, #48	@ 0x30
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	e000ed04 	.word	0xe000ed04

08008774 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008780:	2300      	movs	r3, #0
 8008782:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008788:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10d      	bne.n	80087ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d14d      	bne.n	8008836 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	4618      	mov	r0, r3
 80087a0:	f001 f868 	bl	8009874 <xTaskPriorityDisinherit>
 80087a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	609a      	str	r2, [r3, #8]
 80087ac:	e043      	b.n	8008836 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d119      	bne.n	80087e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6858      	ldr	r0, [r3, #4]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087bc:	461a      	mov	r2, r3
 80087be:	68b9      	ldr	r1, [r7, #8]
 80087c0:	f00f fe63 	bl	801848a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087cc:	441a      	add	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d32b      	bcc.n	8008836 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	605a      	str	r2, [r3, #4]
 80087e6:	e026      	b.n	8008836 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	68d8      	ldr	r0, [r3, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f0:	461a      	mov	r2, r3
 80087f2:	68b9      	ldr	r1, [r7, #8]
 80087f4:	f00f fe49 	bl	801848a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	68da      	ldr	r2, [r3, #12]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008800:	425b      	negs	r3, r3
 8008802:	441a      	add	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	68da      	ldr	r2, [r3, #12]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	429a      	cmp	r2, r3
 8008812:	d207      	bcs.n	8008824 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689a      	ldr	r2, [r3, #8]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881c:	425b      	negs	r3, r3
 800881e:	441a      	add	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b02      	cmp	r3, #2
 8008828:	d105      	bne.n	8008836 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	3b01      	subs	r3, #1
 8008834:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800883e:	697b      	ldr	r3, [r7, #20]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008856:	2b00      	cmp	r3, #0
 8008858:	d018      	beq.n	800888c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008862:	441a      	add	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	429a      	cmp	r2, r3
 8008872:	d303      	bcc.n	800887c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68d9      	ldr	r1, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008884:	461a      	mov	r2, r3
 8008886:	6838      	ldr	r0, [r7, #0]
 8008888:	f00f fdff 	bl	801848a <memcpy>
	}
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800889c:	f001 fd3c 	bl	800a318 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088a8:	e011      	b.n	80088ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d012      	beq.n	80088d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	3324      	adds	r3, #36	@ 0x24
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 fdd0 	bl	800945c <xTaskRemoveFromEventList>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088c2:	f000 fed1 	bl	8009668 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	dce9      	bgt.n	80088aa <prvUnlockQueue+0x16>
 80088d6:	e000      	b.n	80088da <prvUnlockQueue+0x46>
					break;
 80088d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	22ff      	movs	r2, #255	@ 0xff
 80088de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80088e2:	f001 fd4b 	bl	800a37c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088e6:	f001 fd17 	bl	800a318 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088f2:	e011      	b.n	8008918 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d012      	beq.n	8008922 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3310      	adds	r3, #16
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fdab 	bl	800945c <xTaskRemoveFromEventList>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800890c:	f000 feac 	bl	8009668 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	3b01      	subs	r3, #1
 8008914:	b2db      	uxtb	r3, r3
 8008916:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800891c:	2b00      	cmp	r3, #0
 800891e:	dce9      	bgt.n	80088f4 <prvUnlockQueue+0x60>
 8008920:	e000      	b.n	8008924 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008922:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	22ff      	movs	r2, #255	@ 0xff
 8008928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800892c:	f001 fd26 	bl	800a37c <vPortExitCritical>
}
 8008930:	bf00      	nop
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008940:	f001 fcea 	bl	800a318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008948:	2b00      	cmp	r3, #0
 800894a:	d102      	bne.n	8008952 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	e001      	b.n	8008956 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008952:	2300      	movs	r3, #0
 8008954:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008956:	f001 fd11 	bl	800a37c <vPortExitCritical>

	return xReturn;
 800895a:	68fb      	ldr	r3, [r7, #12]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800896c:	f001 fcd4 	bl	800a318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008978:	429a      	cmp	r2, r3
 800897a:	d102      	bne.n	8008982 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800897c:	2301      	movs	r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	e001      	b.n	8008986 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008986:	f001 fcf9 	bl	800a37c <vPortExitCritical>

	return xReturn;
 800898a:	68fb      	ldr	r3, [r7, #12]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800899e:	2300      	movs	r3, #0
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	e014      	b.n	80089ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089a4:	4a0f      	ldr	r2, [pc, #60]	@ (80089e4 <vQueueAddToRegistry+0x50>)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10b      	bne.n	80089c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089b0:	490c      	ldr	r1, [pc, #48]	@ (80089e4 <vQueueAddToRegistry+0x50>)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089ba:	4a0a      	ldr	r2, [pc, #40]	@ (80089e4 <vQueueAddToRegistry+0x50>)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	00db      	lsls	r3, r3, #3
 80089c0:	4413      	add	r3, r2
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089c6:	e006      	b.n	80089d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3301      	adds	r3, #1
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b07      	cmp	r3, #7
 80089d2:	d9e7      	bls.n	80089a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089d4:	bf00      	nop
 80089d6:	bf00      	nop
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	20008128 	.word	0x20008128

080089e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089f8:	f001 fc8e 	bl	800a318 <vPortEnterCritical>
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a02:	b25b      	sxtb	r3, r3
 8008a04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a08:	d103      	bne.n	8008a12 <vQueueWaitForMessageRestricted+0x2a>
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a18:	b25b      	sxtb	r3, r3
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a1e:	d103      	bne.n	8008a28 <vQueueWaitForMessageRestricted+0x40>
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a28:	f001 fca8 	bl	800a37c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d106      	bne.n	8008a42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	3324      	adds	r3, #36	@ 0x24
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	68b9      	ldr	r1, [r7, #8]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 fce1 	bl	8009404 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a42:	6978      	ldr	r0, [r7, #20]
 8008a44:	f7ff ff26 	bl	8008894 <prvUnlockQueue>
	}
 8008a48:	bf00      	nop
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08e      	sub	sp, #56	@ 0x38
 8008a54:	af04      	add	r7, sp, #16
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10b      	bne.n	8008a7c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	623b      	str	r3, [r7, #32]
}
 8008a76:	bf00      	nop
 8008a78:	bf00      	nop
 8008a7a:	e7fd      	b.n	8008a78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10b      	bne.n	8008a9a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	61fb      	str	r3, [r7, #28]
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop
 8008a98:	e7fd      	b.n	8008a96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a9a:	23a8      	movs	r3, #168	@ 0xa8
 8008a9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	2ba8      	cmp	r3, #168	@ 0xa8
 8008aa2:	d00b      	beq.n	8008abc <xTaskCreateStatic+0x6c>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	61bb      	str	r3, [r7, #24]
}
 8008ab6:	bf00      	nop
 8008ab8:	bf00      	nop
 8008aba:	e7fd      	b.n	8008ab8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008abc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d01e      	beq.n	8008b02 <xTaskCreateStatic+0xb2>
 8008ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d01b      	beq.n	8008b02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008acc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ad2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008adc:	2300      	movs	r3, #0
 8008ade:	9303      	str	r3, [sp, #12]
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	9302      	str	r3, [sp, #8]
 8008ae4:	f107 0314 	add.w	r3, r7, #20
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 f851 	bl	8008b9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008afa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008afc:	f000 f8f6 	bl	8008cec <prvAddNewTaskToReadyList>
 8008b00:	e001      	b.n	8008b06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b06:	697b      	ldr	r3, [r7, #20]
	}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3728      	adds	r7, #40	@ 0x28
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b08c      	sub	sp, #48	@ 0x30
 8008b14:	af04      	add	r7, sp, #16
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b20:	88fb      	ldrh	r3, [r7, #6]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4618      	mov	r0, r3
 8008b26:	f001 fd19 	bl	800a55c <pvPortMalloc>
 8008b2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00e      	beq.n	8008b50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b32:	20a8      	movs	r0, #168	@ 0xa8
 8008b34:	f001 fd12 	bl	800a55c <pvPortMalloc>
 8008b38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b46:	e005      	b.n	8008b54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b48:	6978      	ldr	r0, [r7, #20]
 8008b4a:	f001 fdd5 	bl	800a6f8 <vPortFree>
 8008b4e:	e001      	b.n	8008b54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b50:	2300      	movs	r3, #0
 8008b52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d017      	beq.n	8008b8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b62:	88fa      	ldrh	r2, [r7, #6]
 8008b64:	2300      	movs	r3, #0
 8008b66:	9303      	str	r3, [sp, #12]
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	9302      	str	r3, [sp, #8]
 8008b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6e:	9301      	str	r3, [sp, #4]
 8008b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 f80f 	bl	8008b9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b7e:	69f8      	ldr	r0, [r7, #28]
 8008b80:	f000 f8b4 	bl	8008cec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b84:	2301      	movs	r3, #1
 8008b86:	61bb      	str	r3, [r7, #24]
 8008b88:	e002      	b.n	8008b90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b90:	69bb      	ldr	r3, [r7, #24]
	}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3720      	adds	r7, #32
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
	...

08008b9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	21a5      	movs	r1, #165	@ 0xa5
 8008bb6:	f00f fb41 	bl	801823c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	f023 0307 	bic.w	r3, r3, #7
 8008bd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	f003 0307 	and.w	r3, r3, #7
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	617b      	str	r3, [r7, #20]
}
 8008bf0:	bf00      	nop
 8008bf2:	bf00      	nop
 8008bf4:	e7fd      	b.n	8008bf2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01f      	beq.n	8008c3c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	61fb      	str	r3, [r7, #28]
 8008c00:	e012      	b.n	8008c28 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	4413      	add	r3, r2
 8008c08:	7819      	ldrb	r1, [r3, #0]
 8008c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	4413      	add	r3, r2
 8008c10:	3334      	adds	r3, #52	@ 0x34
 8008c12:	460a      	mov	r2, r1
 8008c14:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d006      	beq.n	8008c30 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	3301      	adds	r3, #1
 8008c26:	61fb      	str	r3, [r7, #28]
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	2b0f      	cmp	r3, #15
 8008c2c:	d9e9      	bls.n	8008c02 <prvInitialiseNewTask+0x66>
 8008c2e:	e000      	b.n	8008c32 <prvInitialiseNewTask+0x96>
			{
				break;
 8008c30:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c3a:	e003      	b.n	8008c44 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c46:	2b37      	cmp	r3, #55	@ 0x37
 8008c48:	d901      	bls.n	8008c4e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c4a:	2337      	movs	r3, #55	@ 0x37
 8008c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c52:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c58:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c62:	3304      	adds	r3, #4
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff f965 	bl	8007f34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	3318      	adds	r3, #24
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff f960 	bl	8007f34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c88:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9c:	3354      	adds	r3, #84	@ 0x54
 8008c9e:	224c      	movs	r2, #76	@ 0x4c
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f00f faca 	bl	801823c <memset>
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008caa:	4a0d      	ldr	r2, [pc, #52]	@ (8008ce0 <prvInitialiseNewTask+0x144>)
 8008cac:	659a      	str	r2, [r3, #88]	@ 0x58
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8008ce4 <prvInitialiseNewTask+0x148>)
 8008cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ce8 <prvInitialiseNewTask+0x14c>)
 8008cb8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	68f9      	ldr	r1, [r7, #12]
 8008cbe:	69b8      	ldr	r0, [r7, #24]
 8008cc0:	f001 f9f6 	bl	800a0b0 <pxPortInitialiseStack>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cd6:	bf00      	nop
 8008cd8:	3720      	adds	r7, #32
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20010f3c 	.word	0x20010f3c
 8008ce4:	20010fa4 	.word	0x20010fa4
 8008ce8:	2001100c 	.word	0x2001100c

08008cec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cf4:	f001 fb10 	bl	800a318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8008db0 <prvAddNewTaskToReadyList+0xc4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8008db0 <prvAddNewTaskToReadyList+0xc4>)
 8008d00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d02:	4b2c      	ldr	r3, [pc, #176]	@ (8008db4 <prvAddNewTaskToReadyList+0xc8>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d109      	bne.n	8008d1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8008db4 <prvAddNewTaskToReadyList+0xc8>)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d10:	4b27      	ldr	r3, [pc, #156]	@ (8008db0 <prvAddNewTaskToReadyList+0xc4>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d110      	bne.n	8008d3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d18:	f000 fcca 	bl	80096b0 <prvInitialiseTaskLists>
 8008d1c:	e00d      	b.n	8008d3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d1e:	4b26      	ldr	r3, [pc, #152]	@ (8008db8 <prvAddNewTaskToReadyList+0xcc>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d109      	bne.n	8008d3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d26:	4b23      	ldr	r3, [pc, #140]	@ (8008db4 <prvAddNewTaskToReadyList+0xc8>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d802      	bhi.n	8008d3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d34:	4a1f      	ldr	r2, [pc, #124]	@ (8008db4 <prvAddNewTaskToReadyList+0xc8>)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d3a:	4b20      	ldr	r3, [pc, #128]	@ (8008dbc <prvAddNewTaskToReadyList+0xd0>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	4a1e      	ldr	r2, [pc, #120]	@ (8008dbc <prvAddNewTaskToReadyList+0xd0>)
 8008d42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d44:	4b1d      	ldr	r3, [pc, #116]	@ (8008dbc <prvAddNewTaskToReadyList+0xd0>)
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d50:	4b1b      	ldr	r3, [pc, #108]	@ (8008dc0 <prvAddNewTaskToReadyList+0xd4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d903      	bls.n	8008d60 <prvAddNewTaskToReadyList+0x74>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5c:	4a18      	ldr	r2, [pc, #96]	@ (8008dc0 <prvAddNewTaskToReadyList+0xd4>)
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4a15      	ldr	r2, [pc, #84]	@ (8008dc4 <prvAddNewTaskToReadyList+0xd8>)
 8008d6e:	441a      	add	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4619      	mov	r1, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f7ff f8e9 	bl	8007f4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d7c:	f001 fafe 	bl	800a37c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d80:	4b0d      	ldr	r3, [pc, #52]	@ (8008db8 <prvAddNewTaskToReadyList+0xcc>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00e      	beq.n	8008da6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d88:	4b0a      	ldr	r3, [pc, #40]	@ (8008db4 <prvAddNewTaskToReadyList+0xc8>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d207      	bcs.n	8008da6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d96:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc8 <prvAddNewTaskToReadyList+0xdc>)
 8008d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	2000863c 	.word	0x2000863c
 8008db4:	20008168 	.word	0x20008168
 8008db8:	20008648 	.word	0x20008648
 8008dbc:	20008658 	.word	0x20008658
 8008dc0:	20008644 	.word	0x20008644
 8008dc4:	2000816c 	.word	0x2000816c
 8008dc8:	e000ed04 	.word	0xe000ed04

08008dcc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008dd4:	f001 faa0 	bl	800a318 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d102      	bne.n	8008de4 <vTaskDelete+0x18>
 8008dde:	4b2d      	ldr	r3, [pc, #180]	@ (8008e94 <vTaskDelete+0xc8>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	e000      	b.n	8008de6 <vTaskDelete+0x1a>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3304      	adds	r3, #4
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7ff f90b 	bl	8008008 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d004      	beq.n	8008e04 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3318      	adds	r3, #24
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff f902 	bl	8008008 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008e04:	4b24      	ldr	r3, [pc, #144]	@ (8008e98 <vTaskDelete+0xcc>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	4a23      	ldr	r2, [pc, #140]	@ (8008e98 <vTaskDelete+0xcc>)
 8008e0c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008e0e:	4b21      	ldr	r3, [pc, #132]	@ (8008e94 <vTaskDelete+0xc8>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d10b      	bne.n	8008e30 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	481f      	ldr	r0, [pc, #124]	@ (8008e9c <vTaskDelete+0xd0>)
 8008e20:	f7ff f895 	bl	8007f4e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008e24:	4b1e      	ldr	r3, [pc, #120]	@ (8008ea0 <vTaskDelete+0xd4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea0 <vTaskDelete+0xd4>)
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	e009      	b.n	8008e44 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008e30:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea4 <vTaskDelete+0xd8>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	4a1b      	ldr	r2, [pc, #108]	@ (8008ea4 <vTaskDelete+0xd8>)
 8008e38:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fca6 	bl	800978c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008e40:	f000 fcda 	bl	80097f8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008e44:	f001 fa9a 	bl	800a37c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008e48:	4b17      	ldr	r3, [pc, #92]	@ (8008ea8 <vTaskDelete+0xdc>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d01c      	beq.n	8008e8a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8008e50:	4b10      	ldr	r3, [pc, #64]	@ (8008e94 <vTaskDelete+0xc8>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d117      	bne.n	8008e8a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008e5a:	4b14      	ldr	r3, [pc, #80]	@ (8008eac <vTaskDelete+0xe0>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00b      	beq.n	8008e7a <vTaskDelete+0xae>
	__asm volatile
 8008e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	60bb      	str	r3, [r7, #8]
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	e7fd      	b.n	8008e76 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb0 <vTaskDelete+0xe4>)
 8008e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008e8a:	bf00      	nop
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	20008168 	.word	0x20008168
 8008e98:	20008658 	.word	0x20008658
 8008e9c:	20008610 	.word	0x20008610
 8008ea0:	20008624 	.word	0x20008624
 8008ea4:	2000863c 	.word	0x2000863c
 8008ea8:	20008648 	.word	0x20008648
 8008eac:	20008664 	.word	0x20008664
 8008eb0:	e000ed04 	.word	0xe000ed04

08008eb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d018      	beq.n	8008ef8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ec6:	4b14      	ldr	r3, [pc, #80]	@ (8008f18 <vTaskDelay+0x64>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00b      	beq.n	8008ee6 <vTaskDelay+0x32>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	60bb      	str	r3, [r7, #8]
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	e7fd      	b.n	8008ee2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ee6:	f000 f88b 	bl	8009000 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008eea:	2100      	movs	r1, #0
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fd31 	bl	8009954 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ef2:	f000 f893 	bl	800901c <xTaskResumeAll>
 8008ef6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d107      	bne.n	8008f0e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008efe:	4b07      	ldr	r3, [pc, #28]	@ (8008f1c <vTaskDelay+0x68>)
 8008f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f0e:	bf00      	nop
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20008664 	.word	0x20008664
 8008f1c:	e000ed04 	.word	0xe000ed04

08008f20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	@ 0x28
 8008f24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f2e:	463a      	mov	r2, r7
 8008f30:	1d39      	adds	r1, r7, #4
 8008f32:	f107 0308 	add.w	r3, r7, #8
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe ffa8 	bl	8007e8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	9202      	str	r2, [sp, #8]
 8008f44:	9301      	str	r3, [sp, #4]
 8008f46:	2300      	movs	r3, #0
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	460a      	mov	r2, r1
 8008f4e:	4924      	ldr	r1, [pc, #144]	@ (8008fe0 <vTaskStartScheduler+0xc0>)
 8008f50:	4824      	ldr	r0, [pc, #144]	@ (8008fe4 <vTaskStartScheduler+0xc4>)
 8008f52:	f7ff fd7d 	bl	8008a50 <xTaskCreateStatic>
 8008f56:	4603      	mov	r3, r0
 8008f58:	4a23      	ldr	r2, [pc, #140]	@ (8008fe8 <vTaskStartScheduler+0xc8>)
 8008f5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f5c:	4b22      	ldr	r3, [pc, #136]	@ (8008fe8 <vTaskStartScheduler+0xc8>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f64:	2301      	movs	r3, #1
 8008f66:	617b      	str	r3, [r7, #20]
 8008f68:	e001      	b.n	8008f6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d102      	bne.n	8008f7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f74:	f000 fd42 	bl	80099fc <xTimerCreateTimerTask>
 8008f78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d11b      	bne.n	8008fb8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	613b      	str	r3, [r7, #16]
}
 8008f92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f94:	4b15      	ldr	r3, [pc, #84]	@ (8008fec <vTaskStartScheduler+0xcc>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	3354      	adds	r3, #84	@ 0x54
 8008f9a:	4a15      	ldr	r2, [pc, #84]	@ (8008ff0 <vTaskStartScheduler+0xd0>)
 8008f9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f9e:	4b15      	ldr	r3, [pc, #84]	@ (8008ff4 <vTaskStartScheduler+0xd4>)
 8008fa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fa6:	4b14      	ldr	r3, [pc, #80]	@ (8008ff8 <vTaskStartScheduler+0xd8>)
 8008fa8:	2201      	movs	r2, #1
 8008faa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fac:	4b13      	ldr	r3, [pc, #76]	@ (8008ffc <vTaskStartScheduler+0xdc>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fb2:	f001 f90d 	bl	800a1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fb6:	e00f      	b.n	8008fd8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fbe:	d10b      	bne.n	8008fd8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	60fb      	str	r3, [r7, #12]
}
 8008fd2:	bf00      	nop
 8008fd4:	bf00      	nop
 8008fd6:	e7fd      	b.n	8008fd4 <vTaskStartScheduler+0xb4>
}
 8008fd8:	bf00      	nop
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	080192cc 	.word	0x080192cc
 8008fe4:	08009681 	.word	0x08009681
 8008fe8:	20008660 	.word	0x20008660
 8008fec:	20008168 	.word	0x20008168
 8008ff0:	200000d8 	.word	0x200000d8
 8008ff4:	2000865c 	.word	0x2000865c
 8008ff8:	20008648 	.word	0x20008648
 8008ffc:	20008640 	.word	0x20008640

08009000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009000:	b480      	push	{r7}
 8009002:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009004:	4b04      	ldr	r3, [pc, #16]	@ (8009018 <vTaskSuspendAll+0x18>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3301      	adds	r3, #1
 800900a:	4a03      	ldr	r2, [pc, #12]	@ (8009018 <vTaskSuspendAll+0x18>)
 800900c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800900e:	bf00      	nop
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	20008664 	.word	0x20008664

0800901c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800902a:	4b42      	ldr	r3, [pc, #264]	@ (8009134 <xTaskResumeAll+0x118>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10b      	bne.n	800904a <xTaskResumeAll+0x2e>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	603b      	str	r3, [r7, #0]
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop
 8009048:	e7fd      	b.n	8009046 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800904a:	f001 f965 	bl	800a318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800904e:	4b39      	ldr	r3, [pc, #228]	@ (8009134 <xTaskResumeAll+0x118>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3b01      	subs	r3, #1
 8009054:	4a37      	ldr	r2, [pc, #220]	@ (8009134 <xTaskResumeAll+0x118>)
 8009056:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009058:	4b36      	ldr	r3, [pc, #216]	@ (8009134 <xTaskResumeAll+0x118>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d162      	bne.n	8009126 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009060:	4b35      	ldr	r3, [pc, #212]	@ (8009138 <xTaskResumeAll+0x11c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d05e      	beq.n	8009126 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009068:	e02f      	b.n	80090ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906a:	4b34      	ldr	r3, [pc, #208]	@ (800913c <xTaskResumeAll+0x120>)
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3318      	adds	r3, #24
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe ffc6 	bl	8008008 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	3304      	adds	r3, #4
 8009080:	4618      	mov	r0, r3
 8009082:	f7fe ffc1 	bl	8008008 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800908a:	4b2d      	ldr	r3, [pc, #180]	@ (8009140 <xTaskResumeAll+0x124>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	429a      	cmp	r2, r3
 8009090:	d903      	bls.n	800909a <xTaskResumeAll+0x7e>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009096:	4a2a      	ldr	r2, [pc, #168]	@ (8009140 <xTaskResumeAll+0x124>)
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4a27      	ldr	r2, [pc, #156]	@ (8009144 <xTaskResumeAll+0x128>)
 80090a8:	441a      	add	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	3304      	adds	r3, #4
 80090ae:	4619      	mov	r1, r3
 80090b0:	4610      	mov	r0, r2
 80090b2:	f7fe ff4c 	bl	8007f4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ba:	4b23      	ldr	r3, [pc, #140]	@ (8009148 <xTaskResumeAll+0x12c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d302      	bcc.n	80090ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80090c4:	4b21      	ldr	r3, [pc, #132]	@ (800914c <xTaskResumeAll+0x130>)
 80090c6:	2201      	movs	r2, #1
 80090c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090ca:	4b1c      	ldr	r3, [pc, #112]	@ (800913c <xTaskResumeAll+0x120>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1cb      	bne.n	800906a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090d8:	f000 fb8e 	bl	80097f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009150 <xTaskResumeAll+0x134>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d010      	beq.n	800910a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090e8:	f000 f846 	bl	8009178 <xTaskIncrementTick>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80090f2:	4b16      	ldr	r3, [pc, #88]	@ (800914c <xTaskResumeAll+0x130>)
 80090f4:	2201      	movs	r2, #1
 80090f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1f1      	bne.n	80090e8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009104:	4b12      	ldr	r3, [pc, #72]	@ (8009150 <xTaskResumeAll+0x134>)
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800910a:	4b10      	ldr	r3, [pc, #64]	@ (800914c <xTaskResumeAll+0x130>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d009      	beq.n	8009126 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009112:	2301      	movs	r3, #1
 8009114:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009116:	4b0f      	ldr	r3, [pc, #60]	@ (8009154 <xTaskResumeAll+0x138>)
 8009118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009126:	f001 f929 	bl	800a37c <vPortExitCritical>

	return xAlreadyYielded;
 800912a:	68bb      	ldr	r3, [r7, #8]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	20008664 	.word	0x20008664
 8009138:	2000863c 	.word	0x2000863c
 800913c:	200085fc 	.word	0x200085fc
 8009140:	20008644 	.word	0x20008644
 8009144:	2000816c 	.word	0x2000816c
 8009148:	20008168 	.word	0x20008168
 800914c:	20008650 	.word	0x20008650
 8009150:	2000864c 	.word	0x2000864c
 8009154:	e000ed04 	.word	0xe000ed04

08009158 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800915e:	4b05      	ldr	r3, [pc, #20]	@ (8009174 <xTaskGetTickCount+0x1c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009164:	687b      	ldr	r3, [r7, #4]
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	20008640 	.word	0x20008640

08009178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800917e:	2300      	movs	r3, #0
 8009180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009182:	4b4f      	ldr	r3, [pc, #316]	@ (80092c0 <xTaskIncrementTick+0x148>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	f040 8090 	bne.w	80092ac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800918c:	4b4d      	ldr	r3, [pc, #308]	@ (80092c4 <xTaskIncrementTick+0x14c>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3301      	adds	r3, #1
 8009192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009194:	4a4b      	ldr	r2, [pc, #300]	@ (80092c4 <xTaskIncrementTick+0x14c>)
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d121      	bne.n	80091e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80091a0:	4b49      	ldr	r3, [pc, #292]	@ (80092c8 <xTaskIncrementTick+0x150>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00b      	beq.n	80091c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	603b      	str	r3, [r7, #0]
}
 80091bc:	bf00      	nop
 80091be:	bf00      	nop
 80091c0:	e7fd      	b.n	80091be <xTaskIncrementTick+0x46>
 80091c2:	4b41      	ldr	r3, [pc, #260]	@ (80092c8 <xTaskIncrementTick+0x150>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	4b40      	ldr	r3, [pc, #256]	@ (80092cc <xTaskIncrementTick+0x154>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a3e      	ldr	r2, [pc, #248]	@ (80092c8 <xTaskIncrementTick+0x150>)
 80091ce:	6013      	str	r3, [r2, #0]
 80091d0:	4a3e      	ldr	r2, [pc, #248]	@ (80092cc <xTaskIncrementTick+0x154>)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	4b3e      	ldr	r3, [pc, #248]	@ (80092d0 <xTaskIncrementTick+0x158>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3301      	adds	r3, #1
 80091dc:	4a3c      	ldr	r2, [pc, #240]	@ (80092d0 <xTaskIncrementTick+0x158>)
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	f000 fb0a 	bl	80097f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091e4:	4b3b      	ldr	r3, [pc, #236]	@ (80092d4 <xTaskIncrementTick+0x15c>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d349      	bcc.n	8009282 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ee:	4b36      	ldr	r3, [pc, #216]	@ (80092c8 <xTaskIncrementTick+0x150>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d104      	bne.n	8009202 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091f8:	4b36      	ldr	r3, [pc, #216]	@ (80092d4 <xTaskIncrementTick+0x15c>)
 80091fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091fe:	601a      	str	r2, [r3, #0]
					break;
 8009200:	e03f      	b.n	8009282 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009202:	4b31      	ldr	r3, [pc, #196]	@ (80092c8 <xTaskIncrementTick+0x150>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	429a      	cmp	r2, r3
 8009218:	d203      	bcs.n	8009222 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800921a:	4a2e      	ldr	r2, [pc, #184]	@ (80092d4 <xTaskIncrementTick+0x15c>)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009220:	e02f      	b.n	8009282 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	3304      	adds	r3, #4
 8009226:	4618      	mov	r0, r3
 8009228:	f7fe feee 	bl	8008008 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009230:	2b00      	cmp	r3, #0
 8009232:	d004      	beq.n	800923e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	3318      	adds	r3, #24
 8009238:	4618      	mov	r0, r3
 800923a:	f7fe fee5 	bl	8008008 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009242:	4b25      	ldr	r3, [pc, #148]	@ (80092d8 <xTaskIncrementTick+0x160>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	429a      	cmp	r2, r3
 8009248:	d903      	bls.n	8009252 <xTaskIncrementTick+0xda>
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924e:	4a22      	ldr	r2, [pc, #136]	@ (80092d8 <xTaskIncrementTick+0x160>)
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4a1f      	ldr	r2, [pc, #124]	@ (80092dc <xTaskIncrementTick+0x164>)
 8009260:	441a      	add	r2, r3
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	3304      	adds	r3, #4
 8009266:	4619      	mov	r1, r3
 8009268:	4610      	mov	r0, r2
 800926a:	f7fe fe70 	bl	8007f4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009272:	4b1b      	ldr	r3, [pc, #108]	@ (80092e0 <xTaskIncrementTick+0x168>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009278:	429a      	cmp	r2, r3
 800927a:	d3b8      	bcc.n	80091ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800927c:	2301      	movs	r3, #1
 800927e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009280:	e7b5      	b.n	80091ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009282:	4b17      	ldr	r3, [pc, #92]	@ (80092e0 <xTaskIncrementTick+0x168>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009288:	4914      	ldr	r1, [pc, #80]	@ (80092dc <xTaskIncrementTick+0x164>)
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	440b      	add	r3, r1
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d901      	bls.n	800929e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800929a:	2301      	movs	r3, #1
 800929c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800929e:	4b11      	ldr	r3, [pc, #68]	@ (80092e4 <xTaskIncrementTick+0x16c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d007      	beq.n	80092b6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80092a6:	2301      	movs	r3, #1
 80092a8:	617b      	str	r3, [r7, #20]
 80092aa:	e004      	b.n	80092b6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80092ac:	4b0e      	ldr	r3, [pc, #56]	@ (80092e8 <xTaskIncrementTick+0x170>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3301      	adds	r3, #1
 80092b2:	4a0d      	ldr	r2, [pc, #52]	@ (80092e8 <xTaskIncrementTick+0x170>)
 80092b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80092b6:	697b      	ldr	r3, [r7, #20]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20008664 	.word	0x20008664
 80092c4:	20008640 	.word	0x20008640
 80092c8:	200085f4 	.word	0x200085f4
 80092cc:	200085f8 	.word	0x200085f8
 80092d0:	20008654 	.word	0x20008654
 80092d4:	2000865c 	.word	0x2000865c
 80092d8:	20008644 	.word	0x20008644
 80092dc:	2000816c 	.word	0x2000816c
 80092e0:	20008168 	.word	0x20008168
 80092e4:	20008650 	.word	0x20008650
 80092e8:	2000864c 	.word	0x2000864c

080092ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092f2:	4b2b      	ldr	r3, [pc, #172]	@ (80093a0 <vTaskSwitchContext+0xb4>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092fa:	4b2a      	ldr	r3, [pc, #168]	@ (80093a4 <vTaskSwitchContext+0xb8>)
 80092fc:	2201      	movs	r2, #1
 80092fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009300:	e047      	b.n	8009392 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009302:	4b28      	ldr	r3, [pc, #160]	@ (80093a4 <vTaskSwitchContext+0xb8>)
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009308:	4b27      	ldr	r3, [pc, #156]	@ (80093a8 <vTaskSwitchContext+0xbc>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	e011      	b.n	8009334 <vTaskSwitchContext+0x48>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10b      	bne.n	800932e <vTaskSwitchContext+0x42>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	607b      	str	r3, [r7, #4]
}
 8009328:	bf00      	nop
 800932a:	bf00      	nop
 800932c:	e7fd      	b.n	800932a <vTaskSwitchContext+0x3e>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3b01      	subs	r3, #1
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	491d      	ldr	r1, [pc, #116]	@ (80093ac <vTaskSwitchContext+0xc0>)
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	4613      	mov	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4413      	add	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	440b      	add	r3, r1
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d0e3      	beq.n	8009310 <vTaskSwitchContext+0x24>
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4613      	mov	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4413      	add	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4a16      	ldr	r2, [pc, #88]	@ (80093ac <vTaskSwitchContext+0xc0>)
 8009354:	4413      	add	r3, r2
 8009356:	60bb      	str	r3, [r7, #8]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	605a      	str	r2, [r3, #4]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	3308      	adds	r3, #8
 800936a:	429a      	cmp	r2, r3
 800936c:	d104      	bne.n	8009378 <vTaskSwitchContext+0x8c>
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	605a      	str	r2, [r3, #4]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	4a0c      	ldr	r2, [pc, #48]	@ (80093b0 <vTaskSwitchContext+0xc4>)
 8009380:	6013      	str	r3, [r2, #0]
 8009382:	4a09      	ldr	r2, [pc, #36]	@ (80093a8 <vTaskSwitchContext+0xbc>)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009388:	4b09      	ldr	r3, [pc, #36]	@ (80093b0 <vTaskSwitchContext+0xc4>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3354      	adds	r3, #84	@ 0x54
 800938e:	4a09      	ldr	r2, [pc, #36]	@ (80093b4 <vTaskSwitchContext+0xc8>)
 8009390:	6013      	str	r3, [r2, #0]
}
 8009392:	bf00      	nop
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	20008664 	.word	0x20008664
 80093a4:	20008650 	.word	0x20008650
 80093a8:	20008644 	.word	0x20008644
 80093ac:	2000816c 	.word	0x2000816c
 80093b0:	20008168 	.word	0x20008168
 80093b4:	200000d8 	.word	0x200000d8

080093b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10b      	bne.n	80093e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	60fb      	str	r3, [r7, #12]
}
 80093da:	bf00      	nop
 80093dc:	bf00      	nop
 80093de:	e7fd      	b.n	80093dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093e0:	4b07      	ldr	r3, [pc, #28]	@ (8009400 <vTaskPlaceOnEventList+0x48>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3318      	adds	r3, #24
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7fe fdd4 	bl	8007f96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093ee:	2101      	movs	r1, #1
 80093f0:	6838      	ldr	r0, [r7, #0]
 80093f2:	f000 faaf 	bl	8009954 <prvAddCurrentTaskToDelayedList>
}
 80093f6:	bf00      	nop
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	20008168 	.word	0x20008168

08009404 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10b      	bne.n	800942e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	617b      	str	r3, [r7, #20]
}
 8009428:	bf00      	nop
 800942a:	bf00      	nop
 800942c:	e7fd      	b.n	800942a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800942e:	4b0a      	ldr	r3, [pc, #40]	@ (8009458 <vTaskPlaceOnEventListRestricted+0x54>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3318      	adds	r3, #24
 8009434:	4619      	mov	r1, r3
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f7fe fd89 	bl	8007f4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d002      	beq.n	8009448 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009446:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	68b8      	ldr	r0, [r7, #8]
 800944c:	f000 fa82 	bl	8009954 <prvAddCurrentTaskToDelayedList>
	}
 8009450:	bf00      	nop
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20008168 	.word	0x20008168

0800945c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10b      	bne.n	800948a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	60fb      	str	r3, [r7, #12]
}
 8009484:	bf00      	nop
 8009486:	bf00      	nop
 8009488:	e7fd      	b.n	8009486 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	3318      	adds	r3, #24
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe fdba 	bl	8008008 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009494:	4b1d      	ldr	r3, [pc, #116]	@ (800950c <xTaskRemoveFromEventList+0xb0>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d11d      	bne.n	80094d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	3304      	adds	r3, #4
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe fdb1 	bl	8008008 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094aa:	4b19      	ldr	r3, [pc, #100]	@ (8009510 <xTaskRemoveFromEventList+0xb4>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d903      	bls.n	80094ba <xTaskRemoveFromEventList+0x5e>
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b6:	4a16      	ldr	r2, [pc, #88]	@ (8009510 <xTaskRemoveFromEventList+0xb4>)
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4a13      	ldr	r2, [pc, #76]	@ (8009514 <xTaskRemoveFromEventList+0xb8>)
 80094c8:	441a      	add	r2, r3
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	3304      	adds	r3, #4
 80094ce:	4619      	mov	r1, r3
 80094d0:	4610      	mov	r0, r2
 80094d2:	f7fe fd3c 	bl	8007f4e <vListInsertEnd>
 80094d6:	e005      	b.n	80094e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	3318      	adds	r3, #24
 80094dc:	4619      	mov	r1, r3
 80094de:	480e      	ldr	r0, [pc, #56]	@ (8009518 <xTaskRemoveFromEventList+0xbc>)
 80094e0:	f7fe fd35 	bl	8007f4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094e8:	4b0c      	ldr	r3, [pc, #48]	@ (800951c <xTaskRemoveFromEventList+0xc0>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d905      	bls.n	80094fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094f2:	2301      	movs	r3, #1
 80094f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009520 <xTaskRemoveFromEventList+0xc4>)
 80094f8:	2201      	movs	r2, #1
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	e001      	b.n	8009502 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80094fe:	2300      	movs	r3, #0
 8009500:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009502:	697b      	ldr	r3, [r7, #20]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3718      	adds	r7, #24
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20008664 	.word	0x20008664
 8009510:	20008644 	.word	0x20008644
 8009514:	2000816c 	.word	0x2000816c
 8009518:	200085fc 	.word	0x200085fc
 800951c:	20008168 	.word	0x20008168
 8009520:	20008650 	.word	0x20008650

08009524 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10b      	bne.n	800954a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	60fb      	str	r3, [r7, #12]
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	e7fd      	b.n	8009546 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800954a:	f000 fee5 	bl	800a318 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800954e:	4b07      	ldr	r3, [pc, #28]	@ (800956c <vTaskSetTimeOutState+0x48>)
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009556:	4b06      	ldr	r3, [pc, #24]	@ (8009570 <vTaskSetTimeOutState+0x4c>)
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800955e:	f000 ff0d 	bl	800a37c <vPortExitCritical>
}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20008654 	.word	0x20008654
 8009570:	20008640 	.word	0x20008640

08009574 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800957c:	4b06      	ldr	r3, [pc, #24]	@ (8009598 <vTaskInternalSetTimeOutState+0x24>)
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009584:	4b05      	ldr	r3, [pc, #20]	@ (800959c <vTaskInternalSetTimeOutState+0x28>)
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	605a      	str	r2, [r3, #4]
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	20008654 	.word	0x20008654
 800959c:	20008640 	.word	0x20008640

080095a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10b      	bne.n	80095c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	613b      	str	r3, [r7, #16]
}
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	e7fd      	b.n	80095c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10b      	bne.n	80095e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	60fb      	str	r3, [r7, #12]
}
 80095e0:	bf00      	nop
 80095e2:	bf00      	nop
 80095e4:	e7fd      	b.n	80095e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80095e6:	f000 fe97 	bl	800a318 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009660 <xTaskCheckForTimeOut+0xc0>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	69ba      	ldr	r2, [r7, #24]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009602:	d102      	bne.n	800960a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009604:	2300      	movs	r3, #0
 8009606:	61fb      	str	r3, [r7, #28]
 8009608:	e023      	b.n	8009652 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	4b15      	ldr	r3, [pc, #84]	@ (8009664 <xTaskCheckForTimeOut+0xc4>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d007      	beq.n	8009626 <xTaskCheckForTimeOut+0x86>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	69ba      	ldr	r2, [r7, #24]
 800961c:	429a      	cmp	r2, r3
 800961e:	d302      	bcc.n	8009626 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	61fb      	str	r3, [r7, #28]
 8009624:	e015      	b.n	8009652 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	429a      	cmp	r2, r3
 800962e:	d20b      	bcs.n	8009648 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	1ad2      	subs	r2, r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff ff99 	bl	8009574 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009642:	2300      	movs	r3, #0
 8009644:	61fb      	str	r3, [r7, #28]
 8009646:	e004      	b.n	8009652 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800964e:	2301      	movs	r3, #1
 8009650:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009652:	f000 fe93 	bl	800a37c <vPortExitCritical>

	return xReturn;
 8009656:	69fb      	ldr	r3, [r7, #28]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3720      	adds	r7, #32
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	20008640 	.word	0x20008640
 8009664:	20008654 	.word	0x20008654

08009668 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009668:	b480      	push	{r7}
 800966a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800966c:	4b03      	ldr	r3, [pc, #12]	@ (800967c <vTaskMissedYield+0x14>)
 800966e:	2201      	movs	r2, #1
 8009670:	601a      	str	r2, [r3, #0]
}
 8009672:	bf00      	nop
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	20008650 	.word	0x20008650

08009680 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009688:	f000 f852 	bl	8009730 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800968c:	4b06      	ldr	r3, [pc, #24]	@ (80096a8 <prvIdleTask+0x28>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d9f9      	bls.n	8009688 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009694:	4b05      	ldr	r3, [pc, #20]	@ (80096ac <prvIdleTask+0x2c>)
 8009696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096a4:	e7f0      	b.n	8009688 <prvIdleTask+0x8>
 80096a6:	bf00      	nop
 80096a8:	2000816c 	.word	0x2000816c
 80096ac:	e000ed04 	.word	0xe000ed04

080096b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096b6:	2300      	movs	r3, #0
 80096b8:	607b      	str	r3, [r7, #4]
 80096ba:	e00c      	b.n	80096d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	4613      	mov	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4a12      	ldr	r2, [pc, #72]	@ (8009710 <prvInitialiseTaskLists+0x60>)
 80096c8:	4413      	add	r3, r2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fc12 	bl	8007ef4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3301      	adds	r3, #1
 80096d4:	607b      	str	r3, [r7, #4]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b37      	cmp	r3, #55	@ 0x37
 80096da:	d9ef      	bls.n	80096bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096dc:	480d      	ldr	r0, [pc, #52]	@ (8009714 <prvInitialiseTaskLists+0x64>)
 80096de:	f7fe fc09 	bl	8007ef4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096e2:	480d      	ldr	r0, [pc, #52]	@ (8009718 <prvInitialiseTaskLists+0x68>)
 80096e4:	f7fe fc06 	bl	8007ef4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096e8:	480c      	ldr	r0, [pc, #48]	@ (800971c <prvInitialiseTaskLists+0x6c>)
 80096ea:	f7fe fc03 	bl	8007ef4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096ee:	480c      	ldr	r0, [pc, #48]	@ (8009720 <prvInitialiseTaskLists+0x70>)
 80096f0:	f7fe fc00 	bl	8007ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096f4:	480b      	ldr	r0, [pc, #44]	@ (8009724 <prvInitialiseTaskLists+0x74>)
 80096f6:	f7fe fbfd 	bl	8007ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009728 <prvInitialiseTaskLists+0x78>)
 80096fc:	4a05      	ldr	r2, [pc, #20]	@ (8009714 <prvInitialiseTaskLists+0x64>)
 80096fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009700:	4b0a      	ldr	r3, [pc, #40]	@ (800972c <prvInitialiseTaskLists+0x7c>)
 8009702:	4a05      	ldr	r2, [pc, #20]	@ (8009718 <prvInitialiseTaskLists+0x68>)
 8009704:	601a      	str	r2, [r3, #0]
}
 8009706:	bf00      	nop
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	2000816c 	.word	0x2000816c
 8009714:	200085cc 	.word	0x200085cc
 8009718:	200085e0 	.word	0x200085e0
 800971c:	200085fc 	.word	0x200085fc
 8009720:	20008610 	.word	0x20008610
 8009724:	20008628 	.word	0x20008628
 8009728:	200085f4 	.word	0x200085f4
 800972c:	200085f8 	.word	0x200085f8

08009730 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009736:	e019      	b.n	800976c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009738:	f000 fdee 	bl	800a318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800973c:	4b10      	ldr	r3, [pc, #64]	@ (8009780 <prvCheckTasksWaitingTermination+0x50>)
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3304      	adds	r3, #4
 8009748:	4618      	mov	r0, r3
 800974a:	f7fe fc5d 	bl	8008008 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800974e:	4b0d      	ldr	r3, [pc, #52]	@ (8009784 <prvCheckTasksWaitingTermination+0x54>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3b01      	subs	r3, #1
 8009754:	4a0b      	ldr	r2, [pc, #44]	@ (8009784 <prvCheckTasksWaitingTermination+0x54>)
 8009756:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009758:	4b0b      	ldr	r3, [pc, #44]	@ (8009788 <prvCheckTasksWaitingTermination+0x58>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3b01      	subs	r3, #1
 800975e:	4a0a      	ldr	r2, [pc, #40]	@ (8009788 <prvCheckTasksWaitingTermination+0x58>)
 8009760:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009762:	f000 fe0b 	bl	800a37c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f810 	bl	800978c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800976c:	4b06      	ldr	r3, [pc, #24]	@ (8009788 <prvCheckTasksWaitingTermination+0x58>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e1      	bne.n	8009738 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20008610 	.word	0x20008610
 8009784:	2000863c 	.word	0x2000863c
 8009788:	20008624 	.word	0x20008624

0800978c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3354      	adds	r3, #84	@ 0x54
 8009798:	4618      	mov	r0, r3
 800979a:	f00e fd9d 	bl	80182d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d108      	bne.n	80097ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 ffa3 	bl	800a6f8 <vPortFree>
				vPortFree( pxTCB );
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 ffa0 	bl	800a6f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097b8:	e019      	b.n	80097ee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d103      	bne.n	80097cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 ff97 	bl	800a6f8 <vPortFree>
	}
 80097ca:	e010      	b.n	80097ee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d00b      	beq.n	80097ee <prvDeleteTCB+0x62>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	60fb      	str	r3, [r7, #12]
}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	e7fd      	b.n	80097ea <prvDeleteTCB+0x5e>
	}
 80097ee:	bf00      	nop
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
	...

080097f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009830 <prvResetNextTaskUnblockTime+0x38>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009808:	4b0a      	ldr	r3, [pc, #40]	@ (8009834 <prvResetNextTaskUnblockTime+0x3c>)
 800980a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800980e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009810:	e008      	b.n	8009824 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009812:	4b07      	ldr	r3, [pc, #28]	@ (8009830 <prvResetNextTaskUnblockTime+0x38>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	4a04      	ldr	r2, [pc, #16]	@ (8009834 <prvResetNextTaskUnblockTime+0x3c>)
 8009822:	6013      	str	r3, [r2, #0]
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	200085f4 	.word	0x200085f4
 8009834:	2000865c 	.word	0x2000865c

08009838 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800983e:	4b0b      	ldr	r3, [pc, #44]	@ (800986c <xTaskGetSchedulerState+0x34>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d102      	bne.n	800984c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009846:	2301      	movs	r3, #1
 8009848:	607b      	str	r3, [r7, #4]
 800984a:	e008      	b.n	800985e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800984c:	4b08      	ldr	r3, [pc, #32]	@ (8009870 <xTaskGetSchedulerState+0x38>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009854:	2302      	movs	r3, #2
 8009856:	607b      	str	r3, [r7, #4]
 8009858:	e001      	b.n	800985e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800985a:	2300      	movs	r3, #0
 800985c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800985e:	687b      	ldr	r3, [r7, #4]
	}
 8009860:	4618      	mov	r0, r3
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	20008648 	.word	0x20008648
 8009870:	20008664 	.word	0x20008664

08009874 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009880:	2300      	movs	r3, #0
 8009882:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d058      	beq.n	800993c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800988a:	4b2f      	ldr	r3, [pc, #188]	@ (8009948 <xTaskPriorityDisinherit+0xd4>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	429a      	cmp	r2, r3
 8009892:	d00b      	beq.n	80098ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	60fb      	str	r3, [r7, #12]
}
 80098a6:	bf00      	nop
 80098a8:	bf00      	nop
 80098aa:	e7fd      	b.n	80098a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10b      	bne.n	80098cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	60bb      	str	r3, [r7, #8]
}
 80098c6:	bf00      	nop
 80098c8:	bf00      	nop
 80098ca:	e7fd      	b.n	80098c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098d0:	1e5a      	subs	r2, r3, #1
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098de:	429a      	cmp	r2, r3
 80098e0:	d02c      	beq.n	800993c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d128      	bne.n	800993c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	3304      	adds	r3, #4
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fb8a 	bl	8008008 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009900:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800990c:	4b0f      	ldr	r3, [pc, #60]	@ (800994c <xTaskPriorityDisinherit+0xd8>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d903      	bls.n	800991c <xTaskPriorityDisinherit+0xa8>
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009918:	4a0c      	ldr	r2, [pc, #48]	@ (800994c <xTaskPriorityDisinherit+0xd8>)
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009920:	4613      	mov	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4a09      	ldr	r2, [pc, #36]	@ (8009950 <xTaskPriorityDisinherit+0xdc>)
 800992a:	441a      	add	r2, r3
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	3304      	adds	r3, #4
 8009930:	4619      	mov	r1, r3
 8009932:	4610      	mov	r0, r2
 8009934:	f7fe fb0b 	bl	8007f4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009938:	2301      	movs	r3, #1
 800993a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800993c:	697b      	ldr	r3, [r7, #20]
	}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20008168 	.word	0x20008168
 800994c:	20008644 	.word	0x20008644
 8009950:	2000816c 	.word	0x2000816c

08009954 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800995e:	4b21      	ldr	r3, [pc, #132]	@ (80099e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009964:	4b20      	ldr	r3, [pc, #128]	@ (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3304      	adds	r3, #4
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe fb4c 	bl	8008008 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009976:	d10a      	bne.n	800998e <prvAddCurrentTaskToDelayedList+0x3a>
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d007      	beq.n	800998e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800997e:	4b1a      	ldr	r3, [pc, #104]	@ (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3304      	adds	r3, #4
 8009984:	4619      	mov	r1, r3
 8009986:	4819      	ldr	r0, [pc, #100]	@ (80099ec <prvAddCurrentTaskToDelayedList+0x98>)
 8009988:	f7fe fae1 	bl	8007f4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800998c:	e026      	b.n	80099dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4413      	add	r3, r2
 8009994:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009996:	4b14      	ldr	r3, [pc, #80]	@ (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d209      	bcs.n	80099ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099a6:	4b12      	ldr	r3, [pc, #72]	@ (80099f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	4b0f      	ldr	r3, [pc, #60]	@ (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3304      	adds	r3, #4
 80099b0:	4619      	mov	r1, r3
 80099b2:	4610      	mov	r0, r2
 80099b4:	f7fe faef 	bl	8007f96 <vListInsert>
}
 80099b8:	e010      	b.n	80099dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099ba:	4b0e      	ldr	r3, [pc, #56]	@ (80099f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	4b0a      	ldr	r3, [pc, #40]	@ (80099e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f7fe fae5 	bl	8007f96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099cc:	4b0a      	ldr	r3, [pc, #40]	@ (80099f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d202      	bcs.n	80099dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099d6:	4a08      	ldr	r2, [pc, #32]	@ (80099f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6013      	str	r3, [r2, #0]
}
 80099dc:	bf00      	nop
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	20008640 	.word	0x20008640
 80099e8:	20008168 	.word	0x20008168
 80099ec:	20008628 	.word	0x20008628
 80099f0:	200085f8 	.word	0x200085f8
 80099f4:	200085f4 	.word	0x200085f4
 80099f8:	2000865c 	.word	0x2000865c

080099fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08a      	sub	sp, #40	@ 0x28
 8009a00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a06:	f000 fb13 	bl	800a030 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8009a80 <xTimerCreateTimerTask+0x84>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d021      	beq.n	8009a56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a1a:	1d3a      	adds	r2, r7, #4
 8009a1c:	f107 0108 	add.w	r1, r7, #8
 8009a20:	f107 030c 	add.w	r3, r7, #12
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe fa4b 	bl	8007ec0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	9202      	str	r2, [sp, #8]
 8009a32:	9301      	str	r3, [sp, #4]
 8009a34:	2302      	movs	r3, #2
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	460a      	mov	r2, r1
 8009a3c:	4911      	ldr	r1, [pc, #68]	@ (8009a84 <xTimerCreateTimerTask+0x88>)
 8009a3e:	4812      	ldr	r0, [pc, #72]	@ (8009a88 <xTimerCreateTimerTask+0x8c>)
 8009a40:	f7ff f806 	bl	8008a50 <xTaskCreateStatic>
 8009a44:	4603      	mov	r3, r0
 8009a46:	4a11      	ldr	r2, [pc, #68]	@ (8009a8c <xTimerCreateTimerTask+0x90>)
 8009a48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a4a:	4b10      	ldr	r3, [pc, #64]	@ (8009a8c <xTimerCreateTimerTask+0x90>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a52:	2301      	movs	r3, #1
 8009a54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10b      	bne.n	8009a74 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	613b      	str	r3, [r7, #16]
}
 8009a6e:	bf00      	nop
 8009a70:	bf00      	nop
 8009a72:	e7fd      	b.n	8009a70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a74:	697b      	ldr	r3, [r7, #20]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20008698 	.word	0x20008698
 8009a84:	080192d4 	.word	0x080192d4
 8009a88:	08009bc9 	.word	0x08009bc9
 8009a8c:	2000869c 	.word	0x2000869c

08009a90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	@ 0x28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10b      	bne.n	8009ac0 <xTimerGenericCommand+0x30>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	623b      	str	r3, [r7, #32]
}
 8009aba:	bf00      	nop
 8009abc:	bf00      	nop
 8009abe:	e7fd      	b.n	8009abc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ac0:	4b19      	ldr	r3, [pc, #100]	@ (8009b28 <xTimerGenericCommand+0x98>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d02a      	beq.n	8009b1e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	dc18      	bgt.n	8009b0c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ada:	f7ff fead 	bl	8009838 <xTaskGetSchedulerState>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d109      	bne.n	8009af8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ae4:	4b10      	ldr	r3, [pc, #64]	@ (8009b28 <xTimerGenericCommand+0x98>)
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	f107 0110 	add.w	r1, r7, #16
 8009aec:	2300      	movs	r3, #0
 8009aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009af0:	f7fe fbbe 	bl	8008270 <xQueueGenericSend>
 8009af4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009af6:	e012      	b.n	8009b1e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009af8:	4b0b      	ldr	r3, [pc, #44]	@ (8009b28 <xTimerGenericCommand+0x98>)
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	f107 0110 	add.w	r1, r7, #16
 8009b00:	2300      	movs	r3, #0
 8009b02:	2200      	movs	r2, #0
 8009b04:	f7fe fbb4 	bl	8008270 <xQueueGenericSend>
 8009b08:	6278      	str	r0, [r7, #36]	@ 0x24
 8009b0a:	e008      	b.n	8009b1e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b0c:	4b06      	ldr	r3, [pc, #24]	@ (8009b28 <xTimerGenericCommand+0x98>)
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	f107 0110 	add.w	r1, r7, #16
 8009b14:	2300      	movs	r3, #0
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	f7fe fcac 	bl	8008474 <xQueueGenericSendFromISR>
 8009b1c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3728      	adds	r7, #40	@ 0x28
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	20008698 	.word	0x20008698

08009b2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af02      	add	r7, sp, #8
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b36:	4b23      	ldr	r3, [pc, #140]	@ (8009bc4 <prvProcessExpiredTimer+0x98>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	3304      	adds	r3, #4
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe fa5f 	bl	8008008 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d023      	beq.n	8009ba0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	699a      	ldr	r2, [r3, #24]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	18d1      	adds	r1, r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	6978      	ldr	r0, [r7, #20]
 8009b66:	f000 f8d5 	bl	8009d14 <prvInsertTimerInActiveList>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d020      	beq.n	8009bb2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b70:	2300      	movs	r3, #0
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	2300      	movs	r3, #0
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	2100      	movs	r1, #0
 8009b7a:	6978      	ldr	r0, [r7, #20]
 8009b7c:	f7ff ff88 	bl	8009a90 <xTimerGenericCommand>
 8009b80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d114      	bne.n	8009bb2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	60fb      	str	r3, [r7, #12]
}
 8009b9a:	bf00      	nop
 8009b9c:	bf00      	nop
 8009b9e:	e7fd      	b.n	8009b9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ba6:	f023 0301 	bic.w	r3, r3, #1
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	6978      	ldr	r0, [r7, #20]
 8009bb8:	4798      	blx	r3
}
 8009bba:	bf00      	nop
 8009bbc:	3718      	adds	r7, #24
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	20008690 	.word	0x20008690

08009bc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bd0:	f107 0308 	add.w	r3, r7, #8
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 f859 	bl	8009c8c <prvGetNextExpireTime>
 8009bda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	4619      	mov	r1, r3
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 f805 	bl	8009bf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009be6:	f000 f8d7 	bl	8009d98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bea:	bf00      	nop
 8009bec:	e7f0      	b.n	8009bd0 <prvTimerTask+0x8>
	...

08009bf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bfa:	f7ff fa01 	bl	8009000 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bfe:	f107 0308 	add.w	r3, r7, #8
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 f866 	bl	8009cd4 <prvSampleTimeNow>
 8009c08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d130      	bne.n	8009c72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10a      	bne.n	8009c2c <prvProcessTimerOrBlockTask+0x3c>
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d806      	bhi.n	8009c2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c1e:	f7ff f9fd 	bl	800901c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c22:	68f9      	ldr	r1, [r7, #12]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff ff81 	bl	8009b2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c2a:	e024      	b.n	8009c76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d008      	beq.n	8009c44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c32:	4b13      	ldr	r3, [pc, #76]	@ (8009c80 <prvProcessTimerOrBlockTask+0x90>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <prvProcessTimerOrBlockTask+0x50>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e000      	b.n	8009c42 <prvProcessTimerOrBlockTask+0x52>
 8009c40:	2300      	movs	r3, #0
 8009c42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c44:	4b0f      	ldr	r3, [pc, #60]	@ (8009c84 <prvProcessTimerOrBlockTask+0x94>)
 8009c46:	6818      	ldr	r0, [r3, #0]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	4619      	mov	r1, r3
 8009c52:	f7fe fec9 	bl	80089e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c56:	f7ff f9e1 	bl	800901c <xTaskResumeAll>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10a      	bne.n	8009c76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c60:	4b09      	ldr	r3, [pc, #36]	@ (8009c88 <prvProcessTimerOrBlockTask+0x98>)
 8009c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	f3bf 8f6f 	isb	sy
}
 8009c70:	e001      	b.n	8009c76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c72:	f7ff f9d3 	bl	800901c <xTaskResumeAll>
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	20008694 	.word	0x20008694
 8009c84:	20008698 	.word	0x20008698
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c94:	4b0e      	ldr	r3, [pc, #56]	@ (8009cd0 <prvGetNextExpireTime+0x44>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <prvGetNextExpireTime+0x16>
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	e000      	b.n	8009ca4 <prvGetNextExpireTime+0x18>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d105      	bne.n	8009cbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cb0:	4b07      	ldr	r3, [pc, #28]	@ (8009cd0 <prvGetNextExpireTime+0x44>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	60fb      	str	r3, [r7, #12]
 8009cba:	e001      	b.n	8009cc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	20008690 	.word	0x20008690

08009cd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009cdc:	f7ff fa3c 	bl	8009158 <xTaskGetTickCount>
 8009ce0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8009d10 <prvSampleTimeNow+0x3c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d205      	bcs.n	8009cf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009cec:	f000 f93a 	bl	8009f64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	e002      	b.n	8009cfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cfe:	4a04      	ldr	r2, [pc, #16]	@ (8009d10 <prvSampleTimeNow+0x3c>)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d04:	68fb      	ldr	r3, [r7, #12]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	200086a0 	.word	0x200086a0

08009d14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d22:	2300      	movs	r3, #0
 8009d24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d812      	bhi.n	8009d60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	1ad2      	subs	r2, r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d302      	bcc.n	8009d4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	e01b      	b.n	8009d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d4e:	4b10      	ldr	r3, [pc, #64]	@ (8009d90 <prvInsertTimerInActiveList+0x7c>)
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	3304      	adds	r3, #4
 8009d56:	4619      	mov	r1, r3
 8009d58:	4610      	mov	r0, r2
 8009d5a:	f7fe f91c 	bl	8007f96 <vListInsert>
 8009d5e:	e012      	b.n	8009d86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d206      	bcs.n	8009d76 <prvInsertTimerInActiveList+0x62>
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d302      	bcc.n	8009d76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d70:	2301      	movs	r3, #1
 8009d72:	617b      	str	r3, [r7, #20]
 8009d74:	e007      	b.n	8009d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d76:	4b07      	ldr	r3, [pc, #28]	@ (8009d94 <prvInsertTimerInActiveList+0x80>)
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	4619      	mov	r1, r3
 8009d80:	4610      	mov	r0, r2
 8009d82:	f7fe f908 	bl	8007f96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d86:	697b      	ldr	r3, [r7, #20]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	20008694 	.word	0x20008694
 8009d94:	20008690 	.word	0x20008690

08009d98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08e      	sub	sp, #56	@ 0x38
 8009d9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d9e:	e0ce      	b.n	8009f3e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	da19      	bge.n	8009dda <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009da6:	1d3b      	adds	r3, r7, #4
 8009da8:	3304      	adds	r3, #4
 8009daa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10b      	bne.n	8009dca <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	61fb      	str	r3, [r7, #28]
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	e7fd      	b.n	8009dc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dd0:	6850      	ldr	r0, [r2, #4]
 8009dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dd4:	6892      	ldr	r2, [r2, #8]
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f2c0 80ae 	blt.w	8009f3e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d004      	beq.n	8009df8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df0:	3304      	adds	r3, #4
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fe f908 	bl	8008008 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009df8:	463b      	mov	r3, r7
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff ff6a 	bl	8009cd4 <prvSampleTimeNow>
 8009e00:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b09      	cmp	r3, #9
 8009e06:	f200 8097 	bhi.w	8009f38 <prvProcessReceivedCommands+0x1a0>
 8009e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e10 <prvProcessReceivedCommands+0x78>)
 8009e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e10:	08009e39 	.word	0x08009e39
 8009e14:	08009e39 	.word	0x08009e39
 8009e18:	08009e39 	.word	0x08009e39
 8009e1c:	08009eaf 	.word	0x08009eaf
 8009e20:	08009ec3 	.word	0x08009ec3
 8009e24:	08009f0f 	.word	0x08009f0f
 8009e28:	08009e39 	.word	0x08009e39
 8009e2c:	08009e39 	.word	0x08009e39
 8009e30:	08009eaf 	.word	0x08009eaf
 8009e34:	08009ec3 	.word	0x08009ec3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e3e:	f043 0301 	orr.w	r3, r3, #1
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	18d1      	adds	r1, r2, r3
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e58:	f7ff ff5c 	bl	8009d14 <prvInsertTimerInActiveList>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d06c      	beq.n	8009f3c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e70:	f003 0304 	and.w	r3, r3, #4
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d061      	beq.n	8009f3c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	441a      	add	r2, r3
 8009e80:	2300      	movs	r3, #0
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	2300      	movs	r3, #0
 8009e86:	2100      	movs	r1, #0
 8009e88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e8a:	f7ff fe01 	bl	8009a90 <xTimerGenericCommand>
 8009e8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d152      	bne.n	8009f3c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	61bb      	str	r3, [r7, #24]
}
 8009ea8:	bf00      	nop
 8009eaa:	bf00      	nop
 8009eac:	e7fd      	b.n	8009eaa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009eb4:	f023 0301 	bic.w	r3, r3, #1
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ebc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009ec0:	e03d      	b.n	8009f3e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ec8:	f043 0301 	orr.w	r3, r3, #1
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10b      	bne.n	8009efa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	617b      	str	r3, [r7, #20]
}
 8009ef4:	bf00      	nop
 8009ef6:	bf00      	nop
 8009ef8:	e7fd      	b.n	8009ef6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efc:	699a      	ldr	r2, [r3, #24]
 8009efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f00:	18d1      	adds	r1, r2, r3
 8009f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f08:	f7ff ff04 	bl	8009d14 <prvInsertTimerInActiveList>
					break;
 8009f0c:	e017      	b.n	8009f3e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f14:	f003 0302 	and.w	r3, r3, #2
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d103      	bne.n	8009f24 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009f1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f1e:	f000 fbeb 	bl	800a6f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f22:	e00c      	b.n	8009f3e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f2a:	f023 0301 	bic.w	r3, r3, #1
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009f36:	e002      	b.n	8009f3e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009f38:	bf00      	nop
 8009f3a:	e000      	b.n	8009f3e <prvProcessReceivedCommands+0x1a6>
					break;
 8009f3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f3e:	4b08      	ldr	r3, [pc, #32]	@ (8009f60 <prvProcessReceivedCommands+0x1c8>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	1d39      	adds	r1, r7, #4
 8009f44:	2200      	movs	r2, #0
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe fb32 	bl	80085b0 <xQueueReceive>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f47f af26 	bne.w	8009da0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	3730      	adds	r7, #48	@ 0x30
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20008698 	.word	0x20008698

08009f64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f6a:	e049      	b.n	800a000 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f6c:	4b2e      	ldr	r3, [pc, #184]	@ (800a028 <prvSwitchTimerLists+0xc4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f76:	4b2c      	ldr	r3, [pc, #176]	@ (800a028 <prvSwitchTimerLists+0xc4>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3304      	adds	r3, #4
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fe f83f 	bl	8008008 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d02f      	beq.n	800a000 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d90e      	bls.n	8009fd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fbe:	4b1a      	ldr	r3, [pc, #104]	@ (800a028 <prvSwitchTimerLists+0xc4>)
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4610      	mov	r0, r2
 8009fca:	f7fd ffe4 	bl	8007f96 <vListInsert>
 8009fce:	e017      	b.n	800a000 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	2100      	movs	r1, #0
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f7ff fd58 	bl	8009a90 <xTimerGenericCommand>
 8009fe0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10b      	bne.n	800a000 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	603b      	str	r3, [r7, #0]
}
 8009ffa:	bf00      	nop
 8009ffc:	bf00      	nop
 8009ffe:	e7fd      	b.n	8009ffc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a000:	4b09      	ldr	r3, [pc, #36]	@ (800a028 <prvSwitchTimerLists+0xc4>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1b0      	bne.n	8009f6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a00a:	4b07      	ldr	r3, [pc, #28]	@ (800a028 <prvSwitchTimerLists+0xc4>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a010:	4b06      	ldr	r3, [pc, #24]	@ (800a02c <prvSwitchTimerLists+0xc8>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a04      	ldr	r2, [pc, #16]	@ (800a028 <prvSwitchTimerLists+0xc4>)
 800a016:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a018:	4a04      	ldr	r2, [pc, #16]	@ (800a02c <prvSwitchTimerLists+0xc8>)
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	6013      	str	r3, [r2, #0]
}
 800a01e:	bf00      	nop
 800a020:	3718      	adds	r7, #24
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20008690 	.word	0x20008690
 800a02c:	20008694 	.word	0x20008694

0800a030 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a036:	f000 f96f 	bl	800a318 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a03a:	4b15      	ldr	r3, [pc, #84]	@ (800a090 <prvCheckForValidListAndQueue+0x60>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d120      	bne.n	800a084 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a042:	4814      	ldr	r0, [pc, #80]	@ (800a094 <prvCheckForValidListAndQueue+0x64>)
 800a044:	f7fd ff56 	bl	8007ef4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a048:	4813      	ldr	r0, [pc, #76]	@ (800a098 <prvCheckForValidListAndQueue+0x68>)
 800a04a:	f7fd ff53 	bl	8007ef4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a04e:	4b13      	ldr	r3, [pc, #76]	@ (800a09c <prvCheckForValidListAndQueue+0x6c>)
 800a050:	4a10      	ldr	r2, [pc, #64]	@ (800a094 <prvCheckForValidListAndQueue+0x64>)
 800a052:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a054:	4b12      	ldr	r3, [pc, #72]	@ (800a0a0 <prvCheckForValidListAndQueue+0x70>)
 800a056:	4a10      	ldr	r2, [pc, #64]	@ (800a098 <prvCheckForValidListAndQueue+0x68>)
 800a058:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a05a:	2300      	movs	r3, #0
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	4b11      	ldr	r3, [pc, #68]	@ (800a0a4 <prvCheckForValidListAndQueue+0x74>)
 800a060:	4a11      	ldr	r2, [pc, #68]	@ (800a0a8 <prvCheckForValidListAndQueue+0x78>)
 800a062:	2110      	movs	r1, #16
 800a064:	200a      	movs	r0, #10
 800a066:	f7fe f863 	bl	8008130 <xQueueGenericCreateStatic>
 800a06a:	4603      	mov	r3, r0
 800a06c:	4a08      	ldr	r2, [pc, #32]	@ (800a090 <prvCheckForValidListAndQueue+0x60>)
 800a06e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a070:	4b07      	ldr	r3, [pc, #28]	@ (800a090 <prvCheckForValidListAndQueue+0x60>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d005      	beq.n	800a084 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a078:	4b05      	ldr	r3, [pc, #20]	@ (800a090 <prvCheckForValidListAndQueue+0x60>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	490b      	ldr	r1, [pc, #44]	@ (800a0ac <prvCheckForValidListAndQueue+0x7c>)
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe fc88 	bl	8008994 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a084:	f000 f97a 	bl	800a37c <vPortExitCritical>
}
 800a088:	bf00      	nop
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20008698 	.word	0x20008698
 800a094:	20008668 	.word	0x20008668
 800a098:	2000867c 	.word	0x2000867c
 800a09c:	20008690 	.word	0x20008690
 800a0a0:	20008694 	.word	0x20008694
 800a0a4:	20008744 	.word	0x20008744
 800a0a8:	200086a4 	.word	0x200086a4
 800a0ac:	080192dc 	.word	0x080192dc

0800a0b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3b04      	subs	r3, #4
 800a0c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a0c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3b04      	subs	r3, #4
 800a0ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	f023 0201 	bic.w	r2, r3, #1
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0e0:	4a0c      	ldr	r2, [pc, #48]	@ (800a114 <pxPortInitialiseStack+0x64>)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3b14      	subs	r3, #20
 800a0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3b04      	subs	r3, #4
 800a0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f06f 0202 	mvn.w	r2, #2
 800a0fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3b20      	subs	r3, #32
 800a104:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a106:	68fb      	ldr	r3, [r7, #12]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	0800a119 	.word	0x0800a119

0800a118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a122:	4b13      	ldr	r3, [pc, #76]	@ (800a170 <prvTaskExitError+0x58>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a12a:	d00b      	beq.n	800a144 <prvTaskExitError+0x2c>
	__asm volatile
 800a12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	60fb      	str	r3, [r7, #12]
}
 800a13e:	bf00      	nop
 800a140:	bf00      	nop
 800a142:	e7fd      	b.n	800a140 <prvTaskExitError+0x28>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	60bb      	str	r3, [r7, #8]
}
 800a156:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a158:	bf00      	nop
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d0fc      	beq.n	800a15a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a160:	bf00      	nop
 800a162:	bf00      	nop
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	20000028 	.word	0x20000028
	...

0800a180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a180:	4b07      	ldr	r3, [pc, #28]	@ (800a1a0 <pxCurrentTCBConst2>)
 800a182:	6819      	ldr	r1, [r3, #0]
 800a184:	6808      	ldr	r0, [r1, #0]
 800a186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18a:	f380 8809 	msr	PSP, r0
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f04f 0000 	mov.w	r0, #0
 800a196:	f380 8811 	msr	BASEPRI, r0
 800a19a:	4770      	bx	lr
 800a19c:	f3af 8000 	nop.w

0800a1a0 <pxCurrentTCBConst2>:
 800a1a0:	20008168 	.word	0x20008168
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop

0800a1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1a8:	4808      	ldr	r0, [pc, #32]	@ (800a1cc <prvPortStartFirstTask+0x24>)
 800a1aa:	6800      	ldr	r0, [r0, #0]
 800a1ac:	6800      	ldr	r0, [r0, #0]
 800a1ae:	f380 8808 	msr	MSP, r0
 800a1b2:	f04f 0000 	mov.w	r0, #0
 800a1b6:	f380 8814 	msr	CONTROL, r0
 800a1ba:	b662      	cpsie	i
 800a1bc:	b661      	cpsie	f
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	df00      	svc	0
 800a1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1ca:	bf00      	nop
 800a1cc:	e000ed08 	.word	0xe000ed08

0800a1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a1d6:	4b47      	ldr	r3, [pc, #284]	@ (800a2f4 <xPortStartScheduler+0x124>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a47      	ldr	r2, [pc, #284]	@ (800a2f8 <xPortStartScheduler+0x128>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d10b      	bne.n	800a1f8 <xPortStartScheduler+0x28>
	__asm volatile
 800a1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	60fb      	str	r3, [r7, #12]
}
 800a1f2:	bf00      	nop
 800a1f4:	bf00      	nop
 800a1f6:	e7fd      	b.n	800a1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a1f8:	4b3e      	ldr	r3, [pc, #248]	@ (800a2f4 <xPortStartScheduler+0x124>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a3f      	ldr	r2, [pc, #252]	@ (800a2fc <xPortStartScheduler+0x12c>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d10b      	bne.n	800a21a <xPortStartScheduler+0x4a>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	613b      	str	r3, [r7, #16]
}
 800a214:	bf00      	nop
 800a216:	bf00      	nop
 800a218:	e7fd      	b.n	800a216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a21a:	4b39      	ldr	r3, [pc, #228]	@ (800a300 <xPortStartScheduler+0x130>)
 800a21c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	b2db      	uxtb	r3, r3
 800a224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	22ff      	movs	r2, #255	@ 0xff
 800a22a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	b2db      	uxtb	r3, r3
 800a232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	b2db      	uxtb	r3, r3
 800a238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	4b31      	ldr	r3, [pc, #196]	@ (800a304 <xPortStartScheduler+0x134>)
 800a240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a242:	4b31      	ldr	r3, [pc, #196]	@ (800a308 <xPortStartScheduler+0x138>)
 800a244:	2207      	movs	r2, #7
 800a246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a248:	e009      	b.n	800a25e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a24a:	4b2f      	ldr	r3, [pc, #188]	@ (800a308 <xPortStartScheduler+0x138>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3b01      	subs	r3, #1
 800a250:	4a2d      	ldr	r2, [pc, #180]	@ (800a308 <xPortStartScheduler+0x138>)
 800a252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	b2db      	uxtb	r3, r3
 800a258:	005b      	lsls	r3, r3, #1
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a25e:	78fb      	ldrb	r3, [r7, #3]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a266:	2b80      	cmp	r3, #128	@ 0x80
 800a268:	d0ef      	beq.n	800a24a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a26a:	4b27      	ldr	r3, [pc, #156]	@ (800a308 <xPortStartScheduler+0x138>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f1c3 0307 	rsb	r3, r3, #7
 800a272:	2b04      	cmp	r3, #4
 800a274:	d00b      	beq.n	800a28e <xPortStartScheduler+0xbe>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	60bb      	str	r3, [r7, #8]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a28e:	4b1e      	ldr	r3, [pc, #120]	@ (800a308 <xPortStartScheduler+0x138>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	021b      	lsls	r3, r3, #8
 800a294:	4a1c      	ldr	r2, [pc, #112]	@ (800a308 <xPortStartScheduler+0x138>)
 800a296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a298:	4b1b      	ldr	r3, [pc, #108]	@ (800a308 <xPortStartScheduler+0x138>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2a0:	4a19      	ldr	r2, [pc, #100]	@ (800a308 <xPortStartScheduler+0x138>)
 800a2a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2ac:	4b17      	ldr	r3, [pc, #92]	@ (800a30c <xPortStartScheduler+0x13c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a16      	ldr	r2, [pc, #88]	@ (800a30c <xPortStartScheduler+0x13c>)
 800a2b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a2b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2b8:	4b14      	ldr	r3, [pc, #80]	@ (800a30c <xPortStartScheduler+0x13c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a13      	ldr	r2, [pc, #76]	@ (800a30c <xPortStartScheduler+0x13c>)
 800a2be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a2c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2c4:	f000 f8da 	bl	800a47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2c8:	4b11      	ldr	r3, [pc, #68]	@ (800a310 <xPortStartScheduler+0x140>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2ce:	f000 f8f9 	bl	800a4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2d2:	4b10      	ldr	r3, [pc, #64]	@ (800a314 <xPortStartScheduler+0x144>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a0f      	ldr	r2, [pc, #60]	@ (800a314 <xPortStartScheduler+0x144>)
 800a2d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a2dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2de:	f7ff ff63 	bl	800a1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2e2:	f7ff f803 	bl	80092ec <vTaskSwitchContext>
	prvTaskExitError();
 800a2e6:	f7ff ff17 	bl	800a118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3718      	adds	r7, #24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	e000ed00 	.word	0xe000ed00
 800a2f8:	410fc271 	.word	0x410fc271
 800a2fc:	410fc270 	.word	0x410fc270
 800a300:	e000e400 	.word	0xe000e400
 800a304:	20008794 	.word	0x20008794
 800a308:	20008798 	.word	0x20008798
 800a30c:	e000ed20 	.word	0xe000ed20
 800a310:	20000028 	.word	0x20000028
 800a314:	e000ef34 	.word	0xe000ef34

0800a318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	607b      	str	r3, [r7, #4]
}
 800a330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a332:	4b10      	ldr	r3, [pc, #64]	@ (800a374 <vPortEnterCritical+0x5c>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3301      	adds	r3, #1
 800a338:	4a0e      	ldr	r2, [pc, #56]	@ (800a374 <vPortEnterCritical+0x5c>)
 800a33a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a33c:	4b0d      	ldr	r3, [pc, #52]	@ (800a374 <vPortEnterCritical+0x5c>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d110      	bne.n	800a366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a344:	4b0c      	ldr	r3, [pc, #48]	@ (800a378 <vPortEnterCritical+0x60>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00b      	beq.n	800a366 <vPortEnterCritical+0x4e>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	603b      	str	r3, [r7, #0]
}
 800a360:	bf00      	nop
 800a362:	bf00      	nop
 800a364:	e7fd      	b.n	800a362 <vPortEnterCritical+0x4a>
	}
}
 800a366:	bf00      	nop
 800a368:	370c      	adds	r7, #12
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	20000028 	.word	0x20000028
 800a378:	e000ed04 	.word	0xe000ed04

0800a37c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a382:	4b12      	ldr	r3, [pc, #72]	@ (800a3cc <vPortExitCritical+0x50>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10b      	bne.n	800a3a2 <vPortExitCritical+0x26>
	__asm volatile
 800a38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38e:	f383 8811 	msr	BASEPRI, r3
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	607b      	str	r3, [r7, #4]
}
 800a39c:	bf00      	nop
 800a39e:	bf00      	nop
 800a3a0:	e7fd      	b.n	800a39e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3cc <vPortExitCritical+0x50>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	4a08      	ldr	r2, [pc, #32]	@ (800a3cc <vPortExitCritical+0x50>)
 800a3aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3ac:	4b07      	ldr	r3, [pc, #28]	@ (800a3cc <vPortExitCritical+0x50>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d105      	bne.n	800a3c0 <vPortExitCritical+0x44>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f383 8811 	msr	BASEPRI, r3
}
 800a3be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3c0:	bf00      	nop
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	20000028 	.word	0x20000028

0800a3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3d0:	f3ef 8009 	mrs	r0, PSP
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	4b15      	ldr	r3, [pc, #84]	@ (800a430 <pxCurrentTCBConst>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	f01e 0f10 	tst.w	lr, #16
 800a3e0:	bf08      	it	eq
 800a3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ea:	6010      	str	r0, [r2, #0]
 800a3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a3f4:	f380 8811 	msr	BASEPRI, r0
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f7fe ff74 	bl	80092ec <vTaskSwitchContext>
 800a404:	f04f 0000 	mov.w	r0, #0
 800a408:	f380 8811 	msr	BASEPRI, r0
 800a40c:	bc09      	pop	{r0, r3}
 800a40e:	6819      	ldr	r1, [r3, #0]
 800a410:	6808      	ldr	r0, [r1, #0]
 800a412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a416:	f01e 0f10 	tst.w	lr, #16
 800a41a:	bf08      	it	eq
 800a41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a420:	f380 8809 	msr	PSP, r0
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	f3af 8000 	nop.w

0800a430 <pxCurrentTCBConst>:
 800a430:	20008168 	.word	0x20008168
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop

0800a438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	607b      	str	r3, [r7, #4]
}
 800a450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a452:	f7fe fe91 	bl	8009178 <xTaskIncrementTick>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d003      	beq.n	800a464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a45c:	4b06      	ldr	r3, [pc, #24]	@ (800a478 <xPortSysTickHandler+0x40>)
 800a45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	2300      	movs	r3, #0
 800a466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	f383 8811 	msr	BASEPRI, r3
}
 800a46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	e000ed04 	.word	0xe000ed04

0800a47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a47c:	b480      	push	{r7}
 800a47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a480:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b0 <vPortSetupTimerInterrupt+0x34>)
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a486:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b4 <vPortSetupTimerInterrupt+0x38>)
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a48c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b8 <vPortSetupTimerInterrupt+0x3c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a0a      	ldr	r2, [pc, #40]	@ (800a4bc <vPortSetupTimerInterrupt+0x40>)
 800a492:	fba2 2303 	umull	r2, r3, r2, r3
 800a496:	099b      	lsrs	r3, r3, #6
 800a498:	4a09      	ldr	r2, [pc, #36]	@ (800a4c0 <vPortSetupTimerInterrupt+0x44>)
 800a49a:	3b01      	subs	r3, #1
 800a49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a49e:	4b04      	ldr	r3, [pc, #16]	@ (800a4b0 <vPortSetupTimerInterrupt+0x34>)
 800a4a0:	2207      	movs	r2, #7
 800a4a2:	601a      	str	r2, [r3, #0]
}
 800a4a4:	bf00      	nop
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	e000e010 	.word	0xe000e010
 800a4b4:	e000e018 	.word	0xe000e018
 800a4b8:	2000001c 	.word	0x2000001c
 800a4bc:	10624dd3 	.word	0x10624dd3
 800a4c0:	e000e014 	.word	0xe000e014

0800a4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a4d4 <vPortEnableVFP+0x10>
 800a4c8:	6801      	ldr	r1, [r0, #0]
 800a4ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a4ce:	6001      	str	r1, [r0, #0]
 800a4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4d2:	bf00      	nop
 800a4d4:	e000ed88 	.word	0xe000ed88

0800a4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4de:	f3ef 8305 	mrs	r3, IPSR
 800a4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b0f      	cmp	r3, #15
 800a4e8:	d915      	bls.n	800a516 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4ea:	4a18      	ldr	r2, [pc, #96]	@ (800a54c <vPortValidateInterruptPriority+0x74>)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4f4:	4b16      	ldr	r3, [pc, #88]	@ (800a550 <vPortValidateInterruptPriority+0x78>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	7afa      	ldrb	r2, [r7, #11]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d20b      	bcs.n	800a516 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	607b      	str	r3, [r7, #4]
}
 800a510:	bf00      	nop
 800a512:	bf00      	nop
 800a514:	e7fd      	b.n	800a512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a516:	4b0f      	ldr	r3, [pc, #60]	@ (800a554 <vPortValidateInterruptPriority+0x7c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a51e:	4b0e      	ldr	r3, [pc, #56]	@ (800a558 <vPortValidateInterruptPriority+0x80>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	429a      	cmp	r2, r3
 800a524:	d90b      	bls.n	800a53e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	603b      	str	r3, [r7, #0]
}
 800a538:	bf00      	nop
 800a53a:	bf00      	nop
 800a53c:	e7fd      	b.n	800a53a <vPortValidateInterruptPriority+0x62>
	}
 800a53e:	bf00      	nop
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	e000e3f0 	.word	0xe000e3f0
 800a550:	20008794 	.word	0x20008794
 800a554:	e000ed0c 	.word	0xe000ed0c
 800a558:	20008798 	.word	0x20008798

0800a55c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08a      	sub	sp, #40	@ 0x28
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a564:	2300      	movs	r3, #0
 800a566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a568:	f7fe fd4a 	bl	8009000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a56c:	4b5c      	ldr	r3, [pc, #368]	@ (800a6e0 <pvPortMalloc+0x184>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a574:	f000 f924 	bl	800a7c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a578:	4b5a      	ldr	r3, [pc, #360]	@ (800a6e4 <pvPortMalloc+0x188>)
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4013      	ands	r3, r2
 800a580:	2b00      	cmp	r3, #0
 800a582:	f040 8095 	bne.w	800a6b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d01e      	beq.n	800a5ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a58c:	2208      	movs	r2, #8
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4413      	add	r3, r2
 800a592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f003 0307 	and.w	r3, r3, #7
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d015      	beq.n	800a5ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f023 0307 	bic.w	r3, r3, #7
 800a5a4:	3308      	adds	r3, #8
 800a5a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f003 0307 	and.w	r3, r3, #7
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00b      	beq.n	800a5ca <pvPortMalloc+0x6e>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	617b      	str	r3, [r7, #20]
}
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop
 800a5c8:	e7fd      	b.n	800a5c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d06f      	beq.n	800a6b0 <pvPortMalloc+0x154>
 800a5d0:	4b45      	ldr	r3, [pc, #276]	@ (800a6e8 <pvPortMalloc+0x18c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d86a      	bhi.n	800a6b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5da:	4b44      	ldr	r3, [pc, #272]	@ (800a6ec <pvPortMalloc+0x190>)
 800a5dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5de:	4b43      	ldr	r3, [pc, #268]	@ (800a6ec <pvPortMalloc+0x190>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5e4:	e004      	b.n	800a5f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d903      	bls.n	800a602 <pvPortMalloc+0xa6>
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1f1      	bne.n	800a5e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a602:	4b37      	ldr	r3, [pc, #220]	@ (800a6e0 <pvPortMalloc+0x184>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a608:	429a      	cmp	r2, r3
 800a60a:	d051      	beq.n	800a6b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a60c:	6a3b      	ldr	r3, [r7, #32]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2208      	movs	r2, #8
 800a612:	4413      	add	r3, r2
 800a614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	6a3b      	ldr	r3, [r7, #32]
 800a61c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a620:	685a      	ldr	r2, [r3, #4]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	1ad2      	subs	r2, r2, r3
 800a626:	2308      	movs	r3, #8
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d920      	bls.n	800a670 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4413      	add	r3, r2
 800a634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	f003 0307 	and.w	r3, r3, #7
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00b      	beq.n	800a658 <pvPortMalloc+0xfc>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	613b      	str	r3, [r7, #16]
}
 800a652:	bf00      	nop
 800a654:	bf00      	nop
 800a656:	e7fd      	b.n	800a654 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	1ad2      	subs	r2, r2, r3
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a66a:	69b8      	ldr	r0, [r7, #24]
 800a66c:	f000 f90a 	bl	800a884 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a670:	4b1d      	ldr	r3, [pc, #116]	@ (800a6e8 <pvPortMalloc+0x18c>)
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	4a1b      	ldr	r2, [pc, #108]	@ (800a6e8 <pvPortMalloc+0x18c>)
 800a67c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a67e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6e8 <pvPortMalloc+0x18c>)
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	4b1b      	ldr	r3, [pc, #108]	@ (800a6f0 <pvPortMalloc+0x194>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	429a      	cmp	r2, r3
 800a688:	d203      	bcs.n	800a692 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a68a:	4b17      	ldr	r3, [pc, #92]	@ (800a6e8 <pvPortMalloc+0x18c>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a18      	ldr	r2, [pc, #96]	@ (800a6f0 <pvPortMalloc+0x194>)
 800a690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	4b13      	ldr	r3, [pc, #76]	@ (800a6e4 <pvPortMalloc+0x188>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	431a      	orrs	r2, r3
 800a69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6a6:	4b13      	ldr	r3, [pc, #76]	@ (800a6f4 <pvPortMalloc+0x198>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	4a11      	ldr	r2, [pc, #68]	@ (800a6f4 <pvPortMalloc+0x198>)
 800a6ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6b0:	f7fe fcb4 	bl	800901c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	f003 0307 	and.w	r3, r3, #7
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00b      	beq.n	800a6d6 <pvPortMalloc+0x17a>
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	60fb      	str	r3, [r7, #12]
}
 800a6d0:	bf00      	nop
 800a6d2:	bf00      	nop
 800a6d4:	e7fd      	b.n	800a6d2 <pvPortMalloc+0x176>
	return pvReturn;
 800a6d6:	69fb      	ldr	r3, [r7, #28]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3728      	adds	r7, #40	@ 0x28
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	2000c3a4 	.word	0x2000c3a4
 800a6e4:	2000c3b8 	.word	0x2000c3b8
 800a6e8:	2000c3a8 	.word	0x2000c3a8
 800a6ec:	2000c39c 	.word	0x2000c39c
 800a6f0:	2000c3ac 	.word	0x2000c3ac
 800a6f4:	2000c3b0 	.word	0x2000c3b0

0800a6f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d04f      	beq.n	800a7aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a70a:	2308      	movs	r3, #8
 800a70c:	425b      	negs	r3, r3
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	4413      	add	r3, r2
 800a712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	4b25      	ldr	r3, [pc, #148]	@ (800a7b4 <vPortFree+0xbc>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4013      	ands	r3, r2
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10b      	bne.n	800a73e <vPortFree+0x46>
	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	60fb      	str	r3, [r7, #12]
}
 800a738:	bf00      	nop
 800a73a:	bf00      	nop
 800a73c:	e7fd      	b.n	800a73a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00b      	beq.n	800a75e <vPortFree+0x66>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	60bb      	str	r3, [r7, #8]
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	e7fd      	b.n	800a75a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	4b14      	ldr	r3, [pc, #80]	@ (800a7b4 <vPortFree+0xbc>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4013      	ands	r3, r2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d01e      	beq.n	800a7aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d11a      	bne.n	800a7aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	685a      	ldr	r2, [r3, #4]
 800a778:	4b0e      	ldr	r3, [pc, #56]	@ (800a7b4 <vPortFree+0xbc>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	43db      	mvns	r3, r3
 800a77e:	401a      	ands	r2, r3
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a784:	f7fe fc3c 	bl	8009000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b8 <vPortFree+0xc0>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4413      	add	r3, r2
 800a792:	4a09      	ldr	r2, [pc, #36]	@ (800a7b8 <vPortFree+0xc0>)
 800a794:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a796:	6938      	ldr	r0, [r7, #16]
 800a798:	f000 f874 	bl	800a884 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a79c:	4b07      	ldr	r3, [pc, #28]	@ (800a7bc <vPortFree+0xc4>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	4a06      	ldr	r2, [pc, #24]	@ (800a7bc <vPortFree+0xc4>)
 800a7a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7a6:	f7fe fc39 	bl	800901c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7aa:	bf00      	nop
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	2000c3b8 	.word	0x2000c3b8
 800a7b8:	2000c3a8 	.word	0x2000c3a8
 800a7bc:	2000c3b4 	.word	0x2000c3b4

0800a7c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a7ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7cc:	4b27      	ldr	r3, [pc, #156]	@ (800a86c <prvHeapInit+0xac>)
 800a7ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f003 0307 	and.w	r3, r3, #7
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00c      	beq.n	800a7f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3307      	adds	r3, #7
 800a7de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f023 0307 	bic.w	r3, r3, #7
 800a7e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a86c <prvHeapInit+0xac>)
 800a7f0:	4413      	add	r3, r2
 800a7f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a870 <prvHeapInit+0xb0>)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a870 <prvHeapInit+0xb0>)
 800a800:	2200      	movs	r2, #0
 800a802:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	4413      	add	r3, r2
 800a80a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a80c:	2208      	movs	r2, #8
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	1a9b      	subs	r3, r3, r2
 800a812:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f023 0307 	bic.w	r3, r3, #7
 800a81a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4a15      	ldr	r2, [pc, #84]	@ (800a874 <prvHeapInit+0xb4>)
 800a820:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a822:	4b14      	ldr	r3, [pc, #80]	@ (800a874 <prvHeapInit+0xb4>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2200      	movs	r2, #0
 800a828:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a82a:	4b12      	ldr	r3, [pc, #72]	@ (800a874 <prvHeapInit+0xb4>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	1ad2      	subs	r2, r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a840:	4b0c      	ldr	r3, [pc, #48]	@ (800a874 <prvHeapInit+0xb4>)
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	4a0a      	ldr	r2, [pc, #40]	@ (800a878 <prvHeapInit+0xb8>)
 800a84e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	4a09      	ldr	r2, [pc, #36]	@ (800a87c <prvHeapInit+0xbc>)
 800a856:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a858:	4b09      	ldr	r3, [pc, #36]	@ (800a880 <prvHeapInit+0xc0>)
 800a85a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a85e:	601a      	str	r2, [r3, #0]
}
 800a860:	bf00      	nop
 800a862:	3714      	adds	r7, #20
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	2000879c 	.word	0x2000879c
 800a870:	2000c39c 	.word	0x2000c39c
 800a874:	2000c3a4 	.word	0x2000c3a4
 800a878:	2000c3ac 	.word	0x2000c3ac
 800a87c:	2000c3a8 	.word	0x2000c3a8
 800a880:	2000c3b8 	.word	0x2000c3b8

0800a884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a88c:	4b28      	ldr	r3, [pc, #160]	@ (800a930 <prvInsertBlockIntoFreeList+0xac>)
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	e002      	b.n	800a898 <prvInsertBlockIntoFreeList+0x14>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d8f7      	bhi.n	800a892 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d108      	bne.n	800a8c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	441a      	add	r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	441a      	add	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d118      	bne.n	800a90c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	4b15      	ldr	r3, [pc, #84]	@ (800a934 <prvInsertBlockIntoFreeList+0xb0>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d00d      	beq.n	800a902 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	441a      	add	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	e008      	b.n	800a914 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a902:	4b0c      	ldr	r3, [pc, #48]	@ (800a934 <prvInsertBlockIntoFreeList+0xb0>)
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	e003      	b.n	800a914 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d002      	beq.n	800a922 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a922:	bf00      	nop
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	2000c39c 	.word	0x2000c39c
 800a934:	2000c3a4 	.word	0x2000c3a4

0800a938 <rcl_get_zero_initialized_context>:
 800a938:	4a03      	ldr	r2, [pc, #12]	@ (800a948 <rcl_get_zero_initialized_context+0x10>)
 800a93a:	4603      	mov	r3, r0
 800a93c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a940:	e883 0003 	stmia.w	r3, {r0, r1}
 800a944:	4618      	mov	r0, r3
 800a946:	4770      	bx	lr
 800a948:	0801934c 	.word	0x0801934c

0800a94c <rcl_context_is_valid>:
 800a94c:	b118      	cbz	r0, 800a956 <rcl_context_is_valid+0xa>
 800a94e:	6840      	ldr	r0, [r0, #4]
 800a950:	3800      	subs	r0, #0
 800a952:	bf18      	it	ne
 800a954:	2001      	movne	r0, #1
 800a956:	4770      	bx	lr

0800a958 <rcl_context_get_rmw_context>:
 800a958:	b110      	cbz	r0, 800a960 <rcl_context_get_rmw_context+0x8>
 800a95a:	6800      	ldr	r0, [r0, #0]
 800a95c:	b100      	cbz	r0, 800a960 <rcl_context_get_rmw_context+0x8>
 800a95e:	3028      	adds	r0, #40	@ 0x28
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop

0800a964 <__cleanup_context>:
 800a964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a968:	4606      	mov	r6, r0
 800a96a:	6800      	ldr	r0, [r0, #0]
 800a96c:	2300      	movs	r3, #0
 800a96e:	6073      	str	r3, [r6, #4]
 800a970:	2800      	cmp	r0, #0
 800a972:	d049      	beq.n	800aa08 <__cleanup_context+0xa4>
 800a974:	6947      	ldr	r7, [r0, #20]
 800a976:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800a97a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800a97e:	b137      	cbz	r7, 800a98e <__cleanup_context+0x2a>
 800a980:	3014      	adds	r0, #20
 800a982:	f000 f8cb 	bl	800ab1c <rcl_init_options_fini>
 800a986:	4607      	mov	r7, r0
 800a988:	2800      	cmp	r0, #0
 800a98a:	d144      	bne.n	800aa16 <__cleanup_context+0xb2>
 800a98c:	6830      	ldr	r0, [r6, #0]
 800a98e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a990:	b143      	cbz	r3, 800a9a4 <__cleanup_context+0x40>
 800a992:	3028      	adds	r0, #40	@ 0x28
 800a994:	f002 ff3a 	bl	800d80c <rmw_context_fini>
 800a998:	b118      	cbz	r0, 800a9a2 <__cleanup_context+0x3e>
 800a99a:	2f00      	cmp	r7, #0
 800a99c:	d03e      	beq.n	800aa1c <__cleanup_context+0xb8>
 800a99e:	f002 f94b 	bl	800cc38 <rcutils_reset_error>
 800a9a2:	6830      	ldr	r0, [r6, #0]
 800a9a4:	6a03      	ldr	r3, [r0, #32]
 800a9a6:	b1db      	cbz	r3, 800a9e0 <__cleanup_context+0x7c>
 800a9a8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800a9ac:	2a01      	cmp	r2, #1
 800a9ae:	f17c 0100 	sbcs.w	r1, ip, #0
 800a9b2:	db11      	blt.n	800a9d8 <__cleanup_context+0x74>
 800a9b4:	2400      	movs	r4, #0
 800a9b6:	4625      	mov	r5, r4
 800a9b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a9bc:	4649      	mov	r1, r9
 800a9be:	b1b8      	cbz	r0, 800a9f0 <__cleanup_context+0x8c>
 800a9c0:	47c0      	blx	r8
 800a9c2:	6833      	ldr	r3, [r6, #0]
 800a9c4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800a9c8:	3401      	adds	r4, #1
 800a9ca:	f145 0500 	adc.w	r5, r5, #0
 800a9ce:	4294      	cmp	r4, r2
 800a9d0:	eb75 010c 	sbcs.w	r1, r5, ip
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	dbef      	blt.n	800a9b8 <__cleanup_context+0x54>
 800a9d8:	4618      	mov	r0, r3
 800a9da:	4649      	mov	r1, r9
 800a9dc:	47c0      	blx	r8
 800a9de:	6830      	ldr	r0, [r6, #0]
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	47c0      	blx	r8
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e9c6 3300 	strd	r3, r3, [r6]
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9f0:	3401      	adds	r4, #1
 800a9f2:	f145 0500 	adc.w	r5, r5, #0
 800a9f6:	4294      	cmp	r4, r2
 800a9f8:	eb75 010c 	sbcs.w	r1, r5, ip
 800a9fc:	dbdc      	blt.n	800a9b8 <__cleanup_context+0x54>
 800a9fe:	4618      	mov	r0, r3
 800aa00:	4649      	mov	r1, r9
 800aa02:	47c0      	blx	r8
 800aa04:	6830      	ldr	r0, [r6, #0]
 800aa06:	e7eb      	b.n	800a9e0 <__cleanup_context+0x7c>
 800aa08:	4607      	mov	r7, r0
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e9c6 3300 	strd	r3, r3, [r6]
 800aa10:	4638      	mov	r0, r7
 800aa12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa16:	f002 f90f 	bl	800cc38 <rcutils_reset_error>
 800aa1a:	e7b7      	b.n	800a98c <__cleanup_context+0x28>
 800aa1c:	f008 fee6 	bl	80137ec <rcl_convert_rmw_ret_to_rcl_ret>
 800aa20:	4607      	mov	r7, r0
 800aa22:	e7bc      	b.n	800a99e <__cleanup_context+0x3a>

0800aa24 <rcl_context_fini>:
 800aa24:	b178      	cbz	r0, 800aa46 <rcl_context_fini+0x22>
 800aa26:	b510      	push	{r4, lr}
 800aa28:	4604      	mov	r4, r0
 800aa2a:	6800      	ldr	r0, [r0, #0]
 800aa2c:	b150      	cbz	r0, 800aa44 <rcl_context_fini+0x20>
 800aa2e:	6863      	ldr	r3, [r4, #4]
 800aa30:	b93b      	cbnz	r3, 800aa42 <rcl_context_fini+0x1e>
 800aa32:	f002 f821 	bl	800ca78 <rcutils_allocator_is_valid>
 800aa36:	b120      	cbz	r0, 800aa42 <rcl_context_fini+0x1e>
 800aa38:	4620      	mov	r0, r4
 800aa3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa3e:	f7ff bf91 	b.w	800a964 <__cleanup_context>
 800aa42:	200b      	movs	r0, #11
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	200b      	movs	r0, #11
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop

0800aa4c <rcl_get_zero_initialized_init_options>:
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	4770      	bx	lr

0800aa50 <rcl_init_options_init>:
 800aa50:	b084      	sub	sp, #16
 800aa52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa54:	b097      	sub	sp, #92	@ 0x5c
 800aa56:	ae1d      	add	r6, sp, #116	@ 0x74
 800aa58:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d058      	beq.n	800ab12 <rcl_init_options_init+0xc2>
 800aa60:	6803      	ldr	r3, [r0, #0]
 800aa62:	4605      	mov	r5, r0
 800aa64:	b133      	cbz	r3, 800aa74 <rcl_init_options_init+0x24>
 800aa66:	2464      	movs	r4, #100	@ 0x64
 800aa68:	4620      	mov	r0, r4
 800aa6a:	b017      	add	sp, #92	@ 0x5c
 800aa6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800aa70:	b004      	add	sp, #16
 800aa72:	4770      	bx	lr
 800aa74:	4630      	mov	r0, r6
 800aa76:	f001 ffff 	bl	800ca78 <rcutils_allocator_is_valid>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d049      	beq.n	800ab12 <rcl_init_options_init+0xc2>
 800aa7e:	46b4      	mov	ip, r6
 800aa80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aa84:	ac11      	add	r4, sp, #68	@ 0x44
 800aa86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa88:	f8dc 3000 	ldr.w	r3, [ip]
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800aa90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aa92:	2050      	movs	r0, #80	@ 0x50
 800aa94:	4798      	blx	r3
 800aa96:	4604      	mov	r4, r0
 800aa98:	6028      	str	r0, [r5, #0]
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d03b      	beq.n	800ab16 <rcl_init_options_init+0xc6>
 800aa9e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800aaa2:	4686      	mov	lr, r0
 800aaa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aaa8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aaac:	f8dc 3000 	ldr.w	r3, [ip]
 800aab0:	f8ce 3000 	str.w	r3, [lr]
 800aab4:	a802      	add	r0, sp, #8
 800aab6:	f002 fa83 	bl	800cfc0 <rmw_get_zero_initialized_init_options>
 800aaba:	f10d 0e08 	add.w	lr, sp, #8
 800aabe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aac2:	f104 0c18 	add.w	ip, r4, #24
 800aac6:	682f      	ldr	r7, [r5, #0]
 800aac8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aacc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aad0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aad4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aad8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aadc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800aae0:	ac20      	add	r4, sp, #128	@ 0x80
 800aae2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800aae6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aaea:	e88d 0003 	stmia.w	sp, {r0, r1}
 800aaee:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800aaf2:	f107 0018 	add.w	r0, r7, #24
 800aaf6:	f002 fbcd 	bl	800d294 <rmw_init_options_init>
 800aafa:	4604      	mov	r4, r0
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d0b3      	beq.n	800aa68 <rcl_init_options_init+0x18>
 800ab00:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800ab02:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ab04:	6828      	ldr	r0, [r5, #0]
 800ab06:	4798      	blx	r3
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f008 fe6f 	bl	80137ec <rcl_convert_rmw_ret_to_rcl_ret>
 800ab0e:	4604      	mov	r4, r0
 800ab10:	e7aa      	b.n	800aa68 <rcl_init_options_init+0x18>
 800ab12:	240b      	movs	r4, #11
 800ab14:	e7a8      	b.n	800aa68 <rcl_init_options_init+0x18>
 800ab16:	240a      	movs	r4, #10
 800ab18:	e7a6      	b.n	800aa68 <rcl_init_options_init+0x18>
 800ab1a:	bf00      	nop

0800ab1c <rcl_init_options_fini>:
 800ab1c:	b530      	push	{r4, r5, lr}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	b1f0      	cbz	r0, 800ab60 <rcl_init_options_fini+0x44>
 800ab22:	6803      	ldr	r3, [r0, #0]
 800ab24:	4604      	mov	r4, r0
 800ab26:	b1db      	cbz	r3, 800ab60 <rcl_init_options_fini+0x44>
 800ab28:	469c      	mov	ip, r3
 800ab2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ab2e:	f10d 0e04 	add.w	lr, sp, #4
 800ab32:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ab36:	f8dc 3000 	ldr.w	r3, [ip]
 800ab3a:	f8ce 3000 	str.w	r3, [lr]
 800ab3e:	a801      	add	r0, sp, #4
 800ab40:	f001 ff9a 	bl	800ca78 <rcutils_allocator_is_valid>
 800ab44:	b160      	cbz	r0, 800ab60 <rcl_init_options_fini+0x44>
 800ab46:	6820      	ldr	r0, [r4, #0]
 800ab48:	3018      	adds	r0, #24
 800ab4a:	f002 fc79 	bl	800d440 <rmw_init_options_fini>
 800ab4e:	4605      	mov	r5, r0
 800ab50:	b950      	cbnz	r0, 800ab68 <rcl_init_options_fini+0x4c>
 800ab52:	6820      	ldr	r0, [r4, #0]
 800ab54:	9b02      	ldr	r3, [sp, #8]
 800ab56:	9905      	ldr	r1, [sp, #20]
 800ab58:	4798      	blx	r3
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	b007      	add	sp, #28
 800ab5e:	bd30      	pop	{r4, r5, pc}
 800ab60:	250b      	movs	r5, #11
 800ab62:	4628      	mov	r0, r5
 800ab64:	b007      	add	sp, #28
 800ab66:	bd30      	pop	{r4, r5, pc}
 800ab68:	f008 fe40 	bl	80137ec <rcl_convert_rmw_ret_to_rcl_ret>
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	e7f8      	b.n	800ab62 <rcl_init_options_fini+0x46>

0800ab70 <rcl_init_options_copy>:
 800ab70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab74:	b094      	sub	sp, #80	@ 0x50
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d058      	beq.n	800ac2c <rcl_init_options_copy+0xbc>
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	6800      	ldr	r0, [r0, #0]
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d054      	beq.n	800ac2c <rcl_init_options_copy+0xbc>
 800ab82:	460e      	mov	r6, r1
 800ab84:	f001 ff78 	bl	800ca78 <rcutils_allocator_is_valid>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d04f      	beq.n	800ac2c <rcl_init_options_copy+0xbc>
 800ab8c:	2e00      	cmp	r6, #0
 800ab8e:	d04d      	beq.n	800ac2c <rcl_init_options_copy+0xbc>
 800ab90:	6833      	ldr	r3, [r6, #0]
 800ab92:	b123      	cbz	r3, 800ab9e <rcl_init_options_copy+0x2e>
 800ab94:	2464      	movs	r4, #100	@ 0x64
 800ab96:	4620      	mov	r0, r4
 800ab98:	b014      	add	sp, #80	@ 0x50
 800ab9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab9e:	6827      	ldr	r7, [r4, #0]
 800aba0:	46bc      	mov	ip, r7
 800aba2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aba6:	ad0f      	add	r5, sp, #60	@ 0x3c
 800aba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800abaa:	f8dc 3000 	ldr.w	r3, [ip]
 800abae:	f8d7 8000 	ldr.w	r8, [r7]
 800abb2:	602b      	str	r3, [r5, #0]
 800abb4:	4619      	mov	r1, r3
 800abb6:	2050      	movs	r0, #80	@ 0x50
 800abb8:	47c0      	blx	r8
 800abba:	4605      	mov	r5, r0
 800abbc:	6030      	str	r0, [r6, #0]
 800abbe:	b3d0      	cbz	r0, 800ac36 <rcl_init_options_copy+0xc6>
 800abc0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800abc4:	4686      	mov	lr, r0
 800abc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800abca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800abce:	f8dc 3000 	ldr.w	r3, [ip]
 800abd2:	f8ce 3000 	str.w	r3, [lr]
 800abd6:	4668      	mov	r0, sp
 800abd8:	f002 f9f2 	bl	800cfc0 <rmw_get_zero_initialized_init_options>
 800abdc:	46ee      	mov	lr, sp
 800abde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800abe2:	f105 0c18 	add.w	ip, r5, #24
 800abe6:	6824      	ldr	r4, [r4, #0]
 800abe8:	6835      	ldr	r5, [r6, #0]
 800abea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800abee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800abf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800abf6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800abfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800abfe:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ac02:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ac06:	f104 0018 	add.w	r0, r4, #24
 800ac0a:	f105 0118 	add.w	r1, r5, #24
 800ac0e:	f002 fba3 	bl	800d358 <rmw_init_options_copy>
 800ac12:	4604      	mov	r4, r0
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d0be      	beq.n	800ab96 <rcl_init_options_copy+0x26>
 800ac18:	f001 fff8 	bl	800cc0c <rcutils_get_error_string>
 800ac1c:	f002 f80c 	bl	800cc38 <rcutils_reset_error>
 800ac20:	4630      	mov	r0, r6
 800ac22:	f7ff ff7b 	bl	800ab1c <rcl_init_options_fini>
 800ac26:	b140      	cbz	r0, 800ac3a <rcl_init_options_copy+0xca>
 800ac28:	4604      	mov	r4, r0
 800ac2a:	e7b4      	b.n	800ab96 <rcl_init_options_copy+0x26>
 800ac2c:	240b      	movs	r4, #11
 800ac2e:	4620      	mov	r0, r4
 800ac30:	b014      	add	sp, #80	@ 0x50
 800ac32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac36:	240a      	movs	r4, #10
 800ac38:	e7ad      	b.n	800ab96 <rcl_init_options_copy+0x26>
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	b014      	add	sp, #80	@ 0x50
 800ac3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac42:	f008 bdd3 	b.w	80137ec <rcl_convert_rmw_ret_to_rcl_ret>
 800ac46:	bf00      	nop

0800ac48 <rcl_init_options_set_domain_id>:
 800ac48:	b120      	cbz	r0, 800ac54 <rcl_init_options_set_domain_id+0xc>
 800ac4a:	6803      	ldr	r3, [r0, #0]
 800ac4c:	b113      	cbz	r3, 800ac54 <rcl_init_options_set_domain_id+0xc>
 800ac4e:	6259      	str	r1, [r3, #36]	@ 0x24
 800ac50:	2000      	movs	r0, #0
 800ac52:	4770      	bx	lr
 800ac54:	200b      	movs	r0, #11
 800ac56:	4770      	bx	lr

0800ac58 <rcl_get_zero_initialized_node>:
 800ac58:	4a03      	ldr	r2, [pc, #12]	@ (800ac68 <rcl_get_zero_initialized_node+0x10>)
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ac60:	e883 0003 	stmia.w	r3, {r0, r1}
 800ac64:	4618      	mov	r0, r3
 800ac66:	4770      	bx	lr
 800ac68:	08019858 	.word	0x08019858

0800ac6c <rcl_node_init>:
 800ac6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac70:	b0a9      	sub	sp, #164	@ 0xa4
 800ac72:	4604      	mov	r4, r0
 800ac74:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800ac78:	a823      	add	r0, sp, #140	@ 0x8c
 800ac7a:	460e      	mov	r6, r1
 800ac7c:	4615      	mov	r5, r2
 800ac7e:	461f      	mov	r7, r3
 800ac80:	f008 fea4 	bl	80139cc <rcl_guard_condition_get_default_options>
 800ac84:	f1b8 0f00 	cmp.w	r8, #0
 800ac88:	f000 80e6 	beq.w	800ae58 <rcl_node_init+0x1ec>
 800ac8c:	4640      	mov	r0, r8
 800ac8e:	f001 fef3 	bl	800ca78 <rcutils_allocator_is_valid>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	f000 80e0 	beq.w	800ae58 <rcl_node_init+0x1ec>
 800ac98:	2e00      	cmp	r6, #0
 800ac9a:	f000 80dd 	beq.w	800ae58 <rcl_node_init+0x1ec>
 800ac9e:	2d00      	cmp	r5, #0
 800aca0:	f000 80da 	beq.w	800ae58 <rcl_node_init+0x1ec>
 800aca4:	2c00      	cmp	r4, #0
 800aca6:	f000 80d7 	beq.w	800ae58 <rcl_node_init+0x1ec>
 800acaa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800acae:	f1b9 0f00 	cmp.w	r9, #0
 800acb2:	f040 80fd 	bne.w	800aeb0 <rcl_node_init+0x244>
 800acb6:	2f00      	cmp	r7, #0
 800acb8:	f000 80ce 	beq.w	800ae58 <rcl_node_init+0x1ec>
 800acbc:	4638      	mov	r0, r7
 800acbe:	f7ff fe45 	bl	800a94c <rcl_context_is_valid>
 800acc2:	4682      	mov	sl, r0
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f000 80cd 	beq.w	800ae64 <rcl_node_init+0x1f8>
 800acca:	464a      	mov	r2, r9
 800accc:	a922      	add	r1, sp, #136	@ 0x88
 800acce:	4630      	mov	r0, r6
 800acd0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800acd4:	f002 fa20 	bl	800d118 <rmw_validate_node_name>
 800acd8:	4681      	mov	r9, r0
 800acda:	2800      	cmp	r0, #0
 800acdc:	f040 80be 	bne.w	800ae5c <rcl_node_init+0x1f0>
 800ace0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ace2:	2800      	cmp	r0, #0
 800ace4:	f040 80f0 	bne.w	800aec8 <rcl_node_init+0x25c>
 800ace8:	4628      	mov	r0, r5
 800acea:	f7f5 fa9b 	bl	8000224 <strlen>
 800acee:	2800      	cmp	r0, #0
 800acf0:	f040 80bb 	bne.w	800ae6a <rcl_node_init+0x1fe>
 800acf4:	4d7c      	ldr	r5, [pc, #496]	@ (800aee8 <rcl_node_init+0x27c>)
 800acf6:	a922      	add	r1, sp, #136	@ 0x88
 800acf8:	2200      	movs	r2, #0
 800acfa:	4628      	mov	r0, r5
 800acfc:	f002 f9ee 	bl	800d0dc <rmw_validate_namespace>
 800ad00:	4681      	mov	r9, r0
 800ad02:	2800      	cmp	r0, #0
 800ad04:	f040 80aa 	bne.w	800ae5c <rcl_node_init+0x1f0>
 800ad08:	4682      	mov	sl, r0
 800ad0a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	f040 80e0 	bne.w	800aed2 <rcl_node_init+0x266>
 800ad12:	f8d8 3000 	ldr.w	r3, [r8]
 800ad16:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ad1a:	2078      	movs	r0, #120	@ 0x78
 800ad1c:	4798      	blx	r3
 800ad1e:	4681      	mov	r9, r0
 800ad20:	6060      	str	r0, [r4, #4]
 800ad22:	2800      	cmp	r0, #0
 800ad24:	f000 80ca 	beq.w	800aebc <rcl_node_init+0x250>
 800ad28:	2200      	movs	r2, #0
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800ad30:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800ad34:	a808      	add	r0, sp, #32
 800ad36:	f000 f939 	bl	800afac <rcl_node_get_default_options>
 800ad3a:	a908      	add	r1, sp, #32
 800ad3c:	4648      	mov	r0, r9
 800ad3e:	2268      	movs	r2, #104	@ 0x68
 800ad40:	f00d fba3 	bl	801848a <memcpy>
 800ad44:	6861      	ldr	r1, [r4, #4]
 800ad46:	6027      	str	r7, [r4, #0]
 800ad48:	4640      	mov	r0, r8
 800ad4a:	f000 f93d 	bl	800afc8 <rcl_node_options_copy>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d158      	bne.n	800ae04 <rcl_node_init+0x198>
 800ad52:	4628      	mov	r0, r5
 800ad54:	f7f5 fa66 	bl	8000224 <strlen>
 800ad58:	4428      	add	r0, r5
 800ad5a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800ad5e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800ad62:	2b2f      	cmp	r3, #47	@ 0x2f
 800ad64:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	bf0c      	ite	eq
 800ad6c:	4b5f      	ldreq	r3, [pc, #380]	@ (800aeec <rcl_node_init+0x280>)
 800ad6e:	4b60      	ldrne	r3, [pc, #384]	@ (800aef0 <rcl_node_init+0x284>)
 800ad70:	9302      	str	r3, [sp, #8]
 800ad72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ad76:	9301      	str	r3, [sp, #4]
 800ad78:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ad7c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ad80:	f001 ff76 	bl	800cc70 <rcutils_format_string_limit>
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800ad8a:	6818      	ldr	r0, [r3, #0]
 800ad8c:	4631      	mov	r1, r6
 800ad8e:	3028      	adds	r0, #40	@ 0x28
 800ad90:	462a      	mov	r2, r5
 800ad92:	6866      	ldr	r6, [r4, #4]
 800ad94:	f002 fde6 	bl	800d964 <rmw_create_node>
 800ad98:	6863      	ldr	r3, [r4, #4]
 800ad9a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800ad9c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d032      	beq.n	800ae08 <rcl_node_init+0x19c>
 800ada2:	f002 fe73 	bl	800da8c <rmw_node_get_graph_guard_condition>
 800ada6:	4681      	mov	r9, r0
 800ada8:	b360      	cbz	r0, 800ae04 <rcl_node_init+0x198>
 800adaa:	f8d8 3000 	ldr.w	r3, [r8]
 800adae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800adb2:	6866      	ldr	r6, [r4, #4]
 800adb4:	2008      	movs	r0, #8
 800adb6:	4798      	blx	r3
 800adb8:	6863      	ldr	r3, [r4, #4]
 800adba:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800adbc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800adc0:	f1bb 0f00 	cmp.w	fp, #0
 800adc4:	d020      	beq.n	800ae08 <rcl_node_init+0x19c>
 800adc6:	a806      	add	r0, sp, #24
 800adc8:	f008 fd24 	bl	8013814 <rcl_get_zero_initialized_guard_condition>
 800adcc:	a806      	add	r0, sp, #24
 800adce:	c803      	ldmia	r0, {r0, r1}
 800add0:	6863      	ldr	r3, [r4, #4]
 800add2:	46c4      	mov	ip, r8
 800add4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800add8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800addc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ade0:	ae23      	add	r6, sp, #140	@ 0x8c
 800ade2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ade4:	f8dc 3000 	ldr.w	r3, [ip]
 800ade8:	6033      	str	r3, [r6, #0]
 800adea:	ab28      	add	r3, sp, #160	@ 0xa0
 800adec:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800adf0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800adf4:	4649      	mov	r1, r9
 800adf6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800adf8:	463a      	mov	r2, r7
 800adfa:	4670      	mov	r0, lr
 800adfc:	f008 fd60 	bl	80138c0 <rcl_guard_condition_init_from_rmw>
 800ae00:	4681      	mov	r9, r0
 800ae02:	b328      	cbz	r0, 800ae50 <rcl_node_init+0x1e4>
 800ae04:	6863      	ldr	r3, [r4, #4]
 800ae06:	b1f3      	cbz	r3, 800ae46 <rcl_node_init+0x1da>
 800ae08:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ae0a:	b128      	cbz	r0, 800ae18 <rcl_node_init+0x1ac>
 800ae0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae10:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ae14:	4798      	blx	r3
 800ae16:	6863      	ldr	r3, [r4, #4]
 800ae18:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ae1a:	b110      	cbz	r0, 800ae22 <rcl_node_init+0x1b6>
 800ae1c:	f002 fdba 	bl	800d994 <rmw_destroy_node>
 800ae20:	6863      	ldr	r3, [r4, #4]
 800ae22:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ae24:	b148      	cbz	r0, 800ae3a <rcl_node_init+0x1ce>
 800ae26:	f008 fdab 	bl	8013980 <rcl_guard_condition_fini>
 800ae2a:	6863      	ldr	r3, [r4, #4]
 800ae2c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ae30:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ae32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae36:	4798      	blx	r3
 800ae38:	6863      	ldr	r3, [r4, #4]
 800ae3a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae44:	4798      	blx	r3
 800ae46:	2300      	movs	r3, #0
 800ae48:	e9c4 3300 	strd	r3, r3, [r4]
 800ae4c:	f04f 0901 	mov.w	r9, #1
 800ae50:	f1ba 0f00 	cmp.w	sl, #0
 800ae54:	d125      	bne.n	800aea2 <rcl_node_init+0x236>
 800ae56:	e001      	b.n	800ae5c <rcl_node_init+0x1f0>
 800ae58:	f04f 090b 	mov.w	r9, #11
 800ae5c:	4648      	mov	r0, r9
 800ae5e:	b029      	add	sp, #164	@ 0xa4
 800ae60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae64:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800ae68:	e7f8      	b.n	800ae5c <rcl_node_init+0x1f0>
 800ae6a:	782b      	ldrb	r3, [r5, #0]
 800ae6c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ae6e:	f43f af42 	beq.w	800acf6 <rcl_node_init+0x8a>
 800ae72:	9503      	str	r5, [sp, #12]
 800ae74:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	4b1e      	ldr	r3, [pc, #120]	@ (800aef4 <rcl_node_init+0x288>)
 800ae7c:	9302      	str	r3, [sp, #8]
 800ae7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ae82:	9301      	str	r3, [sp, #4]
 800ae84:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ae88:	f001 fef2 	bl	800cc70 <rcutils_format_string_limit>
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	b340      	cbz	r0, 800aee2 <rcl_node_init+0x276>
 800ae90:	2200      	movs	r2, #0
 800ae92:	a922      	add	r1, sp, #136	@ 0x88
 800ae94:	9222      	str	r2, [sp, #136]	@ 0x88
 800ae96:	f002 f921 	bl	800d0dc <rmw_validate_namespace>
 800ae9a:	4681      	mov	r9, r0
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	f43f af34 	beq.w	800ad0a <rcl_node_init+0x9e>
 800aea2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aea6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800aeaa:	4628      	mov	r0, r5
 800aeac:	4798      	blx	r3
 800aeae:	e7d5      	b.n	800ae5c <rcl_node_init+0x1f0>
 800aeb0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800aeb4:	4648      	mov	r0, r9
 800aeb6:	b029      	add	sp, #164	@ 0xa4
 800aeb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebc:	f04f 090a 	mov.w	r9, #10
 800aec0:	f1ba 0f00 	cmp.w	sl, #0
 800aec4:	d1ed      	bne.n	800aea2 <rcl_node_init+0x236>
 800aec6:	e7c9      	b.n	800ae5c <rcl_node_init+0x1f0>
 800aec8:	f002 f978 	bl	800d1bc <rmw_node_name_validation_result_string>
 800aecc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800aed0:	e7c4      	b.n	800ae5c <rcl_node_init+0x1f0>
 800aed2:	f002 f915 	bl	800d100 <rmw_namespace_validation_result_string>
 800aed6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800aeda:	f1ba 0f00 	cmp.w	sl, #0
 800aede:	d1e0      	bne.n	800aea2 <rcl_node_init+0x236>
 800aee0:	e7bc      	b.n	800ae5c <rcl_node_init+0x1f0>
 800aee2:	f04f 090a 	mov.w	r9, #10
 800aee6:	e7b9      	b.n	800ae5c <rcl_node_init+0x1f0>
 800aee8:	08019358 	.word	0x08019358
 800aeec:	08019360 	.word	0x08019360
 800aef0:	08019368 	.word	0x08019368
 800aef4:	0801935c 	.word	0x0801935c

0800aef8 <rcl_node_fini>:
 800aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefa:	b320      	cbz	r0, 800af46 <rcl_node_fini+0x4e>
 800aefc:	6845      	ldr	r5, [r0, #4]
 800aefe:	4604      	mov	r4, r0
 800af00:	b1fd      	cbz	r5, 800af42 <rcl_node_fini+0x4a>
 800af02:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800af04:	686f      	ldr	r7, [r5, #4]
 800af06:	692e      	ldr	r6, [r5, #16]
 800af08:	f002 fd44 	bl	800d994 <rmw_destroy_node>
 800af0c:	6863      	ldr	r3, [r4, #4]
 800af0e:	4605      	mov	r5, r0
 800af10:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800af12:	f008 fd35 	bl	8013980 <rcl_guard_condition_fini>
 800af16:	ea55 0300 	orrs.w	r3, r5, r0
 800af1a:	6863      	ldr	r3, [r4, #4]
 800af1c:	4631      	mov	r1, r6
 800af1e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800af20:	bf14      	ite	ne
 800af22:	2501      	movne	r5, #1
 800af24:	2500      	moveq	r5, #0
 800af26:	47b8      	blx	r7
 800af28:	6863      	ldr	r3, [r4, #4]
 800af2a:	4631      	mov	r1, r6
 800af2c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800af2e:	47b8      	blx	r7
 800af30:	6863      	ldr	r3, [r4, #4]
 800af32:	4631      	mov	r1, r6
 800af34:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800af36:	47b8      	blx	r7
 800af38:	6860      	ldr	r0, [r4, #4]
 800af3a:	4631      	mov	r1, r6
 800af3c:	47b8      	blx	r7
 800af3e:	2300      	movs	r3, #0
 800af40:	6063      	str	r3, [r4, #4]
 800af42:	4628      	mov	r0, r5
 800af44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af46:	25c8      	movs	r5, #200	@ 0xc8
 800af48:	4628      	mov	r0, r5
 800af4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af4c <rcl_node_is_valid_except_context>:
 800af4c:	b128      	cbz	r0, 800af5a <rcl_node_is_valid_except_context+0xe>
 800af4e:	6840      	ldr	r0, [r0, #4]
 800af50:	b118      	cbz	r0, 800af5a <rcl_node_is_valid_except_context+0xe>
 800af52:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800af54:	3800      	subs	r0, #0
 800af56:	bf18      	it	ne
 800af58:	2001      	movne	r0, #1
 800af5a:	4770      	bx	lr

0800af5c <rcl_node_is_valid>:
 800af5c:	b130      	cbz	r0, 800af6c <rcl_node_is_valid+0x10>
 800af5e:	6843      	ldr	r3, [r0, #4]
 800af60:	b123      	cbz	r3, 800af6c <rcl_node_is_valid+0x10>
 800af62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af64:	b113      	cbz	r3, 800af6c <rcl_node_is_valid+0x10>
 800af66:	6800      	ldr	r0, [r0, #0]
 800af68:	f7ff bcf0 	b.w	800a94c <rcl_context_is_valid>
 800af6c:	2000      	movs	r0, #0
 800af6e:	4770      	bx	lr

0800af70 <rcl_node_get_name>:
 800af70:	b120      	cbz	r0, 800af7c <rcl_node_get_name+0xc>
 800af72:	6840      	ldr	r0, [r0, #4]
 800af74:	b110      	cbz	r0, 800af7c <rcl_node_get_name+0xc>
 800af76:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800af78:	b100      	cbz	r0, 800af7c <rcl_node_get_name+0xc>
 800af7a:	6880      	ldr	r0, [r0, #8]
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop

0800af80 <rcl_node_get_namespace>:
 800af80:	b120      	cbz	r0, 800af8c <rcl_node_get_namespace+0xc>
 800af82:	6840      	ldr	r0, [r0, #4]
 800af84:	b110      	cbz	r0, 800af8c <rcl_node_get_namespace+0xc>
 800af86:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800af88:	b100      	cbz	r0, 800af8c <rcl_node_get_namespace+0xc>
 800af8a:	68c0      	ldr	r0, [r0, #12]
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop

0800af90 <rcl_node_get_options>:
 800af90:	b128      	cbz	r0, 800af9e <rcl_node_get_options+0xe>
 800af92:	6840      	ldr	r0, [r0, #4]
 800af94:	b118      	cbz	r0, 800af9e <rcl_node_get_options+0xe>
 800af96:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800af98:	2b00      	cmp	r3, #0
 800af9a:	bf08      	it	eq
 800af9c:	2000      	moveq	r0, #0
 800af9e:	4770      	bx	lr

0800afa0 <rcl_node_get_rmw_handle>:
 800afa0:	b110      	cbz	r0, 800afa8 <rcl_node_get_rmw_handle+0x8>
 800afa2:	6840      	ldr	r0, [r0, #4]
 800afa4:	b100      	cbz	r0, 800afa8 <rcl_node_get_rmw_handle+0x8>
 800afa6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop

0800afac <rcl_node_get_default_options>:
 800afac:	b510      	push	{r4, lr}
 800afae:	2268      	movs	r2, #104	@ 0x68
 800afb0:	4604      	mov	r4, r0
 800afb2:	2100      	movs	r1, #0
 800afb4:	f00d f942 	bl	801823c <memset>
 800afb8:	4620      	mov	r0, r4
 800afba:	f001 fd4f 	bl	800ca5c <rcutils_get_default_allocator>
 800afbe:	2301      	movs	r3, #1
 800afc0:	7523      	strb	r3, [r4, #20]
 800afc2:	4620      	mov	r0, r4
 800afc4:	bd10      	pop	{r4, pc}
 800afc6:	bf00      	nop

0800afc8 <rcl_node_options_copy>:
 800afc8:	b1d0      	cbz	r0, 800b000 <rcl_node_options_copy+0x38>
 800afca:	b570      	push	{r4, r5, r6, lr}
 800afcc:	460c      	mov	r4, r1
 800afce:	b1a9      	cbz	r1, 800affc <rcl_node_options_copy+0x34>
 800afd0:	4288      	cmp	r0, r1
 800afd2:	4684      	mov	ip, r0
 800afd4:	d012      	beq.n	800affc <rcl_node_options_copy+0x34>
 800afd6:	4605      	mov	r5, r0
 800afd8:	8a86      	ldrh	r6, [r0, #20]
 800afda:	468e      	mov	lr, r1
 800afdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800afde:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800afe2:	682b      	ldr	r3, [r5, #0]
 800afe4:	f8ce 3000 	str.w	r3, [lr]
 800afe8:	f10c 0118 	add.w	r1, ip, #24
 800afec:	2250      	movs	r2, #80	@ 0x50
 800afee:	82a6      	strh	r6, [r4, #20]
 800aff0:	f104 0018 	add.w	r0, r4, #24
 800aff4:	f00d fa49 	bl	801848a <memcpy>
 800aff8:	2000      	movs	r0, #0
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	200b      	movs	r0, #11
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	200b      	movs	r0, #11
 800b002:	4770      	bx	lr

0800b004 <rcl_get_zero_initialized_publisher>:
 800b004:	4b01      	ldr	r3, [pc, #4]	@ (800b00c <rcl_get_zero_initialized_publisher+0x8>)
 800b006:	6818      	ldr	r0, [r3, #0]
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	08019860 	.word	0x08019860

0800b010 <rcl_publisher_init>:
 800b010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b014:	b088      	sub	sp, #32
 800b016:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b018:	2d00      	cmp	r5, #0
 800b01a:	d069      	beq.n	800b0f0 <rcl_publisher_init+0xe0>
 800b01c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800b020:	4604      	mov	r4, r0
 800b022:	4648      	mov	r0, r9
 800b024:	460e      	mov	r6, r1
 800b026:	4690      	mov	r8, r2
 800b028:	461f      	mov	r7, r3
 800b02a:	f001 fd25 	bl	800ca78 <rcutils_allocator_is_valid>
 800b02e:	2800      	cmp	r0, #0
 800b030:	d05e      	beq.n	800b0f0 <rcl_publisher_init+0xe0>
 800b032:	2c00      	cmp	r4, #0
 800b034:	d05c      	beq.n	800b0f0 <rcl_publisher_init+0xe0>
 800b036:	f8d4 a000 	ldr.w	sl, [r4]
 800b03a:	f1ba 0f00 	cmp.w	sl, #0
 800b03e:	d004      	beq.n	800b04a <rcl_publisher_init+0x3a>
 800b040:	2764      	movs	r7, #100	@ 0x64
 800b042:	4638      	mov	r0, r7
 800b044:	b008      	add	sp, #32
 800b046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b04a:	4630      	mov	r0, r6
 800b04c:	f7ff ff86 	bl	800af5c <rcl_node_is_valid>
 800b050:	2800      	cmp	r0, #0
 800b052:	d052      	beq.n	800b0fa <rcl_publisher_init+0xea>
 800b054:	f1b8 0f00 	cmp.w	r8, #0
 800b058:	d04a      	beq.n	800b0f0 <rcl_publisher_init+0xe0>
 800b05a:	2f00      	cmp	r7, #0
 800b05c:	d048      	beq.n	800b0f0 <rcl_publisher_init+0xe0>
 800b05e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800b062:	aa07      	add	r2, sp, #28
 800b064:	9205      	str	r2, [sp, #20]
 800b066:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800b06a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b06e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b072:	f8cd a01c 	str.w	sl, [sp, #28]
 800b076:	4639      	mov	r1, r7
 800b078:	e899 000c 	ldmia.w	r9, {r2, r3}
 800b07c:	4630      	mov	r0, r6
 800b07e:	f008 fe05 	bl	8013c8c <rcl_node_resolve_name>
 800b082:	4607      	mov	r7, r0
 800b084:	2800      	cmp	r0, #0
 800b086:	d14f      	bne.n	800b128 <rcl_publisher_init+0x118>
 800b088:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b08a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b08c:	20c8      	movs	r0, #200	@ 0xc8
 800b08e:	4798      	blx	r3
 800b090:	6020      	str	r0, [r4, #0]
 800b092:	2800      	cmp	r0, #0
 800b094:	d04e      	beq.n	800b134 <rcl_publisher_init+0x124>
 800b096:	4630      	mov	r0, r6
 800b098:	f7ff ff82 	bl	800afa0 <rcl_node_get_rmw_handle>
 800b09c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	9a07      	ldr	r2, [sp, #28]
 800b0a4:	6827      	ldr	r7, [r4, #0]
 800b0a6:	462b      	mov	r3, r5
 800b0a8:	4641      	mov	r1, r8
 800b0aa:	f002 fd59 	bl	800db60 <rmw_create_publisher>
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800b0b4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b0b8:	b370      	cbz	r0, 800b118 <rcl_publisher_init+0x108>
 800b0ba:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800b0be:	f002 fe2d 	bl	800dd1c <rmw_publisher_get_actual_qos>
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	4607      	mov	r7, r0
 800b0c6:	b9d0      	cbnz	r0, 800b0fe <rcl_publisher_init+0xee>
 800b0c8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800b0cc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	2270      	movs	r2, #112	@ 0x70
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f00d f9d8 	bl	801848a <memcpy>
 800b0da:	6832      	ldr	r2, [r6, #0]
 800b0dc:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800b0e0:	9807      	ldr	r0, [sp, #28]
 800b0e2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b0e4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b0e6:	4798      	blx	r3
 800b0e8:	4638      	mov	r0, r7
 800b0ea:	b008      	add	sp, #32
 800b0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0f0:	270b      	movs	r7, #11
 800b0f2:	4638      	mov	r0, r7
 800b0f4:	b008      	add	sp, #32
 800b0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0fa:	27c8      	movs	r7, #200	@ 0xc8
 800b0fc:	e7a1      	b.n	800b042 <rcl_publisher_init+0x32>
 800b0fe:	b18b      	cbz	r3, 800b124 <rcl_publisher_init+0x114>
 800b100:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b104:	b142      	cbz	r2, 800b118 <rcl_publisher_init+0x108>
 800b106:	4630      	mov	r0, r6
 800b108:	f7ff ff4a 	bl	800afa0 <rcl_node_get_rmw_handle>
 800b10c:	6823      	ldr	r3, [r4, #0]
 800b10e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800b112:	f002 fe13 	bl	800dd3c <rmw_destroy_publisher>
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800b11a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b11c:	4618      	mov	r0, r3
 800b11e:	4790      	blx	r2
 800b120:	2300      	movs	r3, #0
 800b122:	6023      	str	r3, [r4, #0]
 800b124:	2701      	movs	r7, #1
 800b126:	e7db      	b.n	800b0e0 <rcl_publisher_init+0xd0>
 800b128:	2867      	cmp	r0, #103	@ 0x67
 800b12a:	d0d9      	beq.n	800b0e0 <rcl_publisher_init+0xd0>
 800b12c:	2869      	cmp	r0, #105	@ 0x69
 800b12e:	d003      	beq.n	800b138 <rcl_publisher_init+0x128>
 800b130:	280a      	cmp	r0, #10
 800b132:	d1f7      	bne.n	800b124 <rcl_publisher_init+0x114>
 800b134:	270a      	movs	r7, #10
 800b136:	e7d3      	b.n	800b0e0 <rcl_publisher_init+0xd0>
 800b138:	2767      	movs	r7, #103	@ 0x67
 800b13a:	e7d1      	b.n	800b0e0 <rcl_publisher_init+0xd0>

0800b13c <rcl_publisher_fini>:
 800b13c:	b570      	push	{r4, r5, r6, lr}
 800b13e:	b300      	cbz	r0, 800b182 <rcl_publisher_fini+0x46>
 800b140:	4604      	mov	r4, r0
 800b142:	4608      	mov	r0, r1
 800b144:	460d      	mov	r5, r1
 800b146:	f7ff ff01 	bl	800af4c <rcl_node_is_valid_except_context>
 800b14a:	b1f0      	cbz	r0, 800b18a <rcl_publisher_fini+0x4e>
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	b1ab      	cbz	r3, 800b17c <rcl_publisher_fini+0x40>
 800b150:	4628      	mov	r0, r5
 800b152:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800b154:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800b156:	f7ff ff23 	bl	800afa0 <rcl_node_get_rmw_handle>
 800b15a:	b1c8      	cbz	r0, 800b190 <rcl_publisher_fini+0x54>
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800b162:	f002 fdeb 	bl	800dd3c <rmw_destroy_publisher>
 800b166:	4603      	mov	r3, r0
 800b168:	4629      	mov	r1, r5
 800b16a:	6820      	ldr	r0, [r4, #0]
 800b16c:	1e1d      	subs	r5, r3, #0
 800b16e:	bf18      	it	ne
 800b170:	2501      	movne	r5, #1
 800b172:	47b0      	blx	r6
 800b174:	2300      	movs	r3, #0
 800b176:	6023      	str	r3, [r4, #0]
 800b178:	4628      	mov	r0, r5
 800b17a:	bd70      	pop	{r4, r5, r6, pc}
 800b17c:	461d      	mov	r5, r3
 800b17e:	4628      	mov	r0, r5
 800b180:	bd70      	pop	{r4, r5, r6, pc}
 800b182:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800b186:	4628      	mov	r0, r5
 800b188:	bd70      	pop	{r4, r5, r6, pc}
 800b18a:	25c8      	movs	r5, #200	@ 0xc8
 800b18c:	4628      	mov	r0, r5
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	250b      	movs	r5, #11
 800b192:	e7f1      	b.n	800b178 <rcl_publisher_fini+0x3c>

0800b194 <rcl_publisher_get_default_options>:
 800b194:	b570      	push	{r4, r5, r6, lr}
 800b196:	4d14      	ldr	r5, [pc, #80]	@ (800b1e8 <rcl_publisher_get_default_options+0x54>)
 800b198:	4914      	ldr	r1, [pc, #80]	@ (800b1ec <rcl_publisher_get_default_options+0x58>)
 800b19a:	b088      	sub	sp, #32
 800b19c:	4604      	mov	r4, r0
 800b19e:	2250      	movs	r2, #80	@ 0x50
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	f00d f972 	bl	801848a <memcpy>
 800b1a6:	a802      	add	r0, sp, #8
 800b1a8:	f001 fc58 	bl	800ca5c <rcutils_get_default_allocator>
 800b1ac:	f10d 0c08 	add.w	ip, sp, #8
 800b1b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b1b4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800b1b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b1bc:	466e      	mov	r6, sp
 800b1be:	f8dc 3000 	ldr.w	r3, [ip]
 800b1c2:	f8ce 3000 	str.w	r3, [lr]
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f001 ff0a 	bl	800cfe0 <rmw_get_default_publisher_options>
 800b1cc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b1d0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b1d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800b1d8:	2270      	movs	r2, #112	@ 0x70
 800b1da:	4629      	mov	r1, r5
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f00d f954 	bl	801848a <memcpy>
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	b008      	add	sp, #32
 800b1e6:	bd70      	pop	{r4, r5, r6, pc}
 800b1e8:	2000c3c0 	.word	0x2000c3c0
 800b1ec:	08019868 	.word	0x08019868

0800b1f0 <rcl_publish>:
 800b1f0:	b1f8      	cbz	r0, 800b232 <rcl_publish+0x42>
 800b1f2:	6803      	ldr	r3, [r0, #0]
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	b1b3      	cbz	r3, 800b228 <rcl_publish+0x38>
 800b1fa:	4616      	mov	r6, r2
 800b1fc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b200:	b192      	cbz	r2, 800b228 <rcl_publish+0x38>
 800b202:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b206:	460d      	mov	r5, r1
 800b208:	f7ff fba0 	bl	800a94c <rcl_context_is_valid>
 800b20c:	b160      	cbz	r0, 800b228 <rcl_publish+0x38>
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b214:	b140      	cbz	r0, 800b228 <rcl_publish+0x38>
 800b216:	b155      	cbz	r5, 800b22e <rcl_publish+0x3e>
 800b218:	4632      	mov	r2, r6
 800b21a:	4629      	mov	r1, r5
 800b21c:	f002 fc40 	bl	800daa0 <rmw_publish>
 800b220:	3800      	subs	r0, #0
 800b222:	bf18      	it	ne
 800b224:	2001      	movne	r0, #1
 800b226:	bd70      	pop	{r4, r5, r6, pc}
 800b228:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b22c:	bd70      	pop	{r4, r5, r6, pc}
 800b22e:	200b      	movs	r0, #11
 800b230:	bd70      	pop	{r4, r5, r6, pc}
 800b232:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b236:	4770      	bx	lr

0800b238 <rcl_publisher_get_rmw_handle>:
 800b238:	b118      	cbz	r0, 800b242 <rcl_publisher_get_rmw_handle+0xa>
 800b23a:	6800      	ldr	r0, [r0, #0]
 800b23c:	b108      	cbz	r0, 800b242 <rcl_publisher_get_rmw_handle+0xa>
 800b23e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800b242:	4770      	bx	lr

0800b244 <rcl_publisher_is_valid>:
 800b244:	b1a0      	cbz	r0, 800b270 <rcl_publisher_is_valid+0x2c>
 800b246:	6803      	ldr	r3, [r0, #0]
 800b248:	b510      	push	{r4, lr}
 800b24a:	4604      	mov	r4, r0
 800b24c:	b173      	cbz	r3, 800b26c <rcl_publisher_is_valid+0x28>
 800b24e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b252:	b15a      	cbz	r2, 800b26c <rcl_publisher_is_valid+0x28>
 800b254:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b258:	f7ff fb78 	bl	800a94c <rcl_context_is_valid>
 800b25c:	b130      	cbz	r0, 800b26c <rcl_publisher_is_valid+0x28>
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b264:	3800      	subs	r0, #0
 800b266:	bf18      	it	ne
 800b268:	2001      	movne	r0, #1
 800b26a:	bd10      	pop	{r4, pc}
 800b26c:	2000      	movs	r0, #0
 800b26e:	bd10      	pop	{r4, pc}
 800b270:	2000      	movs	r0, #0
 800b272:	4770      	bx	lr

0800b274 <rcl_publisher_is_valid_except_context>:
 800b274:	b130      	cbz	r0, 800b284 <rcl_publisher_is_valid_except_context+0x10>
 800b276:	6800      	ldr	r0, [r0, #0]
 800b278:	b120      	cbz	r0, 800b284 <rcl_publisher_is_valid_except_context+0x10>
 800b27a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800b27e:	3800      	subs	r0, #0
 800b280:	bf18      	it	ne
 800b282:	2001      	movne	r0, #1
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop

0800b288 <rcl_get_zero_initialized_subscription>:
 800b288:	4b01      	ldr	r3, [pc, #4]	@ (800b290 <rcl_get_zero_initialized_subscription+0x8>)
 800b28a:	6818      	ldr	r0, [r3, #0]
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	080198b8 	.word	0x080198b8

0800b294 <rcl_subscription_init>:
 800b294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b298:	b089      	sub	sp, #36	@ 0x24
 800b29a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b29c:	b1d6      	cbz	r6, 800b2d4 <rcl_subscription_init+0x40>
 800b29e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	4648      	mov	r0, r9
 800b2a6:	460d      	mov	r5, r1
 800b2a8:	4690      	mov	r8, r2
 800b2aa:	461f      	mov	r7, r3
 800b2ac:	f001 fbe4 	bl	800ca78 <rcutils_allocator_is_valid>
 800b2b0:	b180      	cbz	r0, 800b2d4 <rcl_subscription_init+0x40>
 800b2b2:	b17c      	cbz	r4, 800b2d4 <rcl_subscription_init+0x40>
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	f7ff fe51 	bl	800af5c <rcl_node_is_valid>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d054      	beq.n	800b368 <rcl_subscription_init+0xd4>
 800b2be:	f1b8 0f00 	cmp.w	r8, #0
 800b2c2:	d007      	beq.n	800b2d4 <rcl_subscription_init+0x40>
 800b2c4:	b137      	cbz	r7, 800b2d4 <rcl_subscription_init+0x40>
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	b14b      	cbz	r3, 800b2de <rcl_subscription_init+0x4a>
 800b2ca:	2764      	movs	r7, #100	@ 0x64
 800b2cc:	4638      	mov	r0, r7
 800b2ce:	b009      	add	sp, #36	@ 0x24
 800b2d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2d4:	270b      	movs	r7, #11
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	b009      	add	sp, #36	@ 0x24
 800b2da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2de:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800b2e2:	aa07      	add	r2, sp, #28
 800b2e4:	9205      	str	r2, [sp, #20]
 800b2e6:	9307      	str	r3, [sp, #28]
 800b2e8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800b2ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b2f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	e899 000c 	ldmia.w	r9, {r2, r3}
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	f008 fcc6 	bl	8013c8c <rcl_node_resolve_name>
 800b300:	4607      	mov	r7, r0
 800b302:	2800      	cmp	r0, #0
 800b304:	d15f      	bne.n	800b3c6 <rcl_subscription_init+0x132>
 800b306:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800b30a:	21c8      	movs	r1, #200	@ 0xc8
 800b30c:	2001      	movs	r0, #1
 800b30e:	4798      	blx	r3
 800b310:	6020      	str	r0, [r4, #0]
 800b312:	2800      	cmp	r0, #0
 800b314:	d05d      	beq.n	800b3d2 <rcl_subscription_init+0x13e>
 800b316:	4628      	mov	r0, r5
 800b318:	f7ff fe42 	bl	800afa0 <rcl_node_get_rmw_handle>
 800b31c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	9a07      	ldr	r2, [sp, #28]
 800b324:	6827      	ldr	r7, [r4, #0]
 800b326:	4641      	mov	r1, r8
 800b328:	4633      	mov	r3, r6
 800b32a:	f002 fd9d 	bl	800de68 <rmw_create_subscription>
 800b32e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800b332:	6827      	ldr	r7, [r4, #0]
 800b334:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800b338:	b348      	cbz	r0, 800b38e <rcl_subscription_init+0xfa>
 800b33a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800b33e:	f002 fe75 	bl	800e02c <rmw_subscription_get_actual_qos>
 800b342:	4607      	mov	r7, r0
 800b344:	b9a8      	cbnz	r0, 800b372 <rcl_subscription_init+0xde>
 800b346:	6820      	ldr	r0, [r4, #0]
 800b348:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800b34c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800b350:	2270      	movs	r2, #112	@ 0x70
 800b352:	4631      	mov	r1, r6
 800b354:	f00d f899 	bl	801848a <memcpy>
 800b358:	9807      	ldr	r0, [sp, #28]
 800b35a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800b35c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800b35e:	4798      	blx	r3
 800b360:	4638      	mov	r0, r7
 800b362:	b009      	add	sp, #36	@ 0x24
 800b364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b368:	27c8      	movs	r7, #200	@ 0xc8
 800b36a:	4638      	mov	r0, r7
 800b36c:	b009      	add	sp, #36	@ 0x24
 800b36e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b372:	6827      	ldr	r7, [r4, #0]
 800b374:	b32f      	cbz	r7, 800b3c2 <rcl_subscription_init+0x12e>
 800b376:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b37a:	b14b      	cbz	r3, 800b390 <rcl_subscription_init+0xfc>
 800b37c:	4628      	mov	r0, r5
 800b37e:	f7ff fe0f 	bl	800afa0 <rcl_node_get_rmw_handle>
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800b388:	f002 fe60 	bl	800e04c <rmw_destroy_subscription>
 800b38c:	6827      	ldr	r7, [r4, #0]
 800b38e:	b197      	cbz	r7, 800b3b6 <rcl_subscription_init+0x122>
 800b390:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800b394:	4628      	mov	r0, r5
 800b396:	f001 fb6f 	bl	800ca78 <rcutils_allocator_is_valid>
 800b39a:	b158      	cbz	r0, 800b3b4 <rcl_subscription_init+0x120>
 800b39c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b39e:	b148      	cbz	r0, 800b3b4 <rcl_subscription_init+0x120>
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	f001 fe25 	bl	800cff0 <rmw_subscription_content_filter_options_fini>
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	b9b8      	cbnz	r0, 800b3da <rcl_subscription_init+0x146>
 800b3aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3ac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b3ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b3b0:	4798      	blx	r3
 800b3b2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800b3b4:	6827      	ldr	r7, [r4, #0]
 800b3b6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800b3b8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	4798      	blx	r3
 800b3be:	2300      	movs	r3, #0
 800b3c0:	6023      	str	r3, [r4, #0]
 800b3c2:	2701      	movs	r7, #1
 800b3c4:	e7c8      	b.n	800b358 <rcl_subscription_init+0xc4>
 800b3c6:	2867      	cmp	r0, #103	@ 0x67
 800b3c8:	d0c6      	beq.n	800b358 <rcl_subscription_init+0xc4>
 800b3ca:	2869      	cmp	r0, #105	@ 0x69
 800b3cc:	d003      	beq.n	800b3d6 <rcl_subscription_init+0x142>
 800b3ce:	280a      	cmp	r0, #10
 800b3d0:	d1f7      	bne.n	800b3c2 <rcl_subscription_init+0x12e>
 800b3d2:	270a      	movs	r7, #10
 800b3d4:	e7c0      	b.n	800b358 <rcl_subscription_init+0xc4>
 800b3d6:	2767      	movs	r7, #103	@ 0x67
 800b3d8:	e7be      	b.n	800b358 <rcl_subscription_init+0xc4>
 800b3da:	f008 fa07 	bl	80137ec <rcl_convert_rmw_ret_to_rcl_ret>
 800b3de:	6827      	ldr	r7, [r4, #0]
 800b3e0:	e7e9      	b.n	800b3b6 <rcl_subscription_init+0x122>
 800b3e2:	bf00      	nop

0800b3e4 <rcl_subscription_fini>:
 800b3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d039      	beq.n	800b460 <rcl_subscription_fini+0x7c>
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	4608      	mov	r0, r1
 800b3f0:	460d      	mov	r5, r1
 800b3f2:	f7ff fdab 	bl	800af4c <rcl_node_is_valid_except_context>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d037      	beq.n	800b46a <rcl_subscription_fini+0x86>
 800b3fa:	6823      	ldr	r3, [r4, #0]
 800b3fc:	b363      	cbz	r3, 800b458 <rcl_subscription_fini+0x74>
 800b3fe:	4628      	mov	r0, r5
 800b400:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800b402:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800b406:	f7ff fdcb 	bl	800afa0 <rcl_node_get_rmw_handle>
 800b40a:	b390      	cbz	r0, 800b472 <rcl_subscription_fini+0x8e>
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800b412:	f002 fe1b 	bl	800e04c <rmw_destroy_subscription>
 800b416:	6826      	ldr	r6, [r4, #0]
 800b418:	1e05      	subs	r5, r0, #0
 800b41a:	bf18      	it	ne
 800b41c:	2501      	movne	r5, #1
 800b41e:	b37e      	cbz	r6, 800b480 <rcl_subscription_fini+0x9c>
 800b420:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800b424:	4648      	mov	r0, r9
 800b426:	f001 fb27 	bl	800ca78 <rcutils_allocator_is_valid>
 800b42a:	b358      	cbz	r0, 800b484 <rcl_subscription_fini+0xa0>
 800b42c:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800b42e:	b150      	cbz	r0, 800b446 <rcl_subscription_fini+0x62>
 800b430:	4649      	mov	r1, r9
 800b432:	f001 fddd 	bl	800cff0 <rmw_subscription_content_filter_options_fini>
 800b436:	4681      	mov	r9, r0
 800b438:	b9e8      	cbnz	r0, 800b476 <rcl_subscription_fini+0x92>
 800b43a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800b43c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800b43e:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800b440:	4798      	blx	r3
 800b442:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800b446:	6826      	ldr	r6, [r4, #0]
 800b448:	4630      	mov	r0, r6
 800b44a:	4641      	mov	r1, r8
 800b44c:	47b8      	blx	r7
 800b44e:	2300      	movs	r3, #0
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	4628      	mov	r0, r5
 800b454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b458:	461d      	mov	r5, r3
 800b45a:	4628      	mov	r0, r5
 800b45c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b460:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800b464:	4628      	mov	r0, r5
 800b466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b46a:	25c8      	movs	r5, #200	@ 0xc8
 800b46c:	4628      	mov	r0, r5
 800b46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b472:	250b      	movs	r5, #11
 800b474:	e7f1      	b.n	800b45a <rcl_subscription_fini+0x76>
 800b476:	f008 f9b9 	bl	80137ec <rcl_convert_rmw_ret_to_rcl_ret>
 800b47a:	6826      	ldr	r6, [r4, #0]
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d0e3      	beq.n	800b448 <rcl_subscription_fini+0x64>
 800b480:	2501      	movs	r5, #1
 800b482:	e7e1      	b.n	800b448 <rcl_subscription_fini+0x64>
 800b484:	6826      	ldr	r6, [r4, #0]
 800b486:	2501      	movs	r5, #1
 800b488:	e7de      	b.n	800b448 <rcl_subscription_fini+0x64>
 800b48a:	bf00      	nop

0800b48c <rcl_subscription_get_default_options>:
 800b48c:	b570      	push	{r4, r5, r6, lr}
 800b48e:	4d14      	ldr	r5, [pc, #80]	@ (800b4e0 <rcl_subscription_get_default_options+0x54>)
 800b490:	4914      	ldr	r1, [pc, #80]	@ (800b4e4 <rcl_subscription_get_default_options+0x58>)
 800b492:	b08a      	sub	sp, #40	@ 0x28
 800b494:	4604      	mov	r4, r0
 800b496:	2250      	movs	r2, #80	@ 0x50
 800b498:	4628      	mov	r0, r5
 800b49a:	f00c fff6 	bl	801848a <memcpy>
 800b49e:	a804      	add	r0, sp, #16
 800b4a0:	f001 fadc 	bl	800ca5c <rcutils_get_default_allocator>
 800b4a4:	f10d 0c10 	add.w	ip, sp, #16
 800b4a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b4ac:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800b4b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b4b4:	466e      	mov	r6, sp
 800b4b6:	f8dc 3000 	ldr.w	r3, [ip]
 800b4ba:	f8ce 3000 	str.w	r3, [lr]
 800b4be:	4630      	mov	r0, r6
 800b4c0:	f001 fdb0 	bl	800d024 <rmw_get_default_subscription_options>
 800b4c4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b4c8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b4cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b4d0:	2270      	movs	r2, #112	@ 0x70
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f00c ffd8 	bl	801848a <memcpy>
 800b4da:	4620      	mov	r0, r4
 800b4dc:	b00a      	add	sp, #40	@ 0x28
 800b4de:	bd70      	pop	{r4, r5, r6, pc}
 800b4e0:	2000c430 	.word	0x2000c430
 800b4e4:	080198c0 	.word	0x080198c0

0800b4e8 <rcl_take>:
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d04a      	beq.n	800b582 <rcl_take+0x9a>
 800b4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	6800      	ldr	r0, [r0, #0]
 800b4f4:	b0a4      	sub	sp, #144	@ 0x90
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d03b      	beq.n	800b572 <rcl_take+0x8a>
 800b4fa:	461f      	mov	r7, r3
 800b4fc:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d036      	beq.n	800b572 <rcl_take+0x8a>
 800b504:	460e      	mov	r6, r1
 800b506:	2900      	cmp	r1, #0
 800b508:	d039      	beq.n	800b57e <rcl_take+0x96>
 800b50a:	4615      	mov	r5, r2
 800b50c:	2a00      	cmp	r2, #0
 800b50e:	d03c      	beq.n	800b58a <rcl_take+0xa2>
 800b510:	a802      	add	r0, sp, #8
 800b512:	f001 fd8d 	bl	800d030 <rmw_get_zero_initialized_message_info>
 800b516:	f10d 0c08 	add.w	ip, sp, #8
 800b51a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b51e:	46ae      	mov	lr, r5
 800b520:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b524:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b528:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b52c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b530:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b534:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800b538:	f04f 0800 	mov.w	r8, #0
 800b53c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800b540:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800b544:	6822      	ldr	r2, [r4, #0]
 800b546:	462b      	mov	r3, r5
 800b548:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800b54c:	9700      	str	r7, [sp, #0]
 800b54e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800b552:	4631      	mov	r1, r6
 800b554:	f002 fdda 	bl	800e10c <rmw_take_with_info>
 800b558:	4603      	mov	r3, r0
 800b55a:	b9c0      	cbnz	r0, 800b58e <rcl_take+0xa6>
 800b55c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800b560:	f240 1291 	movw	r2, #401	@ 0x191
 800b564:	2900      	cmp	r1, #0
 800b566:	bf08      	it	eq
 800b568:	4613      	moveq	r3, r2
 800b56a:	4618      	mov	r0, r3
 800b56c:	b024      	add	sp, #144	@ 0x90
 800b56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b572:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800b576:	4618      	mov	r0, r3
 800b578:	b024      	add	sp, #144	@ 0x90
 800b57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b57e:	230b      	movs	r3, #11
 800b580:	e7f3      	b.n	800b56a <rcl_take+0x82>
 800b582:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800b586:	4618      	mov	r0, r3
 800b588:	4770      	bx	lr
 800b58a:	ad14      	add	r5, sp, #80	@ 0x50
 800b58c:	e7c0      	b.n	800b510 <rcl_take+0x28>
 800b58e:	f008 f92d 	bl	80137ec <rcl_convert_rmw_ret_to_rcl_ret>
 800b592:	4603      	mov	r3, r0
 800b594:	e7e9      	b.n	800b56a <rcl_take+0x82>
 800b596:	bf00      	nop

0800b598 <rcl_subscription_get_rmw_handle>:
 800b598:	b118      	cbz	r0, 800b5a2 <rcl_subscription_get_rmw_handle+0xa>
 800b59a:	6800      	ldr	r0, [r0, #0]
 800b59c:	b108      	cbz	r0, 800b5a2 <rcl_subscription_get_rmw_handle+0xa>
 800b59e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800b5a2:	4770      	bx	lr

0800b5a4 <rcl_subscription_is_valid>:
 800b5a4:	b130      	cbz	r0, 800b5b4 <rcl_subscription_is_valid+0x10>
 800b5a6:	6800      	ldr	r0, [r0, #0]
 800b5a8:	b120      	cbz	r0, 800b5b4 <rcl_subscription_is_valid+0x10>
 800b5aa:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800b5ae:	3800      	subs	r0, #0
 800b5b0:	bf18      	it	ne
 800b5b2:	2001      	movne	r0, #1
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop

0800b5b8 <_rcl_timer_time_jump>:
 800b5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5bc:	4605      	mov	r5, r0
 800b5be:	b084      	sub	sp, #16
 800b5c0:	4614      	mov	r4, r2
 800b5c2:	b131      	cbz	r1, 800b5d2 <_rcl_timer_time_jump+0x1a>
 800b5c4:	7803      	ldrb	r3, [r0, #0]
 800b5c6:	3b02      	subs	r3, #2
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d93f      	bls.n	800b64c <_rcl_timer_time_jump+0x94>
 800b5cc:	b004      	add	sp, #16
 800b5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d2:	6813      	ldr	r3, [r2, #0]
 800b5d4:	a902      	add	r1, sp, #8
 800b5d6:	6818      	ldr	r0, [r3, #0]
 800b5d8:	f008 fd2a 	bl	8014030 <rcl_clock_get_now>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d1f5      	bne.n	800b5cc <_rcl_timer_time_jump+0x14>
 800b5e0:	6820      	ldr	r0, [r4, #0]
 800b5e2:	2105      	movs	r1, #5
 800b5e4:	3020      	adds	r0, #32
 800b5e6:	f001 fa55 	bl	800ca94 <__atomic_load_8>
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	4681      	mov	r9, r0
 800b5ee:	4688      	mov	r8, r1
 800b5f0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800b5f4:	2105      	movs	r1, #5
 800b5f6:	f001 fa4d 	bl	800ca94 <__atomic_load_8>
 800b5fa:	4607      	mov	r7, r0
 800b5fc:	6820      	ldr	r0, [r4, #0]
 800b5fe:	460e      	mov	r6, r1
 800b600:	3018      	adds	r0, #24
 800b602:	2105      	movs	r1, #5
 800b604:	f001 fa46 	bl	800ca94 <__atomic_load_8>
 800b608:	782b      	ldrb	r3, [r5, #0]
 800b60a:	9a02      	ldr	r2, [sp, #8]
 800b60c:	3b02      	subs	r3, #2
 800b60e:	2b01      	cmp	r3, #1
 800b610:	460d      	mov	r5, r1
 800b612:	9b03      	ldr	r3, [sp, #12]
 800b614:	4682      	mov	sl, r0
 800b616:	d937      	bls.n	800b688 <_rcl_timer_time_jump+0xd0>
 800b618:	42ba      	cmp	r2, r7
 800b61a:	eb73 0106 	sbcs.w	r1, r3, r6
 800b61e:	da5f      	bge.n	800b6e0 <_rcl_timer_time_jump+0x128>
 800b620:	454a      	cmp	r2, r9
 800b622:	eb73 0108 	sbcs.w	r1, r3, r8
 800b626:	dad1      	bge.n	800b5cc <_rcl_timer_time_jump+0x14>
 800b628:	6820      	ldr	r0, [r4, #0]
 800b62a:	eb1a 0202 	adds.w	r2, sl, r2
 800b62e:	eb43 0305 	adc.w	r3, r3, r5
 800b632:	2505      	movs	r5, #5
 800b634:	3028      	adds	r0, #40	@ 0x28
 800b636:	9500      	str	r5, [sp, #0]
 800b638:	f001 fa62 	bl	800cb00 <__atomic_store_8>
 800b63c:	6820      	ldr	r0, [r4, #0]
 800b63e:	9500      	str	r5, [sp, #0]
 800b640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b644:	3020      	adds	r0, #32
 800b646:	f001 fa5b 	bl	800cb00 <__atomic_store_8>
 800b64a:	e7bf      	b.n	800b5cc <_rcl_timer_time_jump+0x14>
 800b64c:	6813      	ldr	r3, [r2, #0]
 800b64e:	a902      	add	r1, sp, #8
 800b650:	6818      	ldr	r0, [r3, #0]
 800b652:	f008 fced 	bl	8014030 <rcl_clock_get_now>
 800b656:	2800      	cmp	r0, #0
 800b658:	d1b8      	bne.n	800b5cc <_rcl_timer_time_jump+0x14>
 800b65a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b65e:	4313      	orrs	r3, r2
 800b660:	d0b4      	beq.n	800b5cc <_rcl_timer_time_jump+0x14>
 800b662:	6820      	ldr	r0, [r4, #0]
 800b664:	2105      	movs	r1, #5
 800b666:	3028      	adds	r0, #40	@ 0x28
 800b668:	f001 fa14 	bl	800ca94 <__atomic_load_8>
 800b66c:	9d02      	ldr	r5, [sp, #8]
 800b66e:	9b03      	ldr	r3, [sp, #12]
 800b670:	4602      	mov	r2, r0
 800b672:	6820      	ldr	r0, [r4, #0]
 800b674:	1b52      	subs	r2, r2, r5
 800b676:	f04f 0405 	mov.w	r4, #5
 800b67a:	9400      	str	r4, [sp, #0]
 800b67c:	eb61 0303 	sbc.w	r3, r1, r3
 800b680:	3030      	adds	r0, #48	@ 0x30
 800b682:	f001 fa3d 	bl	800cb00 <__atomic_store_8>
 800b686:	e7a1      	b.n	800b5cc <_rcl_timer_time_jump+0x14>
 800b688:	4313      	orrs	r3, r2
 800b68a:	d09f      	beq.n	800b5cc <_rcl_timer_time_jump+0x14>
 800b68c:	6820      	ldr	r0, [r4, #0]
 800b68e:	f04f 0805 	mov.w	r8, #5
 800b692:	2300      	movs	r3, #0
 800b694:	f8cd 8000 	str.w	r8, [sp]
 800b698:	3030      	adds	r0, #48	@ 0x30
 800b69a:	2200      	movs	r2, #0
 800b69c:	f001 fa66 	bl	800cb6c <__atomic_exchange_8>
 800b6a0:	ea51 0300 	orrs.w	r3, r1, r0
 800b6a4:	4606      	mov	r6, r0
 800b6a6:	460f      	mov	r7, r1
 800b6a8:	d090      	beq.n	800b5cc <_rcl_timer_time_jump+0x14>
 800b6aa:	9a02      	ldr	r2, [sp, #8]
 800b6ac:	9b03      	ldr	r3, [sp, #12]
 800b6ae:	f8cd 8000 	str.w	r8, [sp]
 800b6b2:	1a12      	subs	r2, r2, r0
 800b6b4:	6820      	ldr	r0, [r4, #0]
 800b6b6:	eb63 0301 	sbc.w	r3, r3, r1
 800b6ba:	eb12 020a 	adds.w	r2, r2, sl
 800b6be:	eb43 0305 	adc.w	r3, r3, r5
 800b6c2:	3028      	adds	r0, #40	@ 0x28
 800b6c4:	f001 fa1c 	bl	800cb00 <__atomic_store_8>
 800b6c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6cc:	f8cd 8000 	str.w	r8, [sp]
 800b6d0:	6820      	ldr	r0, [r4, #0]
 800b6d2:	1b92      	subs	r2, r2, r6
 800b6d4:	eb63 0307 	sbc.w	r3, r3, r7
 800b6d8:	3020      	adds	r0, #32
 800b6da:	f001 fa11 	bl	800cb00 <__atomic_store_8>
 800b6de:	e775      	b.n	800b5cc <_rcl_timer_time_jump+0x14>
 800b6e0:	6820      	ldr	r0, [r4, #0]
 800b6e2:	3008      	adds	r0, #8
 800b6e4:	f008 f98e 	bl	8013a04 <rcl_trigger_guard_condition>
 800b6e8:	e770      	b.n	800b5cc <_rcl_timer_time_jump+0x14>
 800b6ea:	bf00      	nop

0800b6ec <rcl_get_zero_initialized_timer>:
 800b6ec:	4b01      	ldr	r3, [pc, #4]	@ (800b6f4 <rcl_get_zero_initialized_timer+0x8>)
 800b6ee:	6818      	ldr	r0, [r3, #0]
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	08019910 	.word	0x08019910

0800b6f8 <rcl_timer_init>:
 800b6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6fc:	b0aa      	sub	sp, #168	@ 0xa8
 800b6fe:	4604      	mov	r4, r0
 800b700:	a835      	add	r0, sp, #212	@ 0xd4
 800b702:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 800b706:	460d      	mov	r5, r1
 800b708:	4692      	mov	sl, r2
 800b70a:	f001 f9b5 	bl	800ca78 <rcutils_allocator_is_valid>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d064      	beq.n	800b7dc <rcl_timer_init+0xe4>
 800b712:	2c00      	cmp	r4, #0
 800b714:	d062      	beq.n	800b7dc <rcl_timer_init+0xe4>
 800b716:	2d00      	cmp	r5, #0
 800b718:	d060      	beq.n	800b7dc <rcl_timer_init+0xe4>
 800b71a:	2f00      	cmp	r7, #0
 800b71c:	db5e      	blt.n	800b7dc <rcl_timer_init+0xe4>
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	b123      	cbz	r3, 800b72c <rcl_timer_init+0x34>
 800b722:	2664      	movs	r6, #100	@ 0x64
 800b724:	4630      	mov	r0, r6
 800b726:	b02a      	add	sp, #168	@ 0xa8
 800b728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b72c:	a908      	add	r1, sp, #32
 800b72e:	4628      	mov	r0, r5
 800b730:	f008 fc7e 	bl	8014030 <rcl_clock_get_now>
 800b734:	4606      	mov	r6, r0
 800b736:	2800      	cmp	r0, #0
 800b738:	d1f4      	bne.n	800b724 <rcl_timer_init+0x2c>
 800b73a:	ae06      	add	r6, sp, #24
 800b73c:	4630      	mov	r0, r6
 800b73e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 800b742:	f008 f867 	bl	8013814 <rcl_get_zero_initialized_guard_condition>
 800b746:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b74a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 800b74e:	ae0b      	add	r6, sp, #44	@ 0x2c
 800b750:	e889 0003 	stmia.w	r9, {r0, r1}
 800b754:	4630      	mov	r0, r6
 800b756:	f008 f939 	bl	80139cc <rcl_guard_condition_get_default_options>
 800b75a:	ab0d      	add	r3, sp, #52	@ 0x34
 800b75c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b760:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b764:	4651      	mov	r1, sl
 800b766:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b76a:	4648      	mov	r0, r9
 800b76c:	f008 f85c 	bl	8013828 <rcl_guard_condition_init>
 800b770:	4606      	mov	r6, r0
 800b772:	2800      	cmp	r0, #0
 800b774:	d1d6      	bne.n	800b724 <rcl_timer_init+0x2c>
 800b776:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d033      	beq.n	800b7e6 <rcl_timer_init+0xee>
 800b77e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800b780:	911a      	str	r1, [sp, #104]	@ 0x68
 800b782:	4642      	mov	r2, r8
 800b784:	463b      	mov	r3, r7
 800b786:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800b78a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b78e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800b840 <rcl_timer_init+0x148>
 800b792:	eb12 0008 	adds.w	r0, r2, r8
 800b796:	eb47 0103 	adc.w	r1, r7, r3
 800b79a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 800b79e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800b7a2:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800b7a6:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800b7aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b7ae:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 800b7b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b7b6:	f8de 3000 	ldr.w	r3, [lr]
 800b7ba:	f8cc 3000 	str.w	r3, [ip]
 800b7be:	f04f 0a00 	mov.w	sl, #0
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 800b7c8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800b7ca:	2050      	movs	r0, #80	@ 0x50
 800b7cc:	4798      	blx	r3
 800b7ce:	6020      	str	r0, [r4, #0]
 800b7d0:	b358      	cbz	r0, 800b82a <rcl_timer_init+0x132>
 800b7d2:	2250      	movs	r2, #80	@ 0x50
 800b7d4:	a916      	add	r1, sp, #88	@ 0x58
 800b7d6:	f00c fe58 	bl	801848a <memcpy>
 800b7da:	e7a3      	b.n	800b724 <rcl_timer_init+0x2c>
 800b7dc:	260b      	movs	r6, #11
 800b7de:	4630      	mov	r0, r6
 800b7e0:	b02a      	add	sp, #168	@ 0xa8
 800b7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e6:	2001      	movs	r0, #1
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800b7ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7f2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b7f6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800b7fa:	4a13      	ldr	r2, [pc, #76]	@ (800b848 <rcl_timer_init+0x150>)
 800b7fc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800b800:	9405      	str	r4, [sp, #20]
 800b802:	9204      	str	r2, [sp, #16]
 800b804:	ab12      	add	r3, sp, #72	@ 0x48
 800b806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b808:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b80c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800b810:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800b814:	4628      	mov	r0, r5
 800b816:	f008 fc17 	bl	8014048 <rcl_clock_add_jump_callback>
 800b81a:	4682      	mov	sl, r0
 800b81c:	2800      	cmp	r0, #0
 800b81e:	d0ae      	beq.n	800b77e <rcl_timer_init+0x86>
 800b820:	4648      	mov	r0, r9
 800b822:	f008 f8ad 	bl	8013980 <rcl_guard_condition_fini>
 800b826:	4656      	mov	r6, sl
 800b828:	e77c      	b.n	800b724 <rcl_timer_init+0x2c>
 800b82a:	4648      	mov	r0, r9
 800b82c:	f008 f8a8 	bl	8013980 <rcl_guard_condition_fini>
 800b830:	4905      	ldr	r1, [pc, #20]	@ (800b848 <rcl_timer_init+0x150>)
 800b832:	4622      	mov	r2, r4
 800b834:	4628      	mov	r0, r5
 800b836:	f008 fc69 	bl	801410c <rcl_clock_remove_jump_callback>
 800b83a:	260a      	movs	r6, #10
 800b83c:	e772      	b.n	800b724 <rcl_timer_init+0x2c>
 800b83e:	bf00      	nop
	...
 800b848:	0800b5b9 	.word	0x0800b5b9

0800b84c <rcl_timer_fini>:
 800b84c:	b310      	cbz	r0, 800b894 <rcl_timer_fini+0x48>
 800b84e:	6803      	ldr	r3, [r0, #0]
 800b850:	b570      	push	{r4, r5, r6, lr}
 800b852:	4604      	mov	r4, r0
 800b854:	b1b3      	cbz	r3, 800b884 <rcl_timer_fini+0x38>
 800b856:	f3bf 8f5b 	dmb	ish
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800b860:	f3bf 8f5b 	dmb	ish
 800b864:	6803      	ldr	r3, [r0, #0]
 800b866:	6818      	ldr	r0, [r3, #0]
 800b868:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800b86a:	7802      	ldrb	r2, [r0, #0]
 800b86c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800b86e:	2a01      	cmp	r2, #1
 800b870:	d00a      	beq.n	800b888 <rcl_timer_fini+0x3c>
 800b872:	f103 0008 	add.w	r0, r3, #8
 800b876:	f008 f883 	bl	8013980 <rcl_guard_condition_fini>
 800b87a:	6820      	ldr	r0, [r4, #0]
 800b87c:	4631      	mov	r1, r6
 800b87e:	47a8      	blx	r5
 800b880:	2300      	movs	r3, #0
 800b882:	6023      	str	r3, [r4, #0]
 800b884:	2000      	movs	r0, #0
 800b886:	bd70      	pop	{r4, r5, r6, pc}
 800b888:	4903      	ldr	r1, [pc, #12]	@ (800b898 <rcl_timer_fini+0x4c>)
 800b88a:	4622      	mov	r2, r4
 800b88c:	f008 fc3e 	bl	801410c <rcl_clock_remove_jump_callback>
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	e7ee      	b.n	800b872 <rcl_timer_fini+0x26>
 800b894:	2000      	movs	r0, #0
 800b896:	4770      	bx	lr
 800b898:	0800b5b9 	.word	0x0800b5b9

0800b89c <rcl_timer_call>:
 800b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a0:	b087      	sub	sp, #28
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d06d      	beq.n	800b982 <rcl_timer_call+0xe6>
 800b8a6:	6803      	ldr	r3, [r0, #0]
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d063      	beq.n	800b976 <rcl_timer_call+0xda>
 800b8ae:	f3bf 8f5b 	dmb	ish
 800b8b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b8b6:	f3bf 8f5b 	dmb	ish
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d150      	bne.n	800b960 <rcl_timer_call+0xc4>
 800b8be:	6803      	ldr	r3, [r0, #0]
 800b8c0:	a904      	add	r1, sp, #16
 800b8c2:	6818      	ldr	r0, [r3, #0]
 800b8c4:	f008 fbb4 	bl	8014030 <rcl_clock_get_now>
 800b8c8:	4605      	mov	r5, r0
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d14a      	bne.n	800b964 <rcl_timer_call+0xc8>
 800b8ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	db4a      	blt.n	800b96c <rcl_timer_call+0xd0>
 800b8d6:	6820      	ldr	r0, [r4, #0]
 800b8d8:	f04f 0a05 	mov.w	sl, #5
 800b8dc:	f8cd a000 	str.w	sl, [sp]
 800b8e0:	3020      	adds	r0, #32
 800b8e2:	f001 f943 	bl	800cb6c <__atomic_exchange_8>
 800b8e6:	6823      	ldr	r3, [r4, #0]
 800b8e8:	f3bf 8f5b 	dmb	ish
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800b8f2:	f3bf 8f5b 	dmb	ish
 800b8f6:	6820      	ldr	r0, [r4, #0]
 800b8f8:	4689      	mov	r9, r1
 800b8fa:	3028      	adds	r0, #40	@ 0x28
 800b8fc:	4651      	mov	r1, sl
 800b8fe:	f001 f8c9 	bl	800ca94 <__atomic_load_8>
 800b902:	4606      	mov	r6, r0
 800b904:	6820      	ldr	r0, [r4, #0]
 800b906:	460f      	mov	r7, r1
 800b908:	3018      	adds	r0, #24
 800b90a:	4651      	mov	r1, sl
 800b90c:	f001 f8c2 	bl	800ca94 <__atomic_load_8>
 800b910:	1836      	adds	r6, r6, r0
 800b912:	4602      	mov	r2, r0
 800b914:	4682      	mov	sl, r0
 800b916:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800b91a:	eb47 0701 	adc.w	r7, r7, r1
 800b91e:	4286      	cmp	r6, r0
 800b920:	460b      	mov	r3, r1
 800b922:	eb77 010c 	sbcs.w	r1, r7, ip
 800b926:	da04      	bge.n	800b932 <rcl_timer_call+0x96>
 800b928:	ea53 0102 	orrs.w	r1, r3, r2
 800b92c:	d12e      	bne.n	800b98c <rcl_timer_call+0xf0>
 800b92e:	4606      	mov	r6, r0
 800b930:	4667      	mov	r7, ip
 800b932:	6820      	ldr	r0, [r4, #0]
 800b934:	2105      	movs	r1, #5
 800b936:	4632      	mov	r2, r6
 800b938:	463b      	mov	r3, r7
 800b93a:	3028      	adds	r0, #40	@ 0x28
 800b93c:	9100      	str	r1, [sp, #0]
 800b93e:	f001 f8df 	bl	800cb00 <__atomic_store_8>
 800b942:	f1bb 0f00 	cmp.w	fp, #0
 800b946:	d00d      	beq.n	800b964 <rcl_timer_call+0xc8>
 800b948:	9a04      	ldr	r2, [sp, #16]
 800b94a:	9b05      	ldr	r3, [sp, #20]
 800b94c:	ebb2 0208 	subs.w	r2, r2, r8
 800b950:	4620      	mov	r0, r4
 800b952:	eb63 0309 	sbc.w	r3, r3, r9
 800b956:	47d8      	blx	fp
 800b958:	4628      	mov	r0, r5
 800b95a:	b007      	add	sp, #28
 800b95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b960:	f240 3521 	movw	r5, #801	@ 0x321
 800b964:	4628      	mov	r0, r5
 800b966:	b007      	add	sp, #28
 800b968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96c:	2501      	movs	r5, #1
 800b96e:	4628      	mov	r0, r5
 800b970:	b007      	add	sp, #28
 800b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b976:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800b97a:	4628      	mov	r0, r5
 800b97c:	b007      	add	sp, #28
 800b97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b982:	250b      	movs	r5, #11
 800b984:	4628      	mov	r0, r5
 800b986:	b007      	add	sp, #28
 800b988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98c:	1b80      	subs	r0, r0, r6
 800b98e:	eb6c 0107 	sbc.w	r1, ip, r7
 800b992:	3801      	subs	r0, #1
 800b994:	f161 0100 	sbc.w	r1, r1, #0
 800b998:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b99c:	f7f5 f8be 	bl	8000b1c <__aeabi_ldivmod>
 800b9a0:	9b02      	ldr	r3, [sp, #8]
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	f141 0100 	adc.w	r1, r1, #0
 800b9a8:	fb00 f303 	mul.w	r3, r0, r3
 800b9ac:	fb01 330a 	mla	r3, r1, sl, r3
 800b9b0:	fba0 0a0a 	umull	r0, sl, r0, sl
 800b9b4:	1986      	adds	r6, r0, r6
 800b9b6:	4453      	add	r3, sl
 800b9b8:	eb43 0707 	adc.w	r7, r3, r7
 800b9bc:	e7b9      	b.n	800b932 <rcl_timer_call+0x96>
 800b9be:	bf00      	nop

0800b9c0 <rcl_timer_is_ready>:
 800b9c0:	b570      	push	{r4, r5, r6, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	b378      	cbz	r0, 800ba26 <rcl_timer_is_ready+0x66>
 800b9c6:	6803      	ldr	r3, [r0, #0]
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	b383      	cbz	r3, 800ba2e <rcl_timer_is_ready+0x6e>
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	b351      	cbz	r1, 800ba26 <rcl_timer_is_ready+0x66>
 800b9d0:	f3bf 8f5b 	dmb	ish
 800b9d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b9d8:	f3bf 8f5b 	dmb	ish
 800b9dc:	b953      	cbnz	r3, 800b9f4 <rcl_timer_is_ready+0x34>
 800b9de:	6803      	ldr	r3, [r0, #0]
 800b9e0:	4669      	mov	r1, sp
 800b9e2:	6818      	ldr	r0, [r3, #0]
 800b9e4:	f008 fb24 	bl	8014030 <rcl_clock_get_now>
 800b9e8:	4606      	mov	r6, r0
 800b9ea:	b140      	cbz	r0, 800b9fe <rcl_timer_is_ready+0x3e>
 800b9ec:	f240 3321 	movw	r3, #801	@ 0x321
 800b9f0:	4298      	cmp	r0, r3
 800b9f2:	d101      	bne.n	800b9f8 <rcl_timer_is_ready+0x38>
 800b9f4:	2600      	movs	r6, #0
 800b9f6:	702e      	strb	r6, [r5, #0]
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	b002      	add	sp, #8
 800b9fc:	bd70      	pop	{r4, r5, r6, pc}
 800b9fe:	6820      	ldr	r0, [r4, #0]
 800ba00:	2105      	movs	r1, #5
 800ba02:	3028      	adds	r0, #40	@ 0x28
 800ba04:	f001 f846 	bl	800ca94 <__atomic_load_8>
 800ba08:	9b00      	ldr	r3, [sp, #0]
 800ba0a:	1ac0      	subs	r0, r0, r3
 800ba0c:	9b01      	ldr	r3, [sp, #4]
 800ba0e:	eb61 0103 	sbc.w	r1, r1, r3
 800ba12:	2801      	cmp	r0, #1
 800ba14:	f171 0300 	sbcs.w	r3, r1, #0
 800ba18:	bfb4      	ite	lt
 800ba1a:	2301      	movlt	r3, #1
 800ba1c:	2300      	movge	r3, #0
 800ba1e:	4630      	mov	r0, r6
 800ba20:	702b      	strb	r3, [r5, #0]
 800ba22:	b002      	add	sp, #8
 800ba24:	bd70      	pop	{r4, r5, r6, pc}
 800ba26:	260b      	movs	r6, #11
 800ba28:	4630      	mov	r0, r6
 800ba2a:	b002      	add	sp, #8
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
 800ba2e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800ba32:	e7e1      	b.n	800b9f8 <rcl_timer_is_ready+0x38>

0800ba34 <rcl_timer_get_time_until_next_call>:
 800ba34:	b570      	push	{r4, r5, r6, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	b330      	cbz	r0, 800ba88 <rcl_timer_get_time_until_next_call+0x54>
 800ba3a:	6803      	ldr	r3, [r0, #0]
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	b33b      	cbz	r3, 800ba90 <rcl_timer_get_time_until_next_call+0x5c>
 800ba40:	460d      	mov	r5, r1
 800ba42:	b309      	cbz	r1, 800ba88 <rcl_timer_get_time_until_next_call+0x54>
 800ba44:	f3bf 8f5b 	dmb	ish
 800ba48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ba4c:	f3bf 8f5b 	dmb	ish
 800ba50:	b9ab      	cbnz	r3, 800ba7e <rcl_timer_get_time_until_next_call+0x4a>
 800ba52:	6803      	ldr	r3, [r0, #0]
 800ba54:	4669      	mov	r1, sp
 800ba56:	6818      	ldr	r0, [r3, #0]
 800ba58:	f008 faea 	bl	8014030 <rcl_clock_get_now>
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	b958      	cbnz	r0, 800ba78 <rcl_timer_get_time_until_next_call+0x44>
 800ba60:	6820      	ldr	r0, [r4, #0]
 800ba62:	2105      	movs	r1, #5
 800ba64:	3028      	adds	r0, #40	@ 0x28
 800ba66:	f001 f815 	bl	800ca94 <__atomic_load_8>
 800ba6a:	9b00      	ldr	r3, [sp, #0]
 800ba6c:	1ac0      	subs	r0, r0, r3
 800ba6e:	9b01      	ldr	r3, [sp, #4]
 800ba70:	6028      	str	r0, [r5, #0]
 800ba72:	eb61 0103 	sbc.w	r1, r1, r3
 800ba76:	6069      	str	r1, [r5, #4]
 800ba78:	4630      	mov	r0, r6
 800ba7a:	b002      	add	sp, #8
 800ba7c:	bd70      	pop	{r4, r5, r6, pc}
 800ba7e:	f240 3621 	movw	r6, #801	@ 0x321
 800ba82:	4630      	mov	r0, r6
 800ba84:	b002      	add	sp, #8
 800ba86:	bd70      	pop	{r4, r5, r6, pc}
 800ba88:	260b      	movs	r6, #11
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	b002      	add	sp, #8
 800ba8e:	bd70      	pop	{r4, r5, r6, pc}
 800ba90:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800ba94:	e7f0      	b.n	800ba78 <rcl_timer_get_time_until_next_call+0x44>
 800ba96:	bf00      	nop

0800ba98 <rcl_timer_get_guard_condition>:
 800ba98:	b130      	cbz	r0, 800baa8 <rcl_timer_get_guard_condition+0x10>
 800ba9a:	6800      	ldr	r0, [r0, #0]
 800ba9c:	b120      	cbz	r0, 800baa8 <rcl_timer_get_guard_condition+0x10>
 800ba9e:	68c3      	ldr	r3, [r0, #12]
 800baa0:	b10b      	cbz	r3, 800baa6 <rcl_timer_get_guard_condition+0xe>
 800baa2:	3008      	adds	r0, #8
 800baa4:	4770      	bx	lr
 800baa6:	4618      	mov	r0, r3
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop

0800baac <_rclc_check_for_new_data>:
 800baac:	2800      	cmp	r0, #0
 800baae:	d046      	beq.n	800bb3e <_rclc_check_for_new_data+0x92>
 800bab0:	b510      	push	{r4, lr}
 800bab2:	7802      	ldrb	r2, [r0, #0]
 800bab4:	b084      	sub	sp, #16
 800bab6:	4603      	mov	r3, r0
 800bab8:	2a0a      	cmp	r2, #10
 800baba:	d842      	bhi.n	800bb42 <_rclc_check_for_new_data+0x96>
 800babc:	e8df f002 	tbb	[pc, r2]
 800bac0:	14181212 	.word	0x14181212
 800bac4:	06060614 	.word	0x06060614
 800bac8:	2e1a      	.short	0x2e1a
 800baca:	16          	.byte	0x16
 800bacb:	00          	.byte	0x00
 800bacc:	6a0a      	ldr	r2, [r1, #32]
 800bace:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bad0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bad4:	2000      	movs	r0, #0
 800bad6:	1a12      	subs	r2, r2, r0
 800bad8:	bf18      	it	ne
 800bada:	2201      	movne	r2, #1
 800badc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800bae0:	b004      	add	sp, #16
 800bae2:	bd10      	pop	{r4, pc}
 800bae4:	680a      	ldr	r2, [r1, #0]
 800bae6:	e7f2      	b.n	800bace <_rclc_check_for_new_data+0x22>
 800bae8:	698a      	ldr	r2, [r1, #24]
 800baea:	e7f0      	b.n	800bace <_rclc_check_for_new_data+0x22>
 800baec:	688a      	ldr	r2, [r1, #8]
 800baee:	e7ee      	b.n	800bace <_rclc_check_for_new_data+0x22>
 800baf0:	690a      	ldr	r2, [r1, #16]
 800baf2:	e7ec      	b.n	800bace <_rclc_check_for_new_data+0x22>
 800baf4:	685c      	ldr	r4, [r3, #4]
 800baf6:	4608      	mov	r0, r1
 800baf8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800bafc:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800bb00:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800bb04:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800bb0e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800bb12:	f104 0110 	add.w	r1, r4, #16
 800bb16:	f009 fac7 	bl	80150a8 <rcl_action_client_wait_set_get_entities_ready>
 800bb1a:	e7e1      	b.n	800bae0 <_rclc_check_for_new_data+0x34>
 800bb1c:	685c      	ldr	r4, [r3, #4]
 800bb1e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800bb22:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800bb26:	e9cd 3200 	strd	r3, r2, [sp]
 800bb2a:	4608      	mov	r0, r1
 800bb2c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800bb30:	f104 0220 	add.w	r2, r4, #32
 800bb34:	f104 0110 	add.w	r1, r4, #16
 800bb38:	f009 fcce 	bl	80154d8 <rcl_action_server_wait_set_get_entities_ready>
 800bb3c:	e7d0      	b.n	800bae0 <_rclc_check_for_new_data+0x34>
 800bb3e:	200b      	movs	r0, #11
 800bb40:	4770      	bx	lr
 800bb42:	2001      	movs	r0, #1
 800bb44:	e7cc      	b.n	800bae0 <_rclc_check_for_new_data+0x34>
 800bb46:	bf00      	nop

0800bb48 <_rclc_take_new_data>:
 800bb48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb4a:	b09b      	sub	sp, #108	@ 0x6c
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	f000 8088 	beq.w	800bc62 <_rclc_take_new_data+0x11a>
 800bb52:	7803      	ldrb	r3, [r0, #0]
 800bb54:	4604      	mov	r4, r0
 800bb56:	2b0a      	cmp	r3, #10
 800bb58:	f200 8167 	bhi.w	800be2a <_rclc_take_new_data+0x2e2>
 800bb5c:	e8df f003 	tbb	[pc, r3]
 800bb60:	44152d2d 	.word	0x44152d2d
 800bb64:	19191944 	.word	0x19191944
 800bb68:	065a      	.short	0x065a
 800bb6a:	15          	.byte	0x15
 800bb6b:	00          	.byte	0x00
 800bb6c:	6840      	ldr	r0, [r0, #4]
 800bb6e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f040 80b2 	bne.w	800bcdc <_rclc_take_new_data+0x194>
 800bb78:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f040 80e4 	bne.w	800bd4a <_rclc_take_new_data+0x202>
 800bb82:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d16f      	bne.n	800bc6a <_rclc_take_new_data+0x122>
 800bb8a:	2500      	movs	r5, #0
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	b01b      	add	sp, #108	@ 0x6c
 800bb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb92:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bb94:	6a0b      	ldr	r3, [r1, #32]
 800bb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d0f5      	beq.n	800bb8a <_rclc_take_new_data+0x42>
 800bb9e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bba2:	f104 0110 	add.w	r1, r4, #16
 800bba6:	f008 f91f 	bl	8013de8 <rcl_take_request>
 800bbaa:	4605      	mov	r5, r0
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d0ec      	beq.n	800bb8a <_rclc_take_new_data+0x42>
 800bbb0:	f240 2359 	movw	r3, #601	@ 0x259
 800bbb4:	4298      	cmp	r0, r3
 800bbb6:	d013      	beq.n	800bbe0 <_rclc_take_new_data+0x98>
 800bbb8:	e029      	b.n	800bc0e <_rclc_take_new_data+0xc6>
 800bbba:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bbbc:	680b      	ldr	r3, [r1, #0]
 800bbbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d0e1      	beq.n	800bb8a <_rclc_take_new_data+0x42>
 800bbc6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	aa0a      	add	r2, sp, #40	@ 0x28
 800bbce:	f7ff fc8b 	bl	800b4e8 <rcl_take>
 800bbd2:	4605      	mov	r5, r0
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d0d9      	beq.n	800bb8c <_rclc_take_new_data+0x44>
 800bbd8:	f240 1391 	movw	r3, #401	@ 0x191
 800bbdc:	4298      	cmp	r0, r3
 800bbde:	d116      	bne.n	800bc0e <_rclc_take_new_data+0xc6>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800bbe6:	e7d1      	b.n	800bb8c <_rclc_take_new_data+0x44>
 800bbe8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bbea:	698b      	ldr	r3, [r1, #24]
 800bbec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d0ca      	beq.n	800bb8a <_rclc_take_new_data+0x42>
 800bbf4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bbf8:	f104 0110 	add.w	r1, r4, #16
 800bbfc:	f007 fda4 	bl	8013748 <rcl_take_response>
 800bc00:	4605      	mov	r5, r0
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d0c1      	beq.n	800bb8a <_rclc_take_new_data+0x42>
 800bc06:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800bc0a:	4298      	cmp	r0, r3
 800bc0c:	d0be      	beq.n	800bb8c <_rclc_take_new_data+0x44>
 800bc0e:	f001 f813 	bl	800cc38 <rcutils_reset_error>
 800bc12:	e7bb      	b.n	800bb8c <_rclc_take_new_data+0x44>
 800bc14:	6840      	ldr	r0, [r0, #4]
 800bc16:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d17d      	bne.n	800bd1a <_rclc_take_new_data+0x1d2>
 800bc1e:	69c3      	ldr	r3, [r0, #28]
 800bc20:	b11b      	cbz	r3, 800bc2a <_rclc_take_new_data+0xe2>
 800bc22:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d144      	bne.n	800bcb4 <_rclc_take_new_data+0x16c>
 800bc2a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f040 80ac 	bne.w	800bd8c <_rclc_take_new_data+0x244>
 800bc34:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d0a6      	beq.n	800bb8a <_rclc_take_new_data+0x42>
 800bc3c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800bc3e:	a90a      	add	r1, sp, #40	@ 0x28
 800bc40:	3010      	adds	r0, #16
 800bc42:	f009 f909 	bl	8014e58 <rcl_action_take_result_response>
 800bc46:	4605      	mov	r5, r0
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d1e0      	bne.n	800bc0e <_rclc_take_new_data+0xc6>
 800bc4c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc50:	6860      	ldr	r0, [r4, #4]
 800bc52:	f009 fd65 	bl	8015720 <rclc_action_find_handle_by_result_request_sequence_number>
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d098      	beq.n	800bb8c <_rclc_take_new_data+0x44>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800bc60:	e794      	b.n	800bb8c <_rclc_take_new_data+0x44>
 800bc62:	250b      	movs	r5, #11
 800bc64:	4628      	mov	r0, r5
 800bc66:	b01b      	add	sp, #108	@ 0x6c
 800bc68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc6a:	ae04      	add	r6, sp, #16
 800bc6c:	aa0a      	add	r2, sp, #40	@ 0x28
 800bc6e:	3010      	adds	r0, #16
 800bc70:	4631      	mov	r1, r6
 800bc72:	f009 fb65 	bl	8015340 <rcl_action_take_cancel_request>
 800bc76:	4605      	mov	r5, r0
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d1c8      	bne.n	800bc0e <_rclc_take_new_data+0xc6>
 800bc7c:	6860      	ldr	r0, [r4, #4]
 800bc7e:	a90a      	add	r1, sp, #40	@ 0x28
 800bc80:	f009 fd0c 	bl	801569c <rclc_action_find_goal_handle_by_uuid>
 800bc84:	4607      	mov	r7, r0
 800bc86:	2800      	cmp	r0, #0
 800bc88:	f000 80bb 	beq.w	800be02 <_rclc_take_new_data+0x2ba>
 800bc8c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800bc90:	2101      	movs	r1, #1
 800bc92:	f009 fc8d 	bl	80155b0 <rcl_action_transition_goal_state>
 800bc96:	2803      	cmp	r0, #3
 800bc98:	4684      	mov	ip, r0
 800bc9a:	f040 80a7 	bne.w	800bdec <_rclc_take_new_data+0x2a4>
 800bc9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bca0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800bca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bca6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bcaa:	e884 0003 	stmia.w	r4, {r0, r1}
 800bcae:	f887 c008 	strb.w	ip, [r7, #8]
 800bcb2:	e76b      	b.n	800bb8c <_rclc_take_new_data+0x44>
 800bcb4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bcb6:	3010      	adds	r0, #16
 800bcb8:	f009 f94e 	bl	8014f58 <rcl_action_take_feedback>
 800bcbc:	4605      	mov	r5, r0
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d1a5      	bne.n	800bc0e <_rclc_take_new_data+0xc6>
 800bcc2:	6860      	ldr	r0, [r4, #4]
 800bcc4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bcc6:	f009 fce9 	bl	801569c <rclc_action_find_goal_handle_by_uuid>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2800      	cmp	r0, #0
 800bcce:	f000 80a3 	beq.w	800be18 <_rclc_take_new_data+0x2d0>
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	6860      	ldr	r0, [r4, #4]
 800bcd6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800bcda:	e7a6      	b.n	800bc2a <_rclc_take_new_data+0xe2>
 800bcdc:	f009 fcb8 	bl	8015650 <rclc_action_take_goal_handle>
 800bce0:	4606      	mov	r6, r0
 800bce2:	6860      	ldr	r0, [r4, #4]
 800bce4:	2e00      	cmp	r6, #0
 800bce6:	f43f af47 	beq.w	800bb78 <_rclc_take_new_data+0x30>
 800bcea:	6070      	str	r0, [r6, #4]
 800bcec:	69f2      	ldr	r2, [r6, #28]
 800bcee:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800bcf2:	3010      	adds	r0, #16
 800bcf4:	f009 fa6c 	bl	80151d0 <rcl_action_take_goal_request>
 800bcf8:	4605      	mov	r5, r0
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	f040 808e 	bne.w	800be1c <_rclc_take_new_data+0x2d4>
 800bd00:	69f7      	ldr	r7, [r6, #28]
 800bd02:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bd04:	7235      	strb	r5, [r6, #8]
 800bd06:	f8c6 0009 	str.w	r0, [r6, #9]
 800bd0a:	f8c6 100d 	str.w	r1, [r6, #13]
 800bd0e:	6860      	ldr	r0, [r4, #4]
 800bd10:	f8c6 2011 	str.w	r2, [r6, #17]
 800bd14:	f8c6 3015 	str.w	r3, [r6, #21]
 800bd18:	e72e      	b.n	800bb78 <_rclc_take_new_data+0x30>
 800bd1a:	aa04      	add	r2, sp, #16
 800bd1c:	a90a      	add	r1, sp, #40	@ 0x28
 800bd1e:	3010      	adds	r0, #16
 800bd20:	f009 f822 	bl	8014d68 <rcl_action_take_goal_response>
 800bd24:	4605      	mov	r5, r0
 800bd26:	2800      	cmp	r0, #0
 800bd28:	f47f af71 	bne.w	800bc0e <_rclc_take_new_data+0xc6>
 800bd2c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd30:	6860      	ldr	r0, [r4, #4]
 800bd32:	f009 fce3 	bl	80156fc <rclc_action_find_handle_by_goal_request_sequence_number>
 800bd36:	b130      	cbz	r0, 800bd46 <_rclc_take_new_data+0x1fe>
 800bd38:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800bd3c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800bd40:	2201      	movs	r2, #1
 800bd42:	f880 2020 	strb.w	r2, [r0, #32]
 800bd46:	6860      	ldr	r0, [r4, #4]
 800bd48:	e769      	b.n	800bc1e <_rclc_take_new_data+0xd6>
 800bd4a:	aa04      	add	r2, sp, #16
 800bd4c:	3010      	adds	r0, #16
 800bd4e:	a90a      	add	r1, sp, #40	@ 0x28
 800bd50:	f009 fab6 	bl	80152c0 <rcl_action_take_result_request>
 800bd54:	4605      	mov	r5, r0
 800bd56:	2800      	cmp	r0, #0
 800bd58:	f47f af59 	bne.w	800bc0e <_rclc_take_new_data+0xc6>
 800bd5c:	6860      	ldr	r0, [r4, #4]
 800bd5e:	a904      	add	r1, sp, #16
 800bd60:	f009 fc9c 	bl	801569c <rclc_action_find_goal_handle_by_uuid>
 800bd64:	4607      	mov	r7, r0
 800bd66:	b160      	cbz	r0, 800bd82 <_rclc_take_new_data+0x23a>
 800bd68:	ad0a      	add	r5, sp, #40	@ 0x28
 800bd6a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800bd6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd70:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bd72:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd76:	f04f 0c02 	mov.w	ip, #2
 800bd7a:	e886 0003 	stmia.w	r6, {r0, r1}
 800bd7e:	f887 c008 	strb.w	ip, [r7, #8]
 800bd82:	6860      	ldr	r0, [r4, #4]
 800bd84:	2300      	movs	r3, #0
 800bd86:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800bd8a:	e6fa      	b.n	800bb82 <_rclc_take_new_data+0x3a>
 800bd8c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800bd90:	a90a      	add	r1, sp, #40	@ 0x28
 800bd92:	3010      	adds	r0, #16
 800bd94:	f009 f8a0 	bl	8014ed8 <rcl_action_take_cancel_response>
 800bd98:	4605      	mov	r5, r0
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	f47f af37 	bne.w	800bc0e <_rclc_take_new_data+0xc6>
 800bda0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bda4:	6860      	ldr	r0, [r4, #4]
 800bda6:	f009 fccd 	bl	8015744 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800bdaa:	4606      	mov	r6, r0
 800bdac:	6860      	ldr	r0, [r4, #4]
 800bdae:	2e00      	cmp	r6, #0
 800bdb0:	f43f af40 	beq.w	800bc34 <_rclc_take_new_data+0xec>
 800bdb4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bdb6:	2701      	movs	r7, #1
 800bdb8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f43f af3a 	beq.w	800bc34 <_rclc_take_new_data+0xec>
 800bdc0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bdc2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800bdc6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bdca:	f009 fc67 	bl	801569c <rclc_action_find_goal_handle_by_uuid>
 800bdce:	b138      	cbz	r0, 800bde0 <_rclc_take_new_data+0x298>
 800bdd0:	6860      	ldr	r0, [r4, #4]
 800bdd2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bdd4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800bdd8:	3501      	adds	r5, #1
 800bdda:	42ab      	cmp	r3, r5
 800bddc:	d8f0      	bhi.n	800bdc0 <_rclc_take_new_data+0x278>
 800bdde:	e729      	b.n	800bc34 <_rclc_take_new_data+0xec>
 800bde0:	6860      	ldr	r0, [r4, #4]
 800bde2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bde4:	3501      	adds	r5, #1
 800bde6:	42ab      	cmp	r3, r5
 800bde8:	d8ea      	bhi.n	800bdc0 <_rclc_take_new_data+0x278>
 800bdea:	e723      	b.n	800bc34 <_rclc_take_new_data+0xec>
 800bdec:	ab06      	add	r3, sp, #24
 800bdee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bdf0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bdf4:	2103      	movs	r1, #3
 800bdf6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800bdfa:	6860      	ldr	r0, [r4, #4]
 800bdfc:	f009 fd18 	bl	8015830 <rclc_action_server_goal_cancel_reject>
 800be00:	e6c4      	b.n	800bb8c <_rclc_take_new_data+0x44>
 800be02:	ab06      	add	r3, sp, #24
 800be04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be06:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800be0a:	2102      	movs	r1, #2
 800be0c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800be10:	6860      	ldr	r0, [r4, #4]
 800be12:	f009 fd0d 	bl	8015830 <rclc_action_server_goal_cancel_reject>
 800be16:	e6b9      	b.n	800bb8c <_rclc_take_new_data+0x44>
 800be18:	6860      	ldr	r0, [r4, #4]
 800be1a:	e706      	b.n	800bc2a <_rclc_take_new_data+0xe2>
 800be1c:	6860      	ldr	r0, [r4, #4]
 800be1e:	4631      	mov	r1, r6
 800be20:	f009 fc26 	bl	8015670 <rclc_action_remove_used_goal_handle>
 800be24:	f000 ff08 	bl	800cc38 <rcutils_reset_error>
 800be28:	e6b0      	b.n	800bb8c <_rclc_take_new_data+0x44>
 800be2a:	2501      	movs	r5, #1
 800be2c:	e6ae      	b.n	800bb8c <_rclc_take_new_data+0x44>
 800be2e:	bf00      	nop

0800be30 <_rclc_execute.part.0>:
 800be30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be32:	7803      	ldrb	r3, [r0, #0]
 800be34:	b087      	sub	sp, #28
 800be36:	4604      	mov	r4, r0
 800be38:	2b0a      	cmp	r3, #10
 800be3a:	f200 8136 	bhi.w	800c0aa <_rclc_execute.part.0+0x27a>
 800be3e:	e8df f003 	tbb	[pc, r3]
 800be42:	435e      	.short	0x435e
 800be44:	06a1664f 	.word	0x06a1664f
 800be48:	6c1e0606 	.word	0x6c1e0606
 800be4c:	59          	.byte	0x59
 800be4d:	00          	.byte	0x00
 800be4e:	2b06      	cmp	r3, #6
 800be50:	f000 8122 	beq.w	800c098 <_rclc_execute.part.0+0x268>
 800be54:	2b07      	cmp	r3, #7
 800be56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800be58:	f040 8118 	bne.w	800c08c <_rclc_execute.part.0+0x25c>
 800be5c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800be60:	6880      	ldr	r0, [r0, #8]
 800be62:	4798      	blx	r3
 800be64:	f104 0110 	add.w	r1, r4, #16
 800be68:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800be6a:	6860      	ldr	r0, [r4, #4]
 800be6c:	f007 fffc 	bl	8013e68 <rcl_send_response>
 800be70:	2800      	cmp	r0, #0
 800be72:	d033      	beq.n	800bedc <_rclc_execute.part.0+0xac>
 800be74:	9005      	str	r0, [sp, #20]
 800be76:	f000 fedf 	bl	800cc38 <rcutils_reset_error>
 800be7a:	9805      	ldr	r0, [sp, #20]
 800be7c:	e02e      	b.n	800bedc <_rclc_execute.part.0+0xac>
 800be7e:	6840      	ldr	r0, [r0, #4]
 800be80:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800be84:	2b00      	cmp	r3, #0
 800be86:	f000 8086 	beq.w	800bf96 <_rclc_execute.part.0+0x166>
 800be8a:	2600      	movs	r6, #0
 800be8c:	2701      	movs	r7, #1
 800be8e:	e004      	b.n	800be9a <_rclc_execute.part.0+0x6a>
 800be90:	f009 fbb8 	bl	8015604 <rclc_action_send_result_request>
 800be94:	b998      	cbnz	r0, 800bebe <_rclc_execute.part.0+0x8e>
 800be96:	722f      	strb	r7, [r5, #8]
 800be98:	6860      	ldr	r0, [r4, #4]
 800be9a:	f009 fc65 	bl	8015768 <rclc_action_find_first_handle_with_goal_response>
 800be9e:	4605      	mov	r5, r0
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d077      	beq.n	800bf94 <_rclc_execute.part.0+0x164>
 800bea4:	6863      	ldr	r3, [r4, #4]
 800bea6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800beae:	f885 6020 	strb.w	r6, [r5, #32]
 800beb2:	4798      	blx	r3
 800beb4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800beb8:	4628      	mov	r0, r5
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1e8      	bne.n	800be90 <_rclc_execute.part.0+0x60>
 800bebe:	6860      	ldr	r0, [r4, #4]
 800bec0:	4629      	mov	r1, r5
 800bec2:	f009 fbd5 	bl	8015670 <rclc_action_remove_used_goal_handle>
 800bec6:	e7e7      	b.n	800be98 <_rclc_execute.part.0+0x68>
 800bec8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800becc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800bed0:	2d00      	cmp	r5, #0
 800bed2:	f000 80c9 	beq.w	800c068 <_rclc_execute.part.0+0x238>
 800bed6:	6880      	ldr	r0, [r0, #8]
 800bed8:	4798      	blx	r3
 800beda:	2000      	movs	r0, #0
 800bedc:	b007      	add	sp, #28
 800bede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bee0:	6840      	ldr	r0, [r0, #4]
 800bee2:	f7ff fcdb 	bl	800b89c <rcl_timer_call>
 800bee6:	f240 3321 	movw	r3, #801	@ 0x321
 800beea:	4298      	cmp	r0, r3
 800beec:	d004      	beq.n	800bef8 <_rclc_execute.part.0+0xc8>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d0f4      	beq.n	800bedc <_rclc_execute.part.0+0xac>
 800bef2:	e7bf      	b.n	800be74 <_rclc_execute.part.0+0x44>
 800bef4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bef6:	4798      	blx	r3
 800bef8:	2000      	movs	r0, #0
 800befa:	b007      	add	sp, #28
 800befc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800befe:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800bf02:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bf04:	b925      	cbnz	r5, 800bf10 <_rclc_execute.part.0+0xe0>
 800bf06:	4628      	mov	r0, r5
 800bf08:	4798      	blx	r3
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	e7e6      	b.n	800bedc <_rclc_execute.part.0+0xac>
 800bf0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bf10:	68a0      	ldr	r0, [r4, #8]
 800bf12:	4798      	blx	r3
 800bf14:	2000      	movs	r0, #0
 800bf16:	b007      	add	sp, #28
 800bf18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf1a:	6840      	ldr	r0, [r0, #4]
 800bf1c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800bf20:	bb3b      	cbnz	r3, 800bf72 <_rclc_execute.part.0+0x142>
 800bf22:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d07b      	beq.n	800c022 <_rclc_execute.part.0+0x1f2>
 800bf2a:	f640 0634 	movw	r6, #2100	@ 0x834
 800bf2e:	2701      	movs	r7, #1
 800bf30:	e007      	b.n	800bf42 <_rclc_execute.part.0+0x112>
 800bf32:	4628      	mov	r0, r5
 800bf34:	f009 fc30 	bl	8015798 <rclc_action_server_response_goal_request>
 800bf38:	6860      	ldr	r0, [r4, #4]
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	f009 fb98 	bl	8015670 <rclc_action_remove_used_goal_handle>
 800bf40:	6860      	ldr	r0, [r4, #4]
 800bf42:	2100      	movs	r1, #0
 800bf44:	f009 fbc2 	bl	80156cc <rclc_action_find_first_handle_by_status>
 800bf48:	4605      	mov	r5, r0
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d066      	beq.n	800c01c <_rclc_execute.part.0+0x1ec>
 800bf4e:	6863      	ldr	r3, [r4, #4]
 800bf50:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bf52:	699b      	ldr	r3, [r3, #24]
 800bf54:	4798      	blx	r3
 800bf56:	42b0      	cmp	r0, r6
 800bf58:	f04f 0100 	mov.w	r1, #0
 800bf5c:	d1e9      	bne.n	800bf32 <_rclc_execute.part.0+0x102>
 800bf5e:	2101      	movs	r1, #1
 800bf60:	4628      	mov	r0, r5
 800bf62:	f009 fc19 	bl	8015798 <rclc_action_server_response_goal_request>
 800bf66:	722f      	strb	r7, [r5, #8]
 800bf68:	e7ea      	b.n	800bf40 <_rclc_execute.part.0+0x110>
 800bf6a:	6848      	ldr	r0, [r1, #4]
 800bf6c:	f009 fb80 	bl	8015670 <rclc_action_remove_used_goal_handle>
 800bf70:	6860      	ldr	r0, [r4, #4]
 800bf72:	f009 fbb7 	bl	80156e4 <rclc_action_find_first_terminated_handle>
 800bf76:	4601      	mov	r1, r0
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	d1f6      	bne.n	800bf6a <_rclc_execute.part.0+0x13a>
 800bf7c:	6860      	ldr	r0, [r4, #4]
 800bf7e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800bf82:	e7ce      	b.n	800bf22 <_rclc_execute.part.0+0xf2>
 800bf84:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bf86:	6880      	ldr	r0, [r0, #8]
 800bf88:	f104 0110 	add.w	r1, r4, #16
 800bf8c:	4798      	blx	r3
 800bf8e:	2000      	movs	r0, #0
 800bf90:	b007      	add	sp, #28
 800bf92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf94:	6860      	ldr	r0, [r4, #4]
 800bf96:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bf9a:	b18b      	cbz	r3, 800bfc0 <_rclc_execute.part.0+0x190>
 800bf9c:	68c5      	ldr	r5, [r0, #12]
 800bf9e:	b32d      	cbz	r5, 800bfec <_rclc_execute.part.0+0x1bc>
 800bfa0:	2600      	movs	r6, #0
 800bfa2:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800bfa6:	b143      	cbz	r3, 800bfba <_rclc_execute.part.0+0x18a>
 800bfa8:	69c3      	ldr	r3, [r0, #28]
 800bfaa:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800bfae:	b123      	cbz	r3, 800bfba <_rclc_execute.part.0+0x18a>
 800bfb0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bfb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	4798      	blx	r3
 800bfb8:	6860      	ldr	r0, [r4, #4]
 800bfba:	682d      	ldr	r5, [r5, #0]
 800bfbc:	2d00      	cmp	r5, #0
 800bfbe:	d1f0      	bne.n	800bfa2 <_rclc_execute.part.0+0x172>
 800bfc0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bfc4:	b193      	cbz	r3, 800bfec <_rclc_execute.part.0+0x1bc>
 800bfc6:	68c5      	ldr	r5, [r0, #12]
 800bfc8:	b185      	cbz	r5, 800bfec <_rclc_execute.part.0+0x1bc>
 800bfca:	2600      	movs	r6, #0
 800bfcc:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800bfd0:	b14b      	cbz	r3, 800bfe6 <_rclc_execute.part.0+0x1b6>
 800bfd2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800bfd4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800bfd8:	b12b      	cbz	r3, 800bfe6 <_rclc_execute.part.0+0x1b6>
 800bfda:	4628      	mov	r0, r5
 800bfdc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800bfe0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bfe2:	4798      	blx	r3
 800bfe4:	6860      	ldr	r0, [r4, #4]
 800bfe6:	682d      	ldr	r5, [r5, #0]
 800bfe8:	2d00      	cmp	r5, #0
 800bfea:	d1ef      	bne.n	800bfcc <_rclc_execute.part.0+0x19c>
 800bfec:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d081      	beq.n	800bef8 <_rclc_execute.part.0+0xc8>
 800bff4:	2700      	movs	r7, #0
 800bff6:	e00b      	b.n	800c010 <_rclc_execute.part.0+0x1e0>
 800bff8:	6863      	ldr	r3, [r4, #4]
 800bffa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bffc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bffe:	6a1e      	ldr	r6, [r3, #32]
 800c000:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c004:	47b0      	blx	r6
 800c006:	6860      	ldr	r0, [r4, #4]
 800c008:	4629      	mov	r1, r5
 800c00a:	f009 fb31 	bl	8015670 <rclc_action_remove_used_goal_handle>
 800c00e:	6860      	ldr	r0, [r4, #4]
 800c010:	f009 fbb6 	bl	8015780 <rclc_action_find_first_handle_with_result_response>
 800c014:	4605      	mov	r5, r0
 800c016:	2800      	cmp	r0, #0
 800c018:	d1ee      	bne.n	800bff8 <_rclc_execute.part.0+0x1c8>
 800c01a:	e76d      	b.n	800bef8 <_rclc_execute.part.0+0xc8>
 800c01c:	6860      	ldr	r0, [r4, #4]
 800c01e:	f880 5020 	strb.w	r5, [r0, #32]
 800c022:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c026:	2b00      	cmp	r3, #0
 800c028:	f43f af66 	beq.w	800bef8 <_rclc_execute.part.0+0xc8>
 800c02c:	68c5      	ldr	r5, [r0, #12]
 800c02e:	b1b5      	cbz	r5, 800c05e <_rclc_execute.part.0+0x22e>
 800c030:	2602      	movs	r6, #2
 800c032:	e001      	b.n	800c038 <_rclc_execute.part.0+0x208>
 800c034:	682d      	ldr	r5, [r5, #0]
 800c036:	b195      	cbz	r5, 800c05e <_rclc_execute.part.0+0x22e>
 800c038:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c03c:	2b03      	cmp	r3, #3
 800c03e:	d1f9      	bne.n	800c034 <_rclc_execute.part.0+0x204>
 800c040:	69c3      	ldr	r3, [r0, #28]
 800c042:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c044:	4628      	mov	r0, r5
 800c046:	4798      	blx	r3
 800c048:	4603      	mov	r3, r0
 800c04a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c04e:	4628      	mov	r0, r5
 800c050:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c054:	b163      	cbz	r3, 800c070 <_rclc_execute.part.0+0x240>
 800c056:	f009 fbbf 	bl	80157d8 <rclc_action_server_goal_cancel_accept>
 800c05a:	6860      	ldr	r0, [r4, #4]
 800c05c:	e7ea      	b.n	800c034 <_rclc_execute.part.0+0x204>
 800c05e:	2300      	movs	r3, #0
 800c060:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c064:	4618      	mov	r0, r3
 800c066:	e739      	b.n	800bedc <_rclc_execute.part.0+0xac>
 800c068:	4628      	mov	r0, r5
 800c06a:	4798      	blx	r3
 800c06c:	4628      	mov	r0, r5
 800c06e:	e735      	b.n	800bedc <_rclc_execute.part.0+0xac>
 800c070:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c072:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c076:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c07a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c07e:	6860      	ldr	r0, [r4, #4]
 800c080:	2101      	movs	r1, #1
 800c082:	f009 fbd5 	bl	8015830 <rclc_action_server_goal_cancel_reject>
 800c086:	722e      	strb	r6, [r5, #8]
 800c088:	6860      	ldr	r0, [r4, #4]
 800c08a:	e7d3      	b.n	800c034 <_rclc_execute.part.0+0x204>
 800c08c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c08e:	6880      	ldr	r0, [r0, #8]
 800c090:	4798      	blx	r3
 800c092:	f104 0110 	add.w	r1, r4, #16
 800c096:	e6e7      	b.n	800be68 <_rclc_execute.part.0+0x38>
 800c098:	f100 0110 	add.w	r1, r0, #16
 800c09c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c09e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c0a0:	6880      	ldr	r0, [r0, #8]
 800c0a2:	9105      	str	r1, [sp, #20]
 800c0a4:	4798      	blx	r3
 800c0a6:	9905      	ldr	r1, [sp, #20]
 800c0a8:	e6de      	b.n	800be68 <_rclc_execute.part.0+0x38>
 800c0aa:	2001      	movs	r0, #1
 800c0ac:	e716      	b.n	800bedc <_rclc_execute.part.0+0xac>
 800c0ae:	bf00      	nop

0800c0b0 <rclc_executor_trigger_any>:
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d03f      	beq.n	800c134 <rclc_executor_trigger_any+0x84>
 800c0b4:	2900      	cmp	r1, #0
 800c0b6:	d03e      	beq.n	800c136 <rclc_executor_trigger_any+0x86>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c0be:	2200      	movs	r2, #0
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d037      	beq.n	800c134 <rclc_executor_trigger_any+0x84>
 800c0c4:	b430      	push	{r4, r5}
 800c0c6:	f893 c000 	ldrb.w	ip, [r3]
 800c0ca:	f1bc 0f08 	cmp.w	ip, #8
 800c0ce:	d11e      	bne.n	800c10e <rclc_executor_trigger_any+0x5e>
 800c0d0:	685c      	ldr	r4, [r3, #4]
 800c0d2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c0d4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c0d8:	d105      	bne.n	800c0e6 <rclc_executor_trigger_any+0x36>
 800c0da:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c0de:	b910      	cbnz	r0, 800c0e6 <rclc_executor_trigger_any+0x36>
 800c0e0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c0e4:	b128      	cbz	r0, 800c0f2 <rclc_executor_trigger_any+0x42>
 800c0e6:	bc30      	pop	{r4, r5}
 800c0e8:	4770      	bx	lr
 800c0ea:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	d1f9      	bne.n	800c0e6 <rclc_executor_trigger_any+0x36>
 800c0f2:	3201      	adds	r2, #1
 800c0f4:	4291      	cmp	r1, r2
 800c0f6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c0fa:	d018      	beq.n	800c12e <rclc_executor_trigger_any+0x7e>
 800c0fc:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c100:	2800      	cmp	r0, #0
 800c102:	d0f0      	beq.n	800c0e6 <rclc_executor_trigger_any+0x36>
 800c104:	f893 c000 	ldrb.w	ip, [r3]
 800c108:	f1bc 0f08 	cmp.w	ip, #8
 800c10c:	d0e0      	beq.n	800c0d0 <rclc_executor_trigger_any+0x20>
 800c10e:	f1bc 0f09 	cmp.w	ip, #9
 800c112:	d1ea      	bne.n	800c0ea <rclc_executor_trigger_any+0x3a>
 800c114:	685c      	ldr	r4, [r3, #4]
 800c116:	6a25      	ldr	r5, [r4, #32]
 800c118:	2d00      	cmp	r5, #0
 800c11a:	d1e4      	bne.n	800c0e6 <rclc_executor_trigger_any+0x36>
 800c11c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c120:	2800      	cmp	r0, #0
 800c122:	d1e0      	bne.n	800c0e6 <rclc_executor_trigger_any+0x36>
 800c124:	3201      	adds	r2, #1
 800c126:	4291      	cmp	r1, r2
 800c128:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c12c:	d1e6      	bne.n	800c0fc <rclc_executor_trigger_any+0x4c>
 800c12e:	2000      	movs	r0, #0
 800c130:	bc30      	pop	{r4, r5}
 800c132:	4770      	bx	lr
 800c134:	4770      	bx	lr
 800c136:	4608      	mov	r0, r1
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	0000      	movs	r0, r0
	...

0800c140 <rclc_executor_init>:
 800c140:	2800      	cmp	r0, #0
 800c142:	d05f      	beq.n	800c204 <rclc_executor_init+0xc4>
 800c144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c148:	460c      	mov	r4, r1
 800c14a:	b0b0      	sub	sp, #192	@ 0xc0
 800c14c:	2900      	cmp	r1, #0
 800c14e:	d051      	beq.n	800c1f4 <rclc_executor_init+0xb4>
 800c150:	4605      	mov	r5, r0
 800c152:	4618      	mov	r0, r3
 800c154:	4616      	mov	r6, r2
 800c156:	461f      	mov	r7, r3
 800c158:	f000 fc8e 	bl	800ca78 <rcutils_allocator_is_valid>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	d049      	beq.n	800c1f4 <rclc_executor_init+0xb4>
 800c160:	2e00      	cmp	r6, #0
 800c162:	d047      	beq.n	800c1f4 <rclc_executor_init+0xb4>
 800c164:	492c      	ldr	r1, [pc, #176]	@ (800c218 <rclc_executor_init+0xd8>)
 800c166:	2288      	movs	r2, #136	@ 0x88
 800c168:	a80e      	add	r0, sp, #56	@ 0x38
 800c16a:	f00c f98e 	bl	801848a <memcpy>
 800c16e:	a90e      	add	r1, sp, #56	@ 0x38
 800c170:	2288      	movs	r2, #136	@ 0x88
 800c172:	4628      	mov	r0, r5
 800c174:	f00c f989 	bl	801848a <memcpy>
 800c178:	602c      	str	r4, [r5, #0]
 800c17a:	4668      	mov	r0, sp
 800c17c:	60ae      	str	r6, [r5, #8]
 800c17e:	466c      	mov	r4, sp
 800c180:	f008 f822 	bl	80141c8 <rcl_get_zero_initialized_wait_set>
 800c184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c186:	f105 0c14 	add.w	ip, r5, #20
 800c18a:	f8d7 8000 	ldr.w	r8, [r7]
 800c18e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c194:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c19a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c19e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c210 <rclc_executor_init+0xd0>
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	f8cc 3000 	str.w	r3, [ip]
 800c1a8:	6939      	ldr	r1, [r7, #16]
 800c1aa:	612f      	str	r7, [r5, #16]
 800c1ac:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c1b0:	01b0      	lsls	r0, r6, #6
 800c1b2:	47c0      	blx	r8
 800c1b4:	6068      	str	r0, [r5, #4]
 800c1b6:	b338      	cbz	r0, 800c208 <rclc_executor_init+0xc8>
 800c1b8:	2400      	movs	r4, #0
 800c1ba:	e000      	b.n	800c1be <rclc_executor_init+0x7e>
 800c1bc:	6868      	ldr	r0, [r5, #4]
 800c1be:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c1c2:	4631      	mov	r1, r6
 800c1c4:	3401      	adds	r4, #1
 800c1c6:	f000 facb 	bl	800c760 <rclc_executor_handle_init>
 800c1ca:	42a6      	cmp	r6, r4
 800c1cc:	d1f6      	bne.n	800c1bc <rclc_executor_init+0x7c>
 800c1ce:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c1d2:	f000 fab9 	bl	800c748 <rclc_executor_handle_counters_zero_init>
 800c1d6:	4a11      	ldr	r2, [pc, #68]	@ (800c21c <rclc_executor_init+0xdc>)
 800c1d8:	686b      	ldr	r3, [r5, #4]
 800c1da:	2000      	movs	r0, #0
 800c1dc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c1e0:	b163      	cbz	r3, 800c1fc <rclc_executor_init+0xbc>
 800c1e2:	692b      	ldr	r3, [r5, #16]
 800c1e4:	b153      	cbz	r3, 800c1fc <rclc_executor_init+0xbc>
 800c1e6:	68ab      	ldr	r3, [r5, #8]
 800c1e8:	b143      	cbz	r3, 800c1fc <rclc_executor_init+0xbc>
 800c1ea:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c1ee:	b030      	add	sp, #192	@ 0xc0
 800c1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f4:	200b      	movs	r0, #11
 800c1f6:	b030      	add	sp, #192	@ 0xc0
 800c1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	b030      	add	sp, #192	@ 0xc0
 800c200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c204:	200b      	movs	r0, #11
 800c206:	4770      	bx	lr
 800c208:	200a      	movs	r0, #10
 800c20a:	e7f4      	b.n	800c1f6 <rclc_executor_init+0xb6>
 800c20c:	f3af 8000 	nop.w
 800c210:	3b9aca00 	.word	0x3b9aca00
 800c214:	00000000 	.word	0x00000000
 800c218:	08019918 	.word	0x08019918
 800c21c:	0800c0b1 	.word	0x0800c0b1

0800c220 <rclc_executor_fini>:
 800c220:	b308      	cbz	r0, 800c266 <rclc_executor_fini+0x46>
 800c222:	b538      	push	{r3, r4, r5, lr}
 800c224:	4604      	mov	r4, r0
 800c226:	6840      	ldr	r0, [r0, #4]
 800c228:	b1d8      	cbz	r0, 800c262 <rclc_executor_fini+0x42>
 800c22a:	6923      	ldr	r3, [r4, #16]
 800c22c:	b1cb      	cbz	r3, 800c262 <rclc_executor_fini+0x42>
 800c22e:	68a2      	ldr	r2, [r4, #8]
 800c230:	b1ba      	cbz	r2, 800c262 <rclc_executor_fini+0x42>
 800c232:	6919      	ldr	r1, [r3, #16]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	4798      	blx	r3
 800c238:	2300      	movs	r3, #0
 800c23a:	2000      	movs	r0, #0
 800c23c:	2100      	movs	r1, #0
 800c23e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c242:	6063      	str	r3, [r4, #4]
 800c244:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800c248:	f104 0514 	add.w	r5, r4, #20
 800c24c:	f000 fa7c 	bl	800c748 <rclc_executor_handle_counters_zero_init>
 800c250:	4628      	mov	r0, r5
 800c252:	f007 ffcd 	bl	80141f0 <rcl_wait_set_is_valid>
 800c256:	b940      	cbnz	r0, 800c26a <rclc_executor_fini+0x4a>
 800c258:	a309      	add	r3, pc, #36	@ (adr r3, 800c280 <rclc_executor_fini+0x60>)
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68
 800c262:	2000      	movs	r0, #0
 800c264:	bd38      	pop	{r3, r4, r5, pc}
 800c266:	2000      	movs	r0, #0
 800c268:	4770      	bx	lr
 800c26a:	4628      	mov	r0, r5
 800c26c:	f007 ffc6 	bl	80141fc <rcl_wait_set_fini>
 800c270:	2800      	cmp	r0, #0
 800c272:	d0f1      	beq.n	800c258 <rclc_executor_fini+0x38>
 800c274:	f000 fce0 	bl	800cc38 <rcutils_reset_error>
 800c278:	e7ee      	b.n	800c258 <rclc_executor_fini+0x38>
 800c27a:	bf00      	nop
 800c27c:	f3af 8000 	nop.w
 800c280:	3b9aca00 	.word	0x3b9aca00
 800c284:	00000000 	.word	0x00000000

0800c288 <rclc_executor_add_subscription>:
 800c288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800c28e:	b338      	cbz	r0, 800c2e0 <rclc_executor_add_subscription+0x58>
 800c290:	b331      	cbz	r1, 800c2e0 <rclc_executor_add_subscription+0x58>
 800c292:	b32a      	cbz	r2, 800c2e0 <rclc_executor_add_subscription+0x58>
 800c294:	b323      	cbz	r3, 800c2e0 <rclc_executor_add_subscription+0x58>
 800c296:	4604      	mov	r4, r0
 800c298:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800c29c:	42a8      	cmp	r0, r5
 800c29e:	d301      	bcc.n	800c2a4 <rclc_executor_add_subscription+0x1c>
 800c2a0:	2001      	movs	r0, #1
 800c2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2a4:	6866      	ldr	r6, [r4, #4]
 800c2a6:	0187      	lsls	r7, r0, #6
 800c2a8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800c2ac:	2500      	movs	r5, #0
 800c2ae:	55f5      	strb	r5, [r6, r7]
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c2b6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	f104 0514 	add.w	r5, r4, #20
 800c2c0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c2c4:	f88c e001 	strb.w	lr, [ip, #1]
 800c2c8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800c2cc:	60e0      	str	r0, [r4, #12]
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	f007 ff8e 	bl	80141f0 <rcl_wait_set_is_valid>
 800c2d4:	b930      	cbnz	r0, 800c2e4 <rclc_executor_add_subscription+0x5c>
 800c2d6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800c2d8:	3301      	adds	r3, #1
 800c2da:	2000      	movs	r0, #0
 800c2dc:	64a3      	str	r3, [r4, #72]	@ 0x48
 800c2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2e0:	200b      	movs	r0, #11
 800c2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	f007 ff89 	bl	80141fc <rcl_wait_set_fini>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d0f3      	beq.n	800c2d6 <rclc_executor_add_subscription+0x4e>
 800c2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2f0 <rclc_executor_add_timer>:
 800c2f0:	b300      	cbz	r0, 800c334 <rclc_executor_add_timer+0x44>
 800c2f2:	b1f9      	cbz	r1, 800c334 <rclc_executor_add_timer+0x44>
 800c2f4:	b538      	push	{r3, r4, r5, lr}
 800c2f6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	d301      	bcc.n	800c304 <rclc_executor_add_timer+0x14>
 800c300:	2001      	movs	r0, #1
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	6840      	ldr	r0, [r0, #4]
 800c306:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800c30a:	019d      	lsls	r5, r3, #6
 800c30c:	6051      	str	r1, [r2, #4]
 800c30e:	2102      	movs	r1, #2
 800c310:	5341      	strh	r1, [r0, r5]
 800c312:	3301      	adds	r3, #1
 800c314:	2000      	movs	r0, #0
 800c316:	2101      	movs	r1, #1
 800c318:	f104 0514 	add.w	r5, r4, #20
 800c31c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800c31e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800c320:	4628      	mov	r0, r5
 800c322:	60e3      	str	r3, [r4, #12]
 800c324:	f007 ff64 	bl	80141f0 <rcl_wait_set_is_valid>
 800c328:	b930      	cbnz	r0, 800c338 <rclc_executor_add_timer+0x48>
 800c32a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800c32c:	3301      	adds	r3, #1
 800c32e:	2000      	movs	r0, #0
 800c330:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	200b      	movs	r0, #11
 800c336:	4770      	bx	lr
 800c338:	4628      	mov	r0, r5
 800c33a:	f007 ff5f 	bl	80141fc <rcl_wait_set_fini>
 800c33e:	2800      	cmp	r0, #0
 800c340:	d0f3      	beq.n	800c32a <rclc_executor_add_timer+0x3a>
 800c342:	bd38      	pop	{r3, r4, r5, pc}

0800c344 <rclc_executor_prepare>:
 800c344:	2800      	cmp	r0, #0
 800c346:	d044      	beq.n	800c3d2 <rclc_executor_prepare+0x8e>
 800c348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c34a:	f100 0514 	add.w	r5, r0, #20
 800c34e:	b09b      	sub	sp, #108	@ 0x6c
 800c350:	4604      	mov	r4, r0
 800c352:	4628      	mov	r0, r5
 800c354:	f007 ff4c 	bl	80141f0 <rcl_wait_set_is_valid>
 800c358:	b110      	cbz	r0, 800c360 <rclc_executor_prepare+0x1c>
 800c35a:	2000      	movs	r0, #0
 800c35c:	b01b      	add	sp, #108	@ 0x6c
 800c35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c360:	4628      	mov	r0, r5
 800c362:	f007 ff4b 	bl	80141fc <rcl_wait_set_fini>
 800c366:	2800      	cmp	r0, #0
 800c368:	d130      	bne.n	800c3cc <rclc_executor_prepare+0x88>
 800c36a:	a80c      	add	r0, sp, #48	@ 0x30
 800c36c:	f007 ff2c 	bl	80141c8 <rcl_get_zero_initialized_wait_set>
 800c370:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c374:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c378:	46ae      	mov	lr, r5
 800c37a:	6927      	ldr	r7, [r4, #16]
 800c37c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c380:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c384:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c388:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c38c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c390:	f8dc 3000 	ldr.w	r3, [ip]
 800c394:	f8ce 3000 	str.w	r3, [lr]
 800c398:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c39a:	ae04      	add	r6, sp, #16
 800c39c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	6822      	ldr	r2, [r4, #0]
 800c3a2:	6033      	str	r3, [r6, #0]
 800c3a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c3a6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c3a8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c3ac:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800c3b0:	e9cd 2100 	strd	r2, r1, [sp]
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800c3b8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c3ba:	f008 fa1d 	bl	80147f8 <rcl_wait_set_init>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d0cc      	beq.n	800c35c <rclc_executor_prepare+0x18>
 800c3c2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c3c4:	f000 fc38 	bl	800cc38 <rcutils_reset_error>
 800c3c8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c3ca:	e7c7      	b.n	800c35c <rclc_executor_prepare+0x18>
 800c3cc:	f000 fc34 	bl	800cc38 <rcutils_reset_error>
 800c3d0:	e7cb      	b.n	800c36a <rclc_executor_prepare+0x26>
 800c3d2:	200b      	movs	r0, #11
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop

0800c3d8 <rclc_executor_spin_some.part.0>:
 800c3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	f100 0614 	add.w	r6, r0, #20
 800c3e0:	b083      	sub	sp, #12
 800c3e2:	4691      	mov	r9, r2
 800c3e4:	4698      	mov	r8, r3
 800c3e6:	4605      	mov	r5, r0
 800c3e8:	f7ff ffac 	bl	800c344 <rclc_executor_prepare>
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	f007 ffd1 	bl	8014394 <rcl_wait_set_clear>
 800c3f2:	4607      	mov	r7, r0
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	f040 80ed 	bne.w	800c5d4 <rclc_executor_spin_some.part.0+0x1fc>
 800c3fa:	68ab      	ldr	r3, [r5, #8]
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	b303      	cbz	r3, 800c442 <rclc_executor_spin_some.part.0+0x6a>
 800c400:	6869      	ldr	r1, [r5, #4]
 800c402:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c406:	01a2      	lsls	r2, r4, #6
 800c408:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800c40c:	b1cb      	cbz	r3, 800c442 <rclc_executor_spin_some.part.0+0x6a>
 800c40e:	5c8b      	ldrb	r3, [r1, r2]
 800c410:	2b0a      	cmp	r3, #10
 800c412:	f200 80d8 	bhi.w	800c5c6 <rclc_executor_spin_some.part.0+0x1ee>
 800c416:	e8df f003 	tbb	[pc, r3]
 800c41a:	9c9c      	.short	0x9c9c
 800c41c:	068c8ca7 	.word	0x068c8ca7
 800c420:	bdc90606 	.word	0xbdc90606
 800c424:	b2          	.byte	0xb2
 800c425:	00          	.byte	0x00
 800c426:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c42a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c42e:	4630      	mov	r0, r6
 800c430:	f008 faf8 	bl	8014a24 <rcl_wait_set_add_service>
 800c434:	2800      	cmp	r0, #0
 800c436:	f040 8086 	bne.w	800c546 <rclc_executor_spin_some.part.0+0x16e>
 800c43a:	68ab      	ldr	r3, [r5, #8]
 800c43c:	3401      	adds	r4, #1
 800c43e:	429c      	cmp	r4, r3
 800c440:	d3de      	bcc.n	800c400 <rclc_executor_spin_some.part.0+0x28>
 800c442:	4643      	mov	r3, r8
 800c444:	464a      	mov	r2, r9
 800c446:	4630      	mov	r0, r6
 800c448:	f008 fb1a 	bl	8014a80 <rcl_wait>
 800c44c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800c450:	2b00      	cmp	r3, #0
 800c452:	f000 80c7 	beq.w	800c5e4 <rclc_executor_spin_some.part.0+0x20c>
 800c456:	2b01      	cmp	r3, #1
 800c458:	f040 80b5 	bne.w	800c5c6 <rclc_executor_spin_some.part.0+0x1ee>
 800c45c:	68ab      	ldr	r3, [r5, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 8159 	beq.w	800c716 <rclc_executor_spin_some.part.0+0x33e>
 800c464:	2400      	movs	r4, #0
 800c466:	46a0      	mov	r8, r4
 800c468:	f240 1991 	movw	r9, #401	@ 0x191
 800c46c:	e00a      	b.n	800c484 <rclc_executor_spin_some.part.0+0xac>
 800c46e:	f7ff fb1d 	bl	800baac <_rclc_check_for_new_data>
 800c472:	4604      	mov	r4, r0
 800c474:	b110      	cbz	r0, 800c47c <rclc_executor_spin_some.part.0+0xa4>
 800c476:	4548      	cmp	r0, r9
 800c478:	f040 80b2 	bne.w	800c5e0 <rclc_executor_spin_some.part.0+0x208>
 800c47c:	68ab      	ldr	r3, [r5, #8]
 800c47e:	4598      	cmp	r8, r3
 800c480:	f080 8126 	bcs.w	800c6d0 <rclc_executor_spin_some.part.0+0x2f8>
 800c484:	686a      	ldr	r2, [r5, #4]
 800c486:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c48a:	4631      	mov	r1, r6
 800c48c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c490:	f108 0801 	add.w	r8, r8, #1
 800c494:	f1bc 0f00 	cmp.w	ip, #0
 800c498:	d1e9      	bne.n	800c46e <rclc_executor_spin_some.part.0+0x96>
 800c49a:	4619      	mov	r1, r3
 800c49c:	4610      	mov	r0, r2
 800c49e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c4a2:	4798      	blx	r3
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	f000 809b 	beq.w	800c5e0 <rclc_executor_spin_some.part.0+0x208>
 800c4aa:	68ab      	ldr	r3, [r5, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f000 8097 	beq.w	800c5e0 <rclc_executor_spin_some.part.0+0x208>
 800c4b2:	f04f 0800 	mov.w	r8, #0
 800c4b6:	f240 1991 	movw	r9, #401	@ 0x191
 800c4ba:	e009      	b.n	800c4d0 <rclc_executor_spin_some.part.0+0xf8>
 800c4bc:	f7ff fb44 	bl	800bb48 <_rclc_take_new_data>
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	b110      	cbz	r0, 800c4ca <rclc_executor_spin_some.part.0+0xf2>
 800c4c4:	4548      	cmp	r0, r9
 800c4c6:	f040 808b 	bne.w	800c5e0 <rclc_executor_spin_some.part.0+0x208>
 800c4ca:	68ab      	ldr	r3, [r5, #8]
 800c4cc:	4598      	cmp	r8, r3
 800c4ce:	d209      	bcs.n	800c4e4 <rclc_executor_spin_some.part.0+0x10c>
 800c4d0:	6868      	ldr	r0, [r5, #4]
 800c4d2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c4d6:	4631      	mov	r1, r6
 800c4d8:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800c4dc:	f108 0801 	add.w	r8, r8, #1
 800c4e0:	2a00      	cmp	r2, #0
 800c4e2:	d1eb      	bne.n	800c4bc <rclc_executor_spin_some.part.0+0xe4>
 800c4e4:	2600      	movs	r6, #0
 800c4e6:	b97b      	cbnz	r3, 800c508 <rclc_executor_spin_some.part.0+0x130>
 800c4e8:	e07a      	b.n	800c5e0 <rclc_executor_spin_some.part.0+0x208>
 800c4ea:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c4ee:	2a08      	cmp	r2, #8
 800c4f0:	f000 80fd 	beq.w	800c6ee <rclc_executor_spin_some.part.0+0x316>
 800c4f4:	2a09      	cmp	r2, #9
 800c4f6:	f000 80ef 	beq.w	800c6d8 <rclc_executor_spin_some.part.0+0x300>
 800c4fa:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800c4fe:	b98a      	cbnz	r2, 800c524 <rclc_executor_spin_some.part.0+0x14c>
 800c500:	3601      	adds	r6, #1
 800c502:	429e      	cmp	r6, r3
 800c504:	d262      	bcs.n	800c5cc <rclc_executor_spin_some.part.0+0x1f4>
 800c506:	2400      	movs	r4, #0
 800c508:	686a      	ldr	r2, [r5, #4]
 800c50a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c50e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c512:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800c516:	2900      	cmp	r1, #0
 800c518:	d062      	beq.n	800c5e0 <rclc_executor_spin_some.part.0+0x208>
 800c51a:	7841      	ldrb	r1, [r0, #1]
 800c51c:	2900      	cmp	r1, #0
 800c51e:	d0e4      	beq.n	800c4ea <rclc_executor_spin_some.part.0+0x112>
 800c520:	2901      	cmp	r1, #1
 800c522:	d1ed      	bne.n	800c500 <rclc_executor_spin_some.part.0+0x128>
 800c524:	f7ff fc84 	bl	800be30 <_rclc_execute.part.0>
 800c528:	2800      	cmp	r0, #0
 800c52a:	f040 80b6 	bne.w	800c69a <rclc_executor_spin_some.part.0+0x2c2>
 800c52e:	68ab      	ldr	r3, [r5, #8]
 800c530:	e7e6      	b.n	800c500 <rclc_executor_spin_some.part.0+0x128>
 800c532:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c536:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c53a:	4630      	mov	r0, r6
 800c53c:	f008 fa46 	bl	80149cc <rcl_wait_set_add_client>
 800c540:	2800      	cmp	r0, #0
 800c542:	f43f af7a 	beq.w	800c43a <rclc_executor_spin_some.part.0+0x62>
 800c546:	9001      	str	r0, [sp, #4]
 800c548:	f000 fb76 	bl	800cc38 <rcutils_reset_error>
 800c54c:	9801      	ldr	r0, [sp, #4]
 800c54e:	4607      	mov	r7, r0
 800c550:	e03c      	b.n	800c5cc <rclc_executor_spin_some.part.0+0x1f4>
 800c552:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c556:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c55a:	4630      	mov	r0, r6
 800c55c:	f007 feee 	bl	801433c <rcl_wait_set_add_subscription>
 800c560:	2800      	cmp	r0, #0
 800c562:	f43f af6a 	beq.w	800c43a <rclc_executor_spin_some.part.0+0x62>
 800c566:	e7ee      	b.n	800c546 <rclc_executor_spin_some.part.0+0x16e>
 800c568:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c56c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c570:	4630      	mov	r0, r6
 800c572:	f008 f9fb 	bl	801496c <rcl_wait_set_add_timer>
 800c576:	2800      	cmp	r0, #0
 800c578:	f43f af5f 	beq.w	800c43a <rclc_executor_spin_some.part.0+0x62>
 800c57c:	e7e3      	b.n	800c546 <rclc_executor_spin_some.part.0+0x16e>
 800c57e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c582:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c586:	4630      	mov	r0, r6
 800c588:	f008 f9c4 	bl	8014914 <rcl_wait_set_add_guard_condition>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	f43f af54 	beq.w	800c43a <rclc_executor_spin_some.part.0+0x62>
 800c592:	e7d8      	b.n	800c546 <rclc_executor_spin_some.part.0+0x16e>
 800c594:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c598:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c59c:	3110      	adds	r1, #16
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f008 ff46 	bl	8015430 <rcl_action_wait_set_add_action_server>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	f43f af48 	beq.w	800c43a <rclc_executor_spin_some.part.0+0x62>
 800c5aa:	e7cc      	b.n	800c546 <rclc_executor_spin_some.part.0+0x16e>
 800c5ac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c5b0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c5b4:	3110      	adds	r1, #16
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f008 fd11 	bl	8014fe0 <rcl_action_wait_set_add_action_client>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	f43f af3b 	beq.w	800c43a <rclc_executor_spin_some.part.0+0x62>
 800c5c4:	e7bf      	b.n	800c546 <rclc_executor_spin_some.part.0+0x16e>
 800c5c6:	f000 fb37 	bl	800cc38 <rcutils_reset_error>
 800c5ca:	2701      	movs	r7, #1
 800c5cc:	4638      	mov	r0, r7
 800c5ce:	b003      	add	sp, #12
 800c5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d4:	f000 fb30 	bl	800cc38 <rcutils_reset_error>
 800c5d8:	4638      	mov	r0, r7
 800c5da:	b003      	add	sp, #12
 800c5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e0:	4627      	mov	r7, r4
 800c5e2:	e7f3      	b.n	800c5cc <rclc_executor_spin_some.part.0+0x1f4>
 800c5e4:	68ab      	ldr	r3, [r5, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f000 8092 	beq.w	800c710 <rclc_executor_spin_some.part.0+0x338>
 800c5ec:	2400      	movs	r4, #0
 800c5ee:	46a0      	mov	r8, r4
 800c5f0:	f240 1991 	movw	r9, #401	@ 0x191
 800c5f4:	e008      	b.n	800c608 <rclc_executor_spin_some.part.0+0x230>
 800c5f6:	f7ff fa59 	bl	800baac <_rclc_check_for_new_data>
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	b108      	cbz	r0, 800c602 <rclc_executor_spin_some.part.0+0x22a>
 800c5fe:	4548      	cmp	r0, r9
 800c600:	d1ee      	bne.n	800c5e0 <rclc_executor_spin_some.part.0+0x208>
 800c602:	68ab      	ldr	r3, [r5, #8]
 800c604:	4598      	cmp	r8, r3
 800c606:	d265      	bcs.n	800c6d4 <rclc_executor_spin_some.part.0+0x2fc>
 800c608:	686a      	ldr	r2, [r5, #4]
 800c60a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c60e:	4631      	mov	r1, r6
 800c610:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c614:	f108 0801 	add.w	r8, r8, #1
 800c618:	f1bc 0f00 	cmp.w	ip, #0
 800c61c:	d1eb      	bne.n	800c5f6 <rclc_executor_spin_some.part.0+0x21e>
 800c61e:	4619      	mov	r1, r3
 800c620:	4610      	mov	r0, r2
 800c622:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c626:	4798      	blx	r3
 800c628:	2800      	cmp	r0, #0
 800c62a:	d0d9      	beq.n	800c5e0 <rclc_executor_spin_some.part.0+0x208>
 800c62c:	68ab      	ldr	r3, [r5, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d0d6      	beq.n	800c5e0 <rclc_executor_spin_some.part.0+0x208>
 800c632:	f04f 0800 	mov.w	r8, #0
 800c636:	f240 1991 	movw	r9, #401	@ 0x191
 800c63a:	f240 2a59 	movw	sl, #601	@ 0x259
 800c63e:	e00e      	b.n	800c65e <rclc_executor_spin_some.part.0+0x286>
 800c640:	f813 300b 	ldrb.w	r3, [r3, fp]
 800c644:	2b08      	cmp	r3, #8
 800c646:	d033      	beq.n	800c6b0 <rclc_executor_spin_some.part.0+0x2d8>
 800c648:	2b09      	cmp	r3, #9
 800c64a:	d028      	beq.n	800c69e <rclc_executor_spin_some.part.0+0x2c6>
 800c64c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800c650:	b9fb      	cbnz	r3, 800c692 <rclc_executor_spin_some.part.0+0x2ba>
 800c652:	68ab      	ldr	r3, [r5, #8]
 800c654:	f108 0801 	add.w	r8, r8, #1
 800c658:	4598      	cmp	r8, r3
 800c65a:	d2b7      	bcs.n	800c5cc <rclc_executor_spin_some.part.0+0x1f4>
 800c65c:	2400      	movs	r4, #0
 800c65e:	6868      	ldr	r0, [r5, #4]
 800c660:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c664:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800c668:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d0b7      	beq.n	800c5e0 <rclc_executor_spin_some.part.0+0x208>
 800c670:	4631      	mov	r1, r6
 800c672:	f7ff fa69 	bl	800bb48 <_rclc_take_new_data>
 800c676:	b118      	cbz	r0, 800c680 <rclc_executor_spin_some.part.0+0x2a8>
 800c678:	4548      	cmp	r0, r9
 800c67a:	d001      	beq.n	800c680 <rclc_executor_spin_some.part.0+0x2a8>
 800c67c:	4550      	cmp	r0, sl
 800c67e:	d10c      	bne.n	800c69a <rclc_executor_spin_some.part.0+0x2c2>
 800c680:	686b      	ldr	r3, [r5, #4]
 800c682:	eb13 000b 	adds.w	r0, r3, fp
 800c686:	d021      	beq.n	800c6cc <rclc_executor_spin_some.part.0+0x2f4>
 800c688:	7842      	ldrb	r2, [r0, #1]
 800c68a:	2a00      	cmp	r2, #0
 800c68c:	d0d8      	beq.n	800c640 <rclc_executor_spin_some.part.0+0x268>
 800c68e:	2a01      	cmp	r2, #1
 800c690:	d1df      	bne.n	800c652 <rclc_executor_spin_some.part.0+0x27a>
 800c692:	f7ff fbcd 	bl	800be30 <_rclc_execute.part.0>
 800c696:	2800      	cmp	r0, #0
 800c698:	d0db      	beq.n	800c652 <rclc_executor_spin_some.part.0+0x27a>
 800c69a:	4607      	mov	r7, r0
 800c69c:	e796      	b.n	800c5cc <rclc_executor_spin_some.part.0+0x1f4>
 800c69e:	6843      	ldr	r3, [r0, #4]
 800c6a0:	6a1a      	ldr	r2, [r3, #32]
 800c6a2:	2a00      	cmp	r2, #0
 800c6a4:	d1f5      	bne.n	800c692 <rclc_executor_spin_some.part.0+0x2ba>
 800c6a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d0d1      	beq.n	800c652 <rclc_executor_spin_some.part.0+0x27a>
 800c6ae:	e7f0      	b.n	800c692 <rclc_executor_spin_some.part.0+0x2ba>
 800c6b0:	6843      	ldr	r3, [r0, #4]
 800c6b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6b4:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c6b8:	d1eb      	bne.n	800c692 <rclc_executor_spin_some.part.0+0x2ba>
 800c6ba:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c6be:	2a00      	cmp	r2, #0
 800c6c0:	d1e7      	bne.n	800c692 <rclc_executor_spin_some.part.0+0x2ba>
 800c6c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d0c3      	beq.n	800c652 <rclc_executor_spin_some.part.0+0x27a>
 800c6ca:	e7e2      	b.n	800c692 <rclc_executor_spin_some.part.0+0x2ba>
 800c6cc:	270b      	movs	r7, #11
 800c6ce:	e77d      	b.n	800c5cc <rclc_executor_spin_some.part.0+0x1f4>
 800c6d0:	686a      	ldr	r2, [r5, #4]
 800c6d2:	e6e2      	b.n	800c49a <rclc_executor_spin_some.part.0+0xc2>
 800c6d4:	686a      	ldr	r2, [r5, #4]
 800c6d6:	e7a2      	b.n	800c61e <rclc_executor_spin_some.part.0+0x246>
 800c6d8:	6842      	ldr	r2, [r0, #4]
 800c6da:	6a11      	ldr	r1, [r2, #32]
 800c6dc:	2900      	cmp	r1, #0
 800c6de:	f47f af21 	bne.w	800c524 <rclc_executor_spin_some.part.0+0x14c>
 800c6e2:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800c6e6:	2a00      	cmp	r2, #0
 800c6e8:	f43f af0a 	beq.w	800c500 <rclc_executor_spin_some.part.0+0x128>
 800c6ec:	e71a      	b.n	800c524 <rclc_executor_spin_some.part.0+0x14c>
 800c6ee:	6842      	ldr	r2, [r0, #4]
 800c6f0:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800c6f2:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800c6f6:	f47f af15 	bne.w	800c524 <rclc_executor_spin_some.part.0+0x14c>
 800c6fa:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800c6fe:	2900      	cmp	r1, #0
 800c700:	f47f af10 	bne.w	800c524 <rclc_executor_spin_some.part.0+0x14c>
 800c704:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800c708:	2a00      	cmp	r2, #0
 800c70a:	f43f aef9 	beq.w	800c500 <rclc_executor_spin_some.part.0+0x128>
 800c70e:	e709      	b.n	800c524 <rclc_executor_spin_some.part.0+0x14c>
 800c710:	686a      	ldr	r2, [r5, #4]
 800c712:	461c      	mov	r4, r3
 800c714:	e783      	b.n	800c61e <rclc_executor_spin_some.part.0+0x246>
 800c716:	686a      	ldr	r2, [r5, #4]
 800c718:	461c      	mov	r4, r3
 800c71a:	e6be      	b.n	800c49a <rclc_executor_spin_some.part.0+0xc2>

0800c71c <rclc_executor_spin_some>:
 800c71c:	b190      	cbz	r0, 800c744 <rclc_executor_spin_some+0x28>
 800c71e:	b570      	push	{r4, r5, r6, lr}
 800c720:	4604      	mov	r4, r0
 800c722:	6800      	ldr	r0, [r0, #0]
 800c724:	4616      	mov	r6, r2
 800c726:	461d      	mov	r5, r3
 800c728:	f7fe f910 	bl	800a94c <rcl_context_is_valid>
 800c72c:	b130      	cbz	r0, 800c73c <rclc_executor_spin_some+0x20>
 800c72e:	4632      	mov	r2, r6
 800c730:	462b      	mov	r3, r5
 800c732:	4620      	mov	r0, r4
 800c734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c738:	f7ff be4e 	b.w	800c3d8 <rclc_executor_spin_some.part.0>
 800c73c:	f000 fa7c 	bl	800cc38 <rcutils_reset_error>
 800c740:	2001      	movs	r0, #1
 800c742:	bd70      	pop	{r4, r5, r6, pc}
 800c744:	200b      	movs	r0, #11
 800c746:	4770      	bx	lr

0800c748 <rclc_executor_handle_counters_zero_init>:
 800c748:	b130      	cbz	r0, 800c758 <rclc_executor_handle_counters_zero_init+0x10>
 800c74a:	b508      	push	{r3, lr}
 800c74c:	2220      	movs	r2, #32
 800c74e:	2100      	movs	r1, #0
 800c750:	f00b fd74 	bl	801823c <memset>
 800c754:	2000      	movs	r0, #0
 800c756:	bd08      	pop	{r3, pc}
 800c758:	200b      	movs	r0, #11
 800c75a:	4770      	bx	lr
 800c75c:	0000      	movs	r0, r0
	...

0800c760 <rclc_executor_handle_init>:
 800c760:	b168      	cbz	r0, 800c77e <rclc_executor_handle_init+0x1e>
 800c762:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800c788 <rclc_executor_handle_init+0x28>
 800c766:	2300      	movs	r3, #0
 800c768:	220b      	movs	r2, #11
 800c76a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800c76e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800c772:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800c776:	8002      	strh	r2, [r0, #0]
 800c778:	8703      	strh	r3, [r0, #56]	@ 0x38
 800c77a:	4618      	mov	r0, r3
 800c77c:	4770      	bx	lr
 800c77e:	200b      	movs	r0, #11
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	f3af 8000 	nop.w
	...

0800c790 <rclc_support_init_with_options>:
 800c790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c794:	b083      	sub	sp, #12
 800c796:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c798:	b340      	cbz	r0, 800c7ec <rclc_support_init_with_options+0x5c>
 800c79a:	461d      	mov	r5, r3
 800c79c:	b333      	cbz	r3, 800c7ec <rclc_support_init_with_options+0x5c>
 800c79e:	b32e      	cbz	r6, 800c7ec <rclc_support_init_with_options+0x5c>
 800c7a0:	46e9      	mov	r9, sp
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	4648      	mov	r0, r9
 800c7a6:	460f      	mov	r7, r1
 800c7a8:	4690      	mov	r8, r2
 800c7aa:	f7fe f8c5 	bl	800a938 <rcl_get_zero_initialized_context>
 800c7ae:	e899 0003 	ldmia.w	r9, {r0, r1}
 800c7b2:	462a      	mov	r2, r5
 800c7b4:	e884 0003 	stmia.w	r4, {r0, r1}
 800c7b8:	4623      	mov	r3, r4
 800c7ba:	4641      	mov	r1, r8
 800c7bc:	4638      	mov	r0, r7
 800c7be:	f007 f937 	bl	8013a30 <rcl_init>
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	b960      	cbnz	r0, 800c7e0 <rclc_support_init_with_options+0x50>
 800c7c6:	60a6      	str	r6, [r4, #8]
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	f104 010c 	add.w	r1, r4, #12
 800c7ce:	2003      	movs	r0, #3
 800c7d0:	f007 fb84 	bl	8013edc <rcl_clock_init>
 800c7d4:	4605      	mov	r5, r0
 800c7d6:	b918      	cbnz	r0, 800c7e0 <rclc_support_init_with_options+0x50>
 800c7d8:	4628      	mov	r0, r5
 800c7da:	b003      	add	sp, #12
 800c7dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7e0:	f000 fa2a 	bl	800cc38 <rcutils_reset_error>
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	b003      	add	sp, #12
 800c7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7ec:	250b      	movs	r5, #11
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	b003      	add	sp, #12
 800c7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7f6:	bf00      	nop

0800c7f8 <rclc_support_fini>:
 800c7f8:	b538      	push	{r3, r4, r5, lr}
 800c7fa:	b320      	cbz	r0, 800c846 <rclc_support_fini+0x4e>
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	300c      	adds	r0, #12
 800c800:	f007 fbe4 	bl	8013fcc <rcl_clock_fini>
 800c804:	4605      	mov	r5, r0
 800c806:	b948      	cbnz	r0, 800c81c <rclc_support_fini+0x24>
 800c808:	4620      	mov	r0, r4
 800c80a:	f007 f9ff 	bl	8013c0c <rcl_shutdown>
 800c80e:	b968      	cbnz	r0, 800c82c <rclc_support_fini+0x34>
 800c810:	4620      	mov	r0, r4
 800c812:	f7fe f907 	bl	800aa24 <rcl_context_fini>
 800c816:	b988      	cbnz	r0, 800c83c <rclc_support_fini+0x44>
 800c818:	4628      	mov	r0, r5
 800c81a:	bd38      	pop	{r3, r4, r5, pc}
 800c81c:	f000 fa0c 	bl	800cc38 <rcutils_reset_error>
 800c820:	4620      	mov	r0, r4
 800c822:	2501      	movs	r5, #1
 800c824:	f007 f9f2 	bl	8013c0c <rcl_shutdown>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d0f1      	beq.n	800c810 <rclc_support_fini+0x18>
 800c82c:	f000 fa04 	bl	800cc38 <rcutils_reset_error>
 800c830:	4620      	mov	r0, r4
 800c832:	2501      	movs	r5, #1
 800c834:	f7fe f8f6 	bl	800aa24 <rcl_context_fini>
 800c838:	2800      	cmp	r0, #0
 800c83a:	d0ed      	beq.n	800c818 <rclc_support_fini+0x20>
 800c83c:	2501      	movs	r5, #1
 800c83e:	f000 f9fb 	bl	800cc38 <rcutils_reset_error>
 800c842:	4628      	mov	r0, r5
 800c844:	bd38      	pop	{r3, r4, r5, pc}
 800c846:	250b      	movs	r5, #11
 800c848:	4628      	mov	r0, r5
 800c84a:	bd38      	pop	{r3, r4, r5, pc}

0800c84c <rclc_node_init_default>:
 800c84c:	b3b8      	cbz	r0, 800c8be <rclc_node_init_default+0x72>
 800c84e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c852:	460d      	mov	r5, r1
 800c854:	b0a1      	sub	sp, #132	@ 0x84
 800c856:	b329      	cbz	r1, 800c8a4 <rclc_node_init_default+0x58>
 800c858:	4616      	mov	r6, r2
 800c85a:	b31a      	cbz	r2, 800c8a4 <rclc_node_init_default+0x58>
 800c85c:	461f      	mov	r7, r3
 800c85e:	b30b      	cbz	r3, 800c8a4 <rclc_node_init_default+0x58>
 800c860:	f10d 0810 	add.w	r8, sp, #16
 800c864:	4604      	mov	r4, r0
 800c866:	4640      	mov	r0, r8
 800c868:	f7fe f9f6 	bl	800ac58 <rcl_get_zero_initialized_node>
 800c86c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c870:	f10d 0918 	add.w	r9, sp, #24
 800c874:	e884 0003 	stmia.w	r4, {r0, r1}
 800c878:	4648      	mov	r0, r9
 800c87a:	f7fe fb97 	bl	800afac <rcl_node_get_default_options>
 800c87e:	4640      	mov	r0, r8
 800c880:	f7fe f9ea 	bl	800ac58 <rcl_get_zero_initialized_node>
 800c884:	f8cd 9000 	str.w	r9, [sp]
 800c888:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c88c:	463b      	mov	r3, r7
 800c88e:	e884 0003 	stmia.w	r4, {r0, r1}
 800c892:	4632      	mov	r2, r6
 800c894:	4629      	mov	r1, r5
 800c896:	4620      	mov	r0, r4
 800c898:	f7fe f9e8 	bl	800ac6c <rcl_node_init>
 800c89c:	b930      	cbnz	r0, 800c8ac <rclc_node_init_default+0x60>
 800c89e:	b021      	add	sp, #132	@ 0x84
 800c8a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8a4:	200b      	movs	r0, #11
 800c8a6:	b021      	add	sp, #132	@ 0x84
 800c8a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8ac:	9003      	str	r0, [sp, #12]
 800c8ae:	f000 f9c3 	bl	800cc38 <rcutils_reset_error>
 800c8b2:	f000 f9c1 	bl	800cc38 <rcutils_reset_error>
 800c8b6:	9803      	ldr	r0, [sp, #12]
 800c8b8:	b021      	add	sp, #132	@ 0x84
 800c8ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8be:	200b      	movs	r0, #11
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop

0800c8c4 <rclc_publisher_init_default>:
 800c8c4:	b368      	cbz	r0, 800c922 <rclc_publisher_init_default+0x5e>
 800c8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ca:	460d      	mov	r5, r1
 800c8cc:	b0a0      	sub	sp, #128	@ 0x80
 800c8ce:	b321      	cbz	r1, 800c91a <rclc_publisher_init_default+0x56>
 800c8d0:	4616      	mov	r6, r2
 800c8d2:	b312      	cbz	r2, 800c91a <rclc_publisher_init_default+0x56>
 800c8d4:	461f      	mov	r7, r3
 800c8d6:	b303      	cbz	r3, 800c91a <rclc_publisher_init_default+0x56>
 800c8d8:	4604      	mov	r4, r0
 800c8da:	f7fe fb93 	bl	800b004 <rcl_get_zero_initialized_publisher>
 800c8de:	f10d 0810 	add.w	r8, sp, #16
 800c8e2:	6020      	str	r0, [r4, #0]
 800c8e4:	4640      	mov	r0, r8
 800c8e6:	f7fe fc55 	bl	800b194 <rcl_publisher_get_default_options>
 800c8ea:	490f      	ldr	r1, [pc, #60]	@ (800c928 <rclc_publisher_init_default+0x64>)
 800c8ec:	2250      	movs	r2, #80	@ 0x50
 800c8ee:	4640      	mov	r0, r8
 800c8f0:	f00b fdcb 	bl	801848a <memcpy>
 800c8f4:	f8cd 8000 	str.w	r8, [sp]
 800c8f8:	463b      	mov	r3, r7
 800c8fa:	4632      	mov	r2, r6
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	4620      	mov	r0, r4
 800c900:	f7fe fb86 	bl	800b010 <rcl_publisher_init>
 800c904:	b910      	cbnz	r0, 800c90c <rclc_publisher_init_default+0x48>
 800c906:	b020      	add	sp, #128	@ 0x80
 800c908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c90c:	9003      	str	r0, [sp, #12]
 800c90e:	f000 f993 	bl	800cc38 <rcutils_reset_error>
 800c912:	9803      	ldr	r0, [sp, #12]
 800c914:	b020      	add	sp, #128	@ 0x80
 800c916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c91a:	200b      	movs	r0, #11
 800c91c:	b020      	add	sp, #128	@ 0x80
 800c91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c922:	200b      	movs	r0, #11
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	080199a0 	.word	0x080199a0

0800c92c <rclc_subscription_init_default>:
 800c92c:	b368      	cbz	r0, 800c98a <rclc_subscription_init_default+0x5e>
 800c92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c932:	460d      	mov	r5, r1
 800c934:	b0a0      	sub	sp, #128	@ 0x80
 800c936:	b321      	cbz	r1, 800c982 <rclc_subscription_init_default+0x56>
 800c938:	4616      	mov	r6, r2
 800c93a:	b312      	cbz	r2, 800c982 <rclc_subscription_init_default+0x56>
 800c93c:	461f      	mov	r7, r3
 800c93e:	b303      	cbz	r3, 800c982 <rclc_subscription_init_default+0x56>
 800c940:	4604      	mov	r4, r0
 800c942:	f7fe fca1 	bl	800b288 <rcl_get_zero_initialized_subscription>
 800c946:	f10d 0810 	add.w	r8, sp, #16
 800c94a:	6020      	str	r0, [r4, #0]
 800c94c:	4640      	mov	r0, r8
 800c94e:	f7fe fd9d 	bl	800b48c <rcl_subscription_get_default_options>
 800c952:	490f      	ldr	r1, [pc, #60]	@ (800c990 <rclc_subscription_init_default+0x64>)
 800c954:	2250      	movs	r2, #80	@ 0x50
 800c956:	4640      	mov	r0, r8
 800c958:	f00b fd97 	bl	801848a <memcpy>
 800c95c:	f8cd 8000 	str.w	r8, [sp]
 800c960:	463b      	mov	r3, r7
 800c962:	4632      	mov	r2, r6
 800c964:	4629      	mov	r1, r5
 800c966:	4620      	mov	r0, r4
 800c968:	f7fe fc94 	bl	800b294 <rcl_subscription_init>
 800c96c:	b910      	cbnz	r0, 800c974 <rclc_subscription_init_default+0x48>
 800c96e:	b020      	add	sp, #128	@ 0x80
 800c970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c974:	9003      	str	r0, [sp, #12]
 800c976:	f000 f95f 	bl	800cc38 <rcutils_reset_error>
 800c97a:	9803      	ldr	r0, [sp, #12]
 800c97c:	b020      	add	sp, #128	@ 0x80
 800c97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c982:	200b      	movs	r0, #11
 800c984:	b020      	add	sp, #128	@ 0x80
 800c986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c98a:	200b      	movs	r0, #11
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	080199f0 	.word	0x080199f0

0800c994 <rclc_timer_init_default>:
 800c994:	b360      	cbz	r0, 800c9f0 <rclc_timer_init_default+0x5c>
 800c996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c99a:	460e      	mov	r6, r1
 800c99c:	b08a      	sub	sp, #40	@ 0x28
 800c99e:	b319      	cbz	r1, 800c9e8 <rclc_timer_init_default+0x54>
 800c9a0:	4690      	mov	r8, r2
 800c9a2:	461f      	mov	r7, r3
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	f7fe fea1 	bl	800b6ec <rcl_get_zero_initialized_timer>
 800c9aa:	68b4      	ldr	r4, [r6, #8]
 800c9ac:	6028      	str	r0, [r5, #0]
 800c9ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9b0:	f10d 0c0c 	add.w	ip, sp, #12
 800c9b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	f8cc 3000 	str.w	r3, [ip]
 800c9be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9c0:	9302      	str	r3, [sp, #8]
 800c9c2:	e9cd 8700 	strd	r8, r7, [sp]
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	4632      	mov	r2, r6
 800c9ca:	f106 010c 	add.w	r1, r6, #12
 800c9ce:	f7fe fe93 	bl	800b6f8 <rcl_timer_init>
 800c9d2:	b910      	cbnz	r0, 800c9da <rclc_timer_init_default+0x46>
 800c9d4:	b00a      	add	sp, #40	@ 0x28
 800c9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9da:	9009      	str	r0, [sp, #36]	@ 0x24
 800c9dc:	f000 f92c 	bl	800cc38 <rcutils_reset_error>
 800c9e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9e2:	b00a      	add	sp, #40	@ 0x28
 800c9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e8:	200b      	movs	r0, #11
 800c9ea:	b00a      	add	sp, #40	@ 0x28
 800c9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9f0:	200b      	movs	r0, #11
 800c9f2:	4770      	bx	lr

0800c9f4 <__default_zero_allocate>:
 800c9f4:	f00b b832 	b.w	8017a5c <calloc>

0800c9f8 <__default_reallocate>:
 800c9f8:	f00b b9be 	b.w	8017d78 <realloc>

0800c9fc <__default_deallocate>:
 800c9fc:	f00b b89a 	b.w	8017b34 <free>

0800ca00 <__default_allocate>:
 800ca00:	f00b b890 	b.w	8017b24 <malloc>

0800ca04 <rcutils_get_zero_initialized_allocator>:
 800ca04:	b510      	push	{r4, lr}
 800ca06:	4c05      	ldr	r4, [pc, #20]	@ (800ca1c <rcutils_get_zero_initialized_allocator+0x18>)
 800ca08:	4686      	mov	lr, r0
 800ca0a:	4684      	mov	ip, r0
 800ca0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	f8cc 3000 	str.w	r3, [ip]
 800ca18:	4670      	mov	r0, lr
 800ca1a:	bd10      	pop	{r4, pc}
 800ca1c:	08019a40 	.word	0x08019a40

0800ca20 <rcutils_set_default_allocator>:
 800ca20:	b1a8      	cbz	r0, 800ca4e <rcutils_set_default_allocator+0x2e>
 800ca22:	6802      	ldr	r2, [r0, #0]
 800ca24:	b1a2      	cbz	r2, 800ca50 <rcutils_set_default_allocator+0x30>
 800ca26:	6841      	ldr	r1, [r0, #4]
 800ca28:	b1a1      	cbz	r1, 800ca54 <rcutils_set_default_allocator+0x34>
 800ca2a:	b410      	push	{r4}
 800ca2c:	68c4      	ldr	r4, [r0, #12]
 800ca2e:	b164      	cbz	r4, 800ca4a <rcutils_set_default_allocator+0x2a>
 800ca30:	6880      	ldr	r0, [r0, #8]
 800ca32:	b138      	cbz	r0, 800ca44 <rcutils_set_default_allocator+0x24>
 800ca34:	4b08      	ldr	r3, [pc, #32]	@ (800ca58 <rcutils_set_default_allocator+0x38>)
 800ca36:	601a      	str	r2, [r3, #0]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ca3e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800ca42:	2001      	movs	r0, #1
 800ca44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca48:	4770      	bx	lr
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	e7fa      	b.n	800ca44 <rcutils_set_default_allocator+0x24>
 800ca4e:	4770      	bx	lr
 800ca50:	4610      	mov	r0, r2
 800ca52:	4770      	bx	lr
 800ca54:	4608      	mov	r0, r1
 800ca56:	4770      	bx	lr
 800ca58:	2000002c 	.word	0x2000002c

0800ca5c <rcutils_get_default_allocator>:
 800ca5c:	b510      	push	{r4, lr}
 800ca5e:	4c05      	ldr	r4, [pc, #20]	@ (800ca74 <rcutils_get_default_allocator+0x18>)
 800ca60:	4686      	mov	lr, r0
 800ca62:	4684      	mov	ip, r0
 800ca64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca6a:	6823      	ldr	r3, [r4, #0]
 800ca6c:	f8cc 3000 	str.w	r3, [ip]
 800ca70:	4670      	mov	r0, lr
 800ca72:	bd10      	pop	{r4, pc}
 800ca74:	2000002c 	.word	0x2000002c

0800ca78 <rcutils_allocator_is_valid>:
 800ca78:	b158      	cbz	r0, 800ca92 <rcutils_allocator_is_valid+0x1a>
 800ca7a:	6803      	ldr	r3, [r0, #0]
 800ca7c:	b143      	cbz	r3, 800ca90 <rcutils_allocator_is_valid+0x18>
 800ca7e:	6843      	ldr	r3, [r0, #4]
 800ca80:	b133      	cbz	r3, 800ca90 <rcutils_allocator_is_valid+0x18>
 800ca82:	68c3      	ldr	r3, [r0, #12]
 800ca84:	b123      	cbz	r3, 800ca90 <rcutils_allocator_is_valid+0x18>
 800ca86:	6880      	ldr	r0, [r0, #8]
 800ca88:	3800      	subs	r0, #0
 800ca8a:	bf18      	it	ne
 800ca8c:	2001      	movne	r0, #1
 800ca8e:	4770      	bx	lr
 800ca90:	4618      	mov	r0, r3
 800ca92:	4770      	bx	lr

0800ca94 <__atomic_load_8>:
 800ca94:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800ca98:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800ca9c:	4a15      	ldr	r2, [pc, #84]	@ (800caf4 <__atomic_load_8+0x60>)
 800ca9e:	4b16      	ldr	r3, [pc, #88]	@ (800caf8 <__atomic_load_8+0x64>)
 800caa0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800caa4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800caa8:	fb02 f101 	mul.w	r1, r2, r1
 800caac:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800cab0:	fba3 2301 	umull	r2, r3, r3, r1
 800cab4:	091b      	lsrs	r3, r3, #4
 800cab6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800caba:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800cabe:	b4d0      	push	{r4, r6, r7}
 800cac0:	4c0e      	ldr	r4, [pc, #56]	@ (800cafc <__atomic_load_8+0x68>)
 800cac2:	1ac9      	subs	r1, r1, r3
 800cac4:	1862      	adds	r2, r4, r1
 800cac6:	f04f 0c01 	mov.w	ip, #1
 800caca:	e8d2 3f4f 	ldrexb	r3, [r2]
 800cace:	e8c2 cf46 	strexb	r6, ip, [r2]
 800cad2:	2e00      	cmp	r6, #0
 800cad4:	d1f9      	bne.n	800caca <__atomic_load_8+0x36>
 800cad6:	f3bf 8f5b 	dmb	ish
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d1f4      	bne.n	800caca <__atomic_load_8+0x36>
 800cae0:	e9d0 6700 	ldrd	r6, r7, [r0]
 800cae4:	f3bf 8f5b 	dmb	ish
 800cae8:	5463      	strb	r3, [r4, r1]
 800caea:	4630      	mov	r0, r6
 800caec:	4639      	mov	r1, r7
 800caee:	bcd0      	pop	{r4, r6, r7}
 800caf0:	4770      	bx	lr
 800caf2:	bf00      	nop
 800caf4:	27d4eb2d 	.word	0x27d4eb2d
 800caf8:	b21642c9 	.word	0xb21642c9
 800cafc:	2000c4a0 	.word	0x2000c4a0

0800cb00 <__atomic_store_8>:
 800cb00:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800cb04:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800cb08:	b570      	push	{r4, r5, r6, lr}
 800cb0a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800cb0e:	4c14      	ldr	r4, [pc, #80]	@ (800cb60 <__atomic_store_8+0x60>)
 800cb10:	4d14      	ldr	r5, [pc, #80]	@ (800cb64 <__atomic_store_8+0x64>)
 800cb12:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800cb16:	fb04 f101 	mul.w	r1, r4, r1
 800cb1a:	4c13      	ldr	r4, [pc, #76]	@ (800cb68 <__atomic_store_8+0x68>)
 800cb1c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800cb20:	fba4 4e01 	umull	r4, lr, r4, r1
 800cb24:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800cb28:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800cb2c:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800cb30:	eba1 0e0e 	sub.w	lr, r1, lr
 800cb34:	eb05 0c0e 	add.w	ip, r5, lr
 800cb38:	f04f 0401 	mov.w	r4, #1
 800cb3c:	e8dc 1f4f 	ldrexb	r1, [ip]
 800cb40:	e8cc 4f46 	strexb	r6, r4, [ip]
 800cb44:	2e00      	cmp	r6, #0
 800cb46:	d1f9      	bne.n	800cb3c <__atomic_store_8+0x3c>
 800cb48:	f3bf 8f5b 	dmb	ish
 800cb4c:	b2c9      	uxtb	r1, r1
 800cb4e:	2900      	cmp	r1, #0
 800cb50:	d1f4      	bne.n	800cb3c <__atomic_store_8+0x3c>
 800cb52:	e9c0 2300 	strd	r2, r3, [r0]
 800cb56:	f3bf 8f5b 	dmb	ish
 800cb5a:	f805 100e 	strb.w	r1, [r5, lr]
 800cb5e:	bd70      	pop	{r4, r5, r6, pc}
 800cb60:	27d4eb2d 	.word	0x27d4eb2d
 800cb64:	2000c4a0 	.word	0x2000c4a0
 800cb68:	b21642c9 	.word	0xb21642c9

0800cb6c <__atomic_exchange_8>:
 800cb6c:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800cb70:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800cb74:	4916      	ldr	r1, [pc, #88]	@ (800cbd0 <__atomic_exchange_8+0x64>)
 800cb76:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800cb7a:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800cb7e:	fb01 fc0c 	mul.w	ip, r1, ip
 800cb82:	4914      	ldr	r1, [pc, #80]	@ (800cbd4 <__atomic_exchange_8+0x68>)
 800cb84:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800cb88:	b570      	push	{r4, r5, r6, lr}
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	fba1 010c 	umull	r0, r1, r1, ip
 800cb90:	0909      	lsrs	r1, r1, #4
 800cb92:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800cb96:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800cb9a:	4e0f      	ldr	r6, [pc, #60]	@ (800cbd8 <__atomic_exchange_8+0x6c>)
 800cb9c:	ebac 0c01 	sub.w	ip, ip, r1
 800cba0:	eb06 010c 	add.w	r1, r6, ip
 800cba4:	f04f 0e01 	mov.w	lr, #1
 800cba8:	e8d1 4f4f 	ldrexb	r4, [r1]
 800cbac:	e8c1 ef40 	strexb	r0, lr, [r1]
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d1f9      	bne.n	800cba8 <__atomic_exchange_8+0x3c>
 800cbb4:	f3bf 8f5b 	dmb	ish
 800cbb8:	b2e4      	uxtb	r4, r4
 800cbba:	2c00      	cmp	r4, #0
 800cbbc:	d1f4      	bne.n	800cba8 <__atomic_exchange_8+0x3c>
 800cbbe:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cbc2:	e9c5 2300 	strd	r2, r3, [r5]
 800cbc6:	f3bf 8f5b 	dmb	ish
 800cbca:	f806 400c 	strb.w	r4, [r6, ip]
 800cbce:	bd70      	pop	{r4, r5, r6, pc}
 800cbd0:	27d4eb2d 	.word	0x27d4eb2d
 800cbd4:	b21642c9 	.word	0xb21642c9
 800cbd8:	2000c4a0 	.word	0x2000c4a0

0800cbdc <rcutils_get_env>:
 800cbdc:	b168      	cbz	r0, 800cbfa <rcutils_get_env+0x1e>
 800cbde:	b510      	push	{r4, lr}
 800cbe0:	460c      	mov	r4, r1
 800cbe2:	b129      	cbz	r1, 800cbf0 <rcutils_get_env+0x14>
 800cbe4:	f00a ff56 	bl	8017a94 <getenv>
 800cbe8:	b120      	cbz	r0, 800cbf4 <rcutils_get_env+0x18>
 800cbea:	6020      	str	r0, [r4, #0]
 800cbec:	2000      	movs	r0, #0
 800cbee:	bd10      	pop	{r4, pc}
 800cbf0:	4803      	ldr	r0, [pc, #12]	@ (800cc00 <rcutils_get_env+0x24>)
 800cbf2:	bd10      	pop	{r4, pc}
 800cbf4:	4b03      	ldr	r3, [pc, #12]	@ (800cc04 <rcutils_get_env+0x28>)
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	bd10      	pop	{r4, pc}
 800cbfa:	4803      	ldr	r0, [pc, #12]	@ (800cc08 <rcutils_get_env+0x2c>)
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	0801938c 	.word	0x0801938c
 800cc04:	080194b4 	.word	0x080194b4
 800cc08:	08019370 	.word	0x08019370

0800cc0c <rcutils_get_error_string>:
 800cc0c:	4b06      	ldr	r3, [pc, #24]	@ (800cc28 <rcutils_get_error_string+0x1c>)
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	b13b      	cbz	r3, 800cc22 <rcutils_get_error_string+0x16>
 800cc12:	4b06      	ldr	r3, [pc, #24]	@ (800cc2c <rcutils_get_error_string+0x20>)
 800cc14:	781a      	ldrb	r2, [r3, #0]
 800cc16:	b90a      	cbnz	r2, 800cc1c <rcutils_get_error_string+0x10>
 800cc18:	2201      	movs	r2, #1
 800cc1a:	701a      	strb	r2, [r3, #0]
 800cc1c:	4b04      	ldr	r3, [pc, #16]	@ (800cc30 <rcutils_get_error_string+0x24>)
 800cc1e:	7818      	ldrb	r0, [r3, #0]
 800cc20:	4770      	bx	lr
 800cc22:	4b04      	ldr	r3, [pc, #16]	@ (800cc34 <rcutils_get_error_string+0x28>)
 800cc24:	7818      	ldrb	r0, [r3, #0]
 800cc26:	4770      	bx	lr
 800cc28:	2000c4b7 	.word	0x2000c4b7
 800cc2c:	2000c4c9 	.word	0x2000c4c9
 800cc30:	2000c4c8 	.word	0x2000c4c8
 800cc34:	080193a8 	.word	0x080193a8

0800cc38 <rcutils_reset_error>:
 800cc38:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800cc58 <rcutils_reset_error+0x20>
 800cc3c:	4a08      	ldr	r2, [pc, #32]	@ (800cc60 <rcutils_reset_error+0x28>)
 800cc3e:	4809      	ldr	r0, [pc, #36]	@ (800cc64 <rcutils_reset_error+0x2c>)
 800cc40:	4909      	ldr	r1, [pc, #36]	@ (800cc68 <rcutils_reset_error+0x30>)
 800cc42:	2300      	movs	r3, #0
 800cc44:	8013      	strh	r3, [r2, #0]
 800cc46:	ed82 7b02 	vstr	d7, [r2, #8]
 800cc4a:	4a08      	ldr	r2, [pc, #32]	@ (800cc6c <rcutils_reset_error+0x34>)
 800cc4c:	7003      	strb	r3, [r0, #0]
 800cc4e:	700b      	strb	r3, [r1, #0]
 800cc50:	7013      	strb	r3, [r2, #0]
 800cc52:	4770      	bx	lr
 800cc54:	f3af 8000 	nop.w
	...
 800cc60:	2000c4b8 	.word	0x2000c4b8
 800cc64:	2000c4c9 	.word	0x2000c4c9
 800cc68:	2000c4c8 	.word	0x2000c4c8
 800cc6c:	2000c4b7 	.word	0x2000c4b7

0800cc70 <rcutils_format_string_limit>:
 800cc70:	b40f      	push	{r0, r1, r2, r3}
 800cc72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc74:	b083      	sub	sp, #12
 800cc76:	ac08      	add	r4, sp, #32
 800cc78:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800cc7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc7e:	b34e      	cbz	r6, 800ccd4 <rcutils_format_string_limit+0x64>
 800cc80:	a808      	add	r0, sp, #32
 800cc82:	f7ff fef9 	bl	800ca78 <rcutils_allocator_is_valid>
 800cc86:	b328      	cbz	r0, 800ccd4 <rcutils_format_string_limit+0x64>
 800cc88:	2100      	movs	r1, #0
 800cc8a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800cc8c:	4632      	mov	r2, r6
 800cc8e:	4608      	mov	r0, r1
 800cc90:	e9cd 3300 	strd	r3, r3, [sp]
 800cc94:	f000 f8f4 	bl	800ce80 <rcutils_vsnprintf>
 800cc98:	1c43      	adds	r3, r0, #1
 800cc9a:	4605      	mov	r5, r0
 800cc9c:	d01a      	beq.n	800ccd4 <rcutils_format_string_limit+0x64>
 800cc9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cca0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cca2:	1c47      	adds	r7, r0, #1
 800cca4:	429f      	cmp	r7, r3
 800cca6:	bf84      	itt	hi
 800cca8:	461f      	movhi	r7, r3
 800ccaa:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800ccae:	4638      	mov	r0, r7
 800ccb0:	9b08      	ldr	r3, [sp, #32]
 800ccb2:	4798      	blx	r3
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	b168      	cbz	r0, 800ccd4 <rcutils_format_string_limit+0x64>
 800ccb8:	9b01      	ldr	r3, [sp, #4]
 800ccba:	4632      	mov	r2, r6
 800ccbc:	4639      	mov	r1, r7
 800ccbe:	f000 f8df 	bl	800ce80 <rcutils_vsnprintf>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	db02      	blt.n	800cccc <rcutils_format_string_limit+0x5c>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	5563      	strb	r3, [r4, r5]
 800ccca:	e004      	b.n	800ccd6 <rcutils_format_string_limit+0x66>
 800cccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	4798      	blx	r3
 800ccd4:	2400      	movs	r4, #0
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	b003      	add	sp, #12
 800ccda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ccde:	b004      	add	sp, #16
 800cce0:	4770      	bx	lr
 800cce2:	bf00      	nop

0800cce4 <rcutils_repl_str>:
 800cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce8:	ed2d 8b02 	vpush	{d8}
 800ccec:	b087      	sub	sp, #28
 800ccee:	4680      	mov	r8, r0
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	f8cd 8004 	str.w	r8, [sp, #4]
 800ccf6:	ee08 2a10 	vmov	s16, r2
 800ccfa:	468a      	mov	sl, r1
 800ccfc:	4699      	mov	r9, r3
 800ccfe:	f7f3 fa91 	bl	8000224 <strlen>
 800cd02:	2600      	movs	r6, #0
 800cd04:	4647      	mov	r7, r8
 800cd06:	9002      	str	r0, [sp, #8]
 800cd08:	46b3      	mov	fp, r6
 800cd0a:	2510      	movs	r5, #16
 800cd0c:	46b0      	mov	r8, r6
 800cd0e:	e01d      	b.n	800cd4c <rcutils_repl_str+0x68>
 800cd10:	f10b 0b01 	add.w	fp, fp, #1
 800cd14:	455e      	cmp	r6, fp
 800cd16:	d211      	bcs.n	800cd3c <rcutils_repl_str+0x58>
 800cd18:	442e      	add	r6, r5
 800cd1a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800cd1e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800cd22:	00b1      	lsls	r1, r6, #2
 800cd24:	4798      	blx	r3
 800cd26:	2800      	cmp	r0, #0
 800cd28:	f000 8088 	beq.w	800ce3c <rcutils_repl_str+0x158>
 800cd2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd30:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800cd34:	4680      	mov	r8, r0
 800cd36:	bf28      	it	cs
 800cd38:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800cd3c:	9a01      	ldr	r2, [sp, #4]
 800cd3e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800cd42:	1aa2      	subs	r2, r4, r2
 800cd44:	f843 2c04 	str.w	r2, [r3, #-4]
 800cd48:	9b02      	ldr	r3, [sp, #8]
 800cd4a:	18e7      	adds	r7, r4, r3
 800cd4c:	4651      	mov	r1, sl
 800cd4e:	4638      	mov	r0, r7
 800cd50:	f00b fa9b 	bl	801828a <strstr>
 800cd54:	4604      	mov	r4, r0
 800cd56:	4640      	mov	r0, r8
 800cd58:	2c00      	cmp	r4, #0
 800cd5a:	d1d9      	bne.n	800cd10 <rcutils_repl_str+0x2c>
 800cd5c:	46b8      	mov	r8, r7
 800cd5e:	4607      	mov	r7, r0
 800cd60:	4640      	mov	r0, r8
 800cd62:	f7f3 fa5f 	bl	8000224 <strlen>
 800cd66:	9b01      	ldr	r3, [sp, #4]
 800cd68:	eba8 0303 	sub.w	r3, r8, r3
 800cd6c:	181c      	adds	r4, r3, r0
 800cd6e:	9404      	str	r4, [sp, #16]
 800cd70:	f1bb 0f00 	cmp.w	fp, #0
 800cd74:	d04a      	beq.n	800ce0c <rcutils_repl_str+0x128>
 800cd76:	ee18 0a10 	vmov	r0, s16
 800cd7a:	f7f3 fa53 	bl	8000224 <strlen>
 800cd7e:	9b02      	ldr	r3, [sp, #8]
 800cd80:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800cd84:	1ac3      	subs	r3, r0, r3
 800cd86:	fb0b 4303 	mla	r3, fp, r3, r4
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	9305      	str	r3, [sp, #20]
 800cd8e:	4606      	mov	r6, r0
 800cd90:	f8d9 3000 	ldr.w	r3, [r9]
 800cd94:	1c50      	adds	r0, r2, #1
 800cd96:	4798      	blx	r3
 800cd98:	9003      	str	r0, [sp, #12]
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d04f      	beq.n	800ce3e <rcutils_repl_str+0x15a>
 800cd9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cda2:	683a      	ldr	r2, [r7, #0]
 800cda4:	4641      	mov	r1, r8
 800cda6:	f00b fb70 	bl	801848a <memcpy>
 800cdaa:	683d      	ldr	r5, [r7, #0]
 800cdac:	9b03      	ldr	r3, [sp, #12]
 800cdae:	9701      	str	r7, [sp, #4]
 800cdb0:	46ba      	mov	sl, r7
 800cdb2:	441d      	add	r5, r3
 800cdb4:	9f02      	ldr	r7, [sp, #8]
 800cdb6:	f8cd 9008 	str.w	r9, [sp, #8]
 800cdba:	2401      	movs	r4, #1
 800cdbc:	46d1      	mov	r9, sl
 800cdbe:	ee18 aa10 	vmov	sl, s16
 800cdc2:	e00a      	b.n	800cdda <rcutils_repl_str+0xf6>
 800cdc4:	f8d9 5000 	ldr.w	r5, [r9]
 800cdc8:	1aaa      	subs	r2, r5, r2
 800cdca:	1885      	adds	r5, r0, r2
 800cdcc:	f00b fb5d 	bl	801848a <memcpy>
 800cdd0:	45a3      	cmp	fp, r4
 800cdd2:	f104 0201 	add.w	r2, r4, #1
 800cdd6:	d935      	bls.n	800ce44 <rcutils_repl_str+0x160>
 800cdd8:	4614      	mov	r4, r2
 800cdda:	4632      	mov	r2, r6
 800cddc:	4651      	mov	r1, sl
 800cdde:	4628      	mov	r0, r5
 800cde0:	f00b fb53 	bl	801848a <memcpy>
 800cde4:	f859 2b04 	ldr.w	r2, [r9], #4
 800cde8:	45a3      	cmp	fp, r4
 800cdea:	443a      	add	r2, r7
 800cdec:	eb05 0006 	add.w	r0, r5, r6
 800cdf0:	eb08 0102 	add.w	r1, r8, r2
 800cdf4:	d1e6      	bne.n	800cdc4 <rcutils_repl_str+0xe0>
 800cdf6:	9b04      	ldr	r3, [sp, #16]
 800cdf8:	1a9a      	subs	r2, r3, r2
 800cdfa:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800cdfe:	f00b fb44 	bl	801848a <memcpy>
 800ce02:	9a03      	ldr	r2, [sp, #12]
 800ce04:	9905      	ldr	r1, [sp, #20]
 800ce06:	2300      	movs	r3, #0
 800ce08:	5453      	strb	r3, [r2, r1]
 800ce0a:	e00b      	b.n	800ce24 <rcutils_repl_str+0x140>
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f8d9 3000 	ldr.w	r3, [r9]
 800ce12:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ce16:	3001      	adds	r0, #1
 800ce18:	4798      	blx	r3
 800ce1a:	9003      	str	r0, [sp, #12]
 800ce1c:	b110      	cbz	r0, 800ce24 <rcutils_repl_str+0x140>
 800ce1e:	9901      	ldr	r1, [sp, #4]
 800ce20:	f00b fb2b 	bl	801847a <strcpy>
 800ce24:	4638      	mov	r0, r7
 800ce26:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ce2a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ce2e:	4798      	blx	r3
 800ce30:	9803      	ldr	r0, [sp, #12]
 800ce32:	b007      	add	sp, #28
 800ce34:	ecbd 8b02 	vpop	{d8}
 800ce38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce3c:	4647      	mov	r7, r8
 800ce3e:	2300      	movs	r3, #0
 800ce40:	9303      	str	r3, [sp, #12]
 800ce42:	e7ef      	b.n	800ce24 <rcutils_repl_str+0x140>
 800ce44:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800ce48:	e7db      	b.n	800ce02 <rcutils_repl_str+0x11e>
 800ce4a:	bf00      	nop

0800ce4c <rcutils_snprintf>:
 800ce4c:	b40c      	push	{r2, r3}
 800ce4e:	b530      	push	{r4, r5, lr}
 800ce50:	b083      	sub	sp, #12
 800ce52:	ab06      	add	r3, sp, #24
 800ce54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce58:	9301      	str	r3, [sp, #4]
 800ce5a:	b152      	cbz	r2, 800ce72 <rcutils_snprintf+0x26>
 800ce5c:	b138      	cbz	r0, 800ce6e <rcutils_snprintf+0x22>
 800ce5e:	b141      	cbz	r1, 800ce72 <rcutils_snprintf+0x26>
 800ce60:	f00b f9b4 	bl	80181cc <vsniprintf>
 800ce64:	b003      	add	sp, #12
 800ce66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce6a:	b002      	add	sp, #8
 800ce6c:	4770      	bx	lr
 800ce6e:	2900      	cmp	r1, #0
 800ce70:	d0f6      	beq.n	800ce60 <rcutils_snprintf+0x14>
 800ce72:	f00b fad5 	bl	8018420 <__errno>
 800ce76:	2316      	movs	r3, #22
 800ce78:	6003      	str	r3, [r0, #0]
 800ce7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce7e:	e7f1      	b.n	800ce64 <rcutils_snprintf+0x18>

0800ce80 <rcutils_vsnprintf>:
 800ce80:	b570      	push	{r4, r5, r6, lr}
 800ce82:	b13a      	cbz	r2, 800ce94 <rcutils_vsnprintf+0x14>
 800ce84:	b120      	cbz	r0, 800ce90 <rcutils_vsnprintf+0x10>
 800ce86:	b129      	cbz	r1, 800ce94 <rcutils_vsnprintf+0x14>
 800ce88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce8c:	f00b b99e 	b.w	80181cc <vsniprintf>
 800ce90:	2900      	cmp	r1, #0
 800ce92:	d0f9      	beq.n	800ce88 <rcutils_vsnprintf+0x8>
 800ce94:	f00b fac4 	bl	8018420 <__errno>
 800ce98:	2316      	movs	r3, #22
 800ce9a:	6003      	str	r3, [r0, #0]
 800ce9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cea0:	bd70      	pop	{r4, r5, r6, pc}
 800cea2:	bf00      	nop

0800cea4 <rcutils_strdup>:
 800cea4:	b084      	sub	sp, #16
 800cea6:	b570      	push	{r4, r5, r6, lr}
 800cea8:	b082      	sub	sp, #8
 800ceaa:	ac07      	add	r4, sp, #28
 800ceac:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800ceb0:	4605      	mov	r5, r0
 800ceb2:	b1b0      	cbz	r0, 800cee2 <rcutils_strdup+0x3e>
 800ceb4:	f7f3 f9b6 	bl	8000224 <strlen>
 800ceb8:	1c42      	adds	r2, r0, #1
 800ceba:	9b07      	ldr	r3, [sp, #28]
 800cebc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cebe:	9201      	str	r2, [sp, #4]
 800cec0:	4606      	mov	r6, r0
 800cec2:	4610      	mov	r0, r2
 800cec4:	4798      	blx	r3
 800cec6:	4604      	mov	r4, r0
 800cec8:	b128      	cbz	r0, 800ced6 <rcutils_strdup+0x32>
 800ceca:	9a01      	ldr	r2, [sp, #4]
 800cecc:	4629      	mov	r1, r5
 800cece:	f00b fadc 	bl	801848a <memcpy>
 800ced2:	2300      	movs	r3, #0
 800ced4:	55a3      	strb	r3, [r4, r6]
 800ced6:	4620      	mov	r0, r4
 800ced8:	b002      	add	sp, #8
 800ceda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cede:	b004      	add	sp, #16
 800cee0:	4770      	bx	lr
 800cee2:	4604      	mov	r4, r0
 800cee4:	e7f7      	b.n	800ced6 <rcutils_strdup+0x32>
 800cee6:	bf00      	nop

0800cee8 <rcutils_strndup>:
 800cee8:	b082      	sub	sp, #8
 800ceea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceec:	ac06      	add	r4, sp, #24
 800ceee:	e884 000c 	stmia.w	r4, {r2, r3}
 800cef2:	4605      	mov	r5, r0
 800cef4:	b188      	cbz	r0, 800cf1a <rcutils_strndup+0x32>
 800cef6:	1c4f      	adds	r7, r1, #1
 800cef8:	460e      	mov	r6, r1
 800cefa:	4638      	mov	r0, r7
 800cefc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cefe:	4790      	blx	r2
 800cf00:	4604      	mov	r4, r0
 800cf02:	b128      	cbz	r0, 800cf10 <rcutils_strndup+0x28>
 800cf04:	463a      	mov	r2, r7
 800cf06:	4629      	mov	r1, r5
 800cf08:	f00b fabf 	bl	801848a <memcpy>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	55a3      	strb	r3, [r4, r6]
 800cf10:	4620      	mov	r0, r4
 800cf12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cf16:	b002      	add	sp, #8
 800cf18:	4770      	bx	lr
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	e7f8      	b.n	800cf10 <rcutils_strndup+0x28>
 800cf1e:	bf00      	nop

0800cf20 <rcutils_system_time_now>:
 800cf20:	b308      	cbz	r0, 800cf66 <rcutils_system_time_now+0x46>
 800cf22:	b570      	push	{r4, r5, r6, lr}
 800cf24:	b084      	sub	sp, #16
 800cf26:	4604      	mov	r4, r0
 800cf28:	4669      	mov	r1, sp
 800cf2a:	2001      	movs	r0, #1
 800cf2c:	f7f5 fe94 	bl	8002c58 <clock_gettime>
 800cf30:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cf34:	2d00      	cmp	r5, #0
 800cf36:	db13      	blt.n	800cf60 <rcutils_system_time_now+0x40>
 800cf38:	9902      	ldr	r1, [sp, #8]
 800cf3a:	2900      	cmp	r1, #0
 800cf3c:	db0d      	blt.n	800cf5a <rcutils_system_time_now+0x3a>
 800cf3e:	4e0b      	ldr	r6, [pc, #44]	@ (800cf6c <rcutils_system_time_now+0x4c>)
 800cf40:	fba3 3206 	umull	r3, r2, r3, r6
 800cf44:	185b      	adds	r3, r3, r1
 800cf46:	fb06 2205 	mla	r2, r6, r5, r2
 800cf4a:	f04f 0000 	mov.w	r0, #0
 800cf4e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cf52:	e9c4 3200 	strd	r3, r2, [r4]
 800cf56:	b004      	add	sp, #16
 800cf58:	bd70      	pop	{r4, r5, r6, pc}
 800cf5a:	ea53 0205 	orrs.w	r2, r3, r5
 800cf5e:	d1ee      	bne.n	800cf3e <rcutils_system_time_now+0x1e>
 800cf60:	2002      	movs	r0, #2
 800cf62:	b004      	add	sp, #16
 800cf64:	bd70      	pop	{r4, r5, r6, pc}
 800cf66:	200b      	movs	r0, #11
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	3b9aca00 	.word	0x3b9aca00

0800cf70 <rcutils_steady_time_now>:
 800cf70:	b308      	cbz	r0, 800cfb6 <rcutils_steady_time_now+0x46>
 800cf72:	b570      	push	{r4, r5, r6, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	4604      	mov	r4, r0
 800cf78:	4669      	mov	r1, sp
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	f7f5 fe6c 	bl	8002c58 <clock_gettime>
 800cf80:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cf84:	2d00      	cmp	r5, #0
 800cf86:	db13      	blt.n	800cfb0 <rcutils_steady_time_now+0x40>
 800cf88:	9902      	ldr	r1, [sp, #8]
 800cf8a:	2900      	cmp	r1, #0
 800cf8c:	db0d      	blt.n	800cfaa <rcutils_steady_time_now+0x3a>
 800cf8e:	4e0b      	ldr	r6, [pc, #44]	@ (800cfbc <rcutils_steady_time_now+0x4c>)
 800cf90:	fba3 3206 	umull	r3, r2, r3, r6
 800cf94:	185b      	adds	r3, r3, r1
 800cf96:	fb06 2205 	mla	r2, r6, r5, r2
 800cf9a:	f04f 0000 	mov.w	r0, #0
 800cf9e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cfa2:	e9c4 3200 	strd	r3, r2, [r4]
 800cfa6:	b004      	add	sp, #16
 800cfa8:	bd70      	pop	{r4, r5, r6, pc}
 800cfaa:	ea53 0205 	orrs.w	r2, r3, r5
 800cfae:	d1ee      	bne.n	800cf8e <rcutils_steady_time_now+0x1e>
 800cfb0:	2002      	movs	r0, #2
 800cfb2:	b004      	add	sp, #16
 800cfb4:	bd70      	pop	{r4, r5, r6, pc}
 800cfb6:	200b      	movs	r0, #11
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	3b9aca00 	.word	0x3b9aca00

0800cfc0 <rmw_get_zero_initialized_init_options>:
 800cfc0:	b510      	push	{r4, lr}
 800cfc2:	2238      	movs	r2, #56	@ 0x38
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	f00b f938 	bl	801823c <memset>
 800cfcc:	f104 0010 	add.w	r0, r4, #16
 800cfd0:	f000 f80a 	bl	800cfe8 <rmw_get_default_security_options>
 800cfd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfd8:	60e3      	str	r3, [r4, #12]
 800cfda:	4620      	mov	r0, r4
 800cfdc:	bd10      	pop	{r4, pc}
 800cfde:	bf00      	nop

0800cfe0 <rmw_get_default_publisher_options>:
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	6002      	str	r2, [r0, #0]
 800cfe4:	7102      	strb	r2, [r0, #4]
 800cfe6:	4770      	bx	lr

0800cfe8 <rmw_get_default_security_options>:
 800cfe8:	2200      	movs	r2, #0
 800cfea:	7002      	strb	r2, [r0, #0]
 800cfec:	6042      	str	r2, [r0, #4]
 800cfee:	4770      	bx	lr

0800cff0 <rmw_subscription_content_filter_options_fini>:
 800cff0:	b1b0      	cbz	r0, 800d020 <rmw_subscription_content_filter_options_fini+0x30>
 800cff2:	b538      	push	{r3, r4, r5, lr}
 800cff4:	4604      	mov	r4, r0
 800cff6:	4608      	mov	r0, r1
 800cff8:	460d      	mov	r5, r1
 800cffa:	f7ff fd3d 	bl	800ca78 <rcutils_allocator_is_valid>
 800cffe:	b168      	cbz	r0, 800d01c <rmw_subscription_content_filter_options_fini+0x2c>
 800d000:	6820      	ldr	r0, [r4, #0]
 800d002:	b120      	cbz	r0, 800d00e <rmw_subscription_content_filter_options_fini+0x1e>
 800d004:	686b      	ldr	r3, [r5, #4]
 800d006:	6929      	ldr	r1, [r5, #16]
 800d008:	4798      	blx	r3
 800d00a:	2300      	movs	r3, #0
 800d00c:	6023      	str	r3, [r4, #0]
 800d00e:	1d20      	adds	r0, r4, #4
 800d010:	f008 fc2e 	bl	8015870 <rcutils_string_array_fini>
 800d014:	3800      	subs	r0, #0
 800d016:	bf18      	it	ne
 800d018:	2001      	movne	r0, #1
 800d01a:	bd38      	pop	{r3, r4, r5, pc}
 800d01c:	200b      	movs	r0, #11
 800d01e:	bd38      	pop	{r3, r4, r5, pc}
 800d020:	200b      	movs	r0, #11
 800d022:	4770      	bx	lr

0800d024 <rmw_get_default_subscription_options>:
 800d024:	2200      	movs	r2, #0
 800d026:	e9c0 2200 	strd	r2, r2, [r0]
 800d02a:	6082      	str	r2, [r0, #8]
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop

0800d030 <rmw_get_zero_initialized_message_info>:
 800d030:	b510      	push	{r4, lr}
 800d032:	2240      	movs	r2, #64	@ 0x40
 800d034:	4604      	mov	r4, r0
 800d036:	2100      	movs	r1, #0
 800d038:	f00b f900 	bl	801823c <memset>
 800d03c:	4620      	mov	r0, r4
 800d03e:	bd10      	pop	{r4, pc}

0800d040 <rmw_validate_namespace_with_size>:
 800d040:	b340      	cbz	r0, 800d094 <rmw_validate_namespace_with_size+0x54>
 800d042:	b570      	push	{r4, r5, r6, lr}
 800d044:	4614      	mov	r4, r2
 800d046:	b0c2      	sub	sp, #264	@ 0x108
 800d048:	b332      	cbz	r2, 800d098 <rmw_validate_namespace_with_size+0x58>
 800d04a:	2901      	cmp	r1, #1
 800d04c:	460d      	mov	r5, r1
 800d04e:	461e      	mov	r6, r3
 800d050:	d102      	bne.n	800d058 <rmw_validate_namespace_with_size+0x18>
 800d052:	7803      	ldrb	r3, [r0, #0]
 800d054:	2b2f      	cmp	r3, #47	@ 0x2f
 800d056:	d012      	beq.n	800d07e <rmw_validate_namespace_with_size+0x3e>
 800d058:	aa01      	add	r2, sp, #4
 800d05a:	4669      	mov	r1, sp
 800d05c:	f008 fdf0 	bl	8015c40 <rmw_validate_full_topic_name>
 800d060:	b978      	cbnz	r0, 800d082 <rmw_validate_namespace_with_size+0x42>
 800d062:	9b00      	ldr	r3, [sp, #0]
 800d064:	b14b      	cbz	r3, 800d07a <rmw_validate_namespace_with_size+0x3a>
 800d066:	2b07      	cmp	r3, #7
 800d068:	d007      	beq.n	800d07a <rmw_validate_namespace_with_size+0x3a>
 800d06a:	1e5a      	subs	r2, r3, #1
 800d06c:	2a05      	cmp	r2, #5
 800d06e:	d82b      	bhi.n	800d0c8 <rmw_validate_namespace_with_size+0x88>
 800d070:	e8df f002 	tbb	[pc, r2]
 800d074:	1e212427 	.word	0x1e212427
 800d078:	141b      	.short	0x141b
 800d07a:	2df5      	cmp	r5, #245	@ 0xf5
 800d07c:	d803      	bhi.n	800d086 <rmw_validate_namespace_with_size+0x46>
 800d07e:	2000      	movs	r0, #0
 800d080:	6020      	str	r0, [r4, #0]
 800d082:	b042      	add	sp, #264	@ 0x108
 800d084:	bd70      	pop	{r4, r5, r6, pc}
 800d086:	2307      	movs	r3, #7
 800d088:	6023      	str	r3, [r4, #0]
 800d08a:	2e00      	cmp	r6, #0
 800d08c:	d0f9      	beq.n	800d082 <rmw_validate_namespace_with_size+0x42>
 800d08e:	23f4      	movs	r3, #244	@ 0xf4
 800d090:	6033      	str	r3, [r6, #0]
 800d092:	e7f6      	b.n	800d082 <rmw_validate_namespace_with_size+0x42>
 800d094:	200b      	movs	r0, #11
 800d096:	4770      	bx	lr
 800d098:	200b      	movs	r0, #11
 800d09a:	e7f2      	b.n	800d082 <rmw_validate_namespace_with_size+0x42>
 800d09c:	2306      	movs	r3, #6
 800d09e:	6023      	str	r3, [r4, #0]
 800d0a0:	2e00      	cmp	r6, #0
 800d0a2:	d0ee      	beq.n	800d082 <rmw_validate_namespace_with_size+0x42>
 800d0a4:	9b01      	ldr	r3, [sp, #4]
 800d0a6:	6033      	str	r3, [r6, #0]
 800d0a8:	e7eb      	b.n	800d082 <rmw_validate_namespace_with_size+0x42>
 800d0aa:	2305      	movs	r3, #5
 800d0ac:	6023      	str	r3, [r4, #0]
 800d0ae:	e7f7      	b.n	800d0a0 <rmw_validate_namespace_with_size+0x60>
 800d0b0:	2304      	movs	r3, #4
 800d0b2:	6023      	str	r3, [r4, #0]
 800d0b4:	e7f4      	b.n	800d0a0 <rmw_validate_namespace_with_size+0x60>
 800d0b6:	2303      	movs	r3, #3
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	e7f1      	b.n	800d0a0 <rmw_validate_namespace_with_size+0x60>
 800d0bc:	2302      	movs	r3, #2
 800d0be:	6023      	str	r3, [r4, #0]
 800d0c0:	e7ee      	b.n	800d0a0 <rmw_validate_namespace_with_size+0x60>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	6023      	str	r3, [r4, #0]
 800d0c6:	e7eb      	b.n	800d0a0 <rmw_validate_namespace_with_size+0x60>
 800d0c8:	4a03      	ldr	r2, [pc, #12]	@ (800d0d8 <rmw_validate_namespace_with_size+0x98>)
 800d0ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d0ce:	a802      	add	r0, sp, #8
 800d0d0:	f7ff febc 	bl	800ce4c <rcutils_snprintf>
 800d0d4:	2001      	movs	r0, #1
 800d0d6:	e7d4      	b.n	800d082 <rmw_validate_namespace_with_size+0x42>
 800d0d8:	080193ac 	.word	0x080193ac

0800d0dc <rmw_validate_namespace>:
 800d0dc:	b168      	cbz	r0, 800d0fa <rmw_validate_namespace+0x1e>
 800d0de:	b570      	push	{r4, r5, r6, lr}
 800d0e0:	460d      	mov	r5, r1
 800d0e2:	4616      	mov	r6, r2
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	f7f3 f89d 	bl	8000224 <strlen>
 800d0ea:	4633      	mov	r3, r6
 800d0ec:	4601      	mov	r1, r0
 800d0ee:	462a      	mov	r2, r5
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0f6:	f7ff bfa3 	b.w	800d040 <rmw_validate_namespace_with_size>
 800d0fa:	200b      	movs	r0, #11
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop

0800d100 <rmw_namespace_validation_result_string>:
 800d100:	2807      	cmp	r0, #7
 800d102:	bf9a      	itte	ls
 800d104:	4b02      	ldrls	r3, [pc, #8]	@ (800d110 <rmw_namespace_validation_result_string+0x10>)
 800d106:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d10a:	4802      	ldrhi	r0, [pc, #8]	@ (800d114 <rmw_namespace_validation_result_string+0x14>)
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	08019a54 	.word	0x08019a54
 800d114:	080193fc 	.word	0x080193fc

0800d118 <rmw_validate_node_name>:
 800d118:	2800      	cmp	r0, #0
 800d11a:	d03b      	beq.n	800d194 <rmw_validate_node_name+0x7c>
 800d11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d120:	460d      	mov	r5, r1
 800d122:	2900      	cmp	r1, #0
 800d124:	d038      	beq.n	800d198 <rmw_validate_node_name+0x80>
 800d126:	4616      	mov	r6, r2
 800d128:	4604      	mov	r4, r0
 800d12a:	f7f3 f87b 	bl	8000224 <strlen>
 800d12e:	b1e0      	cbz	r0, 800d16a <rmw_validate_node_name+0x52>
 800d130:	1e63      	subs	r3, r4, #1
 800d132:	eb03 0800 	add.w	r8, r3, r0
 800d136:	f1c4 0101 	rsb	r1, r4, #1
 800d13a:	18cf      	adds	r7, r1, r3
 800d13c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800d140:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800d144:	f02e 0c20 	bic.w	ip, lr, #32
 800d148:	2a09      	cmp	r2, #9
 800d14a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800d14e:	d914      	bls.n	800d17a <rmw_validate_node_name+0x62>
 800d150:	f1bc 0f19 	cmp.w	ip, #25
 800d154:	d911      	bls.n	800d17a <rmw_validate_node_name+0x62>
 800d156:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800d15a:	d00e      	beq.n	800d17a <rmw_validate_node_name+0x62>
 800d15c:	2302      	movs	r3, #2
 800d15e:	602b      	str	r3, [r5, #0]
 800d160:	b106      	cbz	r6, 800d164 <rmw_validate_node_name+0x4c>
 800d162:	6037      	str	r7, [r6, #0]
 800d164:	2000      	movs	r0, #0
 800d166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d16a:	2301      	movs	r3, #1
 800d16c:	602b      	str	r3, [r5, #0]
 800d16e:	2e00      	cmp	r6, #0
 800d170:	d0f8      	beq.n	800d164 <rmw_validate_node_name+0x4c>
 800d172:	2000      	movs	r0, #0
 800d174:	6030      	str	r0, [r6, #0]
 800d176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d17a:	4543      	cmp	r3, r8
 800d17c:	d1dd      	bne.n	800d13a <rmw_validate_node_name+0x22>
 800d17e:	7822      	ldrb	r2, [r4, #0]
 800d180:	4b0d      	ldr	r3, [pc, #52]	@ (800d1b8 <rmw_validate_node_name+0xa0>)
 800d182:	5cd3      	ldrb	r3, [r2, r3]
 800d184:	f013 0304 	ands.w	r3, r3, #4
 800d188:	d110      	bne.n	800d1ac <rmw_validate_node_name+0x94>
 800d18a:	28ff      	cmp	r0, #255	@ 0xff
 800d18c:	d806      	bhi.n	800d19c <rmw_validate_node_name+0x84>
 800d18e:	602b      	str	r3, [r5, #0]
 800d190:	4618      	mov	r0, r3
 800d192:	e7e8      	b.n	800d166 <rmw_validate_node_name+0x4e>
 800d194:	200b      	movs	r0, #11
 800d196:	4770      	bx	lr
 800d198:	200b      	movs	r0, #11
 800d19a:	e7e4      	b.n	800d166 <rmw_validate_node_name+0x4e>
 800d19c:	2204      	movs	r2, #4
 800d19e:	602a      	str	r2, [r5, #0]
 800d1a0:	2e00      	cmp	r6, #0
 800d1a2:	d0df      	beq.n	800d164 <rmw_validate_node_name+0x4c>
 800d1a4:	22fe      	movs	r2, #254	@ 0xfe
 800d1a6:	6032      	str	r2, [r6, #0]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	e7dc      	b.n	800d166 <rmw_validate_node_name+0x4e>
 800d1ac:	2303      	movs	r3, #3
 800d1ae:	602b      	str	r3, [r5, #0]
 800d1b0:	2e00      	cmp	r6, #0
 800d1b2:	d1de      	bne.n	800d172 <rmw_validate_node_name+0x5a>
 800d1b4:	e7d6      	b.n	800d164 <rmw_validate_node_name+0x4c>
 800d1b6:	bf00      	nop
 800d1b8:	08019e9b 	.word	0x08019e9b

0800d1bc <rmw_node_name_validation_result_string>:
 800d1bc:	2804      	cmp	r0, #4
 800d1be:	bf9a      	itte	ls
 800d1c0:	4b02      	ldrls	r3, [pc, #8]	@ (800d1cc <rmw_node_name_validation_result_string+0x10>)
 800d1c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d1c6:	4802      	ldrhi	r0, [pc, #8]	@ (800d1d0 <rmw_node_name_validation_result_string+0x14>)
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	08019a74 	.word	0x08019a74
 800d1d0:	080195a4 	.word	0x080195a4

0800d1d4 <rmw_uros_set_custom_transport>:
 800d1d4:	b470      	push	{r4, r5, r6}
 800d1d6:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d1da:	b162      	cbz	r2, 800d1f6 <rmw_uros_set_custom_transport+0x22>
 800d1dc:	b15b      	cbz	r3, 800d1f6 <rmw_uros_set_custom_transport+0x22>
 800d1de:	b155      	cbz	r5, 800d1f6 <rmw_uros_set_custom_transport+0x22>
 800d1e0:	b14e      	cbz	r6, 800d1f6 <rmw_uros_set_custom_transport+0x22>
 800d1e2:	4c06      	ldr	r4, [pc, #24]	@ (800d1fc <rmw_uros_set_custom_transport+0x28>)
 800d1e4:	7020      	strb	r0, [r4, #0]
 800d1e6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d1ea:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d1ee:	6166      	str	r6, [r4, #20]
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	bc70      	pop	{r4, r5, r6}
 800d1f4:	4770      	bx	lr
 800d1f6:	200b      	movs	r0, #11
 800d1f8:	bc70      	pop	{r4, r5, r6}
 800d1fa:	4770      	bx	lr
 800d1fc:	2000c4cc 	.word	0x2000c4cc

0800d200 <rmw_uros_ping_agent>:
 800d200:	b570      	push	{r4, r5, r6, lr}
 800d202:	4b22      	ldr	r3, [pc, #136]	@ (800d28c <rmw_uros_ping_agent+0x8c>)
 800d204:	7b1a      	ldrb	r2, [r3, #12]
 800d206:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d20a:	4605      	mov	r5, r0
 800d20c:	460e      	mov	r6, r1
 800d20e:	b10a      	cbz	r2, 800d214 <rmw_uros_ping_agent+0x14>
 800d210:	681c      	ldr	r4, [r3, #0]
 800d212:	b9bc      	cbnz	r4, 800d244 <rmw_uros_ping_agent+0x44>
 800d214:	4b1e      	ldr	r3, [pc, #120]	@ (800d290 <rmw_uros_ping_agent+0x90>)
 800d216:	781a      	ldrb	r2, [r3, #0]
 800d218:	6918      	ldr	r0, [r3, #16]
 800d21a:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800d21e:	685a      	ldr	r2, [r3, #4]
 800d220:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800d222:	2100      	movs	r1, #0
 800d224:	68da      	ldr	r2, [r3, #12]
 800d226:	909c      	str	r0, [sp, #624]	@ 0x270
 800d228:	6958      	ldr	r0, [r3, #20]
 800d22a:	929b      	str	r2, [sp, #620]	@ 0x26c
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	909d      	str	r0, [sp, #628]	@ 0x274
 800d230:	466a      	mov	r2, sp
 800d232:	4608      	mov	r0, r1
 800d234:	939a      	str	r3, [sp, #616]	@ 0x268
 800d236:	f000 ffbd 	bl	800e1b4 <rmw_uxrce_transport_init>
 800d23a:	b198      	cbz	r0, 800d264 <rmw_uros_ping_agent+0x64>
 800d23c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d240:	bd70      	pop	{r4, r5, r6, pc}
 800d242:	b9f0      	cbnz	r0, 800d282 <rmw_uros_ping_agent+0x82>
 800d244:	68a0      	ldr	r0, [r4, #8]
 800d246:	4632      	mov	r2, r6
 800d248:	4629      	mov	r1, r5
 800d24a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d24e:	f002 fee9 	bl	8010024 <uxr_ping_agent_session>
 800d252:	6864      	ldr	r4, [r4, #4]
 800d254:	2c00      	cmp	r4, #0
 800d256:	d1f4      	bne.n	800d242 <rmw_uros_ping_agent+0x42>
 800d258:	f080 0001 	eor.w	r0, r0, #1
 800d25c:	b2c0      	uxtb	r0, r0
 800d25e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d262:	bd70      	pop	{r4, r5, r6, pc}
 800d264:	4632      	mov	r2, r6
 800d266:	4629      	mov	r1, r5
 800d268:	a89e      	add	r0, sp, #632	@ 0x278
 800d26a:	f002 ff27 	bl	80100bc <uxr_ping_agent_attempts>
 800d26e:	4604      	mov	r4, r0
 800d270:	4668      	mov	r0, sp
 800d272:	f002 fea3 	bl	800ffbc <uxr_close_custom_transport>
 800d276:	f084 0001 	eor.w	r0, r4, #1
 800d27a:	b2c0      	uxtb	r0, r0
 800d27c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d280:	bd70      	pop	{r4, r5, r6, pc}
 800d282:	2000      	movs	r0, #0
 800d284:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d288:	bd70      	pop	{r4, r5, r6, pc}
 800d28a:	bf00      	nop
 800d28c:	20010e24 	.word	0x20010e24
 800d290:	2000c4cc 	.word	0x2000c4cc

0800d294 <rmw_init_options_init>:
 800d294:	b084      	sub	sp, #16
 800d296:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d298:	b083      	sub	sp, #12
 800d29a:	ad09      	add	r5, sp, #36	@ 0x24
 800d29c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d2a0:	b130      	cbz	r0, 800d2b0 <rmw_init_options_init+0x1c>
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	f7ff fbe7 	bl	800ca78 <rcutils_allocator_is_valid>
 800d2aa:	b108      	cbz	r0, 800d2b0 <rmw_init_options_init+0x1c>
 800d2ac:	68a6      	ldr	r6, [r4, #8]
 800d2ae:	b12e      	cbz	r6, 800d2bc <rmw_init_options_init+0x28>
 800d2b0:	200b      	movs	r0, #11
 800d2b2:	b003      	add	sp, #12
 800d2b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d2b8:	b004      	add	sp, #16
 800d2ba:	4770      	bx	lr
 800d2bc:	2200      	movs	r2, #0
 800d2be:	2300      	movs	r3, #0
 800d2c0:	e9c4 2300 	strd	r2, r3, [r4]
 800d2c4:	4b20      	ldr	r3, [pc, #128]	@ (800d348 <rmw_init_options_init+0xb4>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	60a3      	str	r3, [r4, #8]
 800d2ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2cc:	f104 0c20 	add.w	ip, r4, #32
 800d2d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d2d4:	466f      	mov	r7, sp
 800d2d6:	682b      	ldr	r3, [r5, #0]
 800d2d8:	f8cc 3000 	str.w	r3, [ip]
 800d2dc:	4638      	mov	r0, r7
 800d2de:	61e6      	str	r6, [r4, #28]
 800d2e0:	60e6      	str	r6, [r4, #12]
 800d2e2:	f7ff fe81 	bl	800cfe8 <rmw_get_default_security_options>
 800d2e6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d2ea:	f104 0310 	add.w	r3, r4, #16
 800d2ee:	e883 0003 	stmia.w	r3, {r0, r1}
 800d2f2:	2203      	movs	r2, #3
 800d2f4:	4815      	ldr	r0, [pc, #84]	@ (800d34c <rmw_init_options_init+0xb8>)
 800d2f6:	4916      	ldr	r1, [pc, #88]	@ (800d350 <rmw_init_options_init+0xbc>)
 800d2f8:	7626      	strb	r6, [r4, #24]
 800d2fa:	f001 f88b 	bl	800e414 <rmw_uxrce_init_init_options_impl_memory>
 800d2fe:	4813      	ldr	r0, [pc, #76]	@ (800d34c <rmw_init_options_init+0xb8>)
 800d300:	f008 fdfc 	bl	8015efc <get_memory>
 800d304:	b1f0      	cbz	r0, 800d344 <rmw_init_options_init+0xb0>
 800d306:	4a13      	ldr	r2, [pc, #76]	@ (800d354 <rmw_init_options_init+0xc0>)
 800d308:	6883      	ldr	r3, [r0, #8]
 800d30a:	6851      	ldr	r1, [r2, #4]
 800d30c:	7810      	ldrb	r0, [r2, #0]
 800d30e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d310:	7418      	strb	r0, [r3, #16]
 800d312:	6159      	str	r1, [r3, #20]
 800d314:	68d1      	ldr	r1, [r2, #12]
 800d316:	61d9      	str	r1, [r3, #28]
 800d318:	6911      	ldr	r1, [r2, #16]
 800d31a:	6219      	str	r1, [r3, #32]
 800d31c:	6951      	ldr	r1, [r2, #20]
 800d31e:	6892      	ldr	r2, [r2, #8]
 800d320:	619a      	str	r2, [r3, #24]
 800d322:	6259      	str	r1, [r3, #36]	@ 0x24
 800d324:	f004 ff98 	bl	8012258 <uxr_nanos>
 800d328:	f00a fcba 	bl	8017ca0 <srand>
 800d32c:	f00a fce6 	bl	8017cfc <rand>
 800d330:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d332:	6298      	str	r0, [r3, #40]	@ 0x28
 800d334:	2800      	cmp	r0, #0
 800d336:	d0f9      	beq.n	800d32c <rmw_init_options_init+0x98>
 800d338:	2000      	movs	r0, #0
 800d33a:	b003      	add	sp, #12
 800d33c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d340:	b004      	add	sp, #16
 800d342:	4770      	bx	lr
 800d344:	2001      	movs	r0, #1
 800d346:	e7b4      	b.n	800d2b2 <rmw_init_options_init+0x1e>
 800d348:	08019db8 	.word	0x08019db8
 800d34c:	20010de4 	.word	0x20010de4
 800d350:	2000c680 	.word	0x2000c680
 800d354:	2000c4cc 	.word	0x2000c4cc

0800d358 <rmw_init_options_copy>:
 800d358:	b570      	push	{r4, r5, r6, lr}
 800d35a:	b088      	sub	sp, #32
 800d35c:	b160      	cbz	r0, 800d378 <rmw_init_options_copy+0x20>
 800d35e:	460d      	mov	r5, r1
 800d360:	b151      	cbz	r1, 800d378 <rmw_init_options_copy+0x20>
 800d362:	4604      	mov	r4, r0
 800d364:	6880      	ldr	r0, [r0, #8]
 800d366:	b128      	cbz	r0, 800d374 <rmw_init_options_copy+0x1c>
 800d368:	4b33      	ldr	r3, [pc, #204]	@ (800d438 <rmw_init_options_copy+0xe0>)
 800d36a:	6819      	ldr	r1, [r3, #0]
 800d36c:	f7f2 ff50 	bl	8000210 <strcmp>
 800d370:	2800      	cmp	r0, #0
 800d372:	d154      	bne.n	800d41e <rmw_init_options_copy+0xc6>
 800d374:	68ab      	ldr	r3, [r5, #8]
 800d376:	b11b      	cbz	r3, 800d380 <rmw_init_options_copy+0x28>
 800d378:	240b      	movs	r4, #11
 800d37a:	4620      	mov	r0, r4
 800d37c:	b008      	add	sp, #32
 800d37e:	bd70      	pop	{r4, r5, r6, pc}
 800d380:	4623      	mov	r3, r4
 800d382:	462a      	mov	r2, r5
 800d384:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d388:	f8d3 c000 	ldr.w	ip, [r3]
 800d38c:	6858      	ldr	r0, [r3, #4]
 800d38e:	6899      	ldr	r1, [r3, #8]
 800d390:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d394:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d398:	3310      	adds	r3, #16
 800d39a:	42b3      	cmp	r3, r6
 800d39c:	f8c2 c000 	str.w	ip, [r2]
 800d3a0:	6050      	str	r0, [r2, #4]
 800d3a2:	6091      	str	r1, [r2, #8]
 800d3a4:	f102 0210 	add.w	r2, r2, #16
 800d3a8:	d1ee      	bne.n	800d388 <rmw_init_options_copy+0x30>
 800d3aa:	6819      	ldr	r1, [r3, #0]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	6053      	str	r3, [r2, #4]
 800d3b0:	6011      	str	r1, [r2, #0]
 800d3b2:	f104 0e20 	add.w	lr, r4, #32
 800d3b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d3ba:	f10d 0c0c 	add.w	ip, sp, #12
 800d3be:	4666      	mov	r6, ip
 800d3c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d3c4:	f8de 3000 	ldr.w	r3, [lr]
 800d3c8:	f8cc 3000 	str.w	r3, [ip]
 800d3cc:	4630      	mov	r0, r6
 800d3ce:	f7ff fb53 	bl	800ca78 <rcutils_allocator_is_valid>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d0d0      	beq.n	800d378 <rmw_init_options_copy+0x20>
 800d3d6:	ab08      	add	r3, sp, #32
 800d3d8:	e913 0003 	ldmdb	r3, {r0, r1}
 800d3dc:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d3e0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d3e4:	69e0      	ldr	r0, [r4, #28]
 800d3e6:	f7ff fd5d 	bl	800cea4 <rcutils_strdup>
 800d3ea:	61e8      	str	r0, [r5, #28]
 800d3ec:	69e3      	ldr	r3, [r4, #28]
 800d3ee:	b103      	cbz	r3, 800d3f2 <rmw_init_options_copy+0x9a>
 800d3f0:	b1f8      	cbz	r0, 800d432 <rmw_init_options_copy+0xda>
 800d3f2:	4812      	ldr	r0, [pc, #72]	@ (800d43c <rmw_init_options_copy+0xe4>)
 800d3f4:	f008 fd82 	bl	8015efc <get_memory>
 800d3f8:	b1a8      	cbz	r0, 800d426 <rmw_init_options_copy+0xce>
 800d3fa:	6883      	ldr	r3, [r0, #8]
 800d3fc:	636b      	str	r3, [r5, #52]	@ 0x34
 800d3fe:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d400:	f102 0c10 	add.w	ip, r2, #16
 800d404:	f103 0510 	add.w	r5, r3, #16
 800d408:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d40c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d40e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d412:	2400      	movs	r4, #0
 800d414:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d418:	4620      	mov	r0, r4
 800d41a:	b008      	add	sp, #32
 800d41c:	bd70      	pop	{r4, r5, r6, pc}
 800d41e:	240c      	movs	r4, #12
 800d420:	4620      	mov	r0, r4
 800d422:	b008      	add	sp, #32
 800d424:	bd70      	pop	{r4, r5, r6, pc}
 800d426:	9b04      	ldr	r3, [sp, #16]
 800d428:	9907      	ldr	r1, [sp, #28]
 800d42a:	69e8      	ldr	r0, [r5, #28]
 800d42c:	4798      	blx	r3
 800d42e:	2401      	movs	r4, #1
 800d430:	e7a3      	b.n	800d37a <rmw_init_options_copy+0x22>
 800d432:	240a      	movs	r4, #10
 800d434:	e7a1      	b.n	800d37a <rmw_init_options_copy+0x22>
 800d436:	bf00      	nop
 800d438:	08019db8 	.word	0x08019db8
 800d43c:	20010de4 	.word	0x20010de4

0800d440 <rmw_init_options_fini>:
 800d440:	2800      	cmp	r0, #0
 800d442:	d041      	beq.n	800d4c8 <rmw_init_options_fini+0x88>
 800d444:	b510      	push	{r4, lr}
 800d446:	4604      	mov	r4, r0
 800d448:	b08e      	sub	sp, #56	@ 0x38
 800d44a:	3020      	adds	r0, #32
 800d44c:	f7ff fb14 	bl	800ca78 <rcutils_allocator_is_valid>
 800d450:	b380      	cbz	r0, 800d4b4 <rmw_init_options_fini+0x74>
 800d452:	68a0      	ldr	r0, [r4, #8]
 800d454:	b120      	cbz	r0, 800d460 <rmw_init_options_fini+0x20>
 800d456:	4b1e      	ldr	r3, [pc, #120]	@ (800d4d0 <rmw_init_options_fini+0x90>)
 800d458:	6819      	ldr	r1, [r3, #0]
 800d45a:	f7f2 fed9 	bl	8000210 <strcmp>
 800d45e:	bb88      	cbnz	r0, 800d4c4 <rmw_init_options_fini+0x84>
 800d460:	4b1c      	ldr	r3, [pc, #112]	@ (800d4d4 <rmw_init_options_fini+0x94>)
 800d462:	6819      	ldr	r1, [r3, #0]
 800d464:	b351      	cbz	r1, 800d4bc <rmw_init_options_fini+0x7c>
 800d466:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d468:	e001      	b.n	800d46e <rmw_init_options_fini+0x2e>
 800d46a:	6849      	ldr	r1, [r1, #4]
 800d46c:	b331      	cbz	r1, 800d4bc <rmw_init_options_fini+0x7c>
 800d46e:	688b      	ldr	r3, [r1, #8]
 800d470:	429a      	cmp	r2, r3
 800d472:	d1fa      	bne.n	800d46a <rmw_init_options_fini+0x2a>
 800d474:	4817      	ldr	r0, [pc, #92]	@ (800d4d4 <rmw_init_options_fini+0x94>)
 800d476:	f008 fd51 	bl	8015f1c <put_memory>
 800d47a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d47c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d47e:	69e0      	ldr	r0, [r4, #28]
 800d480:	4798      	blx	r3
 800d482:	4668      	mov	r0, sp
 800d484:	f7ff fd9c 	bl	800cfc0 <rmw_get_zero_initialized_init_options>
 800d488:	46ee      	mov	lr, sp
 800d48a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d48e:	46a4      	mov	ip, r4
 800d490:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d494:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d498:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d49c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d4a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4a4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d4a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	b00e      	add	sp, #56	@ 0x38
 800d4b2:	bd10      	pop	{r4, pc}
 800d4b4:	230b      	movs	r3, #11
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	b00e      	add	sp, #56	@ 0x38
 800d4ba:	bd10      	pop	{r4, pc}
 800d4bc:	2301      	movs	r3, #1
 800d4be:	4618      	mov	r0, r3
 800d4c0:	b00e      	add	sp, #56	@ 0x38
 800d4c2:	bd10      	pop	{r4, pc}
 800d4c4:	230c      	movs	r3, #12
 800d4c6:	e7f2      	b.n	800d4ae <rmw_init_options_fini+0x6e>
 800d4c8:	230b      	movs	r3, #11
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	08019db8 	.word	0x08019db8
 800d4d4:	20010de4 	.word	0x20010de4

0800d4d8 <rmw_init>:
 800d4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4dc:	b083      	sub	sp, #12
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	f000 80d3 	beq.w	800d68a <rmw_init+0x1b2>
 800d4e4:	460e      	mov	r6, r1
 800d4e6:	2900      	cmp	r1, #0
 800d4e8:	f000 80cf 	beq.w	800d68a <rmw_init+0x1b2>
 800d4ec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d4ee:	4605      	mov	r5, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f000 80ca 	beq.w	800d68a <rmw_init+0x1b2>
 800d4f6:	4b78      	ldr	r3, [pc, #480]	@ (800d6d8 <rmw_init+0x200>)
 800d4f8:	6880      	ldr	r0, [r0, #8]
 800d4fa:	681f      	ldr	r7, [r3, #0]
 800d4fc:	b128      	cbz	r0, 800d50a <rmw_init+0x32>
 800d4fe:	4639      	mov	r1, r7
 800d500:	f7f2 fe86 	bl	8000210 <strcmp>
 800d504:	2800      	cmp	r0, #0
 800d506:	f040 80ca 	bne.w	800d69e <rmw_init+0x1c6>
 800d50a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d50e:	4c73      	ldr	r4, [pc, #460]	@ (800d6dc <rmw_init+0x204>)
 800d510:	4973      	ldr	r1, [pc, #460]	@ (800d6e0 <rmw_init+0x208>)
 800d512:	4874      	ldr	r0, [pc, #464]	@ (800d6e4 <rmw_init+0x20c>)
 800d514:	60b7      	str	r7, [r6, #8]
 800d516:	e9c6 2300 	strd	r2, r3, [r6]
 800d51a:	68eb      	ldr	r3, [r5, #12]
 800d51c:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d51e:	2201      	movs	r2, #1
 800d520:	f000 ff18 	bl	800e354 <rmw_uxrce_init_session_memory>
 800d524:	4620      	mov	r0, r4
 800d526:	4970      	ldr	r1, [pc, #448]	@ (800d6e8 <rmw_init+0x210>)
 800d528:	2204      	movs	r2, #4
 800d52a:	f000 ff53 	bl	800e3d4 <rmw_uxrce_init_static_input_buffer_memory>
 800d52e:	f04f 0800 	mov.w	r8, #0
 800d532:	486c      	ldr	r0, [pc, #432]	@ (800d6e4 <rmw_init+0x20c>)
 800d534:	f884 800d 	strb.w	r8, [r4, #13]
 800d538:	f008 fce0 	bl	8015efc <get_memory>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	f000 80a9 	beq.w	800d694 <rmw_init+0x1bc>
 800d542:	6884      	ldr	r4, [r0, #8]
 800d544:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d546:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d548:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d54c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d550:	9101      	str	r1, [sp, #4]
 800d552:	6a00      	ldr	r0, [r0, #32]
 800d554:	9000      	str	r0, [sp, #0]
 800d556:	f104 0910 	add.w	r9, r4, #16
 800d55a:	4661      	mov	r1, ip
 800d55c:	4648      	mov	r0, r9
 800d55e:	f002 fceb 	bl	800ff38 <uxr_set_custom_transport_callbacks>
 800d562:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d566:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d56a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d56e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d572:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d576:	495d      	ldr	r1, [pc, #372]	@ (800d6ec <rmw_init+0x214>)
 800d578:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d57c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d580:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d584:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d588:	4859      	ldr	r0, [pc, #356]	@ (800d6f0 <rmw_init+0x218>)
 800d58a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d58e:	2201      	movs	r2, #1
 800d590:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d592:	f000 febf 	bl	800e314 <rmw_uxrce_init_node_memory>
 800d596:	4957      	ldr	r1, [pc, #348]	@ (800d6f4 <rmw_init+0x21c>)
 800d598:	4857      	ldr	r0, [pc, #348]	@ (800d6f8 <rmw_init+0x220>)
 800d59a:	2205      	movs	r2, #5
 800d59c:	f000 fe9a 	bl	800e2d4 <rmw_uxrce_init_subscription_memory>
 800d5a0:	4956      	ldr	r1, [pc, #344]	@ (800d6fc <rmw_init+0x224>)
 800d5a2:	4857      	ldr	r0, [pc, #348]	@ (800d700 <rmw_init+0x228>)
 800d5a4:	220a      	movs	r2, #10
 800d5a6:	f000 fe75 	bl	800e294 <rmw_uxrce_init_publisher_memory>
 800d5aa:	4956      	ldr	r1, [pc, #344]	@ (800d704 <rmw_init+0x22c>)
 800d5ac:	4856      	ldr	r0, [pc, #344]	@ (800d708 <rmw_init+0x230>)
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f000 fe30 	bl	800e214 <rmw_uxrce_init_service_memory>
 800d5b4:	4955      	ldr	r1, [pc, #340]	@ (800d70c <rmw_init+0x234>)
 800d5b6:	4856      	ldr	r0, [pc, #344]	@ (800d710 <rmw_init+0x238>)
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	f000 fe4b 	bl	800e254 <rmw_uxrce_init_client_memory>
 800d5be:	4955      	ldr	r1, [pc, #340]	@ (800d714 <rmw_init+0x23c>)
 800d5c0:	4855      	ldr	r0, [pc, #340]	@ (800d718 <rmw_init+0x240>)
 800d5c2:	220f      	movs	r2, #15
 800d5c4:	f000 fee6 	bl	800e394 <rmw_uxrce_init_topic_memory>
 800d5c8:	4954      	ldr	r1, [pc, #336]	@ (800d71c <rmw_init+0x244>)
 800d5ca:	4855      	ldr	r0, [pc, #340]	@ (800d720 <rmw_init+0x248>)
 800d5cc:	2203      	movs	r2, #3
 800d5ce:	f000 ff21 	bl	800e414 <rmw_uxrce_init_init_options_impl_memory>
 800d5d2:	4954      	ldr	r1, [pc, #336]	@ (800d724 <rmw_init+0x24c>)
 800d5d4:	4854      	ldr	r0, [pc, #336]	@ (800d728 <rmw_init+0x250>)
 800d5d6:	2204      	movs	r2, #4
 800d5d8:	f000 ff3c 	bl	800e454 <rmw_uxrce_init_wait_set_memory>
 800d5dc:	4953      	ldr	r1, [pc, #332]	@ (800d72c <rmw_init+0x254>)
 800d5de:	4854      	ldr	r0, [pc, #336]	@ (800d730 <rmw_init+0x258>)
 800d5e0:	2204      	movs	r2, #4
 800d5e2:	f000 ff57 	bl	800e494 <rmw_uxrce_init_guard_condition_memory>
 800d5e6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d5e8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d5ea:	4642      	mov	r2, r8
 800d5ec:	f000 fde2 	bl	800e1b4 <rmw_uxrce_transport_init>
 800d5f0:	4607      	mov	r7, r0
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d158      	bne.n	800d6a8 <rmw_init+0x1d0>
 800d5f6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d5f8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d5fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d5fe:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d602:	4628      	mov	r0, r5
 800d604:	f002 ffd0 	bl	80105a8 <uxr_init_session>
 800d608:	494a      	ldr	r1, [pc, #296]	@ (800d734 <rmw_init+0x25c>)
 800d60a:	4622      	mov	r2, r4
 800d60c:	4628      	mov	r0, r5
 800d60e:	f002 ffef 	bl	80105f0 <uxr_set_topic_callback>
 800d612:	4949      	ldr	r1, [pc, #292]	@ (800d738 <rmw_init+0x260>)
 800d614:	463a      	mov	r2, r7
 800d616:	4628      	mov	r0, r5
 800d618:	f002 ffe6 	bl	80105e8 <uxr_set_status_callback>
 800d61c:	4947      	ldr	r1, [pc, #284]	@ (800d73c <rmw_init+0x264>)
 800d61e:	463a      	mov	r2, r7
 800d620:	4628      	mov	r0, r5
 800d622:	f002 ffe9 	bl	80105f8 <uxr_set_request_callback>
 800d626:	4946      	ldr	r1, [pc, #280]	@ (800d740 <rmw_init+0x268>)
 800d628:	463a      	mov	r2, r7
 800d62a:	4628      	mov	r0, r5
 800d62c:	f002 ffe8 	bl	8010600 <uxr_set_reply_callback>
 800d630:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d634:	2304      	movs	r3, #4
 800d636:	0092      	lsls	r2, r2, #2
 800d638:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d63c:	4628      	mov	r0, r5
 800d63e:	f003 f81d 	bl	801067c <uxr_create_input_reliable_stream>
 800d642:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d646:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d64a:	0092      	lsls	r2, r2, #2
 800d64c:	2304      	movs	r3, #4
 800d64e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d652:	4628      	mov	r0, r5
 800d654:	f002 ffea 	bl	801062c <uxr_create_output_reliable_stream>
 800d658:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d65c:	4628      	mov	r0, r5
 800d65e:	f003 f807 	bl	8010670 <uxr_create_input_best_effort_stream>
 800d662:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d666:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d66a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d66e:	3114      	adds	r1, #20
 800d670:	4628      	mov	r0, r5
 800d672:	f002 ffc9 	bl	8010608 <uxr_create_output_best_effort_stream>
 800d676:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d67a:	4628      	mov	r0, r5
 800d67c:	f003 fd7e 	bl	801117c <uxr_create_session>
 800d680:	b1f8      	cbz	r0, 800d6c2 <rmw_init+0x1ea>
 800d682:	4638      	mov	r0, r7
 800d684:	b003      	add	sp, #12
 800d686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d68a:	270b      	movs	r7, #11
 800d68c:	4638      	mov	r0, r7
 800d68e:	b003      	add	sp, #12
 800d690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d694:	2701      	movs	r7, #1
 800d696:	4638      	mov	r0, r7
 800d698:	b003      	add	sp, #12
 800d69a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d69e:	270c      	movs	r7, #12
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	b003      	add	sp, #12
 800d6a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6a8:	4648      	mov	r0, r9
 800d6aa:	f002 fc87 	bl	800ffbc <uxr_close_custom_transport>
 800d6ae:	480d      	ldr	r0, [pc, #52]	@ (800d6e4 <rmw_init+0x20c>)
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	f008 fc33 	bl	8015f1c <put_memory>
 800d6b6:	4638      	mov	r0, r7
 800d6b8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d6bc:	b003      	add	sp, #12
 800d6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6c2:	4648      	mov	r0, r9
 800d6c4:	f002 fc7a 	bl	800ffbc <uxr_close_custom_transport>
 800d6c8:	4806      	ldr	r0, [pc, #24]	@ (800d6e4 <rmw_init+0x20c>)
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	f008 fc26 	bl	8015f1c <put_memory>
 800d6d0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d6d2:	2701      	movs	r7, #1
 800d6d4:	e7d5      	b.n	800d682 <rmw_init+0x1aa>
 800d6d6:	bf00      	nop
 800d6d8:	08019db8 	.word	0x08019db8
 800d6dc:	20010e34 	.word	0x20010e34
 800d6e0:	2000d0e0 	.word	0x2000d0e0
 800d6e4:	20010e24 	.word	0x20010e24
 800d6e8:	2000e688 	.word	0x2000e688
 800d6ec:	2000c704 	.word	0x2000c704
 800d6f0:	20010df4 	.word	0x20010df4
 800d6f4:	20010788 	.word	0x20010788
 800d6f8:	20010e44 	.word	0x20010e44
 800d6fc:	2000c7a8 	.word	0x2000c7a8
 800d700:	20010e04 	.word	0x20010e04
 800d704:	2000d018 	.word	0x2000d018
 800d708:	20010e14 	.word	0x20010e14
 800d70c:	2000c538 	.word	0x2000c538
 800d710:	2000c524 	.word	0x2000c524
 800d714:	20010bc0 	.word	0x20010bc0
 800d718:	20010e54 	.word	0x20010e54
 800d71c:	2000c680 	.word	0x2000c680
 800d720:	20010de4 	.word	0x20010de4
 800d724:	20010d64 	.word	0x20010d64
 800d728:	20010e64 	.word	0x20010e64
 800d72c:	2000c600 	.word	0x2000c600
 800d730:	20010dd4 	.word	0x20010dd4
 800d734:	08015d35 	.word	0x08015d35
 800d738:	08015d2d 	.word	0x08015d2d
 800d73c:	08015dcd 	.word	0x08015dcd
 800d740:	08015e69 	.word	0x08015e69

0800d744 <rmw_shutdown>:
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	b094      	sub	sp, #80	@ 0x50
 800d748:	2800      	cmp	r0, #0
 800d74a:	d050      	beq.n	800d7ee <rmw_shutdown+0xaa>
 800d74c:	4605      	mov	r5, r0
 800d74e:	6880      	ldr	r0, [r0, #8]
 800d750:	b128      	cbz	r0, 800d75e <rmw_shutdown+0x1a>
 800d752:	4b2b      	ldr	r3, [pc, #172]	@ (800d800 <rmw_shutdown+0xbc>)
 800d754:	6819      	ldr	r1, [r3, #0]
 800d756:	f7f2 fd5b 	bl	8000210 <strcmp>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d143      	bne.n	800d7e6 <rmw_shutdown+0xa2>
 800d75e:	4b29      	ldr	r3, [pc, #164]	@ (800d804 <rmw_shutdown+0xc0>)
 800d760:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d762:	681c      	ldr	r4, [r3, #0]
 800d764:	2c00      	cmp	r4, #0
 800d766:	d046      	beq.n	800d7f6 <rmw_shutdown+0xb2>
 800d768:	2600      	movs	r6, #0
 800d76a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d76e:	6902      	ldr	r2, [r0, #16]
 800d770:	428a      	cmp	r2, r1
 800d772:	d024      	beq.n	800d7be <rmw_shutdown+0x7a>
 800d774:	2c00      	cmp	r4, #0
 800d776:	d1f8      	bne.n	800d76a <rmw_shutdown+0x26>
 800d778:	b189      	cbz	r1, 800d79e <rmw_shutdown+0x5a>
 800d77a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d77e:	789b      	ldrb	r3, [r3, #2]
 800d780:	2b01      	cmp	r3, #1
 800d782:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d786:	bf14      	ite	ne
 800d788:	210a      	movne	r1, #10
 800d78a:	2100      	moveq	r1, #0
 800d78c:	f003 fcce 	bl	801112c <uxr_delete_session_retries>
 800d790:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d792:	f000 fe9f 	bl	800e4d4 <rmw_uxrce_fini_session_memory>
 800d796:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d798:	3010      	adds	r0, #16
 800d79a:	f002 fc0f 	bl	800ffbc <uxr_close_custom_transport>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d7a2:	b1b6      	cbz	r6, 800d7d2 <rmw_shutdown+0x8e>
 800d7a4:	4d18      	ldr	r5, [pc, #96]	@ (800d808 <rmw_shutdown+0xc4>)
 800d7a6:	682c      	ldr	r4, [r5, #0]
 800d7a8:	b134      	cbz	r4, 800d7b8 <rmw_shutdown+0x74>
 800d7aa:	4621      	mov	r1, r4
 800d7ac:	6864      	ldr	r4, [r4, #4]
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	f008 fbb4 	bl	8015f1c <put_memory>
 800d7b4:	2c00      	cmp	r4, #0
 800d7b6:	d1f8      	bne.n	800d7aa <rmw_shutdown+0x66>
 800d7b8:	4630      	mov	r0, r6
 800d7ba:	b014      	add	sp, #80	@ 0x50
 800d7bc:	bd70      	pop	{r4, r5, r6, pc}
 800d7be:	3018      	adds	r0, #24
 800d7c0:	f000 f8e8 	bl	800d994 <rmw_destroy_node>
 800d7c4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	2c00      	cmp	r4, #0
 800d7ca:	d1ce      	bne.n	800d76a <rmw_shutdown+0x26>
 800d7cc:	2900      	cmp	r1, #0
 800d7ce:	d1d4      	bne.n	800d77a <rmw_shutdown+0x36>
 800d7d0:	e7e5      	b.n	800d79e <rmw_shutdown+0x5a>
 800d7d2:	4668      	mov	r0, sp
 800d7d4:	f008 f9a0 	bl	8015b18 <rmw_get_zero_initialized_context>
 800d7d8:	2250      	movs	r2, #80	@ 0x50
 800d7da:	4669      	mov	r1, sp
 800d7dc:	4628      	mov	r0, r5
 800d7de:	f00a fe54 	bl	801848a <memcpy>
 800d7e2:	2600      	movs	r6, #0
 800d7e4:	e7de      	b.n	800d7a4 <rmw_shutdown+0x60>
 800d7e6:	260c      	movs	r6, #12
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	b014      	add	sp, #80	@ 0x50
 800d7ec:	bd70      	pop	{r4, r5, r6, pc}
 800d7ee:	260b      	movs	r6, #11
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	b014      	add	sp, #80	@ 0x50
 800d7f4:	bd70      	pop	{r4, r5, r6, pc}
 800d7f6:	2900      	cmp	r1, #0
 800d7f8:	d0eb      	beq.n	800d7d2 <rmw_shutdown+0x8e>
 800d7fa:	4626      	mov	r6, r4
 800d7fc:	e7bd      	b.n	800d77a <rmw_shutdown+0x36>
 800d7fe:	bf00      	nop
 800d800:	08019db8 	.word	0x08019db8
 800d804:	20010df4 	.word	0x20010df4
 800d808:	20010e34 	.word	0x20010e34

0800d80c <rmw_context_fini>:
 800d80c:	4b17      	ldr	r3, [pc, #92]	@ (800d86c <rmw_context_fini+0x60>)
 800d80e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d810:	b570      	push	{r4, r5, r6, lr}
 800d812:	681c      	ldr	r4, [r3, #0]
 800d814:	4605      	mov	r5, r0
 800d816:	b334      	cbz	r4, 800d866 <rmw_context_fini+0x5a>
 800d818:	2600      	movs	r6, #0
 800d81a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d81e:	6902      	ldr	r2, [r0, #16]
 800d820:	428a      	cmp	r2, r1
 800d822:	d018      	beq.n	800d856 <rmw_context_fini+0x4a>
 800d824:	2c00      	cmp	r4, #0
 800d826:	d1f8      	bne.n	800d81a <rmw_context_fini+0xe>
 800d828:	b189      	cbz	r1, 800d84e <rmw_context_fini+0x42>
 800d82a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d82e:	789b      	ldrb	r3, [r3, #2]
 800d830:	2b01      	cmp	r3, #1
 800d832:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d836:	bf14      	ite	ne
 800d838:	210a      	movne	r1, #10
 800d83a:	2100      	moveq	r1, #0
 800d83c:	f003 fc76 	bl	801112c <uxr_delete_session_retries>
 800d840:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d842:	f000 fe47 	bl	800e4d4 <rmw_uxrce_fini_session_memory>
 800d846:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d848:	3010      	adds	r0, #16
 800d84a:	f002 fbb7 	bl	800ffbc <uxr_close_custom_transport>
 800d84e:	2300      	movs	r3, #0
 800d850:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d852:	4630      	mov	r0, r6
 800d854:	bd70      	pop	{r4, r5, r6, pc}
 800d856:	3018      	adds	r0, #24
 800d858:	f000 f89c 	bl	800d994 <rmw_destroy_node>
 800d85c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d85e:	4606      	mov	r6, r0
 800d860:	2c00      	cmp	r4, #0
 800d862:	d1da      	bne.n	800d81a <rmw_context_fini+0xe>
 800d864:	e7e0      	b.n	800d828 <rmw_context_fini+0x1c>
 800d866:	4626      	mov	r6, r4
 800d868:	e7de      	b.n	800d828 <rmw_context_fini+0x1c>
 800d86a:	bf00      	nop
 800d86c:	20010df4 	.word	0x20010df4

0800d870 <create_node>:
 800d870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d874:	b083      	sub	sp, #12
 800d876:	2b00      	cmp	r3, #0
 800d878:	d05f      	beq.n	800d93a <create_node+0xca>
 800d87a:	4606      	mov	r6, r0
 800d87c:	4835      	ldr	r0, [pc, #212]	@ (800d954 <create_node+0xe4>)
 800d87e:	460f      	mov	r7, r1
 800d880:	4690      	mov	r8, r2
 800d882:	461d      	mov	r5, r3
 800d884:	f008 fb3a 	bl	8015efc <get_memory>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d056      	beq.n	800d93a <create_node+0xca>
 800d88c:	6884      	ldr	r4, [r0, #8]
 800d88e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d890:	6123      	str	r3, [r4, #16]
 800d892:	f008 fb9b 	bl	8015fcc <rmw_get_implementation_identifier>
 800d896:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800d89a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d89e:	f8c4 9020 	str.w	r9, [r4, #32]
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f7f2 fcbe 	bl	8000224 <strlen>
 800d8a8:	1c42      	adds	r2, r0, #1
 800d8aa:	2a3c      	cmp	r2, #60	@ 0x3c
 800d8ac:	f104 0518 	add.w	r5, r4, #24
 800d8b0:	d840      	bhi.n	800d934 <create_node+0xc4>
 800d8b2:	4648      	mov	r0, r9
 800d8b4:	4631      	mov	r1, r6
 800d8b6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800d8ba:	f00a fde6 	bl	801848a <memcpy>
 800d8be:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	f7f2 fcae 	bl	8000224 <strlen>
 800d8c8:	1c42      	adds	r2, r0, #1
 800d8ca:	2a3c      	cmp	r2, #60	@ 0x3c
 800d8cc:	d832      	bhi.n	800d934 <create_node+0xc4>
 800d8ce:	4639      	mov	r1, r7
 800d8d0:	4648      	mov	r0, r9
 800d8d2:	f00a fdda 	bl	801848a <memcpy>
 800d8d6:	6923      	ldr	r3, [r4, #16]
 800d8d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8dc:	2101      	movs	r1, #1
 800d8de:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800d8e2:	1842      	adds	r2, r0, r1
 800d8e4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800d8e8:	f002 fb6c 	bl	800ffc4 <uxr_object_id>
 800d8ec:	6160      	str	r0, [r4, #20]
 800d8ee:	783b      	ldrb	r3, [r7, #0]
 800d8f0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d8f2:	d127      	bne.n	800d944 <create_node+0xd4>
 800d8f4:	787b      	ldrb	r3, [r7, #1]
 800d8f6:	bb2b      	cbnz	r3, 800d944 <create_node+0xd4>
 800d8f8:	4a17      	ldr	r2, [pc, #92]	@ (800d958 <create_node+0xe8>)
 800d8fa:	4818      	ldr	r0, [pc, #96]	@ (800d95c <create_node+0xec>)
 800d8fc:	4633      	mov	r3, r6
 800d8fe:	213c      	movs	r1, #60	@ 0x3c
 800d900:	f00a fbbc 	bl	801807c <sniprintf>
 800d904:	6920      	ldr	r0, [r4, #16]
 800d906:	4915      	ldr	r1, [pc, #84]	@ (800d95c <create_node+0xec>)
 800d908:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800d90c:	9100      	str	r1, [sp, #0]
 800d90e:	2106      	movs	r1, #6
 800d910:	9101      	str	r1, [sp, #4]
 800d912:	6811      	ldr	r1, [r2, #0]
 800d914:	6962      	ldr	r2, [r4, #20]
 800d916:	fa1f f388 	uxth.w	r3, r8
 800d91a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d91e:	f002 f8d9 	bl	800fad4 <uxr_buffer_create_participant_bin>
 800d922:	4602      	mov	r2, r0
 800d924:	6920      	ldr	r0, [r4, #16]
 800d926:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d92a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d92e:	f000 ff49 	bl	800e7c4 <run_xrce_session>
 800d932:	b918      	cbnz	r0, 800d93c <create_node+0xcc>
 800d934:	4628      	mov	r0, r5
 800d936:	f000 fdd3 	bl	800e4e0 <rmw_uxrce_fini_node_memory>
 800d93a:	2500      	movs	r5, #0
 800d93c:	4628      	mov	r0, r5
 800d93e:	b003      	add	sp, #12
 800d940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d944:	4a06      	ldr	r2, [pc, #24]	@ (800d960 <create_node+0xf0>)
 800d946:	9600      	str	r6, [sp, #0]
 800d948:	463b      	mov	r3, r7
 800d94a:	213c      	movs	r1, #60	@ 0x3c
 800d94c:	4803      	ldr	r0, [pc, #12]	@ (800d95c <create_node+0xec>)
 800d94e:	f00a fb95 	bl	801807c <sniprintf>
 800d952:	e7d7      	b.n	800d904 <create_node+0x94>
 800d954:	20010df4 	.word	0x20010df4
 800d958:	080196c4 	.word	0x080196c4
 800d95c:	2000c4e8 	.word	0x2000c4e8
 800d960:	08019368 	.word	0x08019368

0800d964 <rmw_create_node>:
 800d964:	b199      	cbz	r1, 800d98e <rmw_create_node+0x2a>
 800d966:	780b      	ldrb	r3, [r1, #0]
 800d968:	468c      	mov	ip, r1
 800d96a:	b183      	cbz	r3, 800d98e <rmw_create_node+0x2a>
 800d96c:	b410      	push	{r4}
 800d96e:	4614      	mov	r4, r2
 800d970:	b14a      	cbz	r2, 800d986 <rmw_create_node+0x22>
 800d972:	7813      	ldrb	r3, [r2, #0]
 800d974:	b13b      	cbz	r3, 800d986 <rmw_create_node+0x22>
 800d976:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800d978:	4603      	mov	r3, r0
 800d97a:	4621      	mov	r1, r4
 800d97c:	4660      	mov	r0, ip
 800d97e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d982:	f7ff bf75 	b.w	800d870 <create_node>
 800d986:	2000      	movs	r0, #0
 800d988:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	2000      	movs	r0, #0
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop

0800d994 <rmw_destroy_node>:
 800d994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d996:	b328      	cbz	r0, 800d9e4 <rmw_destroy_node+0x50>
 800d998:	4607      	mov	r7, r0
 800d99a:	6800      	ldr	r0, [r0, #0]
 800d99c:	b120      	cbz	r0, 800d9a8 <rmw_destroy_node+0x14>
 800d99e:	4b36      	ldr	r3, [pc, #216]	@ (800da78 <rmw_destroy_node+0xe4>)
 800d9a0:	6819      	ldr	r1, [r3, #0]
 800d9a2:	f7f2 fc35 	bl	8000210 <strcmp>
 800d9a6:	b9e8      	cbnz	r0, 800d9e4 <rmw_destroy_node+0x50>
 800d9a8:	687d      	ldr	r5, [r7, #4]
 800d9aa:	b1dd      	cbz	r5, 800d9e4 <rmw_destroy_node+0x50>
 800d9ac:	4b33      	ldr	r3, [pc, #204]	@ (800da7c <rmw_destroy_node+0xe8>)
 800d9ae:	681c      	ldr	r4, [r3, #0]
 800d9b0:	2c00      	cmp	r4, #0
 800d9b2:	d05f      	beq.n	800da74 <rmw_destroy_node+0xe0>
 800d9b4:	2600      	movs	r6, #0
 800d9b6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d9ba:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800d9be:	429d      	cmp	r5, r3
 800d9c0:	d013      	beq.n	800d9ea <rmw_destroy_node+0x56>
 800d9c2:	2c00      	cmp	r4, #0
 800d9c4:	d1f7      	bne.n	800d9b6 <rmw_destroy_node+0x22>
 800d9c6:	4b2e      	ldr	r3, [pc, #184]	@ (800da80 <rmw_destroy_node+0xec>)
 800d9c8:	681c      	ldr	r4, [r3, #0]
 800d9ca:	b1c4      	cbz	r4, 800d9fe <rmw_destroy_node+0x6a>
 800d9cc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d9d0:	6a0b      	ldr	r3, [r1, #32]
 800d9d2:	429d      	cmp	r5, r3
 800d9d4:	d1f9      	bne.n	800d9ca <rmw_destroy_node+0x36>
 800d9d6:	317c      	adds	r1, #124	@ 0x7c
 800d9d8:	4638      	mov	r0, r7
 800d9da:	f000 fb37 	bl	800e04c <rmw_destroy_subscription>
 800d9de:	2801      	cmp	r0, #1
 800d9e0:	4606      	mov	r6, r0
 800d9e2:	d1f2      	bne.n	800d9ca <rmw_destroy_node+0x36>
 800d9e4:	2601      	movs	r6, #1
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ea:	3184      	adds	r1, #132	@ 0x84
 800d9ec:	4638      	mov	r0, r7
 800d9ee:	f000 f9a5 	bl	800dd3c <rmw_destroy_publisher>
 800d9f2:	2801      	cmp	r0, #1
 800d9f4:	4606      	mov	r6, r0
 800d9f6:	d0f5      	beq.n	800d9e4 <rmw_destroy_node+0x50>
 800d9f8:	2c00      	cmp	r4, #0
 800d9fa:	d1dc      	bne.n	800d9b6 <rmw_destroy_node+0x22>
 800d9fc:	e7e3      	b.n	800d9c6 <rmw_destroy_node+0x32>
 800d9fe:	4b21      	ldr	r3, [pc, #132]	@ (800da84 <rmw_destroy_node+0xf0>)
 800da00:	681c      	ldr	r4, [r3, #0]
 800da02:	b16c      	cbz	r4, 800da20 <rmw_destroy_node+0x8c>
 800da04:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800da08:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800da0a:	429d      	cmp	r5, r3
 800da0c:	d1f9      	bne.n	800da02 <rmw_destroy_node+0x6e>
 800da0e:	317c      	adds	r1, #124	@ 0x7c
 800da10:	4638      	mov	r0, r7
 800da12:	f000 f9e5 	bl	800dde0 <rmw_destroy_service>
 800da16:	2801      	cmp	r0, #1
 800da18:	4606      	mov	r6, r0
 800da1a:	d0e3      	beq.n	800d9e4 <rmw_destroy_node+0x50>
 800da1c:	2c00      	cmp	r4, #0
 800da1e:	d1f1      	bne.n	800da04 <rmw_destroy_node+0x70>
 800da20:	4b19      	ldr	r3, [pc, #100]	@ (800da88 <rmw_destroy_node+0xf4>)
 800da22:	681c      	ldr	r4, [r3, #0]
 800da24:	b16c      	cbz	r4, 800da42 <rmw_destroy_node+0xae>
 800da26:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800da2a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800da2c:	429d      	cmp	r5, r3
 800da2e:	d1f9      	bne.n	800da24 <rmw_destroy_node+0x90>
 800da30:	317c      	adds	r1, #124	@ 0x7c
 800da32:	4638      	mov	r0, r7
 800da34:	f008 fa86 	bl	8015f44 <rmw_destroy_client>
 800da38:	2801      	cmp	r0, #1
 800da3a:	4606      	mov	r6, r0
 800da3c:	d0d2      	beq.n	800d9e4 <rmw_destroy_node+0x50>
 800da3e:	2c00      	cmp	r4, #0
 800da40:	d1f1      	bne.n	800da26 <rmw_destroy_node+0x92>
 800da42:	6928      	ldr	r0, [r5, #16]
 800da44:	696a      	ldr	r2, [r5, #20]
 800da46:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800da4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da4e:	6819      	ldr	r1, [r3, #0]
 800da50:	f001 fff4 	bl	800fa3c <uxr_buffer_delete_entity>
 800da54:	4602      	mov	r2, r0
 800da56:	6928      	ldr	r0, [r5, #16]
 800da58:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800da5c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800da60:	f000 feb0 	bl	800e7c4 <run_xrce_session>
 800da64:	2800      	cmp	r0, #0
 800da66:	bf08      	it	eq
 800da68:	2602      	moveq	r6, #2
 800da6a:	4638      	mov	r0, r7
 800da6c:	f000 fd38 	bl	800e4e0 <rmw_uxrce_fini_node_memory>
 800da70:	4630      	mov	r0, r6
 800da72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da74:	4626      	mov	r6, r4
 800da76:	e7a6      	b.n	800d9c6 <rmw_destroy_node+0x32>
 800da78:	08019db8 	.word	0x08019db8
 800da7c:	20010e04 	.word	0x20010e04
 800da80:	20010e44 	.word	0x20010e44
 800da84:	20010e14 	.word	0x20010e14
 800da88:	2000c524 	.word	0x2000c524

0800da8c <rmw_node_get_graph_guard_condition>:
 800da8c:	6843      	ldr	r3, [r0, #4]
 800da8e:	6918      	ldr	r0, [r3, #16]
 800da90:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop

0800da98 <flush_session>:
 800da98:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800da9a:	f003 b9d5 	b.w	8010e48 <uxr_run_session_until_confirm_delivery>
 800da9e:	bf00      	nop

0800daa0 <rmw_publish>:
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d053      	beq.n	800db4c <rmw_publish+0xac>
 800daa4:	b570      	push	{r4, r5, r6, lr}
 800daa6:	460d      	mov	r5, r1
 800daa8:	b08e      	sub	sp, #56	@ 0x38
 800daaa:	2900      	cmp	r1, #0
 800daac:	d04b      	beq.n	800db46 <rmw_publish+0xa6>
 800daae:	4604      	mov	r4, r0
 800dab0:	6800      	ldr	r0, [r0, #0]
 800dab2:	f000 ff07 	bl	800e8c4 <is_uxrce_rmw_identifier_valid>
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d045      	beq.n	800db46 <rmw_publish+0xa6>
 800daba:	6866      	ldr	r6, [r4, #4]
 800dabc:	2e00      	cmp	r6, #0
 800dabe:	d042      	beq.n	800db46 <rmw_publish+0xa6>
 800dac0:	69b4      	ldr	r4, [r6, #24]
 800dac2:	4628      	mov	r0, r5
 800dac4:	6923      	ldr	r3, [r4, #16]
 800dac6:	4798      	blx	r3
 800dac8:	69f3      	ldr	r3, [r6, #28]
 800daca:	9005      	str	r0, [sp, #20]
 800dacc:	b113      	cbz	r3, 800dad4 <rmw_publish+0x34>
 800dace:	a805      	add	r0, sp, #20
 800dad0:	4798      	blx	r3
 800dad2:	9805      	ldr	r0, [sp, #20]
 800dad4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dad8:	691b      	ldr	r3, [r3, #16]
 800dada:	9000      	str	r0, [sp, #0]
 800dadc:	6972      	ldr	r2, [r6, #20]
 800dade:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dae0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dae4:	ab06      	add	r3, sp, #24
 800dae6:	f004 fc57 	bl	8012398 <uxr_prepare_output_stream>
 800daea:	b1d8      	cbz	r0, 800db24 <rmw_publish+0x84>
 800daec:	68a3      	ldr	r3, [r4, #8]
 800daee:	a906      	add	r1, sp, #24
 800daf0:	4628      	mov	r0, r5
 800daf2:	4798      	blx	r3
 800daf4:	6a33      	ldr	r3, [r6, #32]
 800daf6:	4604      	mov	r4, r0
 800daf8:	b10b      	cbz	r3, 800dafe <rmw_publish+0x5e>
 800dafa:	a806      	add	r0, sp, #24
 800dafc:	4798      	blx	r3
 800dafe:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800db02:	2b01      	cmp	r3, #1
 800db04:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800db08:	d022      	beq.n	800db50 <rmw_publish+0xb0>
 800db0a:	6918      	ldr	r0, [r3, #16]
 800db0c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800db0e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db12:	f003 f999 	bl	8010e48 <uxr_run_session_until_confirm_delivery>
 800db16:	4020      	ands	r0, r4
 800db18:	b2c4      	uxtb	r4, r0
 800db1a:	f084 0001 	eor.w	r0, r4, #1
 800db1e:	b2c0      	uxtb	r0, r0
 800db20:	b00e      	add	sp, #56	@ 0x38
 800db22:	bd70      	pop	{r4, r5, r6, pc}
 800db24:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800db28:	6918      	ldr	r0, [r3, #16]
 800db2a:	9b05      	ldr	r3, [sp, #20]
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	4b0b      	ldr	r3, [pc, #44]	@ (800db5c <rmw_publish+0xbc>)
 800db30:	9301      	str	r3, [sp, #4]
 800db32:	9602      	str	r6, [sp, #8]
 800db34:	6972      	ldr	r2, [r6, #20]
 800db36:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800db38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db3c:	ab06      	add	r3, sp, #24
 800db3e:	f004 fc5b 	bl	80123f8 <uxr_prepare_output_stream_fragmented>
 800db42:	2800      	cmp	r0, #0
 800db44:	d1d2      	bne.n	800daec <rmw_publish+0x4c>
 800db46:	2001      	movs	r0, #1
 800db48:	b00e      	add	sp, #56	@ 0x38
 800db4a:	bd70      	pop	{r4, r5, r6, pc}
 800db4c:	2001      	movs	r0, #1
 800db4e:	4770      	bx	lr
 800db50:	6918      	ldr	r0, [r3, #16]
 800db52:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db56:	f002 fdb7 	bl	80106c8 <uxr_flash_output_streams>
 800db5a:	e7de      	b.n	800db1a <rmw_publish+0x7a>
 800db5c:	0800da99 	.word	0x0800da99

0800db60 <rmw_create_publisher>:
 800db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db64:	b087      	sub	sp, #28
 800db66:	2800      	cmp	r0, #0
 800db68:	f000 80cc 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800db6c:	460e      	mov	r6, r1
 800db6e:	2900      	cmp	r1, #0
 800db70:	f000 80c8 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800db74:	4604      	mov	r4, r0
 800db76:	6800      	ldr	r0, [r0, #0]
 800db78:	4615      	mov	r5, r2
 800db7a:	4698      	mov	r8, r3
 800db7c:	f000 fea2 	bl	800e8c4 <is_uxrce_rmw_identifier_valid>
 800db80:	2800      	cmp	r0, #0
 800db82:	f000 80bf 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800db86:	2d00      	cmp	r5, #0
 800db88:	f000 80bc 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800db8c:	782b      	ldrb	r3, [r5, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f000 80b8 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800db94:	f1b8 0f00 	cmp.w	r8, #0
 800db98:	f000 80b4 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800db9c:	485c      	ldr	r0, [pc, #368]	@ (800dd10 <rmw_create_publisher+0x1b0>)
 800db9e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dba2:	f008 f9ab 	bl	8015efc <get_memory>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	f000 80ac 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800dbac:	6884      	ldr	r4, [r0, #8]
 800dbae:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800dbb2:	f008 fa0b 	bl	8015fcc <rmw_get_implementation_identifier>
 800dbb6:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800dbba:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800dbbe:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	f7f2 fb2e 	bl	8000224 <strlen>
 800dbc8:	3001      	adds	r0, #1
 800dbca:	283c      	cmp	r0, #60	@ 0x3c
 800dbcc:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800dbd0:	f200 8091 	bhi.w	800dcf6 <rmw_create_publisher+0x196>
 800dbd4:	4a4f      	ldr	r2, [pc, #316]	@ (800dd14 <rmw_create_publisher+0x1b4>)
 800dbd6:	462b      	mov	r3, r5
 800dbd8:	213c      	movs	r1, #60	@ 0x3c
 800dbda:	4650      	mov	r0, sl
 800dbdc:	f00a fa4e 	bl	801807c <sniprintf>
 800dbe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dbe4:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800dbe6:	4641      	mov	r1, r8
 800dbe8:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800dbec:	2250      	movs	r2, #80	@ 0x50
 800dbee:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800dbf2:	f00a fc4a 	bl	801848a <memcpy>
 800dbf6:	f898 3008 	ldrb.w	r3, [r8, #8]
 800dbfa:	4947      	ldr	r1, [pc, #284]	@ (800dd18 <rmw_create_publisher+0x1b8>)
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc02:	bf0c      	ite	eq
 800dc04:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800dc08:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800dc0c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800dc14:	4630      	mov	r0, r6
 800dc16:	f000 fe63 	bl	800e8e0 <get_message_typesupport_handle>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d06b      	beq.n	800dcf6 <rmw_create_publisher+0x196>
 800dc1e:	6842      	ldr	r2, [r0, #4]
 800dc20:	61a2      	str	r2, [r4, #24]
 800dc22:	2a00      	cmp	r2, #0
 800dc24:	d067      	beq.n	800dcf6 <rmw_create_publisher+0x196>
 800dc26:	4629      	mov	r1, r5
 800dc28:	4643      	mov	r3, r8
 800dc2a:	4648      	mov	r0, r9
 800dc2c:	f008 f9fc 	bl	8016028 <create_topic>
 800dc30:	6260      	str	r0, [r4, #36]	@ 0x24
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d063      	beq.n	800dcfe <rmw_create_publisher+0x19e>
 800dc36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dc3e:	2103      	movs	r1, #3
 800dc40:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800dc44:	1c42      	adds	r2, r0, #1
 800dc46:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800dc4a:	f002 f9bb 	bl	800ffc4 <uxr_object_id>
 800dc4e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800dc52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc56:	6120      	str	r0, [r4, #16]
 800dc58:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800dc5c:	6910      	ldr	r0, [r2, #16]
 800dc5e:	2506      	movs	r5, #6
 800dc60:	9500      	str	r5, [sp, #0]
 800dc62:	6819      	ldr	r1, [r3, #0]
 800dc64:	6922      	ldr	r2, [r4, #16]
 800dc66:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800dc6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc6e:	f001 ff99 	bl	800fba4 <uxr_buffer_create_publisher_bin>
 800dc72:	4602      	mov	r2, r0
 800dc74:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dc78:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dc7c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dc80:	f000 fda0 	bl	800e7c4 <run_xrce_session>
 800dc84:	b3b8      	cbz	r0, 800dcf6 <rmw_create_publisher+0x196>
 800dc86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dc8e:	2105      	movs	r1, #5
 800dc90:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800dc94:	1c42      	adds	r2, r0, #1
 800dc96:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800dc9a:	f002 f993 	bl	800ffc4 <uxr_object_id>
 800dc9e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dca2:	6160      	str	r0, [r4, #20]
 800dca4:	691e      	ldr	r6, [r3, #16]
 800dca6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dcaa:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800dcae:	f10d 0a10 	add.w	sl, sp, #16
 800dcb2:	4641      	mov	r1, r8
 800dcb4:	4650      	mov	r0, sl
 800dcb6:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800dcba:	f000 fd9f 	bl	800e7fc <convert_qos_profile>
 800dcbe:	9503      	str	r5, [sp, #12]
 800dcc0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800dcc4:	9001      	str	r0, [sp, #4]
 800dcc6:	f8ad 1008 	strh.w	r1, [sp, #8]
 800dcca:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800dcd4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800dcd8:	f8d8 1000 	ldr.w	r1, [r8]
 800dcdc:	4630      	mov	r0, r6
 800dcde:	f001 ffc1 	bl	800fc64 <uxr_buffer_create_datawriter_bin>
 800dce2:	4602      	mov	r2, r0
 800dce4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dce8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dcec:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dcf0:	f000 fd68 	bl	800e7c4 <run_xrce_session>
 800dcf4:	b938      	cbnz	r0, 800dd06 <rmw_create_publisher+0x1a6>
 800dcf6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800dcf8:	b108      	cbz	r0, 800dcfe <rmw_create_publisher+0x19e>
 800dcfa:	f000 fc61 	bl	800e5c0 <rmw_uxrce_fini_topic_memory>
 800dcfe:	4638      	mov	r0, r7
 800dd00:	f000 fc06 	bl	800e510 <rmw_uxrce_fini_publisher_memory>
 800dd04:	2700      	movs	r7, #0
 800dd06:	4638      	mov	r0, r7
 800dd08:	b007      	add	sp, #28
 800dd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0e:	bf00      	nop
 800dd10:	20010e04 	.word	0x20010e04
 800dd14:	080196c4 	.word	0x080196c4
 800dd18:	08019690 	.word	0x08019690

0800dd1c <rmw_publisher_get_actual_qos>:
 800dd1c:	b150      	cbz	r0, 800dd34 <rmw_publisher_get_actual_qos+0x18>
 800dd1e:	b508      	push	{r3, lr}
 800dd20:	460b      	mov	r3, r1
 800dd22:	b149      	cbz	r1, 800dd38 <rmw_publisher_get_actual_qos+0x1c>
 800dd24:	6841      	ldr	r1, [r0, #4]
 800dd26:	2250      	movs	r2, #80	@ 0x50
 800dd28:	3128      	adds	r1, #40	@ 0x28
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f00a fbad 	bl	801848a <memcpy>
 800dd30:	2000      	movs	r0, #0
 800dd32:	bd08      	pop	{r3, pc}
 800dd34:	200b      	movs	r0, #11
 800dd36:	4770      	bx	lr
 800dd38:	200b      	movs	r0, #11
 800dd3a:	bd08      	pop	{r3, pc}

0800dd3c <rmw_destroy_publisher>:
 800dd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3e:	b128      	cbz	r0, 800dd4c <rmw_destroy_publisher+0x10>
 800dd40:	4604      	mov	r4, r0
 800dd42:	6800      	ldr	r0, [r0, #0]
 800dd44:	460d      	mov	r5, r1
 800dd46:	f000 fdbd 	bl	800e8c4 <is_uxrce_rmw_identifier_valid>
 800dd4a:	b910      	cbnz	r0, 800dd52 <rmw_destroy_publisher+0x16>
 800dd4c:	2401      	movs	r4, #1
 800dd4e:	4620      	mov	r0, r4
 800dd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd52:	6863      	ldr	r3, [r4, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d0f9      	beq.n	800dd4c <rmw_destroy_publisher+0x10>
 800dd58:	2d00      	cmp	r5, #0
 800dd5a:	d0f7      	beq.n	800dd4c <rmw_destroy_publisher+0x10>
 800dd5c:	6828      	ldr	r0, [r5, #0]
 800dd5e:	f000 fdb1 	bl	800e8c4 <is_uxrce_rmw_identifier_valid>
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d0f2      	beq.n	800dd4c <rmw_destroy_publisher+0x10>
 800dd66:	686c      	ldr	r4, [r5, #4]
 800dd68:	2c00      	cmp	r4, #0
 800dd6a:	d0ef      	beq.n	800dd4c <rmw_destroy_publisher+0x10>
 800dd6c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800dd6e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800dd72:	f008 f9a9 	bl	80160c8 <destroy_topic>
 800dd76:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dd7a:	6962      	ldr	r2, [r4, #20]
 800dd7c:	6918      	ldr	r0, [r3, #16]
 800dd7e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dd82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd86:	6819      	ldr	r1, [r3, #0]
 800dd88:	f001 fe58 	bl	800fa3c <uxr_buffer_delete_entity>
 800dd8c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dd90:	6922      	ldr	r2, [r4, #16]
 800dd92:	691b      	ldr	r3, [r3, #16]
 800dd94:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800dd98:	4604      	mov	r4, r0
 800dd9a:	6809      	ldr	r1, [r1, #0]
 800dd9c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dda0:	f001 fe4c 	bl	800fa3c <uxr_buffer_delete_entity>
 800dda4:	693e      	ldr	r6, [r7, #16]
 800dda6:	4622      	mov	r2, r4
 800dda8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ddac:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f000 fd06 	bl	800e7c4 <run_xrce_session>
 800ddb8:	693e      	ldr	r6, [r7, #16]
 800ddba:	4622      	mov	r2, r4
 800ddbc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ddc0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	4630      	mov	r0, r6
 800ddc8:	f000 fcfc 	bl	800e7c4 <run_xrce_session>
 800ddcc:	b12c      	cbz	r4, 800ddda <rmw_destroy_publisher+0x9e>
 800ddce:	b120      	cbz	r0, 800ddda <rmw_destroy_publisher+0x9e>
 800ddd0:	2400      	movs	r4, #0
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f000 fb9c 	bl	800e510 <rmw_uxrce_fini_publisher_memory>
 800ddd8:	e7b9      	b.n	800dd4e <rmw_destroy_publisher+0x12>
 800ddda:	2402      	movs	r4, #2
 800dddc:	e7f9      	b.n	800ddd2 <rmw_destroy_publisher+0x96>
 800ddde:	bf00      	nop

0800dde0 <rmw_destroy_service>:
 800dde0:	b570      	push	{r4, r5, r6, lr}
 800dde2:	b128      	cbz	r0, 800ddf0 <rmw_destroy_service+0x10>
 800dde4:	4604      	mov	r4, r0
 800dde6:	6800      	ldr	r0, [r0, #0]
 800dde8:	460d      	mov	r5, r1
 800ddea:	f000 fd6b 	bl	800e8c4 <is_uxrce_rmw_identifier_valid>
 800ddee:	b910      	cbnz	r0, 800ddf6 <rmw_destroy_service+0x16>
 800ddf0:	2401      	movs	r4, #1
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	bd70      	pop	{r4, r5, r6, pc}
 800ddf6:	6863      	ldr	r3, [r4, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d0f9      	beq.n	800ddf0 <rmw_destroy_service+0x10>
 800ddfc:	2d00      	cmp	r5, #0
 800ddfe:	d0f7      	beq.n	800ddf0 <rmw_destroy_service+0x10>
 800de00:	6828      	ldr	r0, [r5, #0]
 800de02:	f000 fd5f 	bl	800e8c4 <is_uxrce_rmw_identifier_valid>
 800de06:	2800      	cmp	r0, #0
 800de08:	d0f2      	beq.n	800ddf0 <rmw_destroy_service+0x10>
 800de0a:	686e      	ldr	r6, [r5, #4]
 800de0c:	2e00      	cmp	r6, #0
 800de0e:	d0ef      	beq.n	800ddf0 <rmw_destroy_service+0x10>
 800de10:	6864      	ldr	r4, [r4, #4]
 800de12:	6932      	ldr	r2, [r6, #16]
 800de14:	6920      	ldr	r0, [r4, #16]
 800de16:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800de1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de1e:	6819      	ldr	r1, [r3, #0]
 800de20:	f002 fa3e 	bl	80102a0 <uxr_buffer_cancel_data>
 800de24:	4602      	mov	r2, r0
 800de26:	6920      	ldr	r0, [r4, #16]
 800de28:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800de2c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800de30:	f000 fcc8 	bl	800e7c4 <run_xrce_session>
 800de34:	6920      	ldr	r0, [r4, #16]
 800de36:	6932      	ldr	r2, [r6, #16]
 800de38:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800de3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de40:	6819      	ldr	r1, [r3, #0]
 800de42:	f001 fdfb 	bl	800fa3c <uxr_buffer_delete_entity>
 800de46:	4602      	mov	r2, r0
 800de48:	6920      	ldr	r0, [r4, #16]
 800de4a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800de4e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800de52:	f000 fcb7 	bl	800e7c4 <run_xrce_session>
 800de56:	2800      	cmp	r0, #0
 800de58:	4628      	mov	r0, r5
 800de5a:	bf14      	ite	ne
 800de5c:	2400      	movne	r4, #0
 800de5e:	2402      	moveq	r4, #2
 800de60:	f000 fb82 	bl	800e568 <rmw_uxrce_fini_service_memory>
 800de64:	e7c5      	b.n	800ddf2 <rmw_destroy_service+0x12>
 800de66:	bf00      	nop

0800de68 <rmw_create_subscription>:
 800de68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6c:	b08d      	sub	sp, #52	@ 0x34
 800de6e:	2800      	cmp	r0, #0
 800de70:	f000 80d1 	beq.w	800e016 <rmw_create_subscription+0x1ae>
 800de74:	460e      	mov	r6, r1
 800de76:	2900      	cmp	r1, #0
 800de78:	f000 80cd 	beq.w	800e016 <rmw_create_subscription+0x1ae>
 800de7c:	4604      	mov	r4, r0
 800de7e:	6800      	ldr	r0, [r0, #0]
 800de80:	4615      	mov	r5, r2
 800de82:	4698      	mov	r8, r3
 800de84:	f000 fd1e 	bl	800e8c4 <is_uxrce_rmw_identifier_valid>
 800de88:	2800      	cmp	r0, #0
 800de8a:	f000 80c4 	beq.w	800e016 <rmw_create_subscription+0x1ae>
 800de8e:	2d00      	cmp	r5, #0
 800de90:	f000 80c1 	beq.w	800e016 <rmw_create_subscription+0x1ae>
 800de94:	782b      	ldrb	r3, [r5, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	f000 80bd 	beq.w	800e016 <rmw_create_subscription+0x1ae>
 800de9c:	f1b8 0f00 	cmp.w	r8, #0
 800dea0:	f000 80b9 	beq.w	800e016 <rmw_create_subscription+0x1ae>
 800dea4:	485e      	ldr	r0, [pc, #376]	@ (800e020 <rmw_create_subscription+0x1b8>)
 800dea6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800deaa:	f008 f827 	bl	8015efc <get_memory>
 800deae:	4604      	mov	r4, r0
 800deb0:	2800      	cmp	r0, #0
 800deb2:	f000 80b1 	beq.w	800e018 <rmw_create_subscription+0x1b0>
 800deb6:	6887      	ldr	r7, [r0, #8]
 800deb8:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800debc:	f008 f886 	bl	8015fcc <rmw_get_implementation_identifier>
 800dec0:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800dec4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dec6:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800deca:	4628      	mov	r0, r5
 800decc:	f7f2 f9aa 	bl	8000224 <strlen>
 800ded0:	3001      	adds	r0, #1
 800ded2:	283c      	cmp	r0, #60	@ 0x3c
 800ded4:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800ded8:	f200 8096 	bhi.w	800e008 <rmw_create_subscription+0x1a0>
 800dedc:	4a51      	ldr	r2, [pc, #324]	@ (800e024 <rmw_create_subscription+0x1bc>)
 800dede:	462b      	mov	r3, r5
 800dee0:	213c      	movs	r1, #60	@ 0x3c
 800dee2:	4650      	mov	r0, sl
 800dee4:	f00a f8ca 	bl	801807c <sniprintf>
 800dee8:	4641      	mov	r1, r8
 800deea:	f8c7 9020 	str.w	r9, [r7, #32]
 800deee:	2250      	movs	r2, #80	@ 0x50
 800def0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800def4:	f00a fac9 	bl	801848a <memcpy>
 800def8:	494b      	ldr	r1, [pc, #300]	@ (800e028 <rmw_create_subscription+0x1c0>)
 800defa:	4630      	mov	r0, r6
 800defc:	f000 fcf0 	bl	800e8e0 <get_message_typesupport_handle>
 800df00:	2800      	cmp	r0, #0
 800df02:	f000 8081 	beq.w	800e008 <rmw_create_subscription+0x1a0>
 800df06:	6842      	ldr	r2, [r0, #4]
 800df08:	61ba      	str	r2, [r7, #24]
 800df0a:	2a00      	cmp	r2, #0
 800df0c:	d07c      	beq.n	800e008 <rmw_create_subscription+0x1a0>
 800df0e:	4629      	mov	r1, r5
 800df10:	4643      	mov	r3, r8
 800df12:	4648      	mov	r0, r9
 800df14:	f008 f888 	bl	8016028 <create_topic>
 800df18:	61f8      	str	r0, [r7, #28]
 800df1a:	2800      	cmp	r0, #0
 800df1c:	d078      	beq.n	800e010 <rmw_create_subscription+0x1a8>
 800df1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df26:	2104      	movs	r1, #4
 800df28:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800df2c:	1c42      	adds	r2, r0, #1
 800df2e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800df32:	f002 f847 	bl	800ffc4 <uxr_object_id>
 800df36:	6138      	str	r0, [r7, #16]
 800df38:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800df3c:	2506      	movs	r5, #6
 800df3e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800df42:	9500      	str	r5, [sp, #0]
 800df44:	6819      	ldr	r1, [r3, #0]
 800df46:	693a      	ldr	r2, [r7, #16]
 800df48:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800df4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df50:	f001 fe58 	bl	800fc04 <uxr_buffer_create_subscriber_bin>
 800df54:	4602      	mov	r2, r0
 800df56:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800df5a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800df5e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800df62:	f000 fc2f 	bl	800e7c4 <run_xrce_session>
 800df66:	2800      	cmp	r0, #0
 800df68:	d04e      	beq.n	800e008 <rmw_create_subscription+0x1a0>
 800df6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df72:	4629      	mov	r1, r5
 800df74:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800df78:	1c42      	adds	r2, r0, #1
 800df7a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800df7e:	f002 f821 	bl	800ffc4 <uxr_object_id>
 800df82:	ae08      	add	r6, sp, #32
 800df84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	6178      	str	r0, [r7, #20]
 800df8c:	4641      	mov	r1, r8
 800df8e:	4630      	mov	r0, r6
 800df90:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800df94:	9305      	str	r3, [sp, #20]
 800df96:	f000 fc31 	bl	800e7fc <convert_qos_profile>
 800df9a:	9503      	str	r5, [sp, #12]
 800df9c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dfa0:	9b05      	ldr	r3, [sp, #20]
 800dfa2:	9001      	str	r0, [sp, #4]
 800dfa4:	f8ad 1008 	strh.w	r1, [sp, #8]
 800dfa8:	691b      	ldr	r3, [r3, #16]
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800dfb0:	f8db 1000 	ldr.w	r1, [fp]
 800dfb4:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800dfb8:	f001 feca 	bl	800fd50 <uxr_buffer_create_datareader_bin>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dfc2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dfc6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dfca:	f000 fbfb 	bl	800e7c4 <run_xrce_session>
 800dfce:	b1d8      	cbz	r0, 800e008 <rmw_create_subscription+0x1a0>
 800dfd0:	f898 3008 	ldrb.w	r3, [r8, #8]
 800dfd4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	bf0c      	ite	eq
 800dfdc:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800dfe0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800dfe4:	9307      	str	r3, [sp, #28]
 800dfe6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800dfea:	2200      	movs	r2, #0
 800dfec:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800dff0:	ab0a      	add	r3, sp, #40	@ 0x28
 800dff2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dff6:	9300      	str	r3, [sp, #0]
 800dff8:	697a      	ldr	r2, [r7, #20]
 800dffa:	9b07      	ldr	r3, [sp, #28]
 800dffc:	6809      	ldr	r1, [r1, #0]
 800dffe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e002:	f002 f913 	bl	801022c <uxr_buffer_request_data>
 800e006:	e007      	b.n	800e018 <rmw_create_subscription+0x1b0>
 800e008:	69f8      	ldr	r0, [r7, #28]
 800e00a:	b108      	cbz	r0, 800e010 <rmw_create_subscription+0x1a8>
 800e00c:	f000 fad8 	bl	800e5c0 <rmw_uxrce_fini_topic_memory>
 800e010:	4620      	mov	r0, r4
 800e012:	f000 fa93 	bl	800e53c <rmw_uxrce_fini_subscription_memory>
 800e016:	2400      	movs	r4, #0
 800e018:	4620      	mov	r0, r4
 800e01a:	b00d      	add	sp, #52	@ 0x34
 800e01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e020:	20010e44 	.word	0x20010e44
 800e024:	080196c4 	.word	0x080196c4
 800e028:	08019690 	.word	0x08019690

0800e02c <rmw_subscription_get_actual_qos>:
 800e02c:	b150      	cbz	r0, 800e044 <rmw_subscription_get_actual_qos+0x18>
 800e02e:	b508      	push	{r3, lr}
 800e030:	460b      	mov	r3, r1
 800e032:	b149      	cbz	r1, 800e048 <rmw_subscription_get_actual_qos+0x1c>
 800e034:	6841      	ldr	r1, [r0, #4]
 800e036:	2250      	movs	r2, #80	@ 0x50
 800e038:	3128      	adds	r1, #40	@ 0x28
 800e03a:	4618      	mov	r0, r3
 800e03c:	f00a fa25 	bl	801848a <memcpy>
 800e040:	2000      	movs	r0, #0
 800e042:	bd08      	pop	{r3, pc}
 800e044:	200b      	movs	r0, #11
 800e046:	4770      	bx	lr
 800e048:	200b      	movs	r0, #11
 800e04a:	bd08      	pop	{r3, pc}

0800e04c <rmw_destroy_subscription>:
 800e04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e04e:	b128      	cbz	r0, 800e05c <rmw_destroy_subscription+0x10>
 800e050:	4604      	mov	r4, r0
 800e052:	6800      	ldr	r0, [r0, #0]
 800e054:	460d      	mov	r5, r1
 800e056:	f000 fc35 	bl	800e8c4 <is_uxrce_rmw_identifier_valid>
 800e05a:	b910      	cbnz	r0, 800e062 <rmw_destroy_subscription+0x16>
 800e05c:	2401      	movs	r4, #1
 800e05e:	4620      	mov	r0, r4
 800e060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e062:	6863      	ldr	r3, [r4, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d0f9      	beq.n	800e05c <rmw_destroy_subscription+0x10>
 800e068:	2d00      	cmp	r5, #0
 800e06a:	d0f7      	beq.n	800e05c <rmw_destroy_subscription+0x10>
 800e06c:	6828      	ldr	r0, [r5, #0]
 800e06e:	f000 fc29 	bl	800e8c4 <is_uxrce_rmw_identifier_valid>
 800e072:	2800      	cmp	r0, #0
 800e074:	d0f2      	beq.n	800e05c <rmw_destroy_subscription+0x10>
 800e076:	686c      	ldr	r4, [r5, #4]
 800e078:	2c00      	cmp	r4, #0
 800e07a:	d0ef      	beq.n	800e05c <rmw_destroy_subscription+0x10>
 800e07c:	6a26      	ldr	r6, [r4, #32]
 800e07e:	6962      	ldr	r2, [r4, #20]
 800e080:	6930      	ldr	r0, [r6, #16]
 800e082:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e086:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e08a:	6819      	ldr	r1, [r3, #0]
 800e08c:	f002 f908 	bl	80102a0 <uxr_buffer_cancel_data>
 800e090:	4602      	mov	r2, r0
 800e092:	6930      	ldr	r0, [r6, #16]
 800e094:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e098:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e09c:	f000 fb92 	bl	800e7c4 <run_xrce_session>
 800e0a0:	69e0      	ldr	r0, [r4, #28]
 800e0a2:	f008 f811 	bl	80160c8 <destroy_topic>
 800e0a6:	6a23      	ldr	r3, [r4, #32]
 800e0a8:	6962      	ldr	r2, [r4, #20]
 800e0aa:	6918      	ldr	r0, [r3, #16]
 800e0ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e0b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e0b4:	6819      	ldr	r1, [r3, #0]
 800e0b6:	f001 fcc1 	bl	800fa3c <uxr_buffer_delete_entity>
 800e0ba:	6a23      	ldr	r3, [r4, #32]
 800e0bc:	6922      	ldr	r2, [r4, #16]
 800e0be:	691b      	ldr	r3, [r3, #16]
 800e0c0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e0c4:	4604      	mov	r4, r0
 800e0c6:	6809      	ldr	r1, [r1, #0]
 800e0c8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e0cc:	f001 fcb6 	bl	800fa3c <uxr_buffer_delete_entity>
 800e0d0:	6937      	ldr	r7, [r6, #16]
 800e0d2:	4622      	mov	r2, r4
 800e0d4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800e0d8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800e0dc:	4604      	mov	r4, r0
 800e0de:	4638      	mov	r0, r7
 800e0e0:	f000 fb70 	bl	800e7c4 <run_xrce_session>
 800e0e4:	6936      	ldr	r6, [r6, #16]
 800e0e6:	4622      	mov	r2, r4
 800e0e8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e0ec:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	f000 fb66 	bl	800e7c4 <run_xrce_session>
 800e0f8:	b12c      	cbz	r4, 800e106 <rmw_destroy_subscription+0xba>
 800e0fa:	b120      	cbz	r0, 800e106 <rmw_destroy_subscription+0xba>
 800e0fc:	2400      	movs	r4, #0
 800e0fe:	4628      	mov	r0, r5
 800e100:	f000 fa1c 	bl	800e53c <rmw_uxrce_fini_subscription_memory>
 800e104:	e7ab      	b.n	800e05e <rmw_destroy_subscription+0x12>
 800e106:	2402      	movs	r4, #2
 800e108:	e7f9      	b.n	800e0fe <rmw_destroy_subscription+0xb2>
 800e10a:	bf00      	nop

0800e10c <rmw_take_with_info>:
 800e10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e10e:	4604      	mov	r4, r0
 800e110:	6800      	ldr	r0, [r0, #0]
 800e112:	b089      	sub	sp, #36	@ 0x24
 800e114:	460f      	mov	r7, r1
 800e116:	4615      	mov	r5, r2
 800e118:	b128      	cbz	r0, 800e126 <rmw_take_with_info+0x1a>
 800e11a:	4b24      	ldr	r3, [pc, #144]	@ (800e1ac <rmw_take_with_info+0xa0>)
 800e11c:	6819      	ldr	r1, [r3, #0]
 800e11e:	f7f2 f877 	bl	8000210 <strcmp>
 800e122:	2800      	cmp	r0, #0
 800e124:	d13e      	bne.n	800e1a4 <rmw_take_with_info+0x98>
 800e126:	b305      	cbz	r5, 800e16a <rmw_take_with_info+0x5e>
 800e128:	6864      	ldr	r4, [r4, #4]
 800e12a:	2300      	movs	r3, #0
 800e12c:	702b      	strb	r3, [r5, #0]
 800e12e:	f000 facb 	bl	800e6c8 <rmw_uxrce_clean_expired_static_input_buffer>
 800e132:	4620      	mov	r0, r4
 800e134:	f000 faa0 	bl	800e678 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e138:	4606      	mov	r6, r0
 800e13a:	b1f0      	cbz	r0, 800e17a <rmw_take_with_info+0x6e>
 800e13c:	6881      	ldr	r1, [r0, #8]
 800e13e:	4668      	mov	r0, sp
 800e140:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800e144:	3110      	adds	r1, #16
 800e146:	f001 fc09 	bl	800f95c <ucdr_init_buffer>
 800e14a:	69a3      	ldr	r3, [r4, #24]
 800e14c:	4639      	mov	r1, r7
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	4668      	mov	r0, sp
 800e152:	4798      	blx	r3
 800e154:	4631      	mov	r1, r6
 800e156:	4604      	mov	r4, r0
 800e158:	4815      	ldr	r0, [pc, #84]	@ (800e1b0 <rmw_take_with_info+0xa4>)
 800e15a:	f007 fedf 	bl	8015f1c <put_memory>
 800e15e:	702c      	strb	r4, [r5, #0]
 800e160:	f084 0001 	eor.w	r0, r4, #1
 800e164:	b2c0      	uxtb	r0, r0
 800e166:	b009      	add	sp, #36	@ 0x24
 800e168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e16a:	6864      	ldr	r4, [r4, #4]
 800e16c:	f000 faac 	bl	800e6c8 <rmw_uxrce_clean_expired_static_input_buffer>
 800e170:	4620      	mov	r0, r4
 800e172:	f000 fa81 	bl	800e678 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e176:	4605      	mov	r5, r0
 800e178:	b910      	cbnz	r0, 800e180 <rmw_take_with_info+0x74>
 800e17a:	2001      	movs	r0, #1
 800e17c:	b009      	add	sp, #36	@ 0x24
 800e17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e180:	68a9      	ldr	r1, [r5, #8]
 800e182:	4668      	mov	r0, sp
 800e184:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800e188:	3110      	adds	r1, #16
 800e18a:	f001 fbe7 	bl	800f95c <ucdr_init_buffer>
 800e18e:	69a3      	ldr	r3, [r4, #24]
 800e190:	4639      	mov	r1, r7
 800e192:	68db      	ldr	r3, [r3, #12]
 800e194:	4668      	mov	r0, sp
 800e196:	4798      	blx	r3
 800e198:	4629      	mov	r1, r5
 800e19a:	4604      	mov	r4, r0
 800e19c:	4804      	ldr	r0, [pc, #16]	@ (800e1b0 <rmw_take_with_info+0xa4>)
 800e19e:	f007 febd 	bl	8015f1c <put_memory>
 800e1a2:	e7dd      	b.n	800e160 <rmw_take_with_info+0x54>
 800e1a4:	200c      	movs	r0, #12
 800e1a6:	b009      	add	sp, #36	@ 0x24
 800e1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	08019db8 	.word	0x08019db8
 800e1b0:	20010e34 	.word	0x20010e34

0800e1b4 <rmw_uxrce_transport_init>:
 800e1b4:	b508      	push	{r3, lr}
 800e1b6:	b108      	cbz	r0, 800e1bc <rmw_uxrce_transport_init+0x8>
 800e1b8:	f100 0210 	add.w	r2, r0, #16
 800e1bc:	b139      	cbz	r1, 800e1ce <rmw_uxrce_transport_init+0x1a>
 800e1be:	6949      	ldr	r1, [r1, #20]
 800e1c0:	4610      	mov	r0, r2
 800e1c2:	f001 fec7 	bl	800ff54 <uxr_init_custom_transport>
 800e1c6:	f080 0001 	eor.w	r0, r0, #1
 800e1ca:	b2c0      	uxtb	r0, r0
 800e1cc:	bd08      	pop	{r3, pc}
 800e1ce:	4b04      	ldr	r3, [pc, #16]	@ (800e1e0 <rmw_uxrce_transport_init+0x2c>)
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	6859      	ldr	r1, [r3, #4]
 800e1d4:	f001 febe 	bl	800ff54 <uxr_init_custom_transport>
 800e1d8:	f080 0001 	eor.w	r0, r0, #1
 800e1dc:	b2c0      	uxtb	r0, r0
 800e1de:	bd08      	pop	{r3, pc}
 800e1e0:	2000c4cc 	.word	0x2000c4cc

0800e1e4 <rmw_uros_set_publisher_session_timeout>:
 800e1e4:	b118      	cbz	r0, 800e1ee <rmw_uros_set_publisher_session_timeout+0xa>
 800e1e6:	6843      	ldr	r3, [r0, #4]
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	67d9      	str	r1, [r3, #124]	@ 0x7c
 800e1ec:	4770      	bx	lr
 800e1ee:	200b      	movs	r0, #11
 800e1f0:	4770      	bx	lr
 800e1f2:	bf00      	nop

0800e1f4 <rmw_uros_set_context_entity_destroy_session_timeout>:
 800e1f4:	b160      	cbz	r0, 800e210 <rmw_uros_set_context_entity_destroy_session_timeout+0x1c>
 800e1f6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800e1f8:	2900      	cmp	r1, #0
 800e1fa:	bfd4      	ite	le
 800e1fc:	f503 725f 	addle.w	r2, r3, #892	@ 0x37c
 800e200:	f503 725e 	addgt.w	r2, r3, #888	@ 0x378
 800e204:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
 800e208:	f8c3 1390 	str.w	r1, [r3, #912]	@ 0x390
 800e20c:	2000      	movs	r0, #0
 800e20e:	4770      	bx	lr
 800e210:	200b      	movs	r0, #11
 800e212:	4770      	bx	lr

0800e214 <rmw_uxrce_init_service_memory>:
 800e214:	b1e2      	cbz	r2, 800e250 <rmw_uxrce_init_service_memory+0x3c>
 800e216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e21a:	7b05      	ldrb	r5, [r0, #12]
 800e21c:	4606      	mov	r6, r0
 800e21e:	b9ad      	cbnz	r5, 800e24c <rmw_uxrce_init_service_memory+0x38>
 800e220:	23c8      	movs	r3, #200	@ 0xc8
 800e222:	e9c0 5500 	strd	r5, r5, [r0]
 800e226:	6083      	str	r3, [r0, #8]
 800e228:	f240 1301 	movw	r3, #257	@ 0x101
 800e22c:	4617      	mov	r7, r2
 800e22e:	8183      	strh	r3, [r0, #12]
 800e230:	460c      	mov	r4, r1
 800e232:	46a8      	mov	r8, r5
 800e234:	4621      	mov	r1, r4
 800e236:	4630      	mov	r0, r6
 800e238:	3501      	adds	r5, #1
 800e23a:	f007 fe6f 	bl	8015f1c <put_memory>
 800e23e:	42af      	cmp	r7, r5
 800e240:	60a4      	str	r4, [r4, #8]
 800e242:	f884 800c 	strb.w	r8, [r4, #12]
 800e246:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e24a:	d1f3      	bne.n	800e234 <rmw_uxrce_init_service_memory+0x20>
 800e24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop

0800e254 <rmw_uxrce_init_client_memory>:
 800e254:	b1e2      	cbz	r2, 800e290 <rmw_uxrce_init_client_memory+0x3c>
 800e256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e25a:	7b05      	ldrb	r5, [r0, #12]
 800e25c:	4606      	mov	r6, r0
 800e25e:	b9ad      	cbnz	r5, 800e28c <rmw_uxrce_init_client_memory+0x38>
 800e260:	23c8      	movs	r3, #200	@ 0xc8
 800e262:	e9c0 5500 	strd	r5, r5, [r0]
 800e266:	6083      	str	r3, [r0, #8]
 800e268:	f240 1301 	movw	r3, #257	@ 0x101
 800e26c:	4617      	mov	r7, r2
 800e26e:	8183      	strh	r3, [r0, #12]
 800e270:	460c      	mov	r4, r1
 800e272:	46a8      	mov	r8, r5
 800e274:	4621      	mov	r1, r4
 800e276:	4630      	mov	r0, r6
 800e278:	3501      	adds	r5, #1
 800e27a:	f007 fe4f 	bl	8015f1c <put_memory>
 800e27e:	42af      	cmp	r7, r5
 800e280:	60a4      	str	r4, [r4, #8]
 800e282:	f884 800c 	strb.w	r8, [r4, #12]
 800e286:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e28a:	d1f3      	bne.n	800e274 <rmw_uxrce_init_client_memory+0x20>
 800e28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop

0800e294 <rmw_uxrce_init_publisher_memory>:
 800e294:	b1e2      	cbz	r2, 800e2d0 <rmw_uxrce_init_publisher_memory+0x3c>
 800e296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e29a:	7b05      	ldrb	r5, [r0, #12]
 800e29c:	4606      	mov	r6, r0
 800e29e:	b9ad      	cbnz	r5, 800e2cc <rmw_uxrce_init_publisher_memory+0x38>
 800e2a0:	23d8      	movs	r3, #216	@ 0xd8
 800e2a2:	e9c0 5500 	strd	r5, r5, [r0]
 800e2a6:	6083      	str	r3, [r0, #8]
 800e2a8:	f240 1301 	movw	r3, #257	@ 0x101
 800e2ac:	4617      	mov	r7, r2
 800e2ae:	8183      	strh	r3, [r0, #12]
 800e2b0:	460c      	mov	r4, r1
 800e2b2:	46a8      	mov	r8, r5
 800e2b4:	4621      	mov	r1, r4
 800e2b6:	4630      	mov	r0, r6
 800e2b8:	3501      	adds	r5, #1
 800e2ba:	f007 fe2f 	bl	8015f1c <put_memory>
 800e2be:	42af      	cmp	r7, r5
 800e2c0:	60a4      	str	r4, [r4, #8]
 800e2c2:	f884 800c 	strb.w	r8, [r4, #12]
 800e2c6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e2ca:	d1f3      	bne.n	800e2b4 <rmw_uxrce_init_publisher_memory+0x20>
 800e2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop

0800e2d4 <rmw_uxrce_init_subscription_memory>:
 800e2d4:	b1e2      	cbz	r2, 800e310 <rmw_uxrce_init_subscription_memory+0x3c>
 800e2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2da:	7b05      	ldrb	r5, [r0, #12]
 800e2dc:	4606      	mov	r6, r0
 800e2de:	b9ad      	cbnz	r5, 800e30c <rmw_uxrce_init_subscription_memory+0x38>
 800e2e0:	23d8      	movs	r3, #216	@ 0xd8
 800e2e2:	e9c0 5500 	strd	r5, r5, [r0]
 800e2e6:	6083      	str	r3, [r0, #8]
 800e2e8:	f240 1301 	movw	r3, #257	@ 0x101
 800e2ec:	4617      	mov	r7, r2
 800e2ee:	8183      	strh	r3, [r0, #12]
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	46a8      	mov	r8, r5
 800e2f4:	4621      	mov	r1, r4
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	3501      	adds	r5, #1
 800e2fa:	f007 fe0f 	bl	8015f1c <put_memory>
 800e2fe:	42af      	cmp	r7, r5
 800e300:	60a4      	str	r4, [r4, #8]
 800e302:	f884 800c 	strb.w	r8, [r4, #12]
 800e306:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e30a:	d1f3      	bne.n	800e2f4 <rmw_uxrce_init_subscription_memory+0x20>
 800e30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop

0800e314 <rmw_uxrce_init_node_memory>:
 800e314:	b1e2      	cbz	r2, 800e350 <rmw_uxrce_init_node_memory+0x3c>
 800e316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e31a:	7b05      	ldrb	r5, [r0, #12]
 800e31c:	4606      	mov	r6, r0
 800e31e:	b9ad      	cbnz	r5, 800e34c <rmw_uxrce_init_node_memory+0x38>
 800e320:	23a4      	movs	r3, #164	@ 0xa4
 800e322:	e9c0 5500 	strd	r5, r5, [r0]
 800e326:	6083      	str	r3, [r0, #8]
 800e328:	f240 1301 	movw	r3, #257	@ 0x101
 800e32c:	4617      	mov	r7, r2
 800e32e:	8183      	strh	r3, [r0, #12]
 800e330:	460c      	mov	r4, r1
 800e332:	46a8      	mov	r8, r5
 800e334:	4621      	mov	r1, r4
 800e336:	4630      	mov	r0, r6
 800e338:	3501      	adds	r5, #1
 800e33a:	f007 fdef 	bl	8015f1c <put_memory>
 800e33e:	42af      	cmp	r7, r5
 800e340:	60a4      	str	r4, [r4, #8]
 800e342:	f884 800c 	strb.w	r8, [r4, #12]
 800e346:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e34a:	d1f3      	bne.n	800e334 <rmw_uxrce_init_node_memory+0x20>
 800e34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop

0800e354 <rmw_uxrce_init_session_memory>:
 800e354:	b1ea      	cbz	r2, 800e392 <rmw_uxrce_init_session_memory+0x3e>
 800e356:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e35a:	7b05      	ldrb	r5, [r0, #12]
 800e35c:	4606      	mov	r6, r0
 800e35e:	b9b5      	cbnz	r5, 800e38e <rmw_uxrce_init_session_memory+0x3a>
 800e360:	e9c0 5500 	strd	r5, r5, [r0]
 800e364:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e368:	f240 1301 	movw	r3, #257	@ 0x101
 800e36c:	4617      	mov	r7, r2
 800e36e:	f8c0 8008 	str.w	r8, [r0, #8]
 800e372:	460c      	mov	r4, r1
 800e374:	8183      	strh	r3, [r0, #12]
 800e376:	46a9      	mov	r9, r5
 800e378:	4621      	mov	r1, r4
 800e37a:	4630      	mov	r0, r6
 800e37c:	3501      	adds	r5, #1
 800e37e:	f007 fdcd 	bl	8015f1c <put_memory>
 800e382:	42af      	cmp	r7, r5
 800e384:	60a4      	str	r4, [r4, #8]
 800e386:	f884 900c 	strb.w	r9, [r4, #12]
 800e38a:	4444      	add	r4, r8
 800e38c:	d1f4      	bne.n	800e378 <rmw_uxrce_init_session_memory+0x24>
 800e38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e392:	4770      	bx	lr

0800e394 <rmw_uxrce_init_topic_memory>:
 800e394:	b1e2      	cbz	r2, 800e3d0 <rmw_uxrce_init_topic_memory+0x3c>
 800e396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e39a:	7b05      	ldrb	r5, [r0, #12]
 800e39c:	4606      	mov	r6, r0
 800e39e:	b9ad      	cbnz	r5, 800e3cc <rmw_uxrce_init_topic_memory+0x38>
 800e3a0:	231c      	movs	r3, #28
 800e3a2:	e9c0 5500 	strd	r5, r5, [r0]
 800e3a6:	6083      	str	r3, [r0, #8]
 800e3a8:	f240 1301 	movw	r3, #257	@ 0x101
 800e3ac:	4617      	mov	r7, r2
 800e3ae:	8183      	strh	r3, [r0, #12]
 800e3b0:	460c      	mov	r4, r1
 800e3b2:	46a8      	mov	r8, r5
 800e3b4:	4621      	mov	r1, r4
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	3501      	adds	r5, #1
 800e3ba:	f007 fdaf 	bl	8015f1c <put_memory>
 800e3be:	42af      	cmp	r7, r5
 800e3c0:	60a4      	str	r4, [r4, #8]
 800e3c2:	f884 800c 	strb.w	r8, [r4, #12]
 800e3c6:	f104 041c 	add.w	r4, r4, #28
 800e3ca:	d1f3      	bne.n	800e3b4 <rmw_uxrce_init_topic_memory+0x20>
 800e3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop

0800e3d4 <rmw_uxrce_init_static_input_buffer_memory>:
 800e3d4:	b1ea      	cbz	r2, 800e412 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3da:	7b05      	ldrb	r5, [r0, #12]
 800e3dc:	4606      	mov	r6, r0
 800e3de:	b9b5      	cbnz	r5, 800e40e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e3e0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e3e4:	e9c0 5500 	strd	r5, r5, [r0]
 800e3e8:	6083      	str	r3, [r0, #8]
 800e3ea:	f240 1301 	movw	r3, #257	@ 0x101
 800e3ee:	4617      	mov	r7, r2
 800e3f0:	8183      	strh	r3, [r0, #12]
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	46a8      	mov	r8, r5
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	3501      	adds	r5, #1
 800e3fc:	f007 fd8e 	bl	8015f1c <put_memory>
 800e400:	42af      	cmp	r7, r5
 800e402:	60a4      	str	r4, [r4, #8]
 800e404:	f884 800c 	strb.w	r8, [r4, #12]
 800e408:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e40c:	d1f3      	bne.n	800e3f6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e412:	4770      	bx	lr

0800e414 <rmw_uxrce_init_init_options_impl_memory>:
 800e414:	b1e2      	cbz	r2, 800e450 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e41a:	7b05      	ldrb	r5, [r0, #12]
 800e41c:	4606      	mov	r6, r0
 800e41e:	b9ad      	cbnz	r5, 800e44c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e420:	232c      	movs	r3, #44	@ 0x2c
 800e422:	e9c0 5500 	strd	r5, r5, [r0]
 800e426:	6083      	str	r3, [r0, #8]
 800e428:	f240 1301 	movw	r3, #257	@ 0x101
 800e42c:	4617      	mov	r7, r2
 800e42e:	8183      	strh	r3, [r0, #12]
 800e430:	460c      	mov	r4, r1
 800e432:	46a8      	mov	r8, r5
 800e434:	4621      	mov	r1, r4
 800e436:	4630      	mov	r0, r6
 800e438:	3501      	adds	r5, #1
 800e43a:	f007 fd6f 	bl	8015f1c <put_memory>
 800e43e:	42af      	cmp	r7, r5
 800e440:	60a4      	str	r4, [r4, #8]
 800e442:	f884 800c 	strb.w	r8, [r4, #12]
 800e446:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e44a:	d1f3      	bne.n	800e434 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop

0800e454 <rmw_uxrce_init_wait_set_memory>:
 800e454:	b1e2      	cbz	r2, 800e490 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e45a:	7b05      	ldrb	r5, [r0, #12]
 800e45c:	4606      	mov	r6, r0
 800e45e:	b9ad      	cbnz	r5, 800e48c <rmw_uxrce_init_wait_set_memory+0x38>
 800e460:	231c      	movs	r3, #28
 800e462:	e9c0 5500 	strd	r5, r5, [r0]
 800e466:	6083      	str	r3, [r0, #8]
 800e468:	f240 1301 	movw	r3, #257	@ 0x101
 800e46c:	4617      	mov	r7, r2
 800e46e:	8183      	strh	r3, [r0, #12]
 800e470:	460c      	mov	r4, r1
 800e472:	46a8      	mov	r8, r5
 800e474:	4621      	mov	r1, r4
 800e476:	4630      	mov	r0, r6
 800e478:	3501      	adds	r5, #1
 800e47a:	f007 fd4f 	bl	8015f1c <put_memory>
 800e47e:	42af      	cmp	r7, r5
 800e480:	60a4      	str	r4, [r4, #8]
 800e482:	f884 800c 	strb.w	r8, [r4, #12]
 800e486:	f104 041c 	add.w	r4, r4, #28
 800e48a:	d1f3      	bne.n	800e474 <rmw_uxrce_init_wait_set_memory+0x20>
 800e48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e490:	4770      	bx	lr
 800e492:	bf00      	nop

0800e494 <rmw_uxrce_init_guard_condition_memory>:
 800e494:	b1e2      	cbz	r2, 800e4d0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e49a:	7b05      	ldrb	r5, [r0, #12]
 800e49c:	4606      	mov	r6, r0
 800e49e:	b9ad      	cbnz	r5, 800e4cc <rmw_uxrce_init_guard_condition_memory+0x38>
 800e4a0:	2320      	movs	r3, #32
 800e4a2:	e9c0 5500 	strd	r5, r5, [r0]
 800e4a6:	6083      	str	r3, [r0, #8]
 800e4a8:	f240 1301 	movw	r3, #257	@ 0x101
 800e4ac:	4617      	mov	r7, r2
 800e4ae:	8183      	strh	r3, [r0, #12]
 800e4b0:	460c      	mov	r4, r1
 800e4b2:	46a8      	mov	r8, r5
 800e4b4:	4621      	mov	r1, r4
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	3501      	adds	r5, #1
 800e4ba:	f007 fd2f 	bl	8015f1c <put_memory>
 800e4be:	42af      	cmp	r7, r5
 800e4c0:	60a4      	str	r4, [r4, #8]
 800e4c2:	f884 800c 	strb.w	r8, [r4, #12]
 800e4c6:	f104 0420 	add.w	r4, r4, #32
 800e4ca:	d1f3      	bne.n	800e4b4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800e4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop

0800e4d4 <rmw_uxrce_fini_session_memory>:
 800e4d4:	4601      	mov	r1, r0
 800e4d6:	4801      	ldr	r0, [pc, #4]	@ (800e4dc <rmw_uxrce_fini_session_memory+0x8>)
 800e4d8:	f007 bd20 	b.w	8015f1c <put_memory>
 800e4dc:	20010e24 	.word	0x20010e24

0800e4e0 <rmw_uxrce_fini_node_memory>:
 800e4e0:	b538      	push	{r3, r4, r5, lr}
 800e4e2:	4604      	mov	r4, r0
 800e4e4:	6800      	ldr	r0, [r0, #0]
 800e4e6:	b128      	cbz	r0, 800e4f4 <rmw_uxrce_fini_node_memory+0x14>
 800e4e8:	4b07      	ldr	r3, [pc, #28]	@ (800e508 <rmw_uxrce_fini_node_memory+0x28>)
 800e4ea:	6819      	ldr	r1, [r3, #0]
 800e4ec:	f7f1 fe90 	bl	8000210 <strcmp>
 800e4f0:	b940      	cbnz	r0, 800e504 <rmw_uxrce_fini_node_memory+0x24>
 800e4f2:	6020      	str	r0, [r4, #0]
 800e4f4:	6861      	ldr	r1, [r4, #4]
 800e4f6:	b129      	cbz	r1, 800e504 <rmw_uxrce_fini_node_memory+0x24>
 800e4f8:	2500      	movs	r5, #0
 800e4fa:	4804      	ldr	r0, [pc, #16]	@ (800e50c <rmw_uxrce_fini_node_memory+0x2c>)
 800e4fc:	610d      	str	r5, [r1, #16]
 800e4fe:	f007 fd0d 	bl	8015f1c <put_memory>
 800e502:	6065      	str	r5, [r4, #4]
 800e504:	bd38      	pop	{r3, r4, r5, pc}
 800e506:	bf00      	nop
 800e508:	08019db8 	.word	0x08019db8
 800e50c:	20010df4 	.word	0x20010df4

0800e510 <rmw_uxrce_fini_publisher_memory>:
 800e510:	b510      	push	{r4, lr}
 800e512:	4604      	mov	r4, r0
 800e514:	6800      	ldr	r0, [r0, #0]
 800e516:	b128      	cbz	r0, 800e524 <rmw_uxrce_fini_publisher_memory+0x14>
 800e518:	4b06      	ldr	r3, [pc, #24]	@ (800e534 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e51a:	6819      	ldr	r1, [r3, #0]
 800e51c:	f7f1 fe78 	bl	8000210 <strcmp>
 800e520:	b938      	cbnz	r0, 800e532 <rmw_uxrce_fini_publisher_memory+0x22>
 800e522:	6020      	str	r0, [r4, #0]
 800e524:	6861      	ldr	r1, [r4, #4]
 800e526:	b121      	cbz	r1, 800e532 <rmw_uxrce_fini_publisher_memory+0x22>
 800e528:	4803      	ldr	r0, [pc, #12]	@ (800e538 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e52a:	f007 fcf7 	bl	8015f1c <put_memory>
 800e52e:	2300      	movs	r3, #0
 800e530:	6063      	str	r3, [r4, #4]
 800e532:	bd10      	pop	{r4, pc}
 800e534:	08019db8 	.word	0x08019db8
 800e538:	20010e04 	.word	0x20010e04

0800e53c <rmw_uxrce_fini_subscription_memory>:
 800e53c:	b510      	push	{r4, lr}
 800e53e:	4604      	mov	r4, r0
 800e540:	6800      	ldr	r0, [r0, #0]
 800e542:	b128      	cbz	r0, 800e550 <rmw_uxrce_fini_subscription_memory+0x14>
 800e544:	4b06      	ldr	r3, [pc, #24]	@ (800e560 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e546:	6819      	ldr	r1, [r3, #0]
 800e548:	f7f1 fe62 	bl	8000210 <strcmp>
 800e54c:	b938      	cbnz	r0, 800e55e <rmw_uxrce_fini_subscription_memory+0x22>
 800e54e:	6020      	str	r0, [r4, #0]
 800e550:	6861      	ldr	r1, [r4, #4]
 800e552:	b121      	cbz	r1, 800e55e <rmw_uxrce_fini_subscription_memory+0x22>
 800e554:	4803      	ldr	r0, [pc, #12]	@ (800e564 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e556:	f007 fce1 	bl	8015f1c <put_memory>
 800e55a:	2300      	movs	r3, #0
 800e55c:	6063      	str	r3, [r4, #4]
 800e55e:	bd10      	pop	{r4, pc}
 800e560:	08019db8 	.word	0x08019db8
 800e564:	20010e44 	.word	0x20010e44

0800e568 <rmw_uxrce_fini_service_memory>:
 800e568:	b510      	push	{r4, lr}
 800e56a:	4604      	mov	r4, r0
 800e56c:	6800      	ldr	r0, [r0, #0]
 800e56e:	b128      	cbz	r0, 800e57c <rmw_uxrce_fini_service_memory+0x14>
 800e570:	4b06      	ldr	r3, [pc, #24]	@ (800e58c <rmw_uxrce_fini_service_memory+0x24>)
 800e572:	6819      	ldr	r1, [r3, #0]
 800e574:	f7f1 fe4c 	bl	8000210 <strcmp>
 800e578:	b938      	cbnz	r0, 800e58a <rmw_uxrce_fini_service_memory+0x22>
 800e57a:	6020      	str	r0, [r4, #0]
 800e57c:	6861      	ldr	r1, [r4, #4]
 800e57e:	b121      	cbz	r1, 800e58a <rmw_uxrce_fini_service_memory+0x22>
 800e580:	4803      	ldr	r0, [pc, #12]	@ (800e590 <rmw_uxrce_fini_service_memory+0x28>)
 800e582:	f007 fccb 	bl	8015f1c <put_memory>
 800e586:	2300      	movs	r3, #0
 800e588:	6063      	str	r3, [r4, #4]
 800e58a:	bd10      	pop	{r4, pc}
 800e58c:	08019db8 	.word	0x08019db8
 800e590:	20010e14 	.word	0x20010e14

0800e594 <rmw_uxrce_fini_client_memory>:
 800e594:	b510      	push	{r4, lr}
 800e596:	4604      	mov	r4, r0
 800e598:	6800      	ldr	r0, [r0, #0]
 800e59a:	b128      	cbz	r0, 800e5a8 <rmw_uxrce_fini_client_memory+0x14>
 800e59c:	4b06      	ldr	r3, [pc, #24]	@ (800e5b8 <rmw_uxrce_fini_client_memory+0x24>)
 800e59e:	6819      	ldr	r1, [r3, #0]
 800e5a0:	f7f1 fe36 	bl	8000210 <strcmp>
 800e5a4:	b938      	cbnz	r0, 800e5b6 <rmw_uxrce_fini_client_memory+0x22>
 800e5a6:	6020      	str	r0, [r4, #0]
 800e5a8:	6861      	ldr	r1, [r4, #4]
 800e5aa:	b121      	cbz	r1, 800e5b6 <rmw_uxrce_fini_client_memory+0x22>
 800e5ac:	4803      	ldr	r0, [pc, #12]	@ (800e5bc <rmw_uxrce_fini_client_memory+0x28>)
 800e5ae:	f007 fcb5 	bl	8015f1c <put_memory>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	6063      	str	r3, [r4, #4]
 800e5b6:	bd10      	pop	{r4, pc}
 800e5b8:	08019db8 	.word	0x08019db8
 800e5bc:	2000c524 	.word	0x2000c524

0800e5c0 <rmw_uxrce_fini_topic_memory>:
 800e5c0:	b510      	push	{r4, lr}
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	4621      	mov	r1, r4
 800e5c6:	4803      	ldr	r0, [pc, #12]	@ (800e5d4 <rmw_uxrce_fini_topic_memory+0x14>)
 800e5c8:	f007 fca8 	bl	8015f1c <put_memory>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	61a3      	str	r3, [r4, #24]
 800e5d0:	bd10      	pop	{r4, pc}
 800e5d2:	bf00      	nop
 800e5d4:	20010e54 	.word	0x20010e54

0800e5d8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e5d8:	b082      	sub	sp, #8
 800e5da:	b530      	push	{r4, r5, lr}
 800e5dc:	4925      	ldr	r1, [pc, #148]	@ (800e674 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e5de:	680d      	ldr	r5, [r1, #0]
 800e5e0:	ac03      	add	r4, sp, #12
 800e5e2:	e884 000c 	stmia.w	r4, {r2, r3}
 800e5e6:	461c      	mov	r4, r3
 800e5e8:	2d00      	cmp	r5, #0
 800e5ea:	d041      	beq.n	800e670 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800e5ec:	462b      	mov	r3, r5
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	689a      	ldr	r2, [r3, #8]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800e5f8:	4290      	cmp	r0, r2
 800e5fa:	bf08      	it	eq
 800e5fc:	3101      	addeq	r1, #1
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d1f6      	bne.n	800e5f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e602:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e606:	2b02      	cmp	r3, #2
 800e608:	d029      	beq.n	800e65e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e60a:	d907      	bls.n	800e61c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e60c:	2b03      	cmp	r3, #3
 800e60e:	d005      	beq.n	800e61c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e610:	2100      	movs	r1, #0
 800e612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e616:	4608      	mov	r0, r1
 800e618:	b002      	add	sp, #8
 800e61a:	4770      	bx	lr
 800e61c:	b314      	cbz	r4, 800e664 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e61e:	428c      	cmp	r4, r1
 800e620:	d820      	bhi.n	800e664 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e622:	2d00      	cmp	r5, #0
 800e624:	d0f4      	beq.n	800e610 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e626:	2100      	movs	r1, #0
 800e628:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e62c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e630:	e002      	b.n	800e638 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e632:	686d      	ldr	r5, [r5, #4]
 800e634:	2d00      	cmp	r5, #0
 800e636:	d0ec      	beq.n	800e612 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e638:	68ab      	ldr	r3, [r5, #8]
 800e63a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e63e:	4290      	cmp	r0, r2
 800e640:	d1f7      	bne.n	800e632 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e642:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e646:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e64a:	4562      	cmp	r2, ip
 800e64c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e650:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e654:	daed      	bge.n	800e632 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e656:	4694      	mov	ip, r2
 800e658:	461c      	mov	r4, r3
 800e65a:	4629      	mov	r1, r5
 800e65c:	e7e9      	b.n	800e632 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e65e:	b10c      	cbz	r4, 800e664 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e660:	428c      	cmp	r4, r1
 800e662:	d9d5      	bls.n	800e610 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e668:	4802      	ldr	r0, [pc, #8]	@ (800e674 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e66a:	b002      	add	sp, #8
 800e66c:	f007 bc46 	b.w	8015efc <get_memory>
 800e670:	4629      	mov	r1, r5
 800e672:	e7c6      	b.n	800e602 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e674:	20010e34 	.word	0x20010e34

0800e678 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e678:	4b11      	ldr	r3, [pc, #68]	@ (800e6c0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	b530      	push	{r4, r5, lr}
 800e67e:	b1e3      	cbz	r3, 800e6ba <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e680:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e684:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e688:	2400      	movs	r4, #0
 800e68a:	e001      	b.n	800e690 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	b193      	cbz	r3, 800e6b6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e690:	689a      	ldr	r2, [r3, #8]
 800e692:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e696:	4288      	cmp	r0, r1
 800e698:	d1f8      	bne.n	800e68c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e69a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e69e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e6a2:	4571      	cmp	r1, lr
 800e6a4:	eb72 050c 	sbcs.w	r5, r2, ip
 800e6a8:	daf0      	bge.n	800e68c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e6aa:	461c      	mov	r4, r3
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	468e      	mov	lr, r1
 800e6b0:	4694      	mov	ip, r2
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d1ec      	bne.n	800e690 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	bd30      	pop	{r4, r5, pc}
 800e6ba:	461c      	mov	r4, r3
 800e6bc:	4620      	mov	r0, r4
 800e6be:	bd30      	pop	{r4, r5, pc}
 800e6c0:	20010e34 	.word	0x20010e34
 800e6c4:	00000000 	.word	0x00000000

0800e6c8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6cc:	4b3c      	ldr	r3, [pc, #240]	@ (800e7c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e6ce:	ed2d 8b06 	vpush	{d8-d10}
 800e6d2:	681f      	ldr	r7, [r3, #0]
 800e6d4:	b08d      	sub	sp, #52	@ 0x34
 800e6d6:	f008 f811 	bl	80166fc <rmw_uros_epoch_nanos>
 800e6da:	2f00      	cmp	r7, #0
 800e6dc:	d05d      	beq.n	800e79a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e6de:	46b8      	mov	r8, r7
 800e6e0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e7a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e6e4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e6e8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e6ec:	2b04      	cmp	r3, #4
 800e6ee:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e7b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e6f2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e7b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e6f6:	4681      	mov	r9, r0
 800e6f8:	468a      	mov	sl, r1
 800e6fa:	ac04      	add	r4, sp, #16
 800e6fc:	d03f      	beq.n	800e77e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e6fe:	2b05      	cmp	r3, #5
 800e700:	d044      	beq.n	800e78c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e702:	2b03      	cmp	r3, #3
 800e704:	d03b      	beq.n	800e77e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e706:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e70a:	ed8d ab06 	vstr	d10, [sp, #24]
 800e70e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e712:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e716:	ab08      	add	r3, sp, #32
 800e718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e71a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e71e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e722:	f007 fa09 	bl	8015b38 <rmw_time_equal>
 800e726:	b118      	cbz	r0, 800e730 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e728:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e72c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e730:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e734:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e738:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e73c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e740:	f007 fa4e 	bl	8015be0 <rmw_time_total_nsec>
 800e744:	1830      	adds	r0, r6, r0
 800e746:	eb47 0101 	adc.w	r1, r7, r1
 800e74a:	4548      	cmp	r0, r9
 800e74c:	eb71 030a 	sbcs.w	r3, r1, sl
 800e750:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e754:	db05      	blt.n	800e762 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e756:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e75a:	4591      	cmp	r9, r2
 800e75c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e760:	da03      	bge.n	800e76a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e762:	4817      	ldr	r0, [pc, #92]	@ (800e7c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e764:	4641      	mov	r1, r8
 800e766:	f007 fbd9 	bl	8015f1c <put_memory>
 800e76a:	f1bb 0f00 	cmp.w	fp, #0
 800e76e:	d014      	beq.n	800e79a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e770:	46d8      	mov	r8, fp
 800e772:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e776:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e77a:	2b04      	cmp	r3, #4
 800e77c:	d1bf      	bne.n	800e6fe <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e77e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e782:	3340      	adds	r3, #64	@ 0x40
 800e784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e78a:	e7c0      	b.n	800e70e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e78c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e790:	3348      	adds	r3, #72	@ 0x48
 800e792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e798:	e7b9      	b.n	800e70e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e79a:	b00d      	add	sp, #52	@ 0x34
 800e79c:	ecbd 8b06 	vpop	{d8-d10}
 800e7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a4:	f3af 8000 	nop.w
	...
 800e7b0:	00000001 	.word	0x00000001
 800e7b4:	00000000 	.word	0x00000000
 800e7b8:	0000001e 	.word	0x0000001e
 800e7bc:	00000000 	.word	0x00000000
 800e7c0:	20010e34 	.word	0x20010e34

0800e7c4 <run_xrce_session>:
 800e7c4:	b510      	push	{r4, lr}
 800e7c6:	788c      	ldrb	r4, [r1, #2]
 800e7c8:	b086      	sub	sp, #24
 800e7ca:	2c01      	cmp	r4, #1
 800e7cc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e7d0:	d00c      	beq.n	800e7ec <run_xrce_session+0x28>
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	9300      	str	r3, [sp, #0]
 800e7d8:	f10d 020e 	add.w	r2, sp, #14
 800e7dc:	f10d 0317 	add.w	r3, sp, #23
 800e7e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7e4:	f002 fb56 	bl	8010e94 <uxr_run_session_until_all_status>
 800e7e8:	b006      	add	sp, #24
 800e7ea:	bd10      	pop	{r4, pc}
 800e7ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7f0:	f001 ff6a 	bl	80106c8 <uxr_flash_output_streams>
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	b006      	add	sp, #24
 800e7f8:	bd10      	pop	{r4, pc}
 800e7fa:	bf00      	nop

0800e7fc <convert_qos_profile>:
 800e7fc:	7a4a      	ldrb	r2, [r1, #9]
 800e7fe:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e802:	2a02      	cmp	r2, #2
 800e804:	bf18      	it	ne
 800e806:	2200      	movne	r2, #0
 800e808:	7002      	strb	r2, [r0, #0]
 800e80a:	780a      	ldrb	r2, [r1, #0]
 800e80c:	8889      	ldrh	r1, [r1, #4]
 800e80e:	8081      	strh	r1, [r0, #4]
 800e810:	f1ac 0c02 	sub.w	ip, ip, #2
 800e814:	f1a2 0202 	sub.w	r2, r2, #2
 800e818:	fabc fc8c 	clz	ip, ip
 800e81c:	fab2 f282 	clz	r2, r2
 800e820:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e824:	0952      	lsrs	r2, r2, #5
 800e826:	f880 c001 	strb.w	ip, [r0, #1]
 800e82a:	7082      	strb	r2, [r0, #2]
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop

0800e830 <generate_type_name>:
 800e830:	b530      	push	{r4, r5, lr}
 800e832:	2300      	movs	r3, #0
 800e834:	700b      	strb	r3, [r1, #0]
 800e836:	6803      	ldr	r3, [r0, #0]
 800e838:	b087      	sub	sp, #28
 800e83a:	4614      	mov	r4, r2
 800e83c:	b1d3      	cbz	r3, 800e874 <generate_type_name+0x44>
 800e83e:	4a0f      	ldr	r2, [pc, #60]	@ (800e87c <generate_type_name+0x4c>)
 800e840:	4615      	mov	r5, r2
 800e842:	9203      	str	r2, [sp, #12]
 800e844:	9500      	str	r5, [sp, #0]
 800e846:	6842      	ldr	r2, [r0, #4]
 800e848:	480d      	ldr	r0, [pc, #52]	@ (800e880 <generate_type_name+0x50>)
 800e84a:	9001      	str	r0, [sp, #4]
 800e84c:	4608      	mov	r0, r1
 800e84e:	490d      	ldr	r1, [pc, #52]	@ (800e884 <generate_type_name+0x54>)
 800e850:	9204      	str	r2, [sp, #16]
 800e852:	9105      	str	r1, [sp, #20]
 800e854:	9102      	str	r1, [sp, #8]
 800e856:	4a0c      	ldr	r2, [pc, #48]	@ (800e888 <generate_type_name+0x58>)
 800e858:	4621      	mov	r1, r4
 800e85a:	f009 fc0f 	bl	801807c <sniprintf>
 800e85e:	2800      	cmp	r0, #0
 800e860:	db05      	blt.n	800e86e <generate_type_name+0x3e>
 800e862:	4284      	cmp	r4, r0
 800e864:	bfd4      	ite	le
 800e866:	2000      	movle	r0, #0
 800e868:	2001      	movgt	r0, #1
 800e86a:	b007      	add	sp, #28
 800e86c:	bd30      	pop	{r4, r5, pc}
 800e86e:	2000      	movs	r0, #0
 800e870:	b007      	add	sp, #28
 800e872:	bd30      	pop	{r4, r5, pc}
 800e874:	4b05      	ldr	r3, [pc, #20]	@ (800e88c <generate_type_name+0x5c>)
 800e876:	4a01      	ldr	r2, [pc, #4]	@ (800e87c <generate_type_name+0x4c>)
 800e878:	461d      	mov	r5, r3
 800e87a:	e7e2      	b.n	800e842 <generate_type_name+0x12>
 800e87c:	080196b4 	.word	0x080196b4
 800e880:	080196cc 	.word	0x080196cc
 800e884:	080196c8 	.word	0x080196c8
 800e888:	080196b8 	.word	0x080196b8
 800e88c:	080194b4 	.word	0x080194b4

0800e890 <generate_topic_name>:
 800e890:	b510      	push	{r4, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	4614      	mov	r4, r2
 800e896:	9000      	str	r0, [sp, #0]
 800e898:	4b08      	ldr	r3, [pc, #32]	@ (800e8bc <generate_topic_name+0x2c>)
 800e89a:	4a09      	ldr	r2, [pc, #36]	@ (800e8c0 <generate_topic_name+0x30>)
 800e89c:	4608      	mov	r0, r1
 800e89e:	4621      	mov	r1, r4
 800e8a0:	f009 fbec 	bl	801807c <sniprintf>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	db05      	blt.n	800e8b4 <generate_topic_name+0x24>
 800e8a8:	4284      	cmp	r4, r0
 800e8aa:	bfd4      	ite	le
 800e8ac:	2000      	movle	r0, #0
 800e8ae:	2001      	movgt	r0, #1
 800e8b0:	b002      	add	sp, #8
 800e8b2:	bd10      	pop	{r4, pc}
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	b002      	add	sp, #8
 800e8b8:	bd10      	pop	{r4, pc}
 800e8ba:	bf00      	nop
 800e8bc:	08019a88 	.word	0x08019a88
 800e8c0:	08019360 	.word	0x08019360

0800e8c4 <is_uxrce_rmw_identifier_valid>:
 800e8c4:	b510      	push	{r4, lr}
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	b140      	cbz	r0, 800e8dc <is_uxrce_rmw_identifier_valid+0x18>
 800e8ca:	f007 fb7f 	bl	8015fcc <rmw_get_implementation_identifier>
 800e8ce:	4601      	mov	r1, r0
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f7f1 fc9d 	bl	8000210 <strcmp>
 800e8d6:	fab0 f080 	clz	r0, r0
 800e8da:	0940      	lsrs	r0, r0, #5
 800e8dc:	bd10      	pop	{r4, pc}
 800e8de:	bf00      	nop

0800e8e0 <get_message_typesupport_handle>:
 800e8e0:	6883      	ldr	r3, [r0, #8]
 800e8e2:	4718      	bx	r3

0800e8e4 <get_message_typesupport_handle_function>:
 800e8e4:	b510      	push	{r4, lr}
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	6800      	ldr	r0, [r0, #0]
 800e8ea:	f7f1 fc91 	bl	8000210 <strcmp>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	bf0c      	ite	eq
 800e8f2:	4620      	moveq	r0, r4
 800e8f4:	2000      	movne	r0, #0
 800e8f6:	bd10      	pop	{r4, pc}

0800e8f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800e8f8:	4b04      	ldr	r3, [pc, #16]	@ (800e90c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	b10a      	cbz	r2, 800e902 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800e8fe:	4803      	ldr	r0, [pc, #12]	@ (800e90c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800e900:	4770      	bx	lr
 800e902:	4a03      	ldr	r2, [pc, #12]	@ (800e910 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800e904:	4801      	ldr	r0, [pc, #4]	@ (800e90c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800e906:	6812      	ldr	r2, [r2, #0]
 800e908:	601a      	str	r2, [r3, #0]
 800e90a:	4770      	bx	lr
 800e90c:	20000048 	.word	0x20000048
 800e910:	200000c4 	.word	0x200000c4

0800e914 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800e914:	4a02      	ldr	r2, [pc, #8]	@ (800e920 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800e916:	4b03      	ldr	r3, [pc, #12]	@ (800e924 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800e918:	6812      	ldr	r2, [r2, #0]
 800e91a:	601a      	str	r2, [r3, #0]
 800e91c:	4770      	bx	lr
 800e91e:	bf00      	nop
 800e920:	200000c4 	.word	0x200000c4
 800e924:	20000048 	.word	0x20000048

0800e928 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800e928:	f007 bf24 	b.w	8016774 <std_msgs__msg__Int32__init>

0800e92c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800e92c:	f007 bf26 	b.w	801677c <std_msgs__msg__Int32__fini>

0800e930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800e930:	4b04      	ldr	r3, [pc, #16]	@ (800e944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	b10a      	cbz	r2, 800e93a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800e936:	4803      	ldr	r0, [pc, #12]	@ (800e944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800e938:	4770      	bx	lr
 800e93a:	4a03      	ldr	r2, [pc, #12]	@ (800e948 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800e93c:	4801      	ldr	r0, [pc, #4]	@ (800e944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800e93e:	6812      	ldr	r2, [r2, #0]
 800e940:	601a      	str	r2, [r3, #0]
 800e942:	4770      	bx	lr
 800e944:	20000090 	.word	0x20000090
 800e948:	200000c8 	.word	0x200000c8

0800e94c <_Int32__max_serialized_size>:
 800e94c:	b508      	push	{r3, lr}
 800e94e:	2104      	movs	r1, #4
 800e950:	2000      	movs	r0, #0
 800e952:	f001 f807 	bl	800f964 <ucdr_alignment>
 800e956:	3004      	adds	r0, #4
 800e958:	bd08      	pop	{r3, pc}
 800e95a:	bf00      	nop

0800e95c <_Int32__cdr_deserialize>:
 800e95c:	b109      	cbz	r1, 800e962 <_Int32__cdr_deserialize+0x6>
 800e95e:	f000 bf19 	b.w	800f794 <ucdr_deserialize_int32_t>
 800e962:	4608      	mov	r0, r1
 800e964:	4770      	bx	lr
 800e966:	bf00      	nop

0800e968 <get_serialized_size_std_msgs__msg__Int32>:
 800e968:	b138      	cbz	r0, 800e97a <get_serialized_size_std_msgs__msg__Int32+0x12>
 800e96a:	b508      	push	{r3, lr}
 800e96c:	460b      	mov	r3, r1
 800e96e:	4618      	mov	r0, r3
 800e970:	2104      	movs	r1, #4
 800e972:	f000 fff7 	bl	800f964 <ucdr_alignment>
 800e976:	3004      	adds	r0, #4
 800e978:	bd08      	pop	{r3, pc}
 800e97a:	4770      	bx	lr

0800e97c <_Int32__cdr_serialize>:
 800e97c:	460a      	mov	r2, r1
 800e97e:	b118      	cbz	r0, 800e988 <_Int32__cdr_serialize+0xc>
 800e980:	6801      	ldr	r1, [r0, #0]
 800e982:	4610      	mov	r0, r2
 800e984:	f000 be6e 	b.w	800f664 <ucdr_serialize_int32_t>
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop

0800e98c <_Int32__get_serialized_size>:
 800e98c:	b130      	cbz	r0, 800e99c <_Int32__get_serialized_size+0x10>
 800e98e:	b508      	push	{r3, lr}
 800e990:	2104      	movs	r1, #4
 800e992:	2000      	movs	r0, #0
 800e994:	f000 ffe6 	bl	800f964 <ucdr_alignment>
 800e998:	3004      	adds	r0, #4
 800e99a:	bd08      	pop	{r3, pc}
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop

0800e9a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800e9a0:	4800      	ldr	r0, [pc, #0]	@ (800e9a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800e9a2:	4770      	bx	lr
 800e9a4:	2000009c 	.word	0x2000009c

0800e9a8 <ucdr_serialize_bool>:
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	460d      	mov	r5, r1
 800e9ac:	2101      	movs	r1, #1
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	f000 ff8c 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800e9b4:	b148      	cbz	r0, 800e9ca <ucdr_serialize_bool+0x22>
 800e9b6:	68a3      	ldr	r3, [r4, #8]
 800e9b8:	701d      	strb	r5, [r3, #0]
 800e9ba:	68a2      	ldr	r2, [r4, #8]
 800e9bc:	6923      	ldr	r3, [r4, #16]
 800e9be:	2101      	movs	r1, #1
 800e9c0:	440a      	add	r2, r1
 800e9c2:	440b      	add	r3, r1
 800e9c4:	60a2      	str	r2, [r4, #8]
 800e9c6:	6123      	str	r3, [r4, #16]
 800e9c8:	7561      	strb	r1, [r4, #21]
 800e9ca:	7da0      	ldrb	r0, [r4, #22]
 800e9cc:	f080 0001 	eor.w	r0, r0, #1
 800e9d0:	bd38      	pop	{r3, r4, r5, pc}
 800e9d2:	bf00      	nop

0800e9d4 <ucdr_deserialize_bool>:
 800e9d4:	b538      	push	{r3, r4, r5, lr}
 800e9d6:	460d      	mov	r5, r1
 800e9d8:	2101      	movs	r1, #1
 800e9da:	4604      	mov	r4, r0
 800e9dc:	f000 ff76 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800e9e0:	b160      	cbz	r0, 800e9fc <ucdr_deserialize_bool+0x28>
 800e9e2:	68a2      	ldr	r2, [r4, #8]
 800e9e4:	6923      	ldr	r3, [r4, #16]
 800e9e6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e9ea:	3900      	subs	r1, #0
 800e9ec:	bf18      	it	ne
 800e9ee:	2101      	movne	r1, #1
 800e9f0:	7029      	strb	r1, [r5, #0]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	2101      	movs	r1, #1
 800e9f6:	60a2      	str	r2, [r4, #8]
 800e9f8:	6123      	str	r3, [r4, #16]
 800e9fa:	7561      	strb	r1, [r4, #21]
 800e9fc:	7da0      	ldrb	r0, [r4, #22]
 800e9fe:	f080 0001 	eor.w	r0, r0, #1
 800ea02:	bd38      	pop	{r3, r4, r5, pc}

0800ea04 <ucdr_serialize_uint8_t>:
 800ea04:	b538      	push	{r3, r4, r5, lr}
 800ea06:	460d      	mov	r5, r1
 800ea08:	2101      	movs	r1, #1
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	f000 ff5e 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800ea10:	b148      	cbz	r0, 800ea26 <ucdr_serialize_uint8_t+0x22>
 800ea12:	68a3      	ldr	r3, [r4, #8]
 800ea14:	701d      	strb	r5, [r3, #0]
 800ea16:	68a2      	ldr	r2, [r4, #8]
 800ea18:	6923      	ldr	r3, [r4, #16]
 800ea1a:	2101      	movs	r1, #1
 800ea1c:	440a      	add	r2, r1
 800ea1e:	440b      	add	r3, r1
 800ea20:	60a2      	str	r2, [r4, #8]
 800ea22:	6123      	str	r3, [r4, #16]
 800ea24:	7561      	strb	r1, [r4, #21]
 800ea26:	7da0      	ldrb	r0, [r4, #22]
 800ea28:	f080 0001 	eor.w	r0, r0, #1
 800ea2c:	bd38      	pop	{r3, r4, r5, pc}
 800ea2e:	bf00      	nop

0800ea30 <ucdr_deserialize_uint8_t>:
 800ea30:	b538      	push	{r3, r4, r5, lr}
 800ea32:	460d      	mov	r5, r1
 800ea34:	2101      	movs	r1, #1
 800ea36:	4604      	mov	r4, r0
 800ea38:	f000 ff48 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800ea3c:	b150      	cbz	r0, 800ea54 <ucdr_deserialize_uint8_t+0x24>
 800ea3e:	68a3      	ldr	r3, [r4, #8]
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	702b      	strb	r3, [r5, #0]
 800ea44:	68a2      	ldr	r2, [r4, #8]
 800ea46:	6923      	ldr	r3, [r4, #16]
 800ea48:	2101      	movs	r1, #1
 800ea4a:	440a      	add	r2, r1
 800ea4c:	440b      	add	r3, r1
 800ea4e:	60a2      	str	r2, [r4, #8]
 800ea50:	6123      	str	r3, [r4, #16]
 800ea52:	7561      	strb	r1, [r4, #21]
 800ea54:	7da0      	ldrb	r0, [r4, #22]
 800ea56:	f080 0001 	eor.w	r0, r0, #1
 800ea5a:	bd38      	pop	{r3, r4, r5, pc}

0800ea5c <ucdr_serialize_uint16_t>:
 800ea5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea60:	b082      	sub	sp, #8
 800ea62:	460b      	mov	r3, r1
 800ea64:	2102      	movs	r1, #2
 800ea66:	4604      	mov	r4, r0
 800ea68:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ea6c:	f000 ff82 	bl	800f974 <ucdr_buffer_alignment>
 800ea70:	4601      	mov	r1, r0
 800ea72:	4620      	mov	r0, r4
 800ea74:	7d67      	ldrb	r7, [r4, #21]
 800ea76:	f000 ffc1 	bl	800f9fc <ucdr_advance_buffer>
 800ea7a:	2102      	movs	r1, #2
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	f000 ff19 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800ea82:	bb78      	cbnz	r0, 800eae4 <ucdr_serialize_uint16_t+0x88>
 800ea84:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ea88:	42ab      	cmp	r3, r5
 800ea8a:	d926      	bls.n	800eada <ucdr_serialize_uint16_t+0x7e>
 800ea8c:	1b5e      	subs	r6, r3, r5
 800ea8e:	60a3      	str	r3, [r4, #8]
 800ea90:	6923      	ldr	r3, [r4, #16]
 800ea92:	f1c6 0802 	rsb	r8, r6, #2
 800ea96:	4433      	add	r3, r6
 800ea98:	6123      	str	r3, [r4, #16]
 800ea9a:	4641      	mov	r1, r8
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	f000 ff15 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800eaa2:	2800      	cmp	r0, #0
 800eaa4:	d03b      	beq.n	800eb1e <ucdr_serialize_uint16_t+0xc2>
 800eaa6:	7d23      	ldrb	r3, [r4, #20]
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	d04a      	beq.n	800eb42 <ucdr_serialize_uint16_t+0xe6>
 800eaac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eab0:	702b      	strb	r3, [r5, #0]
 800eab2:	2e00      	cmp	r6, #0
 800eab4:	d040      	beq.n	800eb38 <ucdr_serialize_uint16_t+0xdc>
 800eab6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eaba:	706b      	strb	r3, [r5, #1]
 800eabc:	6923      	ldr	r3, [r4, #16]
 800eabe:	68a2      	ldr	r2, [r4, #8]
 800eac0:	7da0      	ldrb	r0, [r4, #22]
 800eac2:	3302      	adds	r3, #2
 800eac4:	1b9e      	subs	r6, r3, r6
 800eac6:	4442      	add	r2, r8
 800eac8:	2302      	movs	r3, #2
 800eaca:	f080 0001 	eor.w	r0, r0, #1
 800eace:	60a2      	str	r2, [r4, #8]
 800ead0:	6126      	str	r6, [r4, #16]
 800ead2:	7563      	strb	r3, [r4, #21]
 800ead4:	b002      	add	sp, #8
 800ead6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eada:	2102      	movs	r1, #2
 800eadc:	4620      	mov	r0, r4
 800eade:	f000 fef5 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800eae2:	b190      	cbz	r0, 800eb0a <ucdr_serialize_uint16_t+0xae>
 800eae4:	7d23      	ldrb	r3, [r4, #20]
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	68a3      	ldr	r3, [r4, #8]
 800eaea:	d014      	beq.n	800eb16 <ucdr_serialize_uint16_t+0xba>
 800eaec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800eaf0:	701a      	strb	r2, [r3, #0]
 800eaf2:	68a3      	ldr	r3, [r4, #8]
 800eaf4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eaf8:	705a      	strb	r2, [r3, #1]
 800eafa:	68a2      	ldr	r2, [r4, #8]
 800eafc:	6923      	ldr	r3, [r4, #16]
 800eafe:	3202      	adds	r2, #2
 800eb00:	3302      	adds	r3, #2
 800eb02:	2102      	movs	r1, #2
 800eb04:	60a2      	str	r2, [r4, #8]
 800eb06:	6123      	str	r3, [r4, #16]
 800eb08:	7561      	strb	r1, [r4, #21]
 800eb0a:	7da0      	ldrb	r0, [r4, #22]
 800eb0c:	f080 0001 	eor.w	r0, r0, #1
 800eb10:	b002      	add	sp, #8
 800eb12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb16:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eb1a:	801a      	strh	r2, [r3, #0]
 800eb1c:	e7ed      	b.n	800eafa <ucdr_serialize_uint16_t+0x9e>
 800eb1e:	68a2      	ldr	r2, [r4, #8]
 800eb20:	6923      	ldr	r3, [r4, #16]
 800eb22:	7da0      	ldrb	r0, [r4, #22]
 800eb24:	7567      	strb	r7, [r4, #21]
 800eb26:	1b92      	subs	r2, r2, r6
 800eb28:	1b9b      	subs	r3, r3, r6
 800eb2a:	f080 0001 	eor.w	r0, r0, #1
 800eb2e:	60a2      	str	r2, [r4, #8]
 800eb30:	6123      	str	r3, [r4, #16]
 800eb32:	b002      	add	sp, #8
 800eb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb38:	68a3      	ldr	r3, [r4, #8]
 800eb3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb3e:	701a      	strb	r2, [r3, #0]
 800eb40:	e7bc      	b.n	800eabc <ucdr_serialize_uint16_t+0x60>
 800eb42:	4628      	mov	r0, r5
 800eb44:	f10d 0506 	add.w	r5, sp, #6
 800eb48:	4629      	mov	r1, r5
 800eb4a:	4632      	mov	r2, r6
 800eb4c:	f009 fc9d 	bl	801848a <memcpy>
 800eb50:	68a0      	ldr	r0, [r4, #8]
 800eb52:	4642      	mov	r2, r8
 800eb54:	19a9      	adds	r1, r5, r6
 800eb56:	f009 fc98 	bl	801848a <memcpy>
 800eb5a:	e7af      	b.n	800eabc <ucdr_serialize_uint16_t+0x60>

0800eb5c <ucdr_serialize_endian_uint16_t>:
 800eb5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb60:	b083      	sub	sp, #12
 800eb62:	460d      	mov	r5, r1
 800eb64:	2102      	movs	r1, #2
 800eb66:	4604      	mov	r4, r0
 800eb68:	f8ad 2006 	strh.w	r2, [sp, #6]
 800eb6c:	f000 ff02 	bl	800f974 <ucdr_buffer_alignment>
 800eb70:	4601      	mov	r1, r0
 800eb72:	4620      	mov	r0, r4
 800eb74:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eb78:	f000 ff40 	bl	800f9fc <ucdr_advance_buffer>
 800eb7c:	2102      	movs	r1, #2
 800eb7e:	4620      	mov	r0, r4
 800eb80:	f000 fe98 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800eb84:	bb70      	cbnz	r0, 800ebe4 <ucdr_serialize_endian_uint16_t+0x88>
 800eb86:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800eb8a:	42be      	cmp	r6, r7
 800eb8c:	d925      	bls.n	800ebda <ucdr_serialize_endian_uint16_t+0x7e>
 800eb8e:	6923      	ldr	r3, [r4, #16]
 800eb90:	60a6      	str	r6, [r4, #8]
 800eb92:	1bf6      	subs	r6, r6, r7
 800eb94:	4433      	add	r3, r6
 800eb96:	f1c6 0902 	rsb	r9, r6, #2
 800eb9a:	6123      	str	r3, [r4, #16]
 800eb9c:	4649      	mov	r1, r9
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f000 fe94 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	d039      	beq.n	800ec1c <ucdr_serialize_endian_uint16_t+0xc0>
 800eba8:	2d01      	cmp	r5, #1
 800ebaa:	d04a      	beq.n	800ec42 <ucdr_serialize_endian_uint16_t+0xe6>
 800ebac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ebb0:	703b      	strb	r3, [r7, #0]
 800ebb2:	2e00      	cmp	r6, #0
 800ebb4:	d040      	beq.n	800ec38 <ucdr_serialize_endian_uint16_t+0xdc>
 800ebb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ebba:	707b      	strb	r3, [r7, #1]
 800ebbc:	6923      	ldr	r3, [r4, #16]
 800ebbe:	68a2      	ldr	r2, [r4, #8]
 800ebc0:	7da0      	ldrb	r0, [r4, #22]
 800ebc2:	3302      	adds	r3, #2
 800ebc4:	444a      	add	r2, r9
 800ebc6:	1b9b      	subs	r3, r3, r6
 800ebc8:	2102      	movs	r1, #2
 800ebca:	f080 0001 	eor.w	r0, r0, #1
 800ebce:	60a2      	str	r2, [r4, #8]
 800ebd0:	6123      	str	r3, [r4, #16]
 800ebd2:	7561      	strb	r1, [r4, #21]
 800ebd4:	b003      	add	sp, #12
 800ebd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebda:	2102      	movs	r1, #2
 800ebdc:	4620      	mov	r0, r4
 800ebde:	f000 fe75 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800ebe2:	b188      	cbz	r0, 800ec08 <ucdr_serialize_endian_uint16_t+0xac>
 800ebe4:	2d01      	cmp	r5, #1
 800ebe6:	68a3      	ldr	r3, [r4, #8]
 800ebe8:	d014      	beq.n	800ec14 <ucdr_serialize_endian_uint16_t+0xb8>
 800ebea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ebee:	701a      	strb	r2, [r3, #0]
 800ebf0:	68a3      	ldr	r3, [r4, #8]
 800ebf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebf6:	705a      	strb	r2, [r3, #1]
 800ebf8:	68a2      	ldr	r2, [r4, #8]
 800ebfa:	6923      	ldr	r3, [r4, #16]
 800ebfc:	3202      	adds	r2, #2
 800ebfe:	3302      	adds	r3, #2
 800ec00:	2102      	movs	r1, #2
 800ec02:	60a2      	str	r2, [r4, #8]
 800ec04:	6123      	str	r3, [r4, #16]
 800ec06:	7561      	strb	r1, [r4, #21]
 800ec08:	7da0      	ldrb	r0, [r4, #22]
 800ec0a:	f080 0001 	eor.w	r0, r0, #1
 800ec0e:	b003      	add	sp, #12
 800ec10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ec18:	801a      	strh	r2, [r3, #0]
 800ec1a:	e7ed      	b.n	800ebf8 <ucdr_serialize_endian_uint16_t+0x9c>
 800ec1c:	68a2      	ldr	r2, [r4, #8]
 800ec1e:	6923      	ldr	r3, [r4, #16]
 800ec20:	7da0      	ldrb	r0, [r4, #22]
 800ec22:	f884 8015 	strb.w	r8, [r4, #21]
 800ec26:	1b92      	subs	r2, r2, r6
 800ec28:	1b9b      	subs	r3, r3, r6
 800ec2a:	f080 0001 	eor.w	r0, r0, #1
 800ec2e:	60a2      	str	r2, [r4, #8]
 800ec30:	6123      	str	r3, [r4, #16]
 800ec32:	b003      	add	sp, #12
 800ec34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec38:	68a3      	ldr	r3, [r4, #8]
 800ec3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec3e:	701a      	strb	r2, [r3, #0]
 800ec40:	e7bc      	b.n	800ebbc <ucdr_serialize_endian_uint16_t+0x60>
 800ec42:	f10d 0506 	add.w	r5, sp, #6
 800ec46:	4629      	mov	r1, r5
 800ec48:	4632      	mov	r2, r6
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	f009 fc1d 	bl	801848a <memcpy>
 800ec50:	68a0      	ldr	r0, [r4, #8]
 800ec52:	464a      	mov	r2, r9
 800ec54:	19a9      	adds	r1, r5, r6
 800ec56:	f009 fc18 	bl	801848a <memcpy>
 800ec5a:	e7af      	b.n	800ebbc <ucdr_serialize_endian_uint16_t+0x60>

0800ec5c <ucdr_deserialize_uint16_t>:
 800ec5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec60:	460d      	mov	r5, r1
 800ec62:	2102      	movs	r1, #2
 800ec64:	4604      	mov	r4, r0
 800ec66:	f000 fe85 	bl	800f974 <ucdr_buffer_alignment>
 800ec6a:	4601      	mov	r1, r0
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ec72:	f000 fec3 	bl	800f9fc <ucdr_advance_buffer>
 800ec76:	2102      	movs	r1, #2
 800ec78:	4620      	mov	r0, r4
 800ec7a:	f000 fe1b 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800ec7e:	bb60      	cbnz	r0, 800ecda <ucdr_deserialize_uint16_t+0x7e>
 800ec80:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ec84:	42be      	cmp	r6, r7
 800ec86:	d923      	bls.n	800ecd0 <ucdr_deserialize_uint16_t+0x74>
 800ec88:	6923      	ldr	r3, [r4, #16]
 800ec8a:	60a6      	str	r6, [r4, #8]
 800ec8c:	1bf6      	subs	r6, r6, r7
 800ec8e:	4433      	add	r3, r6
 800ec90:	f1c6 0902 	rsb	r9, r6, #2
 800ec94:	6123      	str	r3, [r4, #16]
 800ec96:	4649      	mov	r1, r9
 800ec98:	4620      	mov	r0, r4
 800ec9a:	f000 fe17 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	d034      	beq.n	800ed0c <ucdr_deserialize_uint16_t+0xb0>
 800eca2:	7d23      	ldrb	r3, [r4, #20]
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d042      	beq.n	800ed2e <ucdr_deserialize_uint16_t+0xd2>
 800eca8:	787b      	ldrb	r3, [r7, #1]
 800ecaa:	702b      	strb	r3, [r5, #0]
 800ecac:	2e00      	cmp	r6, #0
 800ecae:	d03a      	beq.n	800ed26 <ucdr_deserialize_uint16_t+0xca>
 800ecb0:	783b      	ldrb	r3, [r7, #0]
 800ecb2:	706b      	strb	r3, [r5, #1]
 800ecb4:	6923      	ldr	r3, [r4, #16]
 800ecb6:	68a2      	ldr	r2, [r4, #8]
 800ecb8:	7da0      	ldrb	r0, [r4, #22]
 800ecba:	2102      	movs	r1, #2
 800ecbc:	3302      	adds	r3, #2
 800ecbe:	444a      	add	r2, r9
 800ecc0:	1b9b      	subs	r3, r3, r6
 800ecc2:	7561      	strb	r1, [r4, #21]
 800ecc4:	60a2      	str	r2, [r4, #8]
 800ecc6:	6123      	str	r3, [r4, #16]
 800ecc8:	f080 0001 	eor.w	r0, r0, #1
 800eccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecd0:	2102      	movs	r1, #2
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f000 fdfa 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800ecd8:	b180      	cbz	r0, 800ecfc <ucdr_deserialize_uint16_t+0xa0>
 800ecda:	7d23      	ldrb	r3, [r4, #20]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	68a3      	ldr	r3, [r4, #8]
 800ece0:	d011      	beq.n	800ed06 <ucdr_deserialize_uint16_t+0xaa>
 800ece2:	785b      	ldrb	r3, [r3, #1]
 800ece4:	702b      	strb	r3, [r5, #0]
 800ece6:	68a3      	ldr	r3, [r4, #8]
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	706b      	strb	r3, [r5, #1]
 800ecec:	68a2      	ldr	r2, [r4, #8]
 800ecee:	6923      	ldr	r3, [r4, #16]
 800ecf0:	3202      	adds	r2, #2
 800ecf2:	3302      	adds	r3, #2
 800ecf4:	2102      	movs	r1, #2
 800ecf6:	60a2      	str	r2, [r4, #8]
 800ecf8:	6123      	str	r3, [r4, #16]
 800ecfa:	7561      	strb	r1, [r4, #21]
 800ecfc:	7da0      	ldrb	r0, [r4, #22]
 800ecfe:	f080 0001 	eor.w	r0, r0, #1
 800ed02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed06:	881b      	ldrh	r3, [r3, #0]
 800ed08:	802b      	strh	r3, [r5, #0]
 800ed0a:	e7ef      	b.n	800ecec <ucdr_deserialize_uint16_t+0x90>
 800ed0c:	68a2      	ldr	r2, [r4, #8]
 800ed0e:	6923      	ldr	r3, [r4, #16]
 800ed10:	7da0      	ldrb	r0, [r4, #22]
 800ed12:	f884 8015 	strb.w	r8, [r4, #21]
 800ed16:	1b92      	subs	r2, r2, r6
 800ed18:	1b9b      	subs	r3, r3, r6
 800ed1a:	60a2      	str	r2, [r4, #8]
 800ed1c:	6123      	str	r3, [r4, #16]
 800ed1e:	f080 0001 	eor.w	r0, r0, #1
 800ed22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed26:	68a3      	ldr	r3, [r4, #8]
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	706b      	strb	r3, [r5, #1]
 800ed2c:	e7c2      	b.n	800ecb4 <ucdr_deserialize_uint16_t+0x58>
 800ed2e:	4639      	mov	r1, r7
 800ed30:	4632      	mov	r2, r6
 800ed32:	4628      	mov	r0, r5
 800ed34:	f009 fba9 	bl	801848a <memcpy>
 800ed38:	68a1      	ldr	r1, [r4, #8]
 800ed3a:	464a      	mov	r2, r9
 800ed3c:	19a8      	adds	r0, r5, r6
 800ed3e:	f009 fba4 	bl	801848a <memcpy>
 800ed42:	e7b7      	b.n	800ecb4 <ucdr_deserialize_uint16_t+0x58>

0800ed44 <ucdr_deserialize_endian_uint16_t>:
 800ed44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed48:	460e      	mov	r6, r1
 800ed4a:	2102      	movs	r1, #2
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	4615      	mov	r5, r2
 800ed50:	f000 fe10 	bl	800f974 <ucdr_buffer_alignment>
 800ed54:	4601      	mov	r1, r0
 800ed56:	4620      	mov	r0, r4
 800ed58:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ed5c:	f000 fe4e 	bl	800f9fc <ucdr_advance_buffer>
 800ed60:	2102      	movs	r1, #2
 800ed62:	4620      	mov	r0, r4
 800ed64:	f000 fda6 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800ed68:	bb70      	cbnz	r0, 800edc8 <ucdr_deserialize_endian_uint16_t+0x84>
 800ed6a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ed6e:	4547      	cmp	r7, r8
 800ed70:	d925      	bls.n	800edbe <ucdr_deserialize_endian_uint16_t+0x7a>
 800ed72:	6923      	ldr	r3, [r4, #16]
 800ed74:	60a7      	str	r7, [r4, #8]
 800ed76:	eba7 0708 	sub.w	r7, r7, r8
 800ed7a:	443b      	add	r3, r7
 800ed7c:	f1c7 0a02 	rsb	sl, r7, #2
 800ed80:	6123      	str	r3, [r4, #16]
 800ed82:	4651      	mov	r1, sl
 800ed84:	4620      	mov	r0, r4
 800ed86:	f000 fda1 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	d034      	beq.n	800edf8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ed8e:	2e01      	cmp	r6, #1
 800ed90:	d043      	beq.n	800ee1a <ucdr_deserialize_endian_uint16_t+0xd6>
 800ed92:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ed96:	702b      	strb	r3, [r5, #0]
 800ed98:	2f00      	cmp	r7, #0
 800ed9a:	d03a      	beq.n	800ee12 <ucdr_deserialize_endian_uint16_t+0xce>
 800ed9c:	f898 3000 	ldrb.w	r3, [r8]
 800eda0:	706b      	strb	r3, [r5, #1]
 800eda2:	6923      	ldr	r3, [r4, #16]
 800eda4:	68a2      	ldr	r2, [r4, #8]
 800eda6:	7da0      	ldrb	r0, [r4, #22]
 800eda8:	2102      	movs	r1, #2
 800edaa:	3302      	adds	r3, #2
 800edac:	4452      	add	r2, sl
 800edae:	1bdb      	subs	r3, r3, r7
 800edb0:	7561      	strb	r1, [r4, #21]
 800edb2:	60a2      	str	r2, [r4, #8]
 800edb4:	6123      	str	r3, [r4, #16]
 800edb6:	f080 0001 	eor.w	r0, r0, #1
 800edba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edbe:	2102      	movs	r1, #2
 800edc0:	4620      	mov	r0, r4
 800edc2:	f000 fd83 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800edc6:	b178      	cbz	r0, 800ede8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800edc8:	2e01      	cmp	r6, #1
 800edca:	68a3      	ldr	r3, [r4, #8]
 800edcc:	d011      	beq.n	800edf2 <ucdr_deserialize_endian_uint16_t+0xae>
 800edce:	785b      	ldrb	r3, [r3, #1]
 800edd0:	702b      	strb	r3, [r5, #0]
 800edd2:	68a3      	ldr	r3, [r4, #8]
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	706b      	strb	r3, [r5, #1]
 800edd8:	68a2      	ldr	r2, [r4, #8]
 800edda:	6923      	ldr	r3, [r4, #16]
 800eddc:	3202      	adds	r2, #2
 800edde:	3302      	adds	r3, #2
 800ede0:	2102      	movs	r1, #2
 800ede2:	60a2      	str	r2, [r4, #8]
 800ede4:	6123      	str	r3, [r4, #16]
 800ede6:	7561      	strb	r1, [r4, #21]
 800ede8:	7da0      	ldrb	r0, [r4, #22]
 800edea:	f080 0001 	eor.w	r0, r0, #1
 800edee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edf2:	881b      	ldrh	r3, [r3, #0]
 800edf4:	802b      	strh	r3, [r5, #0]
 800edf6:	e7ef      	b.n	800edd8 <ucdr_deserialize_endian_uint16_t+0x94>
 800edf8:	68a2      	ldr	r2, [r4, #8]
 800edfa:	6923      	ldr	r3, [r4, #16]
 800edfc:	7da0      	ldrb	r0, [r4, #22]
 800edfe:	f884 9015 	strb.w	r9, [r4, #21]
 800ee02:	1bd2      	subs	r2, r2, r7
 800ee04:	1bdb      	subs	r3, r3, r7
 800ee06:	60a2      	str	r2, [r4, #8]
 800ee08:	6123      	str	r3, [r4, #16]
 800ee0a:	f080 0001 	eor.w	r0, r0, #1
 800ee0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee12:	68a3      	ldr	r3, [r4, #8]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	706b      	strb	r3, [r5, #1]
 800ee18:	e7c3      	b.n	800eda2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800ee1a:	4641      	mov	r1, r8
 800ee1c:	463a      	mov	r2, r7
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f009 fb33 	bl	801848a <memcpy>
 800ee24:	68a1      	ldr	r1, [r4, #8]
 800ee26:	4652      	mov	r2, sl
 800ee28:	19e8      	adds	r0, r5, r7
 800ee2a:	f009 fb2e 	bl	801848a <memcpy>
 800ee2e:	e7b8      	b.n	800eda2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800ee30 <ucdr_serialize_uint32_t>:
 800ee30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee34:	b082      	sub	sp, #8
 800ee36:	4604      	mov	r4, r0
 800ee38:	9101      	str	r1, [sp, #4]
 800ee3a:	2104      	movs	r1, #4
 800ee3c:	f000 fd9a 	bl	800f974 <ucdr_buffer_alignment>
 800ee40:	4601      	mov	r1, r0
 800ee42:	4620      	mov	r0, r4
 800ee44:	7d67      	ldrb	r7, [r4, #21]
 800ee46:	f000 fdd9 	bl	800f9fc <ucdr_advance_buffer>
 800ee4a:	2104      	movs	r1, #4
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f000 fd31 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	d139      	bne.n	800eeca <ucdr_serialize_uint32_t+0x9a>
 800ee56:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ee5a:	42ab      	cmp	r3, r5
 800ee5c:	d930      	bls.n	800eec0 <ucdr_serialize_uint32_t+0x90>
 800ee5e:	1b5e      	subs	r6, r3, r5
 800ee60:	60a3      	str	r3, [r4, #8]
 800ee62:	6923      	ldr	r3, [r4, #16]
 800ee64:	f1c6 0804 	rsb	r8, r6, #4
 800ee68:	4433      	add	r3, r6
 800ee6a:	6123      	str	r3, [r4, #16]
 800ee6c:	4641      	mov	r1, r8
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f000 fd2c 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d04c      	beq.n	800ef12 <ucdr_serialize_uint32_t+0xe2>
 800ee78:	7d23      	ldrb	r3, [r4, #20]
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d063      	beq.n	800ef46 <ucdr_serialize_uint32_t+0x116>
 800ee7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee82:	702b      	strb	r3, [r5, #0]
 800ee84:	2e00      	cmp	r6, #0
 800ee86:	d051      	beq.n	800ef2c <ucdr_serialize_uint32_t+0xfc>
 800ee88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee8c:	706b      	strb	r3, [r5, #1]
 800ee8e:	2e01      	cmp	r6, #1
 800ee90:	d050      	beq.n	800ef34 <ucdr_serialize_uint32_t+0x104>
 800ee92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ee96:	70ab      	strb	r3, [r5, #2]
 800ee98:	2e02      	cmp	r6, #2
 800ee9a:	d04f      	beq.n	800ef3c <ucdr_serialize_uint32_t+0x10c>
 800ee9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eea0:	70eb      	strb	r3, [r5, #3]
 800eea2:	6923      	ldr	r3, [r4, #16]
 800eea4:	68a2      	ldr	r2, [r4, #8]
 800eea6:	7da0      	ldrb	r0, [r4, #22]
 800eea8:	3304      	adds	r3, #4
 800eeaa:	1b9e      	subs	r6, r3, r6
 800eeac:	4442      	add	r2, r8
 800eeae:	2304      	movs	r3, #4
 800eeb0:	f080 0001 	eor.w	r0, r0, #1
 800eeb4:	60a2      	str	r2, [r4, #8]
 800eeb6:	6126      	str	r6, [r4, #16]
 800eeb8:	7563      	strb	r3, [r4, #21]
 800eeba:	b002      	add	sp, #8
 800eebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec0:	2104      	movs	r1, #4
 800eec2:	4620      	mov	r0, r4
 800eec4:	f000 fd02 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800eec8:	b1d0      	cbz	r0, 800ef00 <ucdr_serialize_uint32_t+0xd0>
 800eeca:	7d23      	ldrb	r3, [r4, #20]
 800eecc:	2b01      	cmp	r3, #1
 800eece:	68a3      	ldr	r3, [r4, #8]
 800eed0:	d01c      	beq.n	800ef0c <ucdr_serialize_uint32_t+0xdc>
 800eed2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800eed6:	701a      	strb	r2, [r3, #0]
 800eed8:	68a3      	ldr	r3, [r4, #8]
 800eeda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eede:	705a      	strb	r2, [r3, #1]
 800eee0:	68a3      	ldr	r3, [r4, #8]
 800eee2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eee6:	709a      	strb	r2, [r3, #2]
 800eee8:	68a3      	ldr	r3, [r4, #8]
 800eeea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eeee:	70da      	strb	r2, [r3, #3]
 800eef0:	68a2      	ldr	r2, [r4, #8]
 800eef2:	6923      	ldr	r3, [r4, #16]
 800eef4:	3204      	adds	r2, #4
 800eef6:	3304      	adds	r3, #4
 800eef8:	2104      	movs	r1, #4
 800eefa:	60a2      	str	r2, [r4, #8]
 800eefc:	6123      	str	r3, [r4, #16]
 800eefe:	7561      	strb	r1, [r4, #21]
 800ef00:	7da0      	ldrb	r0, [r4, #22]
 800ef02:	f080 0001 	eor.w	r0, r0, #1
 800ef06:	b002      	add	sp, #8
 800ef08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef0c:	9a01      	ldr	r2, [sp, #4]
 800ef0e:	601a      	str	r2, [r3, #0]
 800ef10:	e7ee      	b.n	800eef0 <ucdr_serialize_uint32_t+0xc0>
 800ef12:	68a2      	ldr	r2, [r4, #8]
 800ef14:	6923      	ldr	r3, [r4, #16]
 800ef16:	7da0      	ldrb	r0, [r4, #22]
 800ef18:	7567      	strb	r7, [r4, #21]
 800ef1a:	1b92      	subs	r2, r2, r6
 800ef1c:	1b9b      	subs	r3, r3, r6
 800ef1e:	f080 0001 	eor.w	r0, r0, #1
 800ef22:	60a2      	str	r2, [r4, #8]
 800ef24:	6123      	str	r3, [r4, #16]
 800ef26:	b002      	add	sp, #8
 800ef28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef2c:	68a3      	ldr	r3, [r4, #8]
 800ef2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef32:	701a      	strb	r2, [r3, #0]
 800ef34:	68a3      	ldr	r3, [r4, #8]
 800ef36:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ef3a:	701a      	strb	r2, [r3, #0]
 800ef3c:	68a3      	ldr	r3, [r4, #8]
 800ef3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef42:	701a      	strb	r2, [r3, #0]
 800ef44:	e7ad      	b.n	800eea2 <ucdr_serialize_uint32_t+0x72>
 800ef46:	4628      	mov	r0, r5
 800ef48:	ad01      	add	r5, sp, #4
 800ef4a:	4629      	mov	r1, r5
 800ef4c:	4632      	mov	r2, r6
 800ef4e:	f009 fa9c 	bl	801848a <memcpy>
 800ef52:	68a0      	ldr	r0, [r4, #8]
 800ef54:	4642      	mov	r2, r8
 800ef56:	19a9      	adds	r1, r5, r6
 800ef58:	f009 fa97 	bl	801848a <memcpy>
 800ef5c:	e7a1      	b.n	800eea2 <ucdr_serialize_uint32_t+0x72>
 800ef5e:	bf00      	nop

0800ef60 <ucdr_serialize_endian_uint32_t>:
 800ef60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef64:	b083      	sub	sp, #12
 800ef66:	460d      	mov	r5, r1
 800ef68:	2104      	movs	r1, #4
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	9201      	str	r2, [sp, #4]
 800ef6e:	f000 fd01 	bl	800f974 <ucdr_buffer_alignment>
 800ef72:	4601      	mov	r1, r0
 800ef74:	4620      	mov	r0, r4
 800ef76:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ef7a:	f000 fd3f 	bl	800f9fc <ucdr_advance_buffer>
 800ef7e:	2104      	movs	r1, #4
 800ef80:	4620      	mov	r0, r4
 800ef82:	f000 fc97 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d138      	bne.n	800effc <ucdr_serialize_endian_uint32_t+0x9c>
 800ef8a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ef8e:	42b7      	cmp	r7, r6
 800ef90:	d92f      	bls.n	800eff2 <ucdr_serialize_endian_uint32_t+0x92>
 800ef92:	6923      	ldr	r3, [r4, #16]
 800ef94:	60a7      	str	r7, [r4, #8]
 800ef96:	1bbf      	subs	r7, r7, r6
 800ef98:	443b      	add	r3, r7
 800ef9a:	f1c7 0904 	rsb	r9, r7, #4
 800ef9e:	6123      	str	r3, [r4, #16]
 800efa0:	4649      	mov	r1, r9
 800efa2:	4620      	mov	r0, r4
 800efa4:	f000 fc92 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800efa8:	2800      	cmp	r0, #0
 800efaa:	d04a      	beq.n	800f042 <ucdr_serialize_endian_uint32_t+0xe2>
 800efac:	2d01      	cmp	r5, #1
 800efae:	d063      	beq.n	800f078 <ucdr_serialize_endian_uint32_t+0x118>
 800efb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800efb4:	7033      	strb	r3, [r6, #0]
 800efb6:	2f00      	cmp	r7, #0
 800efb8:	d051      	beq.n	800f05e <ucdr_serialize_endian_uint32_t+0xfe>
 800efba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800efbe:	7073      	strb	r3, [r6, #1]
 800efc0:	2f01      	cmp	r7, #1
 800efc2:	d050      	beq.n	800f066 <ucdr_serialize_endian_uint32_t+0x106>
 800efc4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800efc8:	70b3      	strb	r3, [r6, #2]
 800efca:	2f02      	cmp	r7, #2
 800efcc:	d04f      	beq.n	800f06e <ucdr_serialize_endian_uint32_t+0x10e>
 800efce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800efd2:	70f3      	strb	r3, [r6, #3]
 800efd4:	6923      	ldr	r3, [r4, #16]
 800efd6:	68a2      	ldr	r2, [r4, #8]
 800efd8:	7da0      	ldrb	r0, [r4, #22]
 800efda:	3304      	adds	r3, #4
 800efdc:	444a      	add	r2, r9
 800efde:	1bdb      	subs	r3, r3, r7
 800efe0:	2104      	movs	r1, #4
 800efe2:	f080 0001 	eor.w	r0, r0, #1
 800efe6:	60a2      	str	r2, [r4, #8]
 800efe8:	6123      	str	r3, [r4, #16]
 800efea:	7561      	strb	r1, [r4, #21]
 800efec:	b003      	add	sp, #12
 800efee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eff2:	2104      	movs	r1, #4
 800eff4:	4620      	mov	r0, r4
 800eff6:	f000 fc69 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800effa:	b1c8      	cbz	r0, 800f030 <ucdr_serialize_endian_uint32_t+0xd0>
 800effc:	2d01      	cmp	r5, #1
 800effe:	68a3      	ldr	r3, [r4, #8]
 800f000:	d01c      	beq.n	800f03c <ucdr_serialize_endian_uint32_t+0xdc>
 800f002:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f006:	701a      	strb	r2, [r3, #0]
 800f008:	68a3      	ldr	r3, [r4, #8]
 800f00a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f00e:	705a      	strb	r2, [r3, #1]
 800f010:	68a3      	ldr	r3, [r4, #8]
 800f012:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f016:	709a      	strb	r2, [r3, #2]
 800f018:	68a3      	ldr	r3, [r4, #8]
 800f01a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f01e:	70da      	strb	r2, [r3, #3]
 800f020:	68a2      	ldr	r2, [r4, #8]
 800f022:	6923      	ldr	r3, [r4, #16]
 800f024:	3204      	adds	r2, #4
 800f026:	3304      	adds	r3, #4
 800f028:	2104      	movs	r1, #4
 800f02a:	60a2      	str	r2, [r4, #8]
 800f02c:	6123      	str	r3, [r4, #16]
 800f02e:	7561      	strb	r1, [r4, #21]
 800f030:	7da0      	ldrb	r0, [r4, #22]
 800f032:	f080 0001 	eor.w	r0, r0, #1
 800f036:	b003      	add	sp, #12
 800f038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f03c:	9a01      	ldr	r2, [sp, #4]
 800f03e:	601a      	str	r2, [r3, #0]
 800f040:	e7ee      	b.n	800f020 <ucdr_serialize_endian_uint32_t+0xc0>
 800f042:	68a2      	ldr	r2, [r4, #8]
 800f044:	6923      	ldr	r3, [r4, #16]
 800f046:	7da0      	ldrb	r0, [r4, #22]
 800f048:	f884 8015 	strb.w	r8, [r4, #21]
 800f04c:	1bd2      	subs	r2, r2, r7
 800f04e:	1bdb      	subs	r3, r3, r7
 800f050:	f080 0001 	eor.w	r0, r0, #1
 800f054:	60a2      	str	r2, [r4, #8]
 800f056:	6123      	str	r3, [r4, #16]
 800f058:	b003      	add	sp, #12
 800f05a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f05e:	68a3      	ldr	r3, [r4, #8]
 800f060:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f064:	701a      	strb	r2, [r3, #0]
 800f066:	68a3      	ldr	r3, [r4, #8]
 800f068:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f06c:	701a      	strb	r2, [r3, #0]
 800f06e:	68a3      	ldr	r3, [r4, #8]
 800f070:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f074:	701a      	strb	r2, [r3, #0]
 800f076:	e7ad      	b.n	800efd4 <ucdr_serialize_endian_uint32_t+0x74>
 800f078:	ad01      	add	r5, sp, #4
 800f07a:	4629      	mov	r1, r5
 800f07c:	463a      	mov	r2, r7
 800f07e:	4630      	mov	r0, r6
 800f080:	f009 fa03 	bl	801848a <memcpy>
 800f084:	68a0      	ldr	r0, [r4, #8]
 800f086:	464a      	mov	r2, r9
 800f088:	19e9      	adds	r1, r5, r7
 800f08a:	f009 f9fe 	bl	801848a <memcpy>
 800f08e:	e7a1      	b.n	800efd4 <ucdr_serialize_endian_uint32_t+0x74>

0800f090 <ucdr_deserialize_uint32_t>:
 800f090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f094:	460d      	mov	r5, r1
 800f096:	2104      	movs	r1, #4
 800f098:	4604      	mov	r4, r0
 800f09a:	f000 fc6b 	bl	800f974 <ucdr_buffer_alignment>
 800f09e:	4601      	mov	r1, r0
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f0a6:	f000 fca9 	bl	800f9fc <ucdr_advance_buffer>
 800f0aa:	2104      	movs	r1, #4
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	f000 fc01 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800f0b2:	2800      	cmp	r0, #0
 800f0b4:	d138      	bne.n	800f128 <ucdr_deserialize_uint32_t+0x98>
 800f0b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f0ba:	42b7      	cmp	r7, r6
 800f0bc:	d92f      	bls.n	800f11e <ucdr_deserialize_uint32_t+0x8e>
 800f0be:	6923      	ldr	r3, [r4, #16]
 800f0c0:	60a7      	str	r7, [r4, #8]
 800f0c2:	1bbf      	subs	r7, r7, r6
 800f0c4:	443b      	add	r3, r7
 800f0c6:	f1c7 0904 	rsb	r9, r7, #4
 800f0ca:	6123      	str	r3, [r4, #16]
 800f0cc:	4649      	mov	r1, r9
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	f000 fbfc 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d046      	beq.n	800f166 <ucdr_deserialize_uint32_t+0xd6>
 800f0d8:	7d23      	ldrb	r3, [r4, #20]
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d05c      	beq.n	800f198 <ucdr_deserialize_uint32_t+0x108>
 800f0de:	78f3      	ldrb	r3, [r6, #3]
 800f0e0:	702b      	strb	r3, [r5, #0]
 800f0e2:	2f00      	cmp	r7, #0
 800f0e4:	d04c      	beq.n	800f180 <ucdr_deserialize_uint32_t+0xf0>
 800f0e6:	78b3      	ldrb	r3, [r6, #2]
 800f0e8:	706b      	strb	r3, [r5, #1]
 800f0ea:	2f01      	cmp	r7, #1
 800f0ec:	f105 0302 	add.w	r3, r5, #2
 800f0f0:	d04a      	beq.n	800f188 <ucdr_deserialize_uint32_t+0xf8>
 800f0f2:	7873      	ldrb	r3, [r6, #1]
 800f0f4:	70ab      	strb	r3, [r5, #2]
 800f0f6:	2f02      	cmp	r7, #2
 800f0f8:	f105 0303 	add.w	r3, r5, #3
 800f0fc:	d048      	beq.n	800f190 <ucdr_deserialize_uint32_t+0x100>
 800f0fe:	7833      	ldrb	r3, [r6, #0]
 800f100:	70eb      	strb	r3, [r5, #3]
 800f102:	6923      	ldr	r3, [r4, #16]
 800f104:	68a2      	ldr	r2, [r4, #8]
 800f106:	7da0      	ldrb	r0, [r4, #22]
 800f108:	2104      	movs	r1, #4
 800f10a:	3304      	adds	r3, #4
 800f10c:	444a      	add	r2, r9
 800f10e:	1bdb      	subs	r3, r3, r7
 800f110:	7561      	strb	r1, [r4, #21]
 800f112:	60a2      	str	r2, [r4, #8]
 800f114:	6123      	str	r3, [r4, #16]
 800f116:	f080 0001 	eor.w	r0, r0, #1
 800f11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f11e:	2104      	movs	r1, #4
 800f120:	4620      	mov	r0, r4
 800f122:	f000 fbd3 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f126:	b1b0      	cbz	r0, 800f156 <ucdr_deserialize_uint32_t+0xc6>
 800f128:	7d23      	ldrb	r3, [r4, #20]
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	68a3      	ldr	r3, [r4, #8]
 800f12e:	d017      	beq.n	800f160 <ucdr_deserialize_uint32_t+0xd0>
 800f130:	78db      	ldrb	r3, [r3, #3]
 800f132:	702b      	strb	r3, [r5, #0]
 800f134:	68a3      	ldr	r3, [r4, #8]
 800f136:	789b      	ldrb	r3, [r3, #2]
 800f138:	706b      	strb	r3, [r5, #1]
 800f13a:	68a3      	ldr	r3, [r4, #8]
 800f13c:	785b      	ldrb	r3, [r3, #1]
 800f13e:	70ab      	strb	r3, [r5, #2]
 800f140:	68a3      	ldr	r3, [r4, #8]
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	70eb      	strb	r3, [r5, #3]
 800f146:	68a2      	ldr	r2, [r4, #8]
 800f148:	6923      	ldr	r3, [r4, #16]
 800f14a:	3204      	adds	r2, #4
 800f14c:	3304      	adds	r3, #4
 800f14e:	2104      	movs	r1, #4
 800f150:	60a2      	str	r2, [r4, #8]
 800f152:	6123      	str	r3, [r4, #16]
 800f154:	7561      	strb	r1, [r4, #21]
 800f156:	7da0      	ldrb	r0, [r4, #22]
 800f158:	f080 0001 	eor.w	r0, r0, #1
 800f15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	602b      	str	r3, [r5, #0]
 800f164:	e7ef      	b.n	800f146 <ucdr_deserialize_uint32_t+0xb6>
 800f166:	68a2      	ldr	r2, [r4, #8]
 800f168:	6923      	ldr	r3, [r4, #16]
 800f16a:	7da0      	ldrb	r0, [r4, #22]
 800f16c:	f884 8015 	strb.w	r8, [r4, #21]
 800f170:	1bd2      	subs	r2, r2, r7
 800f172:	1bdb      	subs	r3, r3, r7
 800f174:	60a2      	str	r2, [r4, #8]
 800f176:	6123      	str	r3, [r4, #16]
 800f178:	f080 0001 	eor.w	r0, r0, #1
 800f17c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f180:	68a3      	ldr	r3, [r4, #8]
 800f182:	789b      	ldrb	r3, [r3, #2]
 800f184:	706b      	strb	r3, [r5, #1]
 800f186:	1cab      	adds	r3, r5, #2
 800f188:	68a2      	ldr	r2, [r4, #8]
 800f18a:	7852      	ldrb	r2, [r2, #1]
 800f18c:	f803 2b01 	strb.w	r2, [r3], #1
 800f190:	68a2      	ldr	r2, [r4, #8]
 800f192:	7812      	ldrb	r2, [r2, #0]
 800f194:	701a      	strb	r2, [r3, #0]
 800f196:	e7b4      	b.n	800f102 <ucdr_deserialize_uint32_t+0x72>
 800f198:	4631      	mov	r1, r6
 800f19a:	463a      	mov	r2, r7
 800f19c:	4628      	mov	r0, r5
 800f19e:	f009 f974 	bl	801848a <memcpy>
 800f1a2:	68a1      	ldr	r1, [r4, #8]
 800f1a4:	464a      	mov	r2, r9
 800f1a6:	19e8      	adds	r0, r5, r7
 800f1a8:	f009 f96f 	bl	801848a <memcpy>
 800f1ac:	e7a9      	b.n	800f102 <ucdr_deserialize_uint32_t+0x72>
 800f1ae:	bf00      	nop

0800f1b0 <ucdr_deserialize_endian_uint32_t>:
 800f1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1b4:	460e      	mov	r6, r1
 800f1b6:	2104      	movs	r1, #4
 800f1b8:	4604      	mov	r4, r0
 800f1ba:	4615      	mov	r5, r2
 800f1bc:	f000 fbda 	bl	800f974 <ucdr_buffer_alignment>
 800f1c0:	4601      	mov	r1, r0
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f1c8:	f000 fc18 	bl	800f9fc <ucdr_advance_buffer>
 800f1cc:	2104      	movs	r1, #4
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	f000 fb70 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	d13c      	bne.n	800f252 <ucdr_deserialize_endian_uint32_t+0xa2>
 800f1d8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f1dc:	42bb      	cmp	r3, r7
 800f1de:	d933      	bls.n	800f248 <ucdr_deserialize_endian_uint32_t+0x98>
 800f1e0:	eba3 0807 	sub.w	r8, r3, r7
 800f1e4:	60a3      	str	r3, [r4, #8]
 800f1e6:	6923      	ldr	r3, [r4, #16]
 800f1e8:	f1c8 0a04 	rsb	sl, r8, #4
 800f1ec:	4443      	add	r3, r8
 800f1ee:	6123      	str	r3, [r4, #16]
 800f1f0:	4651      	mov	r1, sl
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f000 fb6a 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d048      	beq.n	800f28e <ucdr_deserialize_endian_uint32_t+0xde>
 800f1fc:	2e01      	cmp	r6, #1
 800f1fe:	d061      	beq.n	800f2c4 <ucdr_deserialize_endian_uint32_t+0x114>
 800f200:	78fb      	ldrb	r3, [r7, #3]
 800f202:	702b      	strb	r3, [r5, #0]
 800f204:	f1b8 0f00 	cmp.w	r8, #0
 800f208:	d050      	beq.n	800f2ac <ucdr_deserialize_endian_uint32_t+0xfc>
 800f20a:	78bb      	ldrb	r3, [r7, #2]
 800f20c:	706b      	strb	r3, [r5, #1]
 800f20e:	f1b8 0f01 	cmp.w	r8, #1
 800f212:	f105 0302 	add.w	r3, r5, #2
 800f216:	d04d      	beq.n	800f2b4 <ucdr_deserialize_endian_uint32_t+0x104>
 800f218:	787b      	ldrb	r3, [r7, #1]
 800f21a:	70ab      	strb	r3, [r5, #2]
 800f21c:	f1b8 0f02 	cmp.w	r8, #2
 800f220:	f105 0303 	add.w	r3, r5, #3
 800f224:	d04a      	beq.n	800f2bc <ucdr_deserialize_endian_uint32_t+0x10c>
 800f226:	783b      	ldrb	r3, [r7, #0]
 800f228:	70eb      	strb	r3, [r5, #3]
 800f22a:	6923      	ldr	r3, [r4, #16]
 800f22c:	68a2      	ldr	r2, [r4, #8]
 800f22e:	7da0      	ldrb	r0, [r4, #22]
 800f230:	2104      	movs	r1, #4
 800f232:	3304      	adds	r3, #4
 800f234:	4452      	add	r2, sl
 800f236:	eba3 0308 	sub.w	r3, r3, r8
 800f23a:	7561      	strb	r1, [r4, #21]
 800f23c:	60a2      	str	r2, [r4, #8]
 800f23e:	6123      	str	r3, [r4, #16]
 800f240:	f080 0001 	eor.w	r0, r0, #1
 800f244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f248:	2104      	movs	r1, #4
 800f24a:	4620      	mov	r0, r4
 800f24c:	f000 fb3e 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f250:	b1a8      	cbz	r0, 800f27e <ucdr_deserialize_endian_uint32_t+0xce>
 800f252:	2e01      	cmp	r6, #1
 800f254:	68a3      	ldr	r3, [r4, #8]
 800f256:	d017      	beq.n	800f288 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f258:	78db      	ldrb	r3, [r3, #3]
 800f25a:	702b      	strb	r3, [r5, #0]
 800f25c:	68a3      	ldr	r3, [r4, #8]
 800f25e:	789b      	ldrb	r3, [r3, #2]
 800f260:	706b      	strb	r3, [r5, #1]
 800f262:	68a3      	ldr	r3, [r4, #8]
 800f264:	785b      	ldrb	r3, [r3, #1]
 800f266:	70ab      	strb	r3, [r5, #2]
 800f268:	68a3      	ldr	r3, [r4, #8]
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	70eb      	strb	r3, [r5, #3]
 800f26e:	68a2      	ldr	r2, [r4, #8]
 800f270:	6923      	ldr	r3, [r4, #16]
 800f272:	3204      	adds	r2, #4
 800f274:	3304      	adds	r3, #4
 800f276:	2104      	movs	r1, #4
 800f278:	60a2      	str	r2, [r4, #8]
 800f27a:	6123      	str	r3, [r4, #16]
 800f27c:	7561      	strb	r1, [r4, #21]
 800f27e:	7da0      	ldrb	r0, [r4, #22]
 800f280:	f080 0001 	eor.w	r0, r0, #1
 800f284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	602b      	str	r3, [r5, #0]
 800f28c:	e7ef      	b.n	800f26e <ucdr_deserialize_endian_uint32_t+0xbe>
 800f28e:	68a2      	ldr	r2, [r4, #8]
 800f290:	6923      	ldr	r3, [r4, #16]
 800f292:	7da0      	ldrb	r0, [r4, #22]
 800f294:	f884 9015 	strb.w	r9, [r4, #21]
 800f298:	eba2 0208 	sub.w	r2, r2, r8
 800f29c:	eba3 0308 	sub.w	r3, r3, r8
 800f2a0:	60a2      	str	r2, [r4, #8]
 800f2a2:	6123      	str	r3, [r4, #16]
 800f2a4:	f080 0001 	eor.w	r0, r0, #1
 800f2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ac:	68a3      	ldr	r3, [r4, #8]
 800f2ae:	789b      	ldrb	r3, [r3, #2]
 800f2b0:	706b      	strb	r3, [r5, #1]
 800f2b2:	1cab      	adds	r3, r5, #2
 800f2b4:	68a2      	ldr	r2, [r4, #8]
 800f2b6:	7852      	ldrb	r2, [r2, #1]
 800f2b8:	f803 2b01 	strb.w	r2, [r3], #1
 800f2bc:	68a2      	ldr	r2, [r4, #8]
 800f2be:	7812      	ldrb	r2, [r2, #0]
 800f2c0:	701a      	strb	r2, [r3, #0]
 800f2c2:	e7b2      	b.n	800f22a <ucdr_deserialize_endian_uint32_t+0x7a>
 800f2c4:	4639      	mov	r1, r7
 800f2c6:	4642      	mov	r2, r8
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	f009 f8de 	bl	801848a <memcpy>
 800f2ce:	68a1      	ldr	r1, [r4, #8]
 800f2d0:	4652      	mov	r2, sl
 800f2d2:	eb05 0008 	add.w	r0, r5, r8
 800f2d6:	f009 f8d8 	bl	801848a <memcpy>
 800f2da:	e7a6      	b.n	800f22a <ucdr_deserialize_endian_uint32_t+0x7a>

0800f2dc <ucdr_serialize_uint64_t>:
 800f2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e0:	2108      	movs	r1, #8
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	e9cd 2300 	strd	r2, r3, [sp]
 800f2ea:	f000 fb43 	bl	800f974 <ucdr_buffer_alignment>
 800f2ee:	4601      	mov	r1, r0
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	7d67      	ldrb	r7, [r4, #21]
 800f2f4:	f000 fb82 	bl	800f9fc <ucdr_advance_buffer>
 800f2f8:	2108      	movs	r1, #8
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f000 fada 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800f300:	2800      	cmp	r0, #0
 800f302:	d14e      	bne.n	800f3a2 <ucdr_serialize_uint64_t+0xc6>
 800f304:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f308:	42ab      	cmp	r3, r5
 800f30a:	d945      	bls.n	800f398 <ucdr_serialize_uint64_t+0xbc>
 800f30c:	1b5e      	subs	r6, r3, r5
 800f30e:	60a3      	str	r3, [r4, #8]
 800f310:	6923      	ldr	r3, [r4, #16]
 800f312:	f1c6 0808 	rsb	r8, r6, #8
 800f316:	4433      	add	r3, r6
 800f318:	6123      	str	r3, [r4, #16]
 800f31a:	4641      	mov	r1, r8
 800f31c:	4620      	mov	r0, r4
 800f31e:	f000 fad5 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f322:	2800      	cmp	r0, #0
 800f324:	d074      	beq.n	800f410 <ucdr_serialize_uint64_t+0x134>
 800f326:	7d23      	ldrb	r3, [r4, #20]
 800f328:	2b01      	cmp	r3, #1
 800f32a:	f000 809b 	beq.w	800f464 <ucdr_serialize_uint64_t+0x188>
 800f32e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f332:	702b      	strb	r3, [r5, #0]
 800f334:	2e00      	cmp	r6, #0
 800f336:	d078      	beq.n	800f42a <ucdr_serialize_uint64_t+0x14e>
 800f338:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f33c:	706b      	strb	r3, [r5, #1]
 800f33e:	2e01      	cmp	r6, #1
 800f340:	d077      	beq.n	800f432 <ucdr_serialize_uint64_t+0x156>
 800f342:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f346:	70ab      	strb	r3, [r5, #2]
 800f348:	2e02      	cmp	r6, #2
 800f34a:	d076      	beq.n	800f43a <ucdr_serialize_uint64_t+0x15e>
 800f34c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f350:	70eb      	strb	r3, [r5, #3]
 800f352:	2e03      	cmp	r6, #3
 800f354:	d075      	beq.n	800f442 <ucdr_serialize_uint64_t+0x166>
 800f356:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f35a:	712b      	strb	r3, [r5, #4]
 800f35c:	2e04      	cmp	r6, #4
 800f35e:	d074      	beq.n	800f44a <ucdr_serialize_uint64_t+0x16e>
 800f360:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f364:	716b      	strb	r3, [r5, #5]
 800f366:	2e05      	cmp	r6, #5
 800f368:	d073      	beq.n	800f452 <ucdr_serialize_uint64_t+0x176>
 800f36a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f36e:	71ab      	strb	r3, [r5, #6]
 800f370:	2e06      	cmp	r6, #6
 800f372:	d072      	beq.n	800f45a <ucdr_serialize_uint64_t+0x17e>
 800f374:	f89d 3000 	ldrb.w	r3, [sp]
 800f378:	71eb      	strb	r3, [r5, #7]
 800f37a:	6923      	ldr	r3, [r4, #16]
 800f37c:	68a2      	ldr	r2, [r4, #8]
 800f37e:	7da0      	ldrb	r0, [r4, #22]
 800f380:	3308      	adds	r3, #8
 800f382:	1b9e      	subs	r6, r3, r6
 800f384:	4442      	add	r2, r8
 800f386:	2308      	movs	r3, #8
 800f388:	f080 0001 	eor.w	r0, r0, #1
 800f38c:	60a2      	str	r2, [r4, #8]
 800f38e:	6126      	str	r6, [r4, #16]
 800f390:	7563      	strb	r3, [r4, #21]
 800f392:	b002      	add	sp, #8
 800f394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f398:	2108      	movs	r1, #8
 800f39a:	4620      	mov	r0, r4
 800f39c:	f000 fa96 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f3a0:	b350      	cbz	r0, 800f3f8 <ucdr_serialize_uint64_t+0x11c>
 800f3a2:	7d23      	ldrb	r3, [r4, #20]
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d02d      	beq.n	800f404 <ucdr_serialize_uint64_t+0x128>
 800f3a8:	68a3      	ldr	r3, [r4, #8]
 800f3aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f3ae:	701a      	strb	r2, [r3, #0]
 800f3b0:	68a3      	ldr	r3, [r4, #8]
 800f3b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f3b6:	705a      	strb	r2, [r3, #1]
 800f3b8:	68a3      	ldr	r3, [r4, #8]
 800f3ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f3be:	709a      	strb	r2, [r3, #2]
 800f3c0:	68a3      	ldr	r3, [r4, #8]
 800f3c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f3c6:	70da      	strb	r2, [r3, #3]
 800f3c8:	68a3      	ldr	r3, [r4, #8]
 800f3ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f3ce:	711a      	strb	r2, [r3, #4]
 800f3d0:	68a3      	ldr	r3, [r4, #8]
 800f3d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f3d6:	715a      	strb	r2, [r3, #5]
 800f3d8:	68a3      	ldr	r3, [r4, #8]
 800f3da:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f3de:	719a      	strb	r2, [r3, #6]
 800f3e0:	68a3      	ldr	r3, [r4, #8]
 800f3e2:	f89d 2000 	ldrb.w	r2, [sp]
 800f3e6:	71da      	strb	r2, [r3, #7]
 800f3e8:	68a2      	ldr	r2, [r4, #8]
 800f3ea:	6923      	ldr	r3, [r4, #16]
 800f3ec:	3208      	adds	r2, #8
 800f3ee:	3308      	adds	r3, #8
 800f3f0:	2108      	movs	r1, #8
 800f3f2:	60a2      	str	r2, [r4, #8]
 800f3f4:	6123      	str	r3, [r4, #16]
 800f3f6:	7561      	strb	r1, [r4, #21]
 800f3f8:	7da0      	ldrb	r0, [r4, #22]
 800f3fa:	f080 0001 	eor.w	r0, r0, #1
 800f3fe:	b002      	add	sp, #8
 800f400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f404:	466b      	mov	r3, sp
 800f406:	cb03      	ldmia	r3!, {r0, r1}
 800f408:	68a3      	ldr	r3, [r4, #8]
 800f40a:	6018      	str	r0, [r3, #0]
 800f40c:	6059      	str	r1, [r3, #4]
 800f40e:	e7eb      	b.n	800f3e8 <ucdr_serialize_uint64_t+0x10c>
 800f410:	68a2      	ldr	r2, [r4, #8]
 800f412:	6923      	ldr	r3, [r4, #16]
 800f414:	7da0      	ldrb	r0, [r4, #22]
 800f416:	7567      	strb	r7, [r4, #21]
 800f418:	1b92      	subs	r2, r2, r6
 800f41a:	1b9b      	subs	r3, r3, r6
 800f41c:	f080 0001 	eor.w	r0, r0, #1
 800f420:	60a2      	str	r2, [r4, #8]
 800f422:	6123      	str	r3, [r4, #16]
 800f424:	b002      	add	sp, #8
 800f426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f42a:	68a3      	ldr	r3, [r4, #8]
 800f42c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f430:	701a      	strb	r2, [r3, #0]
 800f432:	68a3      	ldr	r3, [r4, #8]
 800f434:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f438:	701a      	strb	r2, [r3, #0]
 800f43a:	68a3      	ldr	r3, [r4, #8]
 800f43c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f440:	701a      	strb	r2, [r3, #0]
 800f442:	68a3      	ldr	r3, [r4, #8]
 800f444:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f448:	701a      	strb	r2, [r3, #0]
 800f44a:	68a3      	ldr	r3, [r4, #8]
 800f44c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f450:	701a      	strb	r2, [r3, #0]
 800f452:	68a3      	ldr	r3, [r4, #8]
 800f454:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f458:	701a      	strb	r2, [r3, #0]
 800f45a:	68a3      	ldr	r3, [r4, #8]
 800f45c:	f89d 2000 	ldrb.w	r2, [sp]
 800f460:	701a      	strb	r2, [r3, #0]
 800f462:	e78a      	b.n	800f37a <ucdr_serialize_uint64_t+0x9e>
 800f464:	4628      	mov	r0, r5
 800f466:	466d      	mov	r5, sp
 800f468:	4629      	mov	r1, r5
 800f46a:	4632      	mov	r2, r6
 800f46c:	f009 f80d 	bl	801848a <memcpy>
 800f470:	68a0      	ldr	r0, [r4, #8]
 800f472:	4642      	mov	r2, r8
 800f474:	19a9      	adds	r1, r5, r6
 800f476:	f009 f808 	bl	801848a <memcpy>
 800f47a:	e77e      	b.n	800f37a <ucdr_serialize_uint64_t+0x9e>

0800f47c <ucdr_serialize_int16_t>:
 800f47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f480:	b082      	sub	sp, #8
 800f482:	460b      	mov	r3, r1
 800f484:	2102      	movs	r1, #2
 800f486:	4604      	mov	r4, r0
 800f488:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f48c:	f000 fa72 	bl	800f974 <ucdr_buffer_alignment>
 800f490:	4601      	mov	r1, r0
 800f492:	4620      	mov	r0, r4
 800f494:	7d67      	ldrb	r7, [r4, #21]
 800f496:	f000 fab1 	bl	800f9fc <ucdr_advance_buffer>
 800f49a:	2102      	movs	r1, #2
 800f49c:	4620      	mov	r0, r4
 800f49e:	f000 fa09 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800f4a2:	bb78      	cbnz	r0, 800f504 <ucdr_serialize_int16_t+0x88>
 800f4a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f4a8:	42ab      	cmp	r3, r5
 800f4aa:	d926      	bls.n	800f4fa <ucdr_serialize_int16_t+0x7e>
 800f4ac:	1b5e      	subs	r6, r3, r5
 800f4ae:	60a3      	str	r3, [r4, #8]
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	f1c6 0802 	rsb	r8, r6, #2
 800f4b6:	4433      	add	r3, r6
 800f4b8:	6123      	str	r3, [r4, #16]
 800f4ba:	4641      	mov	r1, r8
 800f4bc:	4620      	mov	r0, r4
 800f4be:	f000 fa05 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d03b      	beq.n	800f53e <ucdr_serialize_int16_t+0xc2>
 800f4c6:	7d23      	ldrb	r3, [r4, #20]
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d04a      	beq.n	800f562 <ucdr_serialize_int16_t+0xe6>
 800f4cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f4d0:	702b      	strb	r3, [r5, #0]
 800f4d2:	2e00      	cmp	r6, #0
 800f4d4:	d040      	beq.n	800f558 <ucdr_serialize_int16_t+0xdc>
 800f4d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f4da:	706b      	strb	r3, [r5, #1]
 800f4dc:	6923      	ldr	r3, [r4, #16]
 800f4de:	68a2      	ldr	r2, [r4, #8]
 800f4e0:	7da0      	ldrb	r0, [r4, #22]
 800f4e2:	3302      	adds	r3, #2
 800f4e4:	1b9e      	subs	r6, r3, r6
 800f4e6:	4442      	add	r2, r8
 800f4e8:	2302      	movs	r3, #2
 800f4ea:	f080 0001 	eor.w	r0, r0, #1
 800f4ee:	60a2      	str	r2, [r4, #8]
 800f4f0:	6126      	str	r6, [r4, #16]
 800f4f2:	7563      	strb	r3, [r4, #21]
 800f4f4:	b002      	add	sp, #8
 800f4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4fa:	2102      	movs	r1, #2
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f000 f9e5 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f502:	b190      	cbz	r0, 800f52a <ucdr_serialize_int16_t+0xae>
 800f504:	7d23      	ldrb	r3, [r4, #20]
 800f506:	2b01      	cmp	r3, #1
 800f508:	68a3      	ldr	r3, [r4, #8]
 800f50a:	d014      	beq.n	800f536 <ucdr_serialize_int16_t+0xba>
 800f50c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f510:	701a      	strb	r2, [r3, #0]
 800f512:	68a3      	ldr	r3, [r4, #8]
 800f514:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f518:	705a      	strb	r2, [r3, #1]
 800f51a:	68a2      	ldr	r2, [r4, #8]
 800f51c:	6923      	ldr	r3, [r4, #16]
 800f51e:	3202      	adds	r2, #2
 800f520:	3302      	adds	r3, #2
 800f522:	2102      	movs	r1, #2
 800f524:	60a2      	str	r2, [r4, #8]
 800f526:	6123      	str	r3, [r4, #16]
 800f528:	7561      	strb	r1, [r4, #21]
 800f52a:	7da0      	ldrb	r0, [r4, #22]
 800f52c:	f080 0001 	eor.w	r0, r0, #1
 800f530:	b002      	add	sp, #8
 800f532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f536:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f53a:	801a      	strh	r2, [r3, #0]
 800f53c:	e7ed      	b.n	800f51a <ucdr_serialize_int16_t+0x9e>
 800f53e:	68a2      	ldr	r2, [r4, #8]
 800f540:	6923      	ldr	r3, [r4, #16]
 800f542:	7da0      	ldrb	r0, [r4, #22]
 800f544:	7567      	strb	r7, [r4, #21]
 800f546:	1b92      	subs	r2, r2, r6
 800f548:	1b9b      	subs	r3, r3, r6
 800f54a:	f080 0001 	eor.w	r0, r0, #1
 800f54e:	60a2      	str	r2, [r4, #8]
 800f550:	6123      	str	r3, [r4, #16]
 800f552:	b002      	add	sp, #8
 800f554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f558:	68a3      	ldr	r3, [r4, #8]
 800f55a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f55e:	701a      	strb	r2, [r3, #0]
 800f560:	e7bc      	b.n	800f4dc <ucdr_serialize_int16_t+0x60>
 800f562:	4628      	mov	r0, r5
 800f564:	f10d 0506 	add.w	r5, sp, #6
 800f568:	4629      	mov	r1, r5
 800f56a:	4632      	mov	r2, r6
 800f56c:	f008 ff8d 	bl	801848a <memcpy>
 800f570:	68a0      	ldr	r0, [r4, #8]
 800f572:	4642      	mov	r2, r8
 800f574:	19a9      	adds	r1, r5, r6
 800f576:	f008 ff88 	bl	801848a <memcpy>
 800f57a:	e7af      	b.n	800f4dc <ucdr_serialize_int16_t+0x60>

0800f57c <ucdr_deserialize_int16_t>:
 800f57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f580:	460d      	mov	r5, r1
 800f582:	2102      	movs	r1, #2
 800f584:	4604      	mov	r4, r0
 800f586:	f000 f9f5 	bl	800f974 <ucdr_buffer_alignment>
 800f58a:	4601      	mov	r1, r0
 800f58c:	4620      	mov	r0, r4
 800f58e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f592:	f000 fa33 	bl	800f9fc <ucdr_advance_buffer>
 800f596:	2102      	movs	r1, #2
 800f598:	4620      	mov	r0, r4
 800f59a:	f000 f98b 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800f59e:	bb60      	cbnz	r0, 800f5fa <ucdr_deserialize_int16_t+0x7e>
 800f5a0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f5a4:	42be      	cmp	r6, r7
 800f5a6:	d923      	bls.n	800f5f0 <ucdr_deserialize_int16_t+0x74>
 800f5a8:	6923      	ldr	r3, [r4, #16]
 800f5aa:	60a6      	str	r6, [r4, #8]
 800f5ac:	1bf6      	subs	r6, r6, r7
 800f5ae:	4433      	add	r3, r6
 800f5b0:	f1c6 0902 	rsb	r9, r6, #2
 800f5b4:	6123      	str	r3, [r4, #16]
 800f5b6:	4649      	mov	r1, r9
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f000 f987 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	d034      	beq.n	800f62c <ucdr_deserialize_int16_t+0xb0>
 800f5c2:	7d23      	ldrb	r3, [r4, #20]
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d042      	beq.n	800f64e <ucdr_deserialize_int16_t+0xd2>
 800f5c8:	787b      	ldrb	r3, [r7, #1]
 800f5ca:	702b      	strb	r3, [r5, #0]
 800f5cc:	2e00      	cmp	r6, #0
 800f5ce:	d03a      	beq.n	800f646 <ucdr_deserialize_int16_t+0xca>
 800f5d0:	783b      	ldrb	r3, [r7, #0]
 800f5d2:	706b      	strb	r3, [r5, #1]
 800f5d4:	6923      	ldr	r3, [r4, #16]
 800f5d6:	68a2      	ldr	r2, [r4, #8]
 800f5d8:	7da0      	ldrb	r0, [r4, #22]
 800f5da:	2102      	movs	r1, #2
 800f5dc:	3302      	adds	r3, #2
 800f5de:	444a      	add	r2, r9
 800f5e0:	1b9b      	subs	r3, r3, r6
 800f5e2:	7561      	strb	r1, [r4, #21]
 800f5e4:	60a2      	str	r2, [r4, #8]
 800f5e6:	6123      	str	r3, [r4, #16]
 800f5e8:	f080 0001 	eor.w	r0, r0, #1
 800f5ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5f0:	2102      	movs	r1, #2
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f000 f96a 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f5f8:	b180      	cbz	r0, 800f61c <ucdr_deserialize_int16_t+0xa0>
 800f5fa:	7d23      	ldrb	r3, [r4, #20]
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	68a3      	ldr	r3, [r4, #8]
 800f600:	d011      	beq.n	800f626 <ucdr_deserialize_int16_t+0xaa>
 800f602:	785b      	ldrb	r3, [r3, #1]
 800f604:	702b      	strb	r3, [r5, #0]
 800f606:	68a3      	ldr	r3, [r4, #8]
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	706b      	strb	r3, [r5, #1]
 800f60c:	68a2      	ldr	r2, [r4, #8]
 800f60e:	6923      	ldr	r3, [r4, #16]
 800f610:	3202      	adds	r2, #2
 800f612:	3302      	adds	r3, #2
 800f614:	2102      	movs	r1, #2
 800f616:	60a2      	str	r2, [r4, #8]
 800f618:	6123      	str	r3, [r4, #16]
 800f61a:	7561      	strb	r1, [r4, #21]
 800f61c:	7da0      	ldrb	r0, [r4, #22]
 800f61e:	f080 0001 	eor.w	r0, r0, #1
 800f622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f626:	881b      	ldrh	r3, [r3, #0]
 800f628:	802b      	strh	r3, [r5, #0]
 800f62a:	e7ef      	b.n	800f60c <ucdr_deserialize_int16_t+0x90>
 800f62c:	68a2      	ldr	r2, [r4, #8]
 800f62e:	6923      	ldr	r3, [r4, #16]
 800f630:	7da0      	ldrb	r0, [r4, #22]
 800f632:	f884 8015 	strb.w	r8, [r4, #21]
 800f636:	1b92      	subs	r2, r2, r6
 800f638:	1b9b      	subs	r3, r3, r6
 800f63a:	60a2      	str	r2, [r4, #8]
 800f63c:	6123      	str	r3, [r4, #16]
 800f63e:	f080 0001 	eor.w	r0, r0, #1
 800f642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f646:	68a3      	ldr	r3, [r4, #8]
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	706b      	strb	r3, [r5, #1]
 800f64c:	e7c2      	b.n	800f5d4 <ucdr_deserialize_int16_t+0x58>
 800f64e:	4639      	mov	r1, r7
 800f650:	4632      	mov	r2, r6
 800f652:	4628      	mov	r0, r5
 800f654:	f008 ff19 	bl	801848a <memcpy>
 800f658:	68a1      	ldr	r1, [r4, #8]
 800f65a:	464a      	mov	r2, r9
 800f65c:	19a8      	adds	r0, r5, r6
 800f65e:	f008 ff14 	bl	801848a <memcpy>
 800f662:	e7b7      	b.n	800f5d4 <ucdr_deserialize_int16_t+0x58>

0800f664 <ucdr_serialize_int32_t>:
 800f664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f668:	b082      	sub	sp, #8
 800f66a:	4604      	mov	r4, r0
 800f66c:	9101      	str	r1, [sp, #4]
 800f66e:	2104      	movs	r1, #4
 800f670:	f000 f980 	bl	800f974 <ucdr_buffer_alignment>
 800f674:	4601      	mov	r1, r0
 800f676:	4620      	mov	r0, r4
 800f678:	7d67      	ldrb	r7, [r4, #21]
 800f67a:	f000 f9bf 	bl	800f9fc <ucdr_advance_buffer>
 800f67e:	2104      	movs	r1, #4
 800f680:	4620      	mov	r0, r4
 800f682:	f000 f917 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800f686:	2800      	cmp	r0, #0
 800f688:	d139      	bne.n	800f6fe <ucdr_serialize_int32_t+0x9a>
 800f68a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f68e:	42ab      	cmp	r3, r5
 800f690:	d930      	bls.n	800f6f4 <ucdr_serialize_int32_t+0x90>
 800f692:	1b5e      	subs	r6, r3, r5
 800f694:	60a3      	str	r3, [r4, #8]
 800f696:	6923      	ldr	r3, [r4, #16]
 800f698:	f1c6 0804 	rsb	r8, r6, #4
 800f69c:	4433      	add	r3, r6
 800f69e:	6123      	str	r3, [r4, #16]
 800f6a0:	4641      	mov	r1, r8
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f000 f912 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	d04c      	beq.n	800f746 <ucdr_serialize_int32_t+0xe2>
 800f6ac:	7d23      	ldrb	r3, [r4, #20]
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d063      	beq.n	800f77a <ucdr_serialize_int32_t+0x116>
 800f6b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f6b6:	702b      	strb	r3, [r5, #0]
 800f6b8:	2e00      	cmp	r6, #0
 800f6ba:	d051      	beq.n	800f760 <ucdr_serialize_int32_t+0xfc>
 800f6bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f6c0:	706b      	strb	r3, [r5, #1]
 800f6c2:	2e01      	cmp	r6, #1
 800f6c4:	d050      	beq.n	800f768 <ucdr_serialize_int32_t+0x104>
 800f6c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f6ca:	70ab      	strb	r3, [r5, #2]
 800f6cc:	2e02      	cmp	r6, #2
 800f6ce:	d04f      	beq.n	800f770 <ucdr_serialize_int32_t+0x10c>
 800f6d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f6d4:	70eb      	strb	r3, [r5, #3]
 800f6d6:	6923      	ldr	r3, [r4, #16]
 800f6d8:	68a2      	ldr	r2, [r4, #8]
 800f6da:	7da0      	ldrb	r0, [r4, #22]
 800f6dc:	3304      	adds	r3, #4
 800f6de:	1b9e      	subs	r6, r3, r6
 800f6e0:	4442      	add	r2, r8
 800f6e2:	2304      	movs	r3, #4
 800f6e4:	f080 0001 	eor.w	r0, r0, #1
 800f6e8:	60a2      	str	r2, [r4, #8]
 800f6ea:	6126      	str	r6, [r4, #16]
 800f6ec:	7563      	strb	r3, [r4, #21]
 800f6ee:	b002      	add	sp, #8
 800f6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6f4:	2104      	movs	r1, #4
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f000 f8e8 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f6fc:	b1d0      	cbz	r0, 800f734 <ucdr_serialize_int32_t+0xd0>
 800f6fe:	7d23      	ldrb	r3, [r4, #20]
 800f700:	2b01      	cmp	r3, #1
 800f702:	68a3      	ldr	r3, [r4, #8]
 800f704:	d01c      	beq.n	800f740 <ucdr_serialize_int32_t+0xdc>
 800f706:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f70a:	701a      	strb	r2, [r3, #0]
 800f70c:	68a3      	ldr	r3, [r4, #8]
 800f70e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f712:	705a      	strb	r2, [r3, #1]
 800f714:	68a3      	ldr	r3, [r4, #8]
 800f716:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f71a:	709a      	strb	r2, [r3, #2]
 800f71c:	68a3      	ldr	r3, [r4, #8]
 800f71e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f722:	70da      	strb	r2, [r3, #3]
 800f724:	68a2      	ldr	r2, [r4, #8]
 800f726:	6923      	ldr	r3, [r4, #16]
 800f728:	3204      	adds	r2, #4
 800f72a:	3304      	adds	r3, #4
 800f72c:	2104      	movs	r1, #4
 800f72e:	60a2      	str	r2, [r4, #8]
 800f730:	6123      	str	r3, [r4, #16]
 800f732:	7561      	strb	r1, [r4, #21]
 800f734:	7da0      	ldrb	r0, [r4, #22]
 800f736:	f080 0001 	eor.w	r0, r0, #1
 800f73a:	b002      	add	sp, #8
 800f73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f740:	9a01      	ldr	r2, [sp, #4]
 800f742:	601a      	str	r2, [r3, #0]
 800f744:	e7ee      	b.n	800f724 <ucdr_serialize_int32_t+0xc0>
 800f746:	68a2      	ldr	r2, [r4, #8]
 800f748:	6923      	ldr	r3, [r4, #16]
 800f74a:	7da0      	ldrb	r0, [r4, #22]
 800f74c:	7567      	strb	r7, [r4, #21]
 800f74e:	1b92      	subs	r2, r2, r6
 800f750:	1b9b      	subs	r3, r3, r6
 800f752:	f080 0001 	eor.w	r0, r0, #1
 800f756:	60a2      	str	r2, [r4, #8]
 800f758:	6123      	str	r3, [r4, #16]
 800f75a:	b002      	add	sp, #8
 800f75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f760:	68a3      	ldr	r3, [r4, #8]
 800f762:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f766:	701a      	strb	r2, [r3, #0]
 800f768:	68a3      	ldr	r3, [r4, #8]
 800f76a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f76e:	701a      	strb	r2, [r3, #0]
 800f770:	68a3      	ldr	r3, [r4, #8]
 800f772:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f776:	701a      	strb	r2, [r3, #0]
 800f778:	e7ad      	b.n	800f6d6 <ucdr_serialize_int32_t+0x72>
 800f77a:	4628      	mov	r0, r5
 800f77c:	ad01      	add	r5, sp, #4
 800f77e:	4629      	mov	r1, r5
 800f780:	4632      	mov	r2, r6
 800f782:	f008 fe82 	bl	801848a <memcpy>
 800f786:	68a0      	ldr	r0, [r4, #8]
 800f788:	4642      	mov	r2, r8
 800f78a:	19a9      	adds	r1, r5, r6
 800f78c:	f008 fe7d 	bl	801848a <memcpy>
 800f790:	e7a1      	b.n	800f6d6 <ucdr_serialize_int32_t+0x72>
 800f792:	bf00      	nop

0800f794 <ucdr_deserialize_int32_t>:
 800f794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f798:	460d      	mov	r5, r1
 800f79a:	2104      	movs	r1, #4
 800f79c:	4604      	mov	r4, r0
 800f79e:	f000 f8e9 	bl	800f974 <ucdr_buffer_alignment>
 800f7a2:	4601      	mov	r1, r0
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f7aa:	f000 f927 	bl	800f9fc <ucdr_advance_buffer>
 800f7ae:	2104      	movs	r1, #4
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f000 f87f 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d138      	bne.n	800f82c <ucdr_deserialize_int32_t+0x98>
 800f7ba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f7be:	42b7      	cmp	r7, r6
 800f7c0:	d92f      	bls.n	800f822 <ucdr_deserialize_int32_t+0x8e>
 800f7c2:	6923      	ldr	r3, [r4, #16]
 800f7c4:	60a7      	str	r7, [r4, #8]
 800f7c6:	1bbf      	subs	r7, r7, r6
 800f7c8:	443b      	add	r3, r7
 800f7ca:	f1c7 0904 	rsb	r9, r7, #4
 800f7ce:	6123      	str	r3, [r4, #16]
 800f7d0:	4649      	mov	r1, r9
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f000 f87a 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	d046      	beq.n	800f86a <ucdr_deserialize_int32_t+0xd6>
 800f7dc:	7d23      	ldrb	r3, [r4, #20]
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d05c      	beq.n	800f89c <ucdr_deserialize_int32_t+0x108>
 800f7e2:	78f3      	ldrb	r3, [r6, #3]
 800f7e4:	702b      	strb	r3, [r5, #0]
 800f7e6:	2f00      	cmp	r7, #0
 800f7e8:	d04c      	beq.n	800f884 <ucdr_deserialize_int32_t+0xf0>
 800f7ea:	78b3      	ldrb	r3, [r6, #2]
 800f7ec:	706b      	strb	r3, [r5, #1]
 800f7ee:	2f01      	cmp	r7, #1
 800f7f0:	f105 0302 	add.w	r3, r5, #2
 800f7f4:	d04a      	beq.n	800f88c <ucdr_deserialize_int32_t+0xf8>
 800f7f6:	7873      	ldrb	r3, [r6, #1]
 800f7f8:	70ab      	strb	r3, [r5, #2]
 800f7fa:	2f02      	cmp	r7, #2
 800f7fc:	f105 0303 	add.w	r3, r5, #3
 800f800:	d048      	beq.n	800f894 <ucdr_deserialize_int32_t+0x100>
 800f802:	7833      	ldrb	r3, [r6, #0]
 800f804:	70eb      	strb	r3, [r5, #3]
 800f806:	6923      	ldr	r3, [r4, #16]
 800f808:	68a2      	ldr	r2, [r4, #8]
 800f80a:	7da0      	ldrb	r0, [r4, #22]
 800f80c:	2104      	movs	r1, #4
 800f80e:	3304      	adds	r3, #4
 800f810:	444a      	add	r2, r9
 800f812:	1bdb      	subs	r3, r3, r7
 800f814:	7561      	strb	r1, [r4, #21]
 800f816:	60a2      	str	r2, [r4, #8]
 800f818:	6123      	str	r3, [r4, #16]
 800f81a:	f080 0001 	eor.w	r0, r0, #1
 800f81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f822:	2104      	movs	r1, #4
 800f824:	4620      	mov	r0, r4
 800f826:	f000 f851 	bl	800f8cc <ucdr_check_final_buffer_behavior>
 800f82a:	b1b0      	cbz	r0, 800f85a <ucdr_deserialize_int32_t+0xc6>
 800f82c:	7d23      	ldrb	r3, [r4, #20]
 800f82e:	2b01      	cmp	r3, #1
 800f830:	68a3      	ldr	r3, [r4, #8]
 800f832:	d017      	beq.n	800f864 <ucdr_deserialize_int32_t+0xd0>
 800f834:	78db      	ldrb	r3, [r3, #3]
 800f836:	702b      	strb	r3, [r5, #0]
 800f838:	68a3      	ldr	r3, [r4, #8]
 800f83a:	789b      	ldrb	r3, [r3, #2]
 800f83c:	706b      	strb	r3, [r5, #1]
 800f83e:	68a3      	ldr	r3, [r4, #8]
 800f840:	785b      	ldrb	r3, [r3, #1]
 800f842:	70ab      	strb	r3, [r5, #2]
 800f844:	68a3      	ldr	r3, [r4, #8]
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	70eb      	strb	r3, [r5, #3]
 800f84a:	68a2      	ldr	r2, [r4, #8]
 800f84c:	6923      	ldr	r3, [r4, #16]
 800f84e:	3204      	adds	r2, #4
 800f850:	3304      	adds	r3, #4
 800f852:	2104      	movs	r1, #4
 800f854:	60a2      	str	r2, [r4, #8]
 800f856:	6123      	str	r3, [r4, #16]
 800f858:	7561      	strb	r1, [r4, #21]
 800f85a:	7da0      	ldrb	r0, [r4, #22]
 800f85c:	f080 0001 	eor.w	r0, r0, #1
 800f860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	602b      	str	r3, [r5, #0]
 800f868:	e7ef      	b.n	800f84a <ucdr_deserialize_int32_t+0xb6>
 800f86a:	68a2      	ldr	r2, [r4, #8]
 800f86c:	6923      	ldr	r3, [r4, #16]
 800f86e:	7da0      	ldrb	r0, [r4, #22]
 800f870:	f884 8015 	strb.w	r8, [r4, #21]
 800f874:	1bd2      	subs	r2, r2, r7
 800f876:	1bdb      	subs	r3, r3, r7
 800f878:	60a2      	str	r2, [r4, #8]
 800f87a:	6123      	str	r3, [r4, #16]
 800f87c:	f080 0001 	eor.w	r0, r0, #1
 800f880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f884:	68a3      	ldr	r3, [r4, #8]
 800f886:	789b      	ldrb	r3, [r3, #2]
 800f888:	706b      	strb	r3, [r5, #1]
 800f88a:	1cab      	adds	r3, r5, #2
 800f88c:	68a2      	ldr	r2, [r4, #8]
 800f88e:	7852      	ldrb	r2, [r2, #1]
 800f890:	f803 2b01 	strb.w	r2, [r3], #1
 800f894:	68a2      	ldr	r2, [r4, #8]
 800f896:	7812      	ldrb	r2, [r2, #0]
 800f898:	701a      	strb	r2, [r3, #0]
 800f89a:	e7b4      	b.n	800f806 <ucdr_deserialize_int32_t+0x72>
 800f89c:	4631      	mov	r1, r6
 800f89e:	463a      	mov	r2, r7
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	f008 fdf2 	bl	801848a <memcpy>
 800f8a6:	68a1      	ldr	r1, [r4, #8]
 800f8a8:	464a      	mov	r2, r9
 800f8aa:	19e8      	adds	r0, r5, r7
 800f8ac:	f008 fded 	bl	801848a <memcpy>
 800f8b0:	e7a9      	b.n	800f806 <ucdr_deserialize_int32_t+0x72>
 800f8b2:	bf00      	nop

0800f8b4 <ucdr_check_buffer_available_for>:
 800f8b4:	7d83      	ldrb	r3, [r0, #22]
 800f8b6:	b93b      	cbnz	r3, 800f8c8 <ucdr_check_buffer_available_for+0x14>
 800f8b8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f8bc:	4419      	add	r1, r3
 800f8be:	4288      	cmp	r0, r1
 800f8c0:	bf34      	ite	cc
 800f8c2:	2000      	movcc	r0, #0
 800f8c4:	2001      	movcs	r0, #1
 800f8c6:	4770      	bx	lr
 800f8c8:	2000      	movs	r0, #0
 800f8ca:	4770      	bx	lr

0800f8cc <ucdr_check_final_buffer_behavior>:
 800f8cc:	7d83      	ldrb	r3, [r0, #22]
 800f8ce:	b943      	cbnz	r3, 800f8e2 <ucdr_check_final_buffer_behavior+0x16>
 800f8d0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f8d4:	4291      	cmp	r1, r2
 800f8d6:	b510      	push	{r4, lr}
 800f8d8:	4604      	mov	r4, r0
 800f8da:	d205      	bcs.n	800f8e8 <ucdr_check_final_buffer_behavior+0x1c>
 800f8dc:	2301      	movs	r3, #1
 800f8de:	4618      	mov	r0, r3
 800f8e0:	bd10      	pop	{r4, pc}
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	4770      	bx	lr
 800f8e8:	6982      	ldr	r2, [r0, #24]
 800f8ea:	b13a      	cbz	r2, 800f8fc <ucdr_check_final_buffer_behavior+0x30>
 800f8ec:	69c1      	ldr	r1, [r0, #28]
 800f8ee:	4790      	blx	r2
 800f8f0:	f080 0301 	eor.w	r3, r0, #1
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	75a0      	strb	r0, [r4, #22]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	bd10      	pop	{r4, pc}
 800f8fc:	2001      	movs	r0, #1
 800f8fe:	75a0      	strb	r0, [r4, #22]
 800f900:	e7fa      	b.n	800f8f8 <ucdr_check_final_buffer_behavior+0x2c>
 800f902:	bf00      	nop

0800f904 <ucdr_set_on_full_buffer_callback>:
 800f904:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop

0800f90c <ucdr_init_buffer_origin_offset_endian>:
 800f90c:	b410      	push	{r4}
 800f90e:	9c01      	ldr	r4, [sp, #4]
 800f910:	6001      	str	r1, [r0, #0]
 800f912:	440a      	add	r2, r1
 800f914:	6042      	str	r2, [r0, #4]
 800f916:	190a      	adds	r2, r1, r4
 800f918:	441c      	add	r4, r3
 800f91a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800f91e:	6082      	str	r2, [r0, #8]
 800f920:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f924:	7503      	strb	r3, [r0, #20]
 800f926:	2200      	movs	r2, #0
 800f928:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f92c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f930:	7542      	strb	r2, [r0, #21]
 800f932:	7582      	strb	r2, [r0, #22]
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop

0800f938 <ucdr_init_buffer_origin_offset>:
 800f938:	b510      	push	{r4, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	9c04      	ldr	r4, [sp, #16]
 800f93e:	9400      	str	r4, [sp, #0]
 800f940:	2401      	movs	r4, #1
 800f942:	9401      	str	r4, [sp, #4]
 800f944:	f7ff ffe2 	bl	800f90c <ucdr_init_buffer_origin_offset_endian>
 800f948:	b002      	add	sp, #8
 800f94a:	bd10      	pop	{r4, pc}

0800f94c <ucdr_init_buffer_origin>:
 800f94c:	b510      	push	{r4, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	2400      	movs	r4, #0
 800f952:	9400      	str	r4, [sp, #0]
 800f954:	f7ff fff0 	bl	800f938 <ucdr_init_buffer_origin_offset>
 800f958:	b002      	add	sp, #8
 800f95a:	bd10      	pop	{r4, pc}

0800f95c <ucdr_init_buffer>:
 800f95c:	2300      	movs	r3, #0
 800f95e:	f7ff bff5 	b.w	800f94c <ucdr_init_buffer_origin>
 800f962:	bf00      	nop

0800f964 <ucdr_alignment>:
 800f964:	fbb0 f3f1 	udiv	r3, r0, r1
 800f968:	fb03 0011 	mls	r0, r3, r1, r0
 800f96c:	1a08      	subs	r0, r1, r0
 800f96e:	3901      	subs	r1, #1
 800f970:	4008      	ands	r0, r1
 800f972:	4770      	bx	lr

0800f974 <ucdr_buffer_alignment>:
 800f974:	7d43      	ldrb	r3, [r0, #21]
 800f976:	428b      	cmp	r3, r1
 800f978:	d208      	bcs.n	800f98c <ucdr_buffer_alignment+0x18>
 800f97a:	6900      	ldr	r0, [r0, #16]
 800f97c:	fbb0 f3f1 	udiv	r3, r0, r1
 800f980:	fb01 0013 	mls	r0, r1, r3, r0
 800f984:	1a08      	subs	r0, r1, r0
 800f986:	3901      	subs	r1, #1
 800f988:	4008      	ands	r0, r1
 800f98a:	4770      	bx	lr
 800f98c:	2000      	movs	r0, #0
 800f98e:	4770      	bx	lr

0800f990 <ucdr_align_to>:
 800f990:	b538      	push	{r3, r4, r5, lr}
 800f992:	4604      	mov	r4, r0
 800f994:	460d      	mov	r5, r1
 800f996:	f7ff ffed 	bl	800f974 <ucdr_buffer_alignment>
 800f99a:	68a3      	ldr	r3, [r4, #8]
 800f99c:	6921      	ldr	r1, [r4, #16]
 800f99e:	7565      	strb	r5, [r4, #21]
 800f9a0:	181a      	adds	r2, r3, r0
 800f9a2:	6863      	ldr	r3, [r4, #4]
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	4408      	add	r0, r1
 800f9a8:	bf28      	it	cs
 800f9aa:	4613      	movcs	r3, r2
 800f9ac:	6120      	str	r0, [r4, #16]
 800f9ae:	60a3      	str	r3, [r4, #8]
 800f9b0:	bd38      	pop	{r3, r4, r5, pc}
 800f9b2:	bf00      	nop

0800f9b4 <ucdr_buffer_length>:
 800f9b4:	6882      	ldr	r2, [r0, #8]
 800f9b6:	6800      	ldr	r0, [r0, #0]
 800f9b8:	1a10      	subs	r0, r2, r0
 800f9ba:	4770      	bx	lr

0800f9bc <ucdr_buffer_remaining>:
 800f9bc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f9c0:	1a10      	subs	r0, r2, r0
 800f9c2:	4770      	bx	lr

0800f9c4 <ucdr_check_final_buffer_behavior_array>:
 800f9c4:	b538      	push	{r3, r4, r5, lr}
 800f9c6:	7d83      	ldrb	r3, [r0, #22]
 800f9c8:	b963      	cbnz	r3, 800f9e4 <ucdr_check_final_buffer_behavior_array+0x20>
 800f9ca:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	460d      	mov	r5, r1
 800f9d4:	d308      	bcc.n	800f9e8 <ucdr_check_final_buffer_behavior_array+0x24>
 800f9d6:	b139      	cbz	r1, 800f9e8 <ucdr_check_final_buffer_behavior_array+0x24>
 800f9d8:	6983      	ldr	r3, [r0, #24]
 800f9da:	b163      	cbz	r3, 800f9f6 <ucdr_check_final_buffer_behavior_array+0x32>
 800f9dc:	69c1      	ldr	r1, [r0, #28]
 800f9de:	4798      	blx	r3
 800f9e0:	75a0      	strb	r0, [r4, #22]
 800f9e2:	b108      	cbz	r0, 800f9e8 <ucdr_check_final_buffer_behavior_array+0x24>
 800f9e4:	2000      	movs	r0, #0
 800f9e6:	bd38      	pop	{r3, r4, r5, pc}
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f7ff ffe7 	bl	800f9bc <ucdr_buffer_remaining>
 800f9ee:	42a8      	cmp	r0, r5
 800f9f0:	bf28      	it	cs
 800f9f2:	4628      	movcs	r0, r5
 800f9f4:	bd38      	pop	{r3, r4, r5, pc}
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	7583      	strb	r3, [r0, #22]
 800f9fa:	e7f3      	b.n	800f9e4 <ucdr_check_final_buffer_behavior_array+0x20>

0800f9fc <ucdr_advance_buffer>:
 800f9fc:	b538      	push	{r3, r4, r5, lr}
 800f9fe:	4604      	mov	r4, r0
 800fa00:	460d      	mov	r5, r1
 800fa02:	f7ff ff57 	bl	800f8b4 <ucdr_check_buffer_available_for>
 800fa06:	b178      	cbz	r0, 800fa28 <ucdr_advance_buffer+0x2c>
 800fa08:	6923      	ldr	r3, [r4, #16]
 800fa0a:	68a2      	ldr	r2, [r4, #8]
 800fa0c:	442b      	add	r3, r5
 800fa0e:	6123      	str	r3, [r4, #16]
 800fa10:	2301      	movs	r3, #1
 800fa12:	442a      	add	r2, r5
 800fa14:	7563      	strb	r3, [r4, #21]
 800fa16:	60a2      	str	r2, [r4, #8]
 800fa18:	bd38      	pop	{r3, r4, r5, pc}
 800fa1a:	68a2      	ldr	r2, [r4, #8]
 800fa1c:	6923      	ldr	r3, [r4, #16]
 800fa1e:	4402      	add	r2, r0
 800fa20:	4403      	add	r3, r0
 800fa22:	1a2d      	subs	r5, r5, r0
 800fa24:	60a2      	str	r2, [r4, #8]
 800fa26:	6123      	str	r3, [r4, #16]
 800fa28:	4629      	mov	r1, r5
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	f7ff ffc9 	bl	800f9c4 <ucdr_check_final_buffer_behavior_array>
 800fa32:	2800      	cmp	r0, #0
 800fa34:	d1f1      	bne.n	800fa1a <ucdr_advance_buffer+0x1e>
 800fa36:	2301      	movs	r3, #1
 800fa38:	7563      	strb	r3, [r4, #21]
 800fa3a:	bd38      	pop	{r3, r4, r5, pc}

0800fa3c <uxr_buffer_delete_entity>:
 800fa3c:	b510      	push	{r4, lr}
 800fa3e:	2300      	movs	r3, #0
 800fa40:	b08e      	sub	sp, #56	@ 0x38
 800fa42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fa46:	2303      	movs	r3, #3
 800fa48:	9300      	str	r3, [sp, #0]
 800fa4a:	2204      	movs	r2, #4
 800fa4c:	ab06      	add	r3, sp, #24
 800fa4e:	4604      	mov	r4, r0
 800fa50:	9103      	str	r1, [sp, #12]
 800fa52:	f001 fc71 	bl	8011338 <uxr_prepare_stream_to_write_submessage>
 800fa56:	b918      	cbnz	r0, 800fa60 <uxr_buffer_delete_entity+0x24>
 800fa58:	4604      	mov	r4, r0
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	b00e      	add	sp, #56	@ 0x38
 800fa5e:	bd10      	pop	{r4, pc}
 800fa60:	9902      	ldr	r1, [sp, #8]
 800fa62:	aa05      	add	r2, sp, #20
 800fa64:	4620      	mov	r0, r4
 800fa66:	f001 fd9d 	bl	80115a4 <uxr_init_base_object_request>
 800fa6a:	a905      	add	r1, sp, #20
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	a806      	add	r0, sp, #24
 800fa70:	f003 fc94 	bl	801339c <uxr_serialize_DELETE_Payload>
 800fa74:	4620      	mov	r0, r4
 800fa76:	b00e      	add	sp, #56	@ 0x38
 800fa78:	bd10      	pop	{r4, pc}
 800fa7a:	bf00      	nop

0800fa7c <uxr_common_create_entity>:
 800fa7c:	b510      	push	{r4, lr}
 800fa7e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fa82:	b08c      	sub	sp, #48	@ 0x30
 800fa84:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fa88:	f1bc 0f01 	cmp.w	ip, #1
 800fa8c:	bf0c      	ite	eq
 800fa8e:	f003 0201 	andeq.w	r2, r3, #1
 800fa92:	2200      	movne	r2, #0
 800fa94:	330e      	adds	r3, #14
 800fa96:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800fa9a:	9101      	str	r1, [sp, #4]
 800fa9c:	441a      	add	r2, r3
 800fa9e:	2301      	movs	r3, #1
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	9903      	ldr	r1, [sp, #12]
 800faa4:	ab04      	add	r3, sp, #16
 800faa6:	b292      	uxth	r2, r2
 800faa8:	4604      	mov	r4, r0
 800faaa:	f001 fc45 	bl	8011338 <uxr_prepare_stream_to_write_submessage>
 800faae:	b918      	cbnz	r0, 800fab8 <uxr_common_create_entity+0x3c>
 800fab0:	4604      	mov	r4, r0
 800fab2:	4620      	mov	r0, r4
 800fab4:	b00c      	add	sp, #48	@ 0x30
 800fab6:	bd10      	pop	{r4, pc}
 800fab8:	9902      	ldr	r1, [sp, #8]
 800faba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fabc:	4620      	mov	r0, r4
 800fabe:	f001 fd71 	bl	80115a4 <uxr_init_base_object_request>
 800fac2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fac4:	4604      	mov	r4, r0
 800fac6:	a804      	add	r0, sp, #16
 800fac8:	f003 fbb0 	bl	801322c <uxr_serialize_CREATE_Payload>
 800facc:	4620      	mov	r0, r4
 800face:	b00c      	add	sp, #48	@ 0x30
 800fad0:	bd10      	pop	{r4, pc}
 800fad2:	bf00      	nop

0800fad4 <uxr_buffer_create_participant_bin>:
 800fad4:	b570      	push	{r4, r5, r6, lr}
 800fad6:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800fada:	ac11      	add	r4, sp, #68	@ 0x44
 800fadc:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800fae0:	2303      	movs	r3, #3
 800fae2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fae6:	7223      	strb	r3, [r4, #8]
 800fae8:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800faea:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800faee:	2201      	movs	r2, #1
 800faf0:	2100      	movs	r1, #0
 800faf2:	4605      	mov	r5, r0
 800faf4:	7122      	strb	r2, [r4, #4]
 800faf6:	f88d 1014 	strb.w	r1, [sp, #20]
 800fafa:	b1cb      	cbz	r3, 800fb30 <uxr_buffer_create_participant_bin+0x5c>
 800fafc:	f88d 201c 	strb.w	r2, [sp, #28]
 800fb00:	9308      	str	r3, [sp, #32]
 800fb02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb06:	a915      	add	r1, sp, #84	@ 0x54
 800fb08:	a809      	add	r0, sp, #36	@ 0x24
 800fb0a:	f7ff ff27 	bl	800f95c <ucdr_init_buffer>
 800fb0e:	a905      	add	r1, sp, #20
 800fb10:	a809      	add	r0, sp, #36	@ 0x24
 800fb12:	f002 ff6d 	bl	80129f0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fb16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb18:	9600      	str	r6, [sp, #0]
 800fb1a:	9401      	str	r4, [sp, #4]
 800fb1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fb20:	60e3      	str	r3, [r4, #12]
 800fb22:	4628      	mov	r0, r5
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	f7ff ffa9 	bl	800fa7c <uxr_common_create_entity>
 800fb2a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800fb2e:	bd70      	pop	{r4, r5, r6, pc}
 800fb30:	f88d 301c 	strb.w	r3, [sp, #28]
 800fb34:	e7e5      	b.n	800fb02 <uxr_buffer_create_participant_bin+0x2e>
 800fb36:	bf00      	nop

0800fb38 <uxr_buffer_create_topic_bin>:
 800fb38:	b570      	push	{r4, r5, r6, lr}
 800fb3a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800fb3e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fb42:	9105      	str	r1, [sp, #20]
 800fb44:	4605      	mov	r5, r0
 800fb46:	a997      	add	r1, sp, #604	@ 0x25c
 800fb48:	4618      	mov	r0, r3
 800fb4a:	2302      	movs	r3, #2
 800fb4c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800fb50:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800fb54:	f000 fa58 	bl	8010008 <uxr_object_id_to_raw>
 800fb58:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800fb5a:	9306      	str	r3, [sp, #24]
 800fb5c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800fb5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb60:	2303      	movs	r3, #3
 800fb62:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fb66:	2301      	movs	r3, #1
 800fb68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb6c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fb70:	a917      	add	r1, sp, #92	@ 0x5c
 800fb72:	2300      	movs	r3, #0
 800fb74:	a80b      	add	r0, sp, #44	@ 0x2c
 800fb76:	f88d 301c 	strb.w	r3, [sp, #28]
 800fb7a:	f7ff feef 	bl	800f95c <ucdr_init_buffer>
 800fb7e:	a906      	add	r1, sp, #24
 800fb80:	a80b      	add	r0, sp, #44	@ 0x2c
 800fb82:	f002 ff57 	bl	8012a34 <uxr_serialize_OBJK_Topic_Binary>
 800fb86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb88:	9316      	str	r3, [sp, #88]	@ 0x58
 800fb8a:	ac13      	add	r4, sp, #76	@ 0x4c
 800fb8c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fb90:	9600      	str	r6, [sp, #0]
 800fb92:	9401      	str	r4, [sp, #4]
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	4628      	mov	r0, r5
 800fb98:	f7ff ff70 	bl	800fa7c <uxr_common_create_entity>
 800fb9c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800fba0:	bd70      	pop	{r4, r5, r6, pc}
 800fba2:	bf00      	nop

0800fba4 <uxr_buffer_create_publisher_bin>:
 800fba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fba6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800fbaa:	4605      	mov	r5, r0
 800fbac:	9105      	str	r1, [sp, #20]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	2603      	movs	r6, #3
 800fbb2:	a992      	add	r1, sp, #584	@ 0x248
 800fbb4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fbb8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800fbbc:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800fbc0:	f000 fa22 	bl	8010008 <uxr_object_id_to_raw>
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbca:	a912      	add	r1, sp, #72	@ 0x48
 800fbcc:	a806      	add	r0, sp, #24
 800fbce:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fbd2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fbd6:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800fbda:	f7ff febf 	bl	800f95c <ucdr_init_buffer>
 800fbde:	a993      	add	r1, sp, #588	@ 0x24c
 800fbe0:	a806      	add	r0, sp, #24
 800fbe2:	f002 ffdb 	bl	8012b9c <uxr_serialize_OBJK_Publisher_Binary>
 800fbe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbe8:	9311      	str	r3, [sp, #68]	@ 0x44
 800fbea:	ac0e      	add	r4, sp, #56	@ 0x38
 800fbec:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fbf0:	9700      	str	r7, [sp, #0]
 800fbf2:	9401      	str	r4, [sp, #4]
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	f7ff ff40 	bl	800fa7c <uxr_common_create_entity>
 800fbfc:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800fc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc02:	bf00      	nop

0800fc04 <uxr_buffer_create_subscriber_bin>:
 800fc04:	b570      	push	{r4, r5, r6, lr}
 800fc06:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800fc0a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc0e:	9105      	str	r1, [sp, #20]
 800fc10:	4605      	mov	r5, r0
 800fc12:	a992      	add	r1, sp, #584	@ 0x248
 800fc14:	4618      	mov	r0, r3
 800fc16:	2304      	movs	r3, #4
 800fc18:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800fc1c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800fc20:	f000 f9f2 	bl	8010008 <uxr_object_id_to_raw>
 800fc24:	2300      	movs	r3, #0
 800fc26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc2a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fc2e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fc32:	a912      	add	r1, sp, #72	@ 0x48
 800fc34:	2303      	movs	r3, #3
 800fc36:	a806      	add	r0, sp, #24
 800fc38:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800fc3c:	f7ff fe8e 	bl	800f95c <ucdr_init_buffer>
 800fc40:	a993      	add	r1, sp, #588	@ 0x24c
 800fc42:	a806      	add	r0, sp, #24
 800fc44:	f003 f85a 	bl	8012cfc <uxr_serialize_OBJK_Subscriber_Binary>
 800fc48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc4a:	9311      	str	r3, [sp, #68]	@ 0x44
 800fc4c:	ac0e      	add	r4, sp, #56	@ 0x38
 800fc4e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fc52:	9600      	str	r6, [sp, #0]
 800fc54:	9401      	str	r4, [sp, #4]
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	4628      	mov	r0, r5
 800fc5a:	f7ff ff0f 	bl	800fa7c <uxr_common_create_entity>
 800fc5e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800fc62:	bd70      	pop	{r4, r5, r6, pc}

0800fc64 <uxr_buffer_create_datawriter_bin>:
 800fc64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc68:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800fc6c:	ac1d      	add	r4, sp, #116	@ 0x74
 800fc6e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc72:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800fc76:	9105      	str	r1, [sp, #20]
 800fc78:	4606      	mov	r6, r0
 800fc7a:	a9a1      	add	r1, sp, #644	@ 0x284
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	2305      	movs	r3, #5
 800fc80:	7123      	strb	r3, [r4, #4]
 800fc82:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800fc86:	2703      	movs	r7, #3
 800fc88:	f000 f9be 	bl	8010008 <uxr_object_id_to_raw>
 800fc8c:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800fc8e:	7227      	strb	r7, [r4, #8]
 800fc90:	a90e      	add	r1, sp, #56	@ 0x38
 800fc92:	f000 f9b9 	bl	8010008 <uxr_object_id_to_raw>
 800fc96:	2300      	movs	r3, #0
 800fc98:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800fc9c:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800fca0:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fca4:	3d00      	subs	r5, #0
 800fca6:	bf18      	it	ne
 800fca8:	2501      	movne	r5, #1
 800fcaa:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800fcae:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800fcb2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fcb6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fcba:	2301      	movs	r3, #1
 800fcbc:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800fcc0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800fcc4:	bb8a      	cbnz	r2, 800fd2a <uxr_buffer_create_datawriter_bin+0xc6>
 800fcc6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fcca:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800fcce:	f04f 0c13 	mov.w	ip, #19
 800fcd2:	250b      	movs	r5, #11
 800fcd4:	2221      	movs	r2, #33	@ 0x21
 800fcd6:	2111      	movs	r1, #17
 800fcd8:	2009      	movs	r0, #9
 800fcda:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800fcde:	b923      	cbnz	r3, 800fcea <uxr_buffer_create_datawriter_bin+0x86>
 800fce0:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800fce4:	4672      	mov	r2, lr
 800fce6:	4661      	mov	r1, ip
 800fce8:	4628      	mov	r0, r5
 800fcea:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d025      	beq.n	800fd3e <uxr_buffer_create_datawriter_bin+0xda>
 800fcf2:	2b03      	cmp	r3, #3
 800fcf4:	d029      	beq.n	800fd4a <uxr_buffer_create_datawriter_bin+0xe6>
 800fcf6:	b32b      	cbz	r3, 800fd44 <uxr_buffer_create_datawriter_bin+0xe0>
 800fcf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fcfc:	a921      	add	r1, sp, #132	@ 0x84
 800fcfe:	a806      	add	r0, sp, #24
 800fd00:	f7ff fe2c 	bl	800f95c <ucdr_init_buffer>
 800fd04:	a90e      	add	r1, sp, #56	@ 0x38
 800fd06:	a806      	add	r0, sp, #24
 800fd08:	f003 f8aa 	bl	8012e60 <uxr_serialize_OBJK_DataWriter_Binary>
 800fd0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd0e:	f8cd 8000 	str.w	r8, [sp]
 800fd12:	9401      	str	r4, [sp, #4]
 800fd14:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd18:	60e3      	str	r3, [r4, #12]
 800fd1a:	4630      	mov	r0, r6
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	f7ff fead 	bl	800fa7c <uxr_common_create_entity>
 800fd22:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800fd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd2a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800fd2e:	f04f 0c12 	mov.w	ip, #18
 800fd32:	250a      	movs	r5, #10
 800fd34:	2220      	movs	r2, #32
 800fd36:	2110      	movs	r1, #16
 800fd38:	2008      	movs	r0, #8
 800fd3a:	2702      	movs	r7, #2
 800fd3c:	e7cd      	b.n	800fcda <uxr_buffer_create_datawriter_bin+0x76>
 800fd3e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800fd42:	e7d9      	b.n	800fcf8 <uxr_buffer_create_datawriter_bin+0x94>
 800fd44:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800fd48:	e7d6      	b.n	800fcf8 <uxr_buffer_create_datawriter_bin+0x94>
 800fd4a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800fd4e:	e7d3      	b.n	800fcf8 <uxr_buffer_create_datawriter_bin+0x94>

0800fd50 <uxr_buffer_create_datareader_bin>:
 800fd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd54:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800fd58:	ac1f      	add	r4, sp, #124	@ 0x7c
 800fd5a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fd5e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800fd62:	9105      	str	r1, [sp, #20]
 800fd64:	4606      	mov	r6, r0
 800fd66:	a9a3      	add	r1, sp, #652	@ 0x28c
 800fd68:	4618      	mov	r0, r3
 800fd6a:	2306      	movs	r3, #6
 800fd6c:	7123      	strb	r3, [r4, #4]
 800fd6e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800fd72:	2703      	movs	r7, #3
 800fd74:	f000 f948 	bl	8010008 <uxr_object_id_to_raw>
 800fd78:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800fd7a:	7227      	strb	r7, [r4, #8]
 800fd7c:	a90e      	add	r1, sp, #56	@ 0x38
 800fd7e:	f000 f943 	bl	8010008 <uxr_object_id_to_raw>
 800fd82:	2300      	movs	r3, #0
 800fd84:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800fd88:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800fd8c:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800fd90:	3d00      	subs	r5, #0
 800fd92:	bf18      	it	ne
 800fd94:	2501      	movne	r5, #1
 800fd96:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fd9a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800fd9e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800fda2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fda6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fdaa:	2301      	movs	r3, #1
 800fdac:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800fdb0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800fdb4:	bb8a      	cbnz	r2, 800fe1a <uxr_buffer_create_datareader_bin+0xca>
 800fdb6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fdba:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800fdbe:	f04f 0c13 	mov.w	ip, #19
 800fdc2:	250b      	movs	r5, #11
 800fdc4:	2221      	movs	r2, #33	@ 0x21
 800fdc6:	2111      	movs	r1, #17
 800fdc8:	2009      	movs	r0, #9
 800fdca:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800fdce:	b923      	cbnz	r3, 800fdda <uxr_buffer_create_datareader_bin+0x8a>
 800fdd0:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800fdd4:	4672      	mov	r2, lr
 800fdd6:	4661      	mov	r1, ip
 800fdd8:	4628      	mov	r0, r5
 800fdda:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d025      	beq.n	800fe2e <uxr_buffer_create_datareader_bin+0xde>
 800fde2:	2b03      	cmp	r3, #3
 800fde4:	d029      	beq.n	800fe3a <uxr_buffer_create_datareader_bin+0xea>
 800fde6:	b32b      	cbz	r3, 800fe34 <uxr_buffer_create_datareader_bin+0xe4>
 800fde8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdec:	a923      	add	r1, sp, #140	@ 0x8c
 800fdee:	a806      	add	r0, sp, #24
 800fdf0:	f7ff fdb4 	bl	800f95c <ucdr_init_buffer>
 800fdf4:	a90e      	add	r1, sp, #56	@ 0x38
 800fdf6:	a806      	add	r0, sp, #24
 800fdf8:	f002 fff6 	bl	8012de8 <uxr_serialize_OBJK_DataReader_Binary>
 800fdfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdfe:	f8cd 8000 	str.w	r8, [sp]
 800fe02:	9401      	str	r4, [sp, #4]
 800fe04:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fe08:	60e3      	str	r3, [r4, #12]
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	f7ff fe35 	bl	800fa7c <uxr_common_create_entity>
 800fe12:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800fe16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe1a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800fe1e:	f04f 0c12 	mov.w	ip, #18
 800fe22:	250a      	movs	r5, #10
 800fe24:	2220      	movs	r2, #32
 800fe26:	2110      	movs	r1, #16
 800fe28:	2008      	movs	r0, #8
 800fe2a:	2702      	movs	r7, #2
 800fe2c:	e7cd      	b.n	800fdca <uxr_buffer_create_datareader_bin+0x7a>
 800fe2e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800fe32:	e7d9      	b.n	800fde8 <uxr_buffer_create_datareader_bin+0x98>
 800fe34:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800fe38:	e7d6      	b.n	800fde8 <uxr_buffer_create_datareader_bin+0x98>
 800fe3a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800fe3e:	e7d3      	b.n	800fde8 <uxr_buffer_create_datareader_bin+0x98>

0800fe40 <get_custom_error>:
 800fe40:	4b01      	ldr	r3, [pc, #4]	@ (800fe48 <get_custom_error+0x8>)
 800fe42:	7818      	ldrb	r0, [r3, #0]
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop
 800fe48:	20010e74 	.word	0x20010e74

0800fe4c <recv_custom_msg>:
 800fe4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe50:	4693      	mov	fp, r2
 800fe52:	b089      	sub	sp, #36	@ 0x24
 800fe54:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800fe58:	9305      	str	r3, [sp, #20]
 800fe5a:	468a      	mov	sl, r1
 800fe5c:	2100      	movs	r1, #0
 800fe5e:	4604      	mov	r4, r0
 800fe60:	f88d 101e 	strb.w	r1, [sp, #30]
 800fe64:	b322      	cbz	r2, 800feb0 <recv_custom_msg+0x64>
 800fe66:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800fe6a:	f10d 081f 	add.w	r8, sp, #31
 800fe6e:	af05      	add	r7, sp, #20
 800fe70:	f10d 061e 	add.w	r6, sp, #30
 800fe74:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800fe78:	e002      	b.n	800fe80 <recv_custom_msg+0x34>
 800fe7a:	9b05      	ldr	r3, [sp, #20]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	dd0f      	ble.n	800fea0 <recv_custom_msg+0x54>
 800fe80:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800fe84:	4623      	mov	r3, r4
 800fe86:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800fe8a:	e9cd 5600 	strd	r5, r6, [sp]
 800fe8e:	4622      	mov	r2, r4
 800fe90:	4648      	mov	r0, r9
 800fe92:	f001 fdb5 	bl	8011a00 <uxr_read_framed_msg>
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d0ef      	beq.n	800fe7a <recv_custom_msg+0x2e>
 800fe9a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fe9e:	b1b3      	cbz	r3, 800fece <recv_custom_msg+0x82>
 800fea0:	4b0f      	ldr	r3, [pc, #60]	@ (800fee0 <recv_custom_msg+0x94>)
 800fea2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800fea6:	701a      	strb	r2, [r3, #0]
 800fea8:	2000      	movs	r0, #0
 800feaa:	b009      	add	sp, #36	@ 0x24
 800feac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb0:	f10d 021f 	add.w	r2, sp, #31
 800feb4:	9200      	str	r2, [sp, #0]
 800feb6:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800feba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800febe:	4601      	mov	r1, r0
 800fec0:	47a8      	blx	r5
 800fec2:	2800      	cmp	r0, #0
 800fec4:	d0ec      	beq.n	800fea0 <recv_custom_msg+0x54>
 800fec6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d1e8      	bne.n	800fea0 <recv_custom_msg+0x54>
 800fece:	f8cb 0000 	str.w	r0, [fp]
 800fed2:	2001      	movs	r0, #1
 800fed4:	f8ca 4000 	str.w	r4, [sl]
 800fed8:	b009      	add	sp, #36	@ 0x24
 800feda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fede:	bf00      	nop
 800fee0:	20010e74 	.word	0x20010e74

0800fee4 <send_custom_msg>:
 800fee4:	b530      	push	{r4, r5, lr}
 800fee6:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800feea:	b087      	sub	sp, #28
 800feec:	4615      	mov	r5, r2
 800feee:	b974      	cbnz	r4, 800ff0e <send_custom_msg+0x2a>
 800fef0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800fef4:	f10d 0317 	add.w	r3, sp, #23
 800fef8:	47a0      	blx	r4
 800fefa:	b108      	cbz	r0, 800ff00 <send_custom_msg+0x1c>
 800fefc:	42a8      	cmp	r0, r5
 800fefe:	d015      	beq.n	800ff2c <send_custom_msg+0x48>
 800ff00:	4b0c      	ldr	r3, [pc, #48]	@ (800ff34 <send_custom_msg+0x50>)
 800ff02:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ff06:	701a      	strb	r2, [r3, #0]
 800ff08:	2000      	movs	r0, #0
 800ff0a:	b007      	add	sp, #28
 800ff0c:	bd30      	pop	{r4, r5, pc}
 800ff0e:	460b      	mov	r3, r1
 800ff10:	2200      	movs	r2, #0
 800ff12:	f10d 0117 	add.w	r1, sp, #23
 800ff16:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800ff20:	9500      	str	r5, [sp, #0]
 800ff22:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800ff26:	f001 fb73 	bl	8011610 <uxr_write_framed_msg>
 800ff2a:	e7e6      	b.n	800fefa <send_custom_msg+0x16>
 800ff2c:	2001      	movs	r0, #1
 800ff2e:	b007      	add	sp, #28
 800ff30:	bd30      	pop	{r4, r5, pc}
 800ff32:	bf00      	nop
 800ff34:	20010e74 	.word	0x20010e74

0800ff38 <uxr_set_custom_transport_callbacks>:
 800ff38:	b410      	push	{r4}
 800ff3a:	9c01      	ldr	r4, [sp, #4]
 800ff3c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800ff40:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800ff44:	9b02      	ldr	r3, [sp, #8]
 800ff46:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800ff4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff4e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800ff52:	4770      	bx	lr

0800ff54 <uxr_init_custom_transport>:
 800ff54:	b538      	push	{r3, r4, r5, lr}
 800ff56:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800ff5a:	b303      	cbz	r3, 800ff9e <uxr_init_custom_transport+0x4a>
 800ff5c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800ff60:	4604      	mov	r4, r0
 800ff62:	b1e2      	cbz	r2, 800ff9e <uxr_init_custom_transport+0x4a>
 800ff64:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800ff68:	b1ca      	cbz	r2, 800ff9e <uxr_init_custom_transport+0x4a>
 800ff6a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800ff6e:	b1b2      	cbz	r2, 800ff9e <uxr_init_custom_transport+0x4a>
 800ff70:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800ff74:	4798      	blx	r3
 800ff76:	4605      	mov	r5, r0
 800ff78:	b188      	cbz	r0, 800ff9e <uxr_init_custom_transport+0x4a>
 800ff7a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800ff7e:	b98b      	cbnz	r3, 800ffa4 <uxr_init_custom_transport+0x50>
 800ff80:	490b      	ldr	r1, [pc, #44]	@ (800ffb0 <uxr_init_custom_transport+0x5c>)
 800ff82:	4b0c      	ldr	r3, [pc, #48]	@ (800ffb4 <uxr_init_custom_transport+0x60>)
 800ff84:	4a0c      	ldr	r2, [pc, #48]	@ (800ffb8 <uxr_init_custom_transport+0x64>)
 800ff86:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800ff8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ff8e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800ff92:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800ff96:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	bd38      	pop	{r3, r4, r5, pc}
 800ff9e:	2500      	movs	r5, #0
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	bd38      	pop	{r3, r4, r5, pc}
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800ffaa:	f001 fb2b 	bl	8011604 <uxr_init_framing_io>
 800ffae:	e7e7      	b.n	800ff80 <uxr_init_custom_transport+0x2c>
 800ffb0:	0800fee5 	.word	0x0800fee5
 800ffb4:	0800fe4d 	.word	0x0800fe4d
 800ffb8:	0800fe41 	.word	0x0800fe41

0800ffbc <uxr_close_custom_transport>:
 800ffbc:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800ffc0:	4718      	bx	r3
 800ffc2:	bf00      	nop

0800ffc4 <uxr_object_id>:
 800ffc4:	b082      	sub	sp, #8
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	f88d 1006 	strb.w	r1, [sp, #6]
 800ffcc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ffd0:	f360 030f 	bfi	r3, r0, #0, #16
 800ffd4:	f362 431f 	bfi	r3, r2, #16, #16
 800ffd8:	4618      	mov	r0, r3
 800ffda:	b002      	add	sp, #8
 800ffdc:	4770      	bx	lr
 800ffde:	bf00      	nop

0800ffe0 <uxr_object_id_from_raw>:
 800ffe0:	7843      	ldrb	r3, [r0, #1]
 800ffe2:	7801      	ldrb	r1, [r0, #0]
 800ffe4:	b082      	sub	sp, #8
 800ffe6:	f003 020f 	and.w	r2, r3, #15
 800ffea:	f88d 2006 	strb.w	r2, [sp, #6]
 800ffee:	091b      	lsrs	r3, r3, #4
 800fff0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fff4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800fff8:	2000      	movs	r0, #0
 800fffa:	f363 000f 	bfi	r0, r3, #0, #16
 800fffe:	f362 401f 	bfi	r0, r2, #16, #16
 8010002:	b002      	add	sp, #8
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop

08010008 <uxr_object_id_to_raw>:
 8010008:	4602      	mov	r2, r0
 801000a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801000e:	b082      	sub	sp, #8
 8010010:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010014:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010018:	f881 c000 	strb.w	ip, [r1]
 801001c:	7048      	strb	r0, [r1, #1]
 801001e:	b002      	add	sp, #8
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop

08010024 <uxr_ping_agent_session>:
 8010024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010028:	4617      	mov	r7, r2
 801002a:	b091      	sub	sp, #68	@ 0x44
 801002c:	2210      	movs	r2, #16
 801002e:	4606      	mov	r6, r0
 8010030:	4688      	mov	r8, r1
 8010032:	a808      	add	r0, sp, #32
 8010034:	eb0d 0102 	add.w	r1, sp, r2
 8010038:	f7ff fc90 	bl	800f95c <ucdr_init_buffer>
 801003c:	4b1e      	ldr	r3, [pc, #120]	@ (80100b8 <uxr_ping_agent_session+0x94>)
 801003e:	2500      	movs	r5, #0
 8010040:	881b      	ldrh	r3, [r3, #0]
 8010042:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010046:	9500      	str	r5, [sp, #0]
 8010048:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 801004c:	2402      	movs	r4, #2
 801004e:	7831      	ldrb	r1, [r6, #0]
 8010050:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010054:	462a      	mov	r2, r5
 8010056:	a808      	add	r0, sp, #32
 8010058:	462b      	mov	r3, r5
 801005a:	9403      	str	r4, [sp, #12]
 801005c:	f002 fa96 	bl	801258c <uxr_serialize_message_header>
 8010060:	4621      	mov	r1, r4
 8010062:	462b      	mov	r3, r5
 8010064:	2208      	movs	r2, #8
 8010066:	a808      	add	r0, sp, #32
 8010068:	f002 f896 	bl	8012198 <uxr_buffer_submessage_header>
 801006c:	a902      	add	r1, sp, #8
 801006e:	4604      	mov	r4, r0
 8010070:	a808      	add	r0, sp, #32
 8010072:	f003 f96b 	bl	801334c <uxr_serialize_GET_INFO_Payload>
 8010076:	b104      	cbz	r4, 801007a <uxr_ping_agent_session+0x56>
 8010078:	b918      	cbnz	r0, 8010082 <uxr_ping_agent_session+0x5e>
 801007a:	2000      	movs	r0, #0
 801007c:	b011      	add	sp, #68	@ 0x44
 801007e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010082:	a808      	add	r0, sp, #32
 8010084:	f7ff fc96 	bl	800f9b4 <ucdr_buffer_length>
 8010088:	4681      	mov	r9, r0
 801008a:	e00d      	b.n	80100a8 <uxr_ping_agent_session+0x84>
 801008c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 801008e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010092:	47a0      	blx	r4
 8010094:	4641      	mov	r1, r8
 8010096:	4604      	mov	r4, r0
 8010098:	4630      	mov	r0, r6
 801009a:	f000 ff4d 	bl	8010f38 <uxr_run_session_until_pong>
 801009e:	ea04 0c00 	and.w	ip, r4, r0
 80100a2:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 80100a6:	d1e9      	bne.n	801007c <uxr_ping_agent_session+0x58>
 80100a8:	42af      	cmp	r7, r5
 80100aa:	464a      	mov	r2, r9
 80100ac:	a904      	add	r1, sp, #16
 80100ae:	f105 0501 	add.w	r5, r5, #1
 80100b2:	d1eb      	bne.n	801008c <uxr_ping_agent_session+0x68>
 80100b4:	e7e1      	b.n	801007a <uxr_ping_agent_session+0x56>
 80100b6:	bf00      	nop
 80100b8:	080192e4 	.word	0x080192e4

080100bc <uxr_ping_agent_attempts>:
 80100bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c0:	ed2d 8b02 	vpush	{d8}
 80100c4:	b0d1      	sub	sp, #324	@ 0x144
 80100c6:	4606      	mov	r6, r0
 80100c8:	4688      	mov	r8, r1
 80100ca:	a80e      	add	r0, sp, #56	@ 0x38
 80100cc:	a90a      	add	r1, sp, #40	@ 0x28
 80100ce:	4615      	mov	r5, r2
 80100d0:	2210      	movs	r2, #16
 80100d2:	f7ff fc43 	bl	800f95c <ucdr_init_buffer>
 80100d6:	4b54      	ldr	r3, [pc, #336]	@ (8010228 <uxr_ping_agent_attempts+0x16c>)
 80100d8:	881b      	ldrh	r3, [r3, #0]
 80100da:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
 80100de:	2300      	movs	r3, #0
 80100e0:	2402      	movs	r4, #2
 80100e2:	461a      	mov	r2, r3
 80100e4:	9300      	str	r3, [sp, #0]
 80100e6:	2180      	movs	r1, #128	@ 0x80
 80100e8:	a80e      	add	r0, sp, #56	@ 0x38
 80100ea:	f44f 6720 	mov.w	r7, #2560	@ 0xa00
 80100ee:	941f      	str	r4, [sp, #124]	@ 0x7c
 80100f0:	f8ad 7078 	strh.w	r7, [sp, #120]	@ 0x78
 80100f4:	f002 fa4a 	bl	801258c <uxr_serialize_message_header>
 80100f8:	4621      	mov	r1, r4
 80100fa:	2300      	movs	r3, #0
 80100fc:	2208      	movs	r2, #8
 80100fe:	a80e      	add	r0, sp, #56	@ 0x38
 8010100:	f002 f84a 	bl	8012198 <uxr_buffer_submessage_header>
 8010104:	a91e      	add	r1, sp, #120	@ 0x78
 8010106:	4604      	mov	r4, r0
 8010108:	a80e      	add	r0, sp, #56	@ 0x38
 801010a:	f003 f91f 	bl	801334c <uxr_serialize_GET_INFO_Payload>
 801010e:	b104      	cbz	r4, 8010112 <uxr_ping_agent_attempts+0x56>
 8010110:	b938      	cbnz	r0, 8010122 <uxr_ping_agent_attempts+0x66>
 8010112:	f04f 0b00 	mov.w	fp, #0
 8010116:	4658      	mov	r0, fp
 8010118:	b051      	add	sp, #324	@ 0x144
 801011a:	ecbd 8b02 	vpop	{d8}
 801011e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010122:	a80e      	add	r0, sp, #56	@ 0x38
 8010124:	f7ff fc46 	bl	800f9b4 <ucdr_buffer_length>
 8010128:	1c6b      	adds	r3, r5, #1
 801012a:	ee08 0a10 	vmov	s16, r0
 801012e:	9303      	str	r3, [sp, #12]
 8010130:	f04f 0901 	mov.w	r9, #1
 8010134:	9b03      	ldr	r3, [sp, #12]
 8010136:	454b      	cmp	r3, r9
 8010138:	d0eb      	beq.n	8010112 <uxr_ping_agent_attempts+0x56>
 801013a:	e9d6 0300 	ldrd	r0, r3, [r6]
 801013e:	ee18 2a10 	vmov	r2, s16
 8010142:	a90a      	add	r1, sp, #40	@ 0x28
 8010144:	4798      	blx	r3
 8010146:	f002 f86d 	bl	8012224 <uxr_millis>
 801014a:	4645      	mov	r5, r8
 801014c:	4604      	mov	r4, r0
 801014e:	f04f 0a00 	mov.w	sl, #0
 8010152:	68b7      	ldr	r7, [r6, #8]
 8010154:	6830      	ldr	r0, [r6, #0]
 8010156:	f8cd a018 	str.w	sl, [sp, #24]
 801015a:	4643      	mov	r3, r8
 801015c:	aa07      	add	r2, sp, #28
 801015e:	a906      	add	r1, sp, #24
 8010160:	47b8      	blx	r7
 8010162:	4607      	mov	r7, r0
 8010164:	b958      	cbnz	r0, 801017e <uxr_ping_agent_attempts+0xc2>
 8010166:	f002 f85d 	bl	8012224 <uxr_millis>
 801016a:	1b00      	subs	r0, r0, r4
 801016c:	1a2d      	subs	r5, r5, r0
 801016e:	f002 f859 	bl	8012224 <uxr_millis>
 8010172:	2d00      	cmp	r5, #0
 8010174:	4604      	mov	r4, r0
 8010176:	dcec      	bgt.n	8010152 <uxr_ping_agent_attempts+0x96>
 8010178:	f109 0901 	add.w	r9, r9, #1
 801017c:	e7da      	b.n	8010134 <uxr_ping_agent_attempts+0x78>
 801017e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8010182:	a816      	add	r0, sp, #88	@ 0x58
 8010184:	f7ff fbea 	bl	800f95c <ucdr_init_buffer>
 8010188:	ab05      	add	r3, sp, #20
 801018a:	f10d 0211 	add.w	r2, sp, #17
 801018e:	a916      	add	r1, sp, #88	@ 0x58
 8010190:	a808      	add	r0, sp, #32
 8010192:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8010196:	f001 f9bb 	bl	8011510 <uxr_read_session_header>
 801019a:	22c8      	movs	r2, #200	@ 0xc8
 801019c:	2100      	movs	r1, #0
 801019e:	a81e      	add	r0, sp, #120	@ 0x78
 80101a0:	f008 f84c 	bl	801823c <memset>
 80101a4:	a816      	add	r0, sp, #88	@ 0x58
 80101a6:	f7ff fc09 	bl	800f9bc <ucdr_buffer_remaining>
 80101aa:	2804      	cmp	r0, #4
 80101ac:	d814      	bhi.n	80101d8 <uxr_ping_agent_attempts+0x11c>
 80101ae:	f89d b12d 	ldrb.w	fp, [sp, #301]	@ 0x12d
 80101b2:	f002 f837 	bl	8012224 <uxr_millis>
 80101b6:	1b00      	subs	r0, r0, r4
 80101b8:	1a2d      	subs	r5, r5, r0
 80101ba:	f002 f833 	bl	8012224 <uxr_millis>
 80101be:	2d00      	cmp	r5, #0
 80101c0:	4604      	mov	r4, r0
 80101c2:	dd2a      	ble.n	801021a <uxr_ping_agent_attempts+0x15e>
 80101c4:	f1bb 0f00 	cmp.w	fp, #0
 80101c8:	d0c3      	beq.n	8010152 <uxr_ping_agent_attempts+0x96>
 80101ca:	46bb      	mov	fp, r7
 80101cc:	4658      	mov	r0, fp
 80101ce:	b051      	add	sp, #324	@ 0x144
 80101d0:	ecbd 8b02 	vpop	{d8}
 80101d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101d8:	f10d 0316 	add.w	r3, sp, #22
 80101dc:	f10d 0213 	add.w	r2, sp, #19
 80101e0:	f10d 0112 	add.w	r1, sp, #18
 80101e4:	a816      	add	r0, sp, #88	@ 0x58
 80101e6:	f88d a012 	strb.w	sl, [sp, #18]
 80101ea:	f8ad a016 	strh.w	sl, [sp, #22]
 80101ee:	f88d a013 	strb.w	sl, [sp, #19]
 80101f2:	f002 fa1d 	bl	8012630 <uxr_deserialize_submessage_header>
 80101f6:	a816      	add	r0, sp, #88	@ 0x58
 80101f8:	f7ff fbe0 	bl	800f9bc <ucdr_buffer_remaining>
 80101fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8010200:	4298      	cmp	r0, r3
 8010202:	d3d4      	bcc.n	80101ae <uxr_ping_agent_attempts+0xf2>
 8010204:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8010208:	2b06      	cmp	r3, #6
 801020a:	d1d0      	bne.n	80101ae <uxr_ping_agent_attempts+0xf2>
 801020c:	a916      	add	r1, sp, #88	@ 0x58
 801020e:	a81e      	add	r0, sp, #120	@ 0x78
 8010210:	f88d a12d 	strb.w	sl, [sp, #301]	@ 0x12d
 8010214:	f000 face 	bl	80107b4 <read_submessage_info>
 8010218:	e7c9      	b.n	80101ae <uxr_ping_agent_attempts+0xf2>
 801021a:	f1bb 0f00 	cmp.w	fp, #0
 801021e:	d1d4      	bne.n	80101ca <uxr_ping_agent_attempts+0x10e>
 8010220:	f109 0901 	add.w	r9, r9, #1
 8010224:	e786      	b.n	8010134 <uxr_ping_agent_attempts+0x78>
 8010226:	bf00      	nop
 8010228:	080192e4 	.word	0x080192e4

0801022c <uxr_buffer_request_data>:
 801022c:	b530      	push	{r4, r5, lr}
 801022e:	b095      	sub	sp, #84	@ 0x54
 8010230:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010234:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8010236:	9303      	str	r3, [sp, #12]
 8010238:	2200      	movs	r2, #0
 801023a:	2d00      	cmp	r5, #0
 801023c:	bf14      	ite	ne
 801023e:	2101      	movne	r1, #1
 8010240:	4611      	moveq	r1, r2
 8010242:	4604      	mov	r4, r0
 8010244:	f88d 301c 	strb.w	r3, [sp, #28]
 8010248:	f88d 201d 	strb.w	r2, [sp, #29]
 801024c:	f88d 201e 	strb.w	r2, [sp, #30]
 8010250:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010254:	d021      	beq.n	801029a <uxr_buffer_request_data+0x6e>
 8010256:	682a      	ldr	r2, [r5, #0]
 8010258:	686b      	ldr	r3, [r5, #4]
 801025a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801025e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010262:	2210      	movs	r2, #16
 8010264:	2308      	movs	r3, #8
 8010266:	2100      	movs	r1, #0
 8010268:	e9cd 3100 	strd	r3, r1, [sp]
 801026c:	4620      	mov	r0, r4
 801026e:	9905      	ldr	r1, [sp, #20]
 8010270:	ab0c      	add	r3, sp, #48	@ 0x30
 8010272:	f001 f861 	bl	8011338 <uxr_prepare_stream_to_write_submessage>
 8010276:	b918      	cbnz	r0, 8010280 <uxr_buffer_request_data+0x54>
 8010278:	4604      	mov	r4, r0
 801027a:	4620      	mov	r0, r4
 801027c:	b015      	add	sp, #84	@ 0x54
 801027e:	bd30      	pop	{r4, r5, pc}
 8010280:	9904      	ldr	r1, [sp, #16]
 8010282:	aa06      	add	r2, sp, #24
 8010284:	4620      	mov	r0, r4
 8010286:	f001 f98d 	bl	80115a4 <uxr_init_base_object_request>
 801028a:	a906      	add	r1, sp, #24
 801028c:	4604      	mov	r4, r0
 801028e:	a80c      	add	r0, sp, #48	@ 0x30
 8010290:	f003 f92e 	bl	80134f0 <uxr_serialize_READ_DATA_Payload>
 8010294:	4620      	mov	r0, r4
 8010296:	b015      	add	sp, #84	@ 0x54
 8010298:	bd30      	pop	{r4, r5, pc}
 801029a:	2208      	movs	r2, #8
 801029c:	e7e2      	b.n	8010264 <uxr_buffer_request_data+0x38>
 801029e:	bf00      	nop

080102a0 <uxr_buffer_cancel_data>:
 80102a0:	b510      	push	{r4, lr}
 80102a2:	b094      	sub	sp, #80	@ 0x50
 80102a4:	2300      	movs	r3, #0
 80102a6:	9202      	str	r2, [sp, #8]
 80102a8:	9205      	str	r2, [sp, #20]
 80102aa:	9301      	str	r3, [sp, #4]
 80102ac:	2201      	movs	r2, #1
 80102ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80102b2:	f88d 301e 	strb.w	r3, [sp, #30]
 80102b6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80102ba:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80102be:	2308      	movs	r3, #8
 80102c0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80102c4:	9300      	str	r3, [sp, #0]
 80102c6:	2210      	movs	r2, #16
 80102c8:	ab0c      	add	r3, sp, #48	@ 0x30
 80102ca:	4604      	mov	r4, r0
 80102cc:	9103      	str	r1, [sp, #12]
 80102ce:	f001 f833 	bl	8011338 <uxr_prepare_stream_to_write_submessage>
 80102d2:	b918      	cbnz	r0, 80102dc <uxr_buffer_cancel_data+0x3c>
 80102d4:	4604      	mov	r4, r0
 80102d6:	4620      	mov	r0, r4
 80102d8:	b014      	add	sp, #80	@ 0x50
 80102da:	bd10      	pop	{r4, pc}
 80102dc:	9905      	ldr	r1, [sp, #20]
 80102de:	aa06      	add	r2, sp, #24
 80102e0:	4620      	mov	r0, r4
 80102e2:	f001 f95f 	bl	80115a4 <uxr_init_base_object_request>
 80102e6:	a906      	add	r1, sp, #24
 80102e8:	4604      	mov	r4, r0
 80102ea:	a80c      	add	r0, sp, #48	@ 0x30
 80102ec:	f003 f900 	bl	80134f0 <uxr_serialize_READ_DATA_Payload>
 80102f0:	4620      	mov	r0, r4
 80102f2:	b014      	add	sp, #80	@ 0x50
 80102f4:	bd10      	pop	{r4, pc}
 80102f6:	bf00      	nop

080102f8 <read_submessage_format>:
 80102f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102fc:	b095      	sub	sp, #84	@ 0x54
 80102fe:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8010302:	b113      	cbz	r3, 801030a <read_submessage_format+0x12>
 8010304:	b015      	add	sp, #84	@ 0x54
 8010306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801030a:	460c      	mov	r4, r1
 801030c:	4615      	mov	r5, r2
 801030e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010312:	4607      	mov	r7, r0
 8010314:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8010316:	9004      	str	r0, [sp, #16]
 8010318:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801031a:	9005      	str	r0, [sp, #20]
 801031c:	1a52      	subs	r2, r2, r1
 801031e:	a80c      	add	r0, sp, #48	@ 0x30
 8010320:	4699      	mov	r9, r3
 8010322:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8010326:	f7ff fb19 	bl	800f95c <ucdr_init_buffer>
 801032a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801032e:	a80c      	add	r0, sp, #48	@ 0x30
 8010330:	f7ff fae8 	bl	800f904 <ucdr_set_on_full_buffer_callback>
 8010334:	69e2      	ldr	r2, [r4, #28]
 8010336:	b19a      	cbz	r2, 8010360 <read_submessage_format+0x68>
 8010338:	f1b8 0f07 	cmp.w	r8, #7
 801033c:	f882 9014 	strb.w	r9, [r2, #20]
 8010340:	d040      	beq.n	80103c4 <read_submessage_format+0xcc>
 8010342:	f1b8 0f08 	cmp.w	r8, #8
 8010346:	d02e      	beq.n	80103a6 <read_submessage_format+0xae>
 8010348:	f1b8 0f06 	cmp.w	r8, #6
 801034c:	d011      	beq.n	8010372 <read_submessage_format+0x7a>
 801034e:	2301      	movs	r3, #1
 8010350:	7513      	strb	r3, [r2, #20]
 8010352:	4629      	mov	r1, r5
 8010354:	4620      	mov	r0, r4
 8010356:	f7ff fb51 	bl	800f9fc <ucdr_advance_buffer>
 801035a:	b015      	add	sp, #84	@ 0x54
 801035c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010360:	f1b8 0f07 	cmp.w	r8, #7
 8010364:	d02e      	beq.n	80103c4 <read_submessage_format+0xcc>
 8010366:	f1b8 0f08 	cmp.w	r8, #8
 801036a:	d01c      	beq.n	80103a6 <read_submessage_format+0xae>
 801036c:	f1b8 0f06 	cmp.w	r8, #6
 8010370:	d1ef      	bne.n	8010352 <read_submessage_format+0x5a>
 8010372:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8010376:	f1b8 0f00 	cmp.w	r8, #0
 801037a:	d011      	beq.n	80103a0 <read_submessage_format+0xa8>
 801037c:	ab0c      	add	r3, sp, #48	@ 0x30
 801037e:	e9cd 3500 	strd	r3, r5, [sp]
 8010382:	2306      	movs	r3, #6
 8010384:	f88d 3016 	strb.w	r3, [sp, #22]
 8010388:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801038c:	9302      	str	r3, [sp, #8]
 801038e:	4632      	mov	r2, r6
 8010390:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010394:	4638      	mov	r0, r7
 8010396:	47c0      	blx	r8
 8010398:	2301      	movs	r3, #1
 801039a:	69e2      	ldr	r2, [r4, #28]
 801039c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80103a0:	2a00      	cmp	r2, #0
 80103a2:	d1d4      	bne.n	801034e <read_submessage_format+0x56>
 80103a4:	e7d5      	b.n	8010352 <read_submessage_format+0x5a>
 80103a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d0f8      	beq.n	80103a0 <read_submessage_format+0xa8>
 80103ae:	a906      	add	r1, sp, #24
 80103b0:	a80c      	add	r0, sp, #48	@ 0x30
 80103b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80103b6:	f003 f961 	bl	801367c <uxr_deserialize_SampleIdentity>
 80103ba:	b9a0      	cbnz	r0, 80103e6 <read_submessage_format+0xee>
 80103bc:	69e2      	ldr	r2, [r4, #28]
 80103be:	2a00      	cmp	r2, #0
 80103c0:	d1c5      	bne.n	801034e <read_submessage_format+0x56>
 80103c2:	e7c6      	b.n	8010352 <read_submessage_format+0x5a>
 80103c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80103c8:	b13b      	cbz	r3, 80103da <read_submessage_format+0xe2>
 80103ca:	a906      	add	r1, sp, #24
 80103cc:	a80c      	add	r0, sp, #48	@ 0x30
 80103ce:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80103d2:	f002 fe13 	bl	8012ffc <uxr_deserialize_BaseObjectRequest>
 80103d6:	bb60      	cbnz	r0, 8010432 <read_submessage_format+0x13a>
 80103d8:	69e2      	ldr	r2, [r4, #28]
 80103da:	68a3      	ldr	r3, [r4, #8]
 80103dc:	442b      	add	r3, r5
 80103de:	60a3      	str	r3, [r4, #8]
 80103e0:	2a00      	cmp	r2, #0
 80103e2:	d1b4      	bne.n	801034e <read_submessage_format+0x56>
 80103e4:	e7b5      	b.n	8010352 <read_submessage_format+0x5a>
 80103e6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80103ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80103ec:	1a52      	subs	r2, r2, r1
 80103ee:	eba8 0803 	sub.w	r8, r8, r3
 80103f2:	a80c      	add	r0, sp, #48	@ 0x30
 80103f4:	f7ff fab2 	bl	800f95c <ucdr_init_buffer>
 80103f8:	44a8      	add	r8, r5
 80103fa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80103fe:	a80c      	add	r0, sp, #48	@ 0x30
 8010400:	f7ff fa80 	bl	800f904 <ucdr_set_on_full_buffer_callback>
 8010404:	fa1f f888 	uxth.w	r8, r8
 8010408:	ab0c      	add	r3, sp, #48	@ 0x30
 801040a:	9300      	str	r3, [sp, #0]
 801040c:	f8cd 8004 	str.w	r8, [sp, #4]
 8010410:	2108      	movs	r1, #8
 8010412:	f88d 1016 	strb.w	r1, [sp, #22]
 8010416:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801041a:	9102      	str	r1, [sp, #8]
 801041c:	ab06      	add	r3, sp, #24
 801041e:	4632      	mov	r2, r6
 8010420:	9905      	ldr	r1, [sp, #20]
 8010422:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8010426:	4638      	mov	r0, r7
 8010428:	47b0      	blx	r6
 801042a:	2301      	movs	r3, #1
 801042c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010430:	e7c4      	b.n	80103bc <read_submessage_format+0xc4>
 8010432:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010436:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010438:	1a52      	subs	r2, r2, r1
 801043a:	a80c      	add	r0, sp, #48	@ 0x30
 801043c:	eba8 0803 	sub.w	r8, r8, r3
 8010440:	f7ff fa8c 	bl	800f95c <ucdr_init_buffer>
 8010444:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010448:	a80c      	add	r0, sp, #48	@ 0x30
 801044a:	f7ff fa5b 	bl	800f904 <ucdr_set_on_full_buffer_callback>
 801044e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010456:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801045a:	44a8      	add	r8, r5
 801045c:	fa1f f888 	uxth.w	r8, r8
 8010460:	f8cd 8004 	str.w	r8, [sp, #4]
 8010464:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010468:	2107      	movs	r1, #7
 801046a:	f88d 1016 	strb.w	r1, [sp, #22]
 801046e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8010472:	9102      	str	r1, [sp, #8]
 8010474:	4632      	mov	r2, r6
 8010476:	b29b      	uxth	r3, r3
 8010478:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 801047c:	9905      	ldr	r1, [sp, #20]
 801047e:	4638      	mov	r0, r7
 8010480:	47b0      	blx	r6
 8010482:	2301      	movs	r3, #1
 8010484:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010488:	e7a6      	b.n	80103d8 <read_submessage_format+0xe0>
 801048a:	bf00      	nop

0801048c <on_get_fragmentation_info>:
 801048c:	b500      	push	{lr}
 801048e:	b08b      	sub	sp, #44	@ 0x2c
 8010490:	4601      	mov	r1, r0
 8010492:	2204      	movs	r2, #4
 8010494:	a802      	add	r0, sp, #8
 8010496:	f7ff fa61 	bl	800f95c <ucdr_init_buffer>
 801049a:	f10d 0305 	add.w	r3, sp, #5
 801049e:	f10d 0206 	add.w	r2, sp, #6
 80104a2:	a901      	add	r1, sp, #4
 80104a4:	a802      	add	r0, sp, #8
 80104a6:	f001 fe91 	bl	80121cc <uxr_read_submessage_header>
 80104aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80104ae:	2b0d      	cmp	r3, #13
 80104b0:	d003      	beq.n	80104ba <on_get_fragmentation_info+0x2e>
 80104b2:	2000      	movs	r0, #0
 80104b4:	b00b      	add	sp, #44	@ 0x2c
 80104b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80104ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80104be:	f013 0f02 	tst.w	r3, #2
 80104c2:	bf14      	ite	ne
 80104c4:	2002      	movne	r0, #2
 80104c6:	2001      	moveq	r0, #1
 80104c8:	b00b      	add	sp, #44	@ 0x2c
 80104ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80104ce:	bf00      	nop

080104d0 <read_submessage_get_info>:
 80104d0:	b570      	push	{r4, r5, r6, lr}
 80104d2:	2500      	movs	r5, #0
 80104d4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80104d8:	4604      	mov	r4, r0
 80104da:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80104de:	460e      	mov	r6, r1
 80104e0:	a810      	add	r0, sp, #64	@ 0x40
 80104e2:	4629      	mov	r1, r5
 80104e4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80104e8:	f007 fea8 	bl	801823c <memset>
 80104ec:	a903      	add	r1, sp, #12
 80104ee:	4630      	mov	r0, r6
 80104f0:	f002 ff40 	bl	8013374 <uxr_deserialize_GET_INFO_Payload>
 80104f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80104f8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80104fc:	4620      	mov	r0, r4
 80104fe:	f001 f849 	bl	8011594 <uxr_session_header_offset>
 8010502:	462b      	mov	r3, r5
 8010504:	9000      	str	r0, [sp, #0]
 8010506:	220c      	movs	r2, #12
 8010508:	a905      	add	r1, sp, #20
 801050a:	a808      	add	r0, sp, #32
 801050c:	f7ff fa14 	bl	800f938 <ucdr_init_buffer_origin_offset>
 8010510:	a910      	add	r1, sp, #64	@ 0x40
 8010512:	a808      	add	r0, sp, #32
 8010514:	f002 ffa0 	bl	8013458 <uxr_serialize_INFO_Payload>
 8010518:	9b08      	ldr	r3, [sp, #32]
 801051a:	462a      	mov	r2, r5
 801051c:	4629      	mov	r1, r5
 801051e:	4620      	mov	r0, r4
 8010520:	f000 ffe2 	bl	80114e8 <uxr_stamp_session_header>
 8010524:	a808      	add	r0, sp, #32
 8010526:	f7ff fa45 	bl	800f9b4 <ucdr_buffer_length>
 801052a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801052c:	4602      	mov	r2, r0
 801052e:	a905      	add	r1, sp, #20
 8010530:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010534:	47a0      	blx	r4
 8010536:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801053a:	bd70      	pop	{r4, r5, r6, pc}

0801053c <write_submessage_acknack.isra.0>:
 801053c:	b570      	push	{r4, r5, r6, lr}
 801053e:	b092      	sub	sp, #72	@ 0x48
 8010540:	4605      	mov	r5, r0
 8010542:	460e      	mov	r6, r1
 8010544:	4614      	mov	r4, r2
 8010546:	f001 f825 	bl	8011594 <uxr_session_header_offset>
 801054a:	a905      	add	r1, sp, #20
 801054c:	9000      	str	r0, [sp, #0]
 801054e:	2300      	movs	r3, #0
 8010550:	a80a      	add	r0, sp, #40	@ 0x28
 8010552:	2211      	movs	r2, #17
 8010554:	f7ff f9f0 	bl	800f938 <ucdr_init_buffer_origin_offset>
 8010558:	2218      	movs	r2, #24
 801055a:	fb02 5404 	mla	r4, r2, r4, r5
 801055e:	2300      	movs	r3, #0
 8010560:	2205      	movs	r2, #5
 8010562:	3450      	adds	r4, #80	@ 0x50
 8010564:	210a      	movs	r1, #10
 8010566:	a80a      	add	r0, sp, #40	@ 0x28
 8010568:	f001 fe16 	bl	8012198 <uxr_buffer_submessage_header>
 801056c:	a903      	add	r1, sp, #12
 801056e:	4620      	mov	r0, r4
 8010570:	f006 fc44 	bl	8016dfc <uxr_compute_acknack>
 8010574:	ba40      	rev16	r0, r0
 8010576:	f8ad 000e 	strh.w	r0, [sp, #14]
 801057a:	a903      	add	r1, sp, #12
 801057c:	a80a      	add	r0, sp, #40	@ 0x28
 801057e:	f88d 6010 	strb.w	r6, [sp, #16]
 8010582:	f002 ffd9 	bl	8013538 <uxr_serialize_ACKNACK_Payload>
 8010586:	2200      	movs	r2, #0
 8010588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801058a:	4611      	mov	r1, r2
 801058c:	4628      	mov	r0, r5
 801058e:	f000 ffab 	bl	80114e8 <uxr_stamp_session_header>
 8010592:	a80a      	add	r0, sp, #40	@ 0x28
 8010594:	f7ff fa0e 	bl	800f9b4 <ucdr_buffer_length>
 8010598:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801059a:	4602      	mov	r2, r0
 801059c:	a905      	add	r1, sp, #20
 801059e:	e9d3 0400 	ldrd	r0, r4, [r3]
 80105a2:	47a0      	blx	r4
 80105a4:	b012      	add	sp, #72	@ 0x48
 80105a6:	bd70      	pop	{r4, r5, r6, pc}

080105a8 <uxr_init_session>:
 80105a8:	b510      	push	{r4, lr}
 80105aa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80105e0 <uxr_init_session+0x38>
 80105ae:	2300      	movs	r3, #0
 80105b0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80105b4:	4604      	mov	r4, r0
 80105b6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80105ba:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80105be:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80105c2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80105c6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80105ca:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80105ce:	2181      	movs	r1, #129	@ 0x81
 80105d0:	f000 fef6 	bl	80113c0 <uxr_init_session_info>
 80105d4:	f104 0008 	add.w	r0, r4, #8
 80105d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105dc:	f001 bcf8 	b.w	8011fd0 <uxr_init_stream_storage>
	...

080105e8 <uxr_set_status_callback>:
 80105e8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop

080105f0 <uxr_set_topic_callback>:
 80105f0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop

080105f8 <uxr_set_request_callback>:
 80105f8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80105fc:	4770      	bx	lr
 80105fe:	bf00      	nop

08010600 <uxr_set_reply_callback>:
 8010600:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop

08010608 <uxr_create_output_best_effort_stream>:
 8010608:	b510      	push	{r4, lr}
 801060a:	b084      	sub	sp, #16
 801060c:	e9cd 2100 	strd	r2, r1, [sp]
 8010610:	4604      	mov	r4, r0
 8010612:	f000 ffbf 	bl	8011594 <uxr_session_header_offset>
 8010616:	e9dd 2100 	ldrd	r2, r1, [sp]
 801061a:	4603      	mov	r3, r0
 801061c:	f104 0008 	add.w	r0, r4, #8
 8010620:	b004      	add	sp, #16
 8010622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010626:	f001 bd1d 	b.w	8012064 <uxr_add_output_best_effort_buffer>
 801062a:	bf00      	nop

0801062c <uxr_create_output_reliable_stream>:
 801062c:	b510      	push	{r4, lr}
 801062e:	b088      	sub	sp, #32
 8010630:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010634:	4604      	mov	r4, r0
 8010636:	9303      	str	r3, [sp, #12]
 8010638:	f000 ffac 	bl	8011594 <uxr_session_header_offset>
 801063c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010640:	9000      	str	r0, [sp, #0]
 8010642:	9905      	ldr	r1, [sp, #20]
 8010644:	f104 0008 	add.w	r0, r4, #8
 8010648:	f001 fd20 	bl	801208c <uxr_add_output_reliable_buffer>
 801064c:	2200      	movs	r2, #0
 801064e:	b2c3      	uxtb	r3, r0
 8010650:	f363 0207 	bfi	r2, r3, #0, #8
 8010654:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010658:	f363 220f 	bfi	r2, r3, #8, #8
 801065c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010660:	f363 4217 	bfi	r2, r3, #16, #8
 8010664:	0e03      	lsrs	r3, r0, #24
 8010666:	f363 621f 	bfi	r2, r3, #24, #8
 801066a:	4610      	mov	r0, r2
 801066c:	b008      	add	sp, #32
 801066e:	bd10      	pop	{r4, pc}

08010670 <uxr_create_input_best_effort_stream>:
 8010670:	b082      	sub	sp, #8
 8010672:	3008      	adds	r0, #8
 8010674:	b002      	add	sp, #8
 8010676:	f001 bd23 	b.w	80120c0 <uxr_add_input_best_effort_buffer>
 801067a:	bf00      	nop

0801067c <uxr_create_input_reliable_stream>:
 801067c:	b510      	push	{r4, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	4c0b      	ldr	r4, [pc, #44]	@ (80106b0 <uxr_create_input_reliable_stream+0x34>)
 8010682:	9400      	str	r4, [sp, #0]
 8010684:	3008      	adds	r0, #8
 8010686:	f001 fd31 	bl	80120ec <uxr_add_input_reliable_buffer>
 801068a:	2200      	movs	r2, #0
 801068c:	b2c3      	uxtb	r3, r0
 801068e:	f363 0207 	bfi	r2, r3, #0, #8
 8010692:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010696:	f363 220f 	bfi	r2, r3, #8, #8
 801069a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801069e:	f363 4217 	bfi	r2, r3, #16, #8
 80106a2:	0e03      	lsrs	r3, r0, #24
 80106a4:	f363 621f 	bfi	r2, r3, #24, #8
 80106a8:	4610      	mov	r0, r2
 80106aa:	b004      	add	sp, #16
 80106ac:	bd10      	pop	{r4, pc}
 80106ae:	bf00      	nop
 80106b0:	0801048d 	.word	0x0801048d

080106b4 <uxr_epoch_nanos>:
 80106b4:	b510      	push	{r4, lr}
 80106b6:	4604      	mov	r4, r0
 80106b8:	f001 fdce 	bl	8012258 <uxr_nanos>
 80106bc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80106c0:	1ac0      	subs	r0, r0, r3
 80106c2:	eb61 0102 	sbc.w	r1, r1, r2
 80106c6:	bd10      	pop	{r4, pc}

080106c8 <uxr_flash_output_streams>:
 80106c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106cc:	7e03      	ldrb	r3, [r0, #24]
 80106ce:	b084      	sub	sp, #16
 80106d0:	4604      	mov	r4, r0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d035      	beq.n	8010742 <uxr_flash_output_streams+0x7a>
 80106d6:	f04f 0900 	mov.w	r9, #0
 80106da:	4648      	mov	r0, r9
 80106dc:	f10d 0802 	add.w	r8, sp, #2
 80106e0:	af03      	add	r7, sp, #12
 80106e2:	ae02      	add	r6, sp, #8
 80106e4:	e006      	b.n	80106f4 <uxr_flash_output_streams+0x2c>
 80106e6:	7e23      	ldrb	r3, [r4, #24]
 80106e8:	f109 0901 	add.w	r9, r9, #1
 80106ec:	fa5f f089 	uxtb.w	r0, r9
 80106f0:	4283      	cmp	r3, r0
 80106f2:	d926      	bls.n	8010742 <uxr_flash_output_streams+0x7a>
 80106f4:	2201      	movs	r2, #1
 80106f6:	4611      	mov	r1, r2
 80106f8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80106fc:	f001 fc14 	bl	8011f28 <uxr_stream_id>
 8010700:	3508      	adds	r5, #8
 8010702:	4684      	mov	ip, r0
 8010704:	4643      	mov	r3, r8
 8010706:	463a      	mov	r2, r7
 8010708:	4631      	mov	r1, r6
 801070a:	4628      	mov	r0, r5
 801070c:	f8cd c004 	str.w	ip, [sp, #4]
 8010710:	f006 fbfa 	bl	8016f08 <uxr_prepare_best_effort_buffer_to_send>
 8010714:	2800      	cmp	r0, #0
 8010716:	d0e6      	beq.n	80106e6 <uxr_flash_output_streams+0x1e>
 8010718:	9b02      	ldr	r3, [sp, #8]
 801071a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801071e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010722:	4620      	mov	r0, r4
 8010724:	f000 fee0 	bl	80114e8 <uxr_stamp_session_header>
 8010728:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801072a:	9a03      	ldr	r2, [sp, #12]
 801072c:	685d      	ldr	r5, [r3, #4]
 801072e:	6818      	ldr	r0, [r3, #0]
 8010730:	9902      	ldr	r1, [sp, #8]
 8010732:	47a8      	blx	r5
 8010734:	f109 0901 	add.w	r9, r9, #1
 8010738:	7e23      	ldrb	r3, [r4, #24]
 801073a:	fa5f f089 	uxtb.w	r0, r9
 801073e:	4283      	cmp	r3, r0
 8010740:	d8d8      	bhi.n	80106f4 <uxr_flash_output_streams+0x2c>
 8010742:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010746:	b38b      	cbz	r3, 80107ac <uxr_flash_output_streams+0xe4>
 8010748:	f04f 0900 	mov.w	r9, #0
 801074c:	f10d 0802 	add.w	r8, sp, #2
 8010750:	af03      	add	r7, sp, #12
 8010752:	ae02      	add	r6, sp, #8
 8010754:	4648      	mov	r0, r9
 8010756:	2201      	movs	r2, #1
 8010758:	2102      	movs	r1, #2
 801075a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801075e:	f001 fbe3 	bl	8011f28 <uxr_stream_id>
 8010762:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010766:	3520      	adds	r5, #32
 8010768:	9001      	str	r0, [sp, #4]
 801076a:	e00d      	b.n	8010788 <uxr_flash_output_streams+0xc0>
 801076c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010770:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010774:	9b02      	ldr	r3, [sp, #8]
 8010776:	f000 feb7 	bl	80114e8 <uxr_stamp_session_header>
 801077a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801077c:	9a03      	ldr	r2, [sp, #12]
 801077e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010782:	9902      	ldr	r1, [sp, #8]
 8010784:	6818      	ldr	r0, [r3, #0]
 8010786:	47d0      	blx	sl
 8010788:	4643      	mov	r3, r8
 801078a:	463a      	mov	r2, r7
 801078c:	4631      	mov	r1, r6
 801078e:	4628      	mov	r0, r5
 8010790:	f006 fdd8 	bl	8017344 <uxr_prepare_next_reliable_buffer_to_send>
 8010794:	4603      	mov	r3, r0
 8010796:	4620      	mov	r0, r4
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1e7      	bne.n	801076c <uxr_flash_output_streams+0xa4>
 801079c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80107a0:	f109 0901 	add.w	r9, r9, #1
 80107a4:	fa5f f089 	uxtb.w	r0, r9
 80107a8:	4283      	cmp	r3, r0
 80107aa:	d8d4      	bhi.n	8010756 <uxr_flash_output_streams+0x8e>
 80107ac:	b004      	add	sp, #16
 80107ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b2:	bf00      	nop

080107b4 <read_submessage_info>:
 80107b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107b8:	460d      	mov	r5, r1
 80107ba:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80107be:	4669      	mov	r1, sp
 80107c0:	4607      	mov	r7, r0
 80107c2:	4628      	mov	r0, r5
 80107c4:	f002 fcd0 	bl	8013168 <uxr_deserialize_BaseObjectReply>
 80107c8:	a902      	add	r1, sp, #8
 80107ca:	4604      	mov	r4, r0
 80107cc:	4628      	mov	r0, r5
 80107ce:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80107d2:	f7fe f8ff 	bl	800e9d4 <ucdr_deserialize_bool>
 80107d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80107da:	4004      	ands	r4, r0
 80107dc:	b2e4      	uxtb	r4, r4
 80107de:	b95b      	cbnz	r3, 80107f8 <read_submessage_info+0x44>
 80107e0:	a987      	add	r1, sp, #540	@ 0x21c
 80107e2:	4628      	mov	r0, r5
 80107e4:	f7fe f8f6 	bl	800e9d4 <ucdr_deserialize_bool>
 80107e8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80107ec:	4606      	mov	r6, r0
 80107ee:	b94b      	cbnz	r3, 8010804 <read_submessage_info+0x50>
 80107f0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80107f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107f8:	a903      	add	r1, sp, #12
 80107fa:	4628      	mov	r0, r5
 80107fc:	f002 fb5c 	bl	8012eb8 <uxr_deserialize_ObjectVariant>
 8010800:	4004      	ands	r4, r0
 8010802:	e7ed      	b.n	80107e0 <read_submessage_info+0x2c>
 8010804:	a988      	add	r1, sp, #544	@ 0x220
 8010806:	4628      	mov	r0, r5
 8010808:	f7fe f912 	bl	800ea30 <ucdr_deserialize_uint8_t>
 801080c:	4234      	tst	r4, r6
 801080e:	d0ef      	beq.n	80107f0 <read_submessage_info+0x3c>
 8010810:	2800      	cmp	r0, #0
 8010812:	d0ed      	beq.n	80107f0 <read_submessage_info+0x3c>
 8010814:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010818:	2b0d      	cmp	r3, #13
 801081a:	d1e9      	bne.n	80107f0 <read_submessage_info+0x3c>
 801081c:	a98a      	add	r1, sp, #552	@ 0x228
 801081e:	4628      	mov	r0, r5
 8010820:	f7fe feac 	bl	800f57c <ucdr_deserialize_int16_t>
 8010824:	b140      	cbz	r0, 8010838 <read_submessage_info+0x84>
 8010826:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801082a:	2b00      	cmp	r3, #0
 801082c:	dd07      	ble.n	801083e <read_submessage_info+0x8a>
 801082e:	f1b8 0f00 	cmp.w	r8, #0
 8010832:	bf14      	ite	ne
 8010834:	2001      	movne	r0, #1
 8010836:	2002      	moveq	r0, #2
 8010838:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801083c:	e7d8      	b.n	80107f0 <read_submessage_info+0x3c>
 801083e:	2000      	movs	r0, #0
 8010840:	e7fa      	b.n	8010838 <read_submessage_info+0x84>
 8010842:	bf00      	nop

08010844 <read_submessage_list>:
 8010844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010848:	b097      	sub	sp, #92	@ 0x5c
 801084a:	4ec1      	ldr	r6, [pc, #772]	@ (8010b50 <read_submessage_list+0x30c>)
 801084c:	9209      	str	r2, [sp, #36]	@ 0x24
 801084e:	4604      	mov	r4, r0
 8010850:	460d      	mov	r5, r1
 8010852:	f04f 0801 	mov.w	r8, #1
 8010856:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801085a:	aa0c      	add	r2, sp, #48	@ 0x30
 801085c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010860:	4628      	mov	r0, r5
 8010862:	f001 fcb3 	bl	80121cc <uxr_read_submessage_header>
 8010866:	2800      	cmp	r0, #0
 8010868:	f000 813e 	beq.w	8010ae8 <read_submessage_list+0x2a4>
 801086c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010870:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010874:	3b02      	subs	r3, #2
 8010876:	2b0d      	cmp	r3, #13
 8010878:	d8ed      	bhi.n	8010856 <read_submessage_list+0x12>
 801087a:	a101      	add	r1, pc, #4	@ (adr r1, 8010880 <read_submessage_list+0x3c>)
 801087c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010880:	08010adf 	.word	0x08010adf
 8010884:	08010857 	.word	0x08010857
 8010888:	08010acf 	.word	0x08010acf
 801088c:	08010a6d 	.word	0x08010a6d
 8010890:	08010a63 	.word	0x08010a63
 8010894:	08010857 	.word	0x08010857
 8010898:	08010857 	.word	0x08010857
 801089c:	080109c3 	.word	0x080109c3
 80108a0:	08010953 	.word	0x08010953
 80108a4:	08010913 	.word	0x08010913
 80108a8:	08010857 	.word	0x08010857
 80108ac:	08010857 	.word	0x08010857
 80108b0:	08010857 	.word	0x08010857
 80108b4:	080108b9 	.word	0x080108b9
 80108b8:	a910      	add	r1, sp, #64	@ 0x40
 80108ba:	4628      	mov	r0, r5
 80108bc:	f002 fe8c 	bl	80135d8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80108c0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80108c4:	f1b9 0f00 	cmp.w	r9, #0
 80108c8:	f000 8116 	beq.w	8010af8 <read_submessage_list+0x2b4>
 80108cc:	f001 fcc4 	bl	8012258 <uxr_nanos>
 80108d0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 80108d2:	4602      	mov	r2, r0
 80108d4:	460b      	mov	r3, r1
 80108d6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80108d8:	2100      	movs	r1, #0
 80108da:	468c      	mov	ip, r1
 80108dc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80108e0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80108e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80108e6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80108e8:	468c      	mov	ip, r1
 80108ea:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80108ee:	46e2      	mov	sl, ip
 80108f0:	46bc      	mov	ip, r7
 80108f2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80108f6:	fbc0 7106 	smlal	r7, r1, r0, r6
 80108fa:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80108fe:	e9cd 7100 	strd	r7, r1, [sp]
 8010902:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010906:	9106      	str	r1, [sp, #24]
 8010908:	4620      	mov	r0, r4
 801090a:	47c8      	blx	r9
 801090c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8010910:	e7a1      	b.n	8010856 <read_submessage_list+0x12>
 8010912:	a910      	add	r1, sp, #64	@ 0x40
 8010914:	4628      	mov	r0, r5
 8010916:	f002 fe4d 	bl	80135b4 <uxr_deserialize_HEARTBEAT_Payload>
 801091a:	2100      	movs	r1, #0
 801091c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010920:	f001 fb2c 	bl	8011f7c <uxr_stream_id_from_raw>
 8010924:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010928:	900f      	str	r0, [sp, #60]	@ 0x3c
 801092a:	4639      	mov	r1, r7
 801092c:	f104 0008 	add.w	r0, r4, #8
 8010930:	f001 fc12 	bl	8012158 <uxr_get_input_reliable_stream>
 8010934:	2800      	cmp	r0, #0
 8010936:	d08e      	beq.n	8010856 <read_submessage_list+0x12>
 8010938:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801093c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010940:	f006 fa50 	bl	8016de4 <uxr_process_heartbeat>
 8010944:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010948:	463a      	mov	r2, r7
 801094a:	4620      	mov	r0, r4
 801094c:	f7ff fdf6 	bl	801053c <write_submessage_acknack.isra.0>
 8010950:	e781      	b.n	8010856 <read_submessage_list+0x12>
 8010952:	a910      	add	r1, sp, #64	@ 0x40
 8010954:	4628      	mov	r0, r5
 8010956:	f002 fe05 	bl	8013564 <uxr_deserialize_ACKNACK_Payload>
 801095a:	2100      	movs	r1, #0
 801095c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010960:	f001 fb0c 	bl	8011f7c <uxr_stream_id_from_raw>
 8010964:	900d      	str	r0, [sp, #52]	@ 0x34
 8010966:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801096a:	f104 0008 	add.w	r0, r4, #8
 801096e:	f001 fbdf 	bl	8012130 <uxr_get_output_reliable_stream>
 8010972:	4607      	mov	r7, r0
 8010974:	2800      	cmp	r0, #0
 8010976:	f43f af6e 	beq.w	8010856 <read_submessage_list+0x12>
 801097a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801097e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8010982:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010986:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801098a:	b289      	uxth	r1, r1
 801098c:	f006 fd84 	bl	8017498 <uxr_process_acknack>
 8010990:	4638      	mov	r0, r7
 8010992:	f006 fd41 	bl	8017418 <uxr_begin_output_nack_buffer_it>
 8010996:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801099a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801099e:	e006      	b.n	80109ae <read_submessage_list+0x16a>
 80109a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80109a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80109a4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80109a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80109aa:	6818      	ldr	r0, [r3, #0]
 80109ac:	47c8      	blx	r9
 80109ae:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80109b2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80109b4:	4651      	mov	r1, sl
 80109b6:	4638      	mov	r0, r7
 80109b8:	f006 fd30 	bl	801741c <uxr_next_reliable_nack_buffer_to_send>
 80109bc:	2800      	cmp	r0, #0
 80109be:	d1ef      	bne.n	80109a0 <read_submessage_list+0x15c>
 80109c0:	e749      	b.n	8010856 <read_submessage_list+0x12>
 80109c2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80109c6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80109ca:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80109ce:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80109d2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80109d6:	4651      	mov	r1, sl
 80109d8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80109dc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80109e0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80109e4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80109e8:	4628      	mov	r0, r5
 80109ea:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80109ee:	f002 fb05 	bl	8012ffc <uxr_deserialize_BaseObjectRequest>
 80109f2:	4650      	mov	r0, sl
 80109f4:	a90f      	add	r1, sp, #60	@ 0x3c
 80109f6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80109fa:	f000 fdf1 	bl	80115e0 <uxr_parse_base_object_request>
 80109fe:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010a02:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010a04:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010a08:	9110      	str	r1, [sp, #64]	@ 0x40
 8010a0a:	3f04      	subs	r7, #4
 8010a0c:	f009 090e 	and.w	r9, r9, #14
 8010a10:	b2bf      	uxth	r7, r7
 8010a12:	f1bb 0f00 	cmp.w	fp, #0
 8010a16:	d006      	beq.n	8010a26 <read_submessage_list+0x1e2>
 8010a18:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010a1c:	9300      	str	r3, [sp, #0]
 8010a1e:	4652      	mov	r2, sl
 8010a20:	2300      	movs	r3, #0
 8010a22:	4620      	mov	r0, r4
 8010a24:	47d8      	blx	fp
 8010a26:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010a28:	b16a      	cbz	r2, 8010a46 <read_submessage_list+0x202>
 8010a2a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	3802      	subs	r0, #2
 8010a30:	e002      	b.n	8010a38 <read_submessage_list+0x1f4>
 8010a32:	3101      	adds	r1, #1
 8010a34:	4291      	cmp	r1, r2
 8010a36:	d006      	beq.n	8010a46 <read_submessage_list+0x202>
 8010a38:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010a3c:	4553      	cmp	r3, sl
 8010a3e:	d1f8      	bne.n	8010a32 <read_submessage_list+0x1ee>
 8010a40:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010a42:	2200      	movs	r2, #0
 8010a44:	545a      	strb	r2, [r3, r1]
 8010a46:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010a4a:	9102      	str	r1, [sp, #8]
 8010a4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010a4e:	9101      	str	r1, [sp, #4]
 8010a50:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010a52:	9100      	str	r1, [sp, #0]
 8010a54:	464b      	mov	r3, r9
 8010a56:	463a      	mov	r2, r7
 8010a58:	4629      	mov	r1, r5
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	f7ff fc4c 	bl	80102f8 <read_submessage_format>
 8010a60:	e6f9      	b.n	8010856 <read_submessage_list+0x12>
 8010a62:	4629      	mov	r1, r5
 8010a64:	4620      	mov	r0, r4
 8010a66:	f7ff fea5 	bl	80107b4 <read_submessage_info>
 8010a6a:	e6f4      	b.n	8010856 <read_submessage_list+0x12>
 8010a6c:	2a00      	cmp	r2, #0
 8010a6e:	d03e      	beq.n	8010aee <read_submessage_list+0x2aa>
 8010a70:	a910      	add	r1, sp, #64	@ 0x40
 8010a72:	4628      	mov	r0, r5
 8010a74:	f002 fcd2 	bl	801341c <uxr_deserialize_STATUS_Payload>
 8010a78:	a90e      	add	r1, sp, #56	@ 0x38
 8010a7a:	aa0d      	add	r2, sp, #52	@ 0x34
 8010a7c:	a810      	add	r0, sp, #64	@ 0x40
 8010a7e:	f000 fdaf 	bl	80115e0 <uxr_parse_base_object_request>
 8010a82:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010a86:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010a88:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8010a8c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8010a90:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010a92:	f1ba 0f00 	cmp.w	sl, #0
 8010a96:	d006      	beq.n	8010aa6 <read_submessage_list+0x262>
 8010a98:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010a9c:	9300      	str	r3, [sp, #0]
 8010a9e:	463a      	mov	r2, r7
 8010aa0:	464b      	mov	r3, r9
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	47d0      	blx	sl
 8010aa6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010aa8:	2a00      	cmp	r2, #0
 8010aaa:	f43f aed4 	beq.w	8010856 <read_submessage_list+0x12>
 8010aae:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010ab0:	2100      	movs	r1, #0
 8010ab2:	3802      	subs	r0, #2
 8010ab4:	e003      	b.n	8010abe <read_submessage_list+0x27a>
 8010ab6:	3101      	adds	r1, #1
 8010ab8:	4291      	cmp	r1, r2
 8010aba:	f43f aecc 	beq.w	8010856 <read_submessage_list+0x12>
 8010abe:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010ac2:	42bb      	cmp	r3, r7
 8010ac4:	d1f7      	bne.n	8010ab6 <read_submessage_list+0x272>
 8010ac6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010ac8:	f803 9001 	strb.w	r9, [r3, r1]
 8010acc:	e6c3      	b.n	8010856 <read_submessage_list+0x12>
 8010ace:	2a00      	cmp	r2, #0
 8010ad0:	f47f aec1 	bne.w	8010856 <read_submessage_list+0x12>
 8010ad4:	4629      	mov	r1, r5
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f000 fcc8 	bl	801146c <uxr_read_create_session_status>
 8010adc:	e6bb      	b.n	8010856 <read_submessage_list+0x12>
 8010ade:	4629      	mov	r1, r5
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	f7ff fcf5 	bl	80104d0 <read_submessage_get_info>
 8010ae6:	e6b6      	b.n	8010856 <read_submessage_list+0x12>
 8010ae8:	b017      	add	sp, #92	@ 0x5c
 8010aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aee:	4629      	mov	r1, r5
 8010af0:	4620      	mov	r0, r4
 8010af2:	f000 fcc7 	bl	8011484 <uxr_read_delete_session_status>
 8010af6:	e6ae      	b.n	8010856 <read_submessage_list+0x12>
 8010af8:	f001 fbae 	bl	8012258 <uxr_nanos>
 8010afc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010afe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010b00:	464f      	mov	r7, r9
 8010b02:	fbc3 2706 	smlal	r2, r7, r3, r6
 8010b06:	1812      	adds	r2, r2, r0
 8010b08:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010b0a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010b0c:	eb47 0101 	adc.w	r1, r7, r1
 8010b10:	464f      	mov	r7, r9
 8010b12:	fbc3 0706 	smlal	r0, r7, r3, r6
 8010b16:	463b      	mov	r3, r7
 8010b18:	4684      	mov	ip, r0
 8010b1a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8010b1e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8010b22:	eb1c 0c00 	adds.w	ip, ip, r0
 8010b26:	464f      	mov	r7, r9
 8010b28:	eb43 0307 	adc.w	r3, r3, r7
 8010b2c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8010b30:	eb61 0303 	sbc.w	r3, r1, r3
 8010b34:	0fda      	lsrs	r2, r3, #31
 8010b36:	eb12 020c 	adds.w	r2, r2, ip
 8010b3a:	f143 0300 	adc.w	r3, r3, #0
 8010b3e:	0852      	lsrs	r2, r2, #1
 8010b40:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010b44:	105b      	asrs	r3, r3, #1
 8010b46:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8010b4a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8010b4e:	e6dd      	b.n	801090c <read_submessage_list+0xc8>
 8010b50:	3b9aca00 	.word	0x3b9aca00

08010b54 <listen_message_reliably>:
 8010b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b58:	1e0b      	subs	r3, r1, #0
 8010b5a:	b09d      	sub	sp, #116	@ 0x74
 8010b5c:	bfb8      	it	lt
 8010b5e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8010b62:	4680      	mov	r8, r0
 8010b64:	9305      	str	r3, [sp, #20]
 8010b66:	f001 fb5d 	bl	8012224 <uxr_millis>
 8010b6a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8010b6e:	4681      	mov	r9, r0
 8010b70:	2a00      	cmp	r2, #0
 8010b72:	f000 80a1 	beq.w	8010cb8 <listen_message_reliably+0x164>
 8010b76:	2600      	movs	r6, #0
 8010b78:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010b7c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010b80:	9303      	str	r3, [sp, #12]
 8010b82:	4630      	mov	r0, r6
 8010b84:	460f      	mov	r7, r1
 8010b86:	e00f      	b.n	8010ba8 <listen_message_reliably+0x54>
 8010b88:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010b8c:	9903      	ldr	r1, [sp, #12]
 8010b8e:	455a      	cmp	r2, fp
 8010b90:	f106 0601 	add.w	r6, r6, #1
 8010b94:	eb73 0101 	sbcs.w	r1, r3, r1
 8010b98:	b2f0      	uxtb	r0, r6
 8010b9a:	da01      	bge.n	8010ba0 <listen_message_reliably+0x4c>
 8010b9c:	4693      	mov	fp, r2
 8010b9e:	9303      	str	r3, [sp, #12]
 8010ba0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010ba4:	4283      	cmp	r3, r0
 8010ba6:	d960      	bls.n	8010c6a <listen_message_reliably+0x116>
 8010ba8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010bac:	2102      	movs	r1, #2
 8010bae:	2201      	movs	r2, #1
 8010bb0:	f001 f9ba 	bl	8011f28 <uxr_stream_id>
 8010bb4:	00e4      	lsls	r4, r4, #3
 8010bb6:	f104 0520 	add.w	r5, r4, #32
 8010bba:	4445      	add	r5, r8
 8010bbc:	4601      	mov	r1, r0
 8010bbe:	463b      	mov	r3, r7
 8010bc0:	464a      	mov	r2, r9
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8010bc6:	f006 fbfd 	bl	80173c4 <uxr_update_output_stream_heartbeat_timestamp>
 8010bca:	eb08 0304 	add.w	r3, r8, r4
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	d0da      	beq.n	8010b88 <listen_message_reliably+0x34>
 8010bd2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010bd6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8010bda:	9304      	str	r3, [sp, #16]
 8010bdc:	4640      	mov	r0, r8
 8010bde:	f000 fcd9 	bl	8011594 <uxr_session_header_offset>
 8010be2:	3501      	adds	r5, #1
 8010be4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8010be8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010bec:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	2211      	movs	r2, #17
 8010bf4:	9000      	str	r0, [sp, #0]
 8010bf6:	a90c      	add	r1, sp, #48	@ 0x30
 8010bf8:	4650      	mov	r0, sl
 8010bfa:	f7fe fe9d 	bl	800f938 <ucdr_init_buffer_origin_offset>
 8010bfe:	2300      	movs	r3, #0
 8010c00:	2205      	movs	r2, #5
 8010c02:	210b      	movs	r1, #11
 8010c04:	4650      	mov	r0, sl
 8010c06:	f001 fac7 	bl	8012198 <uxr_buffer_submessage_header>
 8010c0a:	8968      	ldrh	r0, [r5, #10]
 8010c0c:	2101      	movs	r1, #1
 8010c0e:	f006 fc9b 	bl	8017548 <uxr_seq_num_add>
 8010c12:	892b      	ldrh	r3, [r5, #8]
 8010c14:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010c18:	4602      	mov	r2, r0
 8010c1a:	9b04      	ldr	r3, [sp, #16]
 8010c1c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010c20:	a90a      	add	r1, sp, #40	@ 0x28
 8010c22:	4650      	mov	r0, sl
 8010c24:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010c28:	f002 fcb0 	bl	801358c <uxr_serialize_HEARTBEAT_Payload>
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	4611      	mov	r1, r2
 8010c30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010c32:	4640      	mov	r0, r8
 8010c34:	f000 fc58 	bl	80114e8 <uxr_stamp_session_header>
 8010c38:	4650      	mov	r0, sl
 8010c3a:	f7fe febb 	bl	800f9b4 <ucdr_buffer_length>
 8010c3e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010c42:	4602      	mov	r2, r0
 8010c44:	a90c      	add	r1, sp, #48	@ 0x30
 8010c46:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010c4a:	4444      	add	r4, r8
 8010c4c:	47a8      	blx	r5
 8010c4e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010c52:	9903      	ldr	r1, [sp, #12]
 8010c54:	455a      	cmp	r2, fp
 8010c56:	f106 0601 	add.w	r6, r6, #1
 8010c5a:	eb73 0101 	sbcs.w	r1, r3, r1
 8010c5e:	b2f0      	uxtb	r0, r6
 8010c60:	db9c      	blt.n	8010b9c <listen_message_reliably+0x48>
 8010c62:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010c66:	4283      	cmp	r3, r0
 8010c68:	d89e      	bhi.n	8010ba8 <listen_message_reliably+0x54>
 8010c6a:	9a03      	ldr	r2, [sp, #12]
 8010c6c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010c70:	429a      	cmp	r2, r3
 8010c72:	bf08      	it	eq
 8010c74:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8010c78:	d01e      	beq.n	8010cb8 <listen_message_reliably+0x164>
 8010c7a:	ebab 0309 	sub.w	r3, fp, r9
 8010c7e:	9905      	ldr	r1, [sp, #20]
 8010c80:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	bf08      	it	eq
 8010c88:	2301      	moveq	r3, #1
 8010c8a:	4299      	cmp	r1, r3
 8010c8c:	bfa8      	it	ge
 8010c8e:	4619      	movge	r1, r3
 8010c90:	6894      	ldr	r4, [r2, #8]
 8010c92:	6810      	ldr	r0, [r2, #0]
 8010c94:	4689      	mov	r9, r1
 8010c96:	460b      	mov	r3, r1
 8010c98:	aa08      	add	r2, sp, #32
 8010c9a:	a907      	add	r1, sp, #28
 8010c9c:	47a0      	blx	r4
 8010c9e:	b968      	cbnz	r0, 8010cbc <listen_message_reliably+0x168>
 8010ca0:	9b05      	ldr	r3, [sp, #20]
 8010ca2:	eba3 0309 	sub.w	r3, r3, r9
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	9305      	str	r3, [sp, #20]
 8010caa:	f73f af5c 	bgt.w	8010b66 <listen_message_reliably+0x12>
 8010cae:	4604      	mov	r4, r0
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	b01d      	add	sp, #116	@ 0x74
 8010cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb8:	9b05      	ldr	r3, [sp, #20]
 8010cba:	e7e0      	b.n	8010c7e <listen_message_reliably+0x12a>
 8010cbc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	a80c      	add	r0, sp, #48	@ 0x30
 8010cc4:	f7fe fe4a 	bl	800f95c <ucdr_init_buffer>
 8010cc8:	2500      	movs	r5, #0
 8010cca:	f10d 031a 	add.w	r3, sp, #26
 8010cce:	aa06      	add	r2, sp, #24
 8010cd0:	a90c      	add	r1, sp, #48	@ 0x30
 8010cd2:	4640      	mov	r0, r8
 8010cd4:	f88d 5018 	strb.w	r5, [sp, #24]
 8010cd8:	f000 fc1a 	bl	8011510 <uxr_read_session_header>
 8010cdc:	b918      	cbnz	r0, 8010ce6 <listen_message_reliably+0x192>
 8010cde:	4620      	mov	r0, r4
 8010ce0:	b01d      	add	sp, #116	@ 0x74
 8010ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce6:	4629      	mov	r1, r5
 8010ce8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010cec:	f001 f946 	bl	8011f7c <uxr_stream_id_from_raw>
 8010cf0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8010cf4:	2d01      	cmp	r5, #1
 8010cf6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010cfa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010cfe:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010d02:	d04b      	beq.n	8010d9c <listen_message_reliably+0x248>
 8010d04:	2d02      	cmp	r5, #2
 8010d06:	d00f      	beq.n	8010d28 <listen_message_reliably+0x1d4>
 8010d08:	2d00      	cmp	r5, #0
 8010d0a:	d1e8      	bne.n	8010cde <listen_message_reliably+0x18a>
 8010d0c:	4629      	mov	r1, r5
 8010d0e:	4628      	mov	r0, r5
 8010d10:	f001 f934 	bl	8011f7c <uxr_stream_id_from_raw>
 8010d14:	a90c      	add	r1, sp, #48	@ 0x30
 8010d16:	4602      	mov	r2, r0
 8010d18:	4640      	mov	r0, r8
 8010d1a:	920a      	str	r2, [sp, #40]	@ 0x28
 8010d1c:	f7ff fd92 	bl	8010844 <read_submessage_list>
 8010d20:	4620      	mov	r0, r4
 8010d22:	b01d      	add	sp, #116	@ 0x74
 8010d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d28:	4631      	mov	r1, r6
 8010d2a:	f108 0008 	add.w	r0, r8, #8
 8010d2e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010d32:	f001 fa11 	bl	8012158 <uxr_get_input_reliable_stream>
 8010d36:	4607      	mov	r7, r0
 8010d38:	b338      	cbz	r0, 8010d8a <listen_message_reliably+0x236>
 8010d3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d3c:	9203      	str	r2, [sp, #12]
 8010d3e:	a80c      	add	r0, sp, #48	@ 0x30
 8010d40:	f7fe fe3c 	bl	800f9bc <ucdr_buffer_remaining>
 8010d44:	4603      	mov	r3, r0
 8010d46:	f10d 0019 	add.w	r0, sp, #25
 8010d4a:	9000      	str	r0, [sp, #0]
 8010d4c:	9a03      	ldr	r2, [sp, #12]
 8010d4e:	4651      	mov	r1, sl
 8010d50:	4638      	mov	r0, r7
 8010d52:	f005 ff4d 	bl	8016bf0 <uxr_receive_reliable_message>
 8010d56:	b1c0      	cbz	r0, 8010d8a <listen_message_reliably+0x236>
 8010d58:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010d5c:	b393      	cbz	r3, 8010dc4 <listen_message_reliably+0x270>
 8010d5e:	ad14      	add	r5, sp, #80	@ 0x50
 8010d60:	f04f 0a02 	mov.w	sl, #2
 8010d64:	e00a      	b.n	8010d7c <listen_message_reliably+0x228>
 8010d66:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8010d6a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8010d6e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010d72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010d74:	4629      	mov	r1, r5
 8010d76:	4640      	mov	r0, r8
 8010d78:	f7ff fd64 	bl	8010844 <read_submessage_list>
 8010d7c:	2204      	movs	r2, #4
 8010d7e:	4629      	mov	r1, r5
 8010d80:	4638      	mov	r0, r7
 8010d82:	f005 ffb5 	bl	8016cf0 <uxr_next_input_reliable_buffer_available>
 8010d86:	2800      	cmp	r0, #0
 8010d88:	d1ed      	bne.n	8010d66 <listen_message_reliably+0x212>
 8010d8a:	4640      	mov	r0, r8
 8010d8c:	4632      	mov	r2, r6
 8010d8e:	4649      	mov	r1, r9
 8010d90:	f7ff fbd4 	bl	801053c <write_submessage_acknack.isra.0>
 8010d94:	4620      	mov	r0, r4
 8010d96:	b01d      	add	sp, #116	@ 0x74
 8010d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d9c:	4631      	mov	r1, r6
 8010d9e:	f108 0008 	add.w	r0, r8, #8
 8010da2:	f001 f9cf 	bl	8012144 <uxr_get_input_best_effort_stream>
 8010da6:	2800      	cmp	r0, #0
 8010da8:	d099      	beq.n	8010cde <listen_message_reliably+0x18a>
 8010daa:	4651      	mov	r1, sl
 8010dac:	f005 fe8c 	bl	8016ac8 <uxr_receive_best_effort_message>
 8010db0:	2800      	cmp	r0, #0
 8010db2:	d094      	beq.n	8010cde <listen_message_reliably+0x18a>
 8010db4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010db8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010dba:	a90c      	add	r1, sp, #48	@ 0x30
 8010dbc:	4640      	mov	r0, r8
 8010dbe:	f7ff fd41 	bl	8010844 <read_submessage_list>
 8010dc2:	e78c      	b.n	8010cde <listen_message_reliably+0x18a>
 8010dc4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010dc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010dca:	a90c      	add	r1, sp, #48	@ 0x30
 8010dcc:	4640      	mov	r0, r8
 8010dce:	f7ff fd39 	bl	8010844 <read_submessage_list>
 8010dd2:	e7c4      	b.n	8010d5e <listen_message_reliably+0x20a>

08010dd4 <uxr_run_session_timeout>:
 8010dd4:	b570      	push	{r4, r5, r6, lr}
 8010dd6:	4604      	mov	r4, r0
 8010dd8:	460d      	mov	r5, r1
 8010dda:	f001 fa23 	bl	8012224 <uxr_millis>
 8010dde:	4606      	mov	r6, r0
 8010de0:	4620      	mov	r0, r4
 8010de2:	f7ff fc71 	bl	80106c8 <uxr_flash_output_streams>
 8010de6:	4629      	mov	r1, r5
 8010de8:	4620      	mov	r0, r4
 8010dea:	f7ff feb3 	bl	8010b54 <listen_message_reliably>
 8010dee:	f001 fa19 	bl	8012224 <uxr_millis>
 8010df2:	1b83      	subs	r3, r0, r6
 8010df4:	1ae9      	subs	r1, r5, r3
 8010df6:	2900      	cmp	r1, #0
 8010df8:	dcf6      	bgt.n	8010de8 <uxr_run_session_timeout+0x14>
 8010dfa:	f104 0008 	add.w	r0, r4, #8
 8010dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e02:	f001 b9b3 	b.w	801216c <uxr_output_streams_confirmed>
 8010e06:	bf00      	nop

08010e08 <uxr_run_session_until_data>:
 8010e08:	b570      	push	{r4, r5, r6, lr}
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	460d      	mov	r5, r1
 8010e0e:	f001 fa09 	bl	8012224 <uxr_millis>
 8010e12:	4606      	mov	r6, r0
 8010e14:	4620      	mov	r0, r4
 8010e16:	f7ff fc57 	bl	80106c8 <uxr_flash_output_streams>
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010e20:	4629      	mov	r1, r5
 8010e22:	e005      	b.n	8010e30 <uxr_run_session_until_data+0x28>
 8010e24:	f001 f9fe 	bl	8012224 <uxr_millis>
 8010e28:	1b83      	subs	r3, r0, r6
 8010e2a:	1ae9      	subs	r1, r5, r3
 8010e2c:	2900      	cmp	r1, #0
 8010e2e:	dd07      	ble.n	8010e40 <uxr_run_session_until_data+0x38>
 8010e30:	4620      	mov	r0, r4
 8010e32:	f7ff fe8f 	bl	8010b54 <listen_message_reliably>
 8010e36:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010e3a:	2800      	cmp	r0, #0
 8010e3c:	d0f2      	beq.n	8010e24 <uxr_run_session_until_data+0x1c>
 8010e3e:	bd70      	pop	{r4, r5, r6, pc}
 8010e40:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010e44:	bd70      	pop	{r4, r5, r6, pc}
 8010e46:	bf00      	nop

08010e48 <uxr_run_session_until_confirm_delivery>:
 8010e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e4c:	4606      	mov	r6, r0
 8010e4e:	460d      	mov	r5, r1
 8010e50:	f001 f9e8 	bl	8012224 <uxr_millis>
 8010e54:	4607      	mov	r7, r0
 8010e56:	4630      	mov	r0, r6
 8010e58:	f7ff fc36 	bl	80106c8 <uxr_flash_output_streams>
 8010e5c:	2d00      	cmp	r5, #0
 8010e5e:	f106 0808 	add.w	r8, r6, #8
 8010e62:	bfa8      	it	ge
 8010e64:	462c      	movge	r4, r5
 8010e66:	da07      	bge.n	8010e78 <uxr_run_session_until_confirm_delivery+0x30>
 8010e68:	e00e      	b.n	8010e88 <uxr_run_session_until_confirm_delivery+0x40>
 8010e6a:	f7ff fe73 	bl	8010b54 <listen_message_reliably>
 8010e6e:	f001 f9d9 	bl	8012224 <uxr_millis>
 8010e72:	1bc3      	subs	r3, r0, r7
 8010e74:	1aec      	subs	r4, r5, r3
 8010e76:	d407      	bmi.n	8010e88 <uxr_run_session_until_confirm_delivery+0x40>
 8010e78:	4640      	mov	r0, r8
 8010e7a:	f001 f977 	bl	801216c <uxr_output_streams_confirmed>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	4621      	mov	r1, r4
 8010e82:	4630      	mov	r0, r6
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d0f0      	beq.n	8010e6a <uxr_run_session_until_confirm_delivery+0x22>
 8010e88:	4640      	mov	r0, r8
 8010e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e8e:	f001 b96d 	b.w	801216c <uxr_output_streams_confirmed>
 8010e92:	bf00      	nop

08010e94 <uxr_run_session_until_all_status>:
 8010e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e98:	9c08      	ldr	r4, [sp, #32]
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	460f      	mov	r7, r1
 8010e9e:	4691      	mov	r9, r2
 8010ea0:	461d      	mov	r5, r3
 8010ea2:	f7ff fc11 	bl	80106c8 <uxr_flash_output_streams>
 8010ea6:	b124      	cbz	r4, 8010eb2 <uxr_run_session_until_all_status+0x1e>
 8010ea8:	4622      	mov	r2, r4
 8010eaa:	21ff      	movs	r1, #255	@ 0xff
 8010eac:	4628      	mov	r0, r5
 8010eae:	f007 f9c5 	bl	801823c <memset>
 8010eb2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8010eb6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010eb8:	f001 f9b4 	bl	8012224 <uxr_millis>
 8010ebc:	3d01      	subs	r5, #1
 8010ebe:	f1a9 0902 	sub.w	r9, r9, #2
 8010ec2:	4680      	mov	r8, r0
 8010ec4:	4639      	mov	r1, r7
 8010ec6:	4630      	mov	r0, r6
 8010ec8:	f7ff fe44 	bl	8010b54 <listen_message_reliably>
 8010ecc:	f001 f9aa 	bl	8012224 <uxr_millis>
 8010ed0:	eba0 0008 	sub.w	r0, r0, r8
 8010ed4:	1a39      	subs	r1, r7, r0
 8010ed6:	b344      	cbz	r4, 8010f2a <uxr_run_session_until_all_status+0x96>
 8010ed8:	4628      	mov	r0, r5
 8010eda:	46ac      	mov	ip, r5
 8010edc:	2301      	movs	r3, #1
 8010ede:	e002      	b.n	8010ee6 <uxr_run_session_until_all_status+0x52>
 8010ee0:	42a3      	cmp	r3, r4
 8010ee2:	d20d      	bcs.n	8010f00 <uxr_run_session_until_all_status+0x6c>
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8010eea:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8010eee:	d1f7      	bne.n	8010ee0 <uxr_run_session_until_all_status+0x4c>
 8010ef0:	42a3      	cmp	r3, r4
 8010ef2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8010ef6:	d213      	bcs.n	8010f20 <uxr_run_session_until_all_status+0x8c>
 8010ef8:	2a00      	cmp	r2, #0
 8010efa:	d0f3      	beq.n	8010ee4 <uxr_run_session_until_all_status+0x50>
 8010efc:	2900      	cmp	r1, #0
 8010efe:	dce2      	bgt.n	8010ec6 <uxr_run_session_until_all_status+0x32>
 8010f00:	2300      	movs	r3, #0
 8010f02:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8010f04:	442c      	add	r4, r5
 8010f06:	e001      	b.n	8010f0c <uxr_run_session_until_all_status+0x78>
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	d812      	bhi.n	8010f32 <uxr_run_session_until_all_status+0x9e>
 8010f0c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010f10:	4284      	cmp	r4, r0
 8010f12:	d1f9      	bne.n	8010f08 <uxr_run_session_until_all_status+0x74>
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	bf8c      	ite	hi
 8010f18:	2000      	movhi	r0, #0
 8010f1a:	2001      	movls	r0, #1
 8010f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f20:	2900      	cmp	r1, #0
 8010f22:	dded      	ble.n	8010f00 <uxr_run_session_until_all_status+0x6c>
 8010f24:	2a00      	cmp	r2, #0
 8010f26:	d1ce      	bne.n	8010ec6 <uxr_run_session_until_all_status+0x32>
 8010f28:	e7ea      	b.n	8010f00 <uxr_run_session_until_all_status+0x6c>
 8010f2a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010f2c:	2001      	movs	r0, #1
 8010f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f32:	2000      	movs	r0, #0
 8010f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010f38 <uxr_run_session_until_pong>:
 8010f38:	b570      	push	{r4, r5, r6, lr}
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	460d      	mov	r5, r1
 8010f3e:	f001 f971 	bl	8012224 <uxr_millis>
 8010f42:	4606      	mov	r6, r0
 8010f44:	4620      	mov	r0, r4
 8010f46:	f7ff fbbf 	bl	80106c8 <uxr_flash_output_streams>
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 8010f50:	4629      	mov	r1, r5
 8010f52:	e005      	b.n	8010f60 <uxr_run_session_until_pong+0x28>
 8010f54:	f001 f966 	bl	8012224 <uxr_millis>
 8010f58:	1b83      	subs	r3, r0, r6
 8010f5a:	1ae9      	subs	r1, r5, r3
 8010f5c:	2900      	cmp	r1, #0
 8010f5e:	dd0c      	ble.n	8010f7a <uxr_run_session_until_pong+0x42>
 8010f60:	4620      	mov	r0, r4
 8010f62:	f7ff fdf7 	bl	8010b54 <listen_message_reliably>
 8010f66:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	d0f2      	beq.n	8010f54 <uxr_run_session_until_pong+0x1c>
 8010f6e:	f1a0 0001 	sub.w	r0, r0, #1
 8010f72:	fab0 f080 	clz	r0, r0
 8010f76:	0940      	lsrs	r0, r0, #5
 8010f78:	bd70      	pop	{r4, r5, r6, pc}
 8010f7a:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8010f7e:	f1a0 0001 	sub.w	r0, r0, #1
 8010f82:	fab0 f080 	clz	r0, r0
 8010f86:	0940      	lsrs	r0, r0, #5
 8010f88:	bd70      	pop	{r4, r5, r6, pc}
 8010f8a:	bf00      	nop

08010f8c <wait_session_status>:
 8010f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f90:	4604      	mov	r4, r0
 8010f92:	b09d      	sub	sp, #116	@ 0x74
 8010f94:	20ff      	movs	r0, #255	@ 0xff
 8010f96:	7160      	strb	r0, [r4, #5]
 8010f98:	9303      	str	r3, [sp, #12]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f000 80b6 	beq.w	801110c <wait_session_status+0x180>
 8010fa0:	468a      	mov	sl, r1
 8010fa2:	4691      	mov	r9, r2
 8010fa4:	f04f 0b00 	mov.w	fp, #0
 8010fa8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010faa:	464a      	mov	r2, r9
 8010fac:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010fb0:	4651      	mov	r1, sl
 8010fb2:	47a8      	blx	r5
 8010fb4:	f001 f936 	bl	8012224 <uxr_millis>
 8010fb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010fbc:	4605      	mov	r5, r0
 8010fbe:	e009      	b.n	8010fd4 <wait_session_status+0x48>
 8010fc0:	f001 f930 	bl	8012224 <uxr_millis>
 8010fc4:	1b40      	subs	r0, r0, r5
 8010fc6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	dd40      	ble.n	8011050 <wait_session_status+0xc4>
 8010fce:	7960      	ldrb	r0, [r4, #5]
 8010fd0:	28ff      	cmp	r0, #255	@ 0xff
 8010fd2:	d145      	bne.n	8011060 <wait_session_status+0xd4>
 8010fd4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010fd6:	a908      	add	r1, sp, #32
 8010fd8:	6896      	ldr	r6, [r2, #8]
 8010fda:	6810      	ldr	r0, [r2, #0]
 8010fdc:	aa09      	add	r2, sp, #36	@ 0x24
 8010fde:	47b0      	blx	r6
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	d0ed      	beq.n	8010fc0 <wait_session_status+0x34>
 8010fe4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010fe8:	a80c      	add	r0, sp, #48	@ 0x30
 8010fea:	f7fe fcb7 	bl	800f95c <ucdr_init_buffer>
 8010fee:	2600      	movs	r6, #0
 8010ff0:	f10d 031e 	add.w	r3, sp, #30
 8010ff4:	aa07      	add	r2, sp, #28
 8010ff6:	a90c      	add	r1, sp, #48	@ 0x30
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	f88d 601c 	strb.w	r6, [sp, #28]
 8010ffe:	f000 fa87 	bl	8011510 <uxr_read_session_header>
 8011002:	2800      	cmp	r0, #0
 8011004:	d0dc      	beq.n	8010fc0 <wait_session_status+0x34>
 8011006:	4631      	mov	r1, r6
 8011008:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801100c:	f000 ffb6 	bl	8011f7c <uxr_stream_id_from_raw>
 8011010:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011014:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011018:	9302      	str	r3, [sp, #8]
 801101a:	2f01      	cmp	r7, #1
 801101c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011020:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011024:	d05c      	beq.n	80110e0 <wait_session_status+0x154>
 8011026:	2f02      	cmp	r7, #2
 8011028:	d020      	beq.n	801106c <wait_session_status+0xe0>
 801102a:	2f00      	cmp	r7, #0
 801102c:	d1c8      	bne.n	8010fc0 <wait_session_status+0x34>
 801102e:	4639      	mov	r1, r7
 8011030:	4638      	mov	r0, r7
 8011032:	f000 ffa3 	bl	8011f7c <uxr_stream_id_from_raw>
 8011036:	a90c      	add	r1, sp, #48	@ 0x30
 8011038:	4602      	mov	r2, r0
 801103a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801103c:	4620      	mov	r0, r4
 801103e:	f7ff fc01 	bl	8010844 <read_submessage_list>
 8011042:	f001 f8ef 	bl	8012224 <uxr_millis>
 8011046:	1b40      	subs	r0, r0, r5
 8011048:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801104c:	2b00      	cmp	r3, #0
 801104e:	dcbe      	bgt.n	8010fce <wait_session_status+0x42>
 8011050:	9b03      	ldr	r3, [sp, #12]
 8011052:	7960      	ldrb	r0, [r4, #5]
 8011054:	f10b 0b01 	add.w	fp, fp, #1
 8011058:	455b      	cmp	r3, fp
 801105a:	d001      	beq.n	8011060 <wait_session_status+0xd4>
 801105c:	28ff      	cmp	r0, #255	@ 0xff
 801105e:	d0a3      	beq.n	8010fa8 <wait_session_status+0x1c>
 8011060:	38ff      	subs	r0, #255	@ 0xff
 8011062:	bf18      	it	ne
 8011064:	2001      	movne	r0, #1
 8011066:	b01d      	add	sp, #116	@ 0x74
 8011068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801106c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8011070:	9304      	str	r3, [sp, #16]
 8011072:	4631      	mov	r1, r6
 8011074:	f104 0008 	add.w	r0, r4, #8
 8011078:	f001 f86e 	bl	8012158 <uxr_get_input_reliable_stream>
 801107c:	4680      	mov	r8, r0
 801107e:	b348      	cbz	r0, 80110d4 <wait_session_status+0x148>
 8011080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011082:	9205      	str	r2, [sp, #20]
 8011084:	a80c      	add	r0, sp, #48	@ 0x30
 8011086:	f7fe fc99 	bl	800f9bc <ucdr_buffer_remaining>
 801108a:	4603      	mov	r3, r0
 801108c:	f10d 001d 	add.w	r0, sp, #29
 8011090:	9000      	str	r0, [sp, #0]
 8011092:	9a05      	ldr	r2, [sp, #20]
 8011094:	9902      	ldr	r1, [sp, #8]
 8011096:	4640      	mov	r0, r8
 8011098:	f005 fdaa 	bl	8016bf0 <uxr_receive_reliable_message>
 801109c:	b1d0      	cbz	r0, 80110d4 <wait_session_status+0x148>
 801109e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d03a      	beq.n	801111c <wait_session_status+0x190>
 80110a6:	9f04      	ldr	r7, [sp, #16]
 80110a8:	e00a      	b.n	80110c0 <wait_session_status+0x134>
 80110aa:	f04f 0302 	mov.w	r3, #2
 80110ae:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80110b2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80110b6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80110ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80110bc:	f7ff fbc2 	bl	8010844 <read_submessage_list>
 80110c0:	a914      	add	r1, sp, #80	@ 0x50
 80110c2:	2204      	movs	r2, #4
 80110c4:	4640      	mov	r0, r8
 80110c6:	f005 fe13 	bl	8016cf0 <uxr_next_input_reliable_buffer_available>
 80110ca:	4603      	mov	r3, r0
 80110cc:	a914      	add	r1, sp, #80	@ 0x50
 80110ce:	4620      	mov	r0, r4
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d1ea      	bne.n	80110aa <wait_session_status+0x11e>
 80110d4:	9904      	ldr	r1, [sp, #16]
 80110d6:	4632      	mov	r2, r6
 80110d8:	4620      	mov	r0, r4
 80110da:	f7ff fa2f 	bl	801053c <write_submessage_acknack.isra.0>
 80110de:	e76f      	b.n	8010fc0 <wait_session_status+0x34>
 80110e0:	4631      	mov	r1, r6
 80110e2:	f104 0008 	add.w	r0, r4, #8
 80110e6:	f001 f82d 	bl	8012144 <uxr_get_input_best_effort_stream>
 80110ea:	2800      	cmp	r0, #0
 80110ec:	f43f af68 	beq.w	8010fc0 <wait_session_status+0x34>
 80110f0:	9902      	ldr	r1, [sp, #8]
 80110f2:	f005 fce9 	bl	8016ac8 <uxr_receive_best_effort_message>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	f43f af62 	beq.w	8010fc0 <wait_session_status+0x34>
 80110fc:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011100:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011102:	a90c      	add	r1, sp, #48	@ 0x30
 8011104:	4620      	mov	r0, r4
 8011106:	f7ff fb9d 	bl	8010844 <read_submessage_list>
 801110a:	e759      	b.n	8010fc0 <wait_session_status+0x34>
 801110c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801110e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011112:	47a0      	blx	r4
 8011114:	2001      	movs	r0, #1
 8011116:	b01d      	add	sp, #116	@ 0x74
 8011118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011120:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011122:	a90c      	add	r1, sp, #48	@ 0x30
 8011124:	4620      	mov	r0, r4
 8011126:	f7ff fb8d 	bl	8010844 <read_submessage_list>
 801112a:	e7bc      	b.n	80110a6 <wait_session_status+0x11a>

0801112c <uxr_delete_session_retries>:
 801112c:	b530      	push	{r4, r5, lr}
 801112e:	b08f      	sub	sp, #60	@ 0x3c
 8011130:	4604      	mov	r4, r0
 8011132:	460d      	mov	r5, r1
 8011134:	f000 fa2e 	bl	8011594 <uxr_session_header_offset>
 8011138:	2300      	movs	r3, #0
 801113a:	2210      	movs	r2, #16
 801113c:	9000      	str	r0, [sp, #0]
 801113e:	a902      	add	r1, sp, #8
 8011140:	a806      	add	r0, sp, #24
 8011142:	f7fe fbf9 	bl	800f938 <ucdr_init_buffer_origin_offset>
 8011146:	a906      	add	r1, sp, #24
 8011148:	4620      	mov	r0, r4
 801114a:	f000 f973 	bl	8011434 <uxr_buffer_delete_session>
 801114e:	2200      	movs	r2, #0
 8011150:	4611      	mov	r1, r2
 8011152:	9b06      	ldr	r3, [sp, #24]
 8011154:	4620      	mov	r0, r4
 8011156:	f000 f9c7 	bl	80114e8 <uxr_stamp_session_header>
 801115a:	a806      	add	r0, sp, #24
 801115c:	f7fe fc2a 	bl	800f9b4 <ucdr_buffer_length>
 8011160:	462b      	mov	r3, r5
 8011162:	4602      	mov	r2, r0
 8011164:	a902      	add	r1, sp, #8
 8011166:	4620      	mov	r0, r4
 8011168:	f7ff ff10 	bl	8010f8c <wait_session_status>
 801116c:	b118      	cbz	r0, 8011176 <uxr_delete_session_retries+0x4a>
 801116e:	7960      	ldrb	r0, [r4, #5]
 8011170:	fab0 f080 	clz	r0, r0
 8011174:	0940      	lsrs	r0, r0, #5
 8011176:	b00f      	add	sp, #60	@ 0x3c
 8011178:	bd30      	pop	{r4, r5, pc}
 801117a:	bf00      	nop

0801117c <uxr_create_session>:
 801117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011180:	f100 0b08 	add.w	fp, r0, #8
 8011184:	b0ab      	sub	sp, #172	@ 0xac
 8011186:	4604      	mov	r4, r0
 8011188:	4658      	mov	r0, fp
 801118a:	f000 ff2b 	bl	8011fe4 <uxr_reset_stream_storage>
 801118e:	4620      	mov	r0, r4
 8011190:	f000 fa00 	bl	8011594 <uxr_session_header_offset>
 8011194:	2300      	movs	r3, #0
 8011196:	9000      	str	r0, [sp, #0]
 8011198:	221c      	movs	r2, #28
 801119a:	a90b      	add	r1, sp, #44	@ 0x2c
 801119c:	a812      	add	r0, sp, #72	@ 0x48
 801119e:	f7fe fbcb 	bl	800f938 <ucdr_init_buffer_origin_offset>
 80111a2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80111a4:	8a1a      	ldrh	r2, [r3, #16]
 80111a6:	3a04      	subs	r2, #4
 80111a8:	b292      	uxth	r2, r2
 80111aa:	a912      	add	r1, sp, #72	@ 0x48
 80111ac:	4620      	mov	r0, r4
 80111ae:	f000 f917 	bl	80113e0 <uxr_buffer_create_session>
 80111b2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80111b4:	4620      	mov	r0, r4
 80111b6:	f000 f983 	bl	80114c0 <uxr_stamp_create_session_header>
 80111ba:	a812      	add	r0, sp, #72	@ 0x48
 80111bc:	f7fe fbfa 	bl	800f9b4 <ucdr_buffer_length>
 80111c0:	23ff      	movs	r3, #255	@ 0xff
 80111c2:	7163      	strb	r3, [r4, #5]
 80111c4:	230a      	movs	r3, #10
 80111c6:	46da      	mov	sl, fp
 80111c8:	9303      	str	r3, [sp, #12]
 80111ca:	4683      	mov	fp, r0
 80111cc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80111ce:	465a      	mov	r2, fp
 80111d0:	e9d3 0500 	ldrd	r0, r5, [r3]
 80111d4:	a90b      	add	r1, sp, #44	@ 0x2c
 80111d6:	47a8      	blx	r5
 80111d8:	f001 f824 	bl	8012224 <uxr_millis>
 80111dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80111e0:	4605      	mov	r5, r0
 80111e2:	e009      	b.n	80111f8 <uxr_create_session+0x7c>
 80111e4:	f001 f81e 	bl	8012224 <uxr_millis>
 80111e8:	1b40      	subs	r0, r0, r5
 80111ea:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	7962      	ldrb	r2, [r4, #5]
 80111f2:	dd38      	ble.n	8011266 <uxr_create_session+0xea>
 80111f4:	2aff      	cmp	r2, #255	@ 0xff
 80111f6:	d13c      	bne.n	8011272 <uxr_create_session+0xf6>
 80111f8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 80111fa:	a907      	add	r1, sp, #28
 80111fc:	6896      	ldr	r6, [r2, #8]
 80111fe:	6810      	ldr	r0, [r2, #0]
 8011200:	aa08      	add	r2, sp, #32
 8011202:	47b0      	blx	r6
 8011204:	2800      	cmp	r0, #0
 8011206:	d0ed      	beq.n	80111e4 <uxr_create_session+0x68>
 8011208:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801120c:	a81a      	add	r0, sp, #104	@ 0x68
 801120e:	f7fe fba5 	bl	800f95c <ucdr_init_buffer>
 8011212:	2600      	movs	r6, #0
 8011214:	f10d 031a 	add.w	r3, sp, #26
 8011218:	aa06      	add	r2, sp, #24
 801121a:	a91a      	add	r1, sp, #104	@ 0x68
 801121c:	4620      	mov	r0, r4
 801121e:	f88d 6018 	strb.w	r6, [sp, #24]
 8011222:	f000 f975 	bl	8011510 <uxr_read_session_header>
 8011226:	2800      	cmp	r0, #0
 8011228:	d0dc      	beq.n	80111e4 <uxr_create_session+0x68>
 801122a:	4631      	mov	r1, r6
 801122c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011230:	f000 fea4 	bl	8011f7c <uxr_stream_id_from_raw>
 8011234:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011238:	2e01      	cmp	r6, #1
 801123a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801123e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011242:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011246:	d053      	beq.n	80112f0 <uxr_create_session+0x174>
 8011248:	2e02      	cmp	r6, #2
 801124a:	d018      	beq.n	801127e <uxr_create_session+0x102>
 801124c:	2e00      	cmp	r6, #0
 801124e:	d1c9      	bne.n	80111e4 <uxr_create_session+0x68>
 8011250:	4631      	mov	r1, r6
 8011252:	4630      	mov	r0, r6
 8011254:	f000 fe92 	bl	8011f7c <uxr_stream_id_from_raw>
 8011258:	a91a      	add	r1, sp, #104	@ 0x68
 801125a:	4602      	mov	r2, r0
 801125c:	900a      	str	r0, [sp, #40]	@ 0x28
 801125e:	4620      	mov	r0, r4
 8011260:	f7ff faf0 	bl	8010844 <read_submessage_list>
 8011264:	e7be      	b.n	80111e4 <uxr_create_session+0x68>
 8011266:	9b03      	ldr	r3, [sp, #12]
 8011268:	3b01      	subs	r3, #1
 801126a:	9303      	str	r3, [sp, #12]
 801126c:	d001      	beq.n	8011272 <uxr_create_session+0xf6>
 801126e:	2aff      	cmp	r2, #255	@ 0xff
 8011270:	d0ac      	beq.n	80111cc <uxr_create_session+0x50>
 8011272:	2a00      	cmp	r2, #0
 8011274:	d051      	beq.n	801131a <uxr_create_session+0x19e>
 8011276:	2000      	movs	r0, #0
 8011278:	b02b      	add	sp, #172	@ 0xac
 801127a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011282:	9304      	str	r3, [sp, #16]
 8011284:	4639      	mov	r1, r7
 8011286:	4650      	mov	r0, sl
 8011288:	f000 ff66 	bl	8012158 <uxr_get_input_reliable_stream>
 801128c:	4680      	mov	r8, r0
 801128e:	b348      	cbz	r0, 80112e4 <uxr_create_session+0x168>
 8011290:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011292:	9205      	str	r2, [sp, #20]
 8011294:	a81a      	add	r0, sp, #104	@ 0x68
 8011296:	f7fe fb91 	bl	800f9bc <ucdr_buffer_remaining>
 801129a:	4603      	mov	r3, r0
 801129c:	f10d 0019 	add.w	r0, sp, #25
 80112a0:	9000      	str	r0, [sp, #0]
 80112a2:	9a05      	ldr	r2, [sp, #20]
 80112a4:	4649      	mov	r1, r9
 80112a6:	4640      	mov	r0, r8
 80112a8:	f005 fca2 	bl	8016bf0 <uxr_receive_reliable_message>
 80112ac:	b1d0      	cbz	r0, 80112e4 <uxr_create_session+0x168>
 80112ae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d038      	beq.n	8011328 <uxr_create_session+0x1ac>
 80112b6:	9e04      	ldr	r6, [sp, #16]
 80112b8:	e00a      	b.n	80112d0 <uxr_create_session+0x154>
 80112ba:	f04f 0302 	mov.w	r3, #2
 80112be:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80112c2:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 80112c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80112ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80112cc:	f7ff faba 	bl	8010844 <read_submessage_list>
 80112d0:	a922      	add	r1, sp, #136	@ 0x88
 80112d2:	2204      	movs	r2, #4
 80112d4:	4640      	mov	r0, r8
 80112d6:	f005 fd0b 	bl	8016cf0 <uxr_next_input_reliable_buffer_available>
 80112da:	4603      	mov	r3, r0
 80112dc:	a922      	add	r1, sp, #136	@ 0x88
 80112de:	4620      	mov	r0, r4
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d1ea      	bne.n	80112ba <uxr_create_session+0x13e>
 80112e4:	9904      	ldr	r1, [sp, #16]
 80112e6:	463a      	mov	r2, r7
 80112e8:	4620      	mov	r0, r4
 80112ea:	f7ff f927 	bl	801053c <write_submessage_acknack.isra.0>
 80112ee:	e779      	b.n	80111e4 <uxr_create_session+0x68>
 80112f0:	4639      	mov	r1, r7
 80112f2:	4650      	mov	r0, sl
 80112f4:	f000 ff26 	bl	8012144 <uxr_get_input_best_effort_stream>
 80112f8:	2800      	cmp	r0, #0
 80112fa:	f43f af73 	beq.w	80111e4 <uxr_create_session+0x68>
 80112fe:	4649      	mov	r1, r9
 8011300:	f005 fbe2 	bl	8016ac8 <uxr_receive_best_effort_message>
 8011304:	2800      	cmp	r0, #0
 8011306:	f43f af6d 	beq.w	80111e4 <uxr_create_session+0x68>
 801130a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801130e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011310:	a91a      	add	r1, sp, #104	@ 0x68
 8011312:	4620      	mov	r0, r4
 8011314:	f7ff fa96 	bl	8010844 <read_submessage_list>
 8011318:	e764      	b.n	80111e4 <uxr_create_session+0x68>
 801131a:	4650      	mov	r0, sl
 801131c:	f000 fe62 	bl	8011fe4 <uxr_reset_stream_storage>
 8011320:	2001      	movs	r0, #1
 8011322:	b02b      	add	sp, #172	@ 0xac
 8011324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011328:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801132c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801132e:	a91a      	add	r1, sp, #104	@ 0x68
 8011330:	4620      	mov	r0, r4
 8011332:	f7ff fa87 	bl	8010844 <read_submessage_list>
 8011336:	e7be      	b.n	80112b6 <uxr_create_session+0x13a>

08011338 <uxr_prepare_stream_to_write_submessage>:
 8011338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801133c:	b082      	sub	sp, #8
 801133e:	4682      	mov	sl, r0
 8011340:	4610      	mov	r0, r2
 8011342:	4615      	mov	r5, r2
 8011344:	461e      	mov	r6, r3
 8011346:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801134a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801134e:	9101      	str	r1, [sp, #4]
 8011350:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011354:	f000 ff60 	bl	8012218 <uxr_submessage_padding>
 8011358:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801135c:	f105 0904 	add.w	r9, r5, #4
 8011360:	2b01      	cmp	r3, #1
 8011362:	4481      	add	r9, r0
 8011364:	d01d      	beq.n	80113a2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8011366:	2b02      	cmp	r3, #2
 8011368:	d116      	bne.n	8011398 <uxr_prepare_stream_to_write_submessage+0x60>
 801136a:	4621      	mov	r1, r4
 801136c:	f10a 0008 	add.w	r0, sl, #8
 8011370:	f000 fede 	bl	8012130 <uxr_get_output_reliable_stream>
 8011374:	4604      	mov	r4, r0
 8011376:	b158      	cbz	r0, 8011390 <uxr_prepare_stream_to_write_submessage+0x58>
 8011378:	4649      	mov	r1, r9
 801137a:	4632      	mov	r2, r6
 801137c:	f005 fe74 	bl	8017068 <uxr_prepare_reliable_buffer_to_write>
 8011380:	4604      	mov	r4, r0
 8011382:	b12c      	cbz	r4, 8011390 <uxr_prepare_stream_to_write_submessage+0x58>
 8011384:	4643      	mov	r3, r8
 8011386:	b2aa      	uxth	r2, r5
 8011388:	4639      	mov	r1, r7
 801138a:	4630      	mov	r0, r6
 801138c:	f000 ff04 	bl	8012198 <uxr_buffer_submessage_header>
 8011390:	4620      	mov	r0, r4
 8011392:	b002      	add	sp, #8
 8011394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011398:	2400      	movs	r4, #0
 801139a:	4620      	mov	r0, r4
 801139c:	b002      	add	sp, #8
 801139e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113a2:	4621      	mov	r1, r4
 80113a4:	f10a 0008 	add.w	r0, sl, #8
 80113a8:	f000 feba 	bl	8012120 <uxr_get_output_best_effort_stream>
 80113ac:	4604      	mov	r4, r0
 80113ae:	2800      	cmp	r0, #0
 80113b0:	d0ee      	beq.n	8011390 <uxr_prepare_stream_to_write_submessage+0x58>
 80113b2:	4649      	mov	r1, r9
 80113b4:	4632      	mov	r2, r6
 80113b6:	f005 fd87 	bl	8016ec8 <uxr_prepare_best_effort_buffer_to_write>
 80113ba:	4604      	mov	r4, r0
 80113bc:	e7e1      	b.n	8011382 <uxr_prepare_stream_to_write_submessage+0x4a>
 80113be:	bf00      	nop

080113c0 <uxr_init_session_info>:
 80113c0:	0e13      	lsrs	r3, r2, #24
 80113c2:	7043      	strb	r3, [r0, #1]
 80113c4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80113c8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80113cc:	7001      	strb	r1, [r0, #0]
 80113ce:	70c3      	strb	r3, [r0, #3]
 80113d0:	2109      	movs	r1, #9
 80113d2:	23ff      	movs	r3, #255	@ 0xff
 80113d4:	f880 c002 	strb.w	ip, [r0, #2]
 80113d8:	7102      	strb	r2, [r0, #4]
 80113da:	80c1      	strh	r1, [r0, #6]
 80113dc:	7143      	strb	r3, [r0, #5]
 80113de:	4770      	bx	lr

080113e0 <uxr_buffer_create_session>:
 80113e0:	b530      	push	{r4, r5, lr}
 80113e2:	b089      	sub	sp, #36	@ 0x24
 80113e4:	2300      	movs	r3, #0
 80113e6:	4d12      	ldr	r5, [pc, #72]	@ (8011430 <uxr_buffer_create_session+0x50>)
 80113e8:	9307      	str	r3, [sp, #28]
 80113ea:	f8ad 201c 	strh.w	r2, [sp, #28]
 80113ee:	2201      	movs	r2, #1
 80113f0:	9301      	str	r3, [sp, #4]
 80113f2:	80c2      	strh	r2, [r0, #6]
 80113f4:	f88d 2004 	strb.w	r2, [sp, #4]
 80113f8:	682a      	ldr	r2, [r5, #0]
 80113fa:	9200      	str	r2, [sp, #0]
 80113fc:	88aa      	ldrh	r2, [r5, #4]
 80113fe:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011402:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011406:	9202      	str	r2, [sp, #8]
 8011408:	460c      	mov	r4, r1
 801140a:	7802      	ldrb	r2, [r0, #0]
 801140c:	9303      	str	r3, [sp, #12]
 801140e:	4619      	mov	r1, r3
 8011410:	f88d 200c 	strb.w	r2, [sp, #12]
 8011414:	4620      	mov	r0, r4
 8011416:	2210      	movs	r2, #16
 8011418:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801141c:	9306      	str	r3, [sp, #24]
 801141e:	f000 febb 	bl	8012198 <uxr_buffer_submessage_header>
 8011422:	4669      	mov	r1, sp
 8011424:	4620      	mov	r0, r4
 8011426:	f001 feff 	bl	8013228 <uxr_serialize_CREATE_CLIENT_Payload>
 801142a:	b009      	add	sp, #36	@ 0x24
 801142c:	bd30      	pop	{r4, r5, pc}
 801142e:	bf00      	nop
 8011430:	080192e8 	.word	0x080192e8

08011434 <uxr_buffer_delete_session>:
 8011434:	b510      	push	{r4, lr}
 8011436:	4b0c      	ldr	r3, [pc, #48]	@ (8011468 <uxr_buffer_delete_session+0x34>)
 8011438:	b082      	sub	sp, #8
 801143a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801143e:	f8ad c006 	strh.w	ip, [sp, #6]
 8011442:	460c      	mov	r4, r1
 8011444:	2202      	movs	r2, #2
 8011446:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801144a:	80c2      	strh	r2, [r0, #6]
 801144c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011450:	2204      	movs	r2, #4
 8011452:	2300      	movs	r3, #0
 8011454:	2103      	movs	r1, #3
 8011456:	4620      	mov	r0, r4
 8011458:	f000 fe9e 	bl	8012198 <uxr_buffer_submessage_header>
 801145c:	a901      	add	r1, sp, #4
 801145e:	4620      	mov	r0, r4
 8011460:	f001 ff9c 	bl	801339c <uxr_serialize_DELETE_Payload>
 8011464:	b002      	add	sp, #8
 8011466:	bd10      	pop	{r4, pc}
 8011468:	080192e8 	.word	0x080192e8

0801146c <uxr_read_create_session_status>:
 801146c:	b510      	push	{r4, lr}
 801146e:	b088      	sub	sp, #32
 8011470:	4604      	mov	r4, r0
 8011472:	4608      	mov	r0, r1
 8011474:	a901      	add	r1, sp, #4
 8011476:	f001 ffa1 	bl	80133bc <uxr_deserialize_STATUS_AGENT_Payload>
 801147a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801147e:	7163      	strb	r3, [r4, #5]
 8011480:	b008      	add	sp, #32
 8011482:	bd10      	pop	{r4, pc}

08011484 <uxr_read_delete_session_status>:
 8011484:	b510      	push	{r4, lr}
 8011486:	4604      	mov	r4, r0
 8011488:	b084      	sub	sp, #16
 801148a:	4608      	mov	r0, r1
 801148c:	a902      	add	r1, sp, #8
 801148e:	f001 ffc5 	bl	801341c <uxr_deserialize_STATUS_Payload>
 8011492:	88e3      	ldrh	r3, [r4, #6]
 8011494:	2b02      	cmp	r3, #2
 8011496:	d001      	beq.n	801149c <uxr_read_delete_session_status+0x18>
 8011498:	b004      	add	sp, #16
 801149a:	bd10      	pop	{r4, pc}
 801149c:	f10d 000a 	add.w	r0, sp, #10
 80114a0:	f7fe fd9e 	bl	800ffe0 <uxr_object_id_from_raw>
 80114a4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80114a8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80114ac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	2b02      	cmp	r3, #2
 80114b4:	bf04      	itt	eq
 80114b6:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80114ba:	7163      	strbeq	r3, [r4, #5]
 80114bc:	b004      	add	sp, #16
 80114be:	bd10      	pop	{r4, pc}

080114c0 <uxr_stamp_create_session_header>:
 80114c0:	b510      	push	{r4, lr}
 80114c2:	2208      	movs	r2, #8
 80114c4:	b08a      	sub	sp, #40	@ 0x28
 80114c6:	4604      	mov	r4, r0
 80114c8:	eb0d 0002 	add.w	r0, sp, r2
 80114cc:	f7fe fa46 	bl	800f95c <ucdr_init_buffer>
 80114d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114d4:	9400      	str	r4, [sp, #0]
 80114d6:	2300      	movs	r3, #0
 80114d8:	461a      	mov	r2, r3
 80114da:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80114de:	a802      	add	r0, sp, #8
 80114e0:	f001 f854 	bl	801258c <uxr_serialize_message_header>
 80114e4:	b00a      	add	sp, #40	@ 0x28
 80114e6:	bd10      	pop	{r4, pc}

080114e8 <uxr_stamp_session_header>:
 80114e8:	b530      	push	{r4, r5, lr}
 80114ea:	b08d      	sub	sp, #52	@ 0x34
 80114ec:	4604      	mov	r4, r0
 80114ee:	460d      	mov	r5, r1
 80114f0:	9203      	str	r2, [sp, #12]
 80114f2:	4619      	mov	r1, r3
 80114f4:	a804      	add	r0, sp, #16
 80114f6:	2208      	movs	r2, #8
 80114f8:	f7fe fa30 	bl	800f95c <ucdr_init_buffer>
 80114fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011500:	9b03      	ldr	r3, [sp, #12]
 8011502:	9400      	str	r4, [sp, #0]
 8011504:	462a      	mov	r2, r5
 8011506:	a804      	add	r0, sp, #16
 8011508:	f001 f840 	bl	801258c <uxr_serialize_message_header>
 801150c:	b00d      	add	sp, #52	@ 0x34
 801150e:	bd30      	pop	{r4, r5, pc}

08011510 <uxr_read_session_header>:
 8011510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011514:	4607      	mov	r7, r0
 8011516:	b084      	sub	sp, #16
 8011518:	4608      	mov	r0, r1
 801151a:	460c      	mov	r4, r1
 801151c:	4615      	mov	r5, r2
 801151e:	461e      	mov	r6, r3
 8011520:	f7fe fa4c 	bl	800f9bc <ucdr_buffer_remaining>
 8011524:	2808      	cmp	r0, #8
 8011526:	d803      	bhi.n	8011530 <uxr_read_session_header+0x20>
 8011528:	2000      	movs	r0, #0
 801152a:	b004      	add	sp, #16
 801152c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011530:	f10d 080c 	add.w	r8, sp, #12
 8011534:	4633      	mov	r3, r6
 8011536:	462a      	mov	r2, r5
 8011538:	f8cd 8000 	str.w	r8, [sp]
 801153c:	4620      	mov	r0, r4
 801153e:	f10d 010b 	add.w	r1, sp, #11
 8011542:	f001 f841 	bl	80125c8 <uxr_deserialize_message_header>
 8011546:	783a      	ldrb	r2, [r7, #0]
 8011548:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801154c:	4293      	cmp	r3, r2
 801154e:	d1eb      	bne.n	8011528 <uxr_read_session_header+0x18>
 8011550:	061b      	lsls	r3, r3, #24
 8011552:	d41c      	bmi.n	801158e <uxr_read_session_header+0x7e>
 8011554:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011558:	787b      	ldrb	r3, [r7, #1]
 801155a:	429a      	cmp	r2, r3
 801155c:	d003      	beq.n	8011566 <uxr_read_session_header+0x56>
 801155e:	2001      	movs	r0, #1
 8011560:	f080 0001 	eor.w	r0, r0, #1
 8011564:	e7e1      	b.n	801152a <uxr_read_session_header+0x1a>
 8011566:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801156a:	78bb      	ldrb	r3, [r7, #2]
 801156c:	429a      	cmp	r2, r3
 801156e:	f107 0102 	add.w	r1, r7, #2
 8011572:	d1f4      	bne.n	801155e <uxr_read_session_header+0x4e>
 8011574:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011578:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801157c:	429a      	cmp	r2, r3
 801157e:	d1ee      	bne.n	801155e <uxr_read_session_header+0x4e>
 8011580:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011584:	784b      	ldrb	r3, [r1, #1]
 8011586:	429a      	cmp	r2, r3
 8011588:	d1e9      	bne.n	801155e <uxr_read_session_header+0x4e>
 801158a:	2000      	movs	r0, #0
 801158c:	e7e8      	b.n	8011560 <uxr_read_session_header+0x50>
 801158e:	2001      	movs	r0, #1
 8011590:	e7cb      	b.n	801152a <uxr_read_session_header+0x1a>
 8011592:	bf00      	nop

08011594 <uxr_session_header_offset>:
 8011594:	f990 3000 	ldrsb.w	r3, [r0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	bfac      	ite	ge
 801159c:	2008      	movge	r0, #8
 801159e:	2004      	movlt	r0, #4
 80115a0:	4770      	bx	lr
 80115a2:	bf00      	nop

080115a4 <uxr_init_base_object_request>:
 80115a4:	b510      	push	{r4, lr}
 80115a6:	88c3      	ldrh	r3, [r0, #6]
 80115a8:	b082      	sub	sp, #8
 80115aa:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80115ae:	9101      	str	r1, [sp, #4]
 80115b0:	f1a3 010a 	sub.w	r1, r3, #10
 80115b4:	b289      	uxth	r1, r1
 80115b6:	42a1      	cmp	r1, r4
 80115b8:	d80e      	bhi.n	80115d8 <uxr_init_base_object_request+0x34>
 80115ba:	3301      	adds	r3, #1
 80115bc:	b29c      	uxth	r4, r3
 80115be:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80115c2:	b2db      	uxtb	r3, r3
 80115c4:	80c4      	strh	r4, [r0, #6]
 80115c6:	9801      	ldr	r0, [sp, #4]
 80115c8:	7011      	strb	r1, [r2, #0]
 80115ca:	7053      	strb	r3, [r2, #1]
 80115cc:	1c91      	adds	r1, r2, #2
 80115ce:	f7fe fd1b 	bl	8010008 <uxr_object_id_to_raw>
 80115d2:	4620      	mov	r0, r4
 80115d4:	b002      	add	sp, #8
 80115d6:	bd10      	pop	{r4, pc}
 80115d8:	230a      	movs	r3, #10
 80115da:	2100      	movs	r1, #0
 80115dc:	461c      	mov	r4, r3
 80115de:	e7f1      	b.n	80115c4 <uxr_init_base_object_request+0x20>

080115e0 <uxr_parse_base_object_request>:
 80115e0:	b570      	push	{r4, r5, r6, lr}
 80115e2:	4604      	mov	r4, r0
 80115e4:	3002      	adds	r0, #2
 80115e6:	460d      	mov	r5, r1
 80115e8:	4616      	mov	r6, r2
 80115ea:	f7fe fcf9 	bl	800ffe0 <uxr_object_id_from_raw>
 80115ee:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80115f2:	8028      	strh	r0, [r5, #0]
 80115f4:	806b      	strh	r3, [r5, #2]
 80115f6:	7822      	ldrb	r2, [r4, #0]
 80115f8:	7863      	ldrb	r3, [r4, #1]
 80115fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80115fe:	8033      	strh	r3, [r6, #0]
 8011600:	bd70      	pop	{r4, r5, r6, pc}
 8011602:	bf00      	nop

08011604 <uxr_init_framing_io>:
 8011604:	2300      	movs	r3, #0
 8011606:	7041      	strb	r1, [r0, #1]
 8011608:	7003      	strb	r3, [r0, #0]
 801160a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801160c:	4770      	bx	lr
 801160e:	bf00      	nop

08011610 <uxr_write_framed_msg>:
 8011610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011614:	4617      	mov	r7, r2
 8011616:	7842      	ldrb	r2, [r0, #1]
 8011618:	b083      	sub	sp, #12
 801161a:	460e      	mov	r6, r1
 801161c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011620:	469a      	mov	sl, r3
 8011622:	2901      	cmp	r1, #1
 8011624:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011628:	4604      	mov	r4, r0
 801162a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801162e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011632:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8011636:	f240 8137 	bls.w	80118a8 <uxr_write_framed_msg+0x298>
 801163a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801163e:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011642:	2901      	cmp	r1, #1
 8011644:	f04f 0202 	mov.w	r2, #2
 8011648:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801164c:	f240 808f 	bls.w	801176e <uxr_write_framed_msg+0x15e>
 8011650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011652:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8011656:	b2dd      	uxtb	r5, r3
 8011658:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801165c:	2203      	movs	r2, #3
 801165e:	2901      	cmp	r1, #1
 8011660:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011664:	f240 809a 	bls.w	801179c <uxr_write_framed_msg+0x18c>
 8011668:	18a1      	adds	r1, r4, r2
 801166a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801166c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8011670:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011674:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011678:	3201      	adds	r2, #1
 801167a:	2801      	cmp	r0, #1
 801167c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011680:	f240 80a0 	bls.w	80117c4 <uxr_write_framed_msg+0x1b4>
 8011684:	18a0      	adds	r0, r4, r2
 8011686:	3201      	adds	r2, #1
 8011688:	b2d2      	uxtb	r2, r2
 801168a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801168e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011692:	2b00      	cmp	r3, #0
 8011694:	f000 80a9 	beq.w	80117ea <uxr_write_framed_msg+0x1da>
 8011698:	f04f 0900 	mov.w	r9, #0
 801169c:	46c8      	mov	r8, r9
 801169e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80116a2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80116a6:	2901      	cmp	r1, #1
 80116a8:	f240 80c3 	bls.w	8011832 <uxr_write_framed_msg+0x222>
 80116ac:	2a29      	cmp	r2, #41	@ 0x29
 80116ae:	f200 809f 	bhi.w	80117f0 <uxr_write_framed_msg+0x1e0>
 80116b2:	18a1      	adds	r1, r4, r2
 80116b4:	3201      	adds	r2, #1
 80116b6:	b2d2      	uxtb	r2, r2
 80116b8:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80116bc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116c0:	ea89 0303 	eor.w	r3, r9, r3
 80116c4:	498c      	ldr	r1, [pc, #560]	@ (80118f8 <uxr_write_framed_msg+0x2e8>)
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	f108 0801 	add.w	r8, r8, #1
 80116cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80116d0:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80116d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116d6:	4543      	cmp	r3, r8
 80116d8:	d8e1      	bhi.n	801169e <uxr_write_framed_msg+0x8e>
 80116da:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80116de:	fa5f f889 	uxtb.w	r8, r9
 80116e2:	9301      	str	r3, [sp, #4]
 80116e4:	f04f 0900 	mov.w	r9, #0
 80116e8:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80116ec:	fa5f f18a 	uxtb.w	r1, sl
 80116f0:	2901      	cmp	r1, #1
 80116f2:	d921      	bls.n	8011738 <uxr_write_framed_msg+0x128>
 80116f4:	2a29      	cmp	r2, #41	@ 0x29
 80116f6:	f240 80af 	bls.w	8011858 <uxr_write_framed_msg+0x248>
 80116fa:	2500      	movs	r5, #0
 80116fc:	e000      	b.n	8011700 <uxr_write_framed_msg+0xf0>
 80116fe:	b160      	cbz	r0, 801171a <uxr_write_framed_msg+0x10a>
 8011700:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011704:	1b52      	subs	r2, r2, r5
 8011706:	465b      	mov	r3, fp
 8011708:	4421      	add	r1, r4
 801170a:	4638      	mov	r0, r7
 801170c:	47b0      	blx	r6
 801170e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011712:	4405      	add	r5, r0
 8011714:	4295      	cmp	r5, r2
 8011716:	d3f2      	bcc.n	80116fe <uxr_write_framed_msg+0xee>
 8011718:	d003      	beq.n	8011722 <uxr_write_framed_msg+0x112>
 801171a:	2000      	movs	r0, #0
 801171c:	b003      	add	sp, #12
 801171e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011722:	fa5f f18a 	uxtb.w	r1, sl
 8011726:	f04f 0300 	mov.w	r3, #0
 801172a:	2901      	cmp	r1, #1
 801172c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011730:	f04f 0200 	mov.w	r2, #0
 8011734:	f200 8090 	bhi.w	8011858 <uxr_write_framed_msg+0x248>
 8011738:	1c51      	adds	r1, r2, #1
 801173a:	b2c9      	uxtb	r1, r1
 801173c:	2929      	cmp	r1, #41	@ 0x29
 801173e:	d8dc      	bhi.n	80116fa <uxr_write_framed_msg+0xea>
 8011740:	18a5      	adds	r5, r4, r2
 8011742:	4421      	add	r1, r4
 8011744:	3202      	adds	r2, #2
 8011746:	f088 0820 	eor.w	r8, r8, #32
 801174a:	4648      	mov	r0, r9
 801174c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011750:	b2d2      	uxtb	r2, r2
 8011752:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8011756:	f04f 0901 	mov.w	r9, #1
 801175a:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801175e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011762:	2800      	cmp	r0, #0
 8011764:	f040 8085 	bne.w	8011872 <uxr_write_framed_msg+0x262>
 8011768:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801176c:	e7bc      	b.n	80116e8 <uxr_write_framed_msg+0xd8>
 801176e:	4611      	mov	r1, r2
 8011770:	f04f 0c03 	mov.w	ip, #3
 8011774:	2204      	movs	r2, #4
 8011776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011778:	4421      	add	r1, r4
 801177a:	b2dd      	uxtb	r5, r3
 801177c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8011780:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8011784:	44a4      	add	ip, r4
 8011786:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801178a:	f080 0020 	eor.w	r0, r0, #32
 801178e:	2901      	cmp	r1, #1
 8011790:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8011794:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011798:	f63f af66 	bhi.w	8011668 <uxr_write_framed_msg+0x58>
 801179c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801179e:	18a0      	adds	r0, r4, r2
 80117a0:	f085 0520 	eor.w	r5, r5, #32
 80117a4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80117a8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80117ac:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80117b0:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80117b4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80117b8:	3202      	adds	r2, #2
 80117ba:	2801      	cmp	r0, #1
 80117bc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80117c0:	f63f af60 	bhi.w	8011684 <uxr_write_framed_msg+0x74>
 80117c4:	1c50      	adds	r0, r2, #1
 80117c6:	18a5      	adds	r5, r4, r2
 80117c8:	fa54 f080 	uxtab	r0, r4, r0
 80117cc:	3202      	adds	r2, #2
 80117ce:	f081 0120 	eor.w	r1, r1, #32
 80117d2:	b2d2      	uxtb	r2, r2
 80117d4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80117d8:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 80117dc:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80117e0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	f47f af57 	bne.w	8011698 <uxr_write_framed_msg+0x88>
 80117ea:	9301      	str	r3, [sp, #4]
 80117ec:	4698      	mov	r8, r3
 80117ee:	e779      	b.n	80116e4 <uxr_write_framed_msg+0xd4>
 80117f0:	2500      	movs	r5, #0
 80117f2:	e001      	b.n	80117f8 <uxr_write_framed_msg+0x1e8>
 80117f4:	2800      	cmp	r0, #0
 80117f6:	d090      	beq.n	801171a <uxr_write_framed_msg+0x10a>
 80117f8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80117fc:	1b52      	subs	r2, r2, r5
 80117fe:	465b      	mov	r3, fp
 8011800:	4421      	add	r1, r4
 8011802:	4638      	mov	r0, r7
 8011804:	47b0      	blx	r6
 8011806:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801180a:	4405      	add	r5, r0
 801180c:	4295      	cmp	r5, r2
 801180e:	d3f1      	bcc.n	80117f4 <uxr_write_framed_msg+0x1e4>
 8011810:	d183      	bne.n	801171a <uxr_write_framed_msg+0x10a>
 8011812:	f04f 0300 	mov.w	r3, #0
 8011816:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801181a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801181c:	4543      	cmp	r3, r8
 801181e:	d964      	bls.n	80118ea <uxr_write_framed_msg+0x2da>
 8011820:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011824:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011828:	2901      	cmp	r1, #1
 801182a:	f04f 0200 	mov.w	r2, #0
 801182e:	f63f af3d 	bhi.w	80116ac <uxr_write_framed_msg+0x9c>
 8011832:	1c51      	adds	r1, r2, #1
 8011834:	b2c9      	uxtb	r1, r1
 8011836:	2929      	cmp	r1, #41	@ 0x29
 8011838:	d8da      	bhi.n	80117f0 <uxr_write_framed_msg+0x1e0>
 801183a:	18a0      	adds	r0, r4, r2
 801183c:	4421      	add	r1, r4
 801183e:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011842:	3202      	adds	r2, #2
 8011844:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8011848:	b2d2      	uxtb	r2, r2
 801184a:	f083 0020 	eor.w	r0, r3, #32
 801184e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011852:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011856:	e733      	b.n	80116c0 <uxr_write_framed_msg+0xb0>
 8011858:	18a1      	adds	r1, r4, r2
 801185a:	3201      	adds	r2, #1
 801185c:	4648      	mov	r0, r9
 801185e:	b2d2      	uxtb	r2, r2
 8011860:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011864:	f04f 0901 	mov.w	r9, #1
 8011868:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801186c:	2800      	cmp	r0, #0
 801186e:	f43f af7b 	beq.w	8011768 <uxr_write_framed_msg+0x158>
 8011872:	2500      	movs	r5, #0
 8011874:	e002      	b.n	801187c <uxr_write_framed_msg+0x26c>
 8011876:	2800      	cmp	r0, #0
 8011878:	f43f af4f 	beq.w	801171a <uxr_write_framed_msg+0x10a>
 801187c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011880:	1b52      	subs	r2, r2, r5
 8011882:	465b      	mov	r3, fp
 8011884:	4421      	add	r1, r4
 8011886:	4638      	mov	r0, r7
 8011888:	47b0      	blx	r6
 801188a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801188e:	4405      	add	r5, r0
 8011890:	4295      	cmp	r5, r2
 8011892:	d3f0      	bcc.n	8011876 <uxr_write_framed_msg+0x266>
 8011894:	f47f af41 	bne.w	801171a <uxr_write_framed_msg+0x10a>
 8011898:	2300      	movs	r3, #0
 801189a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801189e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118a0:	b298      	uxth	r0, r3
 80118a2:	b003      	add	sp, #12
 80118a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a8:	217d      	movs	r1, #125	@ 0x7d
 80118aa:	f082 0220 	eor.w	r2, r2, #32
 80118ae:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80118b2:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80118b6:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80118ba:	2901      	cmp	r1, #1
 80118bc:	f04f 0203 	mov.w	r2, #3
 80118c0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80118c4:	d804      	bhi.n	80118d0 <uxr_write_framed_msg+0x2c0>
 80118c6:	4611      	mov	r1, r2
 80118c8:	f04f 0c04 	mov.w	ip, #4
 80118cc:	2205      	movs	r2, #5
 80118ce:	e752      	b.n	8011776 <uxr_write_framed_msg+0x166>
 80118d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118d2:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80118d6:	b2dd      	uxtb	r5, r3
 80118d8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80118dc:	2204      	movs	r2, #4
 80118de:	2901      	cmp	r1, #1
 80118e0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80118e4:	f63f aec0 	bhi.w	8011668 <uxr_write_framed_msg+0x58>
 80118e8:	e758      	b.n	801179c <uxr_write_framed_msg+0x18c>
 80118ea:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80118ee:	fa5f f889 	uxtb.w	r8, r9
 80118f2:	9301      	str	r3, [sp, #4]
 80118f4:	2200      	movs	r2, #0
 80118f6:	e6f5      	b.n	80116e4 <uxr_write_framed_msg+0xd4>
 80118f8:	08019acc 	.word	0x08019acc

080118fc <uxr_framing_read_transport>:
 80118fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011900:	4604      	mov	r4, r0
 8011902:	b083      	sub	sp, #12
 8011904:	461f      	mov	r7, r3
 8011906:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801190a:	4689      	mov	r9, r1
 801190c:	4692      	mov	sl, r2
 801190e:	f000 fc89 	bl	8012224 <uxr_millis>
 8011912:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011916:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801191a:	42b3      	cmp	r3, r6
 801191c:	4680      	mov	r8, r0
 801191e:	d061      	beq.n	80119e4 <uxr_framing_read_transport+0xe8>
 8011920:	d81c      	bhi.n	801195c <uxr_framing_read_transport+0x60>
 8011922:	1e75      	subs	r5, r6, #1
 8011924:	1aed      	subs	r5, r5, r3
 8011926:	b2ed      	uxtb	r5, r5
 8011928:	2600      	movs	r6, #0
 801192a:	455d      	cmp	r5, fp
 801192c:	d81f      	bhi.n	801196e <uxr_framing_read_transport+0x72>
 801192e:	19ab      	adds	r3, r5, r6
 8011930:	455b      	cmp	r3, fp
 8011932:	bf84      	itt	hi
 8011934:	ebab 0605 	subhi.w	r6, fp, r5
 8011938:	b2f6      	uxtbhi	r6, r6
 801193a:	b9ed      	cbnz	r5, 8011978 <uxr_framing_read_transport+0x7c>
 801193c:	f04f 0b00 	mov.w	fp, #0
 8011940:	f000 fc70 	bl	8012224 <uxr_millis>
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	eba0 0808 	sub.w	r8, r0, r8
 801194a:	eba3 0308 	sub.w	r3, r3, r8
 801194e:	4658      	mov	r0, fp
 8011950:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011954:	603b      	str	r3, [r7, #0]
 8011956:	b003      	add	sp, #12
 8011958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801195c:	2e00      	cmp	r6, #0
 801195e:	d049      	beq.n	80119f4 <uxr_framing_read_transport+0xf8>
 8011960:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8011964:	b2ed      	uxtb	r5, r5
 8011966:	3e01      	subs	r6, #1
 8011968:	455d      	cmp	r5, fp
 801196a:	b2f6      	uxtb	r6, r6
 801196c:	d9df      	bls.n	801192e <uxr_framing_read_transport+0x32>
 801196e:	fa5f f58b 	uxtb.w	r5, fp
 8011972:	2600      	movs	r6, #0
 8011974:	2d00      	cmp	r5, #0
 8011976:	d0e1      	beq.n	801193c <uxr_framing_read_transport+0x40>
 8011978:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801197c:	3102      	adds	r1, #2
 801197e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011980:	9300      	str	r3, [sp, #0]
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	4421      	add	r1, r4
 8011986:	462a      	mov	r2, r5
 8011988:	4650      	mov	r0, sl
 801198a:	47c8      	blx	r9
 801198c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011990:	4a1a      	ldr	r2, [pc, #104]	@ (80119fc <uxr_framing_read_transport+0x100>)
 8011992:	4403      	add	r3, r0
 8011994:	0859      	lsrs	r1, r3, #1
 8011996:	fba2 2101 	umull	r2, r1, r2, r1
 801199a:	0889      	lsrs	r1, r1, #2
 801199c:	222a      	movs	r2, #42	@ 0x2a
 801199e:	fb02 3111 	mls	r1, r2, r1, r3
 80119a2:	4683      	mov	fp, r0
 80119a4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80119a8:	2800      	cmp	r0, #0
 80119aa:	d0c7      	beq.n	801193c <uxr_framing_read_transport+0x40>
 80119ac:	42a8      	cmp	r0, r5
 80119ae:	d1c7      	bne.n	8011940 <uxr_framing_read_transport+0x44>
 80119b0:	2e00      	cmp	r6, #0
 80119b2:	d0c5      	beq.n	8011940 <uxr_framing_read_transport+0x44>
 80119b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80119b6:	9300      	str	r3, [sp, #0]
 80119b8:	3102      	adds	r1, #2
 80119ba:	4632      	mov	r2, r6
 80119bc:	4421      	add	r1, r4
 80119be:	2300      	movs	r3, #0
 80119c0:	4650      	mov	r0, sl
 80119c2:	47c8      	blx	r9
 80119c4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80119c8:	4a0c      	ldr	r2, [pc, #48]	@ (80119fc <uxr_framing_read_transport+0x100>)
 80119ca:	180b      	adds	r3, r1, r0
 80119cc:	0859      	lsrs	r1, r3, #1
 80119ce:	fba2 1201 	umull	r1, r2, r2, r1
 80119d2:	0892      	lsrs	r2, r2, #2
 80119d4:	212a      	movs	r1, #42	@ 0x2a
 80119d6:	fb01 3312 	mls	r3, r1, r2, r3
 80119da:	eb00 0b05 	add.w	fp, r0, r5
 80119de:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80119e2:	e7ad      	b.n	8011940 <uxr_framing_read_transport+0x44>
 80119e4:	2600      	movs	r6, #0
 80119e6:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80119ea:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80119ec:	d9bf      	bls.n	801196e <uxr_framing_read_transport+0x72>
 80119ee:	2102      	movs	r1, #2
 80119f0:	2529      	movs	r5, #41	@ 0x29
 80119f2:	e7c4      	b.n	801197e <uxr_framing_read_transport+0x82>
 80119f4:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80119f8:	b2ed      	uxtb	r5, r5
 80119fa:	e796      	b.n	801192a <uxr_framing_read_transport+0x2e>
 80119fc:	30c30c31 	.word	0x30c30c31

08011a00 <uxr_read_framed_msg>:
 8011a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a04:	461e      	mov	r6, r3
 8011a06:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8011a0a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8011a0e:	429d      	cmp	r5, r3
 8011a10:	b083      	sub	sp, #12
 8011a12:	4604      	mov	r4, r0
 8011a14:	4688      	mov	r8, r1
 8011a16:	4691      	mov	r9, r2
 8011a18:	f000 8188 	beq.w	8011d2c <uxr_read_framed_msg+0x32c>
 8011a1c:	7823      	ldrb	r3, [r4, #0]
 8011a1e:	4dc1      	ldr	r5, [pc, #772]	@ (8011d24 <uxr_read_framed_msg+0x324>)
 8011a20:	4fc1      	ldr	r7, [pc, #772]	@ (8011d28 <uxr_read_framed_msg+0x328>)
 8011a22:	2b07      	cmp	r3, #7
 8011a24:	d8fd      	bhi.n	8011a22 <uxr_read_framed_msg+0x22>
 8011a26:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011a2a:	0115      	.short	0x0115
 8011a2c:	00d600f6 	.word	0x00d600f6
 8011a30:	009000b9 	.word	0x009000b9
 8011a34:	0030004d 	.word	0x0030004d
 8011a38:	0008      	.short	0x0008
 8011a3a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011a3e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011a42:	4299      	cmp	r1, r3
 8011a44:	f000 814a 	beq.w	8011cdc <uxr_read_framed_msg+0x2dc>
 8011a48:	18e2      	adds	r2, r4, r3
 8011a4a:	7892      	ldrb	r2, [r2, #2]
 8011a4c:	2a7d      	cmp	r2, #125	@ 0x7d
 8011a4e:	f000 8199 	beq.w	8011d84 <uxr_read_framed_msg+0x384>
 8011a52:	3301      	adds	r3, #1
 8011a54:	0858      	lsrs	r0, r3, #1
 8011a56:	fba5 1000 	umull	r1, r0, r5, r0
 8011a5a:	0880      	lsrs	r0, r0, #2
 8011a5c:	212a      	movs	r1, #42	@ 0x2a
 8011a5e:	fb01 3310 	mls	r3, r1, r0, r3
 8011a62:	2a7e      	cmp	r2, #126	@ 0x7e
 8011a64:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011a68:	f000 8252 	beq.w	8011f10 <uxr_read_framed_msg+0x510>
 8011a6c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8011a6e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8011a70:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	2200      	movs	r2, #0
 8011a78:	4299      	cmp	r1, r3
 8011a7a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8011a7c:	7022      	strb	r2, [r4, #0]
 8011a7e:	f000 8179 	beq.w	8011d74 <uxr_read_framed_msg+0x374>
 8011a82:	2000      	movs	r0, #0
 8011a84:	b003      	add	sp, #12
 8011a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a8a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011a8e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011a92:	4299      	cmp	r1, r3
 8011a94:	f000 8131 	beq.w	8011cfa <uxr_read_framed_msg+0x2fa>
 8011a98:	18e2      	adds	r2, r4, r3
 8011a9a:	7890      	ldrb	r0, [r2, #2]
 8011a9c:	287d      	cmp	r0, #125	@ 0x7d
 8011a9e:	f000 8190 	beq.w	8011dc2 <uxr_read_framed_msg+0x3c2>
 8011aa2:	3301      	adds	r3, #1
 8011aa4:	085a      	lsrs	r2, r3, #1
 8011aa6:	fba5 1202 	umull	r1, r2, r5, r2
 8011aaa:	0892      	lsrs	r2, r2, #2
 8011aac:	212a      	movs	r1, #42	@ 0x2a
 8011aae:	fb01 3312 	mls	r3, r1, r2, r3
 8011ab2:	287e      	cmp	r0, #126	@ 0x7e
 8011ab4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011ab8:	f000 821a 	beq.w	8011ef0 <uxr_read_framed_msg+0x4f0>
 8011abc:	2307      	movs	r3, #7
 8011abe:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8011ac0:	7023      	strb	r3, [r4, #0]
 8011ac2:	e7ae      	b.n	8011a22 <uxr_read_framed_msg+0x22>
 8011ac4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011ac6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011aca:	459e      	cmp	lr, r3
 8011acc:	d938      	bls.n	8011b40 <uxr_read_framed_msg+0x140>
 8011ace:	ee07 8a90 	vmov	s15, r8
 8011ad2:	212a      	movs	r1, #42	@ 0x2a
 8011ad4:	e020      	b.n	8011b18 <uxr_read_framed_msg+0x118>
 8011ad6:	f89b c002 	ldrb.w	ip, [fp, #2]
 8011ada:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8011ade:	f000 80d4 	beq.w	8011c8a <uxr_read_framed_msg+0x28a>
 8011ae2:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011ae6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011aea:	f000 8219 	beq.w	8011f20 <uxr_read_framed_msg+0x520>
 8011aee:	f806 c003 	strb.w	ip, [r6, r3]
 8011af2:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8011af6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011af8:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011afc:	ea8a 000c 	eor.w	r0, sl, ip
 8011b00:	b2c0      	uxtb	r0, r0
 8011b02:	3301      	adds	r3, #1
 8011b04:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8011b0e:	4573      	cmp	r3, lr
 8011b10:	8663      	strh	r3, [r4, #50]	@ 0x32
 8011b12:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011b14:	f080 8120 	bcs.w	8011d58 <uxr_read_framed_msg+0x358>
 8011b18:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8011b1c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011b20:	f100 0c01 	add.w	ip, r0, #1
 8011b24:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011b28:	fba5 8202 	umull	r8, r2, r5, r2
 8011b2c:	0892      	lsrs	r2, r2, #2
 8011b2e:	4582      	cmp	sl, r0
 8011b30:	eb04 0b00 	add.w	fp, r4, r0
 8011b34:	fb01 c212 	mls	r2, r1, r2, ip
 8011b38:	d1cd      	bne.n	8011ad6 <uxr_read_framed_msg+0xd6>
 8011b3a:	ee17 8a90 	vmov	r8, s15
 8011b3e:	459e      	cmp	lr, r3
 8011b40:	f040 8111 	bne.w	8011d66 <uxr_read_framed_msg+0x366>
 8011b44:	2306      	movs	r3, #6
 8011b46:	7023      	strb	r3, [r4, #0]
 8011b48:	e76b      	b.n	8011a22 <uxr_read_framed_msg+0x22>
 8011b4a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011b4e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011b52:	4298      	cmp	r0, r3
 8011b54:	f000 80c2 	beq.w	8011cdc <uxr_read_framed_msg+0x2dc>
 8011b58:	18e2      	adds	r2, r4, r3
 8011b5a:	7891      	ldrb	r1, [r2, #2]
 8011b5c:	297d      	cmp	r1, #125	@ 0x7d
 8011b5e:	f000 814c 	beq.w	8011dfa <uxr_read_framed_msg+0x3fa>
 8011b62:	3301      	adds	r3, #1
 8011b64:	085a      	lsrs	r2, r3, #1
 8011b66:	fba5 0202 	umull	r0, r2, r5, r2
 8011b6a:	0892      	lsrs	r2, r2, #2
 8011b6c:	202a      	movs	r0, #42	@ 0x2a
 8011b6e:	fb00 3312 	mls	r3, r0, r2, r3
 8011b72:	297e      	cmp	r1, #126	@ 0x7e
 8011b74:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011b78:	f000 81ca 	beq.w	8011f10 <uxr_read_framed_msg+0x510>
 8011b7c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8011b7e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011b82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	2000      	movs	r0, #0
 8011b88:	428b      	cmp	r3, r1
 8011b8a:	8623      	strh	r3, [r4, #48]	@ 0x30
 8011b8c:	8660      	strh	r0, [r4, #50]	@ 0x32
 8011b8e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8011b90:	f240 80df 	bls.w	8011d52 <uxr_read_framed_msg+0x352>
 8011b94:	7020      	strb	r0, [r4, #0]
 8011b96:	b003      	add	sp, #12
 8011b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b9c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011ba0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011ba4:	4299      	cmp	r1, r3
 8011ba6:	f000 80a8 	beq.w	8011cfa <uxr_read_framed_msg+0x2fa>
 8011baa:	18e2      	adds	r2, r4, r3
 8011bac:	7890      	ldrb	r0, [r2, #2]
 8011bae:	287d      	cmp	r0, #125	@ 0x7d
 8011bb0:	f000 8164 	beq.w	8011e7c <uxr_read_framed_msg+0x47c>
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	085a      	lsrs	r2, r3, #1
 8011bb8:	fba5 1202 	umull	r1, r2, r5, r2
 8011bbc:	0892      	lsrs	r2, r2, #2
 8011bbe:	212a      	movs	r1, #42	@ 0x2a
 8011bc0:	fb01 3312 	mls	r3, r1, r2, r3
 8011bc4:	287e      	cmp	r0, #126	@ 0x7e
 8011bc6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011bca:	f000 8191 	beq.w	8011ef0 <uxr_read_framed_msg+0x4f0>
 8011bce:	2304      	movs	r3, #4
 8011bd0:	8620      	strh	r0, [r4, #48]	@ 0x30
 8011bd2:	7023      	strb	r3, [r4, #0]
 8011bd4:	e725      	b.n	8011a22 <uxr_read_framed_msg+0x22>
 8011bd6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011bda:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011bde:	4290      	cmp	r0, r2
 8011be0:	f000 80b3 	beq.w	8011d4a <uxr_read_framed_msg+0x34a>
 8011be4:	18a3      	adds	r3, r4, r2
 8011be6:	7899      	ldrb	r1, [r3, #2]
 8011be8:	297d      	cmp	r1, #125	@ 0x7d
 8011bea:	f000 8164 	beq.w	8011eb6 <uxr_read_framed_msg+0x4b6>
 8011bee:	3201      	adds	r2, #1
 8011bf0:	0850      	lsrs	r0, r2, #1
 8011bf2:	fba5 3000 	umull	r3, r0, r5, r0
 8011bf6:	0880      	lsrs	r0, r0, #2
 8011bf8:	232a      	movs	r3, #42	@ 0x2a
 8011bfa:	fb03 2210 	mls	r2, r3, r0, r2
 8011bfe:	297e      	cmp	r1, #126	@ 0x7e
 8011c00:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011c04:	f000 8188 	beq.w	8011f18 <uxr_read_framed_msg+0x518>
 8011c08:	7863      	ldrb	r3, [r4, #1]
 8011c0a:	428b      	cmp	r3, r1
 8011c0c:	bf0c      	ite	eq
 8011c0e:	2303      	moveq	r3, #3
 8011c10:	2300      	movne	r3, #0
 8011c12:	7023      	strb	r3, [r4, #0]
 8011c14:	e705      	b.n	8011a22 <uxr_read_framed_msg+0x22>
 8011c16:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011c1a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011c1e:	2200      	movs	r2, #0
 8011c20:	4299      	cmp	r1, r3
 8011c22:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8011c26:	d06c      	beq.n	8011d02 <uxr_read_framed_msg+0x302>
 8011c28:	18e2      	adds	r2, r4, r3
 8011c2a:	7890      	ldrb	r0, [r2, #2]
 8011c2c:	287d      	cmp	r0, #125	@ 0x7d
 8011c2e:	f000 8101 	beq.w	8011e34 <uxr_read_framed_msg+0x434>
 8011c32:	3301      	adds	r3, #1
 8011c34:	085a      	lsrs	r2, r3, #1
 8011c36:	fba5 1202 	umull	r1, r2, r5, r2
 8011c3a:	0892      	lsrs	r2, r2, #2
 8011c3c:	212a      	movs	r1, #42	@ 0x2a
 8011c3e:	fb01 3312 	mls	r3, r1, r2, r3
 8011c42:	287e      	cmp	r0, #126	@ 0x7e
 8011c44:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8011c48:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011c4c:	d059      	beq.n	8011d02 <uxr_read_framed_msg+0x302>
 8011c4e:	2302      	movs	r3, #2
 8011c50:	7023      	strb	r3, [r4, #0]
 8011c52:	e6e6      	b.n	8011a22 <uxr_read_framed_msg+0x22>
 8011c54:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011c58:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011c5c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8011c60:	1c51      	adds	r1, r2, #1
 8011c62:	084b      	lsrs	r3, r1, #1
 8011c64:	fba5 c303 	umull	ip, r3, r5, r3
 8011c68:	089b      	lsrs	r3, r3, #2
 8011c6a:	fb0e 1313 	mls	r3, lr, r3, r1
 8011c6e:	4592      	cmp	sl, r2
 8011c70:	eb04 0002 	add.w	r0, r4, r2
 8011c74:	b2da      	uxtb	r2, r3
 8011c76:	f43f af04 	beq.w	8011a82 <uxr_read_framed_msg+0x82>
 8011c7a:	7883      	ldrb	r3, [r0, #2]
 8011c7c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011c80:	2b7e      	cmp	r3, #126	@ 0x7e
 8011c82:	d1ed      	bne.n	8011c60 <uxr_read_framed_msg+0x260>
 8011c84:	2301      	movs	r3, #1
 8011c86:	7023      	strb	r3, [r4, #0]
 8011c88:	e6cb      	b.n	8011a22 <uxr_read_framed_msg+0x22>
 8011c8a:	f100 0c01 	add.w	ip, r0, #1
 8011c8e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011c92:	fba5 8202 	umull	r8, r2, r5, r2
 8011c96:	0892      	lsrs	r2, r2, #2
 8011c98:	fb01 c212 	mls	r2, r1, r2, ip
 8011c9c:	eb04 0c02 	add.w	ip, r4, r2
 8011ca0:	b2d2      	uxtb	r2, r2
 8011ca2:	4592      	cmp	sl, r2
 8011ca4:	f100 0002 	add.w	r0, r0, #2
 8011ca8:	f43f af47 	beq.w	8011b3a <uxr_read_framed_msg+0x13a>
 8011cac:	0842      	lsrs	r2, r0, #1
 8011cae:	f89c a002 	ldrb.w	sl, [ip, #2]
 8011cb2:	fba5 8202 	umull	r8, r2, r5, r2
 8011cb6:	0892      	lsrs	r2, r2, #2
 8011cb8:	fb01 0012 	mls	r0, r1, r2, r0
 8011cbc:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8011cc0:	f08a 0c20 	eor.w	ip, sl, #32
 8011cc4:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8011cc8:	f47f af11 	bne.w	8011aee <uxr_read_framed_msg+0xee>
 8011ccc:	459e      	cmp	lr, r3
 8011cce:	ee17 8a90 	vmov	r8, s15
 8011cd2:	f43f af37 	beq.w	8011b44 <uxr_read_framed_msg+0x144>
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	7023      	strb	r3, [r4, #0]
 8011cda:	e6a2      	b.n	8011a22 <uxr_read_framed_msg+0x22>
 8011cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	9301      	str	r3, [sp, #4]
 8011ce4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ce6:	464a      	mov	r2, r9
 8011ce8:	4641      	mov	r1, r8
 8011cea:	4620      	mov	r0, r4
 8011cec:	f7ff fe06 	bl	80118fc <uxr_framing_read_transport>
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	f43f aec6 	beq.w	8011a82 <uxr_read_framed_msg+0x82>
 8011cf6:	7823      	ldrb	r3, [r4, #0]
 8011cf8:	e693      	b.n	8011a22 <uxr_read_framed_msg+0x22>
 8011cfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cfc:	9300      	str	r3, [sp, #0]
 8011cfe:	2302      	movs	r3, #2
 8011d00:	e7ef      	b.n	8011ce2 <uxr_read_framed_msg+0x2e2>
 8011d02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d04:	9300      	str	r3, [sp, #0]
 8011d06:	2304      	movs	r3, #4
 8011d08:	9301      	str	r3, [sp, #4]
 8011d0a:	464a      	mov	r2, r9
 8011d0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d0e:	4641      	mov	r1, r8
 8011d10:	4620      	mov	r0, r4
 8011d12:	f7ff fdf3 	bl	80118fc <uxr_framing_read_transport>
 8011d16:	2800      	cmp	r0, #0
 8011d18:	d1ed      	bne.n	8011cf6 <uxr_read_framed_msg+0x2f6>
 8011d1a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011d1e:	2b7e      	cmp	r3, #126	@ 0x7e
 8011d20:	d0e9      	beq.n	8011cf6 <uxr_read_framed_msg+0x2f6>
 8011d22:	e6ae      	b.n	8011a82 <uxr_read_framed_msg+0x82>
 8011d24:	30c30c31 	.word	0x30c30c31
 8011d28:	08019acc 	.word	0x08019acc
 8011d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d2e:	9300      	str	r3, [sp, #0]
 8011d30:	2305      	movs	r3, #5
 8011d32:	9301      	str	r3, [sp, #4]
 8011d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d36:	f7ff fde1 	bl	80118fc <uxr_framing_read_transport>
 8011d3a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011d3e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011d42:	429a      	cmp	r2, r3
 8011d44:	f43f ae9d 	beq.w	8011a82 <uxr_read_framed_msg+0x82>
 8011d48:	e668      	b.n	8011a1c <uxr_read_framed_msg+0x1c>
 8011d4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d4c:	9300      	str	r3, [sp, #0]
 8011d4e:	2303      	movs	r3, #3
 8011d50:	e7c7      	b.n	8011ce2 <uxr_read_framed_msg+0x2e2>
 8011d52:	2305      	movs	r3, #5
 8011d54:	7023      	strb	r3, [r4, #0]
 8011d56:	e664      	b.n	8011a22 <uxr_read_framed_msg+0x22>
 8011d58:	ee17 8a90 	vmov	r8, s15
 8011d5c:	f43f aef2 	beq.w	8011b44 <uxr_read_framed_msg+0x144>
 8011d60:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011d64:	d08e      	beq.n	8011c84 <uxr_read_framed_msg+0x284>
 8011d66:	ebae 0303 	sub.w	r3, lr, r3
 8011d6a:	3302      	adds	r3, #2
 8011d6c:	9301      	str	r3, [sp, #4]
 8011d6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d70:	9300      	str	r3, [sp, #0]
 8011d72:	e7b7      	b.n	8011ce4 <uxr_read_framed_msg+0x2e4>
 8011d74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011d76:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011d7a:	7013      	strb	r3, [r2, #0]
 8011d7c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8011d7e:	b003      	add	sp, #12
 8011d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d84:	f103 0c01 	add.w	ip, r3, #1
 8011d88:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011d8c:	fba5 0202 	umull	r0, r2, r5, r2
 8011d90:	0892      	lsrs	r2, r2, #2
 8011d92:	202a      	movs	r0, #42	@ 0x2a
 8011d94:	fb00 c212 	mls	r2, r0, r2, ip
 8011d98:	fa5f fc82 	uxtb.w	ip, r2
 8011d9c:	4561      	cmp	r1, ip
 8011d9e:	d09d      	beq.n	8011cdc <uxr_read_framed_msg+0x2dc>
 8011da0:	3302      	adds	r3, #2
 8011da2:	4422      	add	r2, r4
 8011da4:	0859      	lsrs	r1, r3, #1
 8011da6:	7892      	ldrb	r2, [r2, #2]
 8011da8:	fba5 c101 	umull	ip, r1, r5, r1
 8011dac:	0889      	lsrs	r1, r1, #2
 8011dae:	fb00 3311 	mls	r3, r0, r1, r3
 8011db2:	2a7e      	cmp	r2, #126	@ 0x7e
 8011db4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011db8:	f000 80aa 	beq.w	8011f10 <uxr_read_framed_msg+0x510>
 8011dbc:	f082 0220 	eor.w	r2, r2, #32
 8011dc0:	e654      	b.n	8011a6c <uxr_read_framed_msg+0x6c>
 8011dc2:	1c58      	adds	r0, r3, #1
 8011dc4:	0842      	lsrs	r2, r0, #1
 8011dc6:	fba5 c202 	umull	ip, r2, r5, r2
 8011dca:	0892      	lsrs	r2, r2, #2
 8011dcc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011dd0:	fb0c 0212 	mls	r2, ip, r2, r0
 8011dd4:	b2d0      	uxtb	r0, r2
 8011dd6:	4281      	cmp	r1, r0
 8011dd8:	d08f      	beq.n	8011cfa <uxr_read_framed_msg+0x2fa>
 8011dda:	4422      	add	r2, r4
 8011ddc:	3302      	adds	r3, #2
 8011dde:	7890      	ldrb	r0, [r2, #2]
 8011de0:	085a      	lsrs	r2, r3, #1
 8011de2:	fba5 1202 	umull	r1, r2, r5, r2
 8011de6:	0892      	lsrs	r2, r2, #2
 8011de8:	fb0c 3312 	mls	r3, ip, r2, r3
 8011dec:	287e      	cmp	r0, #126	@ 0x7e
 8011dee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011df2:	d07d      	beq.n	8011ef0 <uxr_read_framed_msg+0x4f0>
 8011df4:	f080 0020 	eor.w	r0, r0, #32
 8011df8:	e660      	b.n	8011abc <uxr_read_framed_msg+0xbc>
 8011dfa:	1c59      	adds	r1, r3, #1
 8011dfc:	084a      	lsrs	r2, r1, #1
 8011dfe:	fba5 c202 	umull	ip, r2, r5, r2
 8011e02:	0892      	lsrs	r2, r2, #2
 8011e04:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011e08:	fb0c 1212 	mls	r2, ip, r2, r1
 8011e0c:	b2d1      	uxtb	r1, r2
 8011e0e:	4288      	cmp	r0, r1
 8011e10:	f43f af64 	beq.w	8011cdc <uxr_read_framed_msg+0x2dc>
 8011e14:	4422      	add	r2, r4
 8011e16:	3302      	adds	r3, #2
 8011e18:	7891      	ldrb	r1, [r2, #2]
 8011e1a:	085a      	lsrs	r2, r3, #1
 8011e1c:	fba5 0202 	umull	r0, r2, r5, r2
 8011e20:	0892      	lsrs	r2, r2, #2
 8011e22:	fb0c 3312 	mls	r3, ip, r2, r3
 8011e26:	297e      	cmp	r1, #126	@ 0x7e
 8011e28:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011e2c:	d070      	beq.n	8011f10 <uxr_read_framed_msg+0x510>
 8011e2e:	f081 0120 	eor.w	r1, r1, #32
 8011e32:	e6a3      	b.n	8011b7c <uxr_read_framed_msg+0x17c>
 8011e34:	f103 0c01 	add.w	ip, r3, #1
 8011e38:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011e3c:	fba5 0202 	umull	r0, r2, r5, r2
 8011e40:	0892      	lsrs	r2, r2, #2
 8011e42:	202a      	movs	r0, #42	@ 0x2a
 8011e44:	fb00 c212 	mls	r2, r0, r2, ip
 8011e48:	fa5f fc82 	uxtb.w	ip, r2
 8011e4c:	4561      	cmp	r1, ip
 8011e4e:	f43f af58 	beq.w	8011d02 <uxr_read_framed_msg+0x302>
 8011e52:	4422      	add	r2, r4
 8011e54:	3302      	adds	r3, #2
 8011e56:	7891      	ldrb	r1, [r2, #2]
 8011e58:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011e5c:	085a      	lsrs	r2, r3, #1
 8011e5e:	fba5 c202 	umull	ip, r2, r5, r2
 8011e62:	0892      	lsrs	r2, r2, #2
 8011e64:	fb00 3312 	mls	r3, r0, r2, r3
 8011e68:	297e      	cmp	r1, #126	@ 0x7e
 8011e6a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011e6e:	f43f af48 	beq.w	8011d02 <uxr_read_framed_msg+0x302>
 8011e72:	f081 0120 	eor.w	r1, r1, #32
 8011e76:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011e7a:	e6e8      	b.n	8011c4e <uxr_read_framed_msg+0x24e>
 8011e7c:	1c58      	adds	r0, r3, #1
 8011e7e:	0842      	lsrs	r2, r0, #1
 8011e80:	fba5 c202 	umull	ip, r2, r5, r2
 8011e84:	0892      	lsrs	r2, r2, #2
 8011e86:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011e8a:	fb0c 0212 	mls	r2, ip, r2, r0
 8011e8e:	b2d0      	uxtb	r0, r2
 8011e90:	4281      	cmp	r1, r0
 8011e92:	f43f af32 	beq.w	8011cfa <uxr_read_framed_msg+0x2fa>
 8011e96:	4422      	add	r2, r4
 8011e98:	3302      	adds	r3, #2
 8011e9a:	7890      	ldrb	r0, [r2, #2]
 8011e9c:	085a      	lsrs	r2, r3, #1
 8011e9e:	fba5 1202 	umull	r1, r2, r5, r2
 8011ea2:	0892      	lsrs	r2, r2, #2
 8011ea4:	fb0c 3312 	mls	r3, ip, r2, r3
 8011ea8:	287e      	cmp	r0, #126	@ 0x7e
 8011eaa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011eae:	d01f      	beq.n	8011ef0 <uxr_read_framed_msg+0x4f0>
 8011eb0:	f080 0020 	eor.w	r0, r0, #32
 8011eb4:	e68b      	b.n	8011bce <uxr_read_framed_msg+0x1ce>
 8011eb6:	1c51      	adds	r1, r2, #1
 8011eb8:	084b      	lsrs	r3, r1, #1
 8011eba:	fba5 c303 	umull	ip, r3, r5, r3
 8011ebe:	089b      	lsrs	r3, r3, #2
 8011ec0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011ec4:	fb0c 1313 	mls	r3, ip, r3, r1
 8011ec8:	b2d9      	uxtb	r1, r3
 8011eca:	4288      	cmp	r0, r1
 8011ecc:	f43f af3d 	beq.w	8011d4a <uxr_read_framed_msg+0x34a>
 8011ed0:	3202      	adds	r2, #2
 8011ed2:	4423      	add	r3, r4
 8011ed4:	0850      	lsrs	r0, r2, #1
 8011ed6:	789b      	ldrb	r3, [r3, #2]
 8011ed8:	fba5 1000 	umull	r1, r0, r5, r0
 8011edc:	0880      	lsrs	r0, r0, #2
 8011ede:	fb0c 2210 	mls	r2, ip, r0, r2
 8011ee2:	2b7e      	cmp	r3, #126	@ 0x7e
 8011ee4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011ee8:	d016      	beq.n	8011f18 <uxr_read_framed_msg+0x518>
 8011eea:	f083 0120 	eor.w	r1, r3, #32
 8011eee:	e68b      	b.n	8011c08 <uxr_read_framed_msg+0x208>
 8011ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ef2:	9300      	str	r3, [sp, #0]
 8011ef4:	2302      	movs	r3, #2
 8011ef6:	9301      	str	r3, [sp, #4]
 8011ef8:	464a      	mov	r2, r9
 8011efa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011efc:	4641      	mov	r1, r8
 8011efe:	4620      	mov	r0, r4
 8011f00:	f7ff fcfc 	bl	80118fc <uxr_framing_read_transport>
 8011f04:	2800      	cmp	r0, #0
 8011f06:	f47f aef6 	bne.w	8011cf6 <uxr_read_framed_msg+0x2f6>
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	7023      	strb	r3, [r4, #0]
 8011f0e:	e588      	b.n	8011a22 <uxr_read_framed_msg+0x22>
 8011f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f12:	9300      	str	r3, [sp, #0]
 8011f14:	2301      	movs	r3, #1
 8011f16:	e7ee      	b.n	8011ef6 <uxr_read_framed_msg+0x4f6>
 8011f18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f1a:	9300      	str	r3, [sp, #0]
 8011f1c:	2303      	movs	r3, #3
 8011f1e:	e7ea      	b.n	8011ef6 <uxr_read_framed_msg+0x4f6>
 8011f20:	ee17 8a90 	vmov	r8, s15
 8011f24:	e6ae      	b.n	8011c84 <uxr_read_framed_msg+0x284>
 8011f26:	bf00      	nop

08011f28 <uxr_stream_id>:
 8011f28:	2901      	cmp	r1, #1
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	d01d      	beq.n	8011f6a <uxr_stream_id+0x42>
 8011f2e:	2902      	cmp	r1, #2
 8011f30:	f04f 0c00 	mov.w	ip, #0
 8011f34:	d01e      	beq.n	8011f74 <uxr_stream_id+0x4c>
 8011f36:	2300      	movs	r3, #0
 8011f38:	f36c 0307 	bfi	r3, ip, #0, #8
 8011f3c:	f360 230f 	bfi	r3, r0, #8, #8
 8011f40:	f361 4317 	bfi	r3, r1, #16, #8
 8011f44:	f362 631f 	bfi	r3, r2, #24, #8
 8011f48:	b2da      	uxtb	r2, r3
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	f362 0007 	bfi	r0, r2, #0, #8
 8011f50:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011f54:	f362 200f 	bfi	r0, r2, #8, #8
 8011f58:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011f5c:	f362 4017 	bfi	r0, r2, #16, #8
 8011f60:	0e1b      	lsrs	r3, r3, #24
 8011f62:	f363 601f 	bfi	r0, r3, #24, #8
 8011f66:	b002      	add	sp, #8
 8011f68:	4770      	bx	lr
 8011f6a:	f100 0c01 	add.w	ip, r0, #1
 8011f6e:	fa5f fc8c 	uxtb.w	ip, ip
 8011f72:	e7e0      	b.n	8011f36 <uxr_stream_id+0xe>
 8011f74:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011f78:	e7dd      	b.n	8011f36 <uxr_stream_id+0xe>
 8011f7a:	bf00      	nop

08011f7c <uxr_stream_id_from_raw>:
 8011f7c:	b082      	sub	sp, #8
 8011f7e:	b130      	cbz	r0, 8011f8e <uxr_stream_id_from_raw+0x12>
 8011f80:	0603      	lsls	r3, r0, #24
 8011f82:	d420      	bmi.n	8011fc6 <uxr_stream_id_from_raw+0x4a>
 8011f84:	1e42      	subs	r2, r0, #1
 8011f86:	b2d2      	uxtb	r2, r2
 8011f88:	f04f 0c01 	mov.w	ip, #1
 8011f8c:	e001      	b.n	8011f92 <uxr_stream_id_from_raw+0x16>
 8011f8e:	4684      	mov	ip, r0
 8011f90:	4602      	mov	r2, r0
 8011f92:	2300      	movs	r3, #0
 8011f94:	f360 0307 	bfi	r3, r0, #0, #8
 8011f98:	f362 230f 	bfi	r3, r2, #8, #8
 8011f9c:	f36c 4317 	bfi	r3, ip, #16, #8
 8011fa0:	f361 631f 	bfi	r3, r1, #24, #8
 8011fa4:	b2da      	uxtb	r2, r3
 8011fa6:	2000      	movs	r0, #0
 8011fa8:	f362 0007 	bfi	r0, r2, #0, #8
 8011fac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011fb0:	f362 200f 	bfi	r0, r2, #8, #8
 8011fb4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011fb8:	f362 4017 	bfi	r0, r2, #16, #8
 8011fbc:	0e1b      	lsrs	r3, r3, #24
 8011fbe:	f363 601f 	bfi	r0, r3, #24, #8
 8011fc2:	b002      	add	sp, #8
 8011fc4:	4770      	bx	lr
 8011fc6:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011fca:	f04f 0c02 	mov.w	ip, #2
 8011fce:	e7e0      	b.n	8011f92 <uxr_stream_id_from_raw+0x16>

08011fd0 <uxr_init_stream_storage>:
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	7403      	strb	r3, [r0, #16]
 8011fd4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011fd8:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011fdc:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011fe0:	4770      	bx	lr
 8011fe2:	bf00      	nop

08011fe4 <uxr_reset_stream_storage>:
 8011fe4:	b570      	push	{r4, r5, r6, lr}
 8011fe6:	7c03      	ldrb	r3, [r0, #16]
 8011fe8:	4604      	mov	r4, r0
 8011fea:	b153      	cbz	r3, 8012002 <uxr_reset_stream_storage+0x1e>
 8011fec:	4606      	mov	r6, r0
 8011fee:	2500      	movs	r5, #0
 8011ff0:	4630      	mov	r0, r6
 8011ff2:	f004 ff63 	bl	8016ebc <uxr_reset_output_best_effort_stream>
 8011ff6:	7c23      	ldrb	r3, [r4, #16]
 8011ff8:	3501      	adds	r5, #1
 8011ffa:	42ab      	cmp	r3, r5
 8011ffc:	f106 0610 	add.w	r6, r6, #16
 8012000:	d8f6      	bhi.n	8011ff0 <uxr_reset_stream_storage+0xc>
 8012002:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012006:	b163      	cbz	r3, 8012022 <uxr_reset_stream_storage+0x3e>
 8012008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801200c:	2500      	movs	r5, #0
 801200e:	4630      	mov	r0, r6
 8012010:	f004 fd56 	bl	8016ac0 <uxr_reset_input_best_effort_stream>
 8012014:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012018:	3501      	adds	r5, #1
 801201a:	42ab      	cmp	r3, r5
 801201c:	f106 0602 	add.w	r6, r6, #2
 8012020:	d8f5      	bhi.n	801200e <uxr_reset_stream_storage+0x2a>
 8012022:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012026:	b163      	cbz	r3, 8012042 <uxr_reset_stream_storage+0x5e>
 8012028:	f104 0618 	add.w	r6, r4, #24
 801202c:	2500      	movs	r5, #0
 801202e:	4630      	mov	r0, r6
 8012030:	f004 fff0 	bl	8017014 <uxr_reset_output_reliable_stream>
 8012034:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012038:	3501      	adds	r5, #1
 801203a:	42ab      	cmp	r3, r5
 801203c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012040:	d8f5      	bhi.n	801202e <uxr_reset_stream_storage+0x4a>
 8012042:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012046:	b163      	cbz	r3, 8012062 <uxr_reset_stream_storage+0x7e>
 8012048:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801204c:	2500      	movs	r5, #0
 801204e:	4630      	mov	r0, r6
 8012050:	f004 fdaa 	bl	8016ba8 <uxr_reset_input_reliable_stream>
 8012054:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012058:	3501      	adds	r5, #1
 801205a:	42ab      	cmp	r3, r5
 801205c:	f106 0618 	add.w	r6, r6, #24
 8012060:	d8f5      	bhi.n	801204e <uxr_reset_stream_storage+0x6a>
 8012062:	bd70      	pop	{r4, r5, r6, pc}

08012064 <uxr_add_output_best_effort_buffer>:
 8012064:	b510      	push	{r4, lr}
 8012066:	7c04      	ldrb	r4, [r0, #16]
 8012068:	f104 0c01 	add.w	ip, r4, #1
 801206c:	b082      	sub	sp, #8
 801206e:	f880 c010 	strb.w	ip, [r0, #16]
 8012072:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8012076:	f004 ff17 	bl	8016ea8 <uxr_init_output_best_effort_stream>
 801207a:	2201      	movs	r2, #1
 801207c:	4611      	mov	r1, r2
 801207e:	4620      	mov	r0, r4
 8012080:	b002      	add	sp, #8
 8012082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012086:	f7ff bf4f 	b.w	8011f28 <uxr_stream_id>
 801208a:	bf00      	nop

0801208c <uxr_add_output_reliable_buffer>:
 801208c:	b510      	push	{r4, lr}
 801208e:	b084      	sub	sp, #16
 8012090:	4684      	mov	ip, r0
 8012092:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012096:	9000      	str	r0, [sp, #0]
 8012098:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801209c:	2028      	movs	r0, #40	@ 0x28
 801209e:	fb00 c004 	mla	r0, r0, r4, ip
 80120a2:	f104 0e01 	add.w	lr, r4, #1
 80120a6:	3018      	adds	r0, #24
 80120a8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80120ac:	f004 ff7a 	bl	8016fa4 <uxr_init_output_reliable_stream>
 80120b0:	2201      	movs	r2, #1
 80120b2:	2102      	movs	r1, #2
 80120b4:	4620      	mov	r0, r4
 80120b6:	b004      	add	sp, #16
 80120b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120bc:	f7ff bf34 	b.w	8011f28 <uxr_stream_id>

080120c0 <uxr_add_input_best_effort_buffer>:
 80120c0:	b510      	push	{r4, lr}
 80120c2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80120c6:	4603      	mov	r3, r0
 80120c8:	1c62      	adds	r2, r4, #1
 80120ca:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80120ce:	b082      	sub	sp, #8
 80120d0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80120d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80120d8:	f004 fcee 	bl	8016ab8 <uxr_init_input_best_effort_stream>
 80120dc:	2200      	movs	r2, #0
 80120de:	2101      	movs	r1, #1
 80120e0:	4620      	mov	r0, r4
 80120e2:	b002      	add	sp, #8
 80120e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120e8:	f7ff bf1e 	b.w	8011f28 <uxr_stream_id>

080120ec <uxr_add_input_reliable_buffer>:
 80120ec:	b510      	push	{r4, lr}
 80120ee:	b084      	sub	sp, #16
 80120f0:	4684      	mov	ip, r0
 80120f2:	9806      	ldr	r0, [sp, #24]
 80120f4:	9000      	str	r0, [sp, #0]
 80120f6:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80120fa:	2018      	movs	r0, #24
 80120fc:	fb00 c004 	mla	r0, r0, r4, ip
 8012100:	f104 0e01 	add.w	lr, r4, #1
 8012104:	3048      	adds	r0, #72	@ 0x48
 8012106:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801210a:	f004 fd21 	bl	8016b50 <uxr_init_input_reliable_stream>
 801210e:	2200      	movs	r2, #0
 8012110:	2102      	movs	r1, #2
 8012112:	4620      	mov	r0, r4
 8012114:	b004      	add	sp, #16
 8012116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801211a:	f7ff bf05 	b.w	8011f28 <uxr_stream_id>
 801211e:	bf00      	nop

08012120 <uxr_get_output_best_effort_stream>:
 8012120:	7c03      	ldrb	r3, [r0, #16]
 8012122:	428b      	cmp	r3, r1
 8012124:	bf8c      	ite	hi
 8012126:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801212a:	2000      	movls	r0, #0
 801212c:	4770      	bx	lr
 801212e:	bf00      	nop

08012130 <uxr_get_output_reliable_stream>:
 8012130:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012134:	428b      	cmp	r3, r1
 8012136:	bf83      	ittte	hi
 8012138:	2328      	movhi	r3, #40	@ 0x28
 801213a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801213e:	3018      	addhi	r0, #24
 8012140:	2000      	movls	r0, #0
 8012142:	4770      	bx	lr

08012144 <uxr_get_input_best_effort_stream>:
 8012144:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012148:	428b      	cmp	r3, r1
 801214a:	bf86      	itte	hi
 801214c:	3121      	addhi	r1, #33	@ 0x21
 801214e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012152:	2000      	movls	r0, #0
 8012154:	4770      	bx	lr
 8012156:	bf00      	nop

08012158 <uxr_get_input_reliable_stream>:
 8012158:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801215c:	428b      	cmp	r3, r1
 801215e:	bf83      	ittte	hi
 8012160:	2318      	movhi	r3, #24
 8012162:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012166:	3048      	addhi	r0, #72	@ 0x48
 8012168:	2000      	movls	r0, #0
 801216a:	4770      	bx	lr

0801216c <uxr_output_streams_confirmed>:
 801216c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012170:	b183      	cbz	r3, 8012194 <uxr_output_streams_confirmed+0x28>
 8012172:	b570      	push	{r4, r5, r6, lr}
 8012174:	4606      	mov	r6, r0
 8012176:	f100 0518 	add.w	r5, r0, #24
 801217a:	2400      	movs	r4, #0
 801217c:	e001      	b.n	8012182 <uxr_output_streams_confirmed+0x16>
 801217e:	3528      	adds	r5, #40	@ 0x28
 8012180:	b138      	cbz	r0, 8012192 <uxr_output_streams_confirmed+0x26>
 8012182:	4628      	mov	r0, r5
 8012184:	f005 f9b6 	bl	80174f4 <uxr_is_output_up_to_date>
 8012188:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801218c:	3401      	adds	r4, #1
 801218e:	42a3      	cmp	r3, r4
 8012190:	d8f5      	bhi.n	801217e <uxr_output_streams_confirmed+0x12>
 8012192:	bd70      	pop	{r4, r5, r6, pc}
 8012194:	2001      	movs	r0, #1
 8012196:	4770      	bx	lr

08012198 <uxr_buffer_submessage_header>:
 8012198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801219a:	4604      	mov	r4, r0
 801219c:	460e      	mov	r6, r1
 801219e:	2104      	movs	r1, #4
 80121a0:	4615      	mov	r5, r2
 80121a2:	461f      	mov	r7, r3
 80121a4:	f7fd fbf4 	bl	800f990 <ucdr_align_to>
 80121a8:	2301      	movs	r3, #1
 80121aa:	ea47 0203 	orr.w	r2, r7, r3
 80121ae:	4631      	mov	r1, r6
 80121b0:	7523      	strb	r3, [r4, #20]
 80121b2:	4620      	mov	r0, r4
 80121b4:	462b      	mov	r3, r5
 80121b6:	f000 fa27 	bl	8012608 <uxr_serialize_submessage_header>
 80121ba:	4620      	mov	r0, r4
 80121bc:	f7fd fbfe 	bl	800f9bc <ucdr_buffer_remaining>
 80121c0:	42a8      	cmp	r0, r5
 80121c2:	bf34      	ite	cc
 80121c4:	2000      	movcc	r0, #0
 80121c6:	2001      	movcs	r0, #1
 80121c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121ca:	bf00      	nop

080121cc <uxr_read_submessage_header>:
 80121cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121d0:	4604      	mov	r4, r0
 80121d2:	460d      	mov	r5, r1
 80121d4:	2104      	movs	r1, #4
 80121d6:	4616      	mov	r6, r2
 80121d8:	4698      	mov	r8, r3
 80121da:	f7fd fbd9 	bl	800f990 <ucdr_align_to>
 80121de:	4620      	mov	r0, r4
 80121e0:	f7fd fbec 	bl	800f9bc <ucdr_buffer_remaining>
 80121e4:	2803      	cmp	r0, #3
 80121e6:	bf8c      	ite	hi
 80121e8:	2701      	movhi	r7, #1
 80121ea:	2700      	movls	r7, #0
 80121ec:	d802      	bhi.n	80121f4 <uxr_read_submessage_header+0x28>
 80121ee:	4638      	mov	r0, r7
 80121f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121f4:	4633      	mov	r3, r6
 80121f6:	4642      	mov	r2, r8
 80121f8:	4620      	mov	r0, r4
 80121fa:	4629      	mov	r1, r5
 80121fc:	f000 fa18 	bl	8012630 <uxr_deserialize_submessage_header>
 8012200:	f898 3000 	ldrb.w	r3, [r8]
 8012204:	f003 0201 	and.w	r2, r3, #1
 8012208:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801220c:	f888 3000 	strb.w	r3, [r8]
 8012210:	7522      	strb	r2, [r4, #20]
 8012212:	4638      	mov	r0, r7
 8012214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012218 <uxr_submessage_padding>:
 8012218:	f010 0003 	ands.w	r0, r0, #3
 801221c:	bf18      	it	ne
 801221e:	f1c0 0004 	rsbne	r0, r0, #4
 8012222:	4770      	bx	lr

08012224 <uxr_millis>:
 8012224:	b510      	push	{r4, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	4669      	mov	r1, sp
 801222a:	2001      	movs	r0, #1
 801222c:	f7f0 fd14 	bl	8002c58 <clock_gettime>
 8012230:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012234:	4906      	ldr	r1, [pc, #24]	@ (8012250 <uxr_millis+0x2c>)
 8012236:	fba0 0301 	umull	r0, r3, r0, r1
 801223a:	1900      	adds	r0, r0, r4
 801223c:	fb01 3102 	mla	r1, r1, r2, r3
 8012240:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012244:	4a03      	ldr	r2, [pc, #12]	@ (8012254 <uxr_millis+0x30>)
 8012246:	2300      	movs	r3, #0
 8012248:	f7ee fc68 	bl	8000b1c <__aeabi_ldivmod>
 801224c:	b004      	add	sp, #16
 801224e:	bd10      	pop	{r4, pc}
 8012250:	3b9aca00 	.word	0x3b9aca00
 8012254:	000f4240 	.word	0x000f4240

08012258 <uxr_nanos>:
 8012258:	b510      	push	{r4, lr}
 801225a:	b084      	sub	sp, #16
 801225c:	4669      	mov	r1, sp
 801225e:	2001      	movs	r0, #1
 8012260:	f7f0 fcfa 	bl	8002c58 <clock_gettime>
 8012264:	4a06      	ldr	r2, [pc, #24]	@ (8012280 <uxr_nanos+0x28>)
 8012266:	9800      	ldr	r0, [sp, #0]
 8012268:	9902      	ldr	r1, [sp, #8]
 801226a:	9c01      	ldr	r4, [sp, #4]
 801226c:	fba0 0302 	umull	r0, r3, r0, r2
 8012270:	1840      	adds	r0, r0, r1
 8012272:	fb02 3304 	mla	r3, r2, r4, r3
 8012276:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801227a:	b004      	add	sp, #16
 801227c:	bd10      	pop	{r4, pc}
 801227e:	bf00      	nop
 8012280:	3b9aca00 	.word	0x3b9aca00

08012284 <on_full_output_buffer_fragmented>:
 8012284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012288:	460c      	mov	r4, r1
 801228a:	b08a      	sub	sp, #40	@ 0x28
 801228c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012290:	4606      	mov	r6, r0
 8012292:	f104 0008 	add.w	r0, r4, #8
 8012296:	f7ff ff4b 	bl	8012130 <uxr_get_output_reliable_stream>
 801229a:	4605      	mov	r5, r0
 801229c:	f005 f934 	bl	8017508 <get_available_free_slots>
 80122a0:	b968      	cbnz	r0, 80122be <on_full_output_buffer_fragmented+0x3a>
 80122a2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80122a6:	4620      	mov	r0, r4
 80122a8:	4798      	blx	r3
 80122aa:	b918      	cbnz	r0, 80122b4 <on_full_output_buffer_fragmented+0x30>
 80122ac:	2001      	movs	r0, #1
 80122ae:	b00a      	add	sp, #40	@ 0x28
 80122b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122b4:	4628      	mov	r0, r5
 80122b6:	f005 f927 	bl	8017508 <get_available_free_slots>
 80122ba:	2800      	cmp	r0, #0
 80122bc:	d0f6      	beq.n	80122ac <on_full_output_buffer_fragmented+0x28>
 80122be:	8929      	ldrh	r1, [r5, #8]
 80122c0:	89eb      	ldrh	r3, [r5, #14]
 80122c2:	7b28      	ldrb	r0, [r5, #12]
 80122c4:	686a      	ldr	r2, [r5, #4]
 80122c6:	fbb2 f8f1 	udiv	r8, r2, r1
 80122ca:	fbb3 f2f1 	udiv	r2, r3, r1
 80122ce:	fb01 3112 	mls	r1, r1, r2, r3
 80122d2:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 80122d6:	b289      	uxth	r1, r1
 80122d8:	fb08 f101 	mul.w	r1, r8, r1
 80122dc:	30fc      	adds	r0, #252	@ 0xfc
 80122de:	f1a8 0804 	sub.w	r8, r8, #4
 80122e2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80122e6:	4440      	add	r0, r8
 80122e8:	b287      	uxth	r7, r0
 80122ea:	1bdb      	subs	r3, r3, r7
 80122ec:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80122f0:	682b      	ldr	r3, [r5, #0]
 80122f2:	3104      	adds	r1, #4
 80122f4:	4419      	add	r1, r3
 80122f6:	4642      	mov	r2, r8
 80122f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122fc:	9300      	str	r3, [sp, #0]
 80122fe:	a802      	add	r0, sp, #8
 8012300:	2300      	movs	r3, #0
 8012302:	f7fd fb19 	bl	800f938 <ucdr_init_buffer_origin_offset>
 8012306:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801230a:	f102 0308 	add.w	r3, r2, #8
 801230e:	4543      	cmp	r3, r8
 8012310:	d928      	bls.n	8012364 <on_full_output_buffer_fragmented+0xe0>
 8012312:	463a      	mov	r2, r7
 8012314:	2300      	movs	r3, #0
 8012316:	210d      	movs	r1, #13
 8012318:	a802      	add	r0, sp, #8
 801231a:	f7ff ff3d 	bl	8012198 <uxr_buffer_submessage_header>
 801231e:	8929      	ldrh	r1, [r5, #8]
 8012320:	89eb      	ldrh	r3, [r5, #14]
 8012322:	fbb3 f2f1 	udiv	r2, r3, r1
 8012326:	fb01 3312 	mls	r3, r1, r2, r3
 801232a:	b29b      	uxth	r3, r3
 801232c:	686a      	ldr	r2, [r5, #4]
 801232e:	fbb2 f2f1 	udiv	r2, r2, r1
 8012332:	fb02 f303 	mul.w	r3, r2, r3
 8012336:	682a      	ldr	r2, [r5, #0]
 8012338:	f842 8003 	str.w	r8, [r2, r3]
 801233c:	89e8      	ldrh	r0, [r5, #14]
 801233e:	2101      	movs	r1, #1
 8012340:	f005 f902 	bl	8017548 <uxr_seq_num_add>
 8012344:	9904      	ldr	r1, [sp, #16]
 8012346:	9a03      	ldr	r2, [sp, #12]
 8012348:	81e8      	strh	r0, [r5, #14]
 801234a:	1a52      	subs	r2, r2, r1
 801234c:	4630      	mov	r0, r6
 801234e:	f7fd fb05 	bl	800f95c <ucdr_init_buffer>
 8012352:	4630      	mov	r0, r6
 8012354:	490f      	ldr	r1, [pc, #60]	@ (8012394 <on_full_output_buffer_fragmented+0x110>)
 8012356:	4622      	mov	r2, r4
 8012358:	f7fd fad4 	bl	800f904 <ucdr_set_on_full_buffer_callback>
 801235c:	2000      	movs	r0, #0
 801235e:	b00a      	add	sp, #40	@ 0x28
 8012360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012364:	b292      	uxth	r2, r2
 8012366:	2302      	movs	r3, #2
 8012368:	210d      	movs	r1, #13
 801236a:	a802      	add	r0, sp, #8
 801236c:	f7ff ff14 	bl	8012198 <uxr_buffer_submessage_header>
 8012370:	8928      	ldrh	r0, [r5, #8]
 8012372:	89eb      	ldrh	r3, [r5, #14]
 8012374:	fbb3 f1f0 	udiv	r1, r3, r0
 8012378:	fb00 3311 	mls	r3, r0, r1, r3
 801237c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012380:	6869      	ldr	r1, [r5, #4]
 8012382:	fbb1 f1f0 	udiv	r1, r1, r0
 8012386:	b29b      	uxth	r3, r3
 8012388:	fb01 f303 	mul.w	r3, r1, r3
 801238c:	6829      	ldr	r1, [r5, #0]
 801238e:	3208      	adds	r2, #8
 8012390:	50ca      	str	r2, [r1, r3]
 8012392:	e7d3      	b.n	801233c <on_full_output_buffer_fragmented+0xb8>
 8012394:	08012285 	.word	0x08012285

08012398 <uxr_prepare_output_stream>:
 8012398:	b5f0      	push	{r4, r5, r6, r7, lr}
 801239a:	b087      	sub	sp, #28
 801239c:	2707      	movs	r7, #7
 801239e:	9202      	str	r2, [sp, #8]
 80123a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80123a2:	9103      	str	r1, [sp, #12]
 80123a4:	2500      	movs	r5, #0
 80123a6:	3204      	adds	r2, #4
 80123a8:	e9cd 7500 	strd	r7, r5, [sp]
 80123ac:	461c      	mov	r4, r3
 80123ae:	4606      	mov	r6, r0
 80123b0:	f7fe ffc2 	bl	8011338 <uxr_prepare_stream_to_write_submessage>
 80123b4:	f080 0201 	eor.w	r2, r0, #1
 80123b8:	b2d2      	uxtb	r2, r2
 80123ba:	75a2      	strb	r2, [r4, #22]
 80123bc:	b112      	cbz	r2, 80123c4 <uxr_prepare_output_stream+0x2c>
 80123be:	4628      	mov	r0, r5
 80123c0:	b007      	add	sp, #28
 80123c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123c4:	aa05      	add	r2, sp, #20
 80123c6:	9902      	ldr	r1, [sp, #8]
 80123c8:	4630      	mov	r0, r6
 80123ca:	f7ff f8eb 	bl	80115a4 <uxr_init_base_object_request>
 80123ce:	a905      	add	r1, sp, #20
 80123d0:	4605      	mov	r5, r0
 80123d2:	4620      	mov	r0, r4
 80123d4:	f001 f8a0 	bl	8013518 <uxr_serialize_WRITE_DATA_Payload_Data>
 80123d8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80123dc:	69a6      	ldr	r6, [r4, #24]
 80123de:	69e7      	ldr	r7, [r4, #28]
 80123e0:	1a52      	subs	r2, r2, r1
 80123e2:	4620      	mov	r0, r4
 80123e4:	f7fd faba 	bl	800f95c <ucdr_init_buffer>
 80123e8:	4620      	mov	r0, r4
 80123ea:	463a      	mov	r2, r7
 80123ec:	4631      	mov	r1, r6
 80123ee:	f7fd fa89 	bl	800f904 <ucdr_set_on_full_buffer_callback>
 80123f2:	4628      	mov	r0, r5
 80123f4:	b007      	add	sp, #28
 80123f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080123f8 <uxr_prepare_output_stream_fragmented>:
 80123f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123fc:	b091      	sub	sp, #68	@ 0x44
 80123fe:	4605      	mov	r5, r0
 8012400:	9105      	str	r1, [sp, #20]
 8012402:	3008      	adds	r0, #8
 8012404:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012408:	461e      	mov	r6, r3
 801240a:	9204      	str	r2, [sp, #16]
 801240c:	f7ff fe90 	bl	8012130 <uxr_get_output_reliable_stream>
 8012410:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012414:	2b01      	cmp	r3, #1
 8012416:	f000 8091 	beq.w	801253c <uxr_prepare_output_stream_fragmented+0x144>
 801241a:	4604      	mov	r4, r0
 801241c:	2800      	cmp	r0, #0
 801241e:	f000 808d 	beq.w	801253c <uxr_prepare_output_stream_fragmented+0x144>
 8012422:	f005 f871 	bl	8017508 <get_available_free_slots>
 8012426:	2800      	cmp	r0, #0
 8012428:	f000 8083 	beq.w	8012532 <uxr_prepare_output_stream_fragmented+0x13a>
 801242c:	8922      	ldrh	r2, [r4, #8]
 801242e:	89e7      	ldrh	r7, [r4, #14]
 8012430:	fbb7 f9f2 	udiv	r9, r7, r2
 8012434:	fb02 7919 	mls	r9, r2, r9, r7
 8012438:	fa1f f989 	uxth.w	r9, r9
 801243c:	6863      	ldr	r3, [r4, #4]
 801243e:	fbb3 f2f2 	udiv	r2, r3, r2
 8012442:	6823      	ldr	r3, [r4, #0]
 8012444:	9203      	str	r2, [sp, #12]
 8012446:	fb02 f909 	mul.w	r9, r2, r9
 801244a:	f109 0904 	add.w	r9, r9, #4
 801244e:	4499      	add	r9, r3
 8012450:	7b23      	ldrb	r3, [r4, #12]
 8012452:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012456:	4543      	cmp	r3, r8
 8012458:	f1a2 0b04 	sub.w	fp, r2, #4
 801245c:	d37a      	bcc.n	8012554 <uxr_prepare_output_stream_fragmented+0x15c>
 801245e:	f1ab 0a04 	sub.w	sl, fp, #4
 8012462:	ebaa 0a03 	sub.w	sl, sl, r3
 8012466:	465a      	mov	r2, fp
 8012468:	2300      	movs	r3, #0
 801246a:	4649      	mov	r1, r9
 801246c:	a808      	add	r0, sp, #32
 801246e:	f8cd 8000 	str.w	r8, [sp]
 8012472:	f7fd fa61 	bl	800f938 <ucdr_init_buffer_origin_offset>
 8012476:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012478:	fa1f fa8a 	uxth.w	sl, sl
 801247c:	4652      	mov	r2, sl
 801247e:	f103 0a08 	add.w	sl, r3, #8
 8012482:	45da      	cmp	sl, fp
 8012484:	bf34      	ite	cc
 8012486:	2302      	movcc	r3, #2
 8012488:	2300      	movcs	r3, #0
 801248a:	210d      	movs	r1, #13
 801248c:	a808      	add	r0, sp, #32
 801248e:	f7ff fe83 	bl	8012198 <uxr_buffer_submessage_header>
 8012492:	8921      	ldrh	r1, [r4, #8]
 8012494:	fbb7 f2f1 	udiv	r2, r7, r1
 8012498:	fb01 7212 	mls	r2, r1, r2, r7
 801249c:	b292      	uxth	r2, r2
 801249e:	6863      	ldr	r3, [r4, #4]
 80124a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80124a4:	fb02 f303 	mul.w	r3, r2, r3
 80124a8:	6822      	ldr	r2, [r4, #0]
 80124aa:	4638      	mov	r0, r7
 80124ac:	f842 b003 	str.w	fp, [r2, r3]
 80124b0:	2101      	movs	r1, #1
 80124b2:	f005 f849 	bl	8017548 <uxr_seq_num_add>
 80124b6:	9b03      	ldr	r3, [sp, #12]
 80124b8:	f108 0104 	add.w	r1, r8, #4
 80124bc:	f1a3 0208 	sub.w	r2, r3, #8
 80124c0:	eba2 0208 	sub.w	r2, r2, r8
 80124c4:	4449      	add	r1, r9
 80124c6:	4607      	mov	r7, r0
 80124c8:	4630      	mov	r0, r6
 80124ca:	f7fd fa47 	bl	800f95c <ucdr_init_buffer>
 80124ce:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80124d0:	81e7      	strh	r7, [r4, #14]
 80124d2:	1d1a      	adds	r2, r3, #4
 80124d4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80124d8:	bf28      	it	cs
 80124da:	2200      	movcs	r2, #0
 80124dc:	2300      	movs	r3, #0
 80124de:	b292      	uxth	r2, r2
 80124e0:	2107      	movs	r1, #7
 80124e2:	4630      	mov	r0, r6
 80124e4:	f7ff fe58 	bl	8012198 <uxr_buffer_submessage_header>
 80124e8:	9904      	ldr	r1, [sp, #16]
 80124ea:	aa07      	add	r2, sp, #28
 80124ec:	4628      	mov	r0, r5
 80124ee:	f7ff f859 	bl	80115a4 <uxr_init_base_object_request>
 80124f2:	4604      	mov	r4, r0
 80124f4:	b318      	cbz	r0, 801253e <uxr_prepare_output_stream_fragmented+0x146>
 80124f6:	a907      	add	r1, sp, #28
 80124f8:	4630      	mov	r0, r6
 80124fa:	f001 f80d 	bl	8013518 <uxr_serialize_WRITE_DATA_Payload_Data>
 80124fe:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012502:	4630      	mov	r0, r6
 8012504:	1a52      	subs	r2, r2, r1
 8012506:	f7fd fa29 	bl	800f95c <ucdr_init_buffer>
 801250a:	9b05      	ldr	r3, [sp, #20]
 801250c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012510:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012512:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012516:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012518:	491b      	ldr	r1, [pc, #108]	@ (8012588 <uxr_prepare_output_stream_fragmented+0x190>)
 801251a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801251e:	4630      	mov	r0, r6
 8012520:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012524:	462a      	mov	r2, r5
 8012526:	f7fd f9ed 	bl	800f904 <ucdr_set_on_full_buffer_callback>
 801252a:	4620      	mov	r0, r4
 801252c:	b011      	add	sp, #68	@ 0x44
 801252e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012532:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8012534:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012536:	4628      	mov	r0, r5
 8012538:	4798      	blx	r3
 801253a:	b920      	cbnz	r0, 8012546 <uxr_prepare_output_stream_fragmented+0x14e>
 801253c:	2400      	movs	r4, #0
 801253e:	4620      	mov	r0, r4
 8012540:	b011      	add	sp, #68	@ 0x44
 8012542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012546:	4620      	mov	r0, r4
 8012548:	f004 ffde 	bl	8017508 <get_available_free_slots>
 801254c:	2800      	cmp	r0, #0
 801254e:	f47f af6d 	bne.w	801242c <uxr_prepare_output_stream_fragmented+0x34>
 8012552:	e7f3      	b.n	801253c <uxr_prepare_output_stream_fragmented+0x144>
 8012554:	4638      	mov	r0, r7
 8012556:	2101      	movs	r1, #1
 8012558:	f004 fff6 	bl	8017548 <uxr_seq_num_add>
 801255c:	8921      	ldrh	r1, [r4, #8]
 801255e:	fbb0 f2f1 	udiv	r2, r0, r1
 8012562:	fb01 0912 	mls	r9, r1, r2, r0
 8012566:	fa1f f289 	uxth.w	r2, r9
 801256a:	6863      	ldr	r3, [r4, #4]
 801256c:	fbb3 f9f1 	udiv	r9, r3, r1
 8012570:	6823      	ldr	r3, [r4, #0]
 8012572:	fb02 f909 	mul.w	r9, r2, r9
 8012576:	f109 0904 	add.w	r9, r9, #4
 801257a:	4499      	add	r9, r3
 801257c:	4607      	mov	r7, r0
 801257e:	7b23      	ldrb	r3, [r4, #12]
 8012580:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012584:	e76b      	b.n	801245e <uxr_prepare_output_stream_fragmented+0x66>
 8012586:	bf00      	nop
 8012588:	08012285 	.word	0x08012285

0801258c <uxr_serialize_message_header>:
 801258c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801258e:	b083      	sub	sp, #12
 8012590:	4616      	mov	r6, r2
 8012592:	4604      	mov	r4, r0
 8012594:	9301      	str	r3, [sp, #4]
 8012596:	460d      	mov	r5, r1
 8012598:	9f08      	ldr	r7, [sp, #32]
 801259a:	f7fc fa33 	bl	800ea04 <ucdr_serialize_uint8_t>
 801259e:	4631      	mov	r1, r6
 80125a0:	4620      	mov	r0, r4
 80125a2:	f7fc fa2f 	bl	800ea04 <ucdr_serialize_uint8_t>
 80125a6:	9a01      	ldr	r2, [sp, #4]
 80125a8:	2101      	movs	r1, #1
 80125aa:	4620      	mov	r0, r4
 80125ac:	f7fc fad6 	bl	800eb5c <ucdr_serialize_endian_uint16_t>
 80125b0:	062b      	lsls	r3, r5, #24
 80125b2:	d501      	bpl.n	80125b8 <uxr_serialize_message_header+0x2c>
 80125b4:	b003      	add	sp, #12
 80125b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125b8:	2204      	movs	r2, #4
 80125ba:	4639      	mov	r1, r7
 80125bc:	4620      	mov	r0, r4
 80125be:	b003      	add	sp, #12
 80125c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80125c4:	f004 b940 	b.w	8016848 <ucdr_serialize_array_uint8_t>

080125c8 <uxr_deserialize_message_header>:
 80125c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125ca:	b083      	sub	sp, #12
 80125cc:	4616      	mov	r6, r2
 80125ce:	4604      	mov	r4, r0
 80125d0:	9301      	str	r3, [sp, #4]
 80125d2:	460d      	mov	r5, r1
 80125d4:	9f08      	ldr	r7, [sp, #32]
 80125d6:	f7fc fa2b 	bl	800ea30 <ucdr_deserialize_uint8_t>
 80125da:	4631      	mov	r1, r6
 80125dc:	4620      	mov	r0, r4
 80125de:	f7fc fa27 	bl	800ea30 <ucdr_deserialize_uint8_t>
 80125e2:	9a01      	ldr	r2, [sp, #4]
 80125e4:	2101      	movs	r1, #1
 80125e6:	4620      	mov	r0, r4
 80125e8:	f7fc fbac 	bl	800ed44 <ucdr_deserialize_endian_uint16_t>
 80125ec:	f995 3000 	ldrsb.w	r3, [r5]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	da01      	bge.n	80125f8 <uxr_deserialize_message_header+0x30>
 80125f4:	b003      	add	sp, #12
 80125f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125f8:	2204      	movs	r2, #4
 80125fa:	4639      	mov	r1, r7
 80125fc:	4620      	mov	r0, r4
 80125fe:	b003      	add	sp, #12
 8012600:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012604:	f004 b984 	b.w	8016910 <ucdr_deserialize_array_uint8_t>

08012608 <uxr_serialize_submessage_header>:
 8012608:	b530      	push	{r4, r5, lr}
 801260a:	b083      	sub	sp, #12
 801260c:	4615      	mov	r5, r2
 801260e:	4604      	mov	r4, r0
 8012610:	9301      	str	r3, [sp, #4]
 8012612:	f7fc f9f7 	bl	800ea04 <ucdr_serialize_uint8_t>
 8012616:	4629      	mov	r1, r5
 8012618:	4620      	mov	r0, r4
 801261a:	f7fc f9f3 	bl	800ea04 <ucdr_serialize_uint8_t>
 801261e:	9a01      	ldr	r2, [sp, #4]
 8012620:	2101      	movs	r1, #1
 8012622:	4620      	mov	r0, r4
 8012624:	b003      	add	sp, #12
 8012626:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801262a:	f7fc ba97 	b.w	800eb5c <ucdr_serialize_endian_uint16_t>
 801262e:	bf00      	nop

08012630 <uxr_deserialize_submessage_header>:
 8012630:	b530      	push	{r4, r5, lr}
 8012632:	b083      	sub	sp, #12
 8012634:	4615      	mov	r5, r2
 8012636:	4604      	mov	r4, r0
 8012638:	9301      	str	r3, [sp, #4]
 801263a:	f7fc f9f9 	bl	800ea30 <ucdr_deserialize_uint8_t>
 801263e:	4629      	mov	r1, r5
 8012640:	4620      	mov	r0, r4
 8012642:	f7fc f9f5 	bl	800ea30 <ucdr_deserialize_uint8_t>
 8012646:	9a01      	ldr	r2, [sp, #4]
 8012648:	2101      	movs	r1, #1
 801264a:	4620      	mov	r0, r4
 801264c:	b003      	add	sp, #12
 801264e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012652:	f7fc bb77 	b.w	800ed44 <ucdr_deserialize_endian_uint16_t>
 8012656:	bf00      	nop

08012658 <uxr_serialize_CLIENT_Representation>:
 8012658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801265c:	2204      	movs	r2, #4
 801265e:	460e      	mov	r6, r1
 8012660:	4605      	mov	r5, r0
 8012662:	f004 f8f1 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8012666:	2202      	movs	r2, #2
 8012668:	4607      	mov	r7, r0
 801266a:	1d31      	adds	r1, r6, #4
 801266c:	4628      	mov	r0, r5
 801266e:	f004 f8eb 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8012672:	4038      	ands	r0, r7
 8012674:	2202      	movs	r2, #2
 8012676:	1db1      	adds	r1, r6, #6
 8012678:	b2c7      	uxtb	r7, r0
 801267a:	4628      	mov	r0, r5
 801267c:	f004 f8e4 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8012680:	2204      	movs	r2, #4
 8012682:	4007      	ands	r7, r0
 8012684:	f106 0108 	add.w	r1, r6, #8
 8012688:	4628      	mov	r0, r5
 801268a:	f004 f8dd 	bl	8016848 <ucdr_serialize_array_uint8_t>
 801268e:	7b31      	ldrb	r1, [r6, #12]
 8012690:	4007      	ands	r7, r0
 8012692:	4628      	mov	r0, r5
 8012694:	f7fc f9b6 	bl	800ea04 <ucdr_serialize_uint8_t>
 8012698:	7b71      	ldrb	r1, [r6, #13]
 801269a:	4007      	ands	r7, r0
 801269c:	4628      	mov	r0, r5
 801269e:	f7fc f983 	bl	800e9a8 <ucdr_serialize_bool>
 80126a2:	7b73      	ldrb	r3, [r6, #13]
 80126a4:	ea07 0800 	and.w	r8, r7, r0
 80126a8:	b93b      	cbnz	r3, 80126ba <uxr_serialize_CLIENT_Representation+0x62>
 80126aa:	8bb1      	ldrh	r1, [r6, #28]
 80126ac:	4628      	mov	r0, r5
 80126ae:	f7fc f9d5 	bl	800ea5c <ucdr_serialize_uint16_t>
 80126b2:	ea08 0000 	and.w	r0, r8, r0
 80126b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ba:	6931      	ldr	r1, [r6, #16]
 80126bc:	4628      	mov	r0, r5
 80126be:	f7fc fbb7 	bl	800ee30 <ucdr_serialize_uint32_t>
 80126c2:	6933      	ldr	r3, [r6, #16]
 80126c4:	b1e3      	cbz	r3, 8012700 <uxr_serialize_CLIENT_Representation+0xa8>
 80126c6:	b1c0      	cbz	r0, 80126fa <uxr_serialize_CLIENT_Representation+0xa2>
 80126c8:	4637      	mov	r7, r6
 80126ca:	f04f 0900 	mov.w	r9, #0
 80126ce:	e001      	b.n	80126d4 <uxr_serialize_CLIENT_Representation+0x7c>
 80126d0:	3708      	adds	r7, #8
 80126d2:	b194      	cbz	r4, 80126fa <uxr_serialize_CLIENT_Representation+0xa2>
 80126d4:	6979      	ldr	r1, [r7, #20]
 80126d6:	4628      	mov	r0, r5
 80126d8:	f004 f9d6 	bl	8016a88 <ucdr_serialize_string>
 80126dc:	69b9      	ldr	r1, [r7, #24]
 80126de:	4604      	mov	r4, r0
 80126e0:	4628      	mov	r0, r5
 80126e2:	f004 f9d1 	bl	8016a88 <ucdr_serialize_string>
 80126e6:	6933      	ldr	r3, [r6, #16]
 80126e8:	f109 0901 	add.w	r9, r9, #1
 80126ec:	4004      	ands	r4, r0
 80126ee:	4599      	cmp	r9, r3
 80126f0:	b2e4      	uxtb	r4, r4
 80126f2:	d3ed      	bcc.n	80126d0 <uxr_serialize_CLIENT_Representation+0x78>
 80126f4:	ea08 0804 	and.w	r8, r8, r4
 80126f8:	e7d7      	b.n	80126aa <uxr_serialize_CLIENT_Representation+0x52>
 80126fa:	f04f 0800 	mov.w	r8, #0
 80126fe:	e7d4      	b.n	80126aa <uxr_serialize_CLIENT_Representation+0x52>
 8012700:	ea08 0800 	and.w	r8, r8, r0
 8012704:	e7d1      	b.n	80126aa <uxr_serialize_CLIENT_Representation+0x52>
 8012706:	bf00      	nop

08012708 <uxr_deserialize_CLIENT_Representation>:
 8012708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801270c:	2204      	movs	r2, #4
 801270e:	460c      	mov	r4, r1
 8012710:	4605      	mov	r5, r0
 8012712:	f004 f8fd 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8012716:	2202      	movs	r2, #2
 8012718:	4607      	mov	r7, r0
 801271a:	1d21      	adds	r1, r4, #4
 801271c:	4628      	mov	r0, r5
 801271e:	f004 f8f7 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8012722:	4038      	ands	r0, r7
 8012724:	2202      	movs	r2, #2
 8012726:	1da1      	adds	r1, r4, #6
 8012728:	b2c6      	uxtb	r6, r0
 801272a:	4628      	mov	r0, r5
 801272c:	f004 f8f0 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8012730:	2204      	movs	r2, #4
 8012732:	4006      	ands	r6, r0
 8012734:	f104 0108 	add.w	r1, r4, #8
 8012738:	4628      	mov	r0, r5
 801273a:	f004 f8e9 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 801273e:	f104 010c 	add.w	r1, r4, #12
 8012742:	4006      	ands	r6, r0
 8012744:	4628      	mov	r0, r5
 8012746:	f7fc f973 	bl	800ea30 <ucdr_deserialize_uint8_t>
 801274a:	f104 010d 	add.w	r1, r4, #13
 801274e:	ea06 0700 	and.w	r7, r6, r0
 8012752:	4628      	mov	r0, r5
 8012754:	f7fc f93e 	bl	800e9d4 <ucdr_deserialize_bool>
 8012758:	7b63      	ldrb	r3, [r4, #13]
 801275a:	4007      	ands	r7, r0
 801275c:	b93b      	cbnz	r3, 801276e <uxr_deserialize_CLIENT_Representation+0x66>
 801275e:	f104 011c 	add.w	r1, r4, #28
 8012762:	4628      	mov	r0, r5
 8012764:	f7fc fa7a 	bl	800ec5c <ucdr_deserialize_uint16_t>
 8012768:	4038      	ands	r0, r7
 801276a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801276e:	f104 0110 	add.w	r1, r4, #16
 8012772:	4628      	mov	r0, r5
 8012774:	f7fc fc8c 	bl	800f090 <ucdr_deserialize_uint32_t>
 8012778:	6923      	ldr	r3, [r4, #16]
 801277a:	2b01      	cmp	r3, #1
 801277c:	d903      	bls.n	8012786 <uxr_deserialize_CLIENT_Representation+0x7e>
 801277e:	2301      	movs	r3, #1
 8012780:	75ab      	strb	r3, [r5, #22]
 8012782:	2700      	movs	r7, #0
 8012784:	e7eb      	b.n	801275e <uxr_deserialize_CLIENT_Representation+0x56>
 8012786:	b30b      	cbz	r3, 80127cc <uxr_deserialize_CLIENT_Representation+0xc4>
 8012788:	2800      	cmp	r0, #0
 801278a:	d0fa      	beq.n	8012782 <uxr_deserialize_CLIENT_Representation+0x7a>
 801278c:	46a0      	mov	r8, r4
 801278e:	f04f 0900 	mov.w	r9, #0
 8012792:	e001      	b.n	8012798 <uxr_deserialize_CLIENT_Representation+0x90>
 8012794:	2e00      	cmp	r6, #0
 8012796:	d0f4      	beq.n	8012782 <uxr_deserialize_CLIENT_Representation+0x7a>
 8012798:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801279c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80127a0:	4628      	mov	r0, r5
 80127a2:	f004 f981 	bl	8016aa8 <ucdr_deserialize_string>
 80127a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80127aa:	4606      	mov	r6, r0
 80127ac:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80127b0:	4628      	mov	r0, r5
 80127b2:	f004 f979 	bl	8016aa8 <ucdr_deserialize_string>
 80127b6:	6923      	ldr	r3, [r4, #16]
 80127b8:	f109 0901 	add.w	r9, r9, #1
 80127bc:	4006      	ands	r6, r0
 80127be:	4599      	cmp	r9, r3
 80127c0:	f108 0808 	add.w	r8, r8, #8
 80127c4:	b2f6      	uxtb	r6, r6
 80127c6:	d3e5      	bcc.n	8012794 <uxr_deserialize_CLIENT_Representation+0x8c>
 80127c8:	4037      	ands	r7, r6
 80127ca:	e7c8      	b.n	801275e <uxr_deserialize_CLIENT_Representation+0x56>
 80127cc:	4007      	ands	r7, r0
 80127ce:	e7c6      	b.n	801275e <uxr_deserialize_CLIENT_Representation+0x56>

080127d0 <uxr_serialize_AGENT_Representation>:
 80127d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127d4:	2204      	movs	r2, #4
 80127d6:	460f      	mov	r7, r1
 80127d8:	4605      	mov	r5, r0
 80127da:	f004 f835 	bl	8016848 <ucdr_serialize_array_uint8_t>
 80127de:	2202      	movs	r2, #2
 80127e0:	4604      	mov	r4, r0
 80127e2:	1d39      	adds	r1, r7, #4
 80127e4:	4628      	mov	r0, r5
 80127e6:	f004 f82f 	bl	8016848 <ucdr_serialize_array_uint8_t>
 80127ea:	4020      	ands	r0, r4
 80127ec:	2202      	movs	r2, #2
 80127ee:	1db9      	adds	r1, r7, #6
 80127f0:	b2c4      	uxtb	r4, r0
 80127f2:	4628      	mov	r0, r5
 80127f4:	f004 f828 	bl	8016848 <ucdr_serialize_array_uint8_t>
 80127f8:	7a39      	ldrb	r1, [r7, #8]
 80127fa:	4004      	ands	r4, r0
 80127fc:	4628      	mov	r0, r5
 80127fe:	f7fc f8d3 	bl	800e9a8 <ucdr_serialize_bool>
 8012802:	7a3b      	ldrb	r3, [r7, #8]
 8012804:	ea00 0804 	and.w	r8, r0, r4
 8012808:	b913      	cbnz	r3, 8012810 <uxr_serialize_AGENT_Representation+0x40>
 801280a:	4640      	mov	r0, r8
 801280c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012810:	68f9      	ldr	r1, [r7, #12]
 8012812:	4628      	mov	r0, r5
 8012814:	f7fc fb0c 	bl	800ee30 <ucdr_serialize_uint32_t>
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	b303      	cbz	r3, 801285e <uxr_serialize_AGENT_Representation+0x8e>
 801281c:	b1d0      	cbz	r0, 8012854 <uxr_serialize_AGENT_Representation+0x84>
 801281e:	463e      	mov	r6, r7
 8012820:	f04f 0900 	mov.w	r9, #0
 8012824:	e001      	b.n	801282a <uxr_serialize_AGENT_Representation+0x5a>
 8012826:	3608      	adds	r6, #8
 8012828:	b1a4      	cbz	r4, 8012854 <uxr_serialize_AGENT_Representation+0x84>
 801282a:	6931      	ldr	r1, [r6, #16]
 801282c:	4628      	mov	r0, r5
 801282e:	f004 f92b 	bl	8016a88 <ucdr_serialize_string>
 8012832:	6971      	ldr	r1, [r6, #20]
 8012834:	4604      	mov	r4, r0
 8012836:	4628      	mov	r0, r5
 8012838:	f004 f926 	bl	8016a88 <ucdr_serialize_string>
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	f109 0901 	add.w	r9, r9, #1
 8012842:	4004      	ands	r4, r0
 8012844:	4599      	cmp	r9, r3
 8012846:	b2e4      	uxtb	r4, r4
 8012848:	d3ed      	bcc.n	8012826 <uxr_serialize_AGENT_Representation+0x56>
 801284a:	ea08 0804 	and.w	r8, r8, r4
 801284e:	4640      	mov	r0, r8
 8012850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012854:	f04f 0800 	mov.w	r8, #0
 8012858:	4640      	mov	r0, r8
 801285a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801285e:	ea08 0800 	and.w	r8, r8, r0
 8012862:	e7d2      	b.n	801280a <uxr_serialize_AGENT_Representation+0x3a>

08012864 <uxr_serialize_DATAWRITER_Representation>:
 8012864:	b570      	push	{r4, r5, r6, lr}
 8012866:	460d      	mov	r5, r1
 8012868:	7809      	ldrb	r1, [r1, #0]
 801286a:	4606      	mov	r6, r0
 801286c:	f7fc f8ca 	bl	800ea04 <ucdr_serialize_uint8_t>
 8012870:	4604      	mov	r4, r0
 8012872:	b130      	cbz	r0, 8012882 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012874:	782b      	ldrb	r3, [r5, #0]
 8012876:	2b02      	cmp	r3, #2
 8012878:	d00c      	beq.n	8012894 <uxr_serialize_DATAWRITER_Representation+0x30>
 801287a:	2b03      	cmp	r3, #3
 801287c:	d010      	beq.n	80128a0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801287e:	2b01      	cmp	r3, #1
 8012880:	d008      	beq.n	8012894 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012882:	2202      	movs	r2, #2
 8012884:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012888:	4630      	mov	r0, r6
 801288a:	f003 ffdd 	bl	8016848 <ucdr_serialize_array_uint8_t>
 801288e:	4020      	ands	r0, r4
 8012890:	b2c0      	uxtb	r0, r0
 8012892:	bd70      	pop	{r4, r5, r6, pc}
 8012894:	6869      	ldr	r1, [r5, #4]
 8012896:	4630      	mov	r0, r6
 8012898:	f004 f8f6 	bl	8016a88 <ucdr_serialize_string>
 801289c:	4604      	mov	r4, r0
 801289e:	e7f0      	b.n	8012882 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80128a0:	4629      	mov	r1, r5
 80128a2:	4630      	mov	r0, r6
 80128a4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80128a8:	3104      	adds	r1, #4
 80128aa:	f004 f8c1 	bl	8016a30 <ucdr_serialize_sequence_uint8_t>
 80128ae:	4604      	mov	r4, r0
 80128b0:	e7e7      	b.n	8012882 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80128b2:	bf00      	nop

080128b4 <uxr_serialize_ObjectVariant.part.0>:
 80128b4:	b570      	push	{r4, r5, r6, lr}
 80128b6:	780b      	ldrb	r3, [r1, #0]
 80128b8:	3b01      	subs	r3, #1
 80128ba:	460c      	mov	r4, r1
 80128bc:	4605      	mov	r5, r0
 80128be:	2b0d      	cmp	r3, #13
 80128c0:	d854      	bhi.n	801296c <uxr_serialize_ObjectVariant.part.0+0xb8>
 80128c2:	e8df f003 	tbb	[pc, r3]
 80128c6:	0730      	.short	0x0730
 80128c8:	07071b1b 	.word	0x07071b1b
 80128cc:	0c530707 	.word	0x0c530707
 80128d0:	494e0c0c 	.word	0x494e0c0c
 80128d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128d8:	3104      	adds	r1, #4
 80128da:	f7ff bfc3 	b.w	8012864 <uxr_serialize_DATAWRITER_Representation>
 80128de:	7909      	ldrb	r1, [r1, #4]
 80128e0:	f7fc f890 	bl	800ea04 <ucdr_serialize_uint8_t>
 80128e4:	b1e8      	cbz	r0, 8012922 <uxr_serialize_ObjectVariant.part.0+0x6e>
 80128e6:	7923      	ldrb	r3, [r4, #4]
 80128e8:	2b01      	cmp	r3, #1
 80128ea:	d001      	beq.n	80128f0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80128ec:	2b02      	cmp	r3, #2
 80128ee:	d13d      	bne.n	801296c <uxr_serialize_ObjectVariant.part.0+0xb8>
 80128f0:	68a1      	ldr	r1, [r4, #8]
 80128f2:	4628      	mov	r0, r5
 80128f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128f8:	f004 b8c6 	b.w	8016a88 <ucdr_serialize_string>
 80128fc:	7909      	ldrb	r1, [r1, #4]
 80128fe:	f7fc f881 	bl	800ea04 <ucdr_serialize_uint8_t>
 8012902:	4606      	mov	r6, r0
 8012904:	b120      	cbz	r0, 8012910 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012906:	7923      	ldrb	r3, [r4, #4]
 8012908:	2b02      	cmp	r3, #2
 801290a:	d039      	beq.n	8012980 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801290c:	2b03      	cmp	r3, #3
 801290e:	d02f      	beq.n	8012970 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012910:	2202      	movs	r2, #2
 8012912:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012916:	4628      	mov	r0, r5
 8012918:	f003 ff96 	bl	8016848 <ucdr_serialize_array_uint8_t>
 801291c:	4030      	ands	r0, r6
 801291e:	b2c0      	uxtb	r0, r0
 8012920:	bd70      	pop	{r4, r5, r6, pc}
 8012922:	2000      	movs	r0, #0
 8012924:	bd70      	pop	{r4, r5, r6, pc}
 8012926:	7909      	ldrb	r1, [r1, #4]
 8012928:	f7fc f86c 	bl	800ea04 <ucdr_serialize_uint8_t>
 801292c:	4606      	mov	r6, r0
 801292e:	b158      	cbz	r0, 8012948 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012930:	7923      	ldrb	r3, [r4, #4]
 8012932:	2b02      	cmp	r3, #2
 8012934:	d003      	beq.n	801293e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8012936:	2b03      	cmp	r3, #3
 8012938:	d028      	beq.n	801298c <uxr_serialize_ObjectVariant.part.0+0xd8>
 801293a:	2b01      	cmp	r3, #1
 801293c:	d104      	bne.n	8012948 <uxr_serialize_ObjectVariant.part.0+0x94>
 801293e:	68a1      	ldr	r1, [r4, #8]
 8012940:	4628      	mov	r0, r5
 8012942:	f004 f8a1 	bl	8016a88 <ucdr_serialize_string>
 8012946:	4606      	mov	r6, r0
 8012948:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801294c:	4628      	mov	r0, r5
 801294e:	f7fc fd95 	bl	800f47c <ucdr_serialize_int16_t>
 8012952:	4030      	ands	r0, r6
 8012954:	b2c0      	uxtb	r0, r0
 8012956:	bd70      	pop	{r4, r5, r6, pc}
 8012958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801295c:	3104      	adds	r1, #4
 801295e:	f7ff be7b 	b.w	8012658 <uxr_serialize_CLIENT_Representation>
 8012962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012966:	3104      	adds	r1, #4
 8012968:	f7ff bf32 	b.w	80127d0 <uxr_serialize_AGENT_Representation>
 801296c:	2001      	movs	r0, #1
 801296e:	bd70      	pop	{r4, r5, r6, pc}
 8012970:	68a2      	ldr	r2, [r4, #8]
 8012972:	f104 010c 	add.w	r1, r4, #12
 8012976:	4628      	mov	r0, r5
 8012978:	f004 f85a 	bl	8016a30 <ucdr_serialize_sequence_uint8_t>
 801297c:	4606      	mov	r6, r0
 801297e:	e7c7      	b.n	8012910 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012980:	68a1      	ldr	r1, [r4, #8]
 8012982:	4628      	mov	r0, r5
 8012984:	f004 f880 	bl	8016a88 <ucdr_serialize_string>
 8012988:	4606      	mov	r6, r0
 801298a:	e7c1      	b.n	8012910 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801298c:	68a2      	ldr	r2, [r4, #8]
 801298e:	f104 010c 	add.w	r1, r4, #12
 8012992:	4628      	mov	r0, r5
 8012994:	f004 f84c 	bl	8016a30 <ucdr_serialize_sequence_uint8_t>
 8012998:	4606      	mov	r6, r0
 801299a:	e7d5      	b.n	8012948 <uxr_serialize_ObjectVariant.part.0+0x94>

0801299c <uxr_deserialize_DATAWRITER_Representation>:
 801299c:	b570      	push	{r4, r5, r6, lr}
 801299e:	4606      	mov	r6, r0
 80129a0:	460d      	mov	r5, r1
 80129a2:	f7fc f845 	bl	800ea30 <ucdr_deserialize_uint8_t>
 80129a6:	4604      	mov	r4, r0
 80129a8:	b130      	cbz	r0, 80129b8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80129aa:	782b      	ldrb	r3, [r5, #0]
 80129ac:	2b02      	cmp	r3, #2
 80129ae:	d00c      	beq.n	80129ca <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80129b0:	2b03      	cmp	r3, #3
 80129b2:	d012      	beq.n	80129da <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80129b4:	2b01      	cmp	r3, #1
 80129b6:	d008      	beq.n	80129ca <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80129b8:	2202      	movs	r2, #2
 80129ba:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80129be:	4630      	mov	r0, r6
 80129c0:	f003 ffa6 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 80129c4:	4020      	ands	r0, r4
 80129c6:	b2c0      	uxtb	r0, r0
 80129c8:	bd70      	pop	{r4, r5, r6, pc}
 80129ca:	6869      	ldr	r1, [r5, #4]
 80129cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80129d0:	4630      	mov	r0, r6
 80129d2:	f004 f869 	bl	8016aa8 <ucdr_deserialize_string>
 80129d6:	4604      	mov	r4, r0
 80129d8:	e7ee      	b.n	80129b8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80129da:	1d2b      	adds	r3, r5, #4
 80129dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80129e0:	f105 0108 	add.w	r1, r5, #8
 80129e4:	4630      	mov	r0, r6
 80129e6:	f004 f835 	bl	8016a54 <ucdr_deserialize_sequence_uint8_t>
 80129ea:	4604      	mov	r4, r0
 80129ec:	e7e4      	b.n	80129b8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80129ee:	bf00      	nop

080129f0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80129f0:	b570      	push	{r4, r5, r6, lr}
 80129f2:	460d      	mov	r5, r1
 80129f4:	7809      	ldrb	r1, [r1, #0]
 80129f6:	4606      	mov	r6, r0
 80129f8:	f7fb ffd6 	bl	800e9a8 <ucdr_serialize_bool>
 80129fc:	782b      	ldrb	r3, [r5, #0]
 80129fe:	4604      	mov	r4, r0
 8012a00:	b94b      	cbnz	r3, 8012a16 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012a02:	7a29      	ldrb	r1, [r5, #8]
 8012a04:	4630      	mov	r0, r6
 8012a06:	f7fb ffcf 	bl	800e9a8 <ucdr_serialize_bool>
 8012a0a:	7a2b      	ldrb	r3, [r5, #8]
 8012a0c:	4004      	ands	r4, r0
 8012a0e:	b2e4      	uxtb	r4, r4
 8012a10:	b943      	cbnz	r3, 8012a24 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012a12:	4620      	mov	r0, r4
 8012a14:	bd70      	pop	{r4, r5, r6, pc}
 8012a16:	6869      	ldr	r1, [r5, #4]
 8012a18:	4630      	mov	r0, r6
 8012a1a:	f004 f835 	bl	8016a88 <ucdr_serialize_string>
 8012a1e:	4004      	ands	r4, r0
 8012a20:	b2e4      	uxtb	r4, r4
 8012a22:	e7ee      	b.n	8012a02 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012a24:	68e9      	ldr	r1, [r5, #12]
 8012a26:	4630      	mov	r0, r6
 8012a28:	f004 f82e 	bl	8016a88 <ucdr_serialize_string>
 8012a2c:	4004      	ands	r4, r0
 8012a2e:	4620      	mov	r0, r4
 8012a30:	bd70      	pop	{r4, r5, r6, pc}
 8012a32:	bf00      	nop

08012a34 <uxr_serialize_OBJK_Topic_Binary>:
 8012a34:	b570      	push	{r4, r5, r6, lr}
 8012a36:	460d      	mov	r5, r1
 8012a38:	6809      	ldr	r1, [r1, #0]
 8012a3a:	4606      	mov	r6, r0
 8012a3c:	f004 f824 	bl	8016a88 <ucdr_serialize_string>
 8012a40:	7929      	ldrb	r1, [r5, #4]
 8012a42:	4604      	mov	r4, r0
 8012a44:	4630      	mov	r0, r6
 8012a46:	f7fb ffaf 	bl	800e9a8 <ucdr_serialize_bool>
 8012a4a:	792b      	ldrb	r3, [r5, #4]
 8012a4c:	4004      	ands	r4, r0
 8012a4e:	b2e4      	uxtb	r4, r4
 8012a50:	b943      	cbnz	r3, 8012a64 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012a52:	7b29      	ldrb	r1, [r5, #12]
 8012a54:	4630      	mov	r0, r6
 8012a56:	f7fb ffa7 	bl	800e9a8 <ucdr_serialize_bool>
 8012a5a:	7b2b      	ldrb	r3, [r5, #12]
 8012a5c:	4004      	ands	r4, r0
 8012a5e:	b93b      	cbnz	r3, 8012a70 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012a60:	4620      	mov	r0, r4
 8012a62:	bd70      	pop	{r4, r5, r6, pc}
 8012a64:	68a9      	ldr	r1, [r5, #8]
 8012a66:	4630      	mov	r0, r6
 8012a68:	f004 f80e 	bl	8016a88 <ucdr_serialize_string>
 8012a6c:	4004      	ands	r4, r0
 8012a6e:	e7f0      	b.n	8012a52 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012a70:	6929      	ldr	r1, [r5, #16]
 8012a72:	4630      	mov	r0, r6
 8012a74:	f004 f808 	bl	8016a88 <ucdr_serialize_string>
 8012a78:	4004      	ands	r4, r0
 8012a7a:	b2e4      	uxtb	r4, r4
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	bd70      	pop	{r4, r5, r6, pc}

08012a80 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a84:	460c      	mov	r4, r1
 8012a86:	7809      	ldrb	r1, [r1, #0]
 8012a88:	4606      	mov	r6, r0
 8012a8a:	f7fb ff8d 	bl	800e9a8 <ucdr_serialize_bool>
 8012a8e:	7823      	ldrb	r3, [r4, #0]
 8012a90:	4605      	mov	r5, r0
 8012a92:	b96b      	cbnz	r3, 8012ab0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012a94:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012a98:	4630      	mov	r0, r6
 8012a9a:	f7fb ff85 	bl	800e9a8 <ucdr_serialize_bool>
 8012a9e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012aa2:	4005      	ands	r5, r0
 8012aa4:	b2ed      	uxtb	r5, r5
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d169      	bne.n	8012b7e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012aaa:	4628      	mov	r0, r5
 8012aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ab0:	6861      	ldr	r1, [r4, #4]
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f7fc f9bc 	bl	800ee30 <ucdr_serialize_uint32_t>
 8012ab8:	6863      	ldr	r3, [r4, #4]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d06b      	beq.n	8012b96 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d067      	beq.n	8012b92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ac2:	68a1      	ldr	r1, [r4, #8]
 8012ac4:	4630      	mov	r0, r6
 8012ac6:	f003 ffdf 	bl	8016a88 <ucdr_serialize_string>
 8012aca:	6863      	ldr	r3, [r4, #4]
 8012acc:	2b01      	cmp	r3, #1
 8012ace:	d953      	bls.n	8012b78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	d05e      	beq.n	8012b92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ad4:	68e1      	ldr	r1, [r4, #12]
 8012ad6:	4630      	mov	r0, r6
 8012ad8:	f003 ffd6 	bl	8016a88 <ucdr_serialize_string>
 8012adc:	6863      	ldr	r3, [r4, #4]
 8012ade:	2b02      	cmp	r3, #2
 8012ae0:	d94a      	bls.n	8012b78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ae2:	2800      	cmp	r0, #0
 8012ae4:	d055      	beq.n	8012b92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ae6:	6921      	ldr	r1, [r4, #16]
 8012ae8:	4630      	mov	r0, r6
 8012aea:	f003 ffcd 	bl	8016a88 <ucdr_serialize_string>
 8012aee:	6863      	ldr	r3, [r4, #4]
 8012af0:	2b03      	cmp	r3, #3
 8012af2:	d941      	bls.n	8012b78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012af4:	2800      	cmp	r0, #0
 8012af6:	d04c      	beq.n	8012b92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012af8:	6961      	ldr	r1, [r4, #20]
 8012afa:	4630      	mov	r0, r6
 8012afc:	f003 ffc4 	bl	8016a88 <ucdr_serialize_string>
 8012b00:	6863      	ldr	r3, [r4, #4]
 8012b02:	2b04      	cmp	r3, #4
 8012b04:	d938      	bls.n	8012b78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b06:	2800      	cmp	r0, #0
 8012b08:	d043      	beq.n	8012b92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b0a:	69a1      	ldr	r1, [r4, #24]
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	f003 ffbb 	bl	8016a88 <ucdr_serialize_string>
 8012b12:	6863      	ldr	r3, [r4, #4]
 8012b14:	2b05      	cmp	r3, #5
 8012b16:	d92f      	bls.n	8012b78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	d03a      	beq.n	8012b92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b1c:	69e1      	ldr	r1, [r4, #28]
 8012b1e:	4630      	mov	r0, r6
 8012b20:	f003 ffb2 	bl	8016a88 <ucdr_serialize_string>
 8012b24:	6863      	ldr	r3, [r4, #4]
 8012b26:	2b06      	cmp	r3, #6
 8012b28:	d926      	bls.n	8012b78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b2a:	b390      	cbz	r0, 8012b92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b2c:	6a21      	ldr	r1, [r4, #32]
 8012b2e:	4630      	mov	r0, r6
 8012b30:	f003 ffaa 	bl	8016a88 <ucdr_serialize_string>
 8012b34:	6863      	ldr	r3, [r4, #4]
 8012b36:	2b07      	cmp	r3, #7
 8012b38:	d91e      	bls.n	8012b78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b3a:	b350      	cbz	r0, 8012b92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b3c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012b3e:	4630      	mov	r0, r6
 8012b40:	f003 ffa2 	bl	8016a88 <ucdr_serialize_string>
 8012b44:	6863      	ldr	r3, [r4, #4]
 8012b46:	2b08      	cmp	r3, #8
 8012b48:	d916      	bls.n	8012b78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b4a:	b310      	cbz	r0, 8012b92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b4c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012b4e:	4630      	mov	r0, r6
 8012b50:	f003 ff9a 	bl	8016a88 <ucdr_serialize_string>
 8012b54:	6863      	ldr	r3, [r4, #4]
 8012b56:	2b09      	cmp	r3, #9
 8012b58:	d90e      	bls.n	8012b78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b5a:	b1d0      	cbz	r0, 8012b92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b5c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012b60:	2709      	movs	r7, #9
 8012b62:	e000      	b.n	8012b66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012b64:	b1a8      	cbz	r0, 8012b92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b66:	f858 1b04 	ldr.w	r1, [r8], #4
 8012b6a:	4630      	mov	r0, r6
 8012b6c:	f003 ff8c 	bl	8016a88 <ucdr_serialize_string>
 8012b70:	6862      	ldr	r2, [r4, #4]
 8012b72:	3701      	adds	r7, #1
 8012b74:	4297      	cmp	r7, r2
 8012b76:	d3f5      	bcc.n	8012b64 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012b78:	4005      	ands	r5, r0
 8012b7a:	b2ed      	uxtb	r5, r5
 8012b7c:	e78a      	b.n	8012a94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012b7e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012b80:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012b84:	4630      	mov	r0, r6
 8012b86:	f003 ff53 	bl	8016a30 <ucdr_serialize_sequence_uint8_t>
 8012b8a:	4005      	ands	r5, r0
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b92:	2500      	movs	r5, #0
 8012b94:	e77e      	b.n	8012a94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012b96:	4028      	ands	r0, r5
 8012b98:	b2c5      	uxtb	r5, r0
 8012b9a:	e77b      	b.n	8012a94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012b9c <uxr_serialize_OBJK_Publisher_Binary>:
 8012b9c:	b570      	push	{r4, r5, r6, lr}
 8012b9e:	460d      	mov	r5, r1
 8012ba0:	7809      	ldrb	r1, [r1, #0]
 8012ba2:	4606      	mov	r6, r0
 8012ba4:	f7fb ff00 	bl	800e9a8 <ucdr_serialize_bool>
 8012ba8:	782b      	ldrb	r3, [r5, #0]
 8012baa:	4604      	mov	r4, r0
 8012bac:	b94b      	cbnz	r3, 8012bc2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012bae:	7a29      	ldrb	r1, [r5, #8]
 8012bb0:	4630      	mov	r0, r6
 8012bb2:	f7fb fef9 	bl	800e9a8 <ucdr_serialize_bool>
 8012bb6:	7a2b      	ldrb	r3, [r5, #8]
 8012bb8:	4004      	ands	r4, r0
 8012bba:	b2e4      	uxtb	r4, r4
 8012bbc:	b943      	cbnz	r3, 8012bd0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	bd70      	pop	{r4, r5, r6, pc}
 8012bc2:	6869      	ldr	r1, [r5, #4]
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	f003 ff5f 	bl	8016a88 <ucdr_serialize_string>
 8012bca:	4004      	ands	r4, r0
 8012bcc:	b2e4      	uxtb	r4, r4
 8012bce:	e7ee      	b.n	8012bae <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012bd0:	f105 010c 	add.w	r1, r5, #12
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	f7ff ff53 	bl	8012a80 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012bda:	4004      	ands	r4, r0
 8012bdc:	4620      	mov	r0, r4
 8012bde:	bd70      	pop	{r4, r5, r6, pc}

08012be0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012be4:	460c      	mov	r4, r1
 8012be6:	7809      	ldrb	r1, [r1, #0]
 8012be8:	4606      	mov	r6, r0
 8012bea:	f7fb fedd 	bl	800e9a8 <ucdr_serialize_bool>
 8012bee:	7823      	ldrb	r3, [r4, #0]
 8012bf0:	4605      	mov	r5, r0
 8012bf2:	b96b      	cbnz	r3, 8012c10 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012bf4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012bf8:	4630      	mov	r0, r6
 8012bfa:	f7fb fed5 	bl	800e9a8 <ucdr_serialize_bool>
 8012bfe:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012c02:	4005      	ands	r5, r0
 8012c04:	b2ed      	uxtb	r5, r5
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d169      	bne.n	8012cde <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c10:	6861      	ldr	r1, [r4, #4]
 8012c12:	4630      	mov	r0, r6
 8012c14:	f7fc f90c 	bl	800ee30 <ucdr_serialize_uint32_t>
 8012c18:	6863      	ldr	r3, [r4, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d06b      	beq.n	8012cf6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012c1e:	2800      	cmp	r0, #0
 8012c20:	d067      	beq.n	8012cf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c22:	68a1      	ldr	r1, [r4, #8]
 8012c24:	4630      	mov	r0, r6
 8012c26:	f003 ff2f 	bl	8016a88 <ucdr_serialize_string>
 8012c2a:	6863      	ldr	r3, [r4, #4]
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d953      	bls.n	8012cd8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c30:	2800      	cmp	r0, #0
 8012c32:	d05e      	beq.n	8012cf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c34:	68e1      	ldr	r1, [r4, #12]
 8012c36:	4630      	mov	r0, r6
 8012c38:	f003 ff26 	bl	8016a88 <ucdr_serialize_string>
 8012c3c:	6863      	ldr	r3, [r4, #4]
 8012c3e:	2b02      	cmp	r3, #2
 8012c40:	d94a      	bls.n	8012cd8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c42:	2800      	cmp	r0, #0
 8012c44:	d055      	beq.n	8012cf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c46:	6921      	ldr	r1, [r4, #16]
 8012c48:	4630      	mov	r0, r6
 8012c4a:	f003 ff1d 	bl	8016a88 <ucdr_serialize_string>
 8012c4e:	6863      	ldr	r3, [r4, #4]
 8012c50:	2b03      	cmp	r3, #3
 8012c52:	d941      	bls.n	8012cd8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c54:	2800      	cmp	r0, #0
 8012c56:	d04c      	beq.n	8012cf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c58:	6961      	ldr	r1, [r4, #20]
 8012c5a:	4630      	mov	r0, r6
 8012c5c:	f003 ff14 	bl	8016a88 <ucdr_serialize_string>
 8012c60:	6863      	ldr	r3, [r4, #4]
 8012c62:	2b04      	cmp	r3, #4
 8012c64:	d938      	bls.n	8012cd8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c66:	2800      	cmp	r0, #0
 8012c68:	d043      	beq.n	8012cf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c6a:	69a1      	ldr	r1, [r4, #24]
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	f003 ff0b 	bl	8016a88 <ucdr_serialize_string>
 8012c72:	6863      	ldr	r3, [r4, #4]
 8012c74:	2b05      	cmp	r3, #5
 8012c76:	d92f      	bls.n	8012cd8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c78:	2800      	cmp	r0, #0
 8012c7a:	d03a      	beq.n	8012cf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c7c:	69e1      	ldr	r1, [r4, #28]
 8012c7e:	4630      	mov	r0, r6
 8012c80:	f003 ff02 	bl	8016a88 <ucdr_serialize_string>
 8012c84:	6863      	ldr	r3, [r4, #4]
 8012c86:	2b06      	cmp	r3, #6
 8012c88:	d926      	bls.n	8012cd8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c8a:	b390      	cbz	r0, 8012cf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c8c:	6a21      	ldr	r1, [r4, #32]
 8012c8e:	4630      	mov	r0, r6
 8012c90:	f003 fefa 	bl	8016a88 <ucdr_serialize_string>
 8012c94:	6863      	ldr	r3, [r4, #4]
 8012c96:	2b07      	cmp	r3, #7
 8012c98:	d91e      	bls.n	8012cd8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c9a:	b350      	cbz	r0, 8012cf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c9c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f003 fef2 	bl	8016a88 <ucdr_serialize_string>
 8012ca4:	6863      	ldr	r3, [r4, #4]
 8012ca6:	2b08      	cmp	r3, #8
 8012ca8:	d916      	bls.n	8012cd8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012caa:	b310      	cbz	r0, 8012cf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012cac:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012cae:	4630      	mov	r0, r6
 8012cb0:	f003 feea 	bl	8016a88 <ucdr_serialize_string>
 8012cb4:	6863      	ldr	r3, [r4, #4]
 8012cb6:	2b09      	cmp	r3, #9
 8012cb8:	d90e      	bls.n	8012cd8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012cba:	b1d0      	cbz	r0, 8012cf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012cbc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012cc0:	2709      	movs	r7, #9
 8012cc2:	e000      	b.n	8012cc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012cc4:	b1a8      	cbz	r0, 8012cf2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012cc6:	f858 1b04 	ldr.w	r1, [r8], #4
 8012cca:	4630      	mov	r0, r6
 8012ccc:	f003 fedc 	bl	8016a88 <ucdr_serialize_string>
 8012cd0:	6862      	ldr	r2, [r4, #4]
 8012cd2:	3701      	adds	r7, #1
 8012cd4:	4297      	cmp	r7, r2
 8012cd6:	d3f5      	bcc.n	8012cc4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012cd8:	4005      	ands	r5, r0
 8012cda:	b2ed      	uxtb	r5, r5
 8012cdc:	e78a      	b.n	8012bf4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012cde:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012ce0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012ce4:	4630      	mov	r0, r6
 8012ce6:	f003 fea3 	bl	8016a30 <ucdr_serialize_sequence_uint8_t>
 8012cea:	4005      	ands	r5, r0
 8012cec:	4628      	mov	r0, r5
 8012cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cf2:	2500      	movs	r5, #0
 8012cf4:	e77e      	b.n	8012bf4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012cf6:	4028      	ands	r0, r5
 8012cf8:	b2c5      	uxtb	r5, r0
 8012cfa:	e77b      	b.n	8012bf4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012cfc <uxr_serialize_OBJK_Subscriber_Binary>:
 8012cfc:	b570      	push	{r4, r5, r6, lr}
 8012cfe:	460d      	mov	r5, r1
 8012d00:	7809      	ldrb	r1, [r1, #0]
 8012d02:	4606      	mov	r6, r0
 8012d04:	f7fb fe50 	bl	800e9a8 <ucdr_serialize_bool>
 8012d08:	782b      	ldrb	r3, [r5, #0]
 8012d0a:	4604      	mov	r4, r0
 8012d0c:	b94b      	cbnz	r3, 8012d22 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012d0e:	7a29      	ldrb	r1, [r5, #8]
 8012d10:	4630      	mov	r0, r6
 8012d12:	f7fb fe49 	bl	800e9a8 <ucdr_serialize_bool>
 8012d16:	7a2b      	ldrb	r3, [r5, #8]
 8012d18:	4004      	ands	r4, r0
 8012d1a:	b2e4      	uxtb	r4, r4
 8012d1c:	b943      	cbnz	r3, 8012d30 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012d1e:	4620      	mov	r0, r4
 8012d20:	bd70      	pop	{r4, r5, r6, pc}
 8012d22:	6869      	ldr	r1, [r5, #4]
 8012d24:	4630      	mov	r0, r6
 8012d26:	f003 feaf 	bl	8016a88 <ucdr_serialize_string>
 8012d2a:	4004      	ands	r4, r0
 8012d2c:	b2e4      	uxtb	r4, r4
 8012d2e:	e7ee      	b.n	8012d0e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012d30:	f105 010c 	add.w	r1, r5, #12
 8012d34:	4630      	mov	r0, r6
 8012d36:	f7ff ff53 	bl	8012be0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012d3a:	4004      	ands	r4, r0
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	bd70      	pop	{r4, r5, r6, pc}

08012d40 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012d40:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012d44:	4688      	mov	r8, r1
 8012d46:	8809      	ldrh	r1, [r1, #0]
 8012d48:	4681      	mov	r9, r0
 8012d4a:	f7fb fe87 	bl	800ea5c <ucdr_serialize_uint16_t>
 8012d4e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012d52:	4606      	mov	r6, r0
 8012d54:	4648      	mov	r0, r9
 8012d56:	f7fb fe27 	bl	800e9a8 <ucdr_serialize_bool>
 8012d5a:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012d5e:	4006      	ands	r6, r0
 8012d60:	b2f5      	uxtb	r5, r6
 8012d62:	b9eb      	cbnz	r3, 8012da0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012d64:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012d68:	4648      	mov	r0, r9
 8012d6a:	f7fb fe1d 	bl	800e9a8 <ucdr_serialize_bool>
 8012d6e:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012d72:	4005      	ands	r5, r0
 8012d74:	bb7b      	cbnz	r3, 8012dd6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012d76:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012d7a:	4648      	mov	r0, r9
 8012d7c:	f7fb fe14 	bl	800e9a8 <ucdr_serialize_bool>
 8012d80:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012d84:	4005      	ands	r5, r0
 8012d86:	b9f3      	cbnz	r3, 8012dc6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012d88:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012d8c:	4648      	mov	r0, r9
 8012d8e:	f7fb fe0b 	bl	800e9a8 <ucdr_serialize_bool>
 8012d92:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012d96:	4005      	ands	r5, r0
 8012d98:	b94b      	cbnz	r3, 8012dae <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012d9a:	4628      	mov	r0, r5
 8012d9c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012da0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012da4:	4648      	mov	r0, r9
 8012da6:	f7fb fe59 	bl	800ea5c <ucdr_serialize_uint16_t>
 8012daa:	4005      	ands	r5, r0
 8012dac:	e7da      	b.n	8012d64 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012dae:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012db2:	f108 011c 	add.w	r1, r8, #28
 8012db6:	4648      	mov	r0, r9
 8012db8:	f003 fe3a 	bl	8016a30 <ucdr_serialize_sequence_uint8_t>
 8012dbc:	4028      	ands	r0, r5
 8012dbe:	b2c5      	uxtb	r5, r0
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012dc6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012dca:	4648      	mov	r0, r9
 8012dcc:	f7fc f830 	bl	800ee30 <ucdr_serialize_uint32_t>
 8012dd0:	4028      	ands	r0, r5
 8012dd2:	b2c5      	uxtb	r5, r0
 8012dd4:	e7d8      	b.n	8012d88 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012dd6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012dda:	4648      	mov	r0, r9
 8012ddc:	f7fc f828 	bl	800ee30 <ucdr_serialize_uint32_t>
 8012de0:	4028      	ands	r0, r5
 8012de2:	b2c5      	uxtb	r5, r0
 8012de4:	e7c7      	b.n	8012d76 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012de6:	bf00      	nop

08012de8 <uxr_serialize_OBJK_DataReader_Binary>:
 8012de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dea:	2202      	movs	r2, #2
 8012dec:	460c      	mov	r4, r1
 8012dee:	4606      	mov	r6, r0
 8012df0:	f003 fd2a 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8012df4:	78a1      	ldrb	r1, [r4, #2]
 8012df6:	4605      	mov	r5, r0
 8012df8:	4630      	mov	r0, r6
 8012dfa:	f7fb fdd5 	bl	800e9a8 <ucdr_serialize_bool>
 8012dfe:	78a3      	ldrb	r3, [r4, #2]
 8012e00:	4005      	ands	r5, r0
 8012e02:	b2ed      	uxtb	r5, r5
 8012e04:	b90b      	cbnz	r3, 8012e0a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012e06:	4628      	mov	r0, r5
 8012e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e0a:	f104 0108 	add.w	r1, r4, #8
 8012e0e:	4630      	mov	r0, r6
 8012e10:	f7ff ff96 	bl	8012d40 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012e14:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012e18:	4607      	mov	r7, r0
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	f7fb fdc4 	bl	800e9a8 <ucdr_serialize_bool>
 8012e20:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012e24:	4038      	ands	r0, r7
 8012e26:	b2c7      	uxtb	r7, r0
 8012e28:	b95b      	cbnz	r3, 8012e42 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012e2a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012e2e:	4630      	mov	r0, r6
 8012e30:	f7fb fdba 	bl	800e9a8 <ucdr_serialize_bool>
 8012e34:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012e38:	4007      	ands	r7, r0
 8012e3a:	b94b      	cbnz	r3, 8012e50 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012e3c:	403d      	ands	r5, r7
 8012e3e:	4628      	mov	r0, r5
 8012e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e42:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012e46:	4630      	mov	r0, r6
 8012e48:	f7fc fa48 	bl	800f2dc <ucdr_serialize_uint64_t>
 8012e4c:	4007      	ands	r7, r0
 8012e4e:	e7ec      	b.n	8012e2a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012e50:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8012e52:	4630      	mov	r0, r6
 8012e54:	f003 fe18 	bl	8016a88 <ucdr_serialize_string>
 8012e58:	4007      	ands	r7, r0
 8012e5a:	b2ff      	uxtb	r7, r7
 8012e5c:	e7ee      	b.n	8012e3c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012e5e:	bf00      	nop

08012e60 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e62:	2202      	movs	r2, #2
 8012e64:	460d      	mov	r5, r1
 8012e66:	4606      	mov	r6, r0
 8012e68:	f003 fcee 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8012e6c:	78a9      	ldrb	r1, [r5, #2]
 8012e6e:	4604      	mov	r4, r0
 8012e70:	4630      	mov	r0, r6
 8012e72:	f7fb fd99 	bl	800e9a8 <ucdr_serialize_bool>
 8012e76:	78ab      	ldrb	r3, [r5, #2]
 8012e78:	4004      	ands	r4, r0
 8012e7a:	b2e4      	uxtb	r4, r4
 8012e7c:	b90b      	cbnz	r3, 8012e82 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012e7e:	4620      	mov	r0, r4
 8012e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e82:	f105 0108 	add.w	r1, r5, #8
 8012e86:	4630      	mov	r0, r6
 8012e88:	f7ff ff5a 	bl	8012d40 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012e8c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012e90:	4607      	mov	r7, r0
 8012e92:	4630      	mov	r0, r6
 8012e94:	f7fb fd88 	bl	800e9a8 <ucdr_serialize_bool>
 8012e98:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012e9c:	4038      	ands	r0, r7
 8012e9e:	b2c7      	uxtb	r7, r0
 8012ea0:	b913      	cbnz	r3, 8012ea8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012ea2:	403c      	ands	r4, r7
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ea8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012eac:	4630      	mov	r0, r6
 8012eae:	f7fc fa15 	bl	800f2dc <ucdr_serialize_uint64_t>
 8012eb2:	4007      	ands	r7, r0
 8012eb4:	e7f5      	b.n	8012ea2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012eb6:	bf00      	nop

08012eb8 <uxr_deserialize_ObjectVariant>:
 8012eb8:	b570      	push	{r4, r5, r6, lr}
 8012eba:	4605      	mov	r5, r0
 8012ebc:	460e      	mov	r6, r1
 8012ebe:	f7fb fdb7 	bl	800ea30 <ucdr_deserialize_uint8_t>
 8012ec2:	b168      	cbz	r0, 8012ee0 <uxr_deserialize_ObjectVariant+0x28>
 8012ec4:	7833      	ldrb	r3, [r6, #0]
 8012ec6:	3b01      	subs	r3, #1
 8012ec8:	4604      	mov	r4, r0
 8012eca:	2b0d      	cmp	r3, #13
 8012ecc:	d809      	bhi.n	8012ee2 <uxr_deserialize_ObjectVariant+0x2a>
 8012ece:	e8df f003 	tbb	[pc, r3]
 8012ed2:	0a41      	.short	0x0a41
 8012ed4:	0a0a2323 	.word	0x0a0a2323
 8012ed8:	10080a0a 	.word	0x10080a0a
 8012edc:	565c1010 	.word	0x565c1010
 8012ee0:	2400      	movs	r4, #0
 8012ee2:	4620      	mov	r0, r4
 8012ee4:	bd70      	pop	{r4, r5, r6, pc}
 8012ee6:	1d31      	adds	r1, r6, #4
 8012ee8:	4628      	mov	r0, r5
 8012eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012eee:	f7ff bd55 	b.w	801299c <uxr_deserialize_DATAWRITER_Representation>
 8012ef2:	1d31      	adds	r1, r6, #4
 8012ef4:	4628      	mov	r0, r5
 8012ef6:	f7fb fd9b 	bl	800ea30 <ucdr_deserialize_uint8_t>
 8012efa:	2800      	cmp	r0, #0
 8012efc:	d0f0      	beq.n	8012ee0 <uxr_deserialize_ObjectVariant+0x28>
 8012efe:	7933      	ldrb	r3, [r6, #4]
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d001      	beq.n	8012f08 <uxr_deserialize_ObjectVariant+0x50>
 8012f04:	2b02      	cmp	r3, #2
 8012f06:	d1ec      	bne.n	8012ee2 <uxr_deserialize_ObjectVariant+0x2a>
 8012f08:	68b1      	ldr	r1, [r6, #8]
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f14:	f003 bdc8 	b.w	8016aa8 <ucdr_deserialize_string>
 8012f18:	1d31      	adds	r1, r6, #4
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	f7fb fd88 	bl	800ea30 <ucdr_deserialize_uint8_t>
 8012f20:	4604      	mov	r4, r0
 8012f22:	b170      	cbz	r0, 8012f42 <uxr_deserialize_ObjectVariant+0x8a>
 8012f24:	7933      	ldrb	r3, [r6, #4]
 8012f26:	2b02      	cmp	r3, #2
 8012f28:	d04c      	beq.n	8012fc4 <uxr_deserialize_ObjectVariant+0x10c>
 8012f2a:	2b03      	cmp	r3, #3
 8012f2c:	d109      	bne.n	8012f42 <uxr_deserialize_ObjectVariant+0x8a>
 8012f2e:	f106 0308 	add.w	r3, r6, #8
 8012f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f36:	f106 010c 	add.w	r1, r6, #12
 8012f3a:	4628      	mov	r0, r5
 8012f3c:	f003 fd8a 	bl	8016a54 <ucdr_deserialize_sequence_uint8_t>
 8012f40:	4604      	mov	r4, r0
 8012f42:	2202      	movs	r2, #2
 8012f44:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012f48:	4628      	mov	r0, r5
 8012f4a:	f003 fce1 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8012f4e:	4020      	ands	r0, r4
 8012f50:	b2c4      	uxtb	r4, r0
 8012f52:	e7c6      	b.n	8012ee2 <uxr_deserialize_ObjectVariant+0x2a>
 8012f54:	1d31      	adds	r1, r6, #4
 8012f56:	4628      	mov	r0, r5
 8012f58:	f7fb fd6a 	bl	800ea30 <ucdr_deserialize_uint8_t>
 8012f5c:	4604      	mov	r4, r0
 8012f5e:	b130      	cbz	r0, 8012f6e <uxr_deserialize_ObjectVariant+0xb6>
 8012f60:	7933      	ldrb	r3, [r6, #4]
 8012f62:	2b02      	cmp	r3, #2
 8012f64:	d036      	beq.n	8012fd4 <uxr_deserialize_ObjectVariant+0x11c>
 8012f66:	2b03      	cmp	r3, #3
 8012f68:	d03c      	beq.n	8012fe4 <uxr_deserialize_ObjectVariant+0x12c>
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	d032      	beq.n	8012fd4 <uxr_deserialize_ObjectVariant+0x11c>
 8012f6e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012f72:	4628      	mov	r0, r5
 8012f74:	f7fc fb02 	bl	800f57c <ucdr_deserialize_int16_t>
 8012f78:	4020      	ands	r0, r4
 8012f7a:	b2c4      	uxtb	r4, r0
 8012f7c:	e7b1      	b.n	8012ee2 <uxr_deserialize_ObjectVariant+0x2a>
 8012f7e:	1d31      	adds	r1, r6, #4
 8012f80:	4628      	mov	r0, r5
 8012f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f86:	f7ff bbbf 	b.w	8012708 <uxr_deserialize_CLIENT_Representation>
 8012f8a:	2204      	movs	r2, #4
 8012f8c:	18b1      	adds	r1, r6, r2
 8012f8e:	4628      	mov	r0, r5
 8012f90:	f003 fcbe 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8012f94:	2202      	movs	r2, #2
 8012f96:	f106 0108 	add.w	r1, r6, #8
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	f003 fcb7 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8012fa2:	2202      	movs	r2, #2
 8012fa4:	4004      	ands	r4, r0
 8012fa6:	f106 010a 	add.w	r1, r6, #10
 8012faa:	4628      	mov	r0, r5
 8012fac:	f003 fcb0 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8012fb0:	b2e4      	uxtb	r4, r4
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	f106 010c 	add.w	r1, r6, #12
 8012fb8:	4628      	mov	r0, r5
 8012fba:	401c      	ands	r4, r3
 8012fbc:	f7fb fd0a 	bl	800e9d4 <ucdr_deserialize_bool>
 8012fc0:	4004      	ands	r4, r0
 8012fc2:	e78e      	b.n	8012ee2 <uxr_deserialize_ObjectVariant+0x2a>
 8012fc4:	68b1      	ldr	r1, [r6, #8]
 8012fc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012fca:	4628      	mov	r0, r5
 8012fcc:	f003 fd6c 	bl	8016aa8 <ucdr_deserialize_string>
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	e7b6      	b.n	8012f42 <uxr_deserialize_ObjectVariant+0x8a>
 8012fd4:	68b1      	ldr	r1, [r6, #8]
 8012fd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012fda:	4628      	mov	r0, r5
 8012fdc:	f003 fd64 	bl	8016aa8 <ucdr_deserialize_string>
 8012fe0:	4604      	mov	r4, r0
 8012fe2:	e7c4      	b.n	8012f6e <uxr_deserialize_ObjectVariant+0xb6>
 8012fe4:	f106 0308 	add.w	r3, r6, #8
 8012fe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012fec:	f106 010c 	add.w	r1, r6, #12
 8012ff0:	4628      	mov	r0, r5
 8012ff2:	f003 fd2f 	bl	8016a54 <ucdr_deserialize_sequence_uint8_t>
 8012ff6:	4604      	mov	r4, r0
 8012ff8:	e7b9      	b.n	8012f6e <uxr_deserialize_ObjectVariant+0xb6>
 8012ffa:	bf00      	nop

08012ffc <uxr_deserialize_BaseObjectRequest>:
 8012ffc:	b570      	push	{r4, r5, r6, lr}
 8012ffe:	2202      	movs	r2, #2
 8013000:	4605      	mov	r5, r0
 8013002:	460e      	mov	r6, r1
 8013004:	f003 fc84 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8013008:	2202      	movs	r2, #2
 801300a:	4604      	mov	r4, r0
 801300c:	18b1      	adds	r1, r6, r2
 801300e:	4628      	mov	r0, r5
 8013010:	f003 fc7e 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8013014:	4020      	ands	r0, r4
 8013016:	b2c0      	uxtb	r0, r0
 8013018:	bd70      	pop	{r4, r5, r6, pc}
 801301a:	bf00      	nop

0801301c <uxr_serialize_ActivityInfoVariant>:
 801301c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013020:	460d      	mov	r5, r1
 8013022:	7809      	ldrb	r1, [r1, #0]
 8013024:	4607      	mov	r7, r0
 8013026:	f7fb fced 	bl	800ea04 <ucdr_serialize_uint8_t>
 801302a:	4681      	mov	r9, r0
 801302c:	b138      	cbz	r0, 801303e <uxr_serialize_ActivityInfoVariant+0x22>
 801302e:	782b      	ldrb	r3, [r5, #0]
 8013030:	2b06      	cmp	r3, #6
 8013032:	f000 8082 	beq.w	801313a <uxr_serialize_ActivityInfoVariant+0x11e>
 8013036:	2b0d      	cmp	r3, #13
 8013038:	d016      	beq.n	8013068 <uxr_serialize_ActivityInfoVariant+0x4c>
 801303a:	2b05      	cmp	r3, #5
 801303c:	d002      	beq.n	8013044 <uxr_serialize_ActivityInfoVariant+0x28>
 801303e:	4648      	mov	r0, r9
 8013040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013044:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013048:	4638      	mov	r0, r7
 801304a:	f7fc fa17 	bl	800f47c <ucdr_serialize_int16_t>
 801304e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013052:	4681      	mov	r9, r0
 8013054:	4638      	mov	r0, r7
 8013056:	f7fc f941 	bl	800f2dc <ucdr_serialize_uint64_t>
 801305a:	ea09 0000 	and.w	r0, r9, r0
 801305e:	fa5f f980 	uxtb.w	r9, r0
 8013062:	4648      	mov	r0, r9
 8013064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013068:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801306c:	4638      	mov	r0, r7
 801306e:	f7fc fa05 	bl	800f47c <ucdr_serialize_int16_t>
 8013072:	68e9      	ldr	r1, [r5, #12]
 8013074:	4681      	mov	r9, r0
 8013076:	4638      	mov	r0, r7
 8013078:	f7fb feda 	bl	800ee30 <ucdr_serialize_uint32_t>
 801307c:	68eb      	ldr	r3, [r5, #12]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d0eb      	beq.n	801305a <uxr_serialize_ActivityInfoVariant+0x3e>
 8013082:	b320      	cbz	r0, 80130ce <uxr_serialize_ActivityInfoVariant+0xb2>
 8013084:	f105 080c 	add.w	r8, r5, #12
 8013088:	2600      	movs	r6, #0
 801308a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801308e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8013092:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8013096:	4638      	mov	r0, r7
 8013098:	f7fb fcb4 	bl	800ea04 <ucdr_serialize_uint8_t>
 801309c:	2800      	cmp	r0, #0
 801309e:	d053      	beq.n	8013148 <uxr_serialize_ActivityInfoVariant+0x12c>
 80130a0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80130a4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80130a8:	0074      	lsls	r4, r6, #1
 80130aa:	00c9      	lsls	r1, r1, #3
 80130ac:	2b03      	cmp	r3, #3
 80130ae:	d854      	bhi.n	801315a <uxr_serialize_ActivityInfoVariant+0x13e>
 80130b0:	e8df f003 	tbb	[pc, r3]
 80130b4:	02102132 	.word	0x02102132
 80130b8:	4441      	add	r1, r8
 80130ba:	4638      	mov	r0, r7
 80130bc:	6889      	ldr	r1, [r1, #8]
 80130be:	f003 fce3 	bl	8016a88 <ucdr_serialize_string>
 80130c2:	68ea      	ldr	r2, [r5, #12]
 80130c4:	3601      	adds	r6, #1
 80130c6:	4296      	cmp	r6, r2
 80130c8:	d242      	bcs.n	8013150 <uxr_serialize_ActivityInfoVariant+0x134>
 80130ca:	2800      	cmp	r0, #0
 80130cc:	d1dd      	bne.n	801308a <uxr_serialize_ActivityInfoVariant+0x6e>
 80130ce:	f04f 0900 	mov.w	r9, #0
 80130d2:	e7b4      	b.n	801303e <uxr_serialize_ActivityInfoVariant+0x22>
 80130d4:	3108      	adds	r1, #8
 80130d6:	4441      	add	r1, r8
 80130d8:	2210      	movs	r2, #16
 80130da:	4638      	mov	r0, r7
 80130dc:	f003 fbb4 	bl	8016848 <ucdr_serialize_array_uint8_t>
 80130e0:	4434      	add	r4, r6
 80130e2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80130e6:	4604      	mov	r4, r0
 80130e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80130ea:	4638      	mov	r0, r7
 80130ec:	f7fb fea0 	bl	800ee30 <ucdr_serialize_uint32_t>
 80130f0:	4020      	ands	r0, r4
 80130f2:	b2c0      	uxtb	r0, r0
 80130f4:	e7e5      	b.n	80130c2 <uxr_serialize_ActivityInfoVariant+0xa6>
 80130f6:	3108      	adds	r1, #8
 80130f8:	4441      	add	r1, r8
 80130fa:	2204      	movs	r2, #4
 80130fc:	4638      	mov	r0, r7
 80130fe:	f003 fba3 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8013102:	4434      	add	r4, r6
 8013104:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013108:	4604      	mov	r4, r0
 801310a:	8b19      	ldrh	r1, [r3, #24]
 801310c:	4638      	mov	r0, r7
 801310e:	f7fb fca5 	bl	800ea5c <ucdr_serialize_uint16_t>
 8013112:	4020      	ands	r0, r4
 8013114:	b2c0      	uxtb	r0, r0
 8013116:	e7d4      	b.n	80130c2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013118:	3108      	adds	r1, #8
 801311a:	4441      	add	r1, r8
 801311c:	2202      	movs	r2, #2
 801311e:	4638      	mov	r0, r7
 8013120:	f003 fb92 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8013124:	4434      	add	r4, r6
 8013126:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801312a:	4604      	mov	r4, r0
 801312c:	7d99      	ldrb	r1, [r3, #22]
 801312e:	4638      	mov	r0, r7
 8013130:	f7fb fc68 	bl	800ea04 <ucdr_serialize_uint8_t>
 8013134:	4020      	ands	r0, r4
 8013136:	b2c0      	uxtb	r0, r0
 8013138:	e7c3      	b.n	80130c2 <uxr_serialize_ActivityInfoVariant+0xa6>
 801313a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801313e:	4638      	mov	r0, r7
 8013140:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013144:	f7fc b99a 	b.w	800f47c <ucdr_serialize_int16_t>
 8013148:	68ea      	ldr	r2, [r5, #12]
 801314a:	3601      	adds	r6, #1
 801314c:	42b2      	cmp	r2, r6
 801314e:	d8be      	bhi.n	80130ce <uxr_serialize_ActivityInfoVariant+0xb2>
 8013150:	ea09 0900 	and.w	r9, r9, r0
 8013154:	fa5f f989 	uxtb.w	r9, r9
 8013158:	e771      	b.n	801303e <uxr_serialize_ActivityInfoVariant+0x22>
 801315a:	68eb      	ldr	r3, [r5, #12]
 801315c:	3601      	adds	r6, #1
 801315e:	429e      	cmp	r6, r3
 8013160:	f10a 0a18 	add.w	sl, sl, #24
 8013164:	d395      	bcc.n	8013092 <uxr_serialize_ActivityInfoVariant+0x76>
 8013166:	e76a      	b.n	801303e <uxr_serialize_ActivityInfoVariant+0x22>

08013168 <uxr_deserialize_BaseObjectReply>:
 8013168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801316c:	2202      	movs	r2, #2
 801316e:	4606      	mov	r6, r0
 8013170:	460f      	mov	r7, r1
 8013172:	f003 fbcd 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8013176:	2202      	movs	r2, #2
 8013178:	18b9      	adds	r1, r7, r2
 801317a:	4605      	mov	r5, r0
 801317c:	4630      	mov	r0, r6
 801317e:	f003 fbc7 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8013182:	1d39      	adds	r1, r7, #4
 8013184:	4680      	mov	r8, r0
 8013186:	4630      	mov	r0, r6
 8013188:	f7fb fc52 	bl	800ea30 <ucdr_deserialize_uint8_t>
 801318c:	1d79      	adds	r1, r7, #5
 801318e:	4604      	mov	r4, r0
 8013190:	4630      	mov	r0, r6
 8013192:	f7fb fc4d 	bl	800ea30 <ucdr_deserialize_uint8_t>
 8013196:	ea05 0508 	and.w	r5, r5, r8
 801319a:	402c      	ands	r4, r5
 801319c:	4020      	ands	r0, r4
 801319e:	b2c0      	uxtb	r0, r0
 80131a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080131a4 <uxr_serialize_ReadSpecification>:
 80131a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131a8:	460e      	mov	r6, r1
 80131aa:	7809      	ldrb	r1, [r1, #0]
 80131ac:	4607      	mov	r7, r0
 80131ae:	f7fb fc29 	bl	800ea04 <ucdr_serialize_uint8_t>
 80131b2:	7871      	ldrb	r1, [r6, #1]
 80131b4:	4604      	mov	r4, r0
 80131b6:	4638      	mov	r0, r7
 80131b8:	f7fb fc24 	bl	800ea04 <ucdr_serialize_uint8_t>
 80131bc:	78b1      	ldrb	r1, [r6, #2]
 80131be:	4004      	ands	r4, r0
 80131c0:	4638      	mov	r0, r7
 80131c2:	f7fb fbf1 	bl	800e9a8 <ucdr_serialize_bool>
 80131c6:	78b3      	ldrb	r3, [r6, #2]
 80131c8:	b2e4      	uxtb	r4, r4
 80131ca:	4004      	ands	r4, r0
 80131cc:	b94b      	cbnz	r3, 80131e2 <uxr_serialize_ReadSpecification+0x3e>
 80131ce:	7a31      	ldrb	r1, [r6, #8]
 80131d0:	4638      	mov	r0, r7
 80131d2:	f7fb fbe9 	bl	800e9a8 <ucdr_serialize_bool>
 80131d6:	7a33      	ldrb	r3, [r6, #8]
 80131d8:	4004      	ands	r4, r0
 80131da:	b943      	cbnz	r3, 80131ee <uxr_serialize_ReadSpecification+0x4a>
 80131dc:	4620      	mov	r0, r4
 80131de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131e2:	6871      	ldr	r1, [r6, #4]
 80131e4:	4638      	mov	r0, r7
 80131e6:	f003 fc4f 	bl	8016a88 <ucdr_serialize_string>
 80131ea:	4004      	ands	r4, r0
 80131ec:	e7ef      	b.n	80131ce <uxr_serialize_ReadSpecification+0x2a>
 80131ee:	8971      	ldrh	r1, [r6, #10]
 80131f0:	4638      	mov	r0, r7
 80131f2:	f7fb fc33 	bl	800ea5c <ucdr_serialize_uint16_t>
 80131f6:	89b1      	ldrh	r1, [r6, #12]
 80131f8:	4605      	mov	r5, r0
 80131fa:	4638      	mov	r0, r7
 80131fc:	f7fb fc2e 	bl	800ea5c <ucdr_serialize_uint16_t>
 8013200:	89f1      	ldrh	r1, [r6, #14]
 8013202:	4005      	ands	r5, r0
 8013204:	4638      	mov	r0, r7
 8013206:	f7fb fc29 	bl	800ea5c <ucdr_serialize_uint16_t>
 801320a:	8a31      	ldrh	r1, [r6, #16]
 801320c:	4680      	mov	r8, r0
 801320e:	4638      	mov	r0, r7
 8013210:	f7fb fc24 	bl	800ea5c <ucdr_serialize_uint16_t>
 8013214:	b2ed      	uxtb	r5, r5
 8013216:	4025      	ands	r5, r4
 8013218:	ea08 0505 	and.w	r5, r8, r5
 801321c:	ea00 0405 	and.w	r4, r0, r5
 8013220:	4620      	mov	r0, r4
 8013222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013226:	bf00      	nop

08013228 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013228:	f7ff ba16 	b.w	8012658 <uxr_serialize_CLIENT_Representation>

0801322c <uxr_serialize_CREATE_Payload>:
 801322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801322e:	2202      	movs	r2, #2
 8013230:	4607      	mov	r7, r0
 8013232:	460e      	mov	r6, r1
 8013234:	f003 fb08 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8013238:	2202      	movs	r2, #2
 801323a:	18b1      	adds	r1, r6, r2
 801323c:	4605      	mov	r5, r0
 801323e:	4638      	mov	r0, r7
 8013240:	f003 fb02 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8013244:	7931      	ldrb	r1, [r6, #4]
 8013246:	4604      	mov	r4, r0
 8013248:	4638      	mov	r0, r7
 801324a:	f7fb fbdb 	bl	800ea04 <ucdr_serialize_uint8_t>
 801324e:	b170      	cbz	r0, 801326e <uxr_serialize_CREATE_Payload+0x42>
 8013250:	7933      	ldrb	r3, [r6, #4]
 8013252:	402c      	ands	r4, r5
 8013254:	3b01      	subs	r3, #1
 8013256:	b2e4      	uxtb	r4, r4
 8013258:	2b0d      	cmp	r3, #13
 801325a:	d809      	bhi.n	8013270 <uxr_serialize_CREATE_Payload+0x44>
 801325c:	e8df f003 	tbb	[pc, r3]
 8013260:	23230a4c 	.word	0x23230a4c
 8013264:	0a0a0a0a 	.word	0x0a0a0a0a
 8013268:	12121208 	.word	0x12121208
 801326c:	3e45      	.short	0x3e45
 801326e:	2400      	movs	r4, #0
 8013270:	4620      	mov	r0, r4
 8013272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013274:	f106 0108 	add.w	r1, r6, #8
 8013278:	4638      	mov	r0, r7
 801327a:	f7ff faf3 	bl	8012864 <uxr_serialize_DATAWRITER_Representation>
 801327e:	4004      	ands	r4, r0
 8013280:	4620      	mov	r0, r4
 8013282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013284:	7a31      	ldrb	r1, [r6, #8]
 8013286:	4638      	mov	r0, r7
 8013288:	f7fb fbbc 	bl	800ea04 <ucdr_serialize_uint8_t>
 801328c:	2800      	cmp	r0, #0
 801328e:	d0ee      	beq.n	801326e <uxr_serialize_CREATE_Payload+0x42>
 8013290:	7a33      	ldrb	r3, [r6, #8]
 8013292:	2b01      	cmp	r3, #1
 8013294:	d001      	beq.n	801329a <uxr_serialize_CREATE_Payload+0x6e>
 8013296:	2b02      	cmp	r3, #2
 8013298:	d1ea      	bne.n	8013270 <uxr_serialize_CREATE_Payload+0x44>
 801329a:	68f1      	ldr	r1, [r6, #12]
 801329c:	4638      	mov	r0, r7
 801329e:	f003 fbf3 	bl	8016a88 <ucdr_serialize_string>
 80132a2:	4004      	ands	r4, r0
 80132a4:	e7e4      	b.n	8013270 <uxr_serialize_CREATE_Payload+0x44>
 80132a6:	7a31      	ldrb	r1, [r6, #8]
 80132a8:	4638      	mov	r0, r7
 80132aa:	f7fb fbab 	bl	800ea04 <ucdr_serialize_uint8_t>
 80132ae:	4605      	mov	r5, r0
 80132b0:	b158      	cbz	r0, 80132ca <uxr_serialize_CREATE_Payload+0x9e>
 80132b2:	7a33      	ldrb	r3, [r6, #8]
 80132b4:	2b02      	cmp	r3, #2
 80132b6:	d034      	beq.n	8013322 <uxr_serialize_CREATE_Payload+0xf6>
 80132b8:	2b03      	cmp	r3, #3
 80132ba:	d106      	bne.n	80132ca <uxr_serialize_CREATE_Payload+0x9e>
 80132bc:	68f2      	ldr	r2, [r6, #12]
 80132be:	f106 0110 	add.w	r1, r6, #16
 80132c2:	4638      	mov	r0, r7
 80132c4:	f003 fbb4 	bl	8016a30 <ucdr_serialize_sequence_uint8_t>
 80132c8:	4605      	mov	r5, r0
 80132ca:	2202      	movs	r2, #2
 80132cc:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80132d0:	4638      	mov	r0, r7
 80132d2:	f003 fab9 	bl	8016848 <ucdr_serialize_array_uint8_t>
 80132d6:	4028      	ands	r0, r5
 80132d8:	4004      	ands	r4, r0
 80132da:	e7c9      	b.n	8013270 <uxr_serialize_CREATE_Payload+0x44>
 80132dc:	f106 0108 	add.w	r1, r6, #8
 80132e0:	4638      	mov	r0, r7
 80132e2:	f7ff f9b9 	bl	8012658 <uxr_serialize_CLIENT_Representation>
 80132e6:	4004      	ands	r4, r0
 80132e8:	e7c2      	b.n	8013270 <uxr_serialize_CREATE_Payload+0x44>
 80132ea:	f106 0108 	add.w	r1, r6, #8
 80132ee:	4638      	mov	r0, r7
 80132f0:	f7ff fa6e 	bl	80127d0 <uxr_serialize_AGENT_Representation>
 80132f4:	4004      	ands	r4, r0
 80132f6:	e7bb      	b.n	8013270 <uxr_serialize_CREATE_Payload+0x44>
 80132f8:	7a31      	ldrb	r1, [r6, #8]
 80132fa:	4638      	mov	r0, r7
 80132fc:	f7fb fb82 	bl	800ea04 <ucdr_serialize_uint8_t>
 8013300:	4605      	mov	r5, r0
 8013302:	b130      	cbz	r0, 8013312 <uxr_serialize_CREATE_Payload+0xe6>
 8013304:	7a33      	ldrb	r3, [r6, #8]
 8013306:	2b02      	cmp	r3, #2
 8013308:	d011      	beq.n	801332e <uxr_serialize_CREATE_Payload+0x102>
 801330a:	2b03      	cmp	r3, #3
 801330c:	d015      	beq.n	801333a <uxr_serialize_CREATE_Payload+0x10e>
 801330e:	2b01      	cmp	r3, #1
 8013310:	d00d      	beq.n	801332e <uxr_serialize_CREATE_Payload+0x102>
 8013312:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8013316:	4638      	mov	r0, r7
 8013318:	f7fc f8b0 	bl	800f47c <ucdr_serialize_int16_t>
 801331c:	4028      	ands	r0, r5
 801331e:	4004      	ands	r4, r0
 8013320:	e7a6      	b.n	8013270 <uxr_serialize_CREATE_Payload+0x44>
 8013322:	68f1      	ldr	r1, [r6, #12]
 8013324:	4638      	mov	r0, r7
 8013326:	f003 fbaf 	bl	8016a88 <ucdr_serialize_string>
 801332a:	4605      	mov	r5, r0
 801332c:	e7cd      	b.n	80132ca <uxr_serialize_CREATE_Payload+0x9e>
 801332e:	68f1      	ldr	r1, [r6, #12]
 8013330:	4638      	mov	r0, r7
 8013332:	f003 fba9 	bl	8016a88 <ucdr_serialize_string>
 8013336:	4605      	mov	r5, r0
 8013338:	e7eb      	b.n	8013312 <uxr_serialize_CREATE_Payload+0xe6>
 801333a:	68f2      	ldr	r2, [r6, #12]
 801333c:	f106 0110 	add.w	r1, r6, #16
 8013340:	4638      	mov	r0, r7
 8013342:	f003 fb75 	bl	8016a30 <ucdr_serialize_sequence_uint8_t>
 8013346:	4605      	mov	r5, r0
 8013348:	e7e3      	b.n	8013312 <uxr_serialize_CREATE_Payload+0xe6>
 801334a:	bf00      	nop

0801334c <uxr_serialize_GET_INFO_Payload>:
 801334c:	b570      	push	{r4, r5, r6, lr}
 801334e:	2202      	movs	r2, #2
 8013350:	4605      	mov	r5, r0
 8013352:	460e      	mov	r6, r1
 8013354:	f003 fa78 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8013358:	2202      	movs	r2, #2
 801335a:	18b1      	adds	r1, r6, r2
 801335c:	4604      	mov	r4, r0
 801335e:	4628      	mov	r0, r5
 8013360:	f003 fa72 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8013364:	6871      	ldr	r1, [r6, #4]
 8013366:	4004      	ands	r4, r0
 8013368:	4628      	mov	r0, r5
 801336a:	f7fb fd61 	bl	800ee30 <ucdr_serialize_uint32_t>
 801336e:	b2e4      	uxtb	r4, r4
 8013370:	4020      	ands	r0, r4
 8013372:	bd70      	pop	{r4, r5, r6, pc}

08013374 <uxr_deserialize_GET_INFO_Payload>:
 8013374:	b570      	push	{r4, r5, r6, lr}
 8013376:	2202      	movs	r2, #2
 8013378:	4605      	mov	r5, r0
 801337a:	460e      	mov	r6, r1
 801337c:	f003 fac8 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8013380:	2202      	movs	r2, #2
 8013382:	18b1      	adds	r1, r6, r2
 8013384:	4604      	mov	r4, r0
 8013386:	4628      	mov	r0, r5
 8013388:	f003 fac2 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 801338c:	1d31      	adds	r1, r6, #4
 801338e:	4004      	ands	r4, r0
 8013390:	4628      	mov	r0, r5
 8013392:	f7fb fe7d 	bl	800f090 <ucdr_deserialize_uint32_t>
 8013396:	b2e4      	uxtb	r4, r4
 8013398:	4020      	ands	r0, r4
 801339a:	bd70      	pop	{r4, r5, r6, pc}

0801339c <uxr_serialize_DELETE_Payload>:
 801339c:	b570      	push	{r4, r5, r6, lr}
 801339e:	2202      	movs	r2, #2
 80133a0:	4605      	mov	r5, r0
 80133a2:	460e      	mov	r6, r1
 80133a4:	f003 fa50 	bl	8016848 <ucdr_serialize_array_uint8_t>
 80133a8:	2202      	movs	r2, #2
 80133aa:	4604      	mov	r4, r0
 80133ac:	18b1      	adds	r1, r6, r2
 80133ae:	4628      	mov	r0, r5
 80133b0:	f003 fa4a 	bl	8016848 <ucdr_serialize_array_uint8_t>
 80133b4:	4020      	ands	r0, r4
 80133b6:	b2c0      	uxtb	r0, r0
 80133b8:	bd70      	pop	{r4, r5, r6, pc}
 80133ba:	bf00      	nop

080133bc <uxr_deserialize_STATUS_AGENT_Payload>:
 80133bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133c0:	4605      	mov	r5, r0
 80133c2:	460e      	mov	r6, r1
 80133c4:	f7fb fb34 	bl	800ea30 <ucdr_deserialize_uint8_t>
 80133c8:	1c71      	adds	r1, r6, #1
 80133ca:	4604      	mov	r4, r0
 80133cc:	4628      	mov	r0, r5
 80133ce:	f7fb fb2f 	bl	800ea30 <ucdr_deserialize_uint8_t>
 80133d2:	2204      	movs	r2, #4
 80133d4:	18b1      	adds	r1, r6, r2
 80133d6:	4680      	mov	r8, r0
 80133d8:	4628      	mov	r0, r5
 80133da:	f003 fa99 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 80133de:	f106 0108 	add.w	r1, r6, #8
 80133e2:	4607      	mov	r7, r0
 80133e4:	2202      	movs	r2, #2
 80133e6:	4628      	mov	r0, r5
 80133e8:	f003 fa92 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 80133ec:	ea04 0308 	and.w	r3, r4, r8
 80133f0:	b2db      	uxtb	r3, r3
 80133f2:	ea03 0407 	and.w	r4, r3, r7
 80133f6:	2202      	movs	r2, #2
 80133f8:	4607      	mov	r7, r0
 80133fa:	f106 010a 	add.w	r1, r6, #10
 80133fe:	4628      	mov	r0, r5
 8013400:	f003 fa86 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8013404:	f106 010c 	add.w	r1, r6, #12
 8013408:	4603      	mov	r3, r0
 801340a:	4628      	mov	r0, r5
 801340c:	461d      	mov	r5, r3
 801340e:	f7fb fae1 	bl	800e9d4 <ucdr_deserialize_bool>
 8013412:	403c      	ands	r4, r7
 8013414:	4025      	ands	r5, r4
 8013416:	4028      	ands	r0, r5
 8013418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801341c <uxr_deserialize_STATUS_Payload>:
 801341c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013420:	2202      	movs	r2, #2
 8013422:	4606      	mov	r6, r0
 8013424:	460f      	mov	r7, r1
 8013426:	f003 fa73 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 801342a:	2202      	movs	r2, #2
 801342c:	18b9      	adds	r1, r7, r2
 801342e:	4605      	mov	r5, r0
 8013430:	4630      	mov	r0, r6
 8013432:	f003 fa6d 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8013436:	1d39      	adds	r1, r7, #4
 8013438:	4680      	mov	r8, r0
 801343a:	4630      	mov	r0, r6
 801343c:	f7fb faf8 	bl	800ea30 <ucdr_deserialize_uint8_t>
 8013440:	1d79      	adds	r1, r7, #5
 8013442:	4604      	mov	r4, r0
 8013444:	4630      	mov	r0, r6
 8013446:	f7fb faf3 	bl	800ea30 <ucdr_deserialize_uint8_t>
 801344a:	ea05 0508 	and.w	r5, r5, r8
 801344e:	402c      	ands	r4, r5
 8013450:	4020      	ands	r0, r4
 8013452:	b2c0      	uxtb	r0, r0
 8013454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013458 <uxr_serialize_INFO_Payload>:
 8013458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801345c:	2202      	movs	r2, #2
 801345e:	460c      	mov	r4, r1
 8013460:	4605      	mov	r5, r0
 8013462:	f003 f9f1 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8013466:	2202      	movs	r2, #2
 8013468:	18a1      	adds	r1, r4, r2
 801346a:	4680      	mov	r8, r0
 801346c:	4628      	mov	r0, r5
 801346e:	f003 f9eb 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8013472:	7921      	ldrb	r1, [r4, #4]
 8013474:	4607      	mov	r7, r0
 8013476:	4628      	mov	r0, r5
 8013478:	f7fb fac4 	bl	800ea04 <ucdr_serialize_uint8_t>
 801347c:	7961      	ldrb	r1, [r4, #5]
 801347e:	4606      	mov	r6, r0
 8013480:	4628      	mov	r0, r5
 8013482:	f7fb fabf 	bl	800ea04 <ucdr_serialize_uint8_t>
 8013486:	ea08 0807 	and.w	r8, r8, r7
 801348a:	ea06 0608 	and.w	r6, r6, r8
 801348e:	4006      	ands	r6, r0
 8013490:	7a21      	ldrb	r1, [r4, #8]
 8013492:	4628      	mov	r0, r5
 8013494:	f7fb fa88 	bl	800e9a8 <ucdr_serialize_bool>
 8013498:	7a23      	ldrb	r3, [r4, #8]
 801349a:	b2f7      	uxtb	r7, r6
 801349c:	4606      	mov	r6, r0
 801349e:	b96b      	cbnz	r3, 80134bc <uxr_serialize_INFO_Payload+0x64>
 80134a0:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80134a4:	4628      	mov	r0, r5
 80134a6:	f7fb fa7f 	bl	800e9a8 <ucdr_serialize_bool>
 80134aa:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80134ae:	4030      	ands	r0, r6
 80134b0:	b2c6      	uxtb	r6, r0
 80134b2:	b983      	cbnz	r3, 80134d6 <uxr_serialize_INFO_Payload+0x7e>
 80134b4:	ea06 0007 	and.w	r0, r6, r7
 80134b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134bc:	7b21      	ldrb	r1, [r4, #12]
 80134be:	4628      	mov	r0, r5
 80134c0:	f7fb faa0 	bl	800ea04 <ucdr_serialize_uint8_t>
 80134c4:	b188      	cbz	r0, 80134ea <uxr_serialize_INFO_Payload+0x92>
 80134c6:	f104 010c 	add.w	r1, r4, #12
 80134ca:	4628      	mov	r0, r5
 80134cc:	f7ff f9f2 	bl	80128b4 <uxr_serialize_ObjectVariant.part.0>
 80134d0:	4030      	ands	r0, r6
 80134d2:	b2c6      	uxtb	r6, r0
 80134d4:	e7e4      	b.n	80134a0 <uxr_serialize_INFO_Payload+0x48>
 80134d6:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80134da:	4628      	mov	r0, r5
 80134dc:	f7ff fd9e 	bl	801301c <uxr_serialize_ActivityInfoVariant>
 80134e0:	4006      	ands	r6, r0
 80134e2:	ea06 0007 	and.w	r0, r6, r7
 80134e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134ea:	4606      	mov	r6, r0
 80134ec:	e7d8      	b.n	80134a0 <uxr_serialize_INFO_Payload+0x48>
 80134ee:	bf00      	nop

080134f0 <uxr_serialize_READ_DATA_Payload>:
 80134f0:	b570      	push	{r4, r5, r6, lr}
 80134f2:	2202      	movs	r2, #2
 80134f4:	4605      	mov	r5, r0
 80134f6:	460e      	mov	r6, r1
 80134f8:	f003 f9a6 	bl	8016848 <ucdr_serialize_array_uint8_t>
 80134fc:	2202      	movs	r2, #2
 80134fe:	18b1      	adds	r1, r6, r2
 8013500:	4604      	mov	r4, r0
 8013502:	4628      	mov	r0, r5
 8013504:	f003 f9a0 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8013508:	1d31      	adds	r1, r6, #4
 801350a:	4004      	ands	r4, r0
 801350c:	4628      	mov	r0, r5
 801350e:	f7ff fe49 	bl	80131a4 <uxr_serialize_ReadSpecification>
 8013512:	b2e4      	uxtb	r4, r4
 8013514:	4020      	ands	r0, r4
 8013516:	bd70      	pop	{r4, r5, r6, pc}

08013518 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013518:	b570      	push	{r4, r5, r6, lr}
 801351a:	2202      	movs	r2, #2
 801351c:	4605      	mov	r5, r0
 801351e:	460e      	mov	r6, r1
 8013520:	f003 f992 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8013524:	2202      	movs	r2, #2
 8013526:	4604      	mov	r4, r0
 8013528:	18b1      	adds	r1, r6, r2
 801352a:	4628      	mov	r0, r5
 801352c:	f003 f98c 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8013530:	4020      	ands	r0, r4
 8013532:	b2c0      	uxtb	r0, r0
 8013534:	bd70      	pop	{r4, r5, r6, pc}
 8013536:	bf00      	nop

08013538 <uxr_serialize_ACKNACK_Payload>:
 8013538:	b570      	push	{r4, r5, r6, lr}
 801353a:	460c      	mov	r4, r1
 801353c:	460e      	mov	r6, r1
 801353e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013542:	4605      	mov	r5, r0
 8013544:	f7fb fa8a 	bl	800ea5c <ucdr_serialize_uint16_t>
 8013548:	2202      	movs	r2, #2
 801354a:	4621      	mov	r1, r4
 801354c:	4604      	mov	r4, r0
 801354e:	4628      	mov	r0, r5
 8013550:	f003 f97a 	bl	8016848 <ucdr_serialize_array_uint8_t>
 8013554:	7931      	ldrb	r1, [r6, #4]
 8013556:	4004      	ands	r4, r0
 8013558:	4628      	mov	r0, r5
 801355a:	f7fb fa53 	bl	800ea04 <ucdr_serialize_uint8_t>
 801355e:	b2e4      	uxtb	r4, r4
 8013560:	4020      	ands	r0, r4
 8013562:	bd70      	pop	{r4, r5, r6, pc}

08013564 <uxr_deserialize_ACKNACK_Payload>:
 8013564:	b570      	push	{r4, r5, r6, lr}
 8013566:	4605      	mov	r5, r0
 8013568:	460e      	mov	r6, r1
 801356a:	f7fb fb77 	bl	800ec5c <ucdr_deserialize_uint16_t>
 801356e:	2202      	movs	r2, #2
 8013570:	18b1      	adds	r1, r6, r2
 8013572:	4604      	mov	r4, r0
 8013574:	4628      	mov	r0, r5
 8013576:	f003 f9cb 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 801357a:	1d31      	adds	r1, r6, #4
 801357c:	4004      	ands	r4, r0
 801357e:	4628      	mov	r0, r5
 8013580:	f7fb fa56 	bl	800ea30 <ucdr_deserialize_uint8_t>
 8013584:	b2e4      	uxtb	r4, r4
 8013586:	4020      	ands	r0, r4
 8013588:	bd70      	pop	{r4, r5, r6, pc}
 801358a:	bf00      	nop

0801358c <uxr_serialize_HEARTBEAT_Payload>:
 801358c:	b570      	push	{r4, r5, r6, lr}
 801358e:	460d      	mov	r5, r1
 8013590:	8809      	ldrh	r1, [r1, #0]
 8013592:	4606      	mov	r6, r0
 8013594:	f7fb fa62 	bl	800ea5c <ucdr_serialize_uint16_t>
 8013598:	8869      	ldrh	r1, [r5, #2]
 801359a:	4604      	mov	r4, r0
 801359c:	4630      	mov	r0, r6
 801359e:	f7fb fa5d 	bl	800ea5c <ucdr_serialize_uint16_t>
 80135a2:	7929      	ldrb	r1, [r5, #4]
 80135a4:	4004      	ands	r4, r0
 80135a6:	4630      	mov	r0, r6
 80135a8:	f7fb fa2c 	bl	800ea04 <ucdr_serialize_uint8_t>
 80135ac:	b2e4      	uxtb	r4, r4
 80135ae:	4020      	ands	r0, r4
 80135b0:	bd70      	pop	{r4, r5, r6, pc}
 80135b2:	bf00      	nop

080135b4 <uxr_deserialize_HEARTBEAT_Payload>:
 80135b4:	b570      	push	{r4, r5, r6, lr}
 80135b6:	4605      	mov	r5, r0
 80135b8:	460e      	mov	r6, r1
 80135ba:	f7fb fb4f 	bl	800ec5c <ucdr_deserialize_uint16_t>
 80135be:	1cb1      	adds	r1, r6, #2
 80135c0:	4604      	mov	r4, r0
 80135c2:	4628      	mov	r0, r5
 80135c4:	f7fb fb4a 	bl	800ec5c <ucdr_deserialize_uint16_t>
 80135c8:	1d31      	adds	r1, r6, #4
 80135ca:	4004      	ands	r4, r0
 80135cc:	4628      	mov	r0, r5
 80135ce:	f7fb fa2f 	bl	800ea30 <ucdr_deserialize_uint8_t>
 80135d2:	b2e4      	uxtb	r4, r4
 80135d4:	4020      	ands	r0, r4
 80135d6:	bd70      	pop	{r4, r5, r6, pc}

080135d8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80135d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135dc:	4605      	mov	r5, r0
 80135de:	460e      	mov	r6, r1
 80135e0:	f7fc f8d8 	bl	800f794 <ucdr_deserialize_int32_t>
 80135e4:	1d31      	adds	r1, r6, #4
 80135e6:	4607      	mov	r7, r0
 80135e8:	4628      	mov	r0, r5
 80135ea:	f7fb fd51 	bl	800f090 <ucdr_deserialize_uint32_t>
 80135ee:	f106 0108 	add.w	r1, r6, #8
 80135f2:	4680      	mov	r8, r0
 80135f4:	4628      	mov	r0, r5
 80135f6:	f7fc f8cd 	bl	800f794 <ucdr_deserialize_int32_t>
 80135fa:	f106 010c 	add.w	r1, r6, #12
 80135fe:	4604      	mov	r4, r0
 8013600:	4628      	mov	r0, r5
 8013602:	f7fb fd45 	bl	800f090 <ucdr_deserialize_uint32_t>
 8013606:	ea07 0708 	and.w	r7, r7, r8
 801360a:	403c      	ands	r4, r7
 801360c:	f106 0110 	add.w	r1, r6, #16
 8013610:	4004      	ands	r4, r0
 8013612:	4628      	mov	r0, r5
 8013614:	f7fc f8be 	bl	800f794 <ucdr_deserialize_int32_t>
 8013618:	f106 0114 	add.w	r1, r6, #20
 801361c:	4607      	mov	r7, r0
 801361e:	4628      	mov	r0, r5
 8013620:	f7fb fd36 	bl	800f090 <ucdr_deserialize_uint32_t>
 8013624:	b2e4      	uxtb	r4, r4
 8013626:	403c      	ands	r4, r7
 8013628:	4020      	ands	r0, r4
 801362a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801362e:	bf00      	nop

08013630 <uxr_serialize_SampleIdentity>:
 8013630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013634:	220c      	movs	r2, #12
 8013636:	4604      	mov	r4, r0
 8013638:	460d      	mov	r5, r1
 801363a:	f003 f905 	bl	8016848 <ucdr_serialize_array_uint8_t>
 801363e:	2203      	movs	r2, #3
 8013640:	f105 010c 	add.w	r1, r5, #12
 8013644:	4607      	mov	r7, r0
 8013646:	4620      	mov	r0, r4
 8013648:	f003 f8fe 	bl	8016848 <ucdr_serialize_array_uint8_t>
 801364c:	7be9      	ldrb	r1, [r5, #15]
 801364e:	4680      	mov	r8, r0
 8013650:	4620      	mov	r0, r4
 8013652:	f7fb f9d7 	bl	800ea04 <ucdr_serialize_uint8_t>
 8013656:	6929      	ldr	r1, [r5, #16]
 8013658:	4606      	mov	r6, r0
 801365a:	4620      	mov	r0, r4
 801365c:	f7fc f802 	bl	800f664 <ucdr_serialize_int32_t>
 8013660:	6969      	ldr	r1, [r5, #20]
 8013662:	4603      	mov	r3, r0
 8013664:	4620      	mov	r0, r4
 8013666:	ea07 0708 	and.w	r7, r7, r8
 801366a:	461c      	mov	r4, r3
 801366c:	f7fb fbe0 	bl	800ee30 <ucdr_serialize_uint32_t>
 8013670:	403e      	ands	r6, r7
 8013672:	4034      	ands	r4, r6
 8013674:	4020      	ands	r0, r4
 8013676:	b2c0      	uxtb	r0, r0
 8013678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801367c <uxr_deserialize_SampleIdentity>:
 801367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013680:	220c      	movs	r2, #12
 8013682:	4604      	mov	r4, r0
 8013684:	460d      	mov	r5, r1
 8013686:	f003 f943 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 801368a:	2203      	movs	r2, #3
 801368c:	f105 010c 	add.w	r1, r5, #12
 8013690:	4607      	mov	r7, r0
 8013692:	4620      	mov	r0, r4
 8013694:	f003 f93c 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8013698:	f105 010f 	add.w	r1, r5, #15
 801369c:	4680      	mov	r8, r0
 801369e:	4620      	mov	r0, r4
 80136a0:	f7fb f9c6 	bl	800ea30 <ucdr_deserialize_uint8_t>
 80136a4:	f105 0110 	add.w	r1, r5, #16
 80136a8:	4606      	mov	r6, r0
 80136aa:	4620      	mov	r0, r4
 80136ac:	f7fc f872 	bl	800f794 <ucdr_deserialize_int32_t>
 80136b0:	f105 0114 	add.w	r1, r5, #20
 80136b4:	4603      	mov	r3, r0
 80136b6:	4620      	mov	r0, r4
 80136b8:	ea07 0708 	and.w	r7, r7, r8
 80136bc:	461c      	mov	r4, r3
 80136be:	f7fb fce7 	bl	800f090 <ucdr_deserialize_uint32_t>
 80136c2:	403e      	ands	r6, r7
 80136c4:	4034      	ands	r4, r6
 80136c6:	4020      	ands	r0, r4
 80136c8:	b2c0      	uxtb	r0, r0
 80136ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136ce:	bf00      	nop

080136d0 <rcl_client_get_rmw_handle>:
 80136d0:	b118      	cbz	r0, 80136da <rcl_client_get_rmw_handle+0xa>
 80136d2:	6800      	ldr	r0, [r0, #0]
 80136d4:	b108      	cbz	r0, 80136da <rcl_client_get_rmw_handle+0xa>
 80136d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80136da:	4770      	bx	lr

080136dc <rcl_send_request>:
 80136dc:	b570      	push	{r4, r5, r6, lr}
 80136de:	b082      	sub	sp, #8
 80136e0:	b1e8      	cbz	r0, 801371e <rcl_send_request+0x42>
 80136e2:	4604      	mov	r4, r0
 80136e4:	6800      	ldr	r0, [r0, #0]
 80136e6:	b1d0      	cbz	r0, 801371e <rcl_send_request+0x42>
 80136e8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80136ec:	b1bb      	cbz	r3, 801371e <rcl_send_request+0x42>
 80136ee:	460e      	mov	r6, r1
 80136f0:	b1d1      	cbz	r1, 8013728 <rcl_send_request+0x4c>
 80136f2:	4615      	mov	r5, r2
 80136f4:	b1c2      	cbz	r2, 8013728 <rcl_send_request+0x4c>
 80136f6:	2105      	movs	r1, #5
 80136f8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80136fc:	f7f9 f9ca 	bl	800ca94 <__atomic_load_8>
 8013700:	6823      	ldr	r3, [r4, #0]
 8013702:	e9c5 0100 	strd	r0, r1, [r5]
 8013706:	462a      	mov	r2, r5
 8013708:	4631      	mov	r1, r6
 801370a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801370e:	f002 fcfd 	bl	801610c <rmw_send_request>
 8013712:	4606      	mov	r6, r0
 8013714:	b160      	cbz	r0, 8013730 <rcl_send_request+0x54>
 8013716:	2601      	movs	r6, #1
 8013718:	4630      	mov	r0, r6
 801371a:	b002      	add	sp, #8
 801371c:	bd70      	pop	{r4, r5, r6, pc}
 801371e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8013722:	4630      	mov	r0, r6
 8013724:	b002      	add	sp, #8
 8013726:	bd70      	pop	{r4, r5, r6, pc}
 8013728:	260b      	movs	r6, #11
 801372a:	4630      	mov	r0, r6
 801372c:	b002      	add	sp, #8
 801372e:	bd70      	pop	{r4, r5, r6, pc}
 8013730:	6820      	ldr	r0, [r4, #0]
 8013732:	2105      	movs	r1, #5
 8013734:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013738:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801373c:	9100      	str	r1, [sp, #0]
 801373e:	f7f9 fa15 	bl	800cb6c <__atomic_exchange_8>
 8013742:	4630      	mov	r0, r6
 8013744:	b002      	add	sp, #8
 8013746:	bd70      	pop	{r4, r5, r6, pc}

08013748 <rcl_take_response>:
 8013748:	b570      	push	{r4, r5, r6, lr}
 801374a:	468e      	mov	lr, r1
 801374c:	460c      	mov	r4, r1
 801374e:	4616      	mov	r6, r2
 8013750:	4605      	mov	r5, r0
 8013752:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013756:	b08c      	sub	sp, #48	@ 0x30
 8013758:	f10d 0c18 	add.w	ip, sp, #24
 801375c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013760:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013764:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013768:	b35d      	cbz	r5, 80137c2 <rcl_take_response+0x7a>
 801376a:	682b      	ldr	r3, [r5, #0]
 801376c:	b34b      	cbz	r3, 80137c2 <rcl_take_response+0x7a>
 801376e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013772:	b330      	cbz	r0, 80137c2 <rcl_take_response+0x7a>
 8013774:	b346      	cbz	r6, 80137c8 <rcl_take_response+0x80>
 8013776:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80137d0 <rcl_take_response+0x88>
 801377a:	2300      	movs	r3, #0
 801377c:	f88d 3007 	strb.w	r3, [sp, #7]
 8013780:	4632      	mov	r2, r6
 8013782:	f10d 0307 	add.w	r3, sp, #7
 8013786:	a902      	add	r1, sp, #8
 8013788:	ed8d 7b02 	vstr	d7, [sp, #8]
 801378c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013790:	f002 fdc4 	bl	801631c <rmw_take_response>
 8013794:	4605      	mov	r5, r0
 8013796:	b9c8      	cbnz	r0, 80137cc <rcl_take_response+0x84>
 8013798:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801379c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80137a0:	2a00      	cmp	r2, #0
 80137a2:	bf08      	it	eq
 80137a4:	461d      	moveq	r5, r3
 80137a6:	f10d 0e18 	add.w	lr, sp, #24
 80137aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80137ae:	46a4      	mov	ip, r4
 80137b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80137b4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80137b8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80137bc:	4628      	mov	r0, r5
 80137be:	b00c      	add	sp, #48	@ 0x30
 80137c0:	bd70      	pop	{r4, r5, r6, pc}
 80137c2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80137c6:	e7ee      	b.n	80137a6 <rcl_take_response+0x5e>
 80137c8:	250b      	movs	r5, #11
 80137ca:	e7ec      	b.n	80137a6 <rcl_take_response+0x5e>
 80137cc:	2501      	movs	r5, #1
 80137ce:	e7ea      	b.n	80137a6 <rcl_take_response+0x5e>
	...

080137d8 <rcl_client_is_valid>:
 80137d8:	b130      	cbz	r0, 80137e8 <rcl_client_is_valid+0x10>
 80137da:	6800      	ldr	r0, [r0, #0]
 80137dc:	b120      	cbz	r0, 80137e8 <rcl_client_is_valid+0x10>
 80137de:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80137e2:	3800      	subs	r0, #0
 80137e4:	bf18      	it	ne
 80137e6:	2001      	movne	r0, #1
 80137e8:	4770      	bx	lr
 80137ea:	bf00      	nop

080137ec <rcl_convert_rmw_ret_to_rcl_ret>:
 80137ec:	280b      	cmp	r0, #11
 80137ee:	dc0d      	bgt.n	801380c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80137f0:	2800      	cmp	r0, #0
 80137f2:	db09      	blt.n	8013808 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80137f4:	280b      	cmp	r0, #11
 80137f6:	d807      	bhi.n	8013808 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80137f8:	e8df f000 	tbb	[pc, r0]
 80137fc:	07060607 	.word	0x07060607
 8013800:	06060606 	.word	0x06060606
 8013804:	07070606 	.word	0x07070606
 8013808:	2001      	movs	r0, #1
 801380a:	4770      	bx	lr
 801380c:	28cb      	cmp	r0, #203	@ 0xcb
 801380e:	bf18      	it	ne
 8013810:	2001      	movne	r0, #1
 8013812:	4770      	bx	lr

08013814 <rcl_get_zero_initialized_guard_condition>:
 8013814:	4a03      	ldr	r2, [pc, #12]	@ (8013824 <rcl_get_zero_initialized_guard_condition+0x10>)
 8013816:	4603      	mov	r3, r0
 8013818:	e892 0003 	ldmia.w	r2, {r0, r1}
 801381c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013820:	4618      	mov	r0, r3
 8013822:	4770      	bx	lr
 8013824:	08019ccc 	.word	0x08019ccc

08013828 <rcl_guard_condition_init>:
 8013828:	b082      	sub	sp, #8
 801382a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801382c:	b087      	sub	sp, #28
 801382e:	ac0c      	add	r4, sp, #48	@ 0x30
 8013830:	e884 000c 	stmia.w	r4, {r2, r3}
 8013834:	46a6      	mov	lr, r4
 8013836:	460d      	mov	r5, r1
 8013838:	4604      	mov	r4, r0
 801383a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801383e:	f10d 0c04 	add.w	ip, sp, #4
 8013842:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013846:	f8de 3000 	ldr.w	r3, [lr]
 801384a:	f8cc 3000 	str.w	r3, [ip]
 801384e:	a801      	add	r0, sp, #4
 8013850:	f7f9 f912 	bl	800ca78 <rcutils_allocator_is_valid>
 8013854:	b338      	cbz	r0, 80138a6 <rcl_guard_condition_init+0x7e>
 8013856:	b334      	cbz	r4, 80138a6 <rcl_guard_condition_init+0x7e>
 8013858:	6866      	ldr	r6, [r4, #4]
 801385a:	b9ee      	cbnz	r6, 8013898 <rcl_guard_condition_init+0x70>
 801385c:	b31d      	cbz	r5, 80138a6 <rcl_guard_condition_init+0x7e>
 801385e:	4628      	mov	r0, r5
 8013860:	f7f7 f874 	bl	800a94c <rcl_context_is_valid>
 8013864:	b308      	cbz	r0, 80138aa <rcl_guard_condition_init+0x82>
 8013866:	9b01      	ldr	r3, [sp, #4]
 8013868:	9905      	ldr	r1, [sp, #20]
 801386a:	201c      	movs	r0, #28
 801386c:	4798      	blx	r3
 801386e:	4607      	mov	r7, r0
 8013870:	6060      	str	r0, [r4, #4]
 8013872:	b310      	cbz	r0, 80138ba <rcl_guard_condition_init+0x92>
 8013874:	6828      	ldr	r0, [r5, #0]
 8013876:	3028      	adds	r0, #40	@ 0x28
 8013878:	f002 fbae 	bl	8015fd8 <rmw_create_guard_condition>
 801387c:	6038      	str	r0, [r7, #0]
 801387e:	6860      	ldr	r0, [r4, #4]
 8013880:	6805      	ldr	r5, [r0, #0]
 8013882:	b1a5      	cbz	r5, 80138ae <rcl_guard_condition_init+0x86>
 8013884:	2301      	movs	r3, #1
 8013886:	ac01      	add	r4, sp, #4
 8013888:	7103      	strb	r3, [r0, #4]
 801388a:	f100 0708 	add.w	r7, r0, #8
 801388e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013890:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013892:	6823      	ldr	r3, [r4, #0]
 8013894:	603b      	str	r3, [r7, #0]
 8013896:	e000      	b.n	801389a <rcl_guard_condition_init+0x72>
 8013898:	2664      	movs	r6, #100	@ 0x64
 801389a:	4630      	mov	r0, r6
 801389c:	b007      	add	sp, #28
 801389e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80138a2:	b002      	add	sp, #8
 80138a4:	4770      	bx	lr
 80138a6:	260b      	movs	r6, #11
 80138a8:	e7f7      	b.n	801389a <rcl_guard_condition_init+0x72>
 80138aa:	2665      	movs	r6, #101	@ 0x65
 80138ac:	e7f5      	b.n	801389a <rcl_guard_condition_init+0x72>
 80138ae:	9b02      	ldr	r3, [sp, #8]
 80138b0:	9905      	ldr	r1, [sp, #20]
 80138b2:	4798      	blx	r3
 80138b4:	2601      	movs	r6, #1
 80138b6:	6065      	str	r5, [r4, #4]
 80138b8:	e7ef      	b.n	801389a <rcl_guard_condition_init+0x72>
 80138ba:	260a      	movs	r6, #10
 80138bc:	e7ed      	b.n	801389a <rcl_guard_condition_init+0x72>
 80138be:	bf00      	nop

080138c0 <rcl_guard_condition_init_from_rmw>:
 80138c0:	b082      	sub	sp, #8
 80138c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138c6:	b086      	sub	sp, #24
 80138c8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80138cc:	4604      	mov	r4, r0
 80138ce:	f84c 3f04 	str.w	r3, [ip, #4]!
 80138d2:	460e      	mov	r6, r1
 80138d4:	4617      	mov	r7, r2
 80138d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80138da:	f10d 0e04 	add.w	lr, sp, #4
 80138de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80138e2:	f8dc 3000 	ldr.w	r3, [ip]
 80138e6:	f8ce 3000 	str.w	r3, [lr]
 80138ea:	a801      	add	r0, sp, #4
 80138ec:	f7f9 f8c4 	bl	800ca78 <rcutils_allocator_is_valid>
 80138f0:	b350      	cbz	r0, 8013948 <rcl_guard_condition_init_from_rmw+0x88>
 80138f2:	b34c      	cbz	r4, 8013948 <rcl_guard_condition_init_from_rmw+0x88>
 80138f4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80138f8:	f1b8 0f00 	cmp.w	r8, #0
 80138fc:	d11e      	bne.n	801393c <rcl_guard_condition_init_from_rmw+0x7c>
 80138fe:	b31f      	cbz	r7, 8013948 <rcl_guard_condition_init_from_rmw+0x88>
 8013900:	4638      	mov	r0, r7
 8013902:	f7f7 f823 	bl	800a94c <rcl_context_is_valid>
 8013906:	b328      	cbz	r0, 8013954 <rcl_guard_condition_init_from_rmw+0x94>
 8013908:	9b01      	ldr	r3, [sp, #4]
 801390a:	9905      	ldr	r1, [sp, #20]
 801390c:	201c      	movs	r0, #28
 801390e:	4798      	blx	r3
 8013910:	4605      	mov	r5, r0
 8013912:	6060      	str	r0, [r4, #4]
 8013914:	b358      	cbz	r0, 801396e <rcl_guard_condition_init_from_rmw+0xae>
 8013916:	b1fe      	cbz	r6, 8013958 <rcl_guard_condition_init_from_rmw+0x98>
 8013918:	6006      	str	r6, [r0, #0]
 801391a:	f880 8004 	strb.w	r8, [r0, #4]
 801391e:	ac01      	add	r4, sp, #4
 8013920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013922:	f105 0c08 	add.w	ip, r5, #8
 8013926:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801392a:	6823      	ldr	r3, [r4, #0]
 801392c:	f8cc 3000 	str.w	r3, [ip]
 8013930:	2000      	movs	r0, #0
 8013932:	b006      	add	sp, #24
 8013934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013938:	b002      	add	sp, #8
 801393a:	4770      	bx	lr
 801393c:	2064      	movs	r0, #100	@ 0x64
 801393e:	b006      	add	sp, #24
 8013940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013944:	b002      	add	sp, #8
 8013946:	4770      	bx	lr
 8013948:	200b      	movs	r0, #11
 801394a:	b006      	add	sp, #24
 801394c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013950:	b002      	add	sp, #8
 8013952:	4770      	bx	lr
 8013954:	2065      	movs	r0, #101	@ 0x65
 8013956:	e7f2      	b.n	801393e <rcl_guard_condition_init_from_rmw+0x7e>
 8013958:	6838      	ldr	r0, [r7, #0]
 801395a:	3028      	adds	r0, #40	@ 0x28
 801395c:	f002 fb3c 	bl	8015fd8 <rmw_create_guard_condition>
 8013960:	6028      	str	r0, [r5, #0]
 8013962:	6865      	ldr	r5, [r4, #4]
 8013964:	682e      	ldr	r6, [r5, #0]
 8013966:	b126      	cbz	r6, 8013972 <rcl_guard_condition_init_from_rmw+0xb2>
 8013968:	2301      	movs	r3, #1
 801396a:	712b      	strb	r3, [r5, #4]
 801396c:	e7d7      	b.n	801391e <rcl_guard_condition_init_from_rmw+0x5e>
 801396e:	200a      	movs	r0, #10
 8013970:	e7e5      	b.n	801393e <rcl_guard_condition_init_from_rmw+0x7e>
 8013972:	4628      	mov	r0, r5
 8013974:	9b02      	ldr	r3, [sp, #8]
 8013976:	9905      	ldr	r1, [sp, #20]
 8013978:	4798      	blx	r3
 801397a:	6066      	str	r6, [r4, #4]
 801397c:	2001      	movs	r0, #1
 801397e:	e7de      	b.n	801393e <rcl_guard_condition_init_from_rmw+0x7e>

08013980 <rcl_guard_condition_fini>:
 8013980:	b570      	push	{r4, r5, r6, lr}
 8013982:	b082      	sub	sp, #8
 8013984:	b1f0      	cbz	r0, 80139c4 <rcl_guard_condition_fini+0x44>
 8013986:	6843      	ldr	r3, [r0, #4]
 8013988:	4604      	mov	r4, r0
 801398a:	b163      	cbz	r3, 80139a6 <rcl_guard_condition_fini+0x26>
 801398c:	6818      	ldr	r0, [r3, #0]
 801398e:	68de      	ldr	r6, [r3, #12]
 8013990:	6999      	ldr	r1, [r3, #24]
 8013992:	b160      	cbz	r0, 80139ae <rcl_guard_condition_fini+0x2e>
 8013994:	791d      	ldrb	r5, [r3, #4]
 8013996:	b965      	cbnz	r5, 80139b2 <rcl_guard_condition_fini+0x32>
 8013998:	4618      	mov	r0, r3
 801399a:	47b0      	blx	r6
 801399c:	2300      	movs	r3, #0
 801399e:	4628      	mov	r0, r5
 80139a0:	6063      	str	r3, [r4, #4]
 80139a2:	b002      	add	sp, #8
 80139a4:	bd70      	pop	{r4, r5, r6, pc}
 80139a6:	461d      	mov	r5, r3
 80139a8:	4628      	mov	r0, r5
 80139aa:	b002      	add	sp, #8
 80139ac:	bd70      	pop	{r4, r5, r6, pc}
 80139ae:	4605      	mov	r5, r0
 80139b0:	e7f2      	b.n	8013998 <rcl_guard_condition_fini+0x18>
 80139b2:	9101      	str	r1, [sp, #4]
 80139b4:	f002 fb24 	bl	8016000 <rmw_destroy_guard_condition>
 80139b8:	1e05      	subs	r5, r0, #0
 80139ba:	6863      	ldr	r3, [r4, #4]
 80139bc:	9901      	ldr	r1, [sp, #4]
 80139be:	bf18      	it	ne
 80139c0:	2501      	movne	r5, #1
 80139c2:	e7e9      	b.n	8013998 <rcl_guard_condition_fini+0x18>
 80139c4:	250b      	movs	r5, #11
 80139c6:	4628      	mov	r0, r5
 80139c8:	b002      	add	sp, #8
 80139ca:	bd70      	pop	{r4, r5, r6, pc}

080139cc <rcl_guard_condition_get_default_options>:
 80139cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139ce:	b087      	sub	sp, #28
 80139d0:	4606      	mov	r6, r0
 80139d2:	4668      	mov	r0, sp
 80139d4:	f7f9 f842 	bl	800ca5c <rcutils_get_default_allocator>
 80139d8:	4b09      	ldr	r3, [pc, #36]	@ (8013a00 <rcl_guard_condition_get_default_options+0x34>)
 80139da:	46ee      	mov	lr, sp
 80139dc:	469c      	mov	ip, r3
 80139de:	461d      	mov	r5, r3
 80139e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80139ea:	4634      	mov	r4, r6
 80139ec:	f8de 7000 	ldr.w	r7, [lr]
 80139f0:	f8cc 7000 	str.w	r7, [ip]
 80139f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139f6:	4630      	mov	r0, r6
 80139f8:	6027      	str	r7, [r4, #0]
 80139fa:	b007      	add	sp, #28
 80139fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139fe:	bf00      	nop
 8013a00:	20010e78 	.word	0x20010e78

08013a04 <rcl_trigger_guard_condition>:
 8013a04:	b148      	cbz	r0, 8013a1a <rcl_trigger_guard_condition+0x16>
 8013a06:	b508      	push	{r3, lr}
 8013a08:	6843      	ldr	r3, [r0, #4]
 8013a0a:	b143      	cbz	r3, 8013a1e <rcl_trigger_guard_condition+0x1a>
 8013a0c:	6818      	ldr	r0, [r3, #0]
 8013a0e:	f002 fccf 	bl	80163b0 <rmw_trigger_guard_condition>
 8013a12:	3800      	subs	r0, #0
 8013a14:	bf18      	it	ne
 8013a16:	2001      	movne	r0, #1
 8013a18:	bd08      	pop	{r3, pc}
 8013a1a:	200b      	movs	r0, #11
 8013a1c:	4770      	bx	lr
 8013a1e:	200b      	movs	r0, #11
 8013a20:	bd08      	pop	{r3, pc}
 8013a22:	bf00      	nop

08013a24 <rcl_guard_condition_get_rmw_handle>:
 8013a24:	b110      	cbz	r0, 8013a2c <rcl_guard_condition_get_rmw_handle+0x8>
 8013a26:	6840      	ldr	r0, [r0, #4]
 8013a28:	b100      	cbz	r0, 8013a2c <rcl_guard_condition_get_rmw_handle+0x8>
 8013a2a:	6800      	ldr	r0, [r0, #0]
 8013a2c:	4770      	bx	lr
 8013a2e:	bf00      	nop

08013a30 <rcl_init>:
 8013a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a34:	1e05      	subs	r5, r0, #0
 8013a36:	b09c      	sub	sp, #112	@ 0x70
 8013a38:	460e      	mov	r6, r1
 8013a3a:	4690      	mov	r8, r2
 8013a3c:	461f      	mov	r7, r3
 8013a3e:	f340 8099 	ble.w	8013b74 <rcl_init+0x144>
 8013a42:	2900      	cmp	r1, #0
 8013a44:	f000 8099 	beq.w	8013b7a <rcl_init+0x14a>
 8013a48:	f1a1 0e04 	sub.w	lr, r1, #4
 8013a4c:	f04f 0c00 	mov.w	ip, #0
 8013a50:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8013a54:	f10c 0c01 	add.w	ip, ip, #1
 8013a58:	2c00      	cmp	r4, #0
 8013a5a:	f000 808e 	beq.w	8013b7a <rcl_init+0x14a>
 8013a5e:	4565      	cmp	r5, ip
 8013a60:	d1f6      	bne.n	8013a50 <rcl_init+0x20>
 8013a62:	f1b8 0f00 	cmp.w	r8, #0
 8013a66:	f000 8088 	beq.w	8013b7a <rcl_init+0x14a>
 8013a6a:	f8d8 4000 	ldr.w	r4, [r8]
 8013a6e:	2c00      	cmp	r4, #0
 8013a70:	f000 8083 	beq.w	8013b7a <rcl_init+0x14a>
 8013a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a76:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8013a7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a7e:	6823      	ldr	r3, [r4, #0]
 8013a80:	f8cc 3000 	str.w	r3, [ip]
 8013a84:	a817      	add	r0, sp, #92	@ 0x5c
 8013a86:	f7f8 fff7 	bl	800ca78 <rcutils_allocator_is_valid>
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	d075      	beq.n	8013b7a <rcl_init+0x14a>
 8013a8e:	2f00      	cmp	r7, #0
 8013a90:	d073      	beq.n	8013b7a <rcl_init+0x14a>
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d175      	bne.n	8013b84 <rcl_init+0x154>
 8013a98:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8013a9c:	2178      	movs	r1, #120	@ 0x78
 8013a9e:	2001      	movs	r0, #1
 8013aa0:	4798      	blx	r3
 8013aa2:	4604      	mov	r4, r0
 8013aa4:	6038      	str	r0, [r7, #0]
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	f000 80a0 	beq.w	8013bec <rcl_init+0x1bc>
 8013aac:	a802      	add	r0, sp, #8
 8013aae:	f002 f833 	bl	8015b18 <rmw_get_zero_initialized_context>
 8013ab2:	a902      	add	r1, sp, #8
 8013ab4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013ab8:	2250      	movs	r2, #80	@ 0x50
 8013aba:	ac17      	add	r4, sp, #92	@ 0x5c
 8013abc:	f004 fce5 	bl	801848a <memcpy>
 8013ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ac2:	f8d7 e000 	ldr.w	lr, [r7]
 8013ac6:	46f4      	mov	ip, lr
 8013ac8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013acc:	6823      	ldr	r3, [r4, #0]
 8013ace:	f8cc 3000 	str.w	r3, [ip]
 8013ad2:	f10e 0114 	add.w	r1, lr, #20
 8013ad6:	4640      	mov	r0, r8
 8013ad8:	f7f7 f84a 	bl	800ab70 <rcl_init_options_copy>
 8013adc:	4604      	mov	r4, r0
 8013ade:	2800      	cmp	r0, #0
 8013ae0:	d144      	bne.n	8013b6c <rcl_init+0x13c>
 8013ae2:	f8d7 9000 	ldr.w	r9, [r7]
 8013ae6:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8013aea:	f8c9 0020 	str.w	r0, [r9, #32]
 8013aee:	f8c9 5018 	str.w	r5, [r9, #24]
 8013af2:	f8c9 801c 	str.w	r8, [r9, #28]
 8013af6:	2d00      	cmp	r5, #0
 8013af8:	d04b      	beq.n	8013b92 <rcl_init+0x162>
 8013afa:	2e00      	cmp	r6, #0
 8013afc:	d049      	beq.n	8013b92 <rcl_init+0x162>
 8013afe:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8013b02:	2104      	movs	r1, #4
 8013b04:	4628      	mov	r0, r5
 8013b06:	4798      	blx	r3
 8013b08:	f8c9 0020 	str.w	r0, [r9, #32]
 8013b0c:	f8d7 9000 	ldr.w	r9, [r7]
 8013b10:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013b14:	46ca      	mov	sl, r9
 8013b16:	b343      	cbz	r3, 8013b6a <rcl_init+0x13a>
 8013b18:	2d01      	cmp	r5, #1
 8013b1a:	f178 0300 	sbcs.w	r3, r8, #0
 8013b1e:	db38      	blt.n	8013b92 <rcl_init+0x162>
 8013b20:	2400      	movs	r4, #0
 8013b22:	3e04      	subs	r6, #4
 8013b24:	46a1      	mov	r9, r4
 8013b26:	e00b      	b.n	8013b40 <rcl_init+0x110>
 8013b28:	6831      	ldr	r1, [r6, #0]
 8013b2a:	f004 fcae 	bl	801848a <memcpy>
 8013b2e:	3401      	adds	r4, #1
 8013b30:	f149 0900 	adc.w	r9, r9, #0
 8013b34:	45c8      	cmp	r8, r9
 8013b36:	bf08      	it	eq
 8013b38:	42a5      	cmpeq	r5, r4
 8013b3a:	d028      	beq.n	8013b8e <rcl_init+0x15e>
 8013b3c:	f8d7 a000 	ldr.w	sl, [r7]
 8013b40:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013b44:	f7ec fb6e 	bl	8000224 <strlen>
 8013b48:	1c42      	adds	r2, r0, #1
 8013b4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013b4c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013b4e:	f8da a020 	ldr.w	sl, [sl, #32]
 8013b52:	9201      	str	r2, [sp, #4]
 8013b54:	4610      	mov	r0, r2
 8013b56:	4798      	blx	r3
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8013b5e:	6a1b      	ldr	r3, [r3, #32]
 8013b60:	9a01      	ldr	r2, [sp, #4]
 8013b62:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013b66:	2800      	cmp	r0, #0
 8013b68:	d1de      	bne.n	8013b28 <rcl_init+0xf8>
 8013b6a:	240a      	movs	r4, #10
 8013b6c:	4638      	mov	r0, r7
 8013b6e:	f7f6 fef9 	bl	800a964 <__cleanup_context>
 8013b72:	e003      	b.n	8013b7c <rcl_init+0x14c>
 8013b74:	2900      	cmp	r1, #0
 8013b76:	f43f af74 	beq.w	8013a62 <rcl_init+0x32>
 8013b7a:	240b      	movs	r4, #11
 8013b7c:	4620      	mov	r0, r4
 8013b7e:	b01c      	add	sp, #112	@ 0x70
 8013b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b84:	2464      	movs	r4, #100	@ 0x64
 8013b86:	4620      	mov	r0, r4
 8013b88:	b01c      	add	sp, #112	@ 0x70
 8013b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b8e:	f8d7 9000 	ldr.w	r9, [r7]
 8013b92:	491d      	ldr	r1, [pc, #116]	@ (8013c08 <rcl_init+0x1d8>)
 8013b94:	680b      	ldr	r3, [r1, #0]
 8013b96:	3301      	adds	r3, #1
 8013b98:	d023      	beq.n	8013be2 <rcl_init+0x1b2>
 8013b9a:	600b      	str	r3, [r1, #0]
 8013b9c:	461a      	mov	r2, r3
 8013b9e:	2400      	movs	r4, #0
 8013ba0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013ba4:	607b      	str	r3, [r7, #4]
 8013ba6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013ba8:	6182      	str	r2, [r0, #24]
 8013baa:	3301      	adds	r3, #1
 8013bac:	61c4      	str	r4, [r0, #28]
 8013bae:	d01f      	beq.n	8013bf0 <rcl_init+0x1c0>
 8013bb0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8013bb4:	b94b      	cbnz	r3, 8013bca <rcl_init+0x19a>
 8013bb6:	3030      	adds	r0, #48	@ 0x30
 8013bb8:	f000 f846 	bl	8013c48 <rcl_get_localhost_only>
 8013bbc:	4604      	mov	r4, r0
 8013bbe:	2800      	cmp	r0, #0
 8013bc0:	d1d4      	bne.n	8013b6c <rcl_init+0x13c>
 8013bc2:	f8d7 9000 	ldr.w	r9, [r7]
 8013bc6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013bca:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8013bce:	3018      	adds	r0, #24
 8013bd0:	f7f9 fc82 	bl	800d4d8 <rmw_init>
 8013bd4:	4604      	mov	r4, r0
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	d0d0      	beq.n	8013b7c <rcl_init+0x14c>
 8013bda:	f7ff fe07 	bl	80137ec <rcl_convert_rmw_ret_to_rcl_ret>
 8013bde:	4604      	mov	r4, r0
 8013be0:	e7c4      	b.n	8013b6c <rcl_init+0x13c>
 8013be2:	2201      	movs	r2, #1
 8013be4:	461c      	mov	r4, r3
 8013be6:	600a      	str	r2, [r1, #0]
 8013be8:	4613      	mov	r3, r2
 8013bea:	e7d9      	b.n	8013ba0 <rcl_init+0x170>
 8013bec:	240a      	movs	r4, #10
 8013bee:	e7c5      	b.n	8013b7c <rcl_init+0x14c>
 8013bf0:	3024      	adds	r0, #36	@ 0x24
 8013bf2:	f003 fcc9 	bl	8017588 <rcl_get_default_domain_id>
 8013bf6:	4604      	mov	r4, r0
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	d1b7      	bne.n	8013b6c <rcl_init+0x13c>
 8013bfc:	f8d7 9000 	ldr.w	r9, [r7]
 8013c00:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013c04:	e7d4      	b.n	8013bb0 <rcl_init+0x180>
 8013c06:	bf00      	nop
 8013c08:	20010e8c 	.word	0x20010e8c

08013c0c <rcl_shutdown>:
 8013c0c:	b1a8      	cbz	r0, 8013c3a <rcl_shutdown+0x2e>
 8013c0e:	6803      	ldr	r3, [r0, #0]
 8013c10:	b510      	push	{r4, lr}
 8013c12:	4604      	mov	r4, r0
 8013c14:	b173      	cbz	r3, 8013c34 <rcl_shutdown+0x28>
 8013c16:	f7f6 fe99 	bl	800a94c <rcl_context_is_valid>
 8013c1a:	b140      	cbz	r0, 8013c2e <rcl_shutdown+0x22>
 8013c1c:	6820      	ldr	r0, [r4, #0]
 8013c1e:	3028      	adds	r0, #40	@ 0x28
 8013c20:	f7f9 fd90 	bl	800d744 <rmw_shutdown>
 8013c24:	4603      	mov	r3, r0
 8013c26:	b958      	cbnz	r0, 8013c40 <rcl_shutdown+0x34>
 8013c28:	6060      	str	r0, [r4, #4]
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	bd10      	pop	{r4, pc}
 8013c2e:	236a      	movs	r3, #106	@ 0x6a
 8013c30:	4618      	mov	r0, r3
 8013c32:	bd10      	pop	{r4, pc}
 8013c34:	230b      	movs	r3, #11
 8013c36:	4618      	mov	r0, r3
 8013c38:	bd10      	pop	{r4, pc}
 8013c3a:	230b      	movs	r3, #11
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	4770      	bx	lr
 8013c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c44:	f7ff bdd2 	b.w	80137ec <rcl_convert_rmw_ret_to_rcl_ret>

08013c48 <rcl_get_localhost_only>:
 8013c48:	b510      	push	{r4, lr}
 8013c4a:	b082      	sub	sp, #8
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	9301      	str	r3, [sp, #4]
 8013c50:	b1b8      	cbz	r0, 8013c82 <rcl_get_localhost_only+0x3a>
 8013c52:	4604      	mov	r4, r0
 8013c54:	a901      	add	r1, sp, #4
 8013c56:	480c      	ldr	r0, [pc, #48]	@ (8013c88 <rcl_get_localhost_only+0x40>)
 8013c58:	f7f8 ffc0 	bl	800cbdc <rcutils_get_env>
 8013c5c:	b110      	cbz	r0, 8013c64 <rcl_get_localhost_only+0x1c>
 8013c5e:	2001      	movs	r0, #1
 8013c60:	b002      	add	sp, #8
 8013c62:	bd10      	pop	{r4, pc}
 8013c64:	9b01      	ldr	r3, [sp, #4]
 8013c66:	b113      	cbz	r3, 8013c6e <rcl_get_localhost_only+0x26>
 8013c68:	781a      	ldrb	r2, [r3, #0]
 8013c6a:	2a31      	cmp	r2, #49	@ 0x31
 8013c6c:	d004      	beq.n	8013c78 <rcl_get_localhost_only+0x30>
 8013c6e:	2302      	movs	r3, #2
 8013c70:	2000      	movs	r0, #0
 8013c72:	7023      	strb	r3, [r4, #0]
 8013c74:	b002      	add	sp, #8
 8013c76:	bd10      	pop	{r4, pc}
 8013c78:	785b      	ldrb	r3, [r3, #1]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d1f7      	bne.n	8013c6e <rcl_get_localhost_only+0x26>
 8013c7e:	2301      	movs	r3, #1
 8013c80:	e7f6      	b.n	8013c70 <rcl_get_localhost_only+0x28>
 8013c82:	200b      	movs	r0, #11
 8013c84:	b002      	add	sp, #8
 8013c86:	bd10      	pop	{r4, pc}
 8013c88:	080197e0 	.word	0x080197e0

08013c8c <rcl_node_resolve_name>:
 8013c8c:	b082      	sub	sp, #8
 8013c8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c92:	b091      	sub	sp, #68	@ 0x44
 8013c94:	ac1a      	add	r4, sp, #104	@ 0x68
 8013c96:	e884 000c 	stmia.w	r4, {r2, r3}
 8013c9a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	d03b      	beq.n	8013d1a <rcl_node_resolve_name+0x8e>
 8013ca2:	460c      	mov	r4, r1
 8013ca4:	4605      	mov	r5, r0
 8013ca6:	f7f7 f973 	bl	800af90 <rcl_node_get_options>
 8013caa:	2800      	cmp	r0, #0
 8013cac:	d037      	beq.n	8013d1e <rcl_node_resolve_name+0x92>
 8013cae:	4628      	mov	r0, r5
 8013cb0:	f7f7 f95e 	bl	800af70 <rcl_node_get_name>
 8013cb4:	4606      	mov	r6, r0
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	f7f7 f962 	bl	800af80 <rcl_node_get_namespace>
 8013cbc:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013cc0:	4681      	mov	r9, r0
 8013cc2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013cc6:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013cc8:	46ac      	mov	ip, r5
 8013cca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013cce:	f8de 3000 	ldr.w	r3, [lr]
 8013cd2:	f8cc 3000 	str.w	r3, [ip]
 8013cd6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013cd8:	b1fb      	cbz	r3, 8013d1a <rcl_node_resolve_name+0x8e>
 8013cda:	468a      	mov	sl, r1
 8013cdc:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8013ce0:	f001 fdee 	bl	80158c0 <rcutils_get_zero_initialized_string_map>
 8013ce4:	ab10      	add	r3, sp, #64	@ 0x40
 8013ce6:	9008      	str	r0, [sp, #32]
 8013ce8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013cec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013cf0:	2100      	movs	r1, #0
 8013cf2:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013cf6:	a808      	add	r0, sp, #32
 8013cf8:	f001 fe5a 	bl	80159b0 <rcutils_string_map_init>
 8013cfc:	4607      	mov	r7, r0
 8013cfe:	b180      	cbz	r0, 8013d22 <rcl_node_resolve_name+0x96>
 8013d00:	f7f8 ff84 	bl	800cc0c <rcutils_get_error_string>
 8013d04:	f7f8 ff98 	bl	800cc38 <rcutils_reset_error>
 8013d08:	2f0a      	cmp	r7, #10
 8013d0a:	bf18      	it	ne
 8013d0c:	2701      	movne	r7, #1
 8013d0e:	4638      	mov	r0, r7
 8013d10:	b011      	add	sp, #68	@ 0x44
 8013d12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d16:	b002      	add	sp, #8
 8013d18:	4770      	bx	lr
 8013d1a:	270b      	movs	r7, #11
 8013d1c:	e7f7      	b.n	8013d0e <rcl_node_resolve_name+0x82>
 8013d1e:	2701      	movs	r7, #1
 8013d20:	e7f5      	b.n	8013d0e <rcl_node_resolve_name+0x82>
 8013d22:	9009      	str	r0, [sp, #36]	@ 0x24
 8013d24:	9007      	str	r0, [sp, #28]
 8013d26:	a808      	add	r0, sp, #32
 8013d28:	f003 fdc0 	bl	80178ac <rcl_get_default_topic_name_substitutions>
 8013d2c:	4607      	mov	r7, r0
 8013d2e:	b1a8      	cbz	r0, 8013d5c <rcl_node_resolve_name+0xd0>
 8013d30:	280a      	cmp	r0, #10
 8013d32:	9c07      	ldr	r4, [sp, #28]
 8013d34:	d000      	beq.n	8013d38 <rcl_node_resolve_name+0xac>
 8013d36:	2701      	movs	r7, #1
 8013d38:	a808      	add	r0, sp, #32
 8013d3a:	f001 fe79 	bl	8015a30 <rcutils_string_map_fini>
 8013d3e:	2800      	cmp	r0, #0
 8013d40:	d13d      	bne.n	8013dbe <rcl_node_resolve_name+0x132>
 8013d42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d44:	4659      	mov	r1, fp
 8013d46:	47d0      	blx	sl
 8013d48:	4659      	mov	r1, fp
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	47d0      	blx	sl
 8013d4e:	f1b8 0f00 	cmp.w	r8, #0
 8013d52:	d0dc      	beq.n	8013d0e <rcl_node_resolve_name+0x82>
 8013d54:	2f67      	cmp	r7, #103	@ 0x67
 8013d56:	bf08      	it	eq
 8013d58:	2768      	moveq	r7, #104	@ 0x68
 8013d5a:	e7d8      	b.n	8013d0e <rcl_node_resolve_name+0x82>
 8013d5c:	ab09      	add	r3, sp, #36	@ 0x24
 8013d5e:	9305      	str	r3, [sp, #20]
 8013d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d62:	46ec      	mov	ip, sp
 8013d64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d68:	682b      	ldr	r3, [r5, #0]
 8013d6a:	f8cc 3000 	str.w	r3, [ip]
 8013d6e:	464a      	mov	r2, r9
 8013d70:	4631      	mov	r1, r6
 8013d72:	4620      	mov	r0, r4
 8013d74:	ab08      	add	r3, sp, #32
 8013d76:	f003 fc3b 	bl	80175f0 <rcl_expand_topic_name>
 8013d7a:	4607      	mov	r7, r0
 8013d7c:	b9b8      	cbnz	r0, 8013dae <rcl_node_resolve_name+0x122>
 8013d7e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013d80:	9009      	str	r0, [sp, #36]	@ 0x24
 8013d82:	4602      	mov	r2, r0
 8013d84:	a90a      	add	r1, sp, #40	@ 0x28
 8013d86:	4620      	mov	r0, r4
 8013d88:	f001 ff5a 	bl	8015c40 <rmw_validate_full_topic_name>
 8013d8c:	b988      	cbnz	r0, 8013db2 <rcl_node_resolve_name+0x126>
 8013d8e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013d90:	b9d5      	cbnz	r5, 8013dc8 <rcl_node_resolve_name+0x13c>
 8013d92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013d94:	a808      	add	r0, sp, #32
 8013d96:	601c      	str	r4, [r3, #0]
 8013d98:	f001 fe4a 	bl	8015a30 <rcutils_string_map_fini>
 8013d9c:	4607      	mov	r7, r0
 8013d9e:	b1a8      	cbz	r0, 8013dcc <rcl_node_resolve_name+0x140>
 8013da0:	f7f8 ff34 	bl	800cc0c <rcutils_get_error_string>
 8013da4:	462c      	mov	r4, r5
 8013da6:	f7f8 ff47 	bl	800cc38 <rcutils_reset_error>
 8013daa:	2701      	movs	r7, #1
 8013dac:	e7c9      	b.n	8013d42 <rcl_node_resolve_name+0xb6>
 8013dae:	9c07      	ldr	r4, [sp, #28]
 8013db0:	e7c2      	b.n	8013d38 <rcl_node_resolve_name+0xac>
 8013db2:	f7f8 ff2b 	bl	800cc0c <rcutils_get_error_string>
 8013db6:	2701      	movs	r7, #1
 8013db8:	f7f8 ff3e 	bl	800cc38 <rcutils_reset_error>
 8013dbc:	e7bc      	b.n	8013d38 <rcl_node_resolve_name+0xac>
 8013dbe:	f7f8 ff25 	bl	800cc0c <rcutils_get_error_string>
 8013dc2:	f7f8 ff39 	bl	800cc38 <rcutils_reset_error>
 8013dc6:	e7bc      	b.n	8013d42 <rcl_node_resolve_name+0xb6>
 8013dc8:	2767      	movs	r7, #103	@ 0x67
 8013dca:	e7b5      	b.n	8013d38 <rcl_node_resolve_name+0xac>
 8013dcc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013dce:	4659      	mov	r1, fp
 8013dd0:	47d0      	blx	sl
 8013dd2:	4659      	mov	r1, fp
 8013dd4:	4638      	mov	r0, r7
 8013dd6:	47d0      	blx	sl
 8013dd8:	e799      	b.n	8013d0e <rcl_node_resolve_name+0x82>
 8013dda:	bf00      	nop

08013ddc <rcl_service_get_rmw_handle>:
 8013ddc:	b118      	cbz	r0, 8013de6 <rcl_service_get_rmw_handle+0xa>
 8013dde:	6800      	ldr	r0, [r0, #0]
 8013de0:	b108      	cbz	r0, 8013de6 <rcl_service_get_rmw_handle+0xa>
 8013de2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013de6:	4770      	bx	lr

08013de8 <rcl_take_request>:
 8013de8:	b570      	push	{r4, r5, r6, lr}
 8013dea:	468e      	mov	lr, r1
 8013dec:	460c      	mov	r4, r1
 8013dee:	4616      	mov	r6, r2
 8013df0:	4605      	mov	r5, r0
 8013df2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013df6:	b08c      	sub	sp, #48	@ 0x30
 8013df8:	f10d 0c18 	add.w	ip, sp, #24
 8013dfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e00:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013e04:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013e08:	b30d      	cbz	r5, 8013e4e <rcl_take_request+0x66>
 8013e0a:	682b      	ldr	r3, [r5, #0]
 8013e0c:	b1fb      	cbz	r3, 8013e4e <rcl_take_request+0x66>
 8013e0e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013e12:	b1e0      	cbz	r0, 8013e4e <rcl_take_request+0x66>
 8013e14:	b336      	cbz	r6, 8013e64 <rcl_take_request+0x7c>
 8013e16:	2300      	movs	r3, #0
 8013e18:	f88d 3007 	strb.w	r3, [sp, #7]
 8013e1c:	4632      	mov	r2, r6
 8013e1e:	f10d 0307 	add.w	r3, sp, #7
 8013e22:	a902      	add	r1, sp, #8
 8013e24:	f002 f9c0 	bl	80161a8 <rmw_take_request>
 8013e28:	4605      	mov	r5, r0
 8013e2a:	b198      	cbz	r0, 8013e54 <rcl_take_request+0x6c>
 8013e2c:	280a      	cmp	r0, #10
 8013e2e:	bf18      	it	ne
 8013e30:	2501      	movne	r5, #1
 8013e32:	f10d 0e18 	add.w	lr, sp, #24
 8013e36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e3a:	46a4      	mov	ip, r4
 8013e3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e40:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013e44:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013e48:	4628      	mov	r0, r5
 8013e4a:	b00c      	add	sp, #48	@ 0x30
 8013e4c:	bd70      	pop	{r4, r5, r6, pc}
 8013e4e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8013e52:	e7ee      	b.n	8013e32 <rcl_take_request+0x4a>
 8013e54:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013e58:	f240 2359 	movw	r3, #601	@ 0x259
 8013e5c:	2a00      	cmp	r2, #0
 8013e5e:	bf08      	it	eq
 8013e60:	461d      	moveq	r5, r3
 8013e62:	e7e6      	b.n	8013e32 <rcl_take_request+0x4a>
 8013e64:	250b      	movs	r5, #11
 8013e66:	e7e4      	b.n	8013e32 <rcl_take_request+0x4a>

08013e68 <rcl_send_response>:
 8013e68:	b170      	cbz	r0, 8013e88 <rcl_send_response+0x20>
 8013e6a:	6800      	ldr	r0, [r0, #0]
 8013e6c:	b160      	cbz	r0, 8013e88 <rcl_send_response+0x20>
 8013e6e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013e72:	b148      	cbz	r0, 8013e88 <rcl_send_response+0x20>
 8013e74:	b159      	cbz	r1, 8013e8e <rcl_send_response+0x26>
 8013e76:	b510      	push	{r4, lr}
 8013e78:	b15a      	cbz	r2, 8013e92 <rcl_send_response+0x2a>
 8013e7a:	f002 f9f3 	bl	8016264 <rmw_send_response>
 8013e7e:	b110      	cbz	r0, 8013e86 <rcl_send_response+0x1e>
 8013e80:	2802      	cmp	r0, #2
 8013e82:	bf18      	it	ne
 8013e84:	2001      	movne	r0, #1
 8013e86:	bd10      	pop	{r4, pc}
 8013e88:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013e8c:	4770      	bx	lr
 8013e8e:	200b      	movs	r0, #11
 8013e90:	4770      	bx	lr
 8013e92:	200b      	movs	r0, #11
 8013e94:	bd10      	pop	{r4, pc}
 8013e96:	bf00      	nop

08013e98 <rcl_service_is_valid>:
 8013e98:	b130      	cbz	r0, 8013ea8 <rcl_service_is_valid+0x10>
 8013e9a:	6800      	ldr	r0, [r0, #0]
 8013e9c:	b120      	cbz	r0, 8013ea8 <rcl_service_is_valid+0x10>
 8013e9e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013ea2:	3800      	subs	r0, #0
 8013ea4:	bf18      	it	ne
 8013ea6:	2001      	movne	r0, #1
 8013ea8:	4770      	bx	lr
 8013eaa:	bf00      	nop

08013eac <rcl_get_system_time>:
 8013eac:	4608      	mov	r0, r1
 8013eae:	f7f9 b837 	b.w	800cf20 <rcutils_system_time_now>
 8013eb2:	bf00      	nop

08013eb4 <rcl_get_steady_time>:
 8013eb4:	4608      	mov	r0, r1
 8013eb6:	f7f9 b85b 	b.w	800cf70 <rcutils_steady_time_now>
 8013eba:	bf00      	nop

08013ebc <rcl_get_ros_time>:
 8013ebc:	7a03      	ldrb	r3, [r0, #8]
 8013ebe:	b510      	push	{r4, lr}
 8013ec0:	460c      	mov	r4, r1
 8013ec2:	b133      	cbz	r3, 8013ed2 <rcl_get_ros_time+0x16>
 8013ec4:	2105      	movs	r1, #5
 8013ec6:	f7f8 fde5 	bl	800ca94 <__atomic_load_8>
 8013eca:	e9c4 0100 	strd	r0, r1, [r4]
 8013ece:	2000      	movs	r0, #0
 8013ed0:	bd10      	pop	{r4, pc}
 8013ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ed6:	4608      	mov	r0, r1
 8013ed8:	f7f9 b822 	b.w	800cf20 <rcutils_system_time_now>

08013edc <rcl_clock_init>:
 8013edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ede:	4605      	mov	r5, r0
 8013ee0:	4610      	mov	r0, r2
 8013ee2:	4614      	mov	r4, r2
 8013ee4:	460e      	mov	r6, r1
 8013ee6:	f7f8 fdc7 	bl	800ca78 <rcutils_allocator_is_valid>
 8013eea:	b128      	cbz	r0, 8013ef8 <rcl_clock_init+0x1c>
 8013eec:	2d03      	cmp	r5, #3
 8013eee:	d803      	bhi.n	8013ef8 <rcl_clock_init+0x1c>
 8013ef0:	e8df f005 	tbb	[pc, r5]
 8013ef4:	06532e1d 	.word	0x06532e1d
 8013ef8:	f04f 0c0b 	mov.w	ip, #11
 8013efc:	4660      	mov	r0, ip
 8013efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f00:	2e00      	cmp	r6, #0
 8013f02:	d0f9      	beq.n	8013ef8 <rcl_clock_init+0x1c>
 8013f04:	2c00      	cmp	r4, #0
 8013f06:	d0f7      	beq.n	8013ef8 <rcl_clock_init+0x1c>
 8013f08:	2300      	movs	r3, #0
 8013f0a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013f0e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8013fc4 <rcl_clock_init+0xe8>
 8013f12:	6133      	str	r3, [r6, #16]
 8013f14:	f106 0514 	add.w	r5, r6, #20
 8013f18:	469c      	mov	ip, r3
 8013f1a:	2703      	movs	r7, #3
 8013f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f20:	6823      	ldr	r3, [r4, #0]
 8013f22:	602b      	str	r3, [r5, #0]
 8013f24:	7037      	strb	r7, [r6, #0]
 8013f26:	f8c6 e00c 	str.w	lr, [r6, #12]
 8013f2a:	4660      	mov	r0, ip
 8013f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f2e:	2e00      	cmp	r6, #0
 8013f30:	d0e2      	beq.n	8013ef8 <rcl_clock_init+0x1c>
 8013f32:	2300      	movs	r3, #0
 8013f34:	7033      	strb	r3, [r6, #0]
 8013f36:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013f3a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8013f3e:	469c      	mov	ip, r3
 8013f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f42:	f106 0514 	add.w	r5, r6, #20
 8013f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f48:	6823      	ldr	r3, [r4, #0]
 8013f4a:	602b      	str	r3, [r5, #0]
 8013f4c:	4660      	mov	r0, ip
 8013f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f50:	2e00      	cmp	r6, #0
 8013f52:	d0d1      	beq.n	8013ef8 <rcl_clock_init+0x1c>
 8013f54:	2c00      	cmp	r4, #0
 8013f56:	d0cf      	beq.n	8013ef8 <rcl_clock_init+0x1c>
 8013f58:	2700      	movs	r7, #0
 8013f5a:	7037      	strb	r7, [r6, #0]
 8013f5c:	46a4      	mov	ip, r4
 8013f5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f62:	f106 0514 	add.w	r5, r6, #20
 8013f66:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8013f6a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8013f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f70:	f8dc 3000 	ldr.w	r3, [ip]
 8013f74:	602b      	str	r3, [r5, #0]
 8013f76:	6921      	ldr	r1, [r4, #16]
 8013f78:	6823      	ldr	r3, [r4, #0]
 8013f7a:	2010      	movs	r0, #16
 8013f7c:	4798      	blx	r3
 8013f7e:	6130      	str	r0, [r6, #16]
 8013f80:	b1d0      	cbz	r0, 8013fb8 <rcl_clock_init+0xdc>
 8013f82:	2200      	movs	r2, #0
 8013f84:	2300      	movs	r3, #0
 8013f86:	e9c0 2300 	strd	r2, r3, [r0]
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	7207      	strb	r7, [r0, #8]
 8013f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8013fc0 <rcl_clock_init+0xe4>)
 8013f90:	7033      	strb	r3, [r6, #0]
 8013f92:	46bc      	mov	ip, r7
 8013f94:	60f2      	str	r2, [r6, #12]
 8013f96:	4660      	mov	r0, ip
 8013f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f9a:	2e00      	cmp	r6, #0
 8013f9c:	d0ac      	beq.n	8013ef8 <rcl_clock_init+0x1c>
 8013f9e:	2c00      	cmp	r4, #0
 8013fa0:	d0aa      	beq.n	8013ef8 <rcl_clock_init+0x1c>
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013fa8:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8013fc8 <rcl_clock_init+0xec>
 8013fac:	6133      	str	r3, [r6, #16]
 8013fae:	f106 0514 	add.w	r5, r6, #20
 8013fb2:	469c      	mov	ip, r3
 8013fb4:	2702      	movs	r7, #2
 8013fb6:	e7b1      	b.n	8013f1c <rcl_clock_init+0x40>
 8013fb8:	f04f 0c0a 	mov.w	ip, #10
 8013fbc:	e79e      	b.n	8013efc <rcl_clock_init+0x20>
 8013fbe:	bf00      	nop
 8013fc0:	08013ebd 	.word	0x08013ebd
 8013fc4:	08013eb5 	.word	0x08013eb5
 8013fc8:	08013ead 	.word	0x08013ead

08013fcc <rcl_clock_fini>:
 8013fcc:	2800      	cmp	r0, #0
 8013fce:	d02c      	beq.n	801402a <rcl_clock_fini+0x5e>
 8013fd0:	b538      	push	{r3, r4, r5, lr}
 8013fd2:	4604      	mov	r4, r0
 8013fd4:	3014      	adds	r0, #20
 8013fd6:	f7f8 fd4f 	bl	800ca78 <rcutils_allocator_is_valid>
 8013fda:	b140      	cbz	r0, 8013fee <rcl_clock_fini+0x22>
 8013fdc:	7823      	ldrb	r3, [r4, #0]
 8013fde:	2b02      	cmp	r3, #2
 8013fe0:	d007      	beq.n	8013ff2 <rcl_clock_fini+0x26>
 8013fe2:	2b03      	cmp	r3, #3
 8013fe4:	d005      	beq.n	8013ff2 <rcl_clock_fini+0x26>
 8013fe6:	2b01      	cmp	r3, #1
 8013fe8:	d00f      	beq.n	801400a <rcl_clock_fini+0x3e>
 8013fea:	200b      	movs	r0, #11
 8013fec:	bd38      	pop	{r3, r4, r5, pc}
 8013fee:	2001      	movs	r0, #1
 8013ff0:	bd38      	pop	{r3, r4, r5, pc}
 8013ff2:	68a0      	ldr	r0, [r4, #8]
 8013ff4:	2800      	cmp	r0, #0
 8013ff6:	d0f9      	beq.n	8013fec <rcl_clock_fini+0x20>
 8013ff8:	2500      	movs	r5, #0
 8013ffa:	6860      	ldr	r0, [r4, #4]
 8013ffc:	69a3      	ldr	r3, [r4, #24]
 8013ffe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014000:	60a5      	str	r5, [r4, #8]
 8014002:	4798      	blx	r3
 8014004:	6065      	str	r5, [r4, #4]
 8014006:	4628      	mov	r0, r5
 8014008:	bd38      	pop	{r3, r4, r5, pc}
 801400a:	68a3      	ldr	r3, [r4, #8]
 801400c:	b133      	cbz	r3, 801401c <rcl_clock_fini+0x50>
 801400e:	2500      	movs	r5, #0
 8014010:	69a3      	ldr	r3, [r4, #24]
 8014012:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014014:	6860      	ldr	r0, [r4, #4]
 8014016:	60a5      	str	r5, [r4, #8]
 8014018:	4798      	blx	r3
 801401a:	6065      	str	r5, [r4, #4]
 801401c:	6920      	ldr	r0, [r4, #16]
 801401e:	69a3      	ldr	r3, [r4, #24]
 8014020:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014022:	4798      	blx	r3
 8014024:	2000      	movs	r0, #0
 8014026:	6120      	str	r0, [r4, #16]
 8014028:	bd38      	pop	{r3, r4, r5, pc}
 801402a:	200b      	movs	r0, #11
 801402c:	4770      	bx	lr
 801402e:	bf00      	nop

08014030 <rcl_clock_get_now>:
 8014030:	b140      	cbz	r0, 8014044 <rcl_clock_get_now+0x14>
 8014032:	b139      	cbz	r1, 8014044 <rcl_clock_get_now+0x14>
 8014034:	7803      	ldrb	r3, [r0, #0]
 8014036:	b11b      	cbz	r3, 8014040 <rcl_clock_get_now+0x10>
 8014038:	68c3      	ldr	r3, [r0, #12]
 801403a:	b10b      	cbz	r3, 8014040 <rcl_clock_get_now+0x10>
 801403c:	6900      	ldr	r0, [r0, #16]
 801403e:	4718      	bx	r3
 8014040:	2001      	movs	r0, #1
 8014042:	4770      	bx	lr
 8014044:	200b      	movs	r0, #11
 8014046:	4770      	bx	lr

08014048 <rcl_clock_add_jump_callback>:
 8014048:	b082      	sub	sp, #8
 801404a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801404e:	a906      	add	r1, sp, #24
 8014050:	e881 000c 	stmia.w	r1, {r2, r3}
 8014054:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8014058:	b320      	cbz	r0, 80140a4 <rcl_clock_add_jump_callback+0x5c>
 801405a:	4604      	mov	r4, r0
 801405c:	3014      	adds	r0, #20
 801405e:	f7f8 fd0b 	bl	800ca78 <rcutils_allocator_is_valid>
 8014062:	b1f8      	cbz	r0, 80140a4 <rcl_clock_add_jump_callback+0x5c>
 8014064:	b1f6      	cbz	r6, 80140a4 <rcl_clock_add_jump_callback+0x5c>
 8014066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014068:	2b00      	cmp	r3, #0
 801406a:	db1b      	blt.n	80140a4 <rcl_clock_add_jump_callback+0x5c>
 801406c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014070:	2a01      	cmp	r2, #1
 8014072:	f173 0300 	sbcs.w	r3, r3, #0
 8014076:	da15      	bge.n	80140a4 <rcl_clock_add_jump_callback+0x5c>
 8014078:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801407c:	2f00      	cmp	r7, #0
 801407e:	d042      	beq.n	8014106 <rcl_clock_add_jump_callback+0xbe>
 8014080:	2300      	movs	r3, #0
 8014082:	4602      	mov	r2, r0
 8014084:	e003      	b.n	801408e <rcl_clock_add_jump_callback+0x46>
 8014086:	42bb      	cmp	r3, r7
 8014088:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 801408c:	d011      	beq.n	80140b2 <rcl_clock_add_jump_callback+0x6a>
 801408e:	6811      	ldr	r1, [r2, #0]
 8014090:	42b1      	cmp	r1, r6
 8014092:	f103 0301 	add.w	r3, r3, #1
 8014096:	d1f6      	bne.n	8014086 <rcl_clock_add_jump_callback+0x3e>
 8014098:	6a11      	ldr	r1, [r2, #32]
 801409a:	42a9      	cmp	r1, r5
 801409c:	d1f3      	bne.n	8014086 <rcl_clock_add_jump_callback+0x3e>
 801409e:	f04f 0e01 	mov.w	lr, #1
 80140a2:	e001      	b.n	80140a8 <rcl_clock_add_jump_callback+0x60>
 80140a4:	f04f 0e0b 	mov.w	lr, #11
 80140a8:	4670      	mov	r0, lr
 80140aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140ae:	b002      	add	sp, #8
 80140b0:	4770      	bx	lr
 80140b2:	3301      	adds	r3, #1
 80140b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80140b8:	00d9      	lsls	r1, r3, #3
 80140ba:	69e3      	ldr	r3, [r4, #28]
 80140bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80140be:	4798      	blx	r3
 80140c0:	b1f0      	cbz	r0, 8014100 <rcl_clock_add_jump_callback+0xb8>
 80140c2:	68a3      	ldr	r3, [r4, #8]
 80140c4:	6060      	str	r0, [r4, #4]
 80140c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80140ca:	f10d 0c18 	add.w	ip, sp, #24
 80140ce:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 80140d2:	f103 0801 	add.w	r8, r3, #1
 80140d6:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80140da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80140de:	f106 0708 	add.w	r7, r6, #8
 80140e2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80140e4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80140e8:	f04f 0e00 	mov.w	lr, #0
 80140ec:	e887 0003 	stmia.w	r7, {r0, r1}
 80140f0:	6235      	str	r5, [r6, #32]
 80140f2:	4670      	mov	r0, lr
 80140f4:	f8c4 8008 	str.w	r8, [r4, #8]
 80140f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140fc:	b002      	add	sp, #8
 80140fe:	4770      	bx	lr
 8014100:	f04f 0e0a 	mov.w	lr, #10
 8014104:	e7d0      	b.n	80140a8 <rcl_clock_add_jump_callback+0x60>
 8014106:	2128      	movs	r1, #40	@ 0x28
 8014108:	e7d7      	b.n	80140ba <rcl_clock_add_jump_callback+0x72>
 801410a:	bf00      	nop

0801410c <rcl_clock_remove_jump_callback>:
 801410c:	2800      	cmp	r0, #0
 801410e:	d057      	beq.n	80141c0 <rcl_clock_remove_jump_callback+0xb4>
 8014110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014114:	4605      	mov	r5, r0
 8014116:	3014      	adds	r0, #20
 8014118:	4688      	mov	r8, r1
 801411a:	4692      	mov	sl, r2
 801411c:	f7f8 fcac 	bl	800ca78 <rcutils_allocator_is_valid>
 8014120:	2800      	cmp	r0, #0
 8014122:	d03b      	beq.n	801419c <rcl_clock_remove_jump_callback+0x90>
 8014124:	f1b8 0f00 	cmp.w	r8, #0
 8014128:	d038      	beq.n	801419c <rcl_clock_remove_jump_callback+0x90>
 801412a:	68ae      	ldr	r6, [r5, #8]
 801412c:	b166      	cbz	r6, 8014148 <rcl_clock_remove_jump_callback+0x3c>
 801412e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014132:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8014136:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801413a:	464c      	mov	r4, r9
 801413c:	6823      	ldr	r3, [r4, #0]
 801413e:	4543      	cmp	r3, r8
 8014140:	d005      	beq.n	801414e <rcl_clock_remove_jump_callback+0x42>
 8014142:	3428      	adds	r4, #40	@ 0x28
 8014144:	42a7      	cmp	r7, r4
 8014146:	d1f9      	bne.n	801413c <rcl_clock_remove_jump_callback+0x30>
 8014148:	2001      	movs	r0, #1
 801414a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801414e:	6a23      	ldr	r3, [r4, #32]
 8014150:	3428      	adds	r4, #40	@ 0x28
 8014152:	42bc      	cmp	r4, r7
 8014154:	d02d      	beq.n	80141b2 <rcl_clock_remove_jump_callback+0xa6>
 8014156:	4553      	cmp	r3, sl
 8014158:	d1f0      	bne.n	801413c <rcl_clock_remove_jump_callback+0x30>
 801415a:	46a6      	mov	lr, r4
 801415c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014160:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8014164:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014168:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801416c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014170:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014174:	3428      	adds	r4, #40	@ 0x28
 8014176:	42a7      	cmp	r7, r4
 8014178:	e88c 0003 	stmia.w	ip, {r0, r1}
 801417c:	d1ed      	bne.n	801415a <rcl_clock_remove_jump_callback+0x4e>
 801417e:	3e01      	subs	r6, #1
 8014180:	60ae      	str	r6, [r5, #8]
 8014182:	b176      	cbz	r6, 80141a2 <rcl_clock_remove_jump_callback+0x96>
 8014184:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8014188:	69eb      	ldr	r3, [r5, #28]
 801418a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801418c:	00f1      	lsls	r1, r6, #3
 801418e:	4648      	mov	r0, r9
 8014190:	4798      	blx	r3
 8014192:	b1b8      	cbz	r0, 80141c4 <rcl_clock_remove_jump_callback+0xb8>
 8014194:	6068      	str	r0, [r5, #4]
 8014196:	2000      	movs	r0, #0
 8014198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801419c:	200b      	movs	r0, #11
 801419e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141a2:	4648      	mov	r0, r9
 80141a4:	69ab      	ldr	r3, [r5, #24]
 80141a6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80141a8:	4798      	blx	r3
 80141aa:	606e      	str	r6, [r5, #4]
 80141ac:	4630      	mov	r0, r6
 80141ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141b2:	4553      	cmp	r3, sl
 80141b4:	d1c8      	bne.n	8014148 <rcl_clock_remove_jump_callback+0x3c>
 80141b6:	3e01      	subs	r6, #1
 80141b8:	60ae      	str	r6, [r5, #8]
 80141ba:	2e00      	cmp	r6, #0
 80141bc:	d1e2      	bne.n	8014184 <rcl_clock_remove_jump_callback+0x78>
 80141be:	e7f0      	b.n	80141a2 <rcl_clock_remove_jump_callback+0x96>
 80141c0:	200b      	movs	r0, #11
 80141c2:	4770      	bx	lr
 80141c4:	200a      	movs	r0, #10
 80141c6:	e7ea      	b.n	801419e <rcl_clock_remove_jump_callback+0x92>

080141c8 <rcl_get_zero_initialized_wait_set>:
 80141c8:	b510      	push	{r4, lr}
 80141ca:	4c08      	ldr	r4, [pc, #32]	@ (80141ec <rcl_get_zero_initialized_wait_set+0x24>)
 80141cc:	4686      	mov	lr, r0
 80141ce:	4684      	mov	ip, r0
 80141d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141e2:	6823      	ldr	r3, [r4, #0]
 80141e4:	f8cc 3000 	str.w	r3, [ip]
 80141e8:	4670      	mov	r0, lr
 80141ea:	bd10      	pop	{r4, pc}
 80141ec:	08019cd4 	.word	0x08019cd4

080141f0 <rcl_wait_set_is_valid>:
 80141f0:	b118      	cbz	r0, 80141fa <rcl_wait_set_is_valid+0xa>
 80141f2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80141f4:	3800      	subs	r0, #0
 80141f6:	bf18      	it	ne
 80141f8:	2001      	movne	r0, #1
 80141fa:	4770      	bx	lr

080141fc <rcl_wait_set_fini>:
 80141fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014200:	b082      	sub	sp, #8
 8014202:	2800      	cmp	r0, #0
 8014204:	f000 8095 	beq.w	8014332 <rcl_wait_set_fini+0x136>
 8014208:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801420a:	4604      	mov	r4, r0
 801420c:	2e00      	cmp	r6, #0
 801420e:	f000 808c 	beq.w	801432a <rcl_wait_set_fini+0x12e>
 8014212:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014214:	f002 fa5e 	bl	80166d4 <rmw_destroy_wait_set>
 8014218:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801421a:	1e06      	subs	r6, r0, #0
 801421c:	bf18      	it	ne
 801421e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014222:	2d00      	cmp	r5, #0
 8014224:	f000 8081 	beq.w	801432a <rcl_wait_set_fini+0x12e>
 8014228:	6820      	ldr	r0, [r4, #0]
 801422a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801422e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014230:	2700      	movs	r7, #0
 8014232:	6067      	str	r7, [r4, #4]
 8014234:	602f      	str	r7, [r5, #0]
 8014236:	b120      	cbz	r0, 8014242 <rcl_wait_set_fini+0x46>
 8014238:	9101      	str	r1, [sp, #4]
 801423a:	47c0      	blx	r8
 801423c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801423e:	9901      	ldr	r1, [sp, #4]
 8014240:	6027      	str	r7, [r4, #0]
 8014242:	68a8      	ldr	r0, [r5, #8]
 8014244:	b120      	cbz	r0, 8014250 <rcl_wait_set_fini+0x54>
 8014246:	47c0      	blx	r8
 8014248:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801424a:	2300      	movs	r3, #0
 801424c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014250:	68a0      	ldr	r0, [r4, #8]
 8014252:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014254:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014256:	f04f 0800 	mov.w	r8, #0
 801425a:	f8c4 800c 	str.w	r8, [r4, #12]
 801425e:	f8c5 800c 	str.w	r8, [r5, #12]
 8014262:	b128      	cbz	r0, 8014270 <rcl_wait_set_fini+0x74>
 8014264:	47b8      	blx	r7
 8014266:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014268:	f8c4 8008 	str.w	r8, [r4, #8]
 801426c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801426e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014270:	6968      	ldr	r0, [r5, #20]
 8014272:	f04f 0800 	mov.w	r8, #0
 8014276:	f8c5 8010 	str.w	r8, [r5, #16]
 801427a:	b128      	cbz	r0, 8014288 <rcl_wait_set_fini+0x8c>
 801427c:	47b8      	blx	r7
 801427e:	f8c5 8014 	str.w	r8, [r5, #20]
 8014282:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014284:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014286:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014288:	6920      	ldr	r0, [r4, #16]
 801428a:	f04f 0800 	mov.w	r8, #0
 801428e:	f8c4 8014 	str.w	r8, [r4, #20]
 8014292:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8014296:	b128      	cbz	r0, 80142a4 <rcl_wait_set_fini+0xa8>
 8014298:	47b8      	blx	r7
 801429a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801429c:	f8c4 8010 	str.w	r8, [r4, #16]
 80142a0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80142a2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80142a4:	69a0      	ldr	r0, [r4, #24]
 80142a6:	f04f 0800 	mov.w	r8, #0
 80142aa:	f8c4 801c 	str.w	r8, [r4, #28]
 80142ae:	f8c5 8018 	str.w	r8, [r5, #24]
 80142b2:	b128      	cbz	r0, 80142c0 <rcl_wait_set_fini+0xc4>
 80142b4:	9101      	str	r1, [sp, #4]
 80142b6:	47b8      	blx	r7
 80142b8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80142ba:	9901      	ldr	r1, [sp, #4]
 80142bc:	f8c4 8018 	str.w	r8, [r4, #24]
 80142c0:	6a28      	ldr	r0, [r5, #32]
 80142c2:	b120      	cbz	r0, 80142ce <rcl_wait_set_fini+0xd2>
 80142c4:	47b8      	blx	r7
 80142c6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80142c8:	2300      	movs	r3, #0
 80142ca:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80142ce:	6a20      	ldr	r0, [r4, #32]
 80142d0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80142d4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80142d6:	2700      	movs	r7, #0
 80142d8:	6267      	str	r7, [r4, #36]	@ 0x24
 80142da:	626f      	str	r7, [r5, #36]	@ 0x24
 80142dc:	b120      	cbz	r0, 80142e8 <rcl_wait_set_fini+0xec>
 80142de:	9101      	str	r1, [sp, #4]
 80142e0:	47c0      	blx	r8
 80142e2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80142e4:	9901      	ldr	r1, [sp, #4]
 80142e6:	6227      	str	r7, [r4, #32]
 80142e8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80142ea:	b120      	cbz	r0, 80142f6 <rcl_wait_set_fini+0xfa>
 80142ec:	47c0      	blx	r8
 80142ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80142f0:	2300      	movs	r3, #0
 80142f2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80142f6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80142f8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80142fc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80142fe:	2700      	movs	r7, #0
 8014300:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014302:	632f      	str	r7, [r5, #48]	@ 0x30
 8014304:	b120      	cbz	r0, 8014310 <rcl_wait_set_fini+0x114>
 8014306:	9101      	str	r1, [sp, #4]
 8014308:	47c0      	blx	r8
 801430a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801430c:	9901      	ldr	r1, [sp, #4]
 801430e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8014310:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014312:	b120      	cbz	r0, 801431e <rcl_wait_set_fini+0x122>
 8014314:	47c0      	blx	r8
 8014316:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014318:	2300      	movs	r3, #0
 801431a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801431e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014320:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014322:	4628      	mov	r0, r5
 8014324:	4798      	blx	r3
 8014326:	2300      	movs	r3, #0
 8014328:	6323      	str	r3, [r4, #48]	@ 0x30
 801432a:	4630      	mov	r0, r6
 801432c:	b002      	add	sp, #8
 801432e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014332:	260b      	movs	r6, #11
 8014334:	4630      	mov	r0, r6
 8014336:	b002      	add	sp, #8
 8014338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801433c <rcl_wait_set_add_subscription>:
 801433c:	b318      	cbz	r0, 8014386 <rcl_wait_set_add_subscription+0x4a>
 801433e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014340:	b570      	push	{r4, r5, r6, lr}
 8014342:	4604      	mov	r4, r0
 8014344:	b30b      	cbz	r3, 801438a <rcl_wait_set_add_subscription+0x4e>
 8014346:	b319      	cbz	r1, 8014390 <rcl_wait_set_add_subscription+0x54>
 8014348:	681d      	ldr	r5, [r3, #0]
 801434a:	6840      	ldr	r0, [r0, #4]
 801434c:	4285      	cmp	r5, r0
 801434e:	d217      	bcs.n	8014380 <rcl_wait_set_add_subscription+0x44>
 8014350:	6820      	ldr	r0, [r4, #0]
 8014352:	1c6e      	adds	r6, r5, #1
 8014354:	601e      	str	r6, [r3, #0]
 8014356:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801435a:	b102      	cbz	r2, 801435e <rcl_wait_set_add_subscription+0x22>
 801435c:	6015      	str	r5, [r2, #0]
 801435e:	4608      	mov	r0, r1
 8014360:	f7f7 f91a 	bl	800b598 <rcl_subscription_get_rmw_handle>
 8014364:	b150      	cbz	r0, 801437c <rcl_wait_set_add_subscription+0x40>
 8014366:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014368:	6842      	ldr	r2, [r0, #4]
 801436a:	689b      	ldr	r3, [r3, #8]
 801436c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014370:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014372:	6853      	ldr	r3, [r2, #4]
 8014374:	3301      	adds	r3, #1
 8014376:	2000      	movs	r0, #0
 8014378:	6053      	str	r3, [r2, #4]
 801437a:	bd70      	pop	{r4, r5, r6, pc}
 801437c:	2001      	movs	r0, #1
 801437e:	bd70      	pop	{r4, r5, r6, pc}
 8014380:	f240 3086 	movw	r0, #902	@ 0x386
 8014384:	bd70      	pop	{r4, r5, r6, pc}
 8014386:	200b      	movs	r0, #11
 8014388:	4770      	bx	lr
 801438a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801438e:	bd70      	pop	{r4, r5, r6, pc}
 8014390:	200b      	movs	r0, #11
 8014392:	bd70      	pop	{r4, r5, r6, pc}

08014394 <rcl_wait_set_clear>:
 8014394:	2800      	cmp	r0, #0
 8014396:	d073      	beq.n	8014480 <rcl_wait_set_clear+0xec>
 8014398:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801439a:	b510      	push	{r4, lr}
 801439c:	4604      	mov	r4, r0
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d070      	beq.n	8014484 <rcl_wait_set_clear+0xf0>
 80143a2:	6800      	ldr	r0, [r0, #0]
 80143a4:	b138      	cbz	r0, 80143b6 <rcl_wait_set_clear+0x22>
 80143a6:	6862      	ldr	r2, [r4, #4]
 80143a8:	2100      	movs	r1, #0
 80143aa:	0092      	lsls	r2, r2, #2
 80143ac:	f003 ff46 	bl	801823c <memset>
 80143b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80143b2:	2200      	movs	r2, #0
 80143b4:	601a      	str	r2, [r3, #0]
 80143b6:	68a0      	ldr	r0, [r4, #8]
 80143b8:	b138      	cbz	r0, 80143ca <rcl_wait_set_clear+0x36>
 80143ba:	68e2      	ldr	r2, [r4, #12]
 80143bc:	2100      	movs	r1, #0
 80143be:	0092      	lsls	r2, r2, #2
 80143c0:	f003 ff3c 	bl	801823c <memset>
 80143c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80143c6:	2200      	movs	r2, #0
 80143c8:	60da      	str	r2, [r3, #12]
 80143ca:	69a0      	ldr	r0, [r4, #24]
 80143cc:	b138      	cbz	r0, 80143de <rcl_wait_set_clear+0x4a>
 80143ce:	69e2      	ldr	r2, [r4, #28]
 80143d0:	2100      	movs	r1, #0
 80143d2:	0092      	lsls	r2, r2, #2
 80143d4:	f003 ff32 	bl	801823c <memset>
 80143d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80143da:	2200      	movs	r2, #0
 80143dc:	619a      	str	r2, [r3, #24]
 80143de:	6a20      	ldr	r0, [r4, #32]
 80143e0:	b138      	cbz	r0, 80143f2 <rcl_wait_set_clear+0x5e>
 80143e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80143e4:	2100      	movs	r1, #0
 80143e6:	0092      	lsls	r2, r2, #2
 80143e8:	f003 ff28 	bl	801823c <memset>
 80143ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80143ee:	2200      	movs	r2, #0
 80143f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80143f2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80143f4:	b138      	cbz	r0, 8014406 <rcl_wait_set_clear+0x72>
 80143f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80143f8:	2100      	movs	r1, #0
 80143fa:	0092      	lsls	r2, r2, #2
 80143fc:	f003 ff1e 	bl	801823c <memset>
 8014400:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014402:	2200      	movs	r2, #0
 8014404:	631a      	str	r2, [r3, #48]	@ 0x30
 8014406:	6920      	ldr	r0, [r4, #16]
 8014408:	b138      	cbz	r0, 801441a <rcl_wait_set_clear+0x86>
 801440a:	6962      	ldr	r2, [r4, #20]
 801440c:	2100      	movs	r1, #0
 801440e:	0092      	lsls	r2, r2, #2
 8014410:	f003 ff14 	bl	801823c <memset>
 8014414:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014416:	2200      	movs	r2, #0
 8014418:	641a      	str	r2, [r3, #64]	@ 0x40
 801441a:	6898      	ldr	r0, [r3, #8]
 801441c:	b138      	cbz	r0, 801442e <rcl_wait_set_clear+0x9a>
 801441e:	685a      	ldr	r2, [r3, #4]
 8014420:	2100      	movs	r1, #0
 8014422:	0092      	lsls	r2, r2, #2
 8014424:	f003 ff0a 	bl	801823c <memset>
 8014428:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801442a:	2200      	movs	r2, #0
 801442c:	605a      	str	r2, [r3, #4]
 801442e:	6958      	ldr	r0, [r3, #20]
 8014430:	b138      	cbz	r0, 8014442 <rcl_wait_set_clear+0xae>
 8014432:	691a      	ldr	r2, [r3, #16]
 8014434:	2100      	movs	r1, #0
 8014436:	0092      	lsls	r2, r2, #2
 8014438:	f003 ff00 	bl	801823c <memset>
 801443c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801443e:	2200      	movs	r2, #0
 8014440:	611a      	str	r2, [r3, #16]
 8014442:	6a18      	ldr	r0, [r3, #32]
 8014444:	b138      	cbz	r0, 8014456 <rcl_wait_set_clear+0xc2>
 8014446:	69da      	ldr	r2, [r3, #28]
 8014448:	2100      	movs	r1, #0
 801444a:	0092      	lsls	r2, r2, #2
 801444c:	f003 fef6 	bl	801823c <memset>
 8014450:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014452:	2200      	movs	r2, #0
 8014454:	61da      	str	r2, [r3, #28]
 8014456:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014458:	b138      	cbz	r0, 801446a <rcl_wait_set_clear+0xd6>
 801445a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801445c:	2100      	movs	r1, #0
 801445e:	0092      	lsls	r2, r2, #2
 8014460:	f003 feec 	bl	801823c <memset>
 8014464:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014466:	2200      	movs	r2, #0
 8014468:	629a      	str	r2, [r3, #40]	@ 0x28
 801446a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801446c:	b138      	cbz	r0, 801447e <rcl_wait_set_clear+0xea>
 801446e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014470:	2100      	movs	r1, #0
 8014472:	0092      	lsls	r2, r2, #2
 8014474:	f003 fee2 	bl	801823c <memset>
 8014478:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801447a:	2000      	movs	r0, #0
 801447c:	6358      	str	r0, [r3, #52]	@ 0x34
 801447e:	bd10      	pop	{r4, pc}
 8014480:	200b      	movs	r0, #11
 8014482:	4770      	bx	lr
 8014484:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014488:	bd10      	pop	{r4, pc}
 801448a:	bf00      	nop

0801448c <rcl_wait_set_resize>:
 801448c:	2800      	cmp	r0, #0
 801448e:	f000 8185 	beq.w	801479c <rcl_wait_set_resize+0x310>
 8014492:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014496:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8014498:	b083      	sub	sp, #12
 801449a:	4605      	mov	r5, r0
 801449c:	2c00      	cmp	r4, #0
 801449e:	f000 817f 	beq.w	80147a0 <rcl_wait_set_resize+0x314>
 80144a2:	f04f 0900 	mov.w	r9, #0
 80144a6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80144aa:	461f      	mov	r7, r3
 80144ac:	4688      	mov	r8, r1
 80144ae:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80144b2:	4616      	mov	r6, r2
 80144b4:	f8c0 9004 	str.w	r9, [r0, #4]
 80144b8:	f8c4 9000 	str.w	r9, [r4]
 80144bc:	2900      	cmp	r1, #0
 80144be:	f000 80bd 	beq.w	801463c <rcl_wait_set_resize+0x1b0>
 80144c2:	008c      	lsls	r4, r1, #2
 80144c4:	6800      	ldr	r0, [r0, #0]
 80144c6:	9301      	str	r3, [sp, #4]
 80144c8:	4652      	mov	r2, sl
 80144ca:	4621      	mov	r1, r4
 80144cc:	4798      	blx	r3
 80144ce:	9b01      	ldr	r3, [sp, #4]
 80144d0:	6028      	str	r0, [r5, #0]
 80144d2:	2800      	cmp	r0, #0
 80144d4:	f000 80cb 	beq.w	801466e <rcl_wait_set_resize+0x1e2>
 80144d8:	4622      	mov	r2, r4
 80144da:	4649      	mov	r1, r9
 80144dc:	9301      	str	r3, [sp, #4]
 80144de:	f003 fead 	bl	801823c <memset>
 80144e2:	f8c5 8004 	str.w	r8, [r5, #4]
 80144e6:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80144ea:	9b01      	ldr	r3, [sp, #4]
 80144ec:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80144f0:	f8c8 9004 	str.w	r9, [r8, #4]
 80144f4:	4652      	mov	r2, sl
 80144f6:	4621      	mov	r1, r4
 80144f8:	4798      	blx	r3
 80144fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80144fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8014500:	689b      	ldr	r3, [r3, #8]
 8014502:	2b00      	cmp	r3, #0
 8014504:	f000 80ac 	beq.w	8014660 <rcl_wait_set_resize+0x1d4>
 8014508:	4622      	mov	r2, r4
 801450a:	4649      	mov	r1, r9
 801450c:	4618      	mov	r0, r3
 801450e:	f003 fe95 	bl	801823c <memset>
 8014512:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014514:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014518:	f04f 0800 	mov.w	r8, #0
 801451c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8014520:	f8c5 800c 	str.w	r8, [r5, #12]
 8014524:	f8c4 800c 	str.w	r8, [r4, #12]
 8014528:	2e00      	cmp	r6, #0
 801452a:	f040 80a4 	bne.w	8014676 <rcl_wait_set_resize+0x1ea>
 801452e:	68a8      	ldr	r0, [r5, #8]
 8014530:	b128      	cbz	r0, 801453e <rcl_wait_set_resize+0xb2>
 8014532:	4649      	mov	r1, r9
 8014534:	4790      	blx	r2
 8014536:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014538:	60ae      	str	r6, [r5, #8]
 801453a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801453e:	f04f 0800 	mov.w	r8, #0
 8014542:	19f6      	adds	r6, r6, r7
 8014544:	f8c4 8010 	str.w	r8, [r4, #16]
 8014548:	f040 80ac 	bne.w	80146a4 <rcl_wait_set_resize+0x218>
 801454c:	6960      	ldr	r0, [r4, #20]
 801454e:	b130      	cbz	r0, 801455e <rcl_wait_set_resize+0xd2>
 8014550:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014552:	4649      	mov	r1, r9
 8014554:	4798      	blx	r3
 8014556:	6166      	str	r6, [r4, #20]
 8014558:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801455a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801455e:	2600      	movs	r6, #0
 8014560:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014564:	616e      	str	r6, [r5, #20]
 8014566:	6426      	str	r6, [r4, #64]	@ 0x40
 8014568:	2f00      	cmp	r7, #0
 801456a:	f040 80ad 	bne.w	80146c8 <rcl_wait_set_resize+0x23c>
 801456e:	6928      	ldr	r0, [r5, #16]
 8014570:	b138      	cbz	r0, 8014582 <rcl_wait_set_resize+0xf6>
 8014572:	4649      	mov	r1, r9
 8014574:	47d0      	blx	sl
 8014576:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014578:	612f      	str	r7, [r5, #16]
 801457a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801457e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014582:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014584:	2600      	movs	r6, #0
 8014586:	61ee      	str	r6, [r5, #28]
 8014588:	61a6      	str	r6, [r4, #24]
 801458a:	2b00      	cmp	r3, #0
 801458c:	f040 80af 	bne.w	80146ee <rcl_wait_set_resize+0x262>
 8014590:	69a8      	ldr	r0, [r5, #24]
 8014592:	b120      	cbz	r0, 801459e <rcl_wait_set_resize+0x112>
 8014594:	4649      	mov	r1, r9
 8014596:	47d0      	blx	sl
 8014598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801459a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801459c:	61ab      	str	r3, [r5, #24]
 801459e:	6a20      	ldr	r0, [r4, #32]
 80145a0:	b128      	cbz	r0, 80145ae <rcl_wait_set_resize+0x122>
 80145a2:	4649      	mov	r1, r9
 80145a4:	47d0      	blx	sl
 80145a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80145a8:	2300      	movs	r3, #0
 80145aa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80145ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80145b0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80145b2:	2600      	movs	r6, #0
 80145b4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80145b8:	626e      	str	r6, [r5, #36]	@ 0x24
 80145ba:	6266      	str	r6, [r4, #36]	@ 0x24
 80145bc:	2b00      	cmp	r3, #0
 80145be:	f000 80b6 	beq.w	801472e <rcl_wait_set_resize+0x2a2>
 80145c2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80145c6:	6a28      	ldr	r0, [r5, #32]
 80145c8:	463a      	mov	r2, r7
 80145ca:	4651      	mov	r1, sl
 80145cc:	47c8      	blx	r9
 80145ce:	6228      	str	r0, [r5, #32]
 80145d0:	2800      	cmp	r0, #0
 80145d2:	d04c      	beq.n	801466e <rcl_wait_set_resize+0x1e2>
 80145d4:	4652      	mov	r2, sl
 80145d6:	4631      	mov	r1, r6
 80145d8:	f003 fe30 	bl	801823c <memset>
 80145dc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80145de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80145e0:	626b      	str	r3, [r5, #36]	@ 0x24
 80145e2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80145e4:	62a6      	str	r6, [r4, #40]	@ 0x28
 80145e6:	463a      	mov	r2, r7
 80145e8:	4651      	mov	r1, sl
 80145ea:	47c8      	blx	r9
 80145ec:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80145ee:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80145f0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80145f2:	2c00      	cmp	r4, #0
 80145f4:	f000 80f0 	beq.w	80147d8 <rcl_wait_set_resize+0x34c>
 80145f8:	4620      	mov	r0, r4
 80145fa:	4652      	mov	r2, sl
 80145fc:	4631      	mov	r1, r6
 80145fe:	f003 fe1d 	bl	801823c <memset>
 8014602:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014606:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014608:	2600      	movs	r6, #0
 801460a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801460e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8014610:	6326      	str	r6, [r4, #48]	@ 0x30
 8014612:	2b00      	cmp	r3, #0
 8014614:	f040 809d 	bne.w	8014752 <rcl_wait_set_resize+0x2c6>
 8014618:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801461a:	b120      	cbz	r0, 8014626 <rcl_wait_set_resize+0x19a>
 801461c:	4639      	mov	r1, r7
 801461e:	47c0      	blx	r8
 8014620:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014622:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014624:	62ab      	str	r3, [r5, #40]	@ 0x28
 8014626:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014628:	b310      	cbz	r0, 8014670 <rcl_wait_set_resize+0x1e4>
 801462a:	4639      	mov	r1, r7
 801462c:	47c0      	blx	r8
 801462e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014630:	2000      	movs	r0, #0
 8014632:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8014636:	b003      	add	sp, #12
 8014638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801463c:	6800      	ldr	r0, [r0, #0]
 801463e:	b120      	cbz	r0, 801464a <rcl_wait_set_resize+0x1be>
 8014640:	4651      	mov	r1, sl
 8014642:	47d8      	blx	fp
 8014644:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014646:	f8c5 8000 	str.w	r8, [r5]
 801464a:	68a0      	ldr	r0, [r4, #8]
 801464c:	2800      	cmp	r0, #0
 801464e:	f43f af61 	beq.w	8014514 <rcl_wait_set_resize+0x88>
 8014652:	4651      	mov	r1, sl
 8014654:	47d8      	blx	fp
 8014656:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014658:	2300      	movs	r3, #0
 801465a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801465e:	e759      	b.n	8014514 <rcl_wait_set_resize+0x88>
 8014660:	6828      	ldr	r0, [r5, #0]
 8014662:	9301      	str	r3, [sp, #4]
 8014664:	4651      	mov	r1, sl
 8014666:	47d8      	blx	fp
 8014668:	9b01      	ldr	r3, [sp, #4]
 801466a:	e9c5 3300 	strd	r3, r3, [r5]
 801466e:	200a      	movs	r0, #10
 8014670:	b003      	add	sp, #12
 8014672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014676:	00b4      	lsls	r4, r6, #2
 8014678:	68a8      	ldr	r0, [r5, #8]
 801467a:	464a      	mov	r2, r9
 801467c:	4621      	mov	r1, r4
 801467e:	4798      	blx	r3
 8014680:	60a8      	str	r0, [r5, #8]
 8014682:	2800      	cmp	r0, #0
 8014684:	d0f3      	beq.n	801466e <rcl_wait_set_resize+0x1e2>
 8014686:	4622      	mov	r2, r4
 8014688:	4641      	mov	r1, r8
 801468a:	f003 fdd7 	bl	801823c <memset>
 801468e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014690:	60ee      	str	r6, [r5, #12]
 8014692:	f04f 0800 	mov.w	r8, #0
 8014696:	19f6      	adds	r6, r6, r7
 8014698:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801469c:	f8c4 8010 	str.w	r8, [r4, #16]
 80146a0:	f43f af54 	beq.w	801454c <rcl_wait_set_resize+0xc0>
 80146a4:	00b6      	lsls	r6, r6, #2
 80146a6:	464a      	mov	r2, r9
 80146a8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80146aa:	6960      	ldr	r0, [r4, #20]
 80146ac:	4631      	mov	r1, r6
 80146ae:	4798      	blx	r3
 80146b0:	4681      	mov	r9, r0
 80146b2:	6160      	str	r0, [r4, #20]
 80146b4:	2800      	cmp	r0, #0
 80146b6:	d076      	beq.n	80147a6 <rcl_wait_set_resize+0x31a>
 80146b8:	4632      	mov	r2, r6
 80146ba:	4641      	mov	r1, r8
 80146bc:	f003 fdbe 	bl	801823c <memset>
 80146c0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146c2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80146c6:	e74a      	b.n	801455e <rcl_wait_set_resize+0xd2>
 80146c8:	00bc      	lsls	r4, r7, #2
 80146ca:	6928      	ldr	r0, [r5, #16]
 80146cc:	464a      	mov	r2, r9
 80146ce:	4621      	mov	r1, r4
 80146d0:	47c0      	blx	r8
 80146d2:	6128      	str	r0, [r5, #16]
 80146d4:	2800      	cmp	r0, #0
 80146d6:	d0ca      	beq.n	801466e <rcl_wait_set_resize+0x1e2>
 80146d8:	4622      	mov	r2, r4
 80146da:	4631      	mov	r1, r6
 80146dc:	f003 fdae 	bl	801823c <memset>
 80146e0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146e2:	616f      	str	r7, [r5, #20]
 80146e4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80146e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80146ec:	e749      	b.n	8014582 <rcl_wait_set_resize+0xf6>
 80146ee:	009c      	lsls	r4, r3, #2
 80146f0:	69a8      	ldr	r0, [r5, #24]
 80146f2:	464a      	mov	r2, r9
 80146f4:	4621      	mov	r1, r4
 80146f6:	47c0      	blx	r8
 80146f8:	61a8      	str	r0, [r5, #24]
 80146fa:	2800      	cmp	r0, #0
 80146fc:	d0b7      	beq.n	801466e <rcl_wait_set_resize+0x1e2>
 80146fe:	4622      	mov	r2, r4
 8014700:	4631      	mov	r1, r6
 8014702:	f003 fd9b 	bl	801823c <memset>
 8014706:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8014708:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801470a:	61eb      	str	r3, [r5, #28]
 801470c:	6a38      	ldr	r0, [r7, #32]
 801470e:	61fe      	str	r6, [r7, #28]
 8014710:	464a      	mov	r2, r9
 8014712:	4621      	mov	r1, r4
 8014714:	47c0      	blx	r8
 8014716:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014718:	6238      	str	r0, [r7, #32]
 801471a:	6a1f      	ldr	r7, [r3, #32]
 801471c:	2f00      	cmp	r7, #0
 801471e:	d054      	beq.n	80147ca <rcl_wait_set_resize+0x33e>
 8014720:	4622      	mov	r2, r4
 8014722:	4631      	mov	r1, r6
 8014724:	4638      	mov	r0, r7
 8014726:	f003 fd89 	bl	801823c <memset>
 801472a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801472c:	e73f      	b.n	80145ae <rcl_wait_set_resize+0x122>
 801472e:	6a28      	ldr	r0, [r5, #32]
 8014730:	b120      	cbz	r0, 801473c <rcl_wait_set_resize+0x2b0>
 8014732:	4639      	mov	r1, r7
 8014734:	47c0      	blx	r8
 8014736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014738:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801473a:	622b      	str	r3, [r5, #32]
 801473c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801473e:	2800      	cmp	r0, #0
 8014740:	f43f af60 	beq.w	8014604 <rcl_wait_set_resize+0x178>
 8014744:	4639      	mov	r1, r7
 8014746:	47c0      	blx	r8
 8014748:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801474a:	2300      	movs	r3, #0
 801474c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014750:	e758      	b.n	8014604 <rcl_wait_set_resize+0x178>
 8014752:	009c      	lsls	r4, r3, #2
 8014754:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014756:	463a      	mov	r2, r7
 8014758:	4621      	mov	r1, r4
 801475a:	47c8      	blx	r9
 801475c:	62a8      	str	r0, [r5, #40]	@ 0x28
 801475e:	2800      	cmp	r0, #0
 8014760:	d085      	beq.n	801466e <rcl_wait_set_resize+0x1e2>
 8014762:	4622      	mov	r2, r4
 8014764:	4631      	mov	r1, r6
 8014766:	f003 fd69 	bl	801823c <memset>
 801476a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801476e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014770:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8014772:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8014776:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801477a:	463a      	mov	r2, r7
 801477c:	4621      	mov	r1, r4
 801477e:	47c8      	blx	r9
 8014780:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014782:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8014786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014788:	b36b      	cbz	r3, 80147e6 <rcl_wait_set_resize+0x35a>
 801478a:	4622      	mov	r2, r4
 801478c:	4631      	mov	r1, r6
 801478e:	4618      	mov	r0, r3
 8014790:	f003 fd54 	bl	801823c <memset>
 8014794:	4630      	mov	r0, r6
 8014796:	b003      	add	sp, #12
 8014798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801479c:	200b      	movs	r0, #11
 801479e:	4770      	bx	lr
 80147a0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80147a4:	e764      	b.n	8014670 <rcl_wait_set_resize+0x1e4>
 80147a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80147a8:	68a8      	ldr	r0, [r5, #8]
 80147aa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80147ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80147ae:	4798      	blx	r3
 80147b0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80147b2:	6928      	ldr	r0, [r5, #16]
 80147b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80147b6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80147b8:	f8c5 900c 	str.w	r9, [r5, #12]
 80147bc:	f8c5 9008 	str.w	r9, [r5, #8]
 80147c0:	4790      	blx	r2
 80147c2:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80147c6:	200a      	movs	r0, #10
 80147c8:	e752      	b.n	8014670 <rcl_wait_set_resize+0x1e4>
 80147ca:	69a8      	ldr	r0, [r5, #24]
 80147cc:	4649      	mov	r1, r9
 80147ce:	47d0      	blx	sl
 80147d0:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80147d4:	200a      	movs	r0, #10
 80147d6:	e74b      	b.n	8014670 <rcl_wait_set_resize+0x1e4>
 80147d8:	6a28      	ldr	r0, [r5, #32]
 80147da:	4639      	mov	r1, r7
 80147dc:	47c0      	blx	r8
 80147de:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80147e2:	200a      	movs	r0, #10
 80147e4:	e744      	b.n	8014670 <rcl_wait_set_resize+0x1e4>
 80147e6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80147e8:	9301      	str	r3, [sp, #4]
 80147ea:	4639      	mov	r1, r7
 80147ec:	47c0      	blx	r8
 80147ee:	9b01      	ldr	r3, [sp, #4]
 80147f0:	200a      	movs	r0, #10
 80147f2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80147f6:	e73b      	b.n	8014670 <rcl_wait_set_resize+0x1e4>

080147f8 <rcl_wait_set_init>:
 80147f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147fc:	b084      	sub	sp, #16
 80147fe:	4604      	mov	r4, r0
 8014800:	a810      	add	r0, sp, #64	@ 0x40
 8014802:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8014806:	460f      	mov	r7, r1
 8014808:	4690      	mov	r8, r2
 801480a:	4699      	mov	r9, r3
 801480c:	f7f8 f934 	bl	800ca78 <rcutils_allocator_is_valid>
 8014810:	2800      	cmp	r0, #0
 8014812:	d06b      	beq.n	80148ec <rcl_wait_set_init+0xf4>
 8014814:	2c00      	cmp	r4, #0
 8014816:	d069      	beq.n	80148ec <rcl_wait_set_init+0xf4>
 8014818:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801481a:	b125      	cbz	r5, 8014826 <rcl_wait_set_init+0x2e>
 801481c:	2564      	movs	r5, #100	@ 0x64
 801481e:	4628      	mov	r0, r5
 8014820:	b004      	add	sp, #16
 8014822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014826:	f1ba 0f00 	cmp.w	sl, #0
 801482a:	d05f      	beq.n	80148ec <rcl_wait_set_init+0xf4>
 801482c:	4650      	mov	r0, sl
 801482e:	f7f6 f88d 	bl	800a94c <rcl_context_is_valid>
 8014832:	2800      	cmp	r0, #0
 8014834:	d067      	beq.n	8014906 <rcl_wait_set_init+0x10e>
 8014836:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014838:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801483a:	205c      	movs	r0, #92	@ 0x5c
 801483c:	4798      	blx	r3
 801483e:	6320      	str	r0, [r4, #48]	@ 0x30
 8014840:	2800      	cmp	r0, #0
 8014842:	d062      	beq.n	801490a <rcl_wait_set_init+0x112>
 8014844:	4629      	mov	r1, r5
 8014846:	225c      	movs	r2, #92	@ 0x5c
 8014848:	f003 fcf8 	bl	801823c <memset>
 801484c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8014850:	eb03 0e02 	add.w	lr, r3, r2
 8014854:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014856:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014858:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801485c:	449e      	add	lr, r3
 801485e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014862:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8014866:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801486a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801486e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8014872:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8014876:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801487a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801487e:	f8da a000 	ldr.w	sl, [sl]
 8014882:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014884:	44c6      	add	lr, r8
 8014886:	f8dc 3000 	ldr.w	r3, [ip]
 801488a:	602b      	str	r3, [r5, #0]
 801488c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8014890:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8014894:	f001 ff14 	bl	80166c0 <rmw_create_wait_set>
 8014898:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801489a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 801489c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801489e:	b350      	cbz	r0, 80148f6 <rcl_wait_set_init+0xfe>
 80148a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80148a2:	9302      	str	r3, [sp, #8]
 80148a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80148a6:	9301      	str	r3, [sp, #4]
 80148a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80148aa:	9300      	str	r3, [sp, #0]
 80148ac:	4642      	mov	r2, r8
 80148ae:	464b      	mov	r3, r9
 80148b0:	4639      	mov	r1, r7
 80148b2:	4620      	mov	r0, r4
 80148b4:	f7ff fdea 	bl	801448c <rcl_wait_set_resize>
 80148b8:	4605      	mov	r5, r0
 80148ba:	2800      	cmp	r0, #0
 80148bc:	d0af      	beq.n	801481e <rcl_wait_set_init+0x26>
 80148be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148c0:	bb2b      	cbnz	r3, 801490e <rcl_wait_set_init+0x116>
 80148c2:	2600      	movs	r6, #0
 80148c4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80148c8:	9600      	str	r6, [sp, #0]
 80148ca:	4633      	mov	r3, r6
 80148cc:	4632      	mov	r2, r6
 80148ce:	4631      	mov	r1, r6
 80148d0:	4620      	mov	r0, r4
 80148d2:	f7ff fddb 	bl	801448c <rcl_wait_set_resize>
 80148d6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80148d8:	2800      	cmp	r0, #0
 80148da:	d0a0      	beq.n	801481e <rcl_wait_set_init+0x26>
 80148dc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80148de:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80148e0:	4798      	blx	r3
 80148e2:	4628      	mov	r0, r5
 80148e4:	6326      	str	r6, [r4, #48]	@ 0x30
 80148e6:	b004      	add	sp, #16
 80148e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148ec:	250b      	movs	r5, #11
 80148ee:	4628      	mov	r0, r5
 80148f0:	b004      	add	sp, #16
 80148f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148f6:	2501      	movs	r5, #1
 80148f8:	f001 feec 	bl	80166d4 <rmw_destroy_wait_set>
 80148fc:	2800      	cmp	r0, #0
 80148fe:	bf18      	it	ne
 8014900:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8014904:	e7dd      	b.n	80148c2 <rcl_wait_set_init+0xca>
 8014906:	2565      	movs	r5, #101	@ 0x65
 8014908:	e789      	b.n	801481e <rcl_wait_set_init+0x26>
 801490a:	250a      	movs	r5, #10
 801490c:	e787      	b.n	801481e <rcl_wait_set_init+0x26>
 801490e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014910:	e7f2      	b.n	80148f8 <rcl_wait_set_init+0x100>
 8014912:	bf00      	nop

08014914 <rcl_wait_set_add_guard_condition>:
 8014914:	b318      	cbz	r0, 801495e <rcl_wait_set_add_guard_condition+0x4a>
 8014916:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014918:	b570      	push	{r4, r5, r6, lr}
 801491a:	4604      	mov	r4, r0
 801491c:	b30b      	cbz	r3, 8014962 <rcl_wait_set_add_guard_condition+0x4e>
 801491e:	b319      	cbz	r1, 8014968 <rcl_wait_set_add_guard_condition+0x54>
 8014920:	68dd      	ldr	r5, [r3, #12]
 8014922:	68c0      	ldr	r0, [r0, #12]
 8014924:	4285      	cmp	r5, r0
 8014926:	d217      	bcs.n	8014958 <rcl_wait_set_add_guard_condition+0x44>
 8014928:	68a0      	ldr	r0, [r4, #8]
 801492a:	1c6e      	adds	r6, r5, #1
 801492c:	60de      	str	r6, [r3, #12]
 801492e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014932:	b102      	cbz	r2, 8014936 <rcl_wait_set_add_guard_condition+0x22>
 8014934:	6015      	str	r5, [r2, #0]
 8014936:	4608      	mov	r0, r1
 8014938:	f7ff f874 	bl	8013a24 <rcl_guard_condition_get_rmw_handle>
 801493c:	b150      	cbz	r0, 8014954 <rcl_wait_set_add_guard_condition+0x40>
 801493e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014940:	6842      	ldr	r2, [r0, #4]
 8014942:	695b      	ldr	r3, [r3, #20]
 8014944:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014948:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801494a:	6913      	ldr	r3, [r2, #16]
 801494c:	3301      	adds	r3, #1
 801494e:	2000      	movs	r0, #0
 8014950:	6113      	str	r3, [r2, #16]
 8014952:	bd70      	pop	{r4, r5, r6, pc}
 8014954:	2001      	movs	r0, #1
 8014956:	bd70      	pop	{r4, r5, r6, pc}
 8014958:	f240 3086 	movw	r0, #902	@ 0x386
 801495c:	bd70      	pop	{r4, r5, r6, pc}
 801495e:	200b      	movs	r0, #11
 8014960:	4770      	bx	lr
 8014962:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014966:	bd70      	pop	{r4, r5, r6, pc}
 8014968:	200b      	movs	r0, #11
 801496a:	bd70      	pop	{r4, r5, r6, pc}

0801496c <rcl_wait_set_add_timer>:
 801496c:	b328      	cbz	r0, 80149ba <rcl_wait_set_add_timer+0x4e>
 801496e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014970:	b570      	push	{r4, r5, r6, lr}
 8014972:	4604      	mov	r4, r0
 8014974:	b31b      	cbz	r3, 80149be <rcl_wait_set_add_timer+0x52>
 8014976:	b329      	cbz	r1, 80149c4 <rcl_wait_set_add_timer+0x58>
 8014978:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801497a:	6965      	ldr	r5, [r4, #20]
 801497c:	42a8      	cmp	r0, r5
 801497e:	d219      	bcs.n	80149b4 <rcl_wait_set_add_timer+0x48>
 8014980:	6925      	ldr	r5, [r4, #16]
 8014982:	1c46      	adds	r6, r0, #1
 8014984:	641e      	str	r6, [r3, #64]	@ 0x40
 8014986:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801498a:	b102      	cbz	r2, 801498e <rcl_wait_set_add_timer+0x22>
 801498c:	6010      	str	r0, [r2, #0]
 801498e:	4608      	mov	r0, r1
 8014990:	f7f7 f882 	bl	800ba98 <rcl_timer_get_guard_condition>
 8014994:	b168      	cbz	r0, 80149b2 <rcl_wait_set_add_timer+0x46>
 8014996:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014998:	68e3      	ldr	r3, [r4, #12]
 801499a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801499c:	3b01      	subs	r3, #1
 801499e:	441d      	add	r5, r3
 80149a0:	f7ff f840 	bl	8013a24 <rcl_guard_condition_get_rmw_handle>
 80149a4:	b180      	cbz	r0, 80149c8 <rcl_wait_set_add_timer+0x5c>
 80149a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149a8:	6842      	ldr	r2, [r0, #4]
 80149aa:	695b      	ldr	r3, [r3, #20]
 80149ac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80149b0:	2000      	movs	r0, #0
 80149b2:	bd70      	pop	{r4, r5, r6, pc}
 80149b4:	f240 3086 	movw	r0, #902	@ 0x386
 80149b8:	bd70      	pop	{r4, r5, r6, pc}
 80149ba:	200b      	movs	r0, #11
 80149bc:	4770      	bx	lr
 80149be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80149c2:	bd70      	pop	{r4, r5, r6, pc}
 80149c4:	200b      	movs	r0, #11
 80149c6:	bd70      	pop	{r4, r5, r6, pc}
 80149c8:	2001      	movs	r0, #1
 80149ca:	bd70      	pop	{r4, r5, r6, pc}

080149cc <rcl_wait_set_add_client>:
 80149cc:	b318      	cbz	r0, 8014a16 <rcl_wait_set_add_client+0x4a>
 80149ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80149d0:	b570      	push	{r4, r5, r6, lr}
 80149d2:	4604      	mov	r4, r0
 80149d4:	b30b      	cbz	r3, 8014a1a <rcl_wait_set_add_client+0x4e>
 80149d6:	b319      	cbz	r1, 8014a20 <rcl_wait_set_add_client+0x54>
 80149d8:	699d      	ldr	r5, [r3, #24]
 80149da:	69c0      	ldr	r0, [r0, #28]
 80149dc:	4285      	cmp	r5, r0
 80149de:	d217      	bcs.n	8014a10 <rcl_wait_set_add_client+0x44>
 80149e0:	69a0      	ldr	r0, [r4, #24]
 80149e2:	1c6e      	adds	r6, r5, #1
 80149e4:	619e      	str	r6, [r3, #24]
 80149e6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80149ea:	b102      	cbz	r2, 80149ee <rcl_wait_set_add_client+0x22>
 80149ec:	6015      	str	r5, [r2, #0]
 80149ee:	4608      	mov	r0, r1
 80149f0:	f7fe fe6e 	bl	80136d0 <rcl_client_get_rmw_handle>
 80149f4:	b150      	cbz	r0, 8014a0c <rcl_wait_set_add_client+0x40>
 80149f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149f8:	6842      	ldr	r2, [r0, #4]
 80149fa:	6a1b      	ldr	r3, [r3, #32]
 80149fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014a00:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014a02:	69d3      	ldr	r3, [r2, #28]
 8014a04:	3301      	adds	r3, #1
 8014a06:	2000      	movs	r0, #0
 8014a08:	61d3      	str	r3, [r2, #28]
 8014a0a:	bd70      	pop	{r4, r5, r6, pc}
 8014a0c:	2001      	movs	r0, #1
 8014a0e:	bd70      	pop	{r4, r5, r6, pc}
 8014a10:	f240 3086 	movw	r0, #902	@ 0x386
 8014a14:	bd70      	pop	{r4, r5, r6, pc}
 8014a16:	200b      	movs	r0, #11
 8014a18:	4770      	bx	lr
 8014a1a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014a1e:	bd70      	pop	{r4, r5, r6, pc}
 8014a20:	200b      	movs	r0, #11
 8014a22:	bd70      	pop	{r4, r5, r6, pc}

08014a24 <rcl_wait_set_add_service>:
 8014a24:	b318      	cbz	r0, 8014a6e <rcl_wait_set_add_service+0x4a>
 8014a26:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014a28:	b570      	push	{r4, r5, r6, lr}
 8014a2a:	4604      	mov	r4, r0
 8014a2c:	b30b      	cbz	r3, 8014a72 <rcl_wait_set_add_service+0x4e>
 8014a2e:	b319      	cbz	r1, 8014a78 <rcl_wait_set_add_service+0x54>
 8014a30:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8014a32:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8014a34:	4285      	cmp	r5, r0
 8014a36:	d217      	bcs.n	8014a68 <rcl_wait_set_add_service+0x44>
 8014a38:	6a20      	ldr	r0, [r4, #32]
 8014a3a:	1c6e      	adds	r6, r5, #1
 8014a3c:	625e      	str	r6, [r3, #36]	@ 0x24
 8014a3e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014a42:	b102      	cbz	r2, 8014a46 <rcl_wait_set_add_service+0x22>
 8014a44:	6015      	str	r5, [r2, #0]
 8014a46:	4608      	mov	r0, r1
 8014a48:	f7ff f9c8 	bl	8013ddc <rcl_service_get_rmw_handle>
 8014a4c:	b150      	cbz	r0, 8014a64 <rcl_wait_set_add_service+0x40>
 8014a4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014a50:	6842      	ldr	r2, [r0, #4]
 8014a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a54:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014a58:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014a5a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8014a5c:	3301      	adds	r3, #1
 8014a5e:	2000      	movs	r0, #0
 8014a60:	6293      	str	r3, [r2, #40]	@ 0x28
 8014a62:	bd70      	pop	{r4, r5, r6, pc}
 8014a64:	2001      	movs	r0, #1
 8014a66:	bd70      	pop	{r4, r5, r6, pc}
 8014a68:	f240 3086 	movw	r0, #902	@ 0x386
 8014a6c:	bd70      	pop	{r4, r5, r6, pc}
 8014a6e:	200b      	movs	r0, #11
 8014a70:	4770      	bx	lr
 8014a72:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014a76:	bd70      	pop	{r4, r5, r6, pc}
 8014a78:	200b      	movs	r0, #11
 8014a7a:	bd70      	pop	{r4, r5, r6, pc}
 8014a7c:	0000      	movs	r0, r0
	...

08014a80 <rcl_wait>:
 8014a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a84:	ed2d 8b02 	vpush	{d8}
 8014a88:	b08d      	sub	sp, #52	@ 0x34
 8014a8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014a8e:	2800      	cmp	r0, #0
 8014a90:	f000 8143 	beq.w	8014d1a <rcl_wait+0x29a>
 8014a94:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014a96:	4605      	mov	r5, r0
 8014a98:	2e00      	cmp	r6, #0
 8014a9a:	f000 8112 	beq.w	8014cc2 <rcl_wait+0x242>
 8014a9e:	6843      	ldr	r3, [r0, #4]
 8014aa0:	b983      	cbnz	r3, 8014ac4 <rcl_wait+0x44>
 8014aa2:	68eb      	ldr	r3, [r5, #12]
 8014aa4:	b973      	cbnz	r3, 8014ac4 <rcl_wait+0x44>
 8014aa6:	696b      	ldr	r3, [r5, #20]
 8014aa8:	b963      	cbnz	r3, 8014ac4 <rcl_wait+0x44>
 8014aaa:	69eb      	ldr	r3, [r5, #28]
 8014aac:	b953      	cbnz	r3, 8014ac4 <rcl_wait+0x44>
 8014aae:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8014ab0:	b943      	cbnz	r3, 8014ac4 <rcl_wait+0x44>
 8014ab2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8014ab4:	b933      	cbnz	r3, 8014ac4 <rcl_wait+0x44>
 8014ab6:	f240 3085 	movw	r0, #901	@ 0x385
 8014aba:	b00d      	add	sp, #52	@ 0x34
 8014abc:	ecbd 8b02 	vpop	{d8}
 8014ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac4:	9b04      	ldr	r3, [sp, #16]
 8014ac6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8014ac8:	2b01      	cmp	r3, #1
 8014aca:	9b05      	ldr	r3, [sp, #20]
 8014acc:	f173 0300 	sbcs.w	r3, r3, #0
 8014ad0:	f2c0 80f0 	blt.w	8014cb4 <rcl_wait+0x234>
 8014ad4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8014ad8:	4643      	mov	r3, r8
 8014ada:	2a00      	cmp	r2, #0
 8014adc:	f000 8133 	beq.w	8014d46 <rcl_wait+0x2c6>
 8014ae0:	2400      	movs	r4, #0
 8014ae2:	4613      	mov	r3, r2
 8014ae4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8014d58 <rcl_wait+0x2d8>
 8014ae8:	46a2      	mov	sl, r4
 8014aea:	46a3      	mov	fp, r4
 8014aec:	f240 3921 	movw	r9, #801	@ 0x321
 8014af0:	4632      	mov	r2, r6
 8014af2:	e014      	b.n	8014b1e <rcl_wait+0x9e>
 8014af4:	2800      	cmp	r0, #0
 8014af6:	d1e0      	bne.n	8014aba <rcl_wait+0x3a>
 8014af8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014afc:	4542      	cmp	r2, r8
 8014afe:	eb73 0107 	sbcs.w	r1, r3, r7
 8014b02:	da03      	bge.n	8014b0c <rcl_wait+0x8c>
 8014b04:	4690      	mov	r8, r2
 8014b06:	461f      	mov	r7, r3
 8014b08:	f04f 0b01 	mov.w	fp, #1
 8014b0c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8014b0e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8014b10:	3401      	adds	r4, #1
 8014b12:	f14a 0a00 	adc.w	sl, sl, #0
 8014b16:	429c      	cmp	r4, r3
 8014b18:	f17a 0100 	sbcs.w	r1, sl, #0
 8014b1c:	d228      	bcs.n	8014b70 <rcl_wait+0xf0>
 8014b1e:	6928      	ldr	r0, [r5, #16]
 8014b20:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014b24:	a908      	add	r1, sp, #32
 8014b26:	00a6      	lsls	r6, r4, #2
 8014b28:	2800      	cmp	r0, #0
 8014b2a:	d0f1      	beq.n	8014b10 <rcl_wait+0x90>
 8014b2c:	68eb      	ldr	r3, [r5, #12]
 8014b2e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8014b32:	4423      	add	r3, r4
 8014b34:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8014b38:	f1be 0f00 	cmp.w	lr, #0
 8014b3c:	d006      	beq.n	8014b4c <rcl_wait+0xcc>
 8014b3e:	6913      	ldr	r3, [r2, #16]
 8014b40:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8014b44:	3301      	adds	r3, #1
 8014b46:	6113      	str	r3, [r2, #16]
 8014b48:	692b      	ldr	r3, [r5, #16]
 8014b4a:	5998      	ldr	r0, [r3, r6]
 8014b4c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014b50:	f7f6 ff70 	bl	800ba34 <rcl_timer_get_time_until_next_call>
 8014b54:	4548      	cmp	r0, r9
 8014b56:	d1cd      	bne.n	8014af4 <rcl_wait+0x74>
 8014b58:	692b      	ldr	r3, [r5, #16]
 8014b5a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8014b5c:	2100      	movs	r1, #0
 8014b5e:	5199      	str	r1, [r3, r6]
 8014b60:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8014b62:	3401      	adds	r4, #1
 8014b64:	f14a 0a00 	adc.w	sl, sl, #0
 8014b68:	429c      	cmp	r4, r3
 8014b6a:	f17a 0100 	sbcs.w	r1, sl, #0
 8014b6e:	d3d6      	bcc.n	8014b1e <rcl_wait+0x9e>
 8014b70:	4616      	mov	r6, r2
 8014b72:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014b76:	4313      	orrs	r3, r2
 8014b78:	46d9      	mov	r9, fp
 8014b7a:	f040 80a9 	bne.w	8014cd0 <rcl_wait+0x250>
 8014b7e:	2300      	movs	r3, #0
 8014b80:	2200      	movs	r2, #0
 8014b82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014b86:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8014b8a:	ab08      	add	r3, sp, #32
 8014b8c:	9302      	str	r3, [sp, #8]
 8014b8e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8014b90:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8014b94:	e9cd 3200 	strd	r3, r2, [sp]
 8014b98:	f106 0110 	add.w	r1, r6, #16
 8014b9c:	f106 031c 	add.w	r3, r6, #28
 8014ba0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8014ba4:	1d30      	adds	r0, r6, #4
 8014ba6:	f001 fc13 	bl	80163d0 <rmw_wait>
 8014baa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014bac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014bae:	4680      	mov	r8, r0
 8014bb0:	b1ca      	cbz	r2, 8014be6 <rcl_wait+0x166>
 8014bb2:	2400      	movs	r4, #0
 8014bb4:	4627      	mov	r7, r4
 8014bb6:	692a      	ldr	r2, [r5, #16]
 8014bb8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8014bbc:	f10d 011f 	add.w	r1, sp, #31
 8014bc0:	00a6      	lsls	r6, r4, #2
 8014bc2:	b160      	cbz	r0, 8014bde <rcl_wait+0x15e>
 8014bc4:	f88d 701f 	strb.w	r7, [sp, #31]
 8014bc8:	f7f6 fefa 	bl	800b9c0 <rcl_timer_is_ready>
 8014bcc:	2800      	cmp	r0, #0
 8014bce:	f47f af74 	bne.w	8014aba <rcl_wait+0x3a>
 8014bd2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8014bd6:	b90b      	cbnz	r3, 8014bdc <rcl_wait+0x15c>
 8014bd8:	692a      	ldr	r2, [r5, #16]
 8014bda:	5193      	str	r3, [r2, r6]
 8014bdc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014be0:	3401      	adds	r4, #1
 8014be2:	42a2      	cmp	r2, r4
 8014be4:	d8e7      	bhi.n	8014bb6 <rcl_wait+0x136>
 8014be6:	f038 0002 	bics.w	r0, r8, #2
 8014bea:	f040 8090 	bne.w	8014d0e <rcl_wait+0x28e>
 8014bee:	686e      	ldr	r6, [r5, #4]
 8014bf0:	4602      	mov	r2, r0
 8014bf2:	b91e      	cbnz	r6, 8014bfc <rcl_wait+0x17c>
 8014bf4:	e00d      	b.n	8014c12 <rcl_wait+0x192>
 8014bf6:	3201      	adds	r2, #1
 8014bf8:	42b2      	cmp	r2, r6
 8014bfa:	d00a      	beq.n	8014c12 <rcl_wait+0x192>
 8014bfc:	6899      	ldr	r1, [r3, #8]
 8014bfe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014c02:	2900      	cmp	r1, #0
 8014c04:	d1f7      	bne.n	8014bf6 <rcl_wait+0x176>
 8014c06:	682c      	ldr	r4, [r5, #0]
 8014c08:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014c0c:	3201      	adds	r2, #1
 8014c0e:	42b2      	cmp	r2, r6
 8014c10:	d1f4      	bne.n	8014bfc <rcl_wait+0x17c>
 8014c12:	68ee      	ldr	r6, [r5, #12]
 8014c14:	2200      	movs	r2, #0
 8014c16:	b91e      	cbnz	r6, 8014c20 <rcl_wait+0x1a0>
 8014c18:	e00d      	b.n	8014c36 <rcl_wait+0x1b6>
 8014c1a:	3201      	adds	r2, #1
 8014c1c:	42b2      	cmp	r2, r6
 8014c1e:	d00a      	beq.n	8014c36 <rcl_wait+0x1b6>
 8014c20:	6959      	ldr	r1, [r3, #20]
 8014c22:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014c26:	2900      	cmp	r1, #0
 8014c28:	d1f7      	bne.n	8014c1a <rcl_wait+0x19a>
 8014c2a:	68ac      	ldr	r4, [r5, #8]
 8014c2c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014c30:	3201      	adds	r2, #1
 8014c32:	42b2      	cmp	r2, r6
 8014c34:	d1f4      	bne.n	8014c20 <rcl_wait+0x1a0>
 8014c36:	69ee      	ldr	r6, [r5, #28]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	b91e      	cbnz	r6, 8014c44 <rcl_wait+0x1c4>
 8014c3c:	e00d      	b.n	8014c5a <rcl_wait+0x1da>
 8014c3e:	3201      	adds	r2, #1
 8014c40:	42b2      	cmp	r2, r6
 8014c42:	d00a      	beq.n	8014c5a <rcl_wait+0x1da>
 8014c44:	6a19      	ldr	r1, [r3, #32]
 8014c46:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014c4a:	2900      	cmp	r1, #0
 8014c4c:	d1f7      	bne.n	8014c3e <rcl_wait+0x1be>
 8014c4e:	69ac      	ldr	r4, [r5, #24]
 8014c50:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014c54:	3201      	adds	r2, #1
 8014c56:	42b2      	cmp	r2, r6
 8014c58:	d1f4      	bne.n	8014c44 <rcl_wait+0x1c4>
 8014c5a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	b91e      	cbnz	r6, 8014c68 <rcl_wait+0x1e8>
 8014c60:	e00d      	b.n	8014c7e <rcl_wait+0x1fe>
 8014c62:	3201      	adds	r2, #1
 8014c64:	4296      	cmp	r6, r2
 8014c66:	d00a      	beq.n	8014c7e <rcl_wait+0x1fe>
 8014c68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014c6a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014c6e:	2900      	cmp	r1, #0
 8014c70:	d1f7      	bne.n	8014c62 <rcl_wait+0x1e2>
 8014c72:	6a2c      	ldr	r4, [r5, #32]
 8014c74:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014c78:	3201      	adds	r2, #1
 8014c7a:	4296      	cmp	r6, r2
 8014c7c:	d1f4      	bne.n	8014c68 <rcl_wait+0x1e8>
 8014c7e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8014c80:	2200      	movs	r2, #0
 8014c82:	b91e      	cbnz	r6, 8014c8c <rcl_wait+0x20c>
 8014c84:	e00d      	b.n	8014ca2 <rcl_wait+0x222>
 8014c86:	3201      	adds	r2, #1
 8014c88:	42b2      	cmp	r2, r6
 8014c8a:	d00a      	beq.n	8014ca2 <rcl_wait+0x222>
 8014c8c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8014c8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014c92:	2900      	cmp	r1, #0
 8014c94:	d1f7      	bne.n	8014c86 <rcl_wait+0x206>
 8014c96:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8014c98:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014c9c:	3201      	adds	r2, #1
 8014c9e:	42b2      	cmp	r2, r6
 8014ca0:	d1f4      	bne.n	8014c8c <rcl_wait+0x20c>
 8014ca2:	f1b8 0f02 	cmp.w	r8, #2
 8014ca6:	f47f af08 	bne.w	8014aba <rcl_wait+0x3a>
 8014caa:	464b      	mov	r3, r9
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	bf08      	it	eq
 8014cb0:	2002      	moveq	r0, #2
 8014cb2:	e702      	b.n	8014aba <rcl_wait+0x3a>
 8014cb4:	2a00      	cmp	r2, #0
 8014cb6:	d03a      	beq.n	8014d2e <rcl_wait+0x2ae>
 8014cb8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014cbc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014cc0:	e70e      	b.n	8014ae0 <rcl_wait+0x60>
 8014cc2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014cc6:	b00d      	add	sp, #52	@ 0x34
 8014cc8:	ecbd 8b02 	vpop	{d8}
 8014ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cd0:	9b04      	ldr	r3, [sp, #16]
 8014cd2:	2b01      	cmp	r3, #1
 8014cd4:	9b05      	ldr	r3, [sp, #20]
 8014cd6:	f173 0300 	sbcs.w	r3, r3, #0
 8014cda:	db24      	blt.n	8014d26 <rcl_wait+0x2a6>
 8014cdc:	2f00      	cmp	r7, #0
 8014cde:	bfbc      	itt	lt
 8014ce0:	f04f 0800 	movlt.w	r8, #0
 8014ce4:	4647      	movlt	r7, r8
 8014ce6:	a31e      	add	r3, pc, #120	@ (adr r3, 8014d60 <rcl_wait+0x2e0>)
 8014ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cec:	4640      	mov	r0, r8
 8014cee:	4639      	mov	r1, r7
 8014cf0:	f7eb ff14 	bl	8000b1c <__aeabi_ldivmod>
 8014cf4:	a31a      	add	r3, pc, #104	@ (adr r3, 8014d60 <rcl_wait+0x2e0>)
 8014cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cfa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014cfe:	4640      	mov	r0, r8
 8014d00:	4639      	mov	r1, r7
 8014d02:	f7eb ff0b 	bl	8000b1c <__aeabi_ldivmod>
 8014d06:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8014d0a:	ab08      	add	r3, sp, #32
 8014d0c:	e73e      	b.n	8014b8c <rcl_wait+0x10c>
 8014d0e:	2001      	movs	r0, #1
 8014d10:	b00d      	add	sp, #52	@ 0x34
 8014d12:	ecbd 8b02 	vpop	{d8}
 8014d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d1a:	200b      	movs	r0, #11
 8014d1c:	b00d      	add	sp, #52	@ 0x34
 8014d1e:	ecbd 8b02 	vpop	{d8}
 8014d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d26:	465b      	mov	r3, fp
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d1d7      	bne.n	8014cdc <rcl_wait+0x25c>
 8014d2c:	e72e      	b.n	8014b8c <rcl_wait+0x10c>
 8014d2e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014d32:	430b      	orrs	r3, r1
 8014d34:	bf08      	it	eq
 8014d36:	4691      	moveq	r9, r2
 8014d38:	f43f af21 	beq.w	8014b7e <rcl_wait+0xfe>
 8014d3c:	9b04      	ldr	r3, [sp, #16]
 8014d3e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014d42:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014d46:	2b01      	cmp	r3, #1
 8014d48:	9b05      	ldr	r3, [sp, #20]
 8014d4a:	f173 0300 	sbcs.w	r3, r3, #0
 8014d4e:	f04f 0300 	mov.w	r3, #0
 8014d52:	4699      	mov	r9, r3
 8014d54:	dac2      	bge.n	8014cdc <rcl_wait+0x25c>
 8014d56:	e719      	b.n	8014b8c <rcl_wait+0x10c>
 8014d58:	ffffffff 	.word	0xffffffff
 8014d5c:	7fffffff 	.word	0x7fffffff
 8014d60:	3b9aca00 	.word	0x3b9aca00
 8014d64:	00000000 	.word	0x00000000

08014d68 <rcl_action_take_goal_response>:
 8014d68:	2800      	cmp	r0, #0
 8014d6a:	d039      	beq.n	8014de0 <rcl_action_take_goal_response+0x78>
 8014d6c:	b570      	push	{r4, r5, r6, lr}
 8014d6e:	4604      	mov	r4, r0
 8014d70:	6800      	ldr	r0, [r0, #0]
 8014d72:	b380      	cbz	r0, 8014dd6 <rcl_action_take_goal_response+0x6e>
 8014d74:	460d      	mov	r5, r1
 8014d76:	4616      	mov	r6, r2
 8014d78:	f7fe fd2e 	bl	80137d8 <rcl_client_is_valid>
 8014d7c:	b330      	cbz	r0, 8014dcc <rcl_action_take_goal_response+0x64>
 8014d7e:	6820      	ldr	r0, [r4, #0]
 8014d80:	3004      	adds	r0, #4
 8014d82:	f7fe fd29 	bl	80137d8 <rcl_client_is_valid>
 8014d86:	b308      	cbz	r0, 8014dcc <rcl_action_take_goal_response+0x64>
 8014d88:	6820      	ldr	r0, [r4, #0]
 8014d8a:	3008      	adds	r0, #8
 8014d8c:	f7fe fd24 	bl	80137d8 <rcl_client_is_valid>
 8014d90:	b1e0      	cbz	r0, 8014dcc <rcl_action_take_goal_response+0x64>
 8014d92:	6820      	ldr	r0, [r4, #0]
 8014d94:	300c      	adds	r0, #12
 8014d96:	f7f6 fc05 	bl	800b5a4 <rcl_subscription_is_valid>
 8014d9a:	b1b8      	cbz	r0, 8014dcc <rcl_action_take_goal_response+0x64>
 8014d9c:	6820      	ldr	r0, [r4, #0]
 8014d9e:	3010      	adds	r0, #16
 8014da0:	f7f6 fc00 	bl	800b5a4 <rcl_subscription_is_valid>
 8014da4:	b190      	cbz	r0, 8014dcc <rcl_action_take_goal_response+0x64>
 8014da6:	b1cd      	cbz	r5, 8014ddc <rcl_action_take_goal_response+0x74>
 8014da8:	b1c6      	cbz	r6, 8014ddc <rcl_action_take_goal_response+0x74>
 8014daa:	6820      	ldr	r0, [r4, #0]
 8014dac:	4632      	mov	r2, r6
 8014dae:	4629      	mov	r1, r5
 8014db0:	f7fe fcca 	bl	8013748 <rcl_take_response>
 8014db4:	b148      	cbz	r0, 8014dca <rcl_action_take_goal_response+0x62>
 8014db6:	280a      	cmp	r0, #10
 8014db8:	d007      	beq.n	8014dca <rcl_action_take_goal_response+0x62>
 8014dba:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014dbe:	f640 0337 	movw	r3, #2103	@ 0x837
 8014dc2:	4290      	cmp	r0, r2
 8014dc4:	bf0c      	ite	eq
 8014dc6:	4618      	moveq	r0, r3
 8014dc8:	2001      	movne	r0, #1
 8014dca:	bd70      	pop	{r4, r5, r6, pc}
 8014dcc:	f7f7 ff34 	bl	800cc38 <rcutils_reset_error>
 8014dd0:	f640 0036 	movw	r0, #2102	@ 0x836
 8014dd4:	bd70      	pop	{r4, r5, r6, pc}
 8014dd6:	f640 0036 	movw	r0, #2102	@ 0x836
 8014dda:	bd70      	pop	{r4, r5, r6, pc}
 8014ddc:	200b      	movs	r0, #11
 8014dde:	bd70      	pop	{r4, r5, r6, pc}
 8014de0:	f640 0036 	movw	r0, #2102	@ 0x836
 8014de4:	4770      	bx	lr
 8014de6:	bf00      	nop

08014de8 <rcl_action_send_result_request>:
 8014de8:	b390      	cbz	r0, 8014e50 <rcl_action_send_result_request+0x68>
 8014dea:	b570      	push	{r4, r5, r6, lr}
 8014dec:	4604      	mov	r4, r0
 8014dee:	6800      	ldr	r0, [r0, #0]
 8014df0:	b348      	cbz	r0, 8014e46 <rcl_action_send_result_request+0x5e>
 8014df2:	460d      	mov	r5, r1
 8014df4:	4616      	mov	r6, r2
 8014df6:	f7fe fcef 	bl	80137d8 <rcl_client_is_valid>
 8014dfa:	b1f8      	cbz	r0, 8014e3c <rcl_action_send_result_request+0x54>
 8014dfc:	6820      	ldr	r0, [r4, #0]
 8014dfe:	3004      	adds	r0, #4
 8014e00:	f7fe fcea 	bl	80137d8 <rcl_client_is_valid>
 8014e04:	b1d0      	cbz	r0, 8014e3c <rcl_action_send_result_request+0x54>
 8014e06:	6820      	ldr	r0, [r4, #0]
 8014e08:	3008      	adds	r0, #8
 8014e0a:	f7fe fce5 	bl	80137d8 <rcl_client_is_valid>
 8014e0e:	b1a8      	cbz	r0, 8014e3c <rcl_action_send_result_request+0x54>
 8014e10:	6820      	ldr	r0, [r4, #0]
 8014e12:	300c      	adds	r0, #12
 8014e14:	f7f6 fbc6 	bl	800b5a4 <rcl_subscription_is_valid>
 8014e18:	b180      	cbz	r0, 8014e3c <rcl_action_send_result_request+0x54>
 8014e1a:	6820      	ldr	r0, [r4, #0]
 8014e1c:	3010      	adds	r0, #16
 8014e1e:	f7f6 fbc1 	bl	800b5a4 <rcl_subscription_is_valid>
 8014e22:	b158      	cbz	r0, 8014e3c <rcl_action_send_result_request+0x54>
 8014e24:	b195      	cbz	r5, 8014e4c <rcl_action_send_result_request+0x64>
 8014e26:	b18e      	cbz	r6, 8014e4c <rcl_action_send_result_request+0x64>
 8014e28:	6820      	ldr	r0, [r4, #0]
 8014e2a:	4632      	mov	r2, r6
 8014e2c:	4629      	mov	r1, r5
 8014e2e:	3008      	adds	r0, #8
 8014e30:	f7fe fc54 	bl	80136dc <rcl_send_request>
 8014e34:	3800      	subs	r0, #0
 8014e36:	bf18      	it	ne
 8014e38:	2001      	movne	r0, #1
 8014e3a:	bd70      	pop	{r4, r5, r6, pc}
 8014e3c:	f7f7 fefc 	bl	800cc38 <rcutils_reset_error>
 8014e40:	f640 0036 	movw	r0, #2102	@ 0x836
 8014e44:	bd70      	pop	{r4, r5, r6, pc}
 8014e46:	f640 0036 	movw	r0, #2102	@ 0x836
 8014e4a:	bd70      	pop	{r4, r5, r6, pc}
 8014e4c:	200b      	movs	r0, #11
 8014e4e:	bd70      	pop	{r4, r5, r6, pc}
 8014e50:	f640 0036 	movw	r0, #2102	@ 0x836
 8014e54:	4770      	bx	lr
 8014e56:	bf00      	nop

08014e58 <rcl_action_take_result_response>:
 8014e58:	2800      	cmp	r0, #0
 8014e5a:	d03a      	beq.n	8014ed2 <rcl_action_take_result_response+0x7a>
 8014e5c:	b570      	push	{r4, r5, r6, lr}
 8014e5e:	4604      	mov	r4, r0
 8014e60:	6800      	ldr	r0, [r0, #0]
 8014e62:	b388      	cbz	r0, 8014ec8 <rcl_action_take_result_response+0x70>
 8014e64:	460d      	mov	r5, r1
 8014e66:	4616      	mov	r6, r2
 8014e68:	f7fe fcb6 	bl	80137d8 <rcl_client_is_valid>
 8014e6c:	b338      	cbz	r0, 8014ebe <rcl_action_take_result_response+0x66>
 8014e6e:	6820      	ldr	r0, [r4, #0]
 8014e70:	3004      	adds	r0, #4
 8014e72:	f7fe fcb1 	bl	80137d8 <rcl_client_is_valid>
 8014e76:	b310      	cbz	r0, 8014ebe <rcl_action_take_result_response+0x66>
 8014e78:	6820      	ldr	r0, [r4, #0]
 8014e7a:	3008      	adds	r0, #8
 8014e7c:	f7fe fcac 	bl	80137d8 <rcl_client_is_valid>
 8014e80:	b1e8      	cbz	r0, 8014ebe <rcl_action_take_result_response+0x66>
 8014e82:	6820      	ldr	r0, [r4, #0]
 8014e84:	300c      	adds	r0, #12
 8014e86:	f7f6 fb8d 	bl	800b5a4 <rcl_subscription_is_valid>
 8014e8a:	b1c0      	cbz	r0, 8014ebe <rcl_action_take_result_response+0x66>
 8014e8c:	6820      	ldr	r0, [r4, #0]
 8014e8e:	3010      	adds	r0, #16
 8014e90:	f7f6 fb88 	bl	800b5a4 <rcl_subscription_is_valid>
 8014e94:	b198      	cbz	r0, 8014ebe <rcl_action_take_result_response+0x66>
 8014e96:	b1d5      	cbz	r5, 8014ece <rcl_action_take_result_response+0x76>
 8014e98:	b1ce      	cbz	r6, 8014ece <rcl_action_take_result_response+0x76>
 8014e9a:	6820      	ldr	r0, [r4, #0]
 8014e9c:	4632      	mov	r2, r6
 8014e9e:	4629      	mov	r1, r5
 8014ea0:	3008      	adds	r0, #8
 8014ea2:	f7fe fc51 	bl	8013748 <rcl_take_response>
 8014ea6:	b148      	cbz	r0, 8014ebc <rcl_action_take_result_response+0x64>
 8014ea8:	280a      	cmp	r0, #10
 8014eaa:	d007      	beq.n	8014ebc <rcl_action_take_result_response+0x64>
 8014eac:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014eb0:	f640 0337 	movw	r3, #2103	@ 0x837
 8014eb4:	4290      	cmp	r0, r2
 8014eb6:	bf0c      	ite	eq
 8014eb8:	4618      	moveq	r0, r3
 8014eba:	2001      	movne	r0, #1
 8014ebc:	bd70      	pop	{r4, r5, r6, pc}
 8014ebe:	f7f7 febb 	bl	800cc38 <rcutils_reset_error>
 8014ec2:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ec6:	bd70      	pop	{r4, r5, r6, pc}
 8014ec8:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ecc:	bd70      	pop	{r4, r5, r6, pc}
 8014ece:	200b      	movs	r0, #11
 8014ed0:	bd70      	pop	{r4, r5, r6, pc}
 8014ed2:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ed6:	4770      	bx	lr

08014ed8 <rcl_action_take_cancel_response>:
 8014ed8:	2800      	cmp	r0, #0
 8014eda:	d03a      	beq.n	8014f52 <rcl_action_take_cancel_response+0x7a>
 8014edc:	b570      	push	{r4, r5, r6, lr}
 8014ede:	4604      	mov	r4, r0
 8014ee0:	6800      	ldr	r0, [r0, #0]
 8014ee2:	b388      	cbz	r0, 8014f48 <rcl_action_take_cancel_response+0x70>
 8014ee4:	460d      	mov	r5, r1
 8014ee6:	4616      	mov	r6, r2
 8014ee8:	f7fe fc76 	bl	80137d8 <rcl_client_is_valid>
 8014eec:	b338      	cbz	r0, 8014f3e <rcl_action_take_cancel_response+0x66>
 8014eee:	6820      	ldr	r0, [r4, #0]
 8014ef0:	3004      	adds	r0, #4
 8014ef2:	f7fe fc71 	bl	80137d8 <rcl_client_is_valid>
 8014ef6:	b310      	cbz	r0, 8014f3e <rcl_action_take_cancel_response+0x66>
 8014ef8:	6820      	ldr	r0, [r4, #0]
 8014efa:	3008      	adds	r0, #8
 8014efc:	f7fe fc6c 	bl	80137d8 <rcl_client_is_valid>
 8014f00:	b1e8      	cbz	r0, 8014f3e <rcl_action_take_cancel_response+0x66>
 8014f02:	6820      	ldr	r0, [r4, #0]
 8014f04:	300c      	adds	r0, #12
 8014f06:	f7f6 fb4d 	bl	800b5a4 <rcl_subscription_is_valid>
 8014f0a:	b1c0      	cbz	r0, 8014f3e <rcl_action_take_cancel_response+0x66>
 8014f0c:	6820      	ldr	r0, [r4, #0]
 8014f0e:	3010      	adds	r0, #16
 8014f10:	f7f6 fb48 	bl	800b5a4 <rcl_subscription_is_valid>
 8014f14:	b198      	cbz	r0, 8014f3e <rcl_action_take_cancel_response+0x66>
 8014f16:	b1d5      	cbz	r5, 8014f4e <rcl_action_take_cancel_response+0x76>
 8014f18:	b1ce      	cbz	r6, 8014f4e <rcl_action_take_cancel_response+0x76>
 8014f1a:	6820      	ldr	r0, [r4, #0]
 8014f1c:	4632      	mov	r2, r6
 8014f1e:	4629      	mov	r1, r5
 8014f20:	3004      	adds	r0, #4
 8014f22:	f7fe fc11 	bl	8013748 <rcl_take_response>
 8014f26:	b148      	cbz	r0, 8014f3c <rcl_action_take_cancel_response+0x64>
 8014f28:	280a      	cmp	r0, #10
 8014f2a:	d007      	beq.n	8014f3c <rcl_action_take_cancel_response+0x64>
 8014f2c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014f30:	f640 0337 	movw	r3, #2103	@ 0x837
 8014f34:	4290      	cmp	r0, r2
 8014f36:	bf0c      	ite	eq
 8014f38:	4618      	moveq	r0, r3
 8014f3a:	2001      	movne	r0, #1
 8014f3c:	bd70      	pop	{r4, r5, r6, pc}
 8014f3e:	f7f7 fe7b 	bl	800cc38 <rcutils_reset_error>
 8014f42:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f46:	bd70      	pop	{r4, r5, r6, pc}
 8014f48:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f4c:	bd70      	pop	{r4, r5, r6, pc}
 8014f4e:	200b      	movs	r0, #11
 8014f50:	bd70      	pop	{r4, r5, r6, pc}
 8014f52:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f56:	4770      	bx	lr

08014f58 <rcl_action_take_feedback>:
 8014f58:	2800      	cmp	r0, #0
 8014f5a:	d038      	beq.n	8014fce <rcl_action_take_feedback+0x76>
 8014f5c:	b530      	push	{r4, r5, lr}
 8014f5e:	4604      	mov	r4, r0
 8014f60:	6800      	ldr	r0, [r0, #0]
 8014f62:	b091      	sub	sp, #68	@ 0x44
 8014f64:	b378      	cbz	r0, 8014fc6 <rcl_action_take_feedback+0x6e>
 8014f66:	460d      	mov	r5, r1
 8014f68:	f7fe fc36 	bl	80137d8 <rcl_client_is_valid>
 8014f6c:	b328      	cbz	r0, 8014fba <rcl_action_take_feedback+0x62>
 8014f6e:	6820      	ldr	r0, [r4, #0]
 8014f70:	3004      	adds	r0, #4
 8014f72:	f7fe fc31 	bl	80137d8 <rcl_client_is_valid>
 8014f76:	b300      	cbz	r0, 8014fba <rcl_action_take_feedback+0x62>
 8014f78:	6820      	ldr	r0, [r4, #0]
 8014f7a:	3008      	adds	r0, #8
 8014f7c:	f7fe fc2c 	bl	80137d8 <rcl_client_is_valid>
 8014f80:	b1d8      	cbz	r0, 8014fba <rcl_action_take_feedback+0x62>
 8014f82:	6820      	ldr	r0, [r4, #0]
 8014f84:	300c      	adds	r0, #12
 8014f86:	f7f6 fb0d 	bl	800b5a4 <rcl_subscription_is_valid>
 8014f8a:	b1b0      	cbz	r0, 8014fba <rcl_action_take_feedback+0x62>
 8014f8c:	6820      	ldr	r0, [r4, #0]
 8014f8e:	3010      	adds	r0, #16
 8014f90:	f7f6 fb08 	bl	800b5a4 <rcl_subscription_is_valid>
 8014f94:	b188      	cbz	r0, 8014fba <rcl_action_take_feedback+0x62>
 8014f96:	b1ed      	cbz	r5, 8014fd4 <rcl_action_take_feedback+0x7c>
 8014f98:	6820      	ldr	r0, [r4, #0]
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	466a      	mov	r2, sp
 8014f9e:	4629      	mov	r1, r5
 8014fa0:	300c      	adds	r0, #12
 8014fa2:	f7f6 faa1 	bl	800b4e8 <rcl_take>
 8014fa6:	b160      	cbz	r0, 8014fc2 <rcl_action_take_feedback+0x6a>
 8014fa8:	f240 1391 	movw	r3, #401	@ 0x191
 8014fac:	4298      	cmp	r0, r3
 8014fae:	d014      	beq.n	8014fda <rcl_action_take_feedback+0x82>
 8014fb0:	280a      	cmp	r0, #10
 8014fb2:	bf18      	it	ne
 8014fb4:	2001      	movne	r0, #1
 8014fb6:	b011      	add	sp, #68	@ 0x44
 8014fb8:	bd30      	pop	{r4, r5, pc}
 8014fba:	f7f7 fe3d 	bl	800cc38 <rcutils_reset_error>
 8014fbe:	f640 0036 	movw	r0, #2102	@ 0x836
 8014fc2:	b011      	add	sp, #68	@ 0x44
 8014fc4:	bd30      	pop	{r4, r5, pc}
 8014fc6:	f640 0036 	movw	r0, #2102	@ 0x836
 8014fca:	b011      	add	sp, #68	@ 0x44
 8014fcc:	bd30      	pop	{r4, r5, pc}
 8014fce:	f640 0036 	movw	r0, #2102	@ 0x836
 8014fd2:	4770      	bx	lr
 8014fd4:	200b      	movs	r0, #11
 8014fd6:	b011      	add	sp, #68	@ 0x44
 8014fd8:	bd30      	pop	{r4, r5, pc}
 8014fda:	f640 0037 	movw	r0, #2103	@ 0x837
 8014fde:	e7f0      	b.n	8014fc2 <rcl_action_take_feedback+0x6a>

08014fe0 <rcl_action_wait_set_add_action_client>:
 8014fe0:	2800      	cmp	r0, #0
 8014fe2:	d048      	beq.n	8015076 <rcl_action_wait_set_add_action_client+0x96>
 8014fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fe6:	460c      	mov	r4, r1
 8014fe8:	2900      	cmp	r1, #0
 8014fea:	d03c      	beq.n	8015066 <rcl_action_wait_set_add_action_client+0x86>
 8014fec:	4605      	mov	r5, r0
 8014fee:	6808      	ldr	r0, [r1, #0]
 8014ff0:	2800      	cmp	r0, #0
 8014ff2:	d038      	beq.n	8015066 <rcl_action_wait_set_add_action_client+0x86>
 8014ff4:	4617      	mov	r7, r2
 8014ff6:	461e      	mov	r6, r3
 8014ff8:	f7fe fbee 	bl	80137d8 <rcl_client_is_valid>
 8014ffc:	b3b0      	cbz	r0, 801506c <rcl_action_wait_set_add_action_client+0x8c>
 8014ffe:	6820      	ldr	r0, [r4, #0]
 8015000:	3004      	adds	r0, #4
 8015002:	f7fe fbe9 	bl	80137d8 <rcl_client_is_valid>
 8015006:	b388      	cbz	r0, 801506c <rcl_action_wait_set_add_action_client+0x8c>
 8015008:	6820      	ldr	r0, [r4, #0]
 801500a:	3008      	adds	r0, #8
 801500c:	f7fe fbe4 	bl	80137d8 <rcl_client_is_valid>
 8015010:	b360      	cbz	r0, 801506c <rcl_action_wait_set_add_action_client+0x8c>
 8015012:	6820      	ldr	r0, [r4, #0]
 8015014:	300c      	adds	r0, #12
 8015016:	f7f6 fac5 	bl	800b5a4 <rcl_subscription_is_valid>
 801501a:	b338      	cbz	r0, 801506c <rcl_action_wait_set_add_action_client+0x8c>
 801501c:	6820      	ldr	r0, [r4, #0]
 801501e:	3010      	adds	r0, #16
 8015020:	f7f6 fac0 	bl	800b5a4 <rcl_subscription_is_valid>
 8015024:	b310      	cbz	r0, 801506c <rcl_action_wait_set_add_action_client+0x8c>
 8015026:	6821      	ldr	r1, [r4, #0]
 8015028:	4628      	mov	r0, r5
 801502a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801502e:	f7ff fccd 	bl	80149cc <rcl_wait_set_add_client>
 8015032:	b9b8      	cbnz	r0, 8015064 <rcl_action_wait_set_add_action_client+0x84>
 8015034:	6821      	ldr	r1, [r4, #0]
 8015036:	4628      	mov	r0, r5
 8015038:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801503c:	3104      	adds	r1, #4
 801503e:	f7ff fcc5 	bl	80149cc <rcl_wait_set_add_client>
 8015042:	b978      	cbnz	r0, 8015064 <rcl_action_wait_set_add_action_client+0x84>
 8015044:	6821      	ldr	r1, [r4, #0]
 8015046:	4628      	mov	r0, r5
 8015048:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801504c:	3108      	adds	r1, #8
 801504e:	f7ff fcbd 	bl	80149cc <rcl_wait_set_add_client>
 8015052:	b938      	cbnz	r0, 8015064 <rcl_action_wait_set_add_action_client+0x84>
 8015054:	6821      	ldr	r1, [r4, #0]
 8015056:	4628      	mov	r0, r5
 8015058:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801505c:	310c      	adds	r1, #12
 801505e:	f7ff f96d 	bl	801433c <rcl_wait_set_add_subscription>
 8015062:	b158      	cbz	r0, 801507c <rcl_action_wait_set_add_action_client+0x9c>
 8015064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015066:	f640 0036 	movw	r0, #2102	@ 0x836
 801506a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801506c:	f7f7 fde4 	bl	800cc38 <rcutils_reset_error>
 8015070:	f640 0036 	movw	r0, #2102	@ 0x836
 8015074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015076:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801507a:	4770      	bx	lr
 801507c:	6821      	ldr	r1, [r4, #0]
 801507e:	4628      	mov	r0, r5
 8015080:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8015084:	3110      	adds	r1, #16
 8015086:	f7ff f959 	bl	801433c <rcl_wait_set_add_subscription>
 801508a:	2800      	cmp	r0, #0
 801508c:	d1ea      	bne.n	8015064 <rcl_action_wait_set_add_action_client+0x84>
 801508e:	b11f      	cbz	r7, 8015098 <rcl_action_wait_set_add_action_client+0xb8>
 8015090:	6823      	ldr	r3, [r4, #0]
 8015092:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8015096:	603b      	str	r3, [r7, #0]
 8015098:	2e00      	cmp	r6, #0
 801509a:	d0e3      	beq.n	8015064 <rcl_action_wait_set_add_action_client+0x84>
 801509c:	6823      	ldr	r3, [r4, #0]
 801509e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80150a2:	6033      	str	r3, [r6, #0]
 80150a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150a6:	bf00      	nop

080150a8 <rcl_action_client_wait_set_get_entities_ready>:
 80150a8:	2800      	cmp	r0, #0
 80150aa:	f000 808d 	beq.w	80151c8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80150ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150b2:	460c      	mov	r4, r1
 80150b4:	2900      	cmp	r1, #0
 80150b6:	d077      	beq.n	80151a8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80150b8:	4605      	mov	r5, r0
 80150ba:	6808      	ldr	r0, [r1, #0]
 80150bc:	2800      	cmp	r0, #0
 80150be:	d073      	beq.n	80151a8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80150c0:	4616      	mov	r6, r2
 80150c2:	461f      	mov	r7, r3
 80150c4:	f7fe fb88 	bl	80137d8 <rcl_client_is_valid>
 80150c8:	2800      	cmp	r0, #0
 80150ca:	d071      	beq.n	80151b0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80150cc:	6820      	ldr	r0, [r4, #0]
 80150ce:	3004      	adds	r0, #4
 80150d0:	f7fe fb82 	bl	80137d8 <rcl_client_is_valid>
 80150d4:	2800      	cmp	r0, #0
 80150d6:	d06b      	beq.n	80151b0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80150d8:	6820      	ldr	r0, [r4, #0]
 80150da:	3008      	adds	r0, #8
 80150dc:	f7fe fb7c 	bl	80137d8 <rcl_client_is_valid>
 80150e0:	2800      	cmp	r0, #0
 80150e2:	d065      	beq.n	80151b0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80150e4:	6820      	ldr	r0, [r4, #0]
 80150e6:	300c      	adds	r0, #12
 80150e8:	f7f6 fa5c 	bl	800b5a4 <rcl_subscription_is_valid>
 80150ec:	2800      	cmp	r0, #0
 80150ee:	d05f      	beq.n	80151b0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80150f0:	6820      	ldr	r0, [r4, #0]
 80150f2:	3010      	adds	r0, #16
 80150f4:	f7f6 fa56 	bl	800b5a4 <rcl_subscription_is_valid>
 80150f8:	2800      	cmp	r0, #0
 80150fa:	d059      	beq.n	80151b0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80150fc:	2e00      	cmp	r6, #0
 80150fe:	d060      	beq.n	80151c2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015100:	2f00      	cmp	r7, #0
 8015102:	d05e      	beq.n	80151c2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015104:	9b06      	ldr	r3, [sp, #24]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d05b      	beq.n	80151c2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801510a:	9b07      	ldr	r3, [sp, #28]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d058      	beq.n	80151c2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015110:	9b08      	ldr	r3, [sp, #32]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d055      	beq.n	80151c2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015116:	6823      	ldr	r3, [r4, #0]
 8015118:	686a      	ldr	r2, [r5, #4]
 801511a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801511e:	428a      	cmp	r2, r1
 8015120:	d94c      	bls.n	80151bc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015122:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8015126:	4282      	cmp	r2, r0
 8015128:	d948      	bls.n	80151bc <rcl_action_client_wait_set_get_entities_ready+0x114>
 801512a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801512e:	69ea      	ldr	r2, [r5, #28]
 8015130:	42a2      	cmp	r2, r4
 8015132:	d943      	bls.n	80151bc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015134:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015138:	4562      	cmp	r2, ip
 801513a:	d93f      	bls.n	80151bc <rcl_action_client_wait_set_get_entities_ready+0x114>
 801513c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8015140:	4572      	cmp	r2, lr
 8015142:	d93b      	bls.n	80151bc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015144:	69aa      	ldr	r2, [r5, #24]
 8015146:	682d      	ldr	r5, [r5, #0]
 8015148:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801514c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8015150:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8015154:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8015158:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801515c:	f103 0c0c 	add.w	ip, r3, #12
 8015160:	eba5 050c 	sub.w	r5, r5, ip
 8015164:	fab5 f585 	clz	r5, r5
 8015168:	096d      	lsrs	r5, r5, #5
 801516a:	7035      	strb	r5, [r6, #0]
 801516c:	f103 0510 	add.w	r5, r3, #16
 8015170:	1b64      	subs	r4, r4, r5
 8015172:	fab4 f484 	clz	r4, r4
 8015176:	0964      	lsrs	r4, r4, #5
 8015178:	703c      	strb	r4, [r7, #0]
 801517a:	eba3 0008 	sub.w	r0, r3, r8
 801517e:	1d1c      	adds	r4, r3, #4
 8015180:	3308      	adds	r3, #8
 8015182:	1ad3      	subs	r3, r2, r3
 8015184:	fab0 f080 	clz	r0, r0
 8015188:	9a06      	ldr	r2, [sp, #24]
 801518a:	0940      	lsrs	r0, r0, #5
 801518c:	1b09      	subs	r1, r1, r4
 801518e:	7010      	strb	r0, [r2, #0]
 8015190:	fab1 f181 	clz	r1, r1
 8015194:	9a07      	ldr	r2, [sp, #28]
 8015196:	0949      	lsrs	r1, r1, #5
 8015198:	7011      	strb	r1, [r2, #0]
 801519a:	fab3 f383 	clz	r3, r3
 801519e:	9a08      	ldr	r2, [sp, #32]
 80151a0:	095b      	lsrs	r3, r3, #5
 80151a2:	2000      	movs	r0, #0
 80151a4:	7013      	strb	r3, [r2, #0]
 80151a6:	e001      	b.n	80151ac <rcl_action_client_wait_set_get_entities_ready+0x104>
 80151a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80151ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151b0:	f7f7 fd42 	bl	800cc38 <rcutils_reset_error>
 80151b4:	f640 0036 	movw	r0, #2102	@ 0x836
 80151b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151bc:	2001      	movs	r0, #1
 80151be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151c2:	200b      	movs	r0, #11
 80151c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151c8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80151cc:	4770      	bx	lr
 80151ce:	bf00      	nop

080151d0 <rcl_action_take_goal_request>:
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d039      	beq.n	8015248 <rcl_action_take_goal_request+0x78>
 80151d4:	b570      	push	{r4, r5, r6, lr}
 80151d6:	4604      	mov	r4, r0
 80151d8:	6800      	ldr	r0, [r0, #0]
 80151da:	b380      	cbz	r0, 801523e <rcl_action_take_goal_request+0x6e>
 80151dc:	460d      	mov	r5, r1
 80151de:	4616      	mov	r6, r2
 80151e0:	f7fe fe5a 	bl	8013e98 <rcl_service_is_valid>
 80151e4:	b330      	cbz	r0, 8015234 <rcl_action_take_goal_request+0x64>
 80151e6:	6820      	ldr	r0, [r4, #0]
 80151e8:	3004      	adds	r0, #4
 80151ea:	f7fe fe55 	bl	8013e98 <rcl_service_is_valid>
 80151ee:	b308      	cbz	r0, 8015234 <rcl_action_take_goal_request+0x64>
 80151f0:	6820      	ldr	r0, [r4, #0]
 80151f2:	3008      	adds	r0, #8
 80151f4:	f7fe fe50 	bl	8013e98 <rcl_service_is_valid>
 80151f8:	b1e0      	cbz	r0, 8015234 <rcl_action_take_goal_request+0x64>
 80151fa:	6820      	ldr	r0, [r4, #0]
 80151fc:	300c      	adds	r0, #12
 80151fe:	f7f6 f821 	bl	800b244 <rcl_publisher_is_valid>
 8015202:	b1b8      	cbz	r0, 8015234 <rcl_action_take_goal_request+0x64>
 8015204:	6820      	ldr	r0, [r4, #0]
 8015206:	3010      	adds	r0, #16
 8015208:	f7f6 f81c 	bl	800b244 <rcl_publisher_is_valid>
 801520c:	b190      	cbz	r0, 8015234 <rcl_action_take_goal_request+0x64>
 801520e:	b1cd      	cbz	r5, 8015244 <rcl_action_take_goal_request+0x74>
 8015210:	b1c6      	cbz	r6, 8015244 <rcl_action_take_goal_request+0x74>
 8015212:	6820      	ldr	r0, [r4, #0]
 8015214:	4632      	mov	r2, r6
 8015216:	4629      	mov	r1, r5
 8015218:	f7fe fde6 	bl	8013de8 <rcl_take_request>
 801521c:	b148      	cbz	r0, 8015232 <rcl_action_take_goal_request+0x62>
 801521e:	280a      	cmp	r0, #10
 8015220:	d007      	beq.n	8015232 <rcl_action_take_goal_request+0x62>
 8015222:	f240 2259 	movw	r2, #601	@ 0x259
 8015226:	f640 0399 	movw	r3, #2201	@ 0x899
 801522a:	4290      	cmp	r0, r2
 801522c:	bf0c      	ite	eq
 801522e:	4618      	moveq	r0, r3
 8015230:	2001      	movne	r0, #1
 8015232:	bd70      	pop	{r4, r5, r6, pc}
 8015234:	f7f7 fd00 	bl	800cc38 <rcutils_reset_error>
 8015238:	f640 0098 	movw	r0, #2200	@ 0x898
 801523c:	bd70      	pop	{r4, r5, r6, pc}
 801523e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015242:	bd70      	pop	{r4, r5, r6, pc}
 8015244:	200b      	movs	r0, #11
 8015246:	bd70      	pop	{r4, r5, r6, pc}
 8015248:	f640 0098 	movw	r0, #2200	@ 0x898
 801524c:	4770      	bx	lr
 801524e:	bf00      	nop

08015250 <rcl_action_send_goal_response>:
 8015250:	b390      	cbz	r0, 80152b8 <rcl_action_send_goal_response+0x68>
 8015252:	b570      	push	{r4, r5, r6, lr}
 8015254:	4604      	mov	r4, r0
 8015256:	6800      	ldr	r0, [r0, #0]
 8015258:	b348      	cbz	r0, 80152ae <rcl_action_send_goal_response+0x5e>
 801525a:	460d      	mov	r5, r1
 801525c:	4616      	mov	r6, r2
 801525e:	f7fe fe1b 	bl	8013e98 <rcl_service_is_valid>
 8015262:	b1f8      	cbz	r0, 80152a4 <rcl_action_send_goal_response+0x54>
 8015264:	6820      	ldr	r0, [r4, #0]
 8015266:	3004      	adds	r0, #4
 8015268:	f7fe fe16 	bl	8013e98 <rcl_service_is_valid>
 801526c:	b1d0      	cbz	r0, 80152a4 <rcl_action_send_goal_response+0x54>
 801526e:	6820      	ldr	r0, [r4, #0]
 8015270:	3008      	adds	r0, #8
 8015272:	f7fe fe11 	bl	8013e98 <rcl_service_is_valid>
 8015276:	b1a8      	cbz	r0, 80152a4 <rcl_action_send_goal_response+0x54>
 8015278:	6820      	ldr	r0, [r4, #0]
 801527a:	300c      	adds	r0, #12
 801527c:	f7f5 ffe2 	bl	800b244 <rcl_publisher_is_valid>
 8015280:	b180      	cbz	r0, 80152a4 <rcl_action_send_goal_response+0x54>
 8015282:	6820      	ldr	r0, [r4, #0]
 8015284:	3010      	adds	r0, #16
 8015286:	f7f5 ffdd 	bl	800b244 <rcl_publisher_is_valid>
 801528a:	b158      	cbz	r0, 80152a4 <rcl_action_send_goal_response+0x54>
 801528c:	b195      	cbz	r5, 80152b4 <rcl_action_send_goal_response+0x64>
 801528e:	b18e      	cbz	r6, 80152b4 <rcl_action_send_goal_response+0x64>
 8015290:	6820      	ldr	r0, [r4, #0]
 8015292:	4632      	mov	r2, r6
 8015294:	4629      	mov	r1, r5
 8015296:	f7fe fde7 	bl	8013e68 <rcl_send_response>
 801529a:	b110      	cbz	r0, 80152a2 <rcl_action_send_goal_response+0x52>
 801529c:	2802      	cmp	r0, #2
 801529e:	bf18      	it	ne
 80152a0:	2001      	movne	r0, #1
 80152a2:	bd70      	pop	{r4, r5, r6, pc}
 80152a4:	f7f7 fcc8 	bl	800cc38 <rcutils_reset_error>
 80152a8:	f640 0098 	movw	r0, #2200	@ 0x898
 80152ac:	bd70      	pop	{r4, r5, r6, pc}
 80152ae:	f640 0098 	movw	r0, #2200	@ 0x898
 80152b2:	bd70      	pop	{r4, r5, r6, pc}
 80152b4:	200b      	movs	r0, #11
 80152b6:	bd70      	pop	{r4, r5, r6, pc}
 80152b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80152bc:	4770      	bx	lr
 80152be:	bf00      	nop

080152c0 <rcl_action_take_result_request>:
 80152c0:	2800      	cmp	r0, #0
 80152c2:	d03a      	beq.n	801533a <rcl_action_take_result_request+0x7a>
 80152c4:	b570      	push	{r4, r5, r6, lr}
 80152c6:	4604      	mov	r4, r0
 80152c8:	6800      	ldr	r0, [r0, #0]
 80152ca:	b388      	cbz	r0, 8015330 <rcl_action_take_result_request+0x70>
 80152cc:	460d      	mov	r5, r1
 80152ce:	4616      	mov	r6, r2
 80152d0:	f7fe fde2 	bl	8013e98 <rcl_service_is_valid>
 80152d4:	b338      	cbz	r0, 8015326 <rcl_action_take_result_request+0x66>
 80152d6:	6820      	ldr	r0, [r4, #0]
 80152d8:	3004      	adds	r0, #4
 80152da:	f7fe fddd 	bl	8013e98 <rcl_service_is_valid>
 80152de:	b310      	cbz	r0, 8015326 <rcl_action_take_result_request+0x66>
 80152e0:	6820      	ldr	r0, [r4, #0]
 80152e2:	3008      	adds	r0, #8
 80152e4:	f7fe fdd8 	bl	8013e98 <rcl_service_is_valid>
 80152e8:	b1e8      	cbz	r0, 8015326 <rcl_action_take_result_request+0x66>
 80152ea:	6820      	ldr	r0, [r4, #0]
 80152ec:	300c      	adds	r0, #12
 80152ee:	f7f5 ffa9 	bl	800b244 <rcl_publisher_is_valid>
 80152f2:	b1c0      	cbz	r0, 8015326 <rcl_action_take_result_request+0x66>
 80152f4:	6820      	ldr	r0, [r4, #0]
 80152f6:	3010      	adds	r0, #16
 80152f8:	f7f5 ffa4 	bl	800b244 <rcl_publisher_is_valid>
 80152fc:	b198      	cbz	r0, 8015326 <rcl_action_take_result_request+0x66>
 80152fe:	b1d5      	cbz	r5, 8015336 <rcl_action_take_result_request+0x76>
 8015300:	b1ce      	cbz	r6, 8015336 <rcl_action_take_result_request+0x76>
 8015302:	6820      	ldr	r0, [r4, #0]
 8015304:	4632      	mov	r2, r6
 8015306:	4629      	mov	r1, r5
 8015308:	3008      	adds	r0, #8
 801530a:	f7fe fd6d 	bl	8013de8 <rcl_take_request>
 801530e:	b148      	cbz	r0, 8015324 <rcl_action_take_result_request+0x64>
 8015310:	280a      	cmp	r0, #10
 8015312:	d007      	beq.n	8015324 <rcl_action_take_result_request+0x64>
 8015314:	f240 2259 	movw	r2, #601	@ 0x259
 8015318:	f640 0399 	movw	r3, #2201	@ 0x899
 801531c:	4290      	cmp	r0, r2
 801531e:	bf0c      	ite	eq
 8015320:	4618      	moveq	r0, r3
 8015322:	2001      	movne	r0, #1
 8015324:	bd70      	pop	{r4, r5, r6, pc}
 8015326:	f7f7 fc87 	bl	800cc38 <rcutils_reset_error>
 801532a:	f640 0098 	movw	r0, #2200	@ 0x898
 801532e:	bd70      	pop	{r4, r5, r6, pc}
 8015330:	f640 0098 	movw	r0, #2200	@ 0x898
 8015334:	bd70      	pop	{r4, r5, r6, pc}
 8015336:	200b      	movs	r0, #11
 8015338:	bd70      	pop	{r4, r5, r6, pc}
 801533a:	f640 0098 	movw	r0, #2200	@ 0x898
 801533e:	4770      	bx	lr

08015340 <rcl_action_take_cancel_request>:
 8015340:	2800      	cmp	r0, #0
 8015342:	d03a      	beq.n	80153ba <rcl_action_take_cancel_request+0x7a>
 8015344:	b570      	push	{r4, r5, r6, lr}
 8015346:	4604      	mov	r4, r0
 8015348:	6800      	ldr	r0, [r0, #0]
 801534a:	b388      	cbz	r0, 80153b0 <rcl_action_take_cancel_request+0x70>
 801534c:	460d      	mov	r5, r1
 801534e:	4616      	mov	r6, r2
 8015350:	f7fe fda2 	bl	8013e98 <rcl_service_is_valid>
 8015354:	b338      	cbz	r0, 80153a6 <rcl_action_take_cancel_request+0x66>
 8015356:	6820      	ldr	r0, [r4, #0]
 8015358:	3004      	adds	r0, #4
 801535a:	f7fe fd9d 	bl	8013e98 <rcl_service_is_valid>
 801535e:	b310      	cbz	r0, 80153a6 <rcl_action_take_cancel_request+0x66>
 8015360:	6820      	ldr	r0, [r4, #0]
 8015362:	3008      	adds	r0, #8
 8015364:	f7fe fd98 	bl	8013e98 <rcl_service_is_valid>
 8015368:	b1e8      	cbz	r0, 80153a6 <rcl_action_take_cancel_request+0x66>
 801536a:	6820      	ldr	r0, [r4, #0]
 801536c:	300c      	adds	r0, #12
 801536e:	f7f5 ff69 	bl	800b244 <rcl_publisher_is_valid>
 8015372:	b1c0      	cbz	r0, 80153a6 <rcl_action_take_cancel_request+0x66>
 8015374:	6820      	ldr	r0, [r4, #0]
 8015376:	3010      	adds	r0, #16
 8015378:	f7f5 ff64 	bl	800b244 <rcl_publisher_is_valid>
 801537c:	b198      	cbz	r0, 80153a6 <rcl_action_take_cancel_request+0x66>
 801537e:	b1d5      	cbz	r5, 80153b6 <rcl_action_take_cancel_request+0x76>
 8015380:	b1ce      	cbz	r6, 80153b6 <rcl_action_take_cancel_request+0x76>
 8015382:	6820      	ldr	r0, [r4, #0]
 8015384:	4632      	mov	r2, r6
 8015386:	4629      	mov	r1, r5
 8015388:	3004      	adds	r0, #4
 801538a:	f7fe fd2d 	bl	8013de8 <rcl_take_request>
 801538e:	b148      	cbz	r0, 80153a4 <rcl_action_take_cancel_request+0x64>
 8015390:	280a      	cmp	r0, #10
 8015392:	d007      	beq.n	80153a4 <rcl_action_take_cancel_request+0x64>
 8015394:	f240 2259 	movw	r2, #601	@ 0x259
 8015398:	f640 0399 	movw	r3, #2201	@ 0x899
 801539c:	4290      	cmp	r0, r2
 801539e:	bf0c      	ite	eq
 80153a0:	4618      	moveq	r0, r3
 80153a2:	2001      	movne	r0, #1
 80153a4:	bd70      	pop	{r4, r5, r6, pc}
 80153a6:	f7f7 fc47 	bl	800cc38 <rcutils_reset_error>
 80153aa:	f640 0098 	movw	r0, #2200	@ 0x898
 80153ae:	bd70      	pop	{r4, r5, r6, pc}
 80153b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80153b4:	bd70      	pop	{r4, r5, r6, pc}
 80153b6:	200b      	movs	r0, #11
 80153b8:	bd70      	pop	{r4, r5, r6, pc}
 80153ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80153be:	4770      	bx	lr

080153c0 <rcl_action_send_cancel_response>:
 80153c0:	b398      	cbz	r0, 801542a <rcl_action_send_cancel_response+0x6a>
 80153c2:	b570      	push	{r4, r5, r6, lr}
 80153c4:	4604      	mov	r4, r0
 80153c6:	6800      	ldr	r0, [r0, #0]
 80153c8:	b350      	cbz	r0, 8015420 <rcl_action_send_cancel_response+0x60>
 80153ca:	460d      	mov	r5, r1
 80153cc:	4616      	mov	r6, r2
 80153ce:	f7fe fd63 	bl	8013e98 <rcl_service_is_valid>
 80153d2:	b300      	cbz	r0, 8015416 <rcl_action_send_cancel_response+0x56>
 80153d4:	6820      	ldr	r0, [r4, #0]
 80153d6:	3004      	adds	r0, #4
 80153d8:	f7fe fd5e 	bl	8013e98 <rcl_service_is_valid>
 80153dc:	b1d8      	cbz	r0, 8015416 <rcl_action_send_cancel_response+0x56>
 80153de:	6820      	ldr	r0, [r4, #0]
 80153e0:	3008      	adds	r0, #8
 80153e2:	f7fe fd59 	bl	8013e98 <rcl_service_is_valid>
 80153e6:	b1b0      	cbz	r0, 8015416 <rcl_action_send_cancel_response+0x56>
 80153e8:	6820      	ldr	r0, [r4, #0]
 80153ea:	300c      	adds	r0, #12
 80153ec:	f7f5 ff2a 	bl	800b244 <rcl_publisher_is_valid>
 80153f0:	b188      	cbz	r0, 8015416 <rcl_action_send_cancel_response+0x56>
 80153f2:	6820      	ldr	r0, [r4, #0]
 80153f4:	3010      	adds	r0, #16
 80153f6:	f7f5 ff25 	bl	800b244 <rcl_publisher_is_valid>
 80153fa:	b160      	cbz	r0, 8015416 <rcl_action_send_cancel_response+0x56>
 80153fc:	b19d      	cbz	r5, 8015426 <rcl_action_send_cancel_response+0x66>
 80153fe:	b196      	cbz	r6, 8015426 <rcl_action_send_cancel_response+0x66>
 8015400:	6820      	ldr	r0, [r4, #0]
 8015402:	4632      	mov	r2, r6
 8015404:	4629      	mov	r1, r5
 8015406:	3004      	adds	r0, #4
 8015408:	f7fe fd2e 	bl	8013e68 <rcl_send_response>
 801540c:	b110      	cbz	r0, 8015414 <rcl_action_send_cancel_response+0x54>
 801540e:	2802      	cmp	r0, #2
 8015410:	bf18      	it	ne
 8015412:	2001      	movne	r0, #1
 8015414:	bd70      	pop	{r4, r5, r6, pc}
 8015416:	f7f7 fc0f 	bl	800cc38 <rcutils_reset_error>
 801541a:	f640 0098 	movw	r0, #2200	@ 0x898
 801541e:	bd70      	pop	{r4, r5, r6, pc}
 8015420:	f640 0098 	movw	r0, #2200	@ 0x898
 8015424:	bd70      	pop	{r4, r5, r6, pc}
 8015426:	200b      	movs	r0, #11
 8015428:	bd70      	pop	{r4, r5, r6, pc}
 801542a:	f640 0098 	movw	r0, #2200	@ 0x898
 801542e:	4770      	bx	lr

08015430 <rcl_action_wait_set_add_action_server>:
 8015430:	2800      	cmp	r0, #0
 8015432:	d04d      	beq.n	80154d0 <rcl_action_wait_set_add_action_server+0xa0>
 8015434:	b570      	push	{r4, r5, r6, lr}
 8015436:	460c      	mov	r4, r1
 8015438:	b159      	cbz	r1, 8015452 <rcl_action_wait_set_add_action_server+0x22>
 801543a:	4605      	mov	r5, r0
 801543c:	6808      	ldr	r0, [r1, #0]
 801543e:	b140      	cbz	r0, 8015452 <rcl_action_wait_set_add_action_server+0x22>
 8015440:	4616      	mov	r6, r2
 8015442:	f7fe fd29 	bl	8013e98 <rcl_service_is_valid>
 8015446:	b120      	cbz	r0, 8015452 <rcl_action_wait_set_add_action_server+0x22>
 8015448:	6820      	ldr	r0, [r4, #0]
 801544a:	3004      	adds	r0, #4
 801544c:	f7fe fd24 	bl	8013e98 <rcl_service_is_valid>
 8015450:	b910      	cbnz	r0, 8015458 <rcl_action_wait_set_add_action_server+0x28>
 8015452:	f640 0098 	movw	r0, #2200	@ 0x898
 8015456:	bd70      	pop	{r4, r5, r6, pc}
 8015458:	6820      	ldr	r0, [r4, #0]
 801545a:	3008      	adds	r0, #8
 801545c:	f7fe fd1c 	bl	8013e98 <rcl_service_is_valid>
 8015460:	2800      	cmp	r0, #0
 8015462:	d0f6      	beq.n	8015452 <rcl_action_wait_set_add_action_server+0x22>
 8015464:	6820      	ldr	r0, [r4, #0]
 8015466:	300c      	adds	r0, #12
 8015468:	f7f5 ff04 	bl	800b274 <rcl_publisher_is_valid_except_context>
 801546c:	2800      	cmp	r0, #0
 801546e:	d0f0      	beq.n	8015452 <rcl_action_wait_set_add_action_server+0x22>
 8015470:	6820      	ldr	r0, [r4, #0]
 8015472:	3010      	adds	r0, #16
 8015474:	f7f5 fefe 	bl	800b274 <rcl_publisher_is_valid_except_context>
 8015478:	2800      	cmp	r0, #0
 801547a:	d0ea      	beq.n	8015452 <rcl_action_wait_set_add_action_server+0x22>
 801547c:	6821      	ldr	r1, [r4, #0]
 801547e:	4628      	mov	r0, r5
 8015480:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8015484:	f7ff face 	bl	8014a24 <rcl_wait_set_add_service>
 8015488:	2800      	cmp	r0, #0
 801548a:	d1e4      	bne.n	8015456 <rcl_action_wait_set_add_action_server+0x26>
 801548c:	6821      	ldr	r1, [r4, #0]
 801548e:	4628      	mov	r0, r5
 8015490:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8015494:	3104      	adds	r1, #4
 8015496:	f7ff fac5 	bl	8014a24 <rcl_wait_set_add_service>
 801549a:	2800      	cmp	r0, #0
 801549c:	d1db      	bne.n	8015456 <rcl_action_wait_set_add_action_server+0x26>
 801549e:	6821      	ldr	r1, [r4, #0]
 80154a0:	4628      	mov	r0, r5
 80154a2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80154a6:	3108      	adds	r1, #8
 80154a8:	f7ff fabc 	bl	8014a24 <rcl_wait_set_add_service>
 80154ac:	2800      	cmp	r0, #0
 80154ae:	d1d2      	bne.n	8015456 <rcl_action_wait_set_add_action_server+0x26>
 80154b0:	6821      	ldr	r1, [r4, #0]
 80154b2:	4628      	mov	r0, r5
 80154b4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80154b8:	3114      	adds	r1, #20
 80154ba:	f7ff fa57 	bl	801496c <rcl_wait_set_add_timer>
 80154be:	2800      	cmp	r0, #0
 80154c0:	d1c9      	bne.n	8015456 <rcl_action_wait_set_add_action_server+0x26>
 80154c2:	2e00      	cmp	r6, #0
 80154c4:	d0c7      	beq.n	8015456 <rcl_action_wait_set_add_action_server+0x26>
 80154c6:	6823      	ldr	r3, [r4, #0]
 80154c8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80154cc:	6033      	str	r3, [r6, #0]
 80154ce:	bd70      	pop	{r4, r5, r6, pc}
 80154d0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80154d4:	4770      	bx	lr
 80154d6:	bf00      	nop

080154d8 <rcl_action_server_wait_set_get_entities_ready>:
 80154d8:	2800      	cmp	r0, #0
 80154da:	d05a      	beq.n	8015592 <rcl_action_server_wait_set_get_entities_ready+0xba>
 80154dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154de:	460c      	mov	r4, r1
 80154e0:	b161      	cbz	r1, 80154fc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80154e2:	4605      	mov	r5, r0
 80154e4:	6808      	ldr	r0, [r1, #0]
 80154e6:	b148      	cbz	r0, 80154fc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80154e8:	4616      	mov	r6, r2
 80154ea:	461f      	mov	r7, r3
 80154ec:	f7fe fcd4 	bl	8013e98 <rcl_service_is_valid>
 80154f0:	b120      	cbz	r0, 80154fc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80154f2:	6820      	ldr	r0, [r4, #0]
 80154f4:	3004      	adds	r0, #4
 80154f6:	f7fe fccf 	bl	8013e98 <rcl_service_is_valid>
 80154fa:	b910      	cbnz	r0, 8015502 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80154fc:	f640 0098 	movw	r0, #2200	@ 0x898
 8015500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015502:	6820      	ldr	r0, [r4, #0]
 8015504:	3008      	adds	r0, #8
 8015506:	f7fe fcc7 	bl	8013e98 <rcl_service_is_valid>
 801550a:	2800      	cmp	r0, #0
 801550c:	d0f6      	beq.n	80154fc <rcl_action_server_wait_set_get_entities_ready+0x24>
 801550e:	6820      	ldr	r0, [r4, #0]
 8015510:	300c      	adds	r0, #12
 8015512:	f7f5 feaf 	bl	800b274 <rcl_publisher_is_valid_except_context>
 8015516:	2800      	cmp	r0, #0
 8015518:	d0f0      	beq.n	80154fc <rcl_action_server_wait_set_get_entities_ready+0x24>
 801551a:	6820      	ldr	r0, [r4, #0]
 801551c:	3010      	adds	r0, #16
 801551e:	f7f5 fea9 	bl	800b274 <rcl_publisher_is_valid_except_context>
 8015522:	2800      	cmp	r0, #0
 8015524:	d0ea      	beq.n	80154fc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015526:	b3be      	cbz	r6, 8015598 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015528:	b3b7      	cbz	r7, 8015598 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801552a:	9b06      	ldr	r3, [sp, #24]
 801552c:	b3a3      	cbz	r3, 8015598 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801552e:	9b07      	ldr	r3, [sp, #28]
 8015530:	b393      	cbz	r3, 8015598 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015532:	6821      	ldr	r1, [r4, #0]
 8015534:	692a      	ldr	r2, [r5, #16]
 8015536:	6a2c      	ldr	r4, [r5, #32]
 8015538:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801553c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015540:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8015544:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8015548:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801554c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015550:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015554:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8015558:	1a64      	subs	r4, r4, r1
 801555a:	fab4 f484 	clz	r4, r4
 801555e:	0964      	lsrs	r4, r4, #5
 8015560:	7034      	strb	r4, [r6, #0]
 8015562:	1d0c      	adds	r4, r1, #4
 8015564:	1b1b      	subs	r3, r3, r4
 8015566:	fab3 f383 	clz	r3, r3
 801556a:	095b      	lsrs	r3, r3, #5
 801556c:	f101 0408 	add.w	r4, r1, #8
 8015570:	703b      	strb	r3, [r7, #0]
 8015572:	f101 0314 	add.w	r3, r1, #20
 8015576:	1b01      	subs	r1, r0, r4
 8015578:	1ad3      	subs	r3, r2, r3
 801557a:	fab1 f181 	clz	r1, r1
 801557e:	9a06      	ldr	r2, [sp, #24]
 8015580:	0949      	lsrs	r1, r1, #5
 8015582:	7011      	strb	r1, [r2, #0]
 8015584:	fab3 f383 	clz	r3, r3
 8015588:	9a07      	ldr	r2, [sp, #28]
 801558a:	095b      	lsrs	r3, r3, #5
 801558c:	2000      	movs	r0, #0
 801558e:	7013      	strb	r3, [r2, #0]
 8015590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015592:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015596:	4770      	bx	lr
 8015598:	200b      	movs	r0, #11
 801559a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801559c <_execute_event_handler>:
 801559c:	2002      	movs	r0, #2
 801559e:	4770      	bx	lr

080155a0 <_cancel_goal_event_handler>:
 80155a0:	2003      	movs	r0, #3
 80155a2:	4770      	bx	lr

080155a4 <_succeed_event_handler>:
 80155a4:	2004      	movs	r0, #4
 80155a6:	4770      	bx	lr

080155a8 <_abort_event_handler>:
 80155a8:	2006      	movs	r0, #6
 80155aa:	4770      	bx	lr

080155ac <_canceled_event_handler>:
 80155ac:	2005      	movs	r0, #5
 80155ae:	4770      	bx	lr

080155b0 <rcl_action_transition_goal_state>:
 80155b0:	b2c2      	uxtb	r2, r0
 80155b2:	2a06      	cmp	r2, #6
 80155b4:	d80c      	bhi.n	80155d0 <rcl_action_transition_goal_state+0x20>
 80155b6:	2904      	cmp	r1, #4
 80155b8:	d80a      	bhi.n	80155d0 <rcl_action_transition_goal_state+0x20>
 80155ba:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80155be:	b410      	push	{r4}
 80155c0:	1853      	adds	r3, r2, r1
 80155c2:	4c06      	ldr	r4, [pc, #24]	@ (80155dc <rcl_action_transition_goal_state+0x2c>)
 80155c4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80155c8:	b123      	cbz	r3, 80155d4 <rcl_action_transition_goal_state+0x24>
 80155ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155ce:	4718      	bx	r3
 80155d0:	2000      	movs	r0, #0
 80155d2:	4770      	bx	lr
 80155d4:	2000      	movs	r0, #0
 80155d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155da:	4770      	bx	lr
 80155dc:	08019d08 	.word	0x08019d08

080155e0 <rcl_action_get_zero_initialized_cancel_response>:
 80155e0:	b510      	push	{r4, lr}
 80155e2:	4c07      	ldr	r4, [pc, #28]	@ (8015600 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80155e4:	4686      	mov	lr, r0
 80155e6:	4684      	mov	ip, r0
 80155e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80155ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80155f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155f4:	6823      	ldr	r3, [r4, #0]
 80155f6:	f8cc 3000 	str.w	r3, [ip]
 80155fa:	4670      	mov	r0, lr
 80155fc:	bd10      	pop	{r4, pc}
 80155fe:	bf00      	nop
 8015600:	08019d94 	.word	0x08019d94

08015604 <rclc_action_send_result_request>:
 8015604:	b1d0      	cbz	r0, 801563c <rclc_action_send_result_request+0x38>
 8015606:	b500      	push	{lr}
 8015608:	4684      	mov	ip, r0
 801560a:	b087      	sub	sp, #28
 801560c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8015610:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8015614:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015618:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801561c:	f10d 0e08 	add.w	lr, sp, #8
 8015620:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015624:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015628:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801562c:	a902      	add	r1, sp, #8
 801562e:	3010      	adds	r0, #16
 8015630:	f7ff fbda 	bl	8014de8 <rcl_action_send_result_request>
 8015634:	b920      	cbnz	r0, 8015640 <rclc_action_send_result_request+0x3c>
 8015636:	b007      	add	sp, #28
 8015638:	f85d fb04 	ldr.w	pc, [sp], #4
 801563c:	200b      	movs	r0, #11
 801563e:	4770      	bx	lr
 8015640:	9001      	str	r0, [sp, #4]
 8015642:	f7f7 faf9 	bl	800cc38 <rcutils_reset_error>
 8015646:	9801      	ldr	r0, [sp, #4]
 8015648:	b007      	add	sp, #28
 801564a:	f85d fb04 	ldr.w	pc, [sp], #4
 801564e:	bf00      	nop

08015650 <rclc_action_take_goal_handle>:
 8015650:	b160      	cbz	r0, 801566c <rclc_action_take_goal_handle+0x1c>
 8015652:	6883      	ldr	r3, [r0, #8]
 8015654:	b143      	cbz	r3, 8015668 <rclc_action_take_goal_handle+0x18>
 8015656:	6819      	ldr	r1, [r3, #0]
 8015658:	6081      	str	r1, [r0, #8]
 801565a:	2200      	movs	r2, #0
 801565c:	721a      	strb	r2, [r3, #8]
 801565e:	68c1      	ldr	r1, [r0, #12]
 8015660:	6019      	str	r1, [r3, #0]
 8015662:	621a      	str	r2, [r3, #32]
 8015664:	849a      	strh	r2, [r3, #36]	@ 0x24
 8015666:	60c3      	str	r3, [r0, #12]
 8015668:	4618      	mov	r0, r3
 801566a:	4770      	bx	lr
 801566c:	4603      	mov	r3, r0
 801566e:	e7fb      	b.n	8015668 <rclc_action_take_goal_handle+0x18>

08015670 <rclc_action_remove_used_goal_handle>:
 8015670:	b180      	cbz	r0, 8015694 <rclc_action_remove_used_goal_handle+0x24>
 8015672:	b179      	cbz	r1, 8015694 <rclc_action_remove_used_goal_handle+0x24>
 8015674:	68c3      	ldr	r3, [r0, #12]
 8015676:	4299      	cmp	r1, r3
 8015678:	d00d      	beq.n	8015696 <rclc_action_remove_used_goal_handle+0x26>
 801567a:	b12b      	cbz	r3, 8015688 <rclc_action_remove_used_goal_handle+0x18>
 801567c:	681a      	ldr	r2, [r3, #0]
 801567e:	4291      	cmp	r1, r2
 8015680:	d003      	beq.n	801568a <rclc_action_remove_used_goal_handle+0x1a>
 8015682:	4613      	mov	r3, r2
 8015684:	2b00      	cmp	r3, #0
 8015686:	d1f9      	bne.n	801567c <rclc_action_remove_used_goal_handle+0xc>
 8015688:	4770      	bx	lr
 801568a:	680a      	ldr	r2, [r1, #0]
 801568c:	601a      	str	r2, [r3, #0]
 801568e:	6883      	ldr	r3, [r0, #8]
 8015690:	600b      	str	r3, [r1, #0]
 8015692:	6081      	str	r1, [r0, #8]
 8015694:	4770      	bx	lr
 8015696:	680b      	ldr	r3, [r1, #0]
 8015698:	60c3      	str	r3, [r0, #12]
 801569a:	e7f8      	b.n	801568e <rclc_action_remove_used_goal_handle+0x1e>

0801569c <rclc_action_find_goal_handle_by_uuid>:
 801569c:	b538      	push	{r3, r4, r5, lr}
 801569e:	b180      	cbz	r0, 80156c2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80156a0:	460d      	mov	r5, r1
 80156a2:	b181      	cbz	r1, 80156c6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80156a4:	68c4      	ldr	r4, [r0, #12]
 80156a6:	b914      	cbnz	r4, 80156ae <rclc_action_find_goal_handle_by_uuid+0x12>
 80156a8:	e009      	b.n	80156be <rclc_action_find_goal_handle_by_uuid+0x22>
 80156aa:	6824      	ldr	r4, [r4, #0]
 80156ac:	b13c      	cbz	r4, 80156be <rclc_action_find_goal_handle_by_uuid+0x22>
 80156ae:	f104 0009 	add.w	r0, r4, #9
 80156b2:	2210      	movs	r2, #16
 80156b4:	4629      	mov	r1, r5
 80156b6:	f002 fd97 	bl	80181e8 <memcmp>
 80156ba:	2800      	cmp	r0, #0
 80156bc:	d1f5      	bne.n	80156aa <rclc_action_find_goal_handle_by_uuid+0xe>
 80156be:	4620      	mov	r0, r4
 80156c0:	bd38      	pop	{r3, r4, r5, pc}
 80156c2:	4604      	mov	r4, r0
 80156c4:	e7fb      	b.n	80156be <rclc_action_find_goal_handle_by_uuid+0x22>
 80156c6:	460c      	mov	r4, r1
 80156c8:	e7f9      	b.n	80156be <rclc_action_find_goal_handle_by_uuid+0x22>
 80156ca:	bf00      	nop

080156cc <rclc_action_find_first_handle_by_status>:
 80156cc:	b140      	cbz	r0, 80156e0 <rclc_action_find_first_handle_by_status+0x14>
 80156ce:	68c0      	ldr	r0, [r0, #12]
 80156d0:	b910      	cbnz	r0, 80156d8 <rclc_action_find_first_handle_by_status+0xc>
 80156d2:	e005      	b.n	80156e0 <rclc_action_find_first_handle_by_status+0x14>
 80156d4:	6800      	ldr	r0, [r0, #0]
 80156d6:	b118      	cbz	r0, 80156e0 <rclc_action_find_first_handle_by_status+0x14>
 80156d8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80156dc:	428b      	cmp	r3, r1
 80156de:	d1f9      	bne.n	80156d4 <rclc_action_find_first_handle_by_status+0x8>
 80156e0:	4770      	bx	lr
 80156e2:	bf00      	nop

080156e4 <rclc_action_find_first_terminated_handle>:
 80156e4:	b140      	cbz	r0, 80156f8 <rclc_action_find_first_terminated_handle+0x14>
 80156e6:	68c0      	ldr	r0, [r0, #12]
 80156e8:	b910      	cbnz	r0, 80156f0 <rclc_action_find_first_terminated_handle+0xc>
 80156ea:	e005      	b.n	80156f8 <rclc_action_find_first_terminated_handle+0x14>
 80156ec:	6800      	ldr	r0, [r0, #0]
 80156ee:	b118      	cbz	r0, 80156f8 <rclc_action_find_first_terminated_handle+0x14>
 80156f0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80156f4:	2b03      	cmp	r3, #3
 80156f6:	ddf9      	ble.n	80156ec <rclc_action_find_first_terminated_handle+0x8>
 80156f8:	4770      	bx	lr
 80156fa:	bf00      	nop

080156fc <rclc_action_find_handle_by_goal_request_sequence_number>:
 80156fc:	b170      	cbz	r0, 801571c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80156fe:	68c0      	ldr	r0, [r0, #12]
 8015700:	b160      	cbz	r0, 801571c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015702:	b410      	push	{r4}
 8015704:	e001      	b.n	801570a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015706:	6800      	ldr	r0, [r0, #0]
 8015708:	b128      	cbz	r0, 8015716 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801570a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801570e:	4299      	cmp	r1, r3
 8015710:	bf08      	it	eq
 8015712:	4294      	cmpeq	r4, r2
 8015714:	d1f7      	bne.n	8015706 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015716:	f85d 4b04 	ldr.w	r4, [sp], #4
 801571a:	4770      	bx	lr
 801571c:	4770      	bx	lr
 801571e:	bf00      	nop

08015720 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015720:	b170      	cbz	r0, 8015740 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015722:	68c0      	ldr	r0, [r0, #12]
 8015724:	b160      	cbz	r0, 8015740 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015726:	b410      	push	{r4}
 8015728:	e001      	b.n	801572e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801572a:	6800      	ldr	r0, [r0, #0]
 801572c:	b128      	cbz	r0, 801573a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801572e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015732:	4299      	cmp	r1, r3
 8015734:	bf08      	it	eq
 8015736:	4294      	cmpeq	r4, r2
 8015738:	d1f7      	bne.n	801572a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801573a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801573e:	4770      	bx	lr
 8015740:	4770      	bx	lr
 8015742:	bf00      	nop

08015744 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8015744:	b170      	cbz	r0, 8015764 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015746:	68c0      	ldr	r0, [r0, #12]
 8015748:	b160      	cbz	r0, 8015764 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801574a:	b410      	push	{r4}
 801574c:	e001      	b.n	8015752 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801574e:	6800      	ldr	r0, [r0, #0]
 8015750:	b128      	cbz	r0, 801575e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015752:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8015756:	4299      	cmp	r1, r3
 8015758:	bf08      	it	eq
 801575a:	4294      	cmpeq	r4, r2
 801575c:	d1f7      	bne.n	801574e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801575e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015762:	4770      	bx	lr
 8015764:	4770      	bx	lr
 8015766:	bf00      	nop

08015768 <rclc_action_find_first_handle_with_goal_response>:
 8015768:	b140      	cbz	r0, 801577c <rclc_action_find_first_handle_with_goal_response+0x14>
 801576a:	68c0      	ldr	r0, [r0, #12]
 801576c:	b910      	cbnz	r0, 8015774 <rclc_action_find_first_handle_with_goal_response+0xc>
 801576e:	e005      	b.n	801577c <rclc_action_find_first_handle_with_goal_response+0x14>
 8015770:	6800      	ldr	r0, [r0, #0]
 8015772:	b118      	cbz	r0, 801577c <rclc_action_find_first_handle_with_goal_response+0x14>
 8015774:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d0f9      	beq.n	8015770 <rclc_action_find_first_handle_with_goal_response+0x8>
 801577c:	4770      	bx	lr
 801577e:	bf00      	nop

08015780 <rclc_action_find_first_handle_with_result_response>:
 8015780:	b140      	cbz	r0, 8015794 <rclc_action_find_first_handle_with_result_response+0x14>
 8015782:	68c0      	ldr	r0, [r0, #12]
 8015784:	b910      	cbnz	r0, 801578c <rclc_action_find_first_handle_with_result_response+0xc>
 8015786:	e005      	b.n	8015794 <rclc_action_find_first_handle_with_result_response+0x14>
 8015788:	6800      	ldr	r0, [r0, #0]
 801578a:	b118      	cbz	r0, 8015794 <rclc_action_find_first_handle_with_result_response+0x14>
 801578c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015790:	2b00      	cmp	r3, #0
 8015792:	d0f9      	beq.n	8015788 <rclc_action_find_first_handle_with_result_response+0x8>
 8015794:	4770      	bx	lr
 8015796:	bf00      	nop

08015798 <rclc_action_server_response_goal_request>:
 8015798:	b198      	cbz	r0, 80157c2 <rclc_action_server_response_goal_request+0x2a>
 801579a:	b510      	push	{r4, lr}
 801579c:	6844      	ldr	r4, [r0, #4]
 801579e:	b086      	sub	sp, #24
 80157a0:	2200      	movs	r2, #0
 80157a2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80157a6:	460b      	mov	r3, r1
 80157a8:	9205      	str	r2, [sp, #20]
 80157aa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80157ae:	aa03      	add	r2, sp, #12
 80157b0:	f104 0010 	add.w	r0, r4, #16
 80157b4:	f88d 300c 	strb.w	r3, [sp, #12]
 80157b8:	f7ff fd4a 	bl	8015250 <rcl_action_send_goal_response>
 80157bc:	b918      	cbnz	r0, 80157c6 <rclc_action_server_response_goal_request+0x2e>
 80157be:	b006      	add	sp, #24
 80157c0:	bd10      	pop	{r4, pc}
 80157c2:	200b      	movs	r0, #11
 80157c4:	4770      	bx	lr
 80157c6:	9001      	str	r0, [sp, #4]
 80157c8:	f7f7 fa36 	bl	800cc38 <rcutils_reset_error>
 80157cc:	9801      	ldr	r0, [sp, #4]
 80157ce:	b006      	add	sp, #24
 80157d0:	bd10      	pop	{r4, pc}
 80157d2:	bf00      	nop
 80157d4:	0000      	movs	r0, r0
	...

080157d8 <rclc_action_server_goal_cancel_accept>:
 80157d8:	b310      	cbz	r0, 8015820 <rclc_action_server_goal_cancel_accept+0x48>
 80157da:	b510      	push	{r4, lr}
 80157dc:	b090      	sub	sp, #64	@ 0x40
 80157de:	4604      	mov	r4, r0
 80157e0:	a806      	add	r0, sp, #24
 80157e2:	f7ff fefd 	bl	80155e0 <rcl_action_get_zero_initialized_cancel_response>
 80157e6:	2300      	movs	r3, #0
 80157e8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80157ec:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80157f0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80157f4:	f88d 3018 	strb.w	r3, [sp, #24]
 80157f8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80157fc:	f8cd d01c 	str.w	sp, [sp, #28]
 8015800:	46ec      	mov	ip, sp
 8015802:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015806:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015828 <rclc_action_server_goal_cancel_accept+0x50>
 801580a:	6860      	ldr	r0, [r4, #4]
 801580c:	aa06      	add	r2, sp, #24
 801580e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8015812:	3010      	adds	r0, #16
 8015814:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015818:	f7ff fdd2 	bl	80153c0 <rcl_action_send_cancel_response>
 801581c:	b010      	add	sp, #64	@ 0x40
 801581e:	bd10      	pop	{r4, pc}
 8015820:	200b      	movs	r0, #11
 8015822:	4770      	bx	lr
 8015824:	f3af 8000 	nop.w
 8015828:	00000001 	.word	0x00000001
 801582c:	00000001 	.word	0x00000001

08015830 <rclc_action_server_goal_cancel_reject>:
 8015830:	b082      	sub	sp, #8
 8015832:	b530      	push	{r4, r5, lr}
 8015834:	b08b      	sub	sp, #44	@ 0x2c
 8015836:	ac0e      	add	r4, sp, #56	@ 0x38
 8015838:	e884 000c 	stmia.w	r4, {r2, r3}
 801583c:	b188      	cbz	r0, 8015862 <rclc_action_server_goal_cancel_reject+0x32>
 801583e:	4604      	mov	r4, r0
 8015840:	a801      	add	r0, sp, #4
 8015842:	460d      	mov	r5, r1
 8015844:	f7ff fecc 	bl	80155e0 <rcl_action_get_zero_initialized_cancel_response>
 8015848:	aa01      	add	r2, sp, #4
 801584a:	a90e      	add	r1, sp, #56	@ 0x38
 801584c:	f104 0010 	add.w	r0, r4, #16
 8015850:	f88d 5004 	strb.w	r5, [sp, #4]
 8015854:	f7ff fdb4 	bl	80153c0 <rcl_action_send_cancel_response>
 8015858:	b00b      	add	sp, #44	@ 0x2c
 801585a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801585e:	b002      	add	sp, #8
 8015860:	4770      	bx	lr
 8015862:	200b      	movs	r0, #11
 8015864:	b00b      	add	sp, #44	@ 0x2c
 8015866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801586a:	b002      	add	sp, #8
 801586c:	4770      	bx	lr
 801586e:	bf00      	nop

08015870 <rcutils_string_array_fini>:
 8015870:	b320      	cbz	r0, 80158bc <rcutils_string_array_fini+0x4c>
 8015872:	b570      	push	{r4, r5, r6, lr}
 8015874:	4604      	mov	r4, r0
 8015876:	6840      	ldr	r0, [r0, #4]
 8015878:	b1d8      	cbz	r0, 80158b2 <rcutils_string_array_fini+0x42>
 801587a:	f104 0008 	add.w	r0, r4, #8
 801587e:	f7f7 f8fb 	bl	800ca78 <rcutils_allocator_is_valid>
 8015882:	b1b8      	cbz	r0, 80158b4 <rcutils_string_array_fini+0x44>
 8015884:	6823      	ldr	r3, [r4, #0]
 8015886:	b1bb      	cbz	r3, 80158b8 <rcutils_string_array_fini+0x48>
 8015888:	2500      	movs	r5, #0
 801588a:	6860      	ldr	r0, [r4, #4]
 801588c:	462e      	mov	r6, r5
 801588e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8015892:	68e3      	ldr	r3, [r4, #12]
 8015894:	69a1      	ldr	r1, [r4, #24]
 8015896:	4798      	blx	r3
 8015898:	e9d4 3000 	ldrd	r3, r0, [r4]
 801589c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80158a0:	3501      	adds	r5, #1
 80158a2:	429d      	cmp	r5, r3
 80158a4:	d3f3      	bcc.n	801588e <rcutils_string_array_fini+0x1e>
 80158a6:	68e3      	ldr	r3, [r4, #12]
 80158a8:	69a1      	ldr	r1, [r4, #24]
 80158aa:	4798      	blx	r3
 80158ac:	2000      	movs	r0, #0
 80158ae:	e9c4 0000 	strd	r0, r0, [r4]
 80158b2:	bd70      	pop	{r4, r5, r6, pc}
 80158b4:	200b      	movs	r0, #11
 80158b6:	bd70      	pop	{r4, r5, r6, pc}
 80158b8:	6860      	ldr	r0, [r4, #4]
 80158ba:	e7f4      	b.n	80158a6 <rcutils_string_array_fini+0x36>
 80158bc:	200b      	movs	r0, #11
 80158be:	4770      	bx	lr

080158c0 <rcutils_get_zero_initialized_string_map>:
 80158c0:	4b01      	ldr	r3, [pc, #4]	@ (80158c8 <rcutils_get_zero_initialized_string_map+0x8>)
 80158c2:	2000      	movs	r0, #0
 80158c4:	6018      	str	r0, [r3, #0]
 80158c6:	4770      	bx	lr
 80158c8:	20010e90 	.word	0x20010e90

080158cc <rcutils_string_map_reserve>:
 80158cc:	2800      	cmp	r0, #0
 80158ce:	d05f      	beq.n	8015990 <rcutils_string_map_reserve+0xc4>
 80158d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158d4:	460c      	mov	r4, r1
 80158d6:	6801      	ldr	r1, [r0, #0]
 80158d8:	b082      	sub	sp, #8
 80158da:	4605      	mov	r5, r0
 80158dc:	b129      	cbz	r1, 80158ea <rcutils_string_map_reserve+0x1e>
 80158de:	68cb      	ldr	r3, [r1, #12]
 80158e0:	42a3      	cmp	r3, r4
 80158e2:	d906      	bls.n	80158f2 <rcutils_string_map_reserve+0x26>
 80158e4:	461c      	mov	r4, r3
 80158e6:	2900      	cmp	r1, #0
 80158e8:	d1f9      	bne.n	80158de <rcutils_string_map_reserve+0x12>
 80158ea:	201f      	movs	r0, #31
 80158ec:	b002      	add	sp, #8
 80158ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158f2:	688b      	ldr	r3, [r1, #8]
 80158f4:	42a3      	cmp	r3, r4
 80158f6:	d047      	beq.n	8015988 <rcutils_string_map_reserve+0xbc>
 80158f8:	6a0e      	ldr	r6, [r1, #32]
 80158fa:	2c00      	cmp	r4, #0
 80158fc:	d034      	beq.n	8015968 <rcutils_string_map_reserve+0x9c>
 80158fe:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8015902:	d243      	bcs.n	801598c <rcutils_string_map_reserve+0xc0>
 8015904:	00a7      	lsls	r7, r4, #2
 8015906:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801590a:	6808      	ldr	r0, [r1, #0]
 801590c:	4632      	mov	r2, r6
 801590e:	4639      	mov	r1, r7
 8015910:	47c0      	blx	r8
 8015912:	2800      	cmp	r0, #0
 8015914:	d03a      	beq.n	801598c <rcutils_string_map_reserve+0xc0>
 8015916:	682b      	ldr	r3, [r5, #0]
 8015918:	4632      	mov	r2, r6
 801591a:	6018      	str	r0, [r3, #0]
 801591c:	4639      	mov	r1, r7
 801591e:	6858      	ldr	r0, [r3, #4]
 8015920:	47c0      	blx	r8
 8015922:	2800      	cmp	r0, #0
 8015924:	d032      	beq.n	801598c <rcutils_string_map_reserve+0xc0>
 8015926:	682d      	ldr	r5, [r5, #0]
 8015928:	68ab      	ldr	r3, [r5, #8]
 801592a:	6068      	str	r0, [r5, #4]
 801592c:	42a3      	cmp	r3, r4
 801592e:	d226      	bcs.n	801597e <rcutils_string_map_reserve+0xb2>
 8015930:	682a      	ldr	r2, [r5, #0]
 8015932:	eb00 0c07 	add.w	ip, r0, r7
 8015936:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801593a:	45e6      	cmp	lr, ip
 801593c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8015940:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8015944:	d203      	bcs.n	801594e <rcutils_string_map_reserve+0x82>
 8015946:	eb02 0c07 	add.w	ip, r2, r7
 801594a:	4566      	cmp	r6, ip
 801594c:	d322      	bcc.n	8015994 <rcutils_string_map_reserve+0xc8>
 801594e:	1ae3      	subs	r3, r4, r3
 8015950:	009a      	lsls	r2, r3, #2
 8015952:	4670      	mov	r0, lr
 8015954:	2100      	movs	r1, #0
 8015956:	9201      	str	r2, [sp, #4]
 8015958:	f002 fc70 	bl	801823c <memset>
 801595c:	9a01      	ldr	r2, [sp, #4]
 801595e:	2100      	movs	r1, #0
 8015960:	4630      	mov	r0, r6
 8015962:	f002 fc6b 	bl	801823c <memset>
 8015966:	e00a      	b.n	801597e <rcutils_string_map_reserve+0xb2>
 8015968:	694f      	ldr	r7, [r1, #20]
 801596a:	6808      	ldr	r0, [r1, #0]
 801596c:	4631      	mov	r1, r6
 801596e:	47b8      	blx	r7
 8015970:	682b      	ldr	r3, [r5, #0]
 8015972:	4631      	mov	r1, r6
 8015974:	6858      	ldr	r0, [r3, #4]
 8015976:	601c      	str	r4, [r3, #0]
 8015978:	47b8      	blx	r7
 801597a:	682d      	ldr	r5, [r5, #0]
 801597c:	606c      	str	r4, [r5, #4]
 801597e:	2000      	movs	r0, #0
 8015980:	60ac      	str	r4, [r5, #8]
 8015982:	b002      	add	sp, #8
 8015984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015988:	2000      	movs	r0, #0
 801598a:	e7af      	b.n	80158ec <rcutils_string_map_reserve+0x20>
 801598c:	200a      	movs	r0, #10
 801598e:	e7ad      	b.n	80158ec <rcutils_string_map_reserve+0x20>
 8015990:	200b      	movs	r0, #11
 8015992:	4770      	bx	lr
 8015994:	1f0b      	subs	r3, r1, #4
 8015996:	4418      	add	r0, r3
 8015998:	4413      	add	r3, r2
 801599a:	3a04      	subs	r2, #4
 801599c:	4417      	add	r7, r2
 801599e:	2200      	movs	r2, #0
 80159a0:	f843 2f04 	str.w	r2, [r3, #4]!
 80159a4:	42bb      	cmp	r3, r7
 80159a6:	f840 2f04 	str.w	r2, [r0, #4]!
 80159aa:	d1f9      	bne.n	80159a0 <rcutils_string_map_reserve+0xd4>
 80159ac:	e7e7      	b.n	801597e <rcutils_string_map_reserve+0xb2>
 80159ae:	bf00      	nop

080159b0 <rcutils_string_map_init>:
 80159b0:	b082      	sub	sp, #8
 80159b2:	b570      	push	{r4, r5, r6, lr}
 80159b4:	ac04      	add	r4, sp, #16
 80159b6:	e884 000c 	stmia.w	r4, {r2, r3}
 80159ba:	b380      	cbz	r0, 8015a1e <rcutils_string_map_init+0x6e>
 80159bc:	6806      	ldr	r6, [r0, #0]
 80159be:	4604      	mov	r4, r0
 80159c0:	b12e      	cbz	r6, 80159ce <rcutils_string_map_init+0x1e>
 80159c2:	251e      	movs	r5, #30
 80159c4:	4628      	mov	r0, r5
 80159c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159ca:	b002      	add	sp, #8
 80159cc:	4770      	bx	lr
 80159ce:	a804      	add	r0, sp, #16
 80159d0:	460d      	mov	r5, r1
 80159d2:	f7f7 f851 	bl	800ca78 <rcutils_allocator_is_valid>
 80159d6:	b310      	cbz	r0, 8015a1e <rcutils_string_map_init+0x6e>
 80159d8:	9b04      	ldr	r3, [sp, #16]
 80159da:	9908      	ldr	r1, [sp, #32]
 80159dc:	2024      	movs	r0, #36	@ 0x24
 80159de:	4798      	blx	r3
 80159e0:	6020      	str	r0, [r4, #0]
 80159e2:	b310      	cbz	r0, 8015a2a <rcutils_string_map_init+0x7a>
 80159e4:	f10d 0e10 	add.w	lr, sp, #16
 80159e8:	e9c0 6600 	strd	r6, r6, [r0]
 80159ec:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80159f0:	f100 0c10 	add.w	ip, r0, #16
 80159f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159fc:	f8de 3000 	ldr.w	r3, [lr]
 8015a00:	f8cc 3000 	str.w	r3, [ip]
 8015a04:	4629      	mov	r1, r5
 8015a06:	4620      	mov	r0, r4
 8015a08:	f7ff ff60 	bl	80158cc <rcutils_string_map_reserve>
 8015a0c:	4605      	mov	r5, r0
 8015a0e:	2800      	cmp	r0, #0
 8015a10:	d0d8      	beq.n	80159c4 <rcutils_string_map_init+0x14>
 8015a12:	9b05      	ldr	r3, [sp, #20]
 8015a14:	9908      	ldr	r1, [sp, #32]
 8015a16:	6820      	ldr	r0, [r4, #0]
 8015a18:	4798      	blx	r3
 8015a1a:	6026      	str	r6, [r4, #0]
 8015a1c:	e7d2      	b.n	80159c4 <rcutils_string_map_init+0x14>
 8015a1e:	250b      	movs	r5, #11
 8015a20:	4628      	mov	r0, r5
 8015a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a26:	b002      	add	sp, #8
 8015a28:	4770      	bx	lr
 8015a2a:	250a      	movs	r5, #10
 8015a2c:	e7ca      	b.n	80159c4 <rcutils_string_map_init+0x14>
 8015a2e:	bf00      	nop

08015a30 <rcutils_string_map_fini>:
 8015a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a34:	b082      	sub	sp, #8
 8015a36:	2800      	cmp	r0, #0
 8015a38:	d03a      	beq.n	8015ab0 <rcutils_string_map_fini+0x80>
 8015a3a:	6804      	ldr	r4, [r0, #0]
 8015a3c:	4606      	mov	r6, r0
 8015a3e:	2c00      	cmp	r4, #0
 8015a40:	d032      	beq.n	8015aa8 <rcutils_string_map_fini+0x78>
 8015a42:	68a3      	ldr	r3, [r4, #8]
 8015a44:	b32b      	cbz	r3, 8015a92 <rcutils_string_map_fini+0x62>
 8015a46:	2500      	movs	r5, #0
 8015a48:	6822      	ldr	r2, [r4, #0]
 8015a4a:	462f      	mov	r7, r5
 8015a4c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015a50:	b1e0      	cbz	r0, 8015a8c <rcutils_string_map_fini+0x5c>
 8015a52:	6a21      	ldr	r1, [r4, #32]
 8015a54:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8015a58:	9101      	str	r1, [sp, #4]
 8015a5a:	47c0      	blx	r8
 8015a5c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015a60:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015a64:	9901      	ldr	r1, [sp, #4]
 8015a66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015a6a:	47c0      	blx	r8
 8015a6c:	68e3      	ldr	r3, [r4, #12]
 8015a6e:	6862      	ldr	r2, [r4, #4]
 8015a70:	3b01      	subs	r3, #1
 8015a72:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015a76:	60e3      	str	r3, [r4, #12]
 8015a78:	6834      	ldr	r4, [r6, #0]
 8015a7a:	68a3      	ldr	r3, [r4, #8]
 8015a7c:	3501      	adds	r5, #1
 8015a7e:	429d      	cmp	r5, r3
 8015a80:	d207      	bcs.n	8015a92 <rcutils_string_map_fini+0x62>
 8015a82:	6822      	ldr	r2, [r4, #0]
 8015a84:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015a88:	2800      	cmp	r0, #0
 8015a8a:	d1e2      	bne.n	8015a52 <rcutils_string_map_fini+0x22>
 8015a8c:	3501      	adds	r5, #1
 8015a8e:	429d      	cmp	r5, r3
 8015a90:	d3dc      	bcc.n	8015a4c <rcutils_string_map_fini+0x1c>
 8015a92:	2100      	movs	r1, #0
 8015a94:	4630      	mov	r0, r6
 8015a96:	f7ff ff19 	bl	80158cc <rcutils_string_map_reserve>
 8015a9a:	4604      	mov	r4, r0
 8015a9c:	b920      	cbnz	r0, 8015aa8 <rcutils_string_map_fini+0x78>
 8015a9e:	6830      	ldr	r0, [r6, #0]
 8015aa0:	6943      	ldr	r3, [r0, #20]
 8015aa2:	6a01      	ldr	r1, [r0, #32]
 8015aa4:	4798      	blx	r3
 8015aa6:	6034      	str	r4, [r6, #0]
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	b002      	add	sp, #8
 8015aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ab0:	240b      	movs	r4, #11
 8015ab2:	4620      	mov	r0, r4
 8015ab4:	b002      	add	sp, #8
 8015ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aba:	bf00      	nop

08015abc <rcutils_string_map_getn>:
 8015abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac0:	b300      	cbz	r0, 8015b04 <rcutils_string_map_getn+0x48>
 8015ac2:	6807      	ldr	r7, [r0, #0]
 8015ac4:	b1ff      	cbz	r7, 8015b06 <rcutils_string_map_getn+0x4a>
 8015ac6:	4688      	mov	r8, r1
 8015ac8:	b1e1      	cbz	r1, 8015b04 <rcutils_string_map_getn+0x48>
 8015aca:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8015ace:	683e      	ldr	r6, [r7, #0]
 8015ad0:	f1ba 0f00 	cmp.w	sl, #0
 8015ad4:	d016      	beq.n	8015b04 <rcutils_string_map_getn+0x48>
 8015ad6:	4691      	mov	r9, r2
 8015ad8:	3e04      	subs	r6, #4
 8015ada:	2400      	movs	r4, #0
 8015adc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8015ae0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015ae4:	4628      	mov	r0, r5
 8015ae6:	3401      	adds	r4, #1
 8015ae8:	b155      	cbz	r5, 8015b00 <rcutils_string_map_getn+0x44>
 8015aea:	f7ea fb9b 	bl	8000224 <strlen>
 8015aee:	4548      	cmp	r0, r9
 8015af0:	4602      	mov	r2, r0
 8015af2:	4629      	mov	r1, r5
 8015af4:	bf38      	it	cc
 8015af6:	464a      	movcc	r2, r9
 8015af8:	4640      	mov	r0, r8
 8015afa:	f002 fbb4 	bl	8018266 <strncmp>
 8015afe:	b128      	cbz	r0, 8015b0c <rcutils_string_map_getn+0x50>
 8015b00:	45a2      	cmp	sl, r4
 8015b02:	d1eb      	bne.n	8015adc <rcutils_string_map_getn+0x20>
 8015b04:	2700      	movs	r7, #0
 8015b06:	4638      	mov	r0, r7
 8015b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f853 700b 	ldr.w	r7, [r3, fp]
 8015b12:	4638      	mov	r0, r7
 8015b14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015b18 <rmw_get_zero_initialized_context>:
 8015b18:	b510      	push	{r4, lr}
 8015b1a:	4604      	mov	r4, r0
 8015b1c:	3010      	adds	r0, #16
 8015b1e:	f7f7 fa4f 	bl	800cfc0 <rmw_get_zero_initialized_init_options>
 8015b22:	2300      	movs	r3, #0
 8015b24:	2000      	movs	r0, #0
 8015b26:	2100      	movs	r1, #0
 8015b28:	e9c4 0100 	strd	r0, r1, [r4]
 8015b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8015b30:	60a3      	str	r3, [r4, #8]
 8015b32:	4620      	mov	r0, r4
 8015b34:	bd10      	pop	{r4, pc}
 8015b36:	bf00      	nop

08015b38 <rmw_time_equal>:
 8015b38:	b4f0      	push	{r4, r5, r6, r7}
 8015b3a:	b084      	sub	sp, #16
 8015b3c:	ac04      	add	r4, sp, #16
 8015b3e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015b42:	4603      	mov	r3, r0
 8015b44:	4924      	ldr	r1, [pc, #144]	@ (8015bd8 <rmw_time_equal+0xa0>)
 8015b46:	9e03      	ldr	r6, [sp, #12]
 8015b48:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015b4c:	2202      	movs	r2, #2
 8015b4e:	4299      	cmp	r1, r3
 8015b50:	41aa      	sbcs	r2, r5
 8015b52:	d330      	bcc.n	8015bb6 <rmw_time_equal+0x7e>
 8015b54:	4c21      	ldr	r4, [pc, #132]	@ (8015bdc <rmw_time_equal+0xa4>)
 8015b56:	fba3 3204 	umull	r3, r2, r3, r4
 8015b5a:	fb04 2205 	mla	r2, r4, r5, r2
 8015b5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015b62:	43dd      	mvns	r5, r3
 8015b64:	1a8c      	subs	r4, r1, r2
 8015b66:	4285      	cmp	r5, r0
 8015b68:	41b4      	sbcs	r4, r6
 8015b6a:	d332      	bcc.n	8015bd2 <rmw_time_equal+0x9a>
 8015b6c:	eb10 0c03 	adds.w	ip, r0, r3
 8015b70:	eb42 0106 	adc.w	r1, r2, r6
 8015b74:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015b78:	4817      	ldr	r0, [pc, #92]	@ (8015bd8 <rmw_time_equal+0xa0>)
 8015b7a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015b7c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8015b7e:	2202      	movs	r2, #2
 8015b80:	4298      	cmp	r0, r3
 8015b82:	41b2      	sbcs	r2, r6
 8015b84:	d31c      	bcc.n	8015bc0 <rmw_time_equal+0x88>
 8015b86:	4c15      	ldr	r4, [pc, #84]	@ (8015bdc <rmw_time_equal+0xa4>)
 8015b88:	fba3 3204 	umull	r3, r2, r3, r4
 8015b8c:	fb04 2206 	mla	r2, r4, r6, r2
 8015b90:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8015b94:	43de      	mvns	r6, r3
 8015b96:	1a84      	subs	r4, r0, r2
 8015b98:	42ae      	cmp	r6, r5
 8015b9a:	41bc      	sbcs	r4, r7
 8015b9c:	d315      	bcc.n	8015bca <rmw_time_equal+0x92>
 8015b9e:	195b      	adds	r3, r3, r5
 8015ba0:	eb42 0207 	adc.w	r2, r2, r7
 8015ba4:	428a      	cmp	r2, r1
 8015ba6:	bf08      	it	eq
 8015ba8:	4563      	cmpeq	r3, ip
 8015baa:	bf0c      	ite	eq
 8015bac:	2001      	moveq	r0, #1
 8015bae:	2000      	movne	r0, #0
 8015bb0:	b004      	add	sp, #16
 8015bb2:	bcf0      	pop	{r4, r5, r6, r7}
 8015bb4:	4770      	bx	lr
 8015bb6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015bba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015bbe:	e7d9      	b.n	8015b74 <rmw_time_equal+0x3c>
 8015bc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015bc4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8015bc8:	e7ec      	b.n	8015ba4 <rmw_time_equal+0x6c>
 8015bca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015bce:	4602      	mov	r2, r0
 8015bd0:	e7e8      	b.n	8015ba4 <rmw_time_equal+0x6c>
 8015bd2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015bd6:	e7cd      	b.n	8015b74 <rmw_time_equal+0x3c>
 8015bd8:	25c17d04 	.word	0x25c17d04
 8015bdc:	3b9aca00 	.word	0x3b9aca00

08015be0 <rmw_time_total_nsec>:
 8015be0:	b470      	push	{r4, r5, r6}
 8015be2:	b085      	sub	sp, #20
 8015be4:	ac04      	add	r4, sp, #16
 8015be6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015bea:	4603      	mov	r3, r0
 8015bec:	4912      	ldr	r1, [pc, #72]	@ (8015c38 <rmw_time_total_nsec+0x58>)
 8015bee:	9e03      	ldr	r6, [sp, #12]
 8015bf0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015bf4:	2202      	movs	r2, #2
 8015bf6:	4299      	cmp	r1, r3
 8015bf8:	41aa      	sbcs	r2, r5
 8015bfa:	d311      	bcc.n	8015c20 <rmw_time_total_nsec+0x40>
 8015bfc:	4c0f      	ldr	r4, [pc, #60]	@ (8015c3c <rmw_time_total_nsec+0x5c>)
 8015bfe:	fba3 3204 	umull	r3, r2, r3, r4
 8015c02:	fb04 2205 	mla	r2, r4, r5, r2
 8015c06:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015c0a:	43dd      	mvns	r5, r3
 8015c0c:	1a8c      	subs	r4, r1, r2
 8015c0e:	4285      	cmp	r5, r0
 8015c10:	41b4      	sbcs	r4, r6
 8015c12:	d30c      	bcc.n	8015c2e <rmw_time_total_nsec+0x4e>
 8015c14:	1818      	adds	r0, r3, r0
 8015c16:	eb42 0106 	adc.w	r1, r2, r6
 8015c1a:	b005      	add	sp, #20
 8015c1c:	bc70      	pop	{r4, r5, r6}
 8015c1e:	4770      	bx	lr
 8015c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015c24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015c28:	b005      	add	sp, #20
 8015c2a:	bc70      	pop	{r4, r5, r6}
 8015c2c:	4770      	bx	lr
 8015c2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015c32:	b005      	add	sp, #20
 8015c34:	bc70      	pop	{r4, r5, r6}
 8015c36:	4770      	bx	lr
 8015c38:	25c17d04 	.word	0x25c17d04
 8015c3c:	3b9aca00 	.word	0x3b9aca00

08015c40 <rmw_validate_full_topic_name>:
 8015c40:	2800      	cmp	r0, #0
 8015c42:	d057      	beq.n	8015cf4 <rmw_validate_full_topic_name+0xb4>
 8015c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c48:	460d      	mov	r5, r1
 8015c4a:	2900      	cmp	r1, #0
 8015c4c:	d054      	beq.n	8015cf8 <rmw_validate_full_topic_name+0xb8>
 8015c4e:	4616      	mov	r6, r2
 8015c50:	4604      	mov	r4, r0
 8015c52:	f7ea fae7 	bl	8000224 <strlen>
 8015c56:	b148      	cbz	r0, 8015c6c <rmw_validate_full_topic_name+0x2c>
 8015c58:	7823      	ldrb	r3, [r4, #0]
 8015c5a:	2b2f      	cmp	r3, #47	@ 0x2f
 8015c5c:	d00d      	beq.n	8015c7a <rmw_validate_full_topic_name+0x3a>
 8015c5e:	2302      	movs	r3, #2
 8015c60:	602b      	str	r3, [r5, #0]
 8015c62:	b13e      	cbz	r6, 8015c74 <rmw_validate_full_topic_name+0x34>
 8015c64:	2000      	movs	r0, #0
 8015c66:	6030      	str	r0, [r6, #0]
 8015c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	602b      	str	r3, [r5, #0]
 8015c70:	2e00      	cmp	r6, #0
 8015c72:	d1f7      	bne.n	8015c64 <rmw_validate_full_topic_name+0x24>
 8015c74:	2000      	movs	r0, #0
 8015c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c7a:	1e43      	subs	r3, r0, #1
 8015c7c:	5ce2      	ldrb	r2, [r4, r3]
 8015c7e:	2a2f      	cmp	r2, #47	@ 0x2f
 8015c80:	d03c      	beq.n	8015cfc <rmw_validate_full_topic_name+0xbc>
 8015c82:	1e63      	subs	r3, r4, #1
 8015c84:	eb03 0800 	add.w	r8, r3, r0
 8015c88:	f1c4 0e01 	rsb	lr, r4, #1
 8015c8c:	eb0e 0703 	add.w	r7, lr, r3
 8015c90:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015c94:	f021 0220 	bic.w	r2, r1, #32
 8015c98:	3a41      	subs	r2, #65	@ 0x41
 8015c9a:	2a19      	cmp	r2, #25
 8015c9c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015ca0:	d90b      	bls.n	8015cba <rmw_validate_full_topic_name+0x7a>
 8015ca2:	295f      	cmp	r1, #95	@ 0x5f
 8015ca4:	d009      	beq.n	8015cba <rmw_validate_full_topic_name+0x7a>
 8015ca6:	f1bc 0f0a 	cmp.w	ip, #10
 8015caa:	d906      	bls.n	8015cba <rmw_validate_full_topic_name+0x7a>
 8015cac:	2304      	movs	r3, #4
 8015cae:	602b      	str	r3, [r5, #0]
 8015cb0:	2e00      	cmp	r6, #0
 8015cb2:	d0df      	beq.n	8015c74 <rmw_validate_full_topic_name+0x34>
 8015cb4:	6037      	str	r7, [r6, #0]
 8015cb6:	2000      	movs	r0, #0
 8015cb8:	e7d6      	b.n	8015c68 <rmw_validate_full_topic_name+0x28>
 8015cba:	4543      	cmp	r3, r8
 8015cbc:	d1e6      	bne.n	8015c8c <rmw_validate_full_topic_name+0x4c>
 8015cbe:	4f1a      	ldr	r7, [pc, #104]	@ (8015d28 <rmw_validate_full_topic_name+0xe8>)
 8015cc0:	2301      	movs	r3, #1
 8015cc2:	e004      	b.n	8015cce <rmw_validate_full_topic_name+0x8e>
 8015cc4:	4298      	cmp	r0, r3
 8015cc6:	f104 0401 	add.w	r4, r4, #1
 8015cca:	d91c      	bls.n	8015d06 <rmw_validate_full_topic_name+0xc6>
 8015ccc:	4613      	mov	r3, r2
 8015cce:	4298      	cmp	r0, r3
 8015cd0:	f103 0201 	add.w	r2, r3, #1
 8015cd4:	d0f6      	beq.n	8015cc4 <rmw_validate_full_topic_name+0x84>
 8015cd6:	7821      	ldrb	r1, [r4, #0]
 8015cd8:	292f      	cmp	r1, #47	@ 0x2f
 8015cda:	d1f3      	bne.n	8015cc4 <rmw_validate_full_topic_name+0x84>
 8015cdc:	7861      	ldrb	r1, [r4, #1]
 8015cde:	292f      	cmp	r1, #47	@ 0x2f
 8015ce0:	d01c      	beq.n	8015d1c <rmw_validate_full_topic_name+0xdc>
 8015ce2:	5dc9      	ldrb	r1, [r1, r7]
 8015ce4:	0749      	lsls	r1, r1, #29
 8015ce6:	d5ed      	bpl.n	8015cc4 <rmw_validate_full_topic_name+0x84>
 8015ce8:	2206      	movs	r2, #6
 8015cea:	602a      	str	r2, [r5, #0]
 8015cec:	2e00      	cmp	r6, #0
 8015cee:	d0c1      	beq.n	8015c74 <rmw_validate_full_topic_name+0x34>
 8015cf0:	6033      	str	r3, [r6, #0]
 8015cf2:	e7bf      	b.n	8015c74 <rmw_validate_full_topic_name+0x34>
 8015cf4:	200b      	movs	r0, #11
 8015cf6:	4770      	bx	lr
 8015cf8:	200b      	movs	r0, #11
 8015cfa:	e7b5      	b.n	8015c68 <rmw_validate_full_topic_name+0x28>
 8015cfc:	2203      	movs	r2, #3
 8015cfe:	602a      	str	r2, [r5, #0]
 8015d00:	2e00      	cmp	r6, #0
 8015d02:	d1f5      	bne.n	8015cf0 <rmw_validate_full_topic_name+0xb0>
 8015d04:	e7b6      	b.n	8015c74 <rmw_validate_full_topic_name+0x34>
 8015d06:	28f7      	cmp	r0, #247	@ 0xf7
 8015d08:	d802      	bhi.n	8015d10 <rmw_validate_full_topic_name+0xd0>
 8015d0a:	2000      	movs	r0, #0
 8015d0c:	6028      	str	r0, [r5, #0]
 8015d0e:	e7ab      	b.n	8015c68 <rmw_validate_full_topic_name+0x28>
 8015d10:	2307      	movs	r3, #7
 8015d12:	602b      	str	r3, [r5, #0]
 8015d14:	2e00      	cmp	r6, #0
 8015d16:	d0ad      	beq.n	8015c74 <rmw_validate_full_topic_name+0x34>
 8015d18:	23f6      	movs	r3, #246	@ 0xf6
 8015d1a:	e7e9      	b.n	8015cf0 <rmw_validate_full_topic_name+0xb0>
 8015d1c:	2205      	movs	r2, #5
 8015d1e:	602a      	str	r2, [r5, #0]
 8015d20:	2e00      	cmp	r6, #0
 8015d22:	d1e5      	bne.n	8015cf0 <rmw_validate_full_topic_name+0xb0>
 8015d24:	e7a6      	b.n	8015c74 <rmw_validate_full_topic_name+0x34>
 8015d26:	bf00      	nop
 8015d28:	08019e9b 	.word	0x08019e9b

08015d2c <on_status>:
 8015d2c:	b082      	sub	sp, #8
 8015d2e:	b002      	add	sp, #8
 8015d30:	4770      	bx	lr
 8015d32:	bf00      	nop

08015d34 <on_topic>:
 8015d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d38:	4a22      	ldr	r2, [pc, #136]	@ (8015dc4 <on_topic+0x90>)
 8015d3a:	b094      	sub	sp, #80	@ 0x50
 8015d3c:	6812      	ldr	r2, [r2, #0]
 8015d3e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8015d40:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015d44:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8015d48:	b3c2      	cbz	r2, 8015dbc <on_topic+0x88>
 8015d4a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015d4e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015d52:	e001      	b.n	8015d58 <on_topic+0x24>
 8015d54:	6852      	ldr	r2, [r2, #4]
 8015d56:	b38a      	cbz	r2, 8015dbc <on_topic+0x88>
 8015d58:	6894      	ldr	r4, [r2, #8]
 8015d5a:	8aa3      	ldrh	r3, [r4, #20]
 8015d5c:	428b      	cmp	r3, r1
 8015d5e:	d1f9      	bne.n	8015d54 <on_topic+0x20>
 8015d60:	7da3      	ldrb	r3, [r4, #22]
 8015d62:	4283      	cmp	r3, r0
 8015d64:	d1f6      	bne.n	8015d54 <on_topic+0x20>
 8015d66:	2248      	movs	r2, #72	@ 0x48
 8015d68:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015d6c:	4668      	mov	r0, sp
 8015d6e:	f002 fb8c 	bl	801848a <memcpy>
 8015d72:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015d76:	cb0c      	ldmia	r3, {r2, r3}
 8015d78:	4620      	mov	r0, r4
 8015d7a:	f7f8 fc2d 	bl	800e5d8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015d7e:	4607      	mov	r7, r0
 8015d80:	b1e0      	cbz	r0, 8015dbc <on_topic+0x88>
 8015d82:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015d86:	4632      	mov	r2, r6
 8015d88:	4628      	mov	r0, r5
 8015d8a:	f108 0110 	add.w	r1, r8, #16
 8015d8e:	f000 fdbf 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8015d92:	b930      	cbnz	r0, 8015da2 <on_topic+0x6e>
 8015d94:	480c      	ldr	r0, [pc, #48]	@ (8015dc8 <on_topic+0x94>)
 8015d96:	4639      	mov	r1, r7
 8015d98:	b014      	add	sp, #80	@ 0x50
 8015d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d9e:	f000 b8bd 	b.w	8015f1c <put_memory>
 8015da2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015da6:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8015daa:	f000 fca7 	bl	80166fc <rmw_uros_epoch_nanos>
 8015dae:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015db2:	2305      	movs	r3, #5
 8015db4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015db8:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015dbc:	b014      	add	sp, #80	@ 0x50
 8015dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dc2:	bf00      	nop
 8015dc4:	20010e44 	.word	0x20010e44
 8015dc8:	20010e34 	.word	0x20010e34

08015dcc <on_request>:
 8015dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dd0:	4823      	ldr	r0, [pc, #140]	@ (8015e60 <on_request+0x94>)
 8015dd2:	b094      	sub	sp, #80	@ 0x50
 8015dd4:	6800      	ldr	r0, [r0, #0]
 8015dd6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015dd8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015ddc:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015dde:	2800      	cmp	r0, #0
 8015de0:	d03b      	beq.n	8015e5a <on_request+0x8e>
 8015de2:	461d      	mov	r5, r3
 8015de4:	e001      	b.n	8015dea <on_request+0x1e>
 8015de6:	6840      	ldr	r0, [r0, #4]
 8015de8:	b3b8      	cbz	r0, 8015e5a <on_request+0x8e>
 8015dea:	6884      	ldr	r4, [r0, #8]
 8015dec:	8b21      	ldrh	r1, [r4, #24]
 8015dee:	4291      	cmp	r1, r2
 8015df0:	d1f9      	bne.n	8015de6 <on_request+0x1a>
 8015df2:	2248      	movs	r2, #72	@ 0x48
 8015df4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015df8:	4668      	mov	r0, sp
 8015dfa:	f002 fb46 	bl	801848a <memcpy>
 8015dfe:	f104 0320 	add.w	r3, r4, #32
 8015e02:	cb0c      	ldmia	r3, {r2, r3}
 8015e04:	4620      	mov	r0, r4
 8015e06:	f7f8 fbe7 	bl	800e5d8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015e0a:	4680      	mov	r8, r0
 8015e0c:	b328      	cbz	r0, 8015e5a <on_request+0x8e>
 8015e0e:	4638      	mov	r0, r7
 8015e10:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015e14:	4632      	mov	r2, r6
 8015e16:	f107 0110 	add.w	r1, r7, #16
 8015e1a:	f000 fd79 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8015e1e:	b930      	cbnz	r0, 8015e2e <on_request+0x62>
 8015e20:	4810      	ldr	r0, [pc, #64]	@ (8015e64 <on_request+0x98>)
 8015e22:	4641      	mov	r1, r8
 8015e24:	b014      	add	sp, #80	@ 0x50
 8015e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e2a:	f000 b877 	b.w	8015f1c <put_memory>
 8015e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e30:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015e34:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015e38:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015e3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015e40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015e44:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015e48:	f000 fc58 	bl	80166fc <rmw_uros_epoch_nanos>
 8015e4c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015e50:	2303      	movs	r3, #3
 8015e52:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015e56:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015e5a:	b014      	add	sp, #80	@ 0x50
 8015e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e60:	20010e14 	.word	0x20010e14
 8015e64:	20010e34 	.word	0x20010e34

08015e68 <on_reply>:
 8015e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e6c:	4821      	ldr	r0, [pc, #132]	@ (8015ef4 <on_reply+0x8c>)
 8015e6e:	b094      	sub	sp, #80	@ 0x50
 8015e70:	6800      	ldr	r0, [r0, #0]
 8015e72:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015e74:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015e78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015e7a:	b3b8      	cbz	r0, 8015eec <on_reply+0x84>
 8015e7c:	461d      	mov	r5, r3
 8015e7e:	e001      	b.n	8015e84 <on_reply+0x1c>
 8015e80:	6840      	ldr	r0, [r0, #4]
 8015e82:	b398      	cbz	r0, 8015eec <on_reply+0x84>
 8015e84:	6884      	ldr	r4, [r0, #8]
 8015e86:	8b21      	ldrh	r1, [r4, #24]
 8015e88:	4291      	cmp	r1, r2
 8015e8a:	d1f9      	bne.n	8015e80 <on_reply+0x18>
 8015e8c:	2248      	movs	r2, #72	@ 0x48
 8015e8e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015e92:	4668      	mov	r0, sp
 8015e94:	f002 faf9 	bl	801848a <memcpy>
 8015e98:	f104 0320 	add.w	r3, r4, #32
 8015e9c:	cb0c      	ldmia	r3, {r2, r3}
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	f7f8 fb9a 	bl	800e5d8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015ea4:	4680      	mov	r8, r0
 8015ea6:	b308      	cbz	r0, 8015eec <on_reply+0x84>
 8015ea8:	4638      	mov	r0, r7
 8015eaa:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015eae:	4632      	mov	r2, r6
 8015eb0:	f107 0110 	add.w	r1, r7, #16
 8015eb4:	f000 fd2c 	bl	8016910 <ucdr_deserialize_array_uint8_t>
 8015eb8:	b930      	cbnz	r0, 8015ec8 <on_reply+0x60>
 8015eba:	480f      	ldr	r0, [pc, #60]	@ (8015ef8 <on_reply+0x90>)
 8015ebc:	4641      	mov	r1, r8
 8015ebe:	b014      	add	sp, #80	@ 0x50
 8015ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ec4:	f000 b82a 	b.w	8015f1c <put_memory>
 8015ec8:	2200      	movs	r2, #0
 8015eca:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8015ece:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015ed2:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015ed6:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8015eda:	f000 fc0f 	bl	80166fc <rmw_uros_epoch_nanos>
 8015ede:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015ee2:	2304      	movs	r3, #4
 8015ee4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015ee8:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015eec:	b014      	add	sp, #80	@ 0x50
 8015eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ef2:	bf00      	nop
 8015ef4:	2000c524 	.word	0x2000c524
 8015ef8:	20010e34 	.word	0x20010e34

08015efc <get_memory>:
 8015efc:	4603      	mov	r3, r0
 8015efe:	6840      	ldr	r0, [r0, #4]
 8015f00:	b158      	cbz	r0, 8015f1a <get_memory+0x1e>
 8015f02:	6842      	ldr	r2, [r0, #4]
 8015f04:	605a      	str	r2, [r3, #4]
 8015f06:	b10a      	cbz	r2, 8015f0c <get_memory+0x10>
 8015f08:	2100      	movs	r1, #0
 8015f0a:	6011      	str	r1, [r2, #0]
 8015f0c:	681a      	ldr	r2, [r3, #0]
 8015f0e:	6042      	str	r2, [r0, #4]
 8015f10:	b102      	cbz	r2, 8015f14 <get_memory+0x18>
 8015f12:	6010      	str	r0, [r2, #0]
 8015f14:	2200      	movs	r2, #0
 8015f16:	6002      	str	r2, [r0, #0]
 8015f18:	6018      	str	r0, [r3, #0]
 8015f1a:	4770      	bx	lr

08015f1c <put_memory>:
 8015f1c:	680b      	ldr	r3, [r1, #0]
 8015f1e:	b10b      	cbz	r3, 8015f24 <put_memory+0x8>
 8015f20:	684a      	ldr	r2, [r1, #4]
 8015f22:	605a      	str	r2, [r3, #4]
 8015f24:	684a      	ldr	r2, [r1, #4]
 8015f26:	b102      	cbz	r2, 8015f2a <put_memory+0xe>
 8015f28:	6013      	str	r3, [r2, #0]
 8015f2a:	6803      	ldr	r3, [r0, #0]
 8015f2c:	428b      	cmp	r3, r1
 8015f2e:	6843      	ldr	r3, [r0, #4]
 8015f30:	bf08      	it	eq
 8015f32:	6002      	streq	r2, [r0, #0]
 8015f34:	604b      	str	r3, [r1, #4]
 8015f36:	b103      	cbz	r3, 8015f3a <put_memory+0x1e>
 8015f38:	6019      	str	r1, [r3, #0]
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	600b      	str	r3, [r1, #0]
 8015f3e:	6041      	str	r1, [r0, #4]
 8015f40:	4770      	bx	lr
 8015f42:	bf00      	nop

08015f44 <rmw_destroy_client>:
 8015f44:	b570      	push	{r4, r5, r6, lr}
 8015f46:	b128      	cbz	r0, 8015f54 <rmw_destroy_client+0x10>
 8015f48:	4604      	mov	r4, r0
 8015f4a:	6800      	ldr	r0, [r0, #0]
 8015f4c:	460d      	mov	r5, r1
 8015f4e:	f7f8 fcb9 	bl	800e8c4 <is_uxrce_rmw_identifier_valid>
 8015f52:	b910      	cbnz	r0, 8015f5a <rmw_destroy_client+0x16>
 8015f54:	2401      	movs	r4, #1
 8015f56:	4620      	mov	r0, r4
 8015f58:	bd70      	pop	{r4, r5, r6, pc}
 8015f5a:	6863      	ldr	r3, [r4, #4]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d0f9      	beq.n	8015f54 <rmw_destroy_client+0x10>
 8015f60:	2d00      	cmp	r5, #0
 8015f62:	d0f7      	beq.n	8015f54 <rmw_destroy_client+0x10>
 8015f64:	6828      	ldr	r0, [r5, #0]
 8015f66:	f7f8 fcad 	bl	800e8c4 <is_uxrce_rmw_identifier_valid>
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	d0f2      	beq.n	8015f54 <rmw_destroy_client+0x10>
 8015f6e:	686e      	ldr	r6, [r5, #4]
 8015f70:	2e00      	cmp	r6, #0
 8015f72:	d0ef      	beq.n	8015f54 <rmw_destroy_client+0x10>
 8015f74:	6864      	ldr	r4, [r4, #4]
 8015f76:	6932      	ldr	r2, [r6, #16]
 8015f78:	6920      	ldr	r0, [r4, #16]
 8015f7a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015f7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f82:	6819      	ldr	r1, [r3, #0]
 8015f84:	f7fa f98c 	bl	80102a0 <uxr_buffer_cancel_data>
 8015f88:	4602      	mov	r2, r0
 8015f8a:	6920      	ldr	r0, [r4, #16]
 8015f8c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015f90:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015f94:	f7f8 fc16 	bl	800e7c4 <run_xrce_session>
 8015f98:	6920      	ldr	r0, [r4, #16]
 8015f9a:	6932      	ldr	r2, [r6, #16]
 8015f9c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015fa0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015fa4:	6819      	ldr	r1, [r3, #0]
 8015fa6:	f7f9 fd49 	bl	800fa3c <uxr_buffer_delete_entity>
 8015faa:	4602      	mov	r2, r0
 8015fac:	6920      	ldr	r0, [r4, #16]
 8015fae:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015fb2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015fb6:	f7f8 fc05 	bl	800e7c4 <run_xrce_session>
 8015fba:	2800      	cmp	r0, #0
 8015fbc:	4628      	mov	r0, r5
 8015fbe:	bf14      	ite	ne
 8015fc0:	2400      	movne	r4, #0
 8015fc2:	2402      	moveq	r4, #2
 8015fc4:	f7f8 fae6 	bl	800e594 <rmw_uxrce_fini_client_memory>
 8015fc8:	e7c5      	b.n	8015f56 <rmw_destroy_client+0x12>
 8015fca:	bf00      	nop

08015fcc <rmw_get_implementation_identifier>:
 8015fcc:	4b01      	ldr	r3, [pc, #4]	@ (8015fd4 <rmw_get_implementation_identifier+0x8>)
 8015fce:	6818      	ldr	r0, [r3, #0]
 8015fd0:	4770      	bx	lr
 8015fd2:	bf00      	nop
 8015fd4:	08019db8 	.word	0x08019db8

08015fd8 <rmw_create_guard_condition>:
 8015fd8:	b538      	push	{r3, r4, r5, lr}
 8015fda:	4605      	mov	r5, r0
 8015fdc:	4807      	ldr	r0, [pc, #28]	@ (8015ffc <rmw_create_guard_condition+0x24>)
 8015fde:	f7ff ff8d 	bl	8015efc <get_memory>
 8015fe2:	b148      	cbz	r0, 8015ff8 <rmw_create_guard_condition+0x20>
 8015fe4:	6884      	ldr	r4, [r0, #8]
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	7423      	strb	r3, [r4, #16]
 8015fea:	61e5      	str	r5, [r4, #28]
 8015fec:	f7ff ffee 	bl	8015fcc <rmw_get_implementation_identifier>
 8015ff0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015ff4:	f104 0014 	add.w	r0, r4, #20
 8015ff8:	bd38      	pop	{r3, r4, r5, pc}
 8015ffa:	bf00      	nop
 8015ffc:	20010dd4 	.word	0x20010dd4

08016000 <rmw_destroy_guard_condition>:
 8016000:	b508      	push	{r3, lr}
 8016002:	4b08      	ldr	r3, [pc, #32]	@ (8016024 <rmw_destroy_guard_condition+0x24>)
 8016004:	6819      	ldr	r1, [r3, #0]
 8016006:	b911      	cbnz	r1, 801600e <rmw_destroy_guard_condition+0xe>
 8016008:	e00a      	b.n	8016020 <rmw_destroy_guard_condition+0x20>
 801600a:	6849      	ldr	r1, [r1, #4]
 801600c:	b141      	cbz	r1, 8016020 <rmw_destroy_guard_condition+0x20>
 801600e:	688b      	ldr	r3, [r1, #8]
 8016010:	3314      	adds	r3, #20
 8016012:	4298      	cmp	r0, r3
 8016014:	d1f9      	bne.n	801600a <rmw_destroy_guard_condition+0xa>
 8016016:	4803      	ldr	r0, [pc, #12]	@ (8016024 <rmw_destroy_guard_condition+0x24>)
 8016018:	f7ff ff80 	bl	8015f1c <put_memory>
 801601c:	2000      	movs	r0, #0
 801601e:	bd08      	pop	{r3, pc}
 8016020:	2001      	movs	r0, #1
 8016022:	bd08      	pop	{r3, pc}
 8016024:	20010dd4 	.word	0x20010dd4

08016028 <create_topic>:
 8016028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801602c:	4605      	mov	r5, r0
 801602e:	b084      	sub	sp, #16
 8016030:	4822      	ldr	r0, [pc, #136]	@ (80160bc <create_topic+0x94>)
 8016032:	460f      	mov	r7, r1
 8016034:	4616      	mov	r6, r2
 8016036:	f7ff ff61 	bl	8015efc <get_memory>
 801603a:	4604      	mov	r4, r0
 801603c:	2800      	cmp	r0, #0
 801603e:	d039      	beq.n	80160b4 <create_topic+0x8c>
 8016040:	692b      	ldr	r3, [r5, #16]
 8016042:	6884      	ldr	r4, [r0, #8]
 8016044:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80160c4 <create_topic+0x9c>
 8016048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801604c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8016050:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8016054:	1c42      	adds	r2, r0, #1
 8016056:	2102      	movs	r1, #2
 8016058:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801605c:	f7f9 ffb2 	bl	800ffc4 <uxr_object_id>
 8016060:	223c      	movs	r2, #60	@ 0x3c
 8016062:	6120      	str	r0, [r4, #16]
 8016064:	4641      	mov	r1, r8
 8016066:	4638      	mov	r0, r7
 8016068:	f7f8 fc12 	bl	800e890 <generate_topic_name>
 801606c:	b1f0      	cbz	r0, 80160ac <create_topic+0x84>
 801606e:	4f14      	ldr	r7, [pc, #80]	@ (80160c0 <create_topic+0x98>)
 8016070:	4630      	mov	r0, r6
 8016072:	2264      	movs	r2, #100	@ 0x64
 8016074:	4639      	mov	r1, r7
 8016076:	f7f8 fbdb 	bl	800e830 <generate_type_name>
 801607a:	b1b8      	cbz	r0, 80160ac <create_topic+0x84>
 801607c:	6928      	ldr	r0, [r5, #16]
 801607e:	2306      	movs	r3, #6
 8016080:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016084:	f8cd 8000 	str.w	r8, [sp]
 8016088:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801608c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016090:	6811      	ldr	r1, [r2, #0]
 8016092:	696b      	ldr	r3, [r5, #20]
 8016094:	6922      	ldr	r2, [r4, #16]
 8016096:	f7f9 fd4f 	bl	800fb38 <uxr_buffer_create_topic_bin>
 801609a:	4602      	mov	r2, r0
 801609c:	6928      	ldr	r0, [r5, #16]
 801609e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80160a2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80160a6:	f7f8 fb8d 	bl	800e7c4 <run_xrce_session>
 80160aa:	b918      	cbnz	r0, 80160b4 <create_topic+0x8c>
 80160ac:	4620      	mov	r0, r4
 80160ae:	f7f8 fa87 	bl	800e5c0 <rmw_uxrce_fini_topic_memory>
 80160b2:	2400      	movs	r4, #0
 80160b4:	4620      	mov	r0, r4
 80160b6:	b004      	add	sp, #16
 80160b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160bc:	20010e54 	.word	0x20010e54
 80160c0:	20010ed0 	.word	0x20010ed0
 80160c4:	20010e94 	.word	0x20010e94

080160c8 <destroy_topic>:
 80160c8:	b538      	push	{r3, r4, r5, lr}
 80160ca:	6985      	ldr	r5, [r0, #24]
 80160cc:	b1d5      	cbz	r5, 8016104 <destroy_topic+0x3c>
 80160ce:	4604      	mov	r4, r0
 80160d0:	6928      	ldr	r0, [r5, #16]
 80160d2:	6922      	ldr	r2, [r4, #16]
 80160d4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80160d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80160dc:	6819      	ldr	r1, [r3, #0]
 80160de:	f7f9 fcad 	bl	800fa3c <uxr_buffer_delete_entity>
 80160e2:	4602      	mov	r2, r0
 80160e4:	6928      	ldr	r0, [r5, #16]
 80160e6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80160ea:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80160ee:	f7f8 fb69 	bl	800e7c4 <run_xrce_session>
 80160f2:	2800      	cmp	r0, #0
 80160f4:	4620      	mov	r0, r4
 80160f6:	bf14      	ite	ne
 80160f8:	2400      	movne	r4, #0
 80160fa:	2402      	moveq	r4, #2
 80160fc:	f7f8 fa60 	bl	800e5c0 <rmw_uxrce_fini_topic_memory>
 8016100:	4620      	mov	r0, r4
 8016102:	bd38      	pop	{r3, r4, r5, pc}
 8016104:	2401      	movs	r4, #1
 8016106:	4620      	mov	r0, r4
 8016108:	bd38      	pop	{r3, r4, r5, pc}
 801610a:	bf00      	nop

0801610c <rmw_send_request>:
 801610c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016110:	4604      	mov	r4, r0
 8016112:	6800      	ldr	r0, [r0, #0]
 8016114:	b08b      	sub	sp, #44	@ 0x2c
 8016116:	460e      	mov	r6, r1
 8016118:	4615      	mov	r5, r2
 801611a:	b128      	cbz	r0, 8016128 <rmw_send_request+0x1c>
 801611c:	4b21      	ldr	r3, [pc, #132]	@ (80161a4 <rmw_send_request+0x98>)
 801611e:	6819      	ldr	r1, [r3, #0]
 8016120:	f7ea f876 	bl	8000210 <strcmp>
 8016124:	2800      	cmp	r0, #0
 8016126:	d139      	bne.n	801619c <rmw_send_request+0x90>
 8016128:	6864      	ldr	r4, [r4, #4]
 801612a:	6963      	ldr	r3, [r4, #20]
 801612c:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8016130:	689b      	ldr	r3, [r3, #8]
 8016132:	4798      	blx	r3
 8016134:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016138:	4630      	mov	r0, r6
 801613a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801613e:	4798      	blx	r3
 8016140:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016144:	9000      	str	r0, [sp, #0]
 8016146:	6922      	ldr	r2, [r4, #16]
 8016148:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801614a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801614e:	ab02      	add	r3, sp, #8
 8016150:	f7fc f922 	bl	8012398 <uxr_prepare_output_stream>
 8016154:	2700      	movs	r7, #0
 8016156:	6028      	str	r0, [r5, #0]
 8016158:	606f      	str	r7, [r5, #4]
 801615a:	b198      	cbz	r0, 8016184 <rmw_send_request+0x78>
 801615c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016160:	a902      	add	r1, sp, #8
 8016162:	4630      	mov	r0, r6
 8016164:	4798      	blx	r3
 8016166:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801616a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801616e:	2b01      	cmp	r3, #1
 8016170:	d00c      	beq.n	801618c <rmw_send_request+0x80>
 8016172:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8016174:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016178:	f7fa fe66 	bl	8010e48 <uxr_run_session_until_confirm_delivery>
 801617c:	4638      	mov	r0, r7
 801617e:	b00b      	add	sp, #44	@ 0x2c
 8016180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016184:	2001      	movs	r0, #1
 8016186:	b00b      	add	sp, #44	@ 0x2c
 8016188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801618c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016190:	f7fa fa9a 	bl	80106c8 <uxr_flash_output_streams>
 8016194:	4638      	mov	r0, r7
 8016196:	b00b      	add	sp, #44	@ 0x2c
 8016198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801619c:	200c      	movs	r0, #12
 801619e:	b00b      	add	sp, #44	@ 0x2c
 80161a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161a4:	08019db8 	.word	0x08019db8

080161a8 <rmw_take_request>:
 80161a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161ac:	4605      	mov	r5, r0
 80161ae:	6800      	ldr	r0, [r0, #0]
 80161b0:	b089      	sub	sp, #36	@ 0x24
 80161b2:	460c      	mov	r4, r1
 80161b4:	4690      	mov	r8, r2
 80161b6:	461e      	mov	r6, r3
 80161b8:	b128      	cbz	r0, 80161c6 <rmw_take_request+0x1e>
 80161ba:	4b28      	ldr	r3, [pc, #160]	@ (801625c <rmw_take_request+0xb4>)
 80161bc:	6819      	ldr	r1, [r3, #0]
 80161be:	f7ea f827 	bl	8000210 <strcmp>
 80161c2:	2800      	cmp	r0, #0
 80161c4:	d146      	bne.n	8016254 <rmw_take_request+0xac>
 80161c6:	b10e      	cbz	r6, 80161cc <rmw_take_request+0x24>
 80161c8:	2300      	movs	r3, #0
 80161ca:	7033      	strb	r3, [r6, #0]
 80161cc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80161d0:	f7f8 fa7a 	bl	800e6c8 <rmw_uxrce_clean_expired_static_input_buffer>
 80161d4:	4648      	mov	r0, r9
 80161d6:	f7f8 fa4f 	bl	800e678 <rmw_uxrce_find_static_input_buffer_by_owner>
 80161da:	4607      	mov	r7, r0
 80161dc:	b3b0      	cbz	r0, 801624c <rmw_take_request+0xa4>
 80161de:	6885      	ldr	r5, [r0, #8]
 80161e0:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80161e4:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80161e8:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80161ec:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80161f0:	7423      	strb	r3, [r4, #16]
 80161f2:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80161f6:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80161fa:	74e2      	strb	r2, [r4, #19]
 80161fc:	f8a4 3011 	strh.w	r3, [r4, #17]
 8016200:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016204:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016208:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 801620c:	61e1      	str	r1, [r4, #28]
 801620e:	6162      	str	r2, [r4, #20]
 8016210:	61a3      	str	r3, [r4, #24]
 8016212:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016216:	689b      	ldr	r3, [r3, #8]
 8016218:	4798      	blx	r3
 801621a:	6844      	ldr	r4, [r0, #4]
 801621c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016220:	f105 0110 	add.w	r1, r5, #16
 8016224:	4668      	mov	r0, sp
 8016226:	f7f9 fb99 	bl	800f95c <ucdr_init_buffer>
 801622a:	68e3      	ldr	r3, [r4, #12]
 801622c:	4641      	mov	r1, r8
 801622e:	4668      	mov	r0, sp
 8016230:	4798      	blx	r3
 8016232:	4639      	mov	r1, r7
 8016234:	4604      	mov	r4, r0
 8016236:	480a      	ldr	r0, [pc, #40]	@ (8016260 <rmw_take_request+0xb8>)
 8016238:	f7ff fe70 	bl	8015f1c <put_memory>
 801623c:	b106      	cbz	r6, 8016240 <rmw_take_request+0x98>
 801623e:	7034      	strb	r4, [r6, #0]
 8016240:	f084 0001 	eor.w	r0, r4, #1
 8016244:	b2c0      	uxtb	r0, r0
 8016246:	b009      	add	sp, #36	@ 0x24
 8016248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801624c:	2001      	movs	r0, #1
 801624e:	b009      	add	sp, #36	@ 0x24
 8016250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016254:	200c      	movs	r0, #12
 8016256:	b009      	add	sp, #36	@ 0x24
 8016258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801625c:	08019db8 	.word	0x08019db8
 8016260:	20010e34 	.word	0x20010e34

08016264 <rmw_send_response>:
 8016264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016266:	4605      	mov	r5, r0
 8016268:	6800      	ldr	r0, [r0, #0]
 801626a:	b091      	sub	sp, #68	@ 0x44
 801626c:	460c      	mov	r4, r1
 801626e:	4616      	mov	r6, r2
 8016270:	b128      	cbz	r0, 801627e <rmw_send_response+0x1a>
 8016272:	4b29      	ldr	r3, [pc, #164]	@ (8016318 <rmw_send_response+0xb4>)
 8016274:	6819      	ldr	r1, [r3, #0]
 8016276:	f7e9 ffcb 	bl	8000210 <strcmp>
 801627a:	2800      	cmp	r0, #0
 801627c:	d141      	bne.n	8016302 <rmw_send_response+0x9e>
 801627e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8016282:	9306      	str	r3, [sp, #24]
 8016284:	4623      	mov	r3, r4
 8016286:	9207      	str	r2, [sp, #28]
 8016288:	f813 2b01 	ldrb.w	r2, [r3], #1
 801628c:	686d      	ldr	r5, [r5, #4]
 801628e:	789b      	ldrb	r3, [r3, #2]
 8016290:	68a1      	ldr	r1, [r4, #8]
 8016292:	f88d 2017 	strb.w	r2, [sp, #23]
 8016296:	f88d 3016 	strb.w	r3, [sp, #22]
 801629a:	68e2      	ldr	r2, [r4, #12]
 801629c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80162a0:	6860      	ldr	r0, [r4, #4]
 80162a2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80162a6:	ab02      	add	r3, sp, #8
 80162a8:	c307      	stmia	r3!, {r0, r1, r2}
 80162aa:	696b      	ldr	r3, [r5, #20]
 80162ac:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80162ae:	68db      	ldr	r3, [r3, #12]
 80162b0:	4798      	blx	r3
 80162b2:	6844      	ldr	r4, [r0, #4]
 80162b4:	4630      	mov	r0, r6
 80162b6:	6923      	ldr	r3, [r4, #16]
 80162b8:	4798      	blx	r3
 80162ba:	f100 0318 	add.w	r3, r0, #24
 80162be:	6938      	ldr	r0, [r7, #16]
 80162c0:	9300      	str	r3, [sp, #0]
 80162c2:	692a      	ldr	r2, [r5, #16]
 80162c4:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80162c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80162ca:	ab08      	add	r3, sp, #32
 80162cc:	f7fc f864 	bl	8012398 <uxr_prepare_output_stream>
 80162d0:	b910      	cbnz	r0, 80162d8 <rmw_send_response+0x74>
 80162d2:	2001      	movs	r0, #1
 80162d4:	b011      	add	sp, #68	@ 0x44
 80162d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162d8:	a902      	add	r1, sp, #8
 80162da:	a808      	add	r0, sp, #32
 80162dc:	f7fd f9a8 	bl	8013630 <uxr_serialize_SampleIdentity>
 80162e0:	68a3      	ldr	r3, [r4, #8]
 80162e2:	a908      	add	r1, sp, #32
 80162e4:	4630      	mov	r0, r6
 80162e6:	4798      	blx	r3
 80162e8:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80162ec:	6938      	ldr	r0, [r7, #16]
 80162ee:	2b01      	cmp	r3, #1
 80162f0:	d00a      	beq.n	8016308 <rmw_send_response+0xa4>
 80162f2:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80162f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80162f8:	f7fa fda6 	bl	8010e48 <uxr_run_session_until_confirm_delivery>
 80162fc:	2000      	movs	r0, #0
 80162fe:	b011      	add	sp, #68	@ 0x44
 8016300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016302:	200c      	movs	r0, #12
 8016304:	b011      	add	sp, #68	@ 0x44
 8016306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016308:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801630c:	f7fa f9dc 	bl	80106c8 <uxr_flash_output_streams>
 8016310:	2000      	movs	r0, #0
 8016312:	b011      	add	sp, #68	@ 0x44
 8016314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016316:	bf00      	nop
 8016318:	08019db8 	.word	0x08019db8

0801631c <rmw_take_response>:
 801631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016320:	4604      	mov	r4, r0
 8016322:	6800      	ldr	r0, [r0, #0]
 8016324:	b088      	sub	sp, #32
 8016326:	4688      	mov	r8, r1
 8016328:	4617      	mov	r7, r2
 801632a:	461d      	mov	r5, r3
 801632c:	b120      	cbz	r0, 8016338 <rmw_take_response+0x1c>
 801632e:	4b1e      	ldr	r3, [pc, #120]	@ (80163a8 <rmw_take_response+0x8c>)
 8016330:	6819      	ldr	r1, [r3, #0]
 8016332:	f7e9 ff6d 	bl	8000210 <strcmp>
 8016336:	bb78      	cbnz	r0, 8016398 <rmw_take_response+0x7c>
 8016338:	b10d      	cbz	r5, 801633e <rmw_take_response+0x22>
 801633a:	2300      	movs	r3, #0
 801633c:	702b      	strb	r3, [r5, #0]
 801633e:	6864      	ldr	r4, [r4, #4]
 8016340:	f7f8 f9c2 	bl	800e6c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016344:	4620      	mov	r0, r4
 8016346:	f7f8 f997 	bl	800e678 <rmw_uxrce_find_static_input_buffer_by_owner>
 801634a:	4606      	mov	r6, r0
 801634c:	b340      	cbz	r0, 80163a0 <rmw_take_response+0x84>
 801634e:	6963      	ldr	r3, [r4, #20]
 8016350:	6884      	ldr	r4, [r0, #8]
 8016352:	68db      	ldr	r3, [r3, #12]
 8016354:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016358:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801635c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8016360:	4798      	blx	r3
 8016362:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016366:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801636a:	f104 0110 	add.w	r1, r4, #16
 801636e:	4668      	mov	r0, sp
 8016370:	f7f9 faf4 	bl	800f95c <ucdr_init_buffer>
 8016374:	4639      	mov	r1, r7
 8016376:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801637a:	4668      	mov	r0, sp
 801637c:	4798      	blx	r3
 801637e:	4631      	mov	r1, r6
 8016380:	4604      	mov	r4, r0
 8016382:	480a      	ldr	r0, [pc, #40]	@ (80163ac <rmw_take_response+0x90>)
 8016384:	f7ff fdca 	bl	8015f1c <put_memory>
 8016388:	b105      	cbz	r5, 801638c <rmw_take_response+0x70>
 801638a:	702c      	strb	r4, [r5, #0]
 801638c:	f084 0001 	eor.w	r0, r4, #1
 8016390:	b2c0      	uxtb	r0, r0
 8016392:	b008      	add	sp, #32
 8016394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016398:	200c      	movs	r0, #12
 801639a:	b008      	add	sp, #32
 801639c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163a0:	2001      	movs	r0, #1
 80163a2:	b008      	add	sp, #32
 80163a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163a8:	08019db8 	.word	0x08019db8
 80163ac:	20010e34 	.word	0x20010e34

080163b0 <rmw_trigger_guard_condition>:
 80163b0:	b160      	cbz	r0, 80163cc <rmw_trigger_guard_condition+0x1c>
 80163b2:	b510      	push	{r4, lr}
 80163b4:	4604      	mov	r4, r0
 80163b6:	6800      	ldr	r0, [r0, #0]
 80163b8:	f7f8 fa84 	bl	800e8c4 <is_uxrce_rmw_identifier_valid>
 80163bc:	b908      	cbnz	r0, 80163c2 <rmw_trigger_guard_condition+0x12>
 80163be:	2001      	movs	r0, #1
 80163c0:	bd10      	pop	{r4, pc}
 80163c2:	6863      	ldr	r3, [r4, #4]
 80163c4:	2201      	movs	r2, #1
 80163c6:	741a      	strb	r2, [r3, #16]
 80163c8:	2000      	movs	r0, #0
 80163ca:	bd10      	pop	{r4, pc}
 80163cc:	2001      	movs	r0, #1
 80163ce:	4770      	bx	lr

080163d0 <rmw_wait>:
 80163d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163d4:	b089      	sub	sp, #36	@ 0x24
 80163d6:	4605      	mov	r5, r0
 80163d8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80163da:	460e      	mov	r6, r1
 80163dc:	4698      	mov	r8, r3
 80163de:	4691      	mov	r9, r2
 80163e0:	2a00      	cmp	r2, #0
 80163e2:	f000 810a 	beq.w	80165fa <rmw_wait+0x22a>
 80163e6:	b16c      	cbz	r4, 8016404 <rmw_wait+0x34>
 80163e8:	4bae      	ldr	r3, [pc, #696]	@ (80166a4 <rmw_wait+0x2d4>)
 80163ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80163ec:	af04      	add	r7, sp, #16
 80163ee:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80163f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80163f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80163fa:	f7ff fb9d 	bl	8015b38 <rmw_time_equal>
 80163fe:	2800      	cmp	r0, #0
 8016400:	f000 8127 	beq.w	8016652 <rmw_wait+0x282>
 8016404:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016408:	f7f8 f95e 	bl	800e6c8 <rmw_uxrce_clean_expired_static_input_buffer>
 801640c:	4ba6      	ldr	r3, [pc, #664]	@ (80166a8 <rmw_wait+0x2d8>)
 801640e:	681c      	ldr	r4, [r3, #0]
 8016410:	b14c      	cbz	r4, 8016426 <rmw_wait+0x56>
 8016412:	4623      	mov	r3, r4
 8016414:	2100      	movs	r1, #0
 8016416:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801641a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801641e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8016422:	2b00      	cmp	r3, #0
 8016424:	d1f7      	bne.n	8016416 <rmw_wait+0x46>
 8016426:	f1b9 0f00 	cmp.w	r9, #0
 801642a:	d011      	beq.n	8016450 <rmw_wait+0x80>
 801642c:	f8d9 1000 	ldr.w	r1, [r9]
 8016430:	b171      	cbz	r1, 8016450 <rmw_wait+0x80>
 8016432:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016436:	2300      	movs	r3, #0
 8016438:	2001      	movs	r0, #1
 801643a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801643e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016440:	6912      	ldr	r2, [r2, #16]
 8016442:	3301      	adds	r3, #1
 8016444:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016448:	4299      	cmp	r1, r3
 801644a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801644e:	d1f4      	bne.n	801643a <rmw_wait+0x6a>
 8016450:	f1b8 0f00 	cmp.w	r8, #0
 8016454:	d011      	beq.n	801647a <rmw_wait+0xaa>
 8016456:	f8d8 1000 	ldr.w	r1, [r8]
 801645a:	b171      	cbz	r1, 801647a <rmw_wait+0xaa>
 801645c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016460:	2300      	movs	r3, #0
 8016462:	2001      	movs	r0, #1
 8016464:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016468:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801646a:	6912      	ldr	r2, [r2, #16]
 801646c:	3301      	adds	r3, #1
 801646e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016472:	4299      	cmp	r1, r3
 8016474:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016478:	d1f4      	bne.n	8016464 <rmw_wait+0x94>
 801647a:	b185      	cbz	r5, 801649e <rmw_wait+0xce>
 801647c:	6829      	ldr	r1, [r5, #0]
 801647e:	b171      	cbz	r1, 801649e <rmw_wait+0xce>
 8016480:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8016484:	2300      	movs	r3, #0
 8016486:	2001      	movs	r0, #1
 8016488:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801648c:	6a12      	ldr	r2, [r2, #32]
 801648e:	6912      	ldr	r2, [r2, #16]
 8016490:	3301      	adds	r3, #1
 8016492:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016496:	4299      	cmp	r1, r3
 8016498:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801649c:	d1f4      	bne.n	8016488 <rmw_wait+0xb8>
 801649e:	b34c      	cbz	r4, 80164f4 <rmw_wait+0x124>
 80164a0:	4622      	mov	r2, r4
 80164a2:	2300      	movs	r3, #0
 80164a4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80164a8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80164ac:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80164b0:	440b      	add	r3, r1
 80164b2:	b2db      	uxtb	r3, r3
 80164b4:	2a00      	cmp	r2, #0
 80164b6:	d1f5      	bne.n	80164a4 <rmw_wait+0xd4>
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	f000 8084 	beq.w	80165c6 <rmw_wait+0x1f6>
 80164be:	1c7a      	adds	r2, r7, #1
 80164c0:	d00d      	beq.n	80164de <rmw_wait+0x10e>
 80164c2:	ee07 7a90 	vmov	s15, r7
 80164c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80164ca:	ee07 3a90 	vmov	s15, r3
 80164ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80164d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80164d6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80164da:	ee17 7a90 	vmov	r7, s15
 80164de:	68a0      	ldr	r0, [r4, #8]
 80164e0:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80164e4:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	f040 8090 	bne.w	801660e <rmw_wait+0x23e>
 80164ee:	6864      	ldr	r4, [r4, #4]
 80164f0:	2c00      	cmp	r4, #0
 80164f2:	d1f4      	bne.n	80164de <rmw_wait+0x10e>
 80164f4:	f1b9 0f00 	cmp.w	r9, #0
 80164f8:	f000 80bc 	beq.w	8016674 <rmw_wait+0x2a4>
 80164fc:	f8d9 7000 	ldr.w	r7, [r9]
 8016500:	2f00      	cmp	r7, #0
 8016502:	f000 808e 	beq.w	8016622 <rmw_wait+0x252>
 8016506:	2400      	movs	r4, #0
 8016508:	4627      	mov	r7, r4
 801650a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801650e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016512:	f7f8 f8b1 	bl	800e678 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016516:	2800      	cmp	r0, #0
 8016518:	d05f      	beq.n	80165da <rmw_wait+0x20a>
 801651a:	f8d9 3000 	ldr.w	r3, [r9]
 801651e:	3401      	adds	r4, #1
 8016520:	42a3      	cmp	r3, r4
 8016522:	f04f 0701 	mov.w	r7, #1
 8016526:	d8f0      	bhi.n	801650a <rmw_wait+0x13a>
 8016528:	f1b8 0f00 	cmp.w	r8, #0
 801652c:	d012      	beq.n	8016554 <rmw_wait+0x184>
 801652e:	f8d8 3000 	ldr.w	r3, [r8]
 8016532:	b17b      	cbz	r3, 8016554 <rmw_wait+0x184>
 8016534:	2400      	movs	r4, #0
 8016536:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801653a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801653e:	f7f8 f89b 	bl	800e678 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016542:	2800      	cmp	r0, #0
 8016544:	d051      	beq.n	80165ea <rmw_wait+0x21a>
 8016546:	f8d8 3000 	ldr.w	r3, [r8]
 801654a:	3401      	adds	r4, #1
 801654c:	42a3      	cmp	r3, r4
 801654e:	f04f 0701 	mov.w	r7, #1
 8016552:	d8f0      	bhi.n	8016536 <rmw_wait+0x166>
 8016554:	b1dd      	cbz	r5, 801658e <rmw_wait+0x1be>
 8016556:	682b      	ldr	r3, [r5, #0]
 8016558:	b1cb      	cbz	r3, 801658e <rmw_wait+0x1be>
 801655a:	2400      	movs	r4, #0
 801655c:	686b      	ldr	r3, [r5, #4]
 801655e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016562:	f7f8 f889 	bl	800e678 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016566:	b158      	cbz	r0, 8016580 <rmw_wait+0x1b0>
 8016568:	682b      	ldr	r3, [r5, #0]
 801656a:	3401      	adds	r4, #1
 801656c:	42a3      	cmp	r3, r4
 801656e:	d969      	bls.n	8016644 <rmw_wait+0x274>
 8016570:	686b      	ldr	r3, [r5, #4]
 8016572:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016576:	2701      	movs	r7, #1
 8016578:	f7f8 f87e 	bl	800e678 <rmw_uxrce_find_static_input_buffer_by_owner>
 801657c:	2800      	cmp	r0, #0
 801657e:	d1f3      	bne.n	8016568 <rmw_wait+0x198>
 8016580:	e9d5 3200 	ldrd	r3, r2, [r5]
 8016584:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016588:	3401      	adds	r4, #1
 801658a:	42a3      	cmp	r3, r4
 801658c:	d8e6      	bhi.n	801655c <rmw_wait+0x18c>
 801658e:	b1a6      	cbz	r6, 80165ba <rmw_wait+0x1ea>
 8016590:	6834      	ldr	r4, [r6, #0]
 8016592:	b194      	cbz	r4, 80165ba <rmw_wait+0x1ea>
 8016594:	2300      	movs	r3, #0
 8016596:	461d      	mov	r5, r3
 8016598:	e004      	b.n	80165a4 <rmw_wait+0x1d4>
 801659a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801659e:	3301      	adds	r3, #1
 80165a0:	42a3      	cmp	r3, r4
 80165a2:	d00a      	beq.n	80165ba <rmw_wait+0x1ea>
 80165a4:	6870      	ldr	r0, [r6, #4]
 80165a6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80165aa:	7c0a      	ldrb	r2, [r1, #16]
 80165ac:	2a00      	cmp	r2, #0
 80165ae:	d0f4      	beq.n	801659a <rmw_wait+0x1ca>
 80165b0:	3301      	adds	r3, #1
 80165b2:	42a3      	cmp	r3, r4
 80165b4:	740d      	strb	r5, [r1, #16]
 80165b6:	4617      	mov	r7, r2
 80165b8:	d1f4      	bne.n	80165a4 <rmw_wait+0x1d4>
 80165ba:	2f00      	cmp	r7, #0
 80165bc:	d03e      	beq.n	801663c <rmw_wait+0x26c>
 80165be:	2000      	movs	r0, #0
 80165c0:	b009      	add	sp, #36	@ 0x24
 80165c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165c6:	68a0      	ldr	r0, [r4, #8]
 80165c8:	2100      	movs	r1, #0
 80165ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80165ce:	f7fa fc01 	bl	8010dd4 <uxr_run_session_timeout>
 80165d2:	6864      	ldr	r4, [r4, #4]
 80165d4:	2c00      	cmp	r4, #0
 80165d6:	d1f6      	bne.n	80165c6 <rmw_wait+0x1f6>
 80165d8:	e78c      	b.n	80164f4 <rmw_wait+0x124>
 80165da:	e9d9 3200 	ldrd	r3, r2, [r9]
 80165de:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80165e2:	3401      	adds	r4, #1
 80165e4:	42a3      	cmp	r3, r4
 80165e6:	d890      	bhi.n	801650a <rmw_wait+0x13a>
 80165e8:	e79e      	b.n	8016528 <rmw_wait+0x158>
 80165ea:	e9d8 3200 	ldrd	r3, r2, [r8]
 80165ee:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80165f2:	3401      	adds	r4, #1
 80165f4:	429c      	cmp	r4, r3
 80165f6:	d39e      	bcc.n	8016536 <rmw_wait+0x166>
 80165f8:	e7ac      	b.n	8016554 <rmw_wait+0x184>
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	f47f aef3 	bne.w	80163e6 <rmw_wait+0x16>
 8016600:	2800      	cmp	r0, #0
 8016602:	f47f aef0 	bne.w	80163e6 <rmw_wait+0x16>
 8016606:	2900      	cmp	r1, #0
 8016608:	f47f aeed 	bne.w	80163e6 <rmw_wait+0x16>
 801660c:	e7d7      	b.n	80165be <rmw_wait+0x1ee>
 801660e:	4639      	mov	r1, r7
 8016610:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016614:	f7fa fbf8 	bl	8010e08 <uxr_run_session_until_data>
 8016618:	6864      	ldr	r4, [r4, #4]
 801661a:	2c00      	cmp	r4, #0
 801661c:	f47f af5f 	bne.w	80164de <rmw_wait+0x10e>
 8016620:	e768      	b.n	80164f4 <rmw_wait+0x124>
 8016622:	f1b8 0f00 	cmp.w	r8, #0
 8016626:	d032      	beq.n	801668e <rmw_wait+0x2be>
 8016628:	f8d8 3000 	ldr.w	r3, [r8]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d181      	bne.n	8016534 <rmw_wait+0x164>
 8016630:	461f      	mov	r7, r3
 8016632:	2d00      	cmp	r5, #0
 8016634:	d18f      	bne.n	8016556 <rmw_wait+0x186>
 8016636:	462f      	mov	r7, r5
 8016638:	2e00      	cmp	r6, #0
 801663a:	d1a9      	bne.n	8016590 <rmw_wait+0x1c0>
 801663c:	2002      	movs	r0, #2
 801663e:	b009      	add	sp, #36	@ 0x24
 8016640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016644:	2e00      	cmp	r6, #0
 8016646:	d0ba      	beq.n	80165be <rmw_wait+0x1ee>
 8016648:	6834      	ldr	r4, [r6, #0]
 801664a:	2701      	movs	r7, #1
 801664c:	2c00      	cmp	r4, #0
 801664e:	d1a1      	bne.n	8016594 <rmw_wait+0x1c4>
 8016650:	e7b5      	b.n	80165be <rmw_wait+0x1ee>
 8016652:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016656:	f7ff fac3 	bl	8015be0 <rmw_time_total_nsec>
 801665a:	2300      	movs	r3, #0
 801665c:	4a13      	ldr	r2, [pc, #76]	@ (80166ac <rmw_wait+0x2dc>)
 801665e:	f7ea faad 	bl	8000bbc <__aeabi_uldivmod>
 8016662:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8016666:	f171 0300 	sbcs.w	r3, r1, #0
 801666a:	4607      	mov	r7, r0
 801666c:	bfa8      	it	ge
 801666e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8016672:	e6c9      	b.n	8016408 <rmw_wait+0x38>
 8016674:	f1b8 0f00 	cmp.w	r8, #0
 8016678:	d009      	beq.n	801668e <rmw_wait+0x2be>
 801667a:	f8d8 3000 	ldr.w	r3, [r8]
 801667e:	464f      	mov	r7, r9
 8016680:	2b00      	cmp	r3, #0
 8016682:	f47f af57 	bne.w	8016534 <rmw_wait+0x164>
 8016686:	2d00      	cmp	r5, #0
 8016688:	f47f af65 	bne.w	8016556 <rmw_wait+0x186>
 801668c:	e7d3      	b.n	8016636 <rmw_wait+0x266>
 801668e:	b17d      	cbz	r5, 80166b0 <rmw_wait+0x2e0>
 8016690:	682b      	ldr	r3, [r5, #0]
 8016692:	4647      	mov	r7, r8
 8016694:	2b00      	cmp	r3, #0
 8016696:	f47f af60 	bne.w	801655a <rmw_wait+0x18a>
 801669a:	2e00      	cmp	r6, #0
 801669c:	f47f af78 	bne.w	8016590 <rmw_wait+0x1c0>
 80166a0:	e7cc      	b.n	801663c <rmw_wait+0x26c>
 80166a2:	bf00      	nop
 80166a4:	080192f8 	.word	0x080192f8
 80166a8:	20010e24 	.word	0x20010e24
 80166ac:	000f4240 	.word	0x000f4240
 80166b0:	2e00      	cmp	r6, #0
 80166b2:	d0c3      	beq.n	801663c <rmw_wait+0x26c>
 80166b4:	6834      	ldr	r4, [r6, #0]
 80166b6:	462f      	mov	r7, r5
 80166b8:	2c00      	cmp	r4, #0
 80166ba:	f47f af6b 	bne.w	8016594 <rmw_wait+0x1c4>
 80166be:	e7bd      	b.n	801663c <rmw_wait+0x26c>

080166c0 <rmw_create_wait_set>:
 80166c0:	b508      	push	{r3, lr}
 80166c2:	4803      	ldr	r0, [pc, #12]	@ (80166d0 <rmw_create_wait_set+0x10>)
 80166c4:	f7ff fc1a 	bl	8015efc <get_memory>
 80166c8:	b108      	cbz	r0, 80166ce <rmw_create_wait_set+0xe>
 80166ca:	6880      	ldr	r0, [r0, #8]
 80166cc:	3010      	adds	r0, #16
 80166ce:	bd08      	pop	{r3, pc}
 80166d0:	20010e64 	.word	0x20010e64

080166d4 <rmw_destroy_wait_set>:
 80166d4:	b508      	push	{r3, lr}
 80166d6:	4b08      	ldr	r3, [pc, #32]	@ (80166f8 <rmw_destroy_wait_set+0x24>)
 80166d8:	6819      	ldr	r1, [r3, #0]
 80166da:	b911      	cbnz	r1, 80166e2 <rmw_destroy_wait_set+0xe>
 80166dc:	e00a      	b.n	80166f4 <rmw_destroy_wait_set+0x20>
 80166de:	6849      	ldr	r1, [r1, #4]
 80166e0:	b141      	cbz	r1, 80166f4 <rmw_destroy_wait_set+0x20>
 80166e2:	688b      	ldr	r3, [r1, #8]
 80166e4:	3310      	adds	r3, #16
 80166e6:	4298      	cmp	r0, r3
 80166e8:	d1f9      	bne.n	80166de <rmw_destroy_wait_set+0xa>
 80166ea:	4803      	ldr	r0, [pc, #12]	@ (80166f8 <rmw_destroy_wait_set+0x24>)
 80166ec:	f7ff fc16 	bl	8015f1c <put_memory>
 80166f0:	2000      	movs	r0, #0
 80166f2:	bd08      	pop	{r3, pc}
 80166f4:	2001      	movs	r0, #1
 80166f6:	bd08      	pop	{r3, pc}
 80166f8:	20010e64 	.word	0x20010e64

080166fc <rmw_uros_epoch_nanos>:
 80166fc:	4b05      	ldr	r3, [pc, #20]	@ (8016714 <rmw_uros_epoch_nanos+0x18>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	b123      	cbz	r3, 801670c <rmw_uros_epoch_nanos+0x10>
 8016702:	6898      	ldr	r0, [r3, #8]
 8016704:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016708:	f7f9 bfd4 	b.w	80106b4 <uxr_epoch_nanos>
 801670c:	2000      	movs	r0, #0
 801670e:	2100      	movs	r1, #0
 8016710:	4770      	bx	lr
 8016712:	bf00      	nop
 8016714:	20010e24 	.word	0x20010e24

08016718 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801671c:	6805      	ldr	r5, [r0, #0]
 801671e:	4604      	mov	r4, r0
 8016720:	4628      	mov	r0, r5
 8016722:	460e      	mov	r6, r1
 8016724:	f7e9 fd74 	bl	8000210 <strcmp>
 8016728:	b1c8      	cbz	r0, 801675e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801672a:	4b11      	ldr	r3, [pc, #68]	@ (8016770 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	429d      	cmp	r5, r3
 8016730:	d112      	bne.n	8016758 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8016732:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016736:	f8d8 4000 	ldr.w	r4, [r8]
 801673a:	b16c      	cbz	r4, 8016758 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801673c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016740:	2700      	movs	r7, #0
 8016742:	3d04      	subs	r5, #4
 8016744:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8016748:	4631      	mov	r1, r6
 801674a:	f7e9 fd61 	bl	8000210 <strcmp>
 801674e:	00bb      	lsls	r3, r7, #2
 8016750:	b140      	cbz	r0, 8016764 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8016752:	3701      	adds	r7, #1
 8016754:	42bc      	cmp	r4, r7
 8016756:	d1f5      	bne.n	8016744 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8016758:	2000      	movs	r0, #0
 801675a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801675e:	4620      	mov	r0, r4
 8016760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016764:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801676c:	58d3      	ldr	r3, [r2, r3]
 801676e:	4718      	bx	r3
 8016770:	200000c4 	.word	0x200000c4

08016774 <std_msgs__msg__Int32__init>:
 8016774:	3800      	subs	r0, #0
 8016776:	bf18      	it	ne
 8016778:	2001      	movne	r0, #1
 801677a:	4770      	bx	lr

0801677c <std_msgs__msg__Int32__fini>:
 801677c:	4770      	bx	lr
 801677e:	bf00      	nop

08016780 <ucdr_serialize_endian_array_char>:
 8016780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016784:	4619      	mov	r1, r3
 8016786:	461f      	mov	r7, r3
 8016788:	4605      	mov	r5, r0
 801678a:	4690      	mov	r8, r2
 801678c:	f7f9 f892 	bl	800f8b4 <ucdr_check_buffer_available_for>
 8016790:	b9e0      	cbnz	r0, 80167cc <ucdr_serialize_endian_array_char+0x4c>
 8016792:	463e      	mov	r6, r7
 8016794:	e009      	b.n	80167aa <ucdr_serialize_endian_array_char+0x2a>
 8016796:	68a8      	ldr	r0, [r5, #8]
 8016798:	f001 fe77 	bl	801848a <memcpy>
 801679c:	68ab      	ldr	r3, [r5, #8]
 801679e:	6928      	ldr	r0, [r5, #16]
 80167a0:	4423      	add	r3, r4
 80167a2:	4420      	add	r0, r4
 80167a4:	1b36      	subs	r6, r6, r4
 80167a6:	60ab      	str	r3, [r5, #8]
 80167a8:	6128      	str	r0, [r5, #16]
 80167aa:	4631      	mov	r1, r6
 80167ac:	2201      	movs	r2, #1
 80167ae:	4628      	mov	r0, r5
 80167b0:	f7f9 f908 	bl	800f9c4 <ucdr_check_final_buffer_behavior_array>
 80167b4:	1bb9      	subs	r1, r7, r6
 80167b6:	4441      	add	r1, r8
 80167b8:	4604      	mov	r4, r0
 80167ba:	4602      	mov	r2, r0
 80167bc:	2800      	cmp	r0, #0
 80167be:	d1ea      	bne.n	8016796 <ucdr_serialize_endian_array_char+0x16>
 80167c0:	2301      	movs	r3, #1
 80167c2:	7da8      	ldrb	r0, [r5, #22]
 80167c4:	756b      	strb	r3, [r5, #21]
 80167c6:	4058      	eors	r0, r3
 80167c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167cc:	463a      	mov	r2, r7
 80167ce:	68a8      	ldr	r0, [r5, #8]
 80167d0:	4641      	mov	r1, r8
 80167d2:	f001 fe5a 	bl	801848a <memcpy>
 80167d6:	68aa      	ldr	r2, [r5, #8]
 80167d8:	692b      	ldr	r3, [r5, #16]
 80167da:	443a      	add	r2, r7
 80167dc:	443b      	add	r3, r7
 80167de:	60aa      	str	r2, [r5, #8]
 80167e0:	612b      	str	r3, [r5, #16]
 80167e2:	e7ed      	b.n	80167c0 <ucdr_serialize_endian_array_char+0x40>

080167e4 <ucdr_deserialize_endian_array_char>:
 80167e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167e8:	4619      	mov	r1, r3
 80167ea:	461f      	mov	r7, r3
 80167ec:	4605      	mov	r5, r0
 80167ee:	4690      	mov	r8, r2
 80167f0:	f7f9 f860 	bl	800f8b4 <ucdr_check_buffer_available_for>
 80167f4:	b9e0      	cbnz	r0, 8016830 <ucdr_deserialize_endian_array_char+0x4c>
 80167f6:	463e      	mov	r6, r7
 80167f8:	e009      	b.n	801680e <ucdr_deserialize_endian_array_char+0x2a>
 80167fa:	68a9      	ldr	r1, [r5, #8]
 80167fc:	f001 fe45 	bl	801848a <memcpy>
 8016800:	68ab      	ldr	r3, [r5, #8]
 8016802:	6928      	ldr	r0, [r5, #16]
 8016804:	4423      	add	r3, r4
 8016806:	4420      	add	r0, r4
 8016808:	1b36      	subs	r6, r6, r4
 801680a:	60ab      	str	r3, [r5, #8]
 801680c:	6128      	str	r0, [r5, #16]
 801680e:	2201      	movs	r2, #1
 8016810:	4631      	mov	r1, r6
 8016812:	4628      	mov	r0, r5
 8016814:	f7f9 f8d6 	bl	800f9c4 <ucdr_check_final_buffer_behavior_array>
 8016818:	4604      	mov	r4, r0
 801681a:	1bb8      	subs	r0, r7, r6
 801681c:	4440      	add	r0, r8
 801681e:	4622      	mov	r2, r4
 8016820:	2c00      	cmp	r4, #0
 8016822:	d1ea      	bne.n	80167fa <ucdr_deserialize_endian_array_char+0x16>
 8016824:	2301      	movs	r3, #1
 8016826:	7da8      	ldrb	r0, [r5, #22]
 8016828:	756b      	strb	r3, [r5, #21]
 801682a:	4058      	eors	r0, r3
 801682c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016830:	463a      	mov	r2, r7
 8016832:	68a9      	ldr	r1, [r5, #8]
 8016834:	4640      	mov	r0, r8
 8016836:	f001 fe28 	bl	801848a <memcpy>
 801683a:	68aa      	ldr	r2, [r5, #8]
 801683c:	692b      	ldr	r3, [r5, #16]
 801683e:	443a      	add	r2, r7
 8016840:	443b      	add	r3, r7
 8016842:	60aa      	str	r2, [r5, #8]
 8016844:	612b      	str	r3, [r5, #16]
 8016846:	e7ed      	b.n	8016824 <ucdr_deserialize_endian_array_char+0x40>

08016848 <ucdr_serialize_array_uint8_t>:
 8016848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801684c:	4688      	mov	r8, r1
 801684e:	4611      	mov	r1, r2
 8016850:	4617      	mov	r7, r2
 8016852:	4605      	mov	r5, r0
 8016854:	f7f9 f82e 	bl	800f8b4 <ucdr_check_buffer_available_for>
 8016858:	b9e0      	cbnz	r0, 8016894 <ucdr_serialize_array_uint8_t+0x4c>
 801685a:	463e      	mov	r6, r7
 801685c:	e009      	b.n	8016872 <ucdr_serialize_array_uint8_t+0x2a>
 801685e:	68a8      	ldr	r0, [r5, #8]
 8016860:	f001 fe13 	bl	801848a <memcpy>
 8016864:	68aa      	ldr	r2, [r5, #8]
 8016866:	692b      	ldr	r3, [r5, #16]
 8016868:	4422      	add	r2, r4
 801686a:	4423      	add	r3, r4
 801686c:	1b36      	subs	r6, r6, r4
 801686e:	60aa      	str	r2, [r5, #8]
 8016870:	612b      	str	r3, [r5, #16]
 8016872:	4631      	mov	r1, r6
 8016874:	2201      	movs	r2, #1
 8016876:	4628      	mov	r0, r5
 8016878:	f7f9 f8a4 	bl	800f9c4 <ucdr_check_final_buffer_behavior_array>
 801687c:	1bb9      	subs	r1, r7, r6
 801687e:	4441      	add	r1, r8
 8016880:	4604      	mov	r4, r0
 8016882:	4602      	mov	r2, r0
 8016884:	2800      	cmp	r0, #0
 8016886:	d1ea      	bne.n	801685e <ucdr_serialize_array_uint8_t+0x16>
 8016888:	2301      	movs	r3, #1
 801688a:	7da8      	ldrb	r0, [r5, #22]
 801688c:	756b      	strb	r3, [r5, #21]
 801688e:	4058      	eors	r0, r3
 8016890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016894:	463a      	mov	r2, r7
 8016896:	68a8      	ldr	r0, [r5, #8]
 8016898:	4641      	mov	r1, r8
 801689a:	f001 fdf6 	bl	801848a <memcpy>
 801689e:	68aa      	ldr	r2, [r5, #8]
 80168a0:	692b      	ldr	r3, [r5, #16]
 80168a2:	443a      	add	r2, r7
 80168a4:	443b      	add	r3, r7
 80168a6:	60aa      	str	r2, [r5, #8]
 80168a8:	612b      	str	r3, [r5, #16]
 80168aa:	e7ed      	b.n	8016888 <ucdr_serialize_array_uint8_t+0x40>

080168ac <ucdr_serialize_endian_array_uint8_t>:
 80168ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168b0:	4619      	mov	r1, r3
 80168b2:	461f      	mov	r7, r3
 80168b4:	4605      	mov	r5, r0
 80168b6:	4690      	mov	r8, r2
 80168b8:	f7f8 fffc 	bl	800f8b4 <ucdr_check_buffer_available_for>
 80168bc:	b9e0      	cbnz	r0, 80168f8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80168be:	463e      	mov	r6, r7
 80168c0:	e009      	b.n	80168d6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80168c2:	68a8      	ldr	r0, [r5, #8]
 80168c4:	f001 fde1 	bl	801848a <memcpy>
 80168c8:	68ab      	ldr	r3, [r5, #8]
 80168ca:	6928      	ldr	r0, [r5, #16]
 80168cc:	4423      	add	r3, r4
 80168ce:	4420      	add	r0, r4
 80168d0:	1b36      	subs	r6, r6, r4
 80168d2:	60ab      	str	r3, [r5, #8]
 80168d4:	6128      	str	r0, [r5, #16]
 80168d6:	4631      	mov	r1, r6
 80168d8:	2201      	movs	r2, #1
 80168da:	4628      	mov	r0, r5
 80168dc:	f7f9 f872 	bl	800f9c4 <ucdr_check_final_buffer_behavior_array>
 80168e0:	1bb9      	subs	r1, r7, r6
 80168e2:	4441      	add	r1, r8
 80168e4:	4604      	mov	r4, r0
 80168e6:	4602      	mov	r2, r0
 80168e8:	2800      	cmp	r0, #0
 80168ea:	d1ea      	bne.n	80168c2 <ucdr_serialize_endian_array_uint8_t+0x16>
 80168ec:	2301      	movs	r3, #1
 80168ee:	7da8      	ldrb	r0, [r5, #22]
 80168f0:	756b      	strb	r3, [r5, #21]
 80168f2:	4058      	eors	r0, r3
 80168f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168f8:	463a      	mov	r2, r7
 80168fa:	68a8      	ldr	r0, [r5, #8]
 80168fc:	4641      	mov	r1, r8
 80168fe:	f001 fdc4 	bl	801848a <memcpy>
 8016902:	68aa      	ldr	r2, [r5, #8]
 8016904:	692b      	ldr	r3, [r5, #16]
 8016906:	443a      	add	r2, r7
 8016908:	443b      	add	r3, r7
 801690a:	60aa      	str	r2, [r5, #8]
 801690c:	612b      	str	r3, [r5, #16]
 801690e:	e7ed      	b.n	80168ec <ucdr_serialize_endian_array_uint8_t+0x40>

08016910 <ucdr_deserialize_array_uint8_t>:
 8016910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016914:	4688      	mov	r8, r1
 8016916:	4611      	mov	r1, r2
 8016918:	4617      	mov	r7, r2
 801691a:	4605      	mov	r5, r0
 801691c:	f7f8 ffca 	bl	800f8b4 <ucdr_check_buffer_available_for>
 8016920:	b9e0      	cbnz	r0, 801695c <ucdr_deserialize_array_uint8_t+0x4c>
 8016922:	463e      	mov	r6, r7
 8016924:	e009      	b.n	801693a <ucdr_deserialize_array_uint8_t+0x2a>
 8016926:	68a9      	ldr	r1, [r5, #8]
 8016928:	f001 fdaf 	bl	801848a <memcpy>
 801692c:	68aa      	ldr	r2, [r5, #8]
 801692e:	692b      	ldr	r3, [r5, #16]
 8016930:	4422      	add	r2, r4
 8016932:	4423      	add	r3, r4
 8016934:	1b36      	subs	r6, r6, r4
 8016936:	60aa      	str	r2, [r5, #8]
 8016938:	612b      	str	r3, [r5, #16]
 801693a:	2201      	movs	r2, #1
 801693c:	4631      	mov	r1, r6
 801693e:	4628      	mov	r0, r5
 8016940:	f7f9 f840 	bl	800f9c4 <ucdr_check_final_buffer_behavior_array>
 8016944:	4604      	mov	r4, r0
 8016946:	1bb8      	subs	r0, r7, r6
 8016948:	4440      	add	r0, r8
 801694a:	4622      	mov	r2, r4
 801694c:	2c00      	cmp	r4, #0
 801694e:	d1ea      	bne.n	8016926 <ucdr_deserialize_array_uint8_t+0x16>
 8016950:	2301      	movs	r3, #1
 8016952:	7da8      	ldrb	r0, [r5, #22]
 8016954:	756b      	strb	r3, [r5, #21]
 8016956:	4058      	eors	r0, r3
 8016958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801695c:	463a      	mov	r2, r7
 801695e:	68a9      	ldr	r1, [r5, #8]
 8016960:	4640      	mov	r0, r8
 8016962:	f001 fd92 	bl	801848a <memcpy>
 8016966:	68aa      	ldr	r2, [r5, #8]
 8016968:	692b      	ldr	r3, [r5, #16]
 801696a:	443a      	add	r2, r7
 801696c:	443b      	add	r3, r7
 801696e:	60aa      	str	r2, [r5, #8]
 8016970:	612b      	str	r3, [r5, #16]
 8016972:	e7ed      	b.n	8016950 <ucdr_deserialize_array_uint8_t+0x40>

08016974 <ucdr_deserialize_endian_array_uint8_t>:
 8016974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016978:	4619      	mov	r1, r3
 801697a:	461f      	mov	r7, r3
 801697c:	4605      	mov	r5, r0
 801697e:	4690      	mov	r8, r2
 8016980:	f7f8 ff98 	bl	800f8b4 <ucdr_check_buffer_available_for>
 8016984:	b9e0      	cbnz	r0, 80169c0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8016986:	463e      	mov	r6, r7
 8016988:	e009      	b.n	801699e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801698a:	68a9      	ldr	r1, [r5, #8]
 801698c:	f001 fd7d 	bl	801848a <memcpy>
 8016990:	68ab      	ldr	r3, [r5, #8]
 8016992:	6928      	ldr	r0, [r5, #16]
 8016994:	4423      	add	r3, r4
 8016996:	4420      	add	r0, r4
 8016998:	1b36      	subs	r6, r6, r4
 801699a:	60ab      	str	r3, [r5, #8]
 801699c:	6128      	str	r0, [r5, #16]
 801699e:	2201      	movs	r2, #1
 80169a0:	4631      	mov	r1, r6
 80169a2:	4628      	mov	r0, r5
 80169a4:	f7f9 f80e 	bl	800f9c4 <ucdr_check_final_buffer_behavior_array>
 80169a8:	4604      	mov	r4, r0
 80169aa:	1bb8      	subs	r0, r7, r6
 80169ac:	4440      	add	r0, r8
 80169ae:	4622      	mov	r2, r4
 80169b0:	2c00      	cmp	r4, #0
 80169b2:	d1ea      	bne.n	801698a <ucdr_deserialize_endian_array_uint8_t+0x16>
 80169b4:	2301      	movs	r3, #1
 80169b6:	7da8      	ldrb	r0, [r5, #22]
 80169b8:	756b      	strb	r3, [r5, #21]
 80169ba:	4058      	eors	r0, r3
 80169bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169c0:	463a      	mov	r2, r7
 80169c2:	68a9      	ldr	r1, [r5, #8]
 80169c4:	4640      	mov	r0, r8
 80169c6:	f001 fd60 	bl	801848a <memcpy>
 80169ca:	68aa      	ldr	r2, [r5, #8]
 80169cc:	692b      	ldr	r3, [r5, #16]
 80169ce:	443a      	add	r2, r7
 80169d0:	443b      	add	r3, r7
 80169d2:	60aa      	str	r2, [r5, #8]
 80169d4:	612b      	str	r3, [r5, #16]
 80169d6:	e7ed      	b.n	80169b4 <ucdr_deserialize_endian_array_uint8_t+0x40>

080169d8 <ucdr_serialize_sequence_char>:
 80169d8:	b570      	push	{r4, r5, r6, lr}
 80169da:	4615      	mov	r5, r2
 80169dc:	460e      	mov	r6, r1
 80169de:	7d01      	ldrb	r1, [r0, #20]
 80169e0:	4604      	mov	r4, r0
 80169e2:	f7f8 fabd 	bl	800ef60 <ucdr_serialize_endian_uint32_t>
 80169e6:	b90d      	cbnz	r5, 80169ec <ucdr_serialize_sequence_char+0x14>
 80169e8:	2001      	movs	r0, #1
 80169ea:	bd70      	pop	{r4, r5, r6, pc}
 80169ec:	7d21      	ldrb	r1, [r4, #20]
 80169ee:	462b      	mov	r3, r5
 80169f0:	4632      	mov	r2, r6
 80169f2:	4620      	mov	r0, r4
 80169f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169f8:	f7ff bec2 	b.w	8016780 <ucdr_serialize_endian_array_char>

080169fc <ucdr_deserialize_sequence_char>:
 80169fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a00:	461d      	mov	r5, r3
 8016a02:	4616      	mov	r6, r2
 8016a04:	460f      	mov	r7, r1
 8016a06:	461a      	mov	r2, r3
 8016a08:	7d01      	ldrb	r1, [r0, #20]
 8016a0a:	4604      	mov	r4, r0
 8016a0c:	f7f8 fbd0 	bl	800f1b0 <ucdr_deserialize_endian_uint32_t>
 8016a10:	682b      	ldr	r3, [r5, #0]
 8016a12:	429e      	cmp	r6, r3
 8016a14:	bf3c      	itt	cc
 8016a16:	2201      	movcc	r2, #1
 8016a18:	75a2      	strbcc	r2, [r4, #22]
 8016a1a:	b913      	cbnz	r3, 8016a22 <ucdr_deserialize_sequence_char+0x26>
 8016a1c:	2001      	movs	r0, #1
 8016a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a22:	7d21      	ldrb	r1, [r4, #20]
 8016a24:	463a      	mov	r2, r7
 8016a26:	4620      	mov	r0, r4
 8016a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a2c:	f7ff beda 	b.w	80167e4 <ucdr_deserialize_endian_array_char>

08016a30 <ucdr_serialize_sequence_uint8_t>:
 8016a30:	b570      	push	{r4, r5, r6, lr}
 8016a32:	4615      	mov	r5, r2
 8016a34:	460e      	mov	r6, r1
 8016a36:	7d01      	ldrb	r1, [r0, #20]
 8016a38:	4604      	mov	r4, r0
 8016a3a:	f7f8 fa91 	bl	800ef60 <ucdr_serialize_endian_uint32_t>
 8016a3e:	b90d      	cbnz	r5, 8016a44 <ucdr_serialize_sequence_uint8_t+0x14>
 8016a40:	2001      	movs	r0, #1
 8016a42:	bd70      	pop	{r4, r5, r6, pc}
 8016a44:	7d21      	ldrb	r1, [r4, #20]
 8016a46:	462b      	mov	r3, r5
 8016a48:	4632      	mov	r2, r6
 8016a4a:	4620      	mov	r0, r4
 8016a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a50:	f7ff bf2c 	b.w	80168ac <ucdr_serialize_endian_array_uint8_t>

08016a54 <ucdr_deserialize_sequence_uint8_t>:
 8016a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a58:	461d      	mov	r5, r3
 8016a5a:	4616      	mov	r6, r2
 8016a5c:	460f      	mov	r7, r1
 8016a5e:	461a      	mov	r2, r3
 8016a60:	7d01      	ldrb	r1, [r0, #20]
 8016a62:	4604      	mov	r4, r0
 8016a64:	f7f8 fba4 	bl	800f1b0 <ucdr_deserialize_endian_uint32_t>
 8016a68:	682b      	ldr	r3, [r5, #0]
 8016a6a:	429e      	cmp	r6, r3
 8016a6c:	bf3c      	itt	cc
 8016a6e:	2201      	movcc	r2, #1
 8016a70:	75a2      	strbcc	r2, [r4, #22]
 8016a72:	b913      	cbnz	r3, 8016a7a <ucdr_deserialize_sequence_uint8_t+0x26>
 8016a74:	2001      	movs	r0, #1
 8016a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a7a:	7d21      	ldrb	r1, [r4, #20]
 8016a7c:	463a      	mov	r2, r7
 8016a7e:	4620      	mov	r0, r4
 8016a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a84:	f7ff bf76 	b.w	8016974 <ucdr_deserialize_endian_array_uint8_t>

08016a88 <ucdr_serialize_string>:
 8016a88:	b510      	push	{r4, lr}
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	4604      	mov	r4, r0
 8016a8e:	4608      	mov	r0, r1
 8016a90:	9101      	str	r1, [sp, #4]
 8016a92:	f7e9 fbc7 	bl	8000224 <strlen>
 8016a96:	9901      	ldr	r1, [sp, #4]
 8016a98:	1c42      	adds	r2, r0, #1
 8016a9a:	4620      	mov	r0, r4
 8016a9c:	b002      	add	sp, #8
 8016a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016aa2:	f7ff bf99 	b.w	80169d8 <ucdr_serialize_sequence_char>
 8016aa6:	bf00      	nop

08016aa8 <ucdr_deserialize_string>:
 8016aa8:	b500      	push	{lr}
 8016aaa:	b083      	sub	sp, #12
 8016aac:	ab01      	add	r3, sp, #4
 8016aae:	f7ff ffa5 	bl	80169fc <ucdr_deserialize_sequence_char>
 8016ab2:	b003      	add	sp, #12
 8016ab4:	f85d fb04 	ldr.w	pc, [sp], #4

08016ab8 <uxr_init_input_best_effort_stream>:
 8016ab8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016abc:	8003      	strh	r3, [r0, #0]
 8016abe:	4770      	bx	lr

08016ac0 <uxr_reset_input_best_effort_stream>:
 8016ac0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016ac4:	8003      	strh	r3, [r0, #0]
 8016ac6:	4770      	bx	lr

08016ac8 <uxr_receive_best_effort_message>:
 8016ac8:	b538      	push	{r3, r4, r5, lr}
 8016aca:	4604      	mov	r4, r0
 8016acc:	8800      	ldrh	r0, [r0, #0]
 8016ace:	460d      	mov	r5, r1
 8016ad0:	f000 fd42 	bl	8017558 <uxr_seq_num_cmp>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016adc:	bfb8      	it	lt
 8016ade:	8025      	strhlt	r5, [r4, #0]
 8016ae0:	bd38      	pop	{r3, r4, r5, pc}
 8016ae2:	bf00      	nop

08016ae4 <on_full_input_buffer>:
 8016ae4:	b570      	push	{r4, r5, r6, lr}
 8016ae6:	4605      	mov	r5, r0
 8016ae8:	460c      	mov	r4, r1
 8016aea:	682b      	ldr	r3, [r5, #0]
 8016aec:	6809      	ldr	r1, [r1, #0]
 8016aee:	8920      	ldrh	r0, [r4, #8]
 8016af0:	6862      	ldr	r2, [r4, #4]
 8016af2:	fbb2 f2f0 	udiv	r2, r2, r0
 8016af6:	eba3 0c01 	sub.w	ip, r3, r1
 8016afa:	fbbc fcf2 	udiv	ip, ip, r2
 8016afe:	f10c 0c01 	add.w	ip, ip, #1
 8016b02:	fa1f f38c 	uxth.w	r3, ip
 8016b06:	fbb3 f6f0 	udiv	r6, r3, r0
 8016b0a:	fb00 3316 	mls	r3, r0, r6, r3
 8016b0e:	b29b      	uxth	r3, r3
 8016b10:	fb02 f303 	mul.w	r3, r2, r3
 8016b14:	1d18      	adds	r0, r3, #4
 8016b16:	4408      	add	r0, r1
 8016b18:	7d26      	ldrb	r6, [r4, #20]
 8016b1a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016b1e:	b116      	cbz	r6, 8016b26 <on_full_input_buffer+0x42>
 8016b20:	2600      	movs	r6, #0
 8016b22:	f840 6c04 	str.w	r6, [r0, #-4]
 8016b26:	2a03      	cmp	r2, #3
 8016b28:	d801      	bhi.n	8016b2e <on_full_input_buffer+0x4a>
 8016b2a:	2001      	movs	r0, #1
 8016b2c:	bd70      	pop	{r4, r5, r6, pc}
 8016b2e:	3308      	adds	r3, #8
 8016b30:	4419      	add	r1, r3
 8016b32:	4628      	mov	r0, r5
 8016b34:	692b      	ldr	r3, [r5, #16]
 8016b36:	3a04      	subs	r2, #4
 8016b38:	f7f8 ff08 	bl	800f94c <ucdr_init_buffer_origin>
 8016b3c:	4628      	mov	r0, r5
 8016b3e:	4903      	ldr	r1, [pc, #12]	@ (8016b4c <on_full_input_buffer+0x68>)
 8016b40:	4622      	mov	r2, r4
 8016b42:	f7f8 fedf 	bl	800f904 <ucdr_set_on_full_buffer_callback>
 8016b46:	2000      	movs	r0, #0
 8016b48:	bd70      	pop	{r4, r5, r6, pc}
 8016b4a:	bf00      	nop
 8016b4c:	08016ae5 	.word	0x08016ae5

08016b50 <uxr_init_input_reliable_stream>:
 8016b50:	b500      	push	{lr}
 8016b52:	e9c0 1200 	strd	r1, r2, [r0]
 8016b56:	f04f 0e00 	mov.w	lr, #0
 8016b5a:	9a01      	ldr	r2, [sp, #4]
 8016b5c:	8103      	strh	r3, [r0, #8]
 8016b5e:	6102      	str	r2, [r0, #16]
 8016b60:	f880 e014 	strb.w	lr, [r0, #20]
 8016b64:	b1d3      	cbz	r3, 8016b9c <uxr_init_input_reliable_stream+0x4c>
 8016b66:	f8c1 e000 	str.w	lr, [r1]
 8016b6a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016b6e:	f1bc 0f01 	cmp.w	ip, #1
 8016b72:	d913      	bls.n	8016b9c <uxr_init_input_reliable_stream+0x4c>
 8016b74:	2301      	movs	r3, #1
 8016b76:	fbb3 f1fc 	udiv	r1, r3, ip
 8016b7a:	fb0c 3111 	mls	r1, ip, r1, r3
 8016b7e:	b289      	uxth	r1, r1
 8016b80:	6842      	ldr	r2, [r0, #4]
 8016b82:	fbb2 f2fc 	udiv	r2, r2, ip
 8016b86:	fb01 f202 	mul.w	r2, r1, r2
 8016b8a:	6801      	ldr	r1, [r0, #0]
 8016b8c:	f841 e002 	str.w	lr, [r1, r2]
 8016b90:	3301      	adds	r3, #1
 8016b92:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016b96:	b29b      	uxth	r3, r3
 8016b98:	459c      	cmp	ip, r3
 8016b9a:	d8ec      	bhi.n	8016b76 <uxr_init_input_reliable_stream+0x26>
 8016b9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016ba0:	60c3      	str	r3, [r0, #12]
 8016ba2:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ba6:	bf00      	nop

08016ba8 <uxr_reset_input_reliable_stream>:
 8016ba8:	8901      	ldrh	r1, [r0, #8]
 8016baa:	b1e9      	cbz	r1, 8016be8 <uxr_reset_input_reliable_stream+0x40>
 8016bac:	f04f 0c00 	mov.w	ip, #0
 8016bb0:	b500      	push	{lr}
 8016bb2:	4663      	mov	r3, ip
 8016bb4:	46e6      	mov	lr, ip
 8016bb6:	fbb3 f2f1 	udiv	r2, r3, r1
 8016bba:	fb01 3312 	mls	r3, r1, r2, r3
 8016bbe:	b29b      	uxth	r3, r3
 8016bc0:	6842      	ldr	r2, [r0, #4]
 8016bc2:	fbb2 f2f1 	udiv	r2, r2, r1
 8016bc6:	fb02 f303 	mul.w	r3, r2, r3
 8016bca:	6802      	ldr	r2, [r0, #0]
 8016bcc:	f842 e003 	str.w	lr, [r2, r3]
 8016bd0:	f10c 0c01 	add.w	ip, ip, #1
 8016bd4:	8901      	ldrh	r1, [r0, #8]
 8016bd6:	fa1f f38c 	uxth.w	r3, ip
 8016bda:	4299      	cmp	r1, r3
 8016bdc:	d8eb      	bhi.n	8016bb6 <uxr_reset_input_reliable_stream+0xe>
 8016bde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016be2:	60c3      	str	r3, [r0, #12]
 8016be4:	f85d fb04 	ldr.w	pc, [sp], #4
 8016be8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016bec:	60c3      	str	r3, [r0, #12]
 8016bee:	4770      	bx	lr

08016bf0 <uxr_receive_reliable_message>:
 8016bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bf4:	4604      	mov	r4, r0
 8016bf6:	460d      	mov	r5, r1
 8016bf8:	8901      	ldrh	r1, [r0, #8]
 8016bfa:	8980      	ldrh	r0, [r0, #12]
 8016bfc:	4690      	mov	r8, r2
 8016bfe:	461f      	mov	r7, r3
 8016c00:	f000 fca2 	bl	8017548 <uxr_seq_num_add>
 8016c04:	4629      	mov	r1, r5
 8016c06:	4606      	mov	r6, r0
 8016c08:	89a0      	ldrh	r0, [r4, #12]
 8016c0a:	f000 fca5 	bl	8017558 <uxr_seq_num_cmp>
 8016c0e:	2800      	cmp	r0, #0
 8016c10:	db0a      	blt.n	8016c28 <uxr_receive_reliable_message+0x38>
 8016c12:	2600      	movs	r6, #0
 8016c14:	89e0      	ldrh	r0, [r4, #14]
 8016c16:	4629      	mov	r1, r5
 8016c18:	f000 fc9e 	bl	8017558 <uxr_seq_num_cmp>
 8016c1c:	2800      	cmp	r0, #0
 8016c1e:	da00      	bge.n	8016c22 <uxr_receive_reliable_message+0x32>
 8016c20:	81e5      	strh	r5, [r4, #14]
 8016c22:	4630      	mov	r0, r6
 8016c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c28:	4630      	mov	r0, r6
 8016c2a:	4629      	mov	r1, r5
 8016c2c:	f000 fc94 	bl	8017558 <uxr_seq_num_cmp>
 8016c30:	2800      	cmp	r0, #0
 8016c32:	dbee      	blt.n	8016c12 <uxr_receive_reliable_message+0x22>
 8016c34:	6923      	ldr	r3, [r4, #16]
 8016c36:	4640      	mov	r0, r8
 8016c38:	4798      	blx	r3
 8016c3a:	2101      	movs	r1, #1
 8016c3c:	4681      	mov	r9, r0
 8016c3e:	89a0      	ldrh	r0, [r4, #12]
 8016c40:	f000 fc82 	bl	8017548 <uxr_seq_num_add>
 8016c44:	f1b9 0f00 	cmp.w	r9, #0
 8016c48:	d101      	bne.n	8016c4e <uxr_receive_reliable_message+0x5e>
 8016c4a:	4285      	cmp	r5, r0
 8016c4c:	d047      	beq.n	8016cde <uxr_receive_reliable_message+0xee>
 8016c4e:	8922      	ldrh	r2, [r4, #8]
 8016c50:	fbb5 f0f2 	udiv	r0, r5, r2
 8016c54:	fb02 5010 	mls	r0, r2, r0, r5
 8016c58:	b280      	uxth	r0, r0
 8016c5a:	6863      	ldr	r3, [r4, #4]
 8016c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016c60:	fb00 f303 	mul.w	r3, r0, r3
 8016c64:	6820      	ldr	r0, [r4, #0]
 8016c66:	3304      	adds	r3, #4
 8016c68:	4418      	add	r0, r3
 8016c6a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d1cf      	bne.n	8016c12 <uxr_receive_reliable_message+0x22>
 8016c72:	4641      	mov	r1, r8
 8016c74:	463a      	mov	r2, r7
 8016c76:	f001 fc08 	bl	801848a <memcpy>
 8016c7a:	8921      	ldrh	r1, [r4, #8]
 8016c7c:	fbb5 f2f1 	udiv	r2, r5, r1
 8016c80:	fb01 5212 	mls	r2, r1, r2, r5
 8016c84:	b292      	uxth	r2, r2
 8016c86:	6863      	ldr	r3, [r4, #4]
 8016c88:	fbb3 f3f1 	udiv	r3, r3, r1
 8016c8c:	fb02 f303 	mul.w	r3, r2, r3
 8016c90:	6822      	ldr	r2, [r4, #0]
 8016c92:	50d7      	str	r7, [r2, r3]
 8016c94:	9a08      	ldr	r2, [sp, #32]
 8016c96:	2301      	movs	r3, #1
 8016c98:	7013      	strb	r3, [r2, #0]
 8016c9a:	f1b9 0f00 	cmp.w	r9, #0
 8016c9e:	d0b8      	beq.n	8016c12 <uxr_receive_reliable_message+0x22>
 8016ca0:	89a6      	ldrh	r6, [r4, #12]
 8016ca2:	4630      	mov	r0, r6
 8016ca4:	2101      	movs	r1, #1
 8016ca6:	f000 fc4f 	bl	8017548 <uxr_seq_num_add>
 8016caa:	8922      	ldrh	r2, [r4, #8]
 8016cac:	6863      	ldr	r3, [r4, #4]
 8016cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8016cb2:	4606      	mov	r6, r0
 8016cb4:	fbb0 f0f2 	udiv	r0, r0, r2
 8016cb8:	fb02 6010 	mls	r0, r2, r0, r6
 8016cbc:	b280      	uxth	r0, r0
 8016cbe:	fb00 f303 	mul.w	r3, r0, r3
 8016cc2:	6820      	ldr	r0, [r4, #0]
 8016cc4:	3304      	adds	r3, #4
 8016cc6:	4418      	add	r0, r3
 8016cc8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d0a0      	beq.n	8016c12 <uxr_receive_reliable_message+0x22>
 8016cd0:	6923      	ldr	r3, [r4, #16]
 8016cd2:	4798      	blx	r3
 8016cd4:	2802      	cmp	r0, #2
 8016cd6:	d008      	beq.n	8016cea <uxr_receive_reliable_message+0xfa>
 8016cd8:	2801      	cmp	r0, #1
 8016cda:	d0e2      	beq.n	8016ca2 <uxr_receive_reliable_message+0xb2>
 8016cdc:	e799      	b.n	8016c12 <uxr_receive_reliable_message+0x22>
 8016cde:	9b08      	ldr	r3, [sp, #32]
 8016ce0:	81a5      	strh	r5, [r4, #12]
 8016ce2:	2601      	movs	r6, #1
 8016ce4:	f883 9000 	strb.w	r9, [r3]
 8016ce8:	e794      	b.n	8016c14 <uxr_receive_reliable_message+0x24>
 8016cea:	2601      	movs	r6, #1
 8016cec:	e792      	b.n	8016c14 <uxr_receive_reliable_message+0x24>
 8016cee:	bf00      	nop

08016cf0 <uxr_next_input_reliable_buffer_available>:
 8016cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cf4:	4604      	mov	r4, r0
 8016cf6:	460f      	mov	r7, r1
 8016cf8:	8980      	ldrh	r0, [r0, #12]
 8016cfa:	2101      	movs	r1, #1
 8016cfc:	4690      	mov	r8, r2
 8016cfe:	f000 fc23 	bl	8017548 <uxr_seq_num_add>
 8016d02:	8922      	ldrh	r2, [r4, #8]
 8016d04:	fbb0 f6f2 	udiv	r6, r0, r2
 8016d08:	fb02 0616 	mls	r6, r2, r6, r0
 8016d0c:	b2b6      	uxth	r6, r6
 8016d0e:	6863      	ldr	r3, [r4, #4]
 8016d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d14:	fb06 f303 	mul.w	r3, r6, r3
 8016d18:	6826      	ldr	r6, [r4, #0]
 8016d1a:	3304      	adds	r3, #4
 8016d1c:	441e      	add	r6, r3
 8016d1e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8016d22:	f1b9 0f00 	cmp.w	r9, #0
 8016d26:	d023      	beq.n	8016d70 <uxr_next_input_reliable_buffer_available+0x80>
 8016d28:	6923      	ldr	r3, [r4, #16]
 8016d2a:	4605      	mov	r5, r0
 8016d2c:	4630      	mov	r0, r6
 8016d2e:	4798      	blx	r3
 8016d30:	4682      	mov	sl, r0
 8016d32:	b300      	cbz	r0, 8016d76 <uxr_next_input_reliable_buffer_available+0x86>
 8016d34:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016d38:	2101      	movs	r1, #1
 8016d3a:	4650      	mov	r0, sl
 8016d3c:	f000 fc04 	bl	8017548 <uxr_seq_num_add>
 8016d40:	8921      	ldrh	r1, [r4, #8]
 8016d42:	fbb0 f2f1 	udiv	r2, r0, r1
 8016d46:	4682      	mov	sl, r0
 8016d48:	fb01 0212 	mls	r2, r1, r2, r0
 8016d4c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016d50:	b292      	uxth	r2, r2
 8016d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8016d56:	fb02 f303 	mul.w	r3, r2, r3
 8016d5a:	3304      	adds	r3, #4
 8016d5c:	4418      	add	r0, r3
 8016d5e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016d62:	b12b      	cbz	r3, 8016d70 <uxr_next_input_reliable_buffer_available+0x80>
 8016d64:	6923      	ldr	r3, [r4, #16]
 8016d66:	4798      	blx	r3
 8016d68:	2802      	cmp	r0, #2
 8016d6a:	d01b      	beq.n	8016da4 <uxr_next_input_reliable_buffer_available+0xb4>
 8016d6c:	2801      	cmp	r0, #1
 8016d6e:	d0e3      	beq.n	8016d38 <uxr_next_input_reliable_buffer_available+0x48>
 8016d70:	2000      	movs	r0, #0
 8016d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d76:	464a      	mov	r2, r9
 8016d78:	4631      	mov	r1, r6
 8016d7a:	4638      	mov	r0, r7
 8016d7c:	f7f8 fdee 	bl	800f95c <ucdr_init_buffer>
 8016d80:	8921      	ldrh	r1, [r4, #8]
 8016d82:	fbb5 f2f1 	udiv	r2, r5, r1
 8016d86:	fb01 5212 	mls	r2, r1, r2, r5
 8016d8a:	b292      	uxth	r2, r2
 8016d8c:	6863      	ldr	r3, [r4, #4]
 8016d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016d92:	fb02 f303 	mul.w	r3, r2, r3
 8016d96:	6822      	ldr	r2, [r4, #0]
 8016d98:	f842 a003 	str.w	sl, [r2, r3]
 8016d9c:	2001      	movs	r0, #1
 8016d9e:	81a5      	strh	r5, [r4, #12]
 8016da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016da4:	8920      	ldrh	r0, [r4, #8]
 8016da6:	fbb5 f3f0 	udiv	r3, r5, r0
 8016daa:	fb00 5513 	mls	r5, r0, r3, r5
 8016dae:	b2ad      	uxth	r5, r5
 8016db0:	6863      	ldr	r3, [r4, #4]
 8016db2:	fbb3 f3f0 	udiv	r3, r3, r0
 8016db6:	fb03 f505 	mul.w	r5, r3, r5
 8016dba:	6823      	ldr	r3, [r4, #0]
 8016dbc:	2000      	movs	r0, #0
 8016dbe:	5158      	str	r0, [r3, r5]
 8016dc0:	eb06 0108 	add.w	r1, r6, r8
 8016dc4:	eba9 0208 	sub.w	r2, r9, r8
 8016dc8:	4638      	mov	r0, r7
 8016dca:	f7f8 fdc7 	bl	800f95c <ucdr_init_buffer>
 8016dce:	4638      	mov	r0, r7
 8016dd0:	4903      	ldr	r1, [pc, #12]	@ (8016de0 <uxr_next_input_reliable_buffer_available+0xf0>)
 8016dd2:	4622      	mov	r2, r4
 8016dd4:	f7f8 fd96 	bl	800f904 <ucdr_set_on_full_buffer_callback>
 8016dd8:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016ddc:	2001      	movs	r0, #1
 8016dde:	e7c8      	b.n	8016d72 <uxr_next_input_reliable_buffer_available+0x82>
 8016de0:	08016ae5 	.word	0x08016ae5

08016de4 <uxr_process_heartbeat>:
 8016de4:	b538      	push	{r3, r4, r5, lr}
 8016de6:	4611      	mov	r1, r2
 8016de8:	4604      	mov	r4, r0
 8016dea:	89c0      	ldrh	r0, [r0, #14]
 8016dec:	4615      	mov	r5, r2
 8016dee:	f000 fbb3 	bl	8017558 <uxr_seq_num_cmp>
 8016df2:	2800      	cmp	r0, #0
 8016df4:	bfb8      	it	lt
 8016df6:	81e5      	strhlt	r5, [r4, #14]
 8016df8:	bd38      	pop	{r3, r4, r5, pc}
 8016dfa:	bf00      	nop

08016dfc <uxr_compute_acknack>:
 8016dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e00:	8903      	ldrh	r3, [r0, #8]
 8016e02:	8985      	ldrh	r5, [r0, #12]
 8016e04:	4604      	mov	r4, r0
 8016e06:	460e      	mov	r6, r1
 8016e08:	b1d3      	cbz	r3, 8016e40 <uxr_compute_acknack+0x44>
 8016e0a:	4628      	mov	r0, r5
 8016e0c:	2701      	movs	r7, #1
 8016e0e:	e003      	b.n	8016e18 <uxr_compute_acknack+0x1c>
 8016e10:	4567      	cmp	r7, ip
 8016e12:	d215      	bcs.n	8016e40 <uxr_compute_acknack+0x44>
 8016e14:	89a0      	ldrh	r0, [r4, #12]
 8016e16:	3701      	adds	r7, #1
 8016e18:	b2b9      	uxth	r1, r7
 8016e1a:	f000 fb95 	bl	8017548 <uxr_seq_num_add>
 8016e1e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016e22:	fbb0 f3fc 	udiv	r3, r0, ip
 8016e26:	fb0c 0313 	mls	r3, ip, r3, r0
 8016e2a:	b29a      	uxth	r2, r3
 8016e2c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016e30:	fbb3 f3fc 	udiv	r3, r3, ip
 8016e34:	fb02 f303 	mul.w	r3, r2, r3
 8016e38:	58cb      	ldr	r3, [r1, r3]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d1e8      	bne.n	8016e10 <uxr_compute_acknack+0x14>
 8016e3e:	4605      	mov	r5, r0
 8016e40:	8035      	strh	r5, [r6, #0]
 8016e42:	2101      	movs	r1, #1
 8016e44:	4628      	mov	r0, r5
 8016e46:	89e7      	ldrh	r7, [r4, #14]
 8016e48:	f000 fb82 	bl	8017550 <uxr_seq_num_sub>
 8016e4c:	4601      	mov	r1, r0
 8016e4e:	4638      	mov	r0, r7
 8016e50:	f000 fb7e 	bl	8017550 <uxr_seq_num_sub>
 8016e54:	4605      	mov	r5, r0
 8016e56:	b318      	cbz	r0, 8016ea0 <uxr_compute_acknack+0xa4>
 8016e58:	f04f 0900 	mov.w	r9, #0
 8016e5c:	464f      	mov	r7, r9
 8016e5e:	f04f 0801 	mov.w	r8, #1
 8016e62:	fa1f f189 	uxth.w	r1, r9
 8016e66:	8830      	ldrh	r0, [r6, #0]
 8016e68:	f000 fb6e 	bl	8017548 <uxr_seq_num_add>
 8016e6c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016e70:	fbb0 f3fc 	udiv	r3, r0, ip
 8016e74:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016e78:	fb03 001c 	mls	r0, r3, ip, r0
 8016e7c:	b283      	uxth	r3, r0
 8016e7e:	fbb2 f2fc 	udiv	r2, r2, ip
 8016e82:	fb02 f303 	mul.w	r3, r2, r3
 8016e86:	fa08 f209 	lsl.w	r2, r8, r9
 8016e8a:	58cb      	ldr	r3, [r1, r3]
 8016e8c:	f109 0901 	add.w	r9, r9, #1
 8016e90:	b90b      	cbnz	r3, 8016e96 <uxr_compute_acknack+0x9a>
 8016e92:	4317      	orrs	r7, r2
 8016e94:	b2bf      	uxth	r7, r7
 8016e96:	454d      	cmp	r5, r9
 8016e98:	d1e3      	bne.n	8016e62 <uxr_compute_acknack+0x66>
 8016e9a:	4638      	mov	r0, r7
 8016e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ea0:	4607      	mov	r7, r0
 8016ea2:	4638      	mov	r0, r7
 8016ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016ea8 <uxr_init_output_best_effort_stream>:
 8016ea8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8016eac:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016eb0:	6001      	str	r1, [r0, #0]
 8016eb2:	7303      	strb	r3, [r0, #12]
 8016eb4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016eb8:	4770      	bx	lr
 8016eba:	bf00      	nop

08016ebc <uxr_reset_output_best_effort_stream>:
 8016ebc:	7b02      	ldrb	r2, [r0, #12]
 8016ebe:	6042      	str	r2, [r0, #4]
 8016ec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016ec4:	81c3      	strh	r3, [r0, #14]
 8016ec6:	4770      	bx	lr

08016ec8 <uxr_prepare_best_effort_buffer_to_write>:
 8016ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016eca:	4604      	mov	r4, r0
 8016ecc:	b083      	sub	sp, #12
 8016ece:	6840      	ldr	r0, [r0, #4]
 8016ed0:	460d      	mov	r5, r1
 8016ed2:	4616      	mov	r6, r2
 8016ed4:	f7fb f9a0 	bl	8012218 <uxr_submessage_padding>
 8016ed8:	6863      	ldr	r3, [r4, #4]
 8016eda:	4418      	add	r0, r3
 8016edc:	68a3      	ldr	r3, [r4, #8]
 8016ede:	1942      	adds	r2, r0, r5
 8016ee0:	4293      	cmp	r3, r2
 8016ee2:	bf2c      	ite	cs
 8016ee4:	2701      	movcs	r7, #1
 8016ee6:	2700      	movcc	r7, #0
 8016ee8:	d202      	bcs.n	8016ef0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016eea:	4638      	mov	r0, r7
 8016eec:	b003      	add	sp, #12
 8016eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ef0:	9000      	str	r0, [sp, #0]
 8016ef2:	6821      	ldr	r1, [r4, #0]
 8016ef4:	4630      	mov	r0, r6
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	f7f8 fd1e 	bl	800f938 <ucdr_init_buffer_origin_offset>
 8016efc:	6861      	ldr	r1, [r4, #4]
 8016efe:	4638      	mov	r0, r7
 8016f00:	4429      	add	r1, r5
 8016f02:	6061      	str	r1, [r4, #4]
 8016f04:	b003      	add	sp, #12
 8016f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f08 <uxr_prepare_best_effort_buffer_to_send>:
 8016f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f0c:	4604      	mov	r4, r0
 8016f0e:	461d      	mov	r5, r3
 8016f10:	6840      	ldr	r0, [r0, #4]
 8016f12:	7b23      	ldrb	r3, [r4, #12]
 8016f14:	4298      	cmp	r0, r3
 8016f16:	bf8c      	ite	hi
 8016f18:	2601      	movhi	r6, #1
 8016f1a:	2600      	movls	r6, #0
 8016f1c:	d802      	bhi.n	8016f24 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8016f1e:	4630      	mov	r0, r6
 8016f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f24:	4688      	mov	r8, r1
 8016f26:	89e0      	ldrh	r0, [r4, #14]
 8016f28:	2101      	movs	r1, #1
 8016f2a:	4617      	mov	r7, r2
 8016f2c:	f000 fb0c 	bl	8017548 <uxr_seq_num_add>
 8016f30:	6823      	ldr	r3, [r4, #0]
 8016f32:	81e0      	strh	r0, [r4, #14]
 8016f34:	8028      	strh	r0, [r5, #0]
 8016f36:	f8c8 3000 	str.w	r3, [r8]
 8016f3a:	6863      	ldr	r3, [r4, #4]
 8016f3c:	603b      	str	r3, [r7, #0]
 8016f3e:	7b23      	ldrb	r3, [r4, #12]
 8016f40:	6063      	str	r3, [r4, #4]
 8016f42:	4630      	mov	r0, r6
 8016f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f48 <on_full_output_buffer>:
 8016f48:	b538      	push	{r3, r4, r5, lr}
 8016f4a:	6802      	ldr	r2, [r0, #0]
 8016f4c:	460c      	mov	r4, r1
 8016f4e:	6809      	ldr	r1, [r1, #0]
 8016f50:	8923      	ldrh	r3, [r4, #8]
 8016f52:	eba2 0c01 	sub.w	ip, r2, r1
 8016f56:	6862      	ldr	r2, [r4, #4]
 8016f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8016f5c:	fbbc fcf2 	udiv	ip, ip, r2
 8016f60:	f10c 0c01 	add.w	ip, ip, #1
 8016f64:	fa1f fc8c 	uxth.w	ip, ip
 8016f68:	fbbc fef3 	udiv	lr, ip, r3
 8016f6c:	fb03 c31e 	mls	r3, r3, lr, ip
 8016f70:	b29b      	uxth	r3, r3
 8016f72:	fb02 f303 	mul.w	r3, r2, r3
 8016f76:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016f7a:	58ca      	ldr	r2, [r1, r3]
 8016f7c:	4463      	add	r3, ip
 8016f7e:	eba2 020c 	sub.w	r2, r2, ip
 8016f82:	3308      	adds	r3, #8
 8016f84:	4605      	mov	r5, r0
 8016f86:	4419      	add	r1, r3
 8016f88:	3a04      	subs	r2, #4
 8016f8a:	6903      	ldr	r3, [r0, #16]
 8016f8c:	f7f8 fcde 	bl	800f94c <ucdr_init_buffer_origin>
 8016f90:	4628      	mov	r0, r5
 8016f92:	4903      	ldr	r1, [pc, #12]	@ (8016fa0 <on_full_output_buffer+0x58>)
 8016f94:	4622      	mov	r2, r4
 8016f96:	f7f8 fcb5 	bl	800f904 <ucdr_set_on_full_buffer_callback>
 8016f9a:	2000      	movs	r0, #0
 8016f9c:	bd38      	pop	{r3, r4, r5, pc}
 8016f9e:	bf00      	nop
 8016fa0:	08016f49 	.word	0x08016f49

08016fa4 <uxr_init_output_reliable_stream>:
 8016fa4:	b410      	push	{r4}
 8016fa6:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016faa:	8103      	strh	r3, [r0, #8]
 8016fac:	e9c0 1200 	strd	r1, r2, [r0]
 8016fb0:	f880 c00c 	strb.w	ip, [r0, #12]
 8016fb4:	b1d3      	cbz	r3, 8016fec <uxr_init_output_reliable_stream+0x48>
 8016fb6:	f8c1 c000 	str.w	ip, [r1]
 8016fba:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016fbe:	f1bc 0f01 	cmp.w	ip, #1
 8016fc2:	d913      	bls.n	8016fec <uxr_init_output_reliable_stream+0x48>
 8016fc4:	2301      	movs	r3, #1
 8016fc6:	fbb3 f1fc 	udiv	r1, r3, ip
 8016fca:	fb0c 3111 	mls	r1, ip, r1, r3
 8016fce:	b289      	uxth	r1, r1
 8016fd0:	6842      	ldr	r2, [r0, #4]
 8016fd2:	6804      	ldr	r4, [r0, #0]
 8016fd4:	fbb2 f2fc 	udiv	r2, r2, ip
 8016fd8:	fb01 f202 	mul.w	r2, r1, r2
 8016fdc:	7b01      	ldrb	r1, [r0, #12]
 8016fde:	50a1      	str	r1, [r4, r2]
 8016fe0:	3301      	adds	r3, #1
 8016fe2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016fe6:	b29b      	uxth	r3, r3
 8016fe8:	459c      	cmp	ip, r3
 8016fea:	d8ec      	bhi.n	8016fc6 <uxr_init_output_reliable_stream+0x22>
 8016fec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016ff0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016ff4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016ff8:	4905      	ldr	r1, [pc, #20]	@ (8017010 <uxr_init_output_reliable_stream+0x6c>)
 8016ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ffe:	f8c0 100e 	str.w	r1, [r0, #14]
 8017002:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017006:	2300      	movs	r3, #0
 8017008:	8242      	strh	r2, [r0, #18]
 801700a:	8403      	strh	r3, [r0, #32]
 801700c:	4770      	bx	lr
 801700e:	bf00      	nop
 8017010:	ffff0000 	.word	0xffff0000

08017014 <uxr_reset_output_reliable_stream>:
 8017014:	8901      	ldrh	r1, [r0, #8]
 8017016:	b1b1      	cbz	r1, 8017046 <uxr_reset_output_reliable_stream+0x32>
 8017018:	f04f 0c00 	mov.w	ip, #0
 801701c:	4663      	mov	r3, ip
 801701e:	fbb3 f2f1 	udiv	r2, r3, r1
 8017022:	fb01 3312 	mls	r3, r1, r2, r3
 8017026:	b29b      	uxth	r3, r3
 8017028:	6842      	ldr	r2, [r0, #4]
 801702a:	fbb2 f2f1 	udiv	r2, r2, r1
 801702e:	6801      	ldr	r1, [r0, #0]
 8017030:	fb02 f303 	mul.w	r3, r2, r3
 8017034:	7b02      	ldrb	r2, [r0, #12]
 8017036:	50ca      	str	r2, [r1, r3]
 8017038:	f10c 0c01 	add.w	ip, ip, #1
 801703c:	8901      	ldrh	r1, [r0, #8]
 801703e:	fa1f f38c 	uxth.w	r3, ip
 8017042:	4299      	cmp	r1, r3
 8017044:	d8eb      	bhi.n	801701e <uxr_reset_output_reliable_stream+0xa>
 8017046:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801704a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801704e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017052:	4904      	ldr	r1, [pc, #16]	@ (8017064 <uxr_reset_output_reliable_stream+0x50>)
 8017054:	f8c0 100e 	str.w	r1, [r0, #14]
 8017058:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801705c:	2300      	movs	r3, #0
 801705e:	8242      	strh	r2, [r0, #18]
 8017060:	8403      	strh	r3, [r0, #32]
 8017062:	4770      	bx	lr
 8017064:	ffff0000 	.word	0xffff0000

08017068 <uxr_prepare_reliable_buffer_to_write>:
 8017068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801706c:	4604      	mov	r4, r0
 801706e:	b091      	sub	sp, #68	@ 0x44
 8017070:	8900      	ldrh	r0, [r0, #8]
 8017072:	89e6      	ldrh	r6, [r4, #14]
 8017074:	6823      	ldr	r3, [r4, #0]
 8017076:	9204      	str	r2, [sp, #16]
 8017078:	fbb6 f2f0 	udiv	r2, r6, r0
 801707c:	fb00 6212 	mls	r2, r0, r2, r6
 8017080:	b292      	uxth	r2, r2
 8017082:	6865      	ldr	r5, [r4, #4]
 8017084:	fbb5 f5f0 	udiv	r5, r5, r0
 8017088:	fb05 3202 	mla	r2, r5, r2, r3
 801708c:	3204      	adds	r2, #4
 801708e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8017092:	f894 900c 	ldrb.w	r9, [r4, #12]
 8017096:	9203      	str	r2, [sp, #12]
 8017098:	468b      	mov	fp, r1
 801709a:	1f2f      	subs	r7, r5, #4
 801709c:	2800      	cmp	r0, #0
 801709e:	f000 814c 	beq.w	801733a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80170a2:	f04f 0c00 	mov.w	ip, #0
 80170a6:	46e2      	mov	sl, ip
 80170a8:	4661      	mov	r1, ip
 80170aa:	fbb1 f2f0 	udiv	r2, r1, r0
 80170ae:	fb00 1212 	mls	r2, r0, r2, r1
 80170b2:	b292      	uxth	r2, r2
 80170b4:	fb05 f202 	mul.w	r2, r5, r2
 80170b8:	f10c 0c01 	add.w	ip, ip, #1
 80170bc:	589a      	ldr	r2, [r3, r2]
 80170be:	454a      	cmp	r2, r9
 80170c0:	bf08      	it	eq
 80170c2:	f10a 0a01 	addeq.w	sl, sl, #1
 80170c6:	fa1f f18c 	uxth.w	r1, ip
 80170ca:	bf08      	it	eq
 80170cc:	fa1f fa8a 	uxtheq.w	sl, sl
 80170d0:	4281      	cmp	r1, r0
 80170d2:	d3ea      	bcc.n	80170aa <uxr_prepare_reliable_buffer_to_write+0x42>
 80170d4:	4640      	mov	r0, r8
 80170d6:	2104      	movs	r1, #4
 80170d8:	f8cd a014 	str.w	sl, [sp, #20]
 80170dc:	f7f8 fc42 	bl	800f964 <ucdr_alignment>
 80170e0:	4480      	add	r8, r0
 80170e2:	eb08 020b 	add.w	r2, r8, fp
 80170e6:	42ba      	cmp	r2, r7
 80170e8:	f240 80cd 	bls.w	8017286 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80170ec:	7b22      	ldrb	r2, [r4, #12]
 80170ee:	445a      	add	r2, fp
 80170f0:	42ba      	cmp	r2, r7
 80170f2:	f240 80b5 	bls.w	8017260 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80170f6:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80170fa:	33fc      	adds	r3, #252	@ 0xfc
 80170fc:	b2ba      	uxth	r2, r7
 80170fe:	4413      	add	r3, r2
 8017100:	b29b      	uxth	r3, r3
 8017102:	fb0a f903 	mul.w	r9, sl, r3
 8017106:	45d9      	cmp	r9, fp
 8017108:	9305      	str	r3, [sp, #20]
 801710a:	9306      	str	r3, [sp, #24]
 801710c:	f0c0 80b7 	bcc.w	801727e <uxr_prepare_reliable_buffer_to_write+0x216>
 8017110:	f108 0304 	add.w	r3, r8, #4
 8017114:	42bb      	cmp	r3, r7
 8017116:	f080 80db 	bcs.w	80172d0 <uxr_prepare_reliable_buffer_to_write+0x268>
 801711a:	f1a2 0904 	sub.w	r9, r2, #4
 801711e:	eba9 0908 	sub.w	r9, r9, r8
 8017122:	9b05      	ldr	r3, [sp, #20]
 8017124:	fa1f f989 	uxth.w	r9, r9
 8017128:	ebab 0b09 	sub.w	fp, fp, r9
 801712c:	fbbb f2f3 	udiv	r2, fp, r3
 8017130:	fb03 b312 	mls	r3, r3, r2, fp
 8017134:	2b00      	cmp	r3, #0
 8017136:	f000 80c8 	beq.w	80172ca <uxr_prepare_reliable_buffer_to_write+0x262>
 801713a:	3201      	adds	r2, #1
 801713c:	b292      	uxth	r2, r2
 801713e:	9306      	str	r3, [sp, #24]
 8017140:	4552      	cmp	r2, sl
 8017142:	f200 809c 	bhi.w	801727e <uxr_prepare_reliable_buffer_to_write+0x216>
 8017146:	f10d 0b20 	add.w	fp, sp, #32
 801714a:	2a00      	cmp	r2, #0
 801714c:	d042      	beq.n	80171d4 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801714e:	f8cd 801c 	str.w	r8, [sp, #28]
 8017152:	f04f 0a00 	mov.w	sl, #0
 8017156:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801715a:	9505      	str	r5, [sp, #20]
 801715c:	f10d 0b20 	add.w	fp, sp, #32
 8017160:	4615      	mov	r5, r2
 8017162:	e000      	b.n	8017166 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8017164:	46c1      	mov	r9, r8
 8017166:	8920      	ldrh	r0, [r4, #8]
 8017168:	fbb6 f2f0 	udiv	r2, r6, r0
 801716c:	fb00 6112 	mls	r1, r0, r2, r6
 8017170:	b28a      	uxth	r2, r1
 8017172:	6863      	ldr	r3, [r4, #4]
 8017174:	fbb3 f1f0 	udiv	r1, r3, r0
 8017178:	6823      	ldr	r3, [r4, #0]
 801717a:	fb02 f101 	mul.w	r1, r2, r1
 801717e:	3104      	adds	r1, #4
 8017180:	4419      	add	r1, r3
 8017182:	4658      	mov	r0, fp
 8017184:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8017188:	9200      	str	r2, [sp, #0]
 801718a:	2300      	movs	r3, #0
 801718c:	463a      	mov	r2, r7
 801718e:	f7f8 fbd3 	bl	800f938 <ucdr_init_buffer_origin_offset>
 8017192:	464a      	mov	r2, r9
 8017194:	2300      	movs	r3, #0
 8017196:	210d      	movs	r1, #13
 8017198:	4658      	mov	r0, fp
 801719a:	f7fa fffd 	bl	8012198 <uxr_buffer_submessage_header>
 801719e:	8921      	ldrh	r1, [r4, #8]
 80171a0:	fbb6 f2f1 	udiv	r2, r6, r1
 80171a4:	fb01 6212 	mls	r2, r1, r2, r6
 80171a8:	b292      	uxth	r2, r2
 80171aa:	6863      	ldr	r3, [r4, #4]
 80171ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80171b0:	fb02 f303 	mul.w	r3, r2, r3
 80171b4:	6822      	ldr	r2, [r4, #0]
 80171b6:	4630      	mov	r0, r6
 80171b8:	50d7      	str	r7, [r2, r3]
 80171ba:	2101      	movs	r1, #1
 80171bc:	f000 f9c4 	bl	8017548 <uxr_seq_num_add>
 80171c0:	f10a 0a01 	add.w	sl, sl, #1
 80171c4:	fa1f f38a 	uxth.w	r3, sl
 80171c8:	429d      	cmp	r5, r3
 80171ca:	4606      	mov	r6, r0
 80171cc:	d8ca      	bhi.n	8017164 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80171ce:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80171d2:	9d05      	ldr	r5, [sp, #20]
 80171d4:	8920      	ldrh	r0, [r4, #8]
 80171d6:	fbb6 f3f0 	udiv	r3, r6, r0
 80171da:	fb00 6313 	mls	r3, r0, r3, r6
 80171de:	b299      	uxth	r1, r3
 80171e0:	6863      	ldr	r3, [r4, #4]
 80171e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80171e6:	fb01 f303 	mul.w	r3, r1, r3
 80171ea:	6821      	ldr	r1, [r4, #0]
 80171ec:	3304      	adds	r3, #4
 80171ee:	4419      	add	r1, r3
 80171f0:	463a      	mov	r2, r7
 80171f2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80171f6:	9000      	str	r0, [sp, #0]
 80171f8:	2300      	movs	r3, #0
 80171fa:	4658      	mov	r0, fp
 80171fc:	f7f8 fb9c 	bl	800f938 <ucdr_init_buffer_origin_offset>
 8017200:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017204:	4658      	mov	r0, fp
 8017206:	fa1f f289 	uxth.w	r2, r9
 801720a:	2302      	movs	r3, #2
 801720c:	210d      	movs	r1, #13
 801720e:	f7fa ffc3 	bl	8012198 <uxr_buffer_submessage_header>
 8017212:	9b03      	ldr	r3, [sp, #12]
 8017214:	8927      	ldrh	r7, [r4, #8]
 8017216:	7b20      	ldrb	r0, [r4, #12]
 8017218:	f108 0104 	add.w	r1, r8, #4
 801721c:	440b      	add	r3, r1
 801721e:	4619      	mov	r1, r3
 8017220:	fbb6 f3f7 	udiv	r3, r6, r7
 8017224:	fb07 6313 	mls	r3, r7, r3, r6
 8017228:	f1a5 0208 	sub.w	r2, r5, #8
 801722c:	b29d      	uxth	r5, r3
 801722e:	3004      	adds	r0, #4
 8017230:	6863      	ldr	r3, [r4, #4]
 8017232:	fbb3 f3f7 	udiv	r3, r3, r7
 8017236:	fb05 f303 	mul.w	r3, r5, r3
 801723a:	6825      	ldr	r5, [r4, #0]
 801723c:	4448      	add	r0, r9
 801723e:	50e8      	str	r0, [r5, r3]
 8017240:	9d04      	ldr	r5, [sp, #16]
 8017242:	eba2 0208 	sub.w	r2, r2, r8
 8017246:	4628      	mov	r0, r5
 8017248:	f7f8 fb88 	bl	800f95c <ucdr_init_buffer>
 801724c:	4628      	mov	r0, r5
 801724e:	493c      	ldr	r1, [pc, #240]	@ (8017340 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8017250:	4622      	mov	r2, r4
 8017252:	f7f8 fb57 	bl	800f904 <ucdr_set_on_full_buffer_callback>
 8017256:	2001      	movs	r0, #1
 8017258:	81e6      	strh	r6, [r4, #14]
 801725a:	b011      	add	sp, #68	@ 0x44
 801725c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017260:	2101      	movs	r1, #1
 8017262:	89e0      	ldrh	r0, [r4, #14]
 8017264:	f000 f970 	bl	8017548 <uxr_seq_num_add>
 8017268:	8921      	ldrh	r1, [r4, #8]
 801726a:	4605      	mov	r5, r0
 801726c:	8a60      	ldrh	r0, [r4, #18]
 801726e:	f000 f96b 	bl	8017548 <uxr_seq_num_add>
 8017272:	4601      	mov	r1, r0
 8017274:	4628      	mov	r0, r5
 8017276:	f000 f96f 	bl	8017558 <uxr_seq_num_cmp>
 801727a:	2800      	cmp	r0, #0
 801727c:	dd42      	ble.n	8017304 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801727e:	2000      	movs	r0, #0
 8017280:	b011      	add	sp, #68	@ 0x44
 8017282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017286:	8921      	ldrh	r1, [r4, #8]
 8017288:	8a60      	ldrh	r0, [r4, #18]
 801728a:	9205      	str	r2, [sp, #20]
 801728c:	f000 f95c 	bl	8017548 <uxr_seq_num_add>
 8017290:	4601      	mov	r1, r0
 8017292:	4630      	mov	r0, r6
 8017294:	f000 f960 	bl	8017558 <uxr_seq_num_cmp>
 8017298:	2800      	cmp	r0, #0
 801729a:	9a05      	ldr	r2, [sp, #20]
 801729c:	dcef      	bgt.n	801727e <uxr_prepare_reliable_buffer_to_write+0x216>
 801729e:	8927      	ldrh	r7, [r4, #8]
 80172a0:	fbb6 f3f7 	udiv	r3, r6, r7
 80172a4:	fb07 6313 	mls	r3, r7, r3, r6
 80172a8:	b29d      	uxth	r5, r3
 80172aa:	6863      	ldr	r3, [r4, #4]
 80172ac:	6824      	ldr	r4, [r4, #0]
 80172ae:	fbb3 f3f7 	udiv	r3, r3, r7
 80172b2:	fb05 f303 	mul.w	r3, r5, r3
 80172b6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80172ba:	50e2      	str	r2, [r4, r3]
 80172bc:	2300      	movs	r3, #0
 80172be:	f8cd 8000 	str.w	r8, [sp]
 80172c2:	f7f8 fb39 	bl	800f938 <ucdr_init_buffer_origin_offset>
 80172c6:	2001      	movs	r0, #1
 80172c8:	e7da      	b.n	8017280 <uxr_prepare_reliable_buffer_to_write+0x218>
 80172ca:	b293      	uxth	r3, r2
 80172cc:	461a      	mov	r2, r3
 80172ce:	e737      	b.n	8017140 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80172d0:	4630      	mov	r0, r6
 80172d2:	2101      	movs	r1, #1
 80172d4:	9207      	str	r2, [sp, #28]
 80172d6:	f000 f937 	bl	8017548 <uxr_seq_num_add>
 80172da:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80172de:	fbb0 f1fc 	udiv	r1, r0, ip
 80172e2:	fb0c 0111 	mls	r1, ip, r1, r0
 80172e6:	4606      	mov	r6, r0
 80172e8:	b288      	uxth	r0, r1
 80172ea:	6863      	ldr	r3, [r4, #4]
 80172ec:	fbb3 f1fc 	udiv	r1, r3, ip
 80172f0:	6823      	ldr	r3, [r4, #0]
 80172f2:	9a07      	ldr	r2, [sp, #28]
 80172f4:	fb00 f101 	mul.w	r1, r0, r1
 80172f8:	3104      	adds	r1, #4
 80172fa:	440b      	add	r3, r1
 80172fc:	9303      	str	r3, [sp, #12]
 80172fe:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8017302:	e70a      	b.n	801711a <uxr_prepare_reliable_buffer_to_write+0xb2>
 8017304:	8921      	ldrh	r1, [r4, #8]
 8017306:	fbb5 f3f1 	udiv	r3, r5, r1
 801730a:	fb01 5313 	mls	r3, r1, r3, r5
 801730e:	b29a      	uxth	r2, r3
 8017310:	6863      	ldr	r3, [r4, #4]
 8017312:	fbb3 f3f1 	udiv	r3, r3, r1
 8017316:	6821      	ldr	r1, [r4, #0]
 8017318:	9804      	ldr	r0, [sp, #16]
 801731a:	fb02 f303 	mul.w	r3, r2, r3
 801731e:	3304      	adds	r3, #4
 8017320:	7b22      	ldrb	r2, [r4, #12]
 8017322:	4419      	add	r1, r3
 8017324:	445a      	add	r2, fp
 8017326:	f841 2c04 	str.w	r2, [r1, #-4]
 801732a:	7b23      	ldrb	r3, [r4, #12]
 801732c:	9300      	str	r3, [sp, #0]
 801732e:	2300      	movs	r3, #0
 8017330:	f7f8 fb02 	bl	800f938 <ucdr_init_buffer_origin_offset>
 8017334:	81e5      	strh	r5, [r4, #14]
 8017336:	2001      	movs	r0, #1
 8017338:	e7a2      	b.n	8017280 <uxr_prepare_reliable_buffer_to_write+0x218>
 801733a:	4682      	mov	sl, r0
 801733c:	e6ca      	b.n	80170d4 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801733e:	bf00      	nop
 8017340:	08016f49 	.word	0x08016f49

08017344 <uxr_prepare_next_reliable_buffer_to_send>:
 8017344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017346:	4604      	mov	r4, r0
 8017348:	460f      	mov	r7, r1
 801734a:	8a00      	ldrh	r0, [r0, #16]
 801734c:	2101      	movs	r1, #1
 801734e:	4616      	mov	r6, r2
 8017350:	461d      	mov	r5, r3
 8017352:	f000 f8f9 	bl	8017548 <uxr_seq_num_add>
 8017356:	8028      	strh	r0, [r5, #0]
 8017358:	8922      	ldrh	r2, [r4, #8]
 801735a:	fbb0 f3f2 	udiv	r3, r0, r2
 801735e:	fb02 0c13 	mls	ip, r2, r3, r0
 8017362:	fa1f fc8c 	uxth.w	ip, ip
 8017366:	6863      	ldr	r3, [r4, #4]
 8017368:	fbb3 f3f2 	udiv	r3, r3, r2
 801736c:	fb0c fc03 	mul.w	ip, ip, r3
 8017370:	6823      	ldr	r3, [r4, #0]
 8017372:	89e1      	ldrh	r1, [r4, #14]
 8017374:	f10c 0c04 	add.w	ip, ip, #4
 8017378:	4463      	add	r3, ip
 801737a:	603b      	str	r3, [r7, #0]
 801737c:	6823      	ldr	r3, [r4, #0]
 801737e:	449c      	add	ip, r3
 8017380:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8017384:	6033      	str	r3, [r6, #0]
 8017386:	f000 f8e7 	bl	8017558 <uxr_seq_num_cmp>
 801738a:	2800      	cmp	r0, #0
 801738c:	dd01      	ble.n	8017392 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801738e:	2000      	movs	r0, #0
 8017390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017392:	7b23      	ldrb	r3, [r4, #12]
 8017394:	6832      	ldr	r2, [r6, #0]
 8017396:	429a      	cmp	r2, r3
 8017398:	d9f9      	bls.n	801738e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801739a:	8a61      	ldrh	r1, [r4, #18]
 801739c:	8a20      	ldrh	r0, [r4, #16]
 801739e:	f000 f8d7 	bl	8017550 <uxr_seq_num_sub>
 80173a2:	8923      	ldrh	r3, [r4, #8]
 80173a4:	4283      	cmp	r3, r0
 80173a6:	d0f2      	beq.n	801738e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80173a8:	8828      	ldrh	r0, [r5, #0]
 80173aa:	89e3      	ldrh	r3, [r4, #14]
 80173ac:	8220      	strh	r0, [r4, #16]
 80173ae:	4298      	cmp	r0, r3
 80173b0:	d001      	beq.n	80173b6 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80173b2:	2001      	movs	r0, #1
 80173b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173b6:	2101      	movs	r1, #1
 80173b8:	f000 f8c6 	bl	8017548 <uxr_seq_num_add>
 80173bc:	81e0      	strh	r0, [r4, #14]
 80173be:	2001      	movs	r0, #1
 80173c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173c2:	bf00      	nop

080173c4 <uxr_update_output_stream_heartbeat_timestamp>:
 80173c4:	b570      	push	{r4, r5, r6, lr}
 80173c6:	8a01      	ldrh	r1, [r0, #16]
 80173c8:	4604      	mov	r4, r0
 80173ca:	8a40      	ldrh	r0, [r0, #18]
 80173cc:	4615      	mov	r5, r2
 80173ce:	461e      	mov	r6, r3
 80173d0:	f000 f8c2 	bl	8017558 <uxr_seq_num_cmp>
 80173d4:	2800      	cmp	r0, #0
 80173d6:	db07      	blt.n	80173e8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80173d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80173dc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80173e0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80173e4:	2000      	movs	r0, #0
 80173e6:	bd70      	pop	{r4, r5, r6, pc}
 80173e8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80173ec:	b940      	cbnz	r0, 8017400 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80173ee:	2301      	movs	r3, #1
 80173f0:	f884 3020 	strb.w	r3, [r4, #32]
 80173f4:	3564      	adds	r5, #100	@ 0x64
 80173f6:	f146 0600 	adc.w	r6, r6, #0
 80173fa:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80173fe:	bd70      	pop	{r4, r5, r6, pc}
 8017400:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8017404:	4295      	cmp	r5, r2
 8017406:	eb76 0303 	sbcs.w	r3, r6, r3
 801740a:	bfa5      	ittet	ge
 801740c:	3001      	addge	r0, #1
 801740e:	f884 0020 	strbge.w	r0, [r4, #32]
 8017412:	2000      	movlt	r0, #0
 8017414:	2001      	movge	r0, #1
 8017416:	e7ed      	b.n	80173f4 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08017418 <uxr_begin_output_nack_buffer_it>:
 8017418:	8a40      	ldrh	r0, [r0, #18]
 801741a:	4770      	bx	lr

0801741c <uxr_next_reliable_nack_buffer_to_send>:
 801741c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017420:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8017424:	b082      	sub	sp, #8
 8017426:	f1b8 0f00 	cmp.w	r8, #0
 801742a:	d011      	beq.n	8017450 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801742c:	4604      	mov	r4, r0
 801742e:	8818      	ldrh	r0, [r3, #0]
 8017430:	460e      	mov	r6, r1
 8017432:	4617      	mov	r7, r2
 8017434:	461d      	mov	r5, r3
 8017436:	2101      	movs	r1, #1
 8017438:	f000 f886 	bl	8017548 <uxr_seq_num_add>
 801743c:	8028      	strh	r0, [r5, #0]
 801743e:	8a21      	ldrh	r1, [r4, #16]
 8017440:	f000 f88a 	bl	8017558 <uxr_seq_num_cmp>
 8017444:	2800      	cmp	r0, #0
 8017446:	dd07      	ble.n	8017458 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8017448:	f04f 0800 	mov.w	r8, #0
 801744c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8017450:	4640      	mov	r0, r8
 8017452:	b002      	add	sp, #8
 8017454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017458:	8921      	ldrh	r1, [r4, #8]
 801745a:	8828      	ldrh	r0, [r5, #0]
 801745c:	6823      	ldr	r3, [r4, #0]
 801745e:	fbb0 f2f1 	udiv	r2, r0, r1
 8017462:	fb01 0c12 	mls	ip, r1, r2, r0
 8017466:	fa1f f28c 	uxth.w	r2, ip
 801746a:	9301      	str	r3, [sp, #4]
 801746c:	6863      	ldr	r3, [r4, #4]
 801746e:	fbb3 fcf1 	udiv	ip, r3, r1
 8017472:	9b01      	ldr	r3, [sp, #4]
 8017474:	fb02 fc0c 	mul.w	ip, r2, ip
 8017478:	f10c 0c04 	add.w	ip, ip, #4
 801747c:	4463      	add	r3, ip
 801747e:	6033      	str	r3, [r6, #0]
 8017480:	6823      	ldr	r3, [r4, #0]
 8017482:	4463      	add	r3, ip
 8017484:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8017488:	603b      	str	r3, [r7, #0]
 801748a:	7b22      	ldrb	r2, [r4, #12]
 801748c:	429a      	cmp	r2, r3
 801748e:	d0d2      	beq.n	8017436 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8017490:	4640      	mov	r0, r8
 8017492:	b002      	add	sp, #8
 8017494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017498 <uxr_process_acknack>:
 8017498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801749a:	4604      	mov	r4, r0
 801749c:	460e      	mov	r6, r1
 801749e:	4610      	mov	r0, r2
 80174a0:	2101      	movs	r1, #1
 80174a2:	f000 f855 	bl	8017550 <uxr_seq_num_sub>
 80174a6:	8a61      	ldrh	r1, [r4, #18]
 80174a8:	f000 f852 	bl	8017550 <uxr_seq_num_sub>
 80174ac:	b1c0      	cbz	r0, 80174e0 <uxr_process_acknack+0x48>
 80174ae:	4605      	mov	r5, r0
 80174b0:	2700      	movs	r7, #0
 80174b2:	2101      	movs	r1, #1
 80174b4:	8a60      	ldrh	r0, [r4, #18]
 80174b6:	f000 f847 	bl	8017548 <uxr_seq_num_add>
 80174ba:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80174be:	fbb0 f1fc 	udiv	r1, r0, ip
 80174c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80174c6:	fb0c 0111 	mls	r1, ip, r1, r0
 80174ca:	b289      	uxth	r1, r1
 80174cc:	3701      	adds	r7, #1
 80174ce:	fbb3 f3fc 	udiv	r3, r3, ip
 80174d2:	fb01 f303 	mul.w	r3, r1, r3
 80174d6:	42bd      	cmp	r5, r7
 80174d8:	7b21      	ldrb	r1, [r4, #12]
 80174da:	8260      	strh	r0, [r4, #18]
 80174dc:	50d1      	str	r1, [r2, r3]
 80174de:	d1e8      	bne.n	80174b2 <uxr_process_acknack+0x1a>
 80174e0:	3e00      	subs	r6, #0
 80174e2:	f04f 0300 	mov.w	r3, #0
 80174e6:	bf18      	it	ne
 80174e8:	2601      	movne	r6, #1
 80174ea:	f884 3020 	strb.w	r3, [r4, #32]
 80174ee:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80174f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080174f4 <uxr_is_output_up_to_date>:
 80174f4:	8a01      	ldrh	r1, [r0, #16]
 80174f6:	8a40      	ldrh	r0, [r0, #18]
 80174f8:	b508      	push	{r3, lr}
 80174fa:	f000 f82d 	bl	8017558 <uxr_seq_num_cmp>
 80174fe:	fab0 f080 	clz	r0, r0
 8017502:	0940      	lsrs	r0, r0, #5
 8017504:	bd08      	pop	{r3, pc}
 8017506:	bf00      	nop

08017508 <get_available_free_slots>:
 8017508:	8902      	ldrh	r2, [r0, #8]
 801750a:	b1da      	cbz	r2, 8017544 <get_available_free_slots+0x3c>
 801750c:	b530      	push	{r4, r5, lr}
 801750e:	2100      	movs	r1, #0
 8017510:	6843      	ldr	r3, [r0, #4]
 8017512:	6805      	ldr	r5, [r0, #0]
 8017514:	7b04      	ldrb	r4, [r0, #12]
 8017516:	fbb3 fef2 	udiv	lr, r3, r2
 801751a:	4608      	mov	r0, r1
 801751c:	460b      	mov	r3, r1
 801751e:	fbb3 fcf2 	udiv	ip, r3, r2
 8017522:	fb02 331c 	mls	r3, r2, ip, r3
 8017526:	b29b      	uxth	r3, r3
 8017528:	fb0e f303 	mul.w	r3, lr, r3
 801752c:	3101      	adds	r1, #1
 801752e:	f855 c003 	ldr.w	ip, [r5, r3]
 8017532:	4564      	cmp	r4, ip
 8017534:	bf08      	it	eq
 8017536:	3001      	addeq	r0, #1
 8017538:	b28b      	uxth	r3, r1
 801753a:	bf08      	it	eq
 801753c:	b280      	uxtheq	r0, r0
 801753e:	4293      	cmp	r3, r2
 8017540:	d3ed      	bcc.n	801751e <get_available_free_slots+0x16>
 8017542:	bd30      	pop	{r4, r5, pc}
 8017544:	4610      	mov	r0, r2
 8017546:	4770      	bx	lr

08017548 <uxr_seq_num_add>:
 8017548:	4408      	add	r0, r1
 801754a:	b280      	uxth	r0, r0
 801754c:	4770      	bx	lr
 801754e:	bf00      	nop

08017550 <uxr_seq_num_sub>:
 8017550:	1a40      	subs	r0, r0, r1
 8017552:	b280      	uxth	r0, r0
 8017554:	4770      	bx	lr
 8017556:	bf00      	nop

08017558 <uxr_seq_num_cmp>:
 8017558:	4288      	cmp	r0, r1
 801755a:	d011      	beq.n	8017580 <uxr_seq_num_cmp+0x28>
 801755c:	d309      	bcc.n	8017572 <uxr_seq_num_cmp+0x1a>
 801755e:	4288      	cmp	r0, r1
 8017560:	d910      	bls.n	8017584 <uxr_seq_num_cmp+0x2c>
 8017562:	1a40      	subs	r0, r0, r1
 8017564:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8017568:	bfd4      	ite	le
 801756a:	2001      	movle	r0, #1
 801756c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8017570:	4770      	bx	lr
 8017572:	1a0b      	subs	r3, r1, r0
 8017574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017578:	daf1      	bge.n	801755e <uxr_seq_num_cmp+0x6>
 801757a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801757e:	4770      	bx	lr
 8017580:	2000      	movs	r0, #0
 8017582:	4770      	bx	lr
 8017584:	2001      	movs	r0, #1
 8017586:	4770      	bx	lr

08017588 <rcl_get_default_domain_id>:
 8017588:	b530      	push	{r4, r5, lr}
 801758a:	b083      	sub	sp, #12
 801758c:	2300      	movs	r3, #0
 801758e:	9300      	str	r3, [sp, #0]
 8017590:	b1d0      	cbz	r0, 80175c8 <rcl_get_default_domain_id+0x40>
 8017592:	4604      	mov	r4, r0
 8017594:	4669      	mov	r1, sp
 8017596:	4815      	ldr	r0, [pc, #84]	@ (80175ec <rcl_get_default_domain_id+0x64>)
 8017598:	f7f5 fb20 	bl	800cbdc <rcutils_get_env>
 801759c:	4602      	mov	r2, r0
 801759e:	b110      	cbz	r0, 80175a6 <rcl_get_default_domain_id+0x1e>
 80175a0:	2001      	movs	r0, #1
 80175a2:	b003      	add	sp, #12
 80175a4:	bd30      	pop	{r4, r5, pc}
 80175a6:	9b00      	ldr	r3, [sp, #0]
 80175a8:	b18b      	cbz	r3, 80175ce <rcl_get_default_domain_id+0x46>
 80175aa:	7818      	ldrb	r0, [r3, #0]
 80175ac:	2800      	cmp	r0, #0
 80175ae:	d0f8      	beq.n	80175a2 <rcl_get_default_domain_id+0x1a>
 80175b0:	a901      	add	r1, sp, #4
 80175b2:	4618      	mov	r0, r3
 80175b4:	9201      	str	r2, [sp, #4]
 80175b6:	f000 fc83 	bl	8017ec0 <strtoul>
 80175ba:	4605      	mov	r5, r0
 80175bc:	b150      	cbz	r0, 80175d4 <rcl_get_default_domain_id+0x4c>
 80175be:	1c43      	adds	r3, r0, #1
 80175c0:	d00d      	beq.n	80175de <rcl_get_default_domain_id+0x56>
 80175c2:	6025      	str	r5, [r4, #0]
 80175c4:	2000      	movs	r0, #0
 80175c6:	e7ec      	b.n	80175a2 <rcl_get_default_domain_id+0x1a>
 80175c8:	200b      	movs	r0, #11
 80175ca:	b003      	add	sp, #12
 80175cc:	bd30      	pop	{r4, r5, pc}
 80175ce:	4618      	mov	r0, r3
 80175d0:	b003      	add	sp, #12
 80175d2:	bd30      	pop	{r4, r5, pc}
 80175d4:	9b01      	ldr	r3, [sp, #4]
 80175d6:	781b      	ldrb	r3, [r3, #0]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d0f2      	beq.n	80175c2 <rcl_get_default_domain_id+0x3a>
 80175dc:	e7e0      	b.n	80175a0 <rcl_get_default_domain_id+0x18>
 80175de:	f000 ff1f 	bl	8018420 <__errno>
 80175e2:	6803      	ldr	r3, [r0, #0]
 80175e4:	2b22      	cmp	r3, #34	@ 0x22
 80175e6:	d1ec      	bne.n	80175c2 <rcl_get_default_domain_id+0x3a>
 80175e8:	e7da      	b.n	80175a0 <rcl_get_default_domain_id+0x18>
 80175ea:	bf00      	nop
 80175ec:	08019824 	.word	0x08019824

080175f0 <rcl_expand_topic_name>:
 80175f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f4:	b08b      	sub	sp, #44	@ 0x2c
 80175f6:	9306      	str	r3, [sp, #24]
 80175f8:	2800      	cmp	r0, #0
 80175fa:	f000 80ad 	beq.w	8017758 <rcl_expand_topic_name+0x168>
 80175fe:	460e      	mov	r6, r1
 8017600:	2900      	cmp	r1, #0
 8017602:	f000 80a9 	beq.w	8017758 <rcl_expand_topic_name+0x168>
 8017606:	4617      	mov	r7, r2
 8017608:	2a00      	cmp	r2, #0
 801760a:	f000 80a5 	beq.w	8017758 <rcl_expand_topic_name+0x168>
 801760e:	2b00      	cmp	r3, #0
 8017610:	f000 80a2 	beq.w	8017758 <rcl_expand_topic_name+0x168>
 8017614:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017616:	2b00      	cmp	r3, #0
 8017618:	f000 809e 	beq.w	8017758 <rcl_expand_topic_name+0x168>
 801761c:	2200      	movs	r2, #0
 801761e:	a909      	add	r1, sp, #36	@ 0x24
 8017620:	4680      	mov	r8, r0
 8017622:	f000 f949 	bl	80178b8 <rcl_validate_topic_name>
 8017626:	4604      	mov	r4, r0
 8017628:	2800      	cmp	r0, #0
 801762a:	f040 8096 	bne.w	801775a <rcl_expand_topic_name+0x16a>
 801762e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017630:	2b00      	cmp	r3, #0
 8017632:	f040 809a 	bne.w	801776a <rcl_expand_topic_name+0x17a>
 8017636:	4602      	mov	r2, r0
 8017638:	a909      	add	r1, sp, #36	@ 0x24
 801763a:	4630      	mov	r0, r6
 801763c:	f7f5 fd6c 	bl	800d118 <rmw_validate_node_name>
 8017640:	2800      	cmp	r0, #0
 8017642:	f040 808e 	bne.w	8017762 <rcl_expand_topic_name+0x172>
 8017646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017648:	2a00      	cmp	r2, #0
 801764a:	f040 8093 	bne.w	8017774 <rcl_expand_topic_name+0x184>
 801764e:	a909      	add	r1, sp, #36	@ 0x24
 8017650:	4638      	mov	r0, r7
 8017652:	f7f5 fd43 	bl	800d0dc <rmw_validate_namespace>
 8017656:	2800      	cmp	r0, #0
 8017658:	f040 8083 	bne.w	8017762 <rcl_expand_topic_name+0x172>
 801765c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801765e:	2c00      	cmp	r4, #0
 8017660:	f040 80ed 	bne.w	801783e <rcl_expand_topic_name+0x24e>
 8017664:	217b      	movs	r1, #123	@ 0x7b
 8017666:	4640      	mov	r0, r8
 8017668:	f000 fdf0 	bl	801824c <strchr>
 801766c:	f898 3000 	ldrb.w	r3, [r8]
 8017670:	2b2f      	cmp	r3, #47	@ 0x2f
 8017672:	4605      	mov	r5, r0
 8017674:	f000 809e 	beq.w	80177b4 <rcl_expand_topic_name+0x1c4>
 8017678:	2b7e      	cmp	r3, #126	@ 0x7e
 801767a:	f040 80a2 	bne.w	80177c2 <rcl_expand_topic_name+0x1d2>
 801767e:	4638      	mov	r0, r7
 8017680:	f7e8 fdd0 	bl	8000224 <strlen>
 8017684:	4a82      	ldr	r2, [pc, #520]	@ (8017890 <rcl_expand_topic_name+0x2a0>)
 8017686:	4b83      	ldr	r3, [pc, #524]	@ (8017894 <rcl_expand_topic_name+0x2a4>)
 8017688:	2801      	cmp	r0, #1
 801768a:	bf18      	it	ne
 801768c:	4613      	movne	r3, r2
 801768e:	9302      	str	r3, [sp, #8]
 8017690:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017692:	9300      	str	r3, [sp, #0]
 8017694:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8017698:	f108 0301 	add.w	r3, r8, #1
 801769c:	9305      	str	r3, [sp, #20]
 801769e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80176a2:	9301      	str	r3, [sp, #4]
 80176a4:	ab14      	add	r3, sp, #80	@ 0x50
 80176a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80176a8:	f7f5 fae2 	bl	800cc70 <rcutils_format_string_limit>
 80176ac:	4682      	mov	sl, r0
 80176ae:	2800      	cmp	r0, #0
 80176b0:	f000 80c7 	beq.w	8017842 <rcl_expand_topic_name+0x252>
 80176b4:	2d00      	cmp	r5, #0
 80176b6:	f000 80a2 	beq.w	80177fe <rcl_expand_topic_name+0x20e>
 80176ba:	217b      	movs	r1, #123	@ 0x7b
 80176bc:	f000 fdc6 	bl	801824c <strchr>
 80176c0:	46d1      	mov	r9, sl
 80176c2:	4605      	mov	r5, r0
 80176c4:	9407      	str	r4, [sp, #28]
 80176c6:	46d3      	mov	fp, sl
 80176c8:	464c      	mov	r4, r9
 80176ca:	2d00      	cmp	r5, #0
 80176cc:	f000 80be 	beq.w	801784c <rcl_expand_topic_name+0x25c>
 80176d0:	217d      	movs	r1, #125	@ 0x7d
 80176d2:	4620      	mov	r0, r4
 80176d4:	f000 fdba 	bl	801824c <strchr>
 80176d8:	eba0 0905 	sub.w	r9, r0, r5
 80176dc:	f109 0a01 	add.w	sl, r9, #1
 80176e0:	486d      	ldr	r0, [pc, #436]	@ (8017898 <rcl_expand_topic_name+0x2a8>)
 80176e2:	4652      	mov	r2, sl
 80176e4:	4629      	mov	r1, r5
 80176e6:	f000 fdbe 	bl	8018266 <strncmp>
 80176ea:	2800      	cmp	r0, #0
 80176ec:	d067      	beq.n	80177be <rcl_expand_topic_name+0x1ce>
 80176ee:	486b      	ldr	r0, [pc, #428]	@ (801789c <rcl_expand_topic_name+0x2ac>)
 80176f0:	4652      	mov	r2, sl
 80176f2:	4629      	mov	r1, r5
 80176f4:	f000 fdb7 	bl	8018266 <strncmp>
 80176f8:	b130      	cbz	r0, 8017708 <rcl_expand_topic_name+0x118>
 80176fa:	4869      	ldr	r0, [pc, #420]	@ (80178a0 <rcl_expand_topic_name+0x2b0>)
 80176fc:	4652      	mov	r2, sl
 80176fe:	4629      	mov	r1, r5
 8017700:	f000 fdb1 	bl	8018266 <strncmp>
 8017704:	2800      	cmp	r0, #0
 8017706:	d137      	bne.n	8017778 <rcl_expand_topic_name+0x188>
 8017708:	46b9      	mov	r9, r7
 801770a:	ab16      	add	r3, sp, #88	@ 0x58
 801770c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017710:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017714:	ab14      	add	r3, sp, #80	@ 0x50
 8017716:	4628      	mov	r0, r5
 8017718:	cb0c      	ldmia	r3, {r2, r3}
 801771a:	4651      	mov	r1, sl
 801771c:	f7f5 fbe4 	bl	800cee8 <rcutils_strndup>
 8017720:	4605      	mov	r5, r0
 8017722:	2800      	cmp	r0, #0
 8017724:	f000 809c 	beq.w	8017860 <rcl_expand_topic_name+0x270>
 8017728:	464a      	mov	r2, r9
 801772a:	4620      	mov	r0, r4
 801772c:	ab14      	add	r3, sp, #80	@ 0x50
 801772e:	4629      	mov	r1, r5
 8017730:	f7f5 fad8 	bl	800cce4 <rcutils_repl_str>
 8017734:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017736:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017738:	4604      	mov	r4, r0
 801773a:	4628      	mov	r0, r5
 801773c:	4798      	blx	r3
 801773e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017740:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017742:	4658      	mov	r0, fp
 8017744:	4798      	blx	r3
 8017746:	2c00      	cmp	r4, #0
 8017748:	d07b      	beq.n	8017842 <rcl_expand_topic_name+0x252>
 801774a:	217b      	movs	r1, #123	@ 0x7b
 801774c:	4620      	mov	r0, r4
 801774e:	f000 fd7d 	bl	801824c <strchr>
 8017752:	46a3      	mov	fp, r4
 8017754:	4605      	mov	r5, r0
 8017756:	e7b8      	b.n	80176ca <rcl_expand_topic_name+0xda>
 8017758:	240b      	movs	r4, #11
 801775a:	4620      	mov	r0, r4
 801775c:	b00b      	add	sp, #44	@ 0x2c
 801775e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017762:	f7fc f843 	bl	80137ec <rcl_convert_rmw_ret_to_rcl_ret>
 8017766:	4604      	mov	r4, r0
 8017768:	e7f7      	b.n	801775a <rcl_expand_topic_name+0x16a>
 801776a:	2467      	movs	r4, #103	@ 0x67
 801776c:	4620      	mov	r0, r4
 801776e:	b00b      	add	sp, #44	@ 0x2c
 8017770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017774:	24c9      	movs	r4, #201	@ 0xc9
 8017776:	e7f0      	b.n	801775a <rcl_expand_topic_name+0x16a>
 8017778:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801777c:	9806      	ldr	r0, [sp, #24]
 801777e:	1c69      	adds	r1, r5, #1
 8017780:	f7fe f99c 	bl	8015abc <rcutils_string_map_getn>
 8017784:	4681      	mov	r9, r0
 8017786:	2800      	cmp	r0, #0
 8017788:	d1bf      	bne.n	801770a <rcl_expand_topic_name+0x11a>
 801778a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801778c:	aa16      	add	r2, sp, #88	@ 0x58
 801778e:	6018      	str	r0, [r3, #0]
 8017790:	ca07      	ldmia	r2, {r0, r1, r2}
 8017792:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017796:	ab14      	add	r3, sp, #80	@ 0x50
 8017798:	cb0c      	ldmia	r3, {r2, r3}
 801779a:	4651      	mov	r1, sl
 801779c:	4628      	mov	r0, r5
 801779e:	f7f5 fba3 	bl	800cee8 <rcutils_strndup>
 80177a2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80177a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80177a6:	4798      	blx	r3
 80177a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80177aa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80177ac:	4658      	mov	r0, fp
 80177ae:	2469      	movs	r4, #105	@ 0x69
 80177b0:	4798      	blx	r3
 80177b2:	e7d2      	b.n	801775a <rcl_expand_topic_name+0x16a>
 80177b4:	2800      	cmp	r0, #0
 80177b6:	d05b      	beq.n	8017870 <rcl_expand_topic_name+0x280>
 80177b8:	46c1      	mov	r9, r8
 80177ba:	46a2      	mov	sl, r4
 80177bc:	e782      	b.n	80176c4 <rcl_expand_topic_name+0xd4>
 80177be:	46b1      	mov	r9, r6
 80177c0:	e7a3      	b.n	801770a <rcl_expand_topic_name+0x11a>
 80177c2:	2800      	cmp	r0, #0
 80177c4:	d1f8      	bne.n	80177b8 <rcl_expand_topic_name+0x1c8>
 80177c6:	4638      	mov	r0, r7
 80177c8:	f7e8 fd2c 	bl	8000224 <strlen>
 80177cc:	4a35      	ldr	r2, [pc, #212]	@ (80178a4 <rcl_expand_topic_name+0x2b4>)
 80177ce:	4b36      	ldr	r3, [pc, #216]	@ (80178a8 <rcl_expand_topic_name+0x2b8>)
 80177d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80177d4:	2801      	cmp	r0, #1
 80177d6:	bf18      	it	ne
 80177d8:	4613      	movne	r3, r2
 80177da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80177de:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80177e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80177e4:	9703      	str	r7, [sp, #12]
 80177e6:	9200      	str	r2, [sp, #0]
 80177e8:	ab14      	add	r3, sp, #80	@ 0x50
 80177ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80177ec:	f7f5 fa40 	bl	800cc70 <rcutils_format_string_limit>
 80177f0:	4682      	mov	sl, r0
 80177f2:	4653      	mov	r3, sl
 80177f4:	b32b      	cbz	r3, 8017842 <rcl_expand_topic_name+0x252>
 80177f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80177f8:	f8c3 a000 	str.w	sl, [r3]
 80177fc:	e7ad      	b.n	801775a <rcl_expand_topic_name+0x16a>
 80177fe:	f89a 3000 	ldrb.w	r3, [sl]
 8017802:	2b2f      	cmp	r3, #47	@ 0x2f
 8017804:	d0f7      	beq.n	80177f6 <rcl_expand_topic_name+0x206>
 8017806:	4638      	mov	r0, r7
 8017808:	f7e8 fd0c 	bl	8000224 <strlen>
 801780c:	4a25      	ldr	r2, [pc, #148]	@ (80178a4 <rcl_expand_topic_name+0x2b4>)
 801780e:	4b26      	ldr	r3, [pc, #152]	@ (80178a8 <rcl_expand_topic_name+0x2b8>)
 8017810:	f8cd a010 	str.w	sl, [sp, #16]
 8017814:	2801      	cmp	r0, #1
 8017816:	bf18      	it	ne
 8017818:	4613      	movne	r3, r2
 801781a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801781e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017822:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017824:	9703      	str	r7, [sp, #12]
 8017826:	9200      	str	r2, [sp, #0]
 8017828:	ab14      	add	r3, sp, #80	@ 0x50
 801782a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801782c:	f7f5 fa20 	bl	800cc70 <rcutils_format_string_limit>
 8017830:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017832:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017834:	4605      	mov	r5, r0
 8017836:	4650      	mov	r0, sl
 8017838:	4798      	blx	r3
 801783a:	46aa      	mov	sl, r5
 801783c:	e7d9      	b.n	80177f2 <rcl_expand_topic_name+0x202>
 801783e:	24ca      	movs	r4, #202	@ 0xca
 8017840:	e78b      	b.n	801775a <rcl_expand_topic_name+0x16a>
 8017842:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017844:	2300      	movs	r3, #0
 8017846:	6013      	str	r3, [r2, #0]
 8017848:	240a      	movs	r4, #10
 801784a:	e786      	b.n	801775a <rcl_expand_topic_name+0x16a>
 801784c:	465b      	mov	r3, fp
 801784e:	9c07      	ldr	r4, [sp, #28]
 8017850:	46da      	mov	sl, fp
 8017852:	2b00      	cmp	r3, #0
 8017854:	d1d3      	bne.n	80177fe <rcl_expand_topic_name+0x20e>
 8017856:	f898 3000 	ldrb.w	r3, [r8]
 801785a:	2b2f      	cmp	r3, #47	@ 0x2f
 801785c:	d0cb      	beq.n	80177f6 <rcl_expand_topic_name+0x206>
 801785e:	e7b2      	b.n	80177c6 <rcl_expand_topic_name+0x1d6>
 8017860:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8017864:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017866:	6015      	str	r5, [r2, #0]
 8017868:	4658      	mov	r0, fp
 801786a:	4798      	blx	r3
 801786c:	240a      	movs	r4, #10
 801786e:	e774      	b.n	801775a <rcl_expand_topic_name+0x16a>
 8017870:	ab17      	add	r3, sp, #92	@ 0x5c
 8017872:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017876:	e88d 0003 	stmia.w	sp, {r0, r1}
 801787a:	ab14      	add	r3, sp, #80	@ 0x50
 801787c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801787e:	4640      	mov	r0, r8
 8017880:	f7f5 fb10 	bl	800cea4 <rcutils_strdup>
 8017884:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017886:	2800      	cmp	r0, #0
 8017888:	6018      	str	r0, [r3, #0]
 801788a:	bf08      	it	eq
 801788c:	240a      	moveq	r4, #10
 801788e:	e764      	b.n	801775a <rcl_expand_topic_name+0x16a>
 8017890:	08019834 	.word	0x08019834
 8017894:	080196c0 	.word	0x080196c0
 8017898:	0801983c 	.word	0x0801983c
 801789c:	08019844 	.word	0x08019844
 80178a0:	0801984c 	.word	0x0801984c
 80178a4:	08019368 	.word	0x08019368
 80178a8:	08019360 	.word	0x08019360

080178ac <rcl_get_default_topic_name_substitutions>:
 80178ac:	2800      	cmp	r0, #0
 80178ae:	bf0c      	ite	eq
 80178b0:	200b      	moveq	r0, #11
 80178b2:	2000      	movne	r0, #0
 80178b4:	4770      	bx	lr
 80178b6:	bf00      	nop

080178b8 <rcl_validate_topic_name>:
 80178b8:	2800      	cmp	r0, #0
 80178ba:	d07a      	beq.n	80179b2 <rcl_validate_topic_name+0xfa>
 80178bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178c0:	460e      	mov	r6, r1
 80178c2:	2900      	cmp	r1, #0
 80178c4:	d07c      	beq.n	80179c0 <rcl_validate_topic_name+0x108>
 80178c6:	4617      	mov	r7, r2
 80178c8:	4605      	mov	r5, r0
 80178ca:	f7e8 fcab 	bl	8000224 <strlen>
 80178ce:	b1b0      	cbz	r0, 80178fe <rcl_validate_topic_name+0x46>
 80178d0:	f895 9000 	ldrb.w	r9, [r5]
 80178d4:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017a58 <rcl_validate_topic_name+0x1a0>
 80178d8:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80178dc:	f013 0304 	ands.w	r3, r3, #4
 80178e0:	d169      	bne.n	80179b6 <rcl_validate_topic_name+0xfe>
 80178e2:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80178e6:	f815 2008 	ldrb.w	r2, [r5, r8]
 80178ea:	2a2f      	cmp	r2, #47	@ 0x2f
 80178ec:	d10e      	bne.n	801790c <rcl_validate_topic_name+0x54>
 80178ee:	2202      	movs	r2, #2
 80178f0:	6032      	str	r2, [r6, #0]
 80178f2:	b36f      	cbz	r7, 8017950 <rcl_validate_topic_name+0x98>
 80178f4:	f8c7 8000 	str.w	r8, [r7]
 80178f8:	4618      	mov	r0, r3
 80178fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178fe:	2301      	movs	r3, #1
 8017900:	6033      	str	r3, [r6, #0]
 8017902:	b32f      	cbz	r7, 8017950 <rcl_validate_topic_name+0x98>
 8017904:	2000      	movs	r0, #0
 8017906:	6038      	str	r0, [r7, #0]
 8017908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801790c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8017910:	461c      	mov	r4, r3
 8017912:	4619      	mov	r1, r3
 8017914:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017918:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801791c:	f1be 0f09 	cmp.w	lr, #9
 8017920:	d919      	bls.n	8017956 <rcl_validate_topic_name+0x9e>
 8017922:	f022 0e20 	bic.w	lr, r2, #32
 8017926:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801792a:	f1be 0f19 	cmp.w	lr, #25
 801792e:	d912      	bls.n	8017956 <rcl_validate_topic_name+0x9e>
 8017930:	2a5f      	cmp	r2, #95	@ 0x5f
 8017932:	d019      	beq.n	8017968 <rcl_validate_topic_name+0xb0>
 8017934:	2a2f      	cmp	r2, #47	@ 0x2f
 8017936:	d051      	beq.n	80179dc <rcl_validate_topic_name+0x124>
 8017938:	2a7e      	cmp	r2, #126	@ 0x7e
 801793a:	d048      	beq.n	80179ce <rcl_validate_topic_name+0x116>
 801793c:	2a7b      	cmp	r2, #123	@ 0x7b
 801793e:	d054      	beq.n	80179ea <rcl_validate_topic_name+0x132>
 8017940:	2a7d      	cmp	r2, #125	@ 0x7d
 8017942:	d161      	bne.n	8017a08 <rcl_validate_topic_name+0x150>
 8017944:	2c00      	cmp	r4, #0
 8017946:	d155      	bne.n	80179f4 <rcl_validate_topic_name+0x13c>
 8017948:	2305      	movs	r3, #5
 801794a:	6033      	str	r3, [r6, #0]
 801794c:	b107      	cbz	r7, 8017950 <rcl_validate_topic_name+0x98>
 801794e:	6039      	str	r1, [r7, #0]
 8017950:	2000      	movs	r0, #0
 8017952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017956:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801795a:	0752      	lsls	r2, r2, #29
 801795c:	d504      	bpl.n	8017968 <rcl_validate_topic_name+0xb0>
 801795e:	b11c      	cbz	r4, 8017968 <rcl_validate_topic_name+0xb0>
 8017960:	b111      	cbz	r1, 8017968 <rcl_validate_topic_name+0xb0>
 8017962:	1e4a      	subs	r2, r1, #1
 8017964:	429a      	cmp	r2, r3
 8017966:	d02d      	beq.n	80179c4 <rcl_validate_topic_name+0x10c>
 8017968:	3101      	adds	r1, #1
 801796a:	4288      	cmp	r0, r1
 801796c:	d1d2      	bne.n	8017914 <rcl_validate_topic_name+0x5c>
 801796e:	2c00      	cmp	r4, #0
 8017970:	d145      	bne.n	80179fe <rcl_validate_topic_name+0x146>
 8017972:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8017976:	d04f      	beq.n	8017a18 <rcl_validate_topic_name+0x160>
 8017978:	4620      	mov	r0, r4
 801797a:	2301      	movs	r3, #1
 801797c:	e006      	b.n	801798c <rcl_validate_topic_name+0xd4>
 801797e:	428b      	cmp	r3, r1
 8017980:	f105 0501 	add.w	r5, r5, #1
 8017984:	f103 0201 	add.w	r2, r3, #1
 8017988:	d236      	bcs.n	80179f8 <rcl_validate_topic_name+0x140>
 801798a:	4613      	mov	r3, r2
 801798c:	4580      	cmp	r8, r0
 801798e:	f100 0001 	add.w	r0, r0, #1
 8017992:	d0f4      	beq.n	801797e <rcl_validate_topic_name+0xc6>
 8017994:	782a      	ldrb	r2, [r5, #0]
 8017996:	2a2f      	cmp	r2, #47	@ 0x2f
 8017998:	d1f1      	bne.n	801797e <rcl_validate_topic_name+0xc6>
 801799a:	786a      	ldrb	r2, [r5, #1]
 801799c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80179a0:	0754      	lsls	r4, r2, #29
 80179a2:	d5ec      	bpl.n	801797e <rcl_validate_topic_name+0xc6>
 80179a4:	2204      	movs	r2, #4
 80179a6:	6032      	str	r2, [r6, #0]
 80179a8:	2f00      	cmp	r7, #0
 80179aa:	d0d1      	beq.n	8017950 <rcl_validate_topic_name+0x98>
 80179ac:	603b      	str	r3, [r7, #0]
 80179ae:	2000      	movs	r0, #0
 80179b0:	e7aa      	b.n	8017908 <rcl_validate_topic_name+0x50>
 80179b2:	200b      	movs	r0, #11
 80179b4:	4770      	bx	lr
 80179b6:	2304      	movs	r3, #4
 80179b8:	6033      	str	r3, [r6, #0]
 80179ba:	2f00      	cmp	r7, #0
 80179bc:	d1a2      	bne.n	8017904 <rcl_validate_topic_name+0x4c>
 80179be:	e7c7      	b.n	8017950 <rcl_validate_topic_name+0x98>
 80179c0:	200b      	movs	r0, #11
 80179c2:	e7a1      	b.n	8017908 <rcl_validate_topic_name+0x50>
 80179c4:	2309      	movs	r3, #9
 80179c6:	6033      	str	r3, [r6, #0]
 80179c8:	2f00      	cmp	r7, #0
 80179ca:	d1c0      	bne.n	801794e <rcl_validate_topic_name+0x96>
 80179cc:	e7c0      	b.n	8017950 <rcl_validate_topic_name+0x98>
 80179ce:	2900      	cmp	r1, #0
 80179d0:	d0ca      	beq.n	8017968 <rcl_validate_topic_name+0xb0>
 80179d2:	2306      	movs	r3, #6
 80179d4:	6033      	str	r3, [r6, #0]
 80179d6:	2f00      	cmp	r7, #0
 80179d8:	d1b9      	bne.n	801794e <rcl_validate_topic_name+0x96>
 80179da:	e7b9      	b.n	8017950 <rcl_validate_topic_name+0x98>
 80179dc:	2c00      	cmp	r4, #0
 80179de:	d0c3      	beq.n	8017968 <rcl_validate_topic_name+0xb0>
 80179e0:	2308      	movs	r3, #8
 80179e2:	6033      	str	r3, [r6, #0]
 80179e4:	2f00      	cmp	r7, #0
 80179e6:	d1b2      	bne.n	801794e <rcl_validate_topic_name+0x96>
 80179e8:	e7b2      	b.n	8017950 <rcl_validate_topic_name+0x98>
 80179ea:	2c00      	cmp	r4, #0
 80179ec:	d1f8      	bne.n	80179e0 <rcl_validate_topic_name+0x128>
 80179ee:	460b      	mov	r3, r1
 80179f0:	2401      	movs	r4, #1
 80179f2:	e7b9      	b.n	8017968 <rcl_validate_topic_name+0xb0>
 80179f4:	2400      	movs	r4, #0
 80179f6:	e7b7      	b.n	8017968 <rcl_validate_topic_name+0xb0>
 80179f8:	2000      	movs	r0, #0
 80179fa:	6030      	str	r0, [r6, #0]
 80179fc:	e784      	b.n	8017908 <rcl_validate_topic_name+0x50>
 80179fe:	2205      	movs	r2, #5
 8017a00:	6032      	str	r2, [r6, #0]
 8017a02:	2f00      	cmp	r7, #0
 8017a04:	d1d2      	bne.n	80179ac <rcl_validate_topic_name+0xf4>
 8017a06:	e7a3      	b.n	8017950 <rcl_validate_topic_name+0x98>
 8017a08:	2c00      	cmp	r4, #0
 8017a0a:	bf14      	ite	ne
 8017a0c:	2308      	movne	r3, #8
 8017a0e:	2303      	moveq	r3, #3
 8017a10:	6033      	str	r3, [r6, #0]
 8017a12:	2f00      	cmp	r7, #0
 8017a14:	d19b      	bne.n	801794e <rcl_validate_topic_name+0x96>
 8017a16:	e79b      	b.n	8017950 <rcl_validate_topic_name+0x98>
 8017a18:	2301      	movs	r3, #1
 8017a1a:	e00a      	b.n	8017a32 <rcl_validate_topic_name+0x17a>
 8017a1c:	2c01      	cmp	r4, #1
 8017a1e:	d013      	beq.n	8017a48 <rcl_validate_topic_name+0x190>
 8017a20:	4299      	cmp	r1, r3
 8017a22:	f104 0401 	add.w	r4, r4, #1
 8017a26:	f105 0501 	add.w	r5, r5, #1
 8017a2a:	f103 0201 	add.w	r2, r3, #1
 8017a2e:	d9e3      	bls.n	80179f8 <rcl_validate_topic_name+0x140>
 8017a30:	4613      	mov	r3, r2
 8017a32:	45a0      	cmp	r8, r4
 8017a34:	d0f4      	beq.n	8017a20 <rcl_validate_topic_name+0x168>
 8017a36:	782a      	ldrb	r2, [r5, #0]
 8017a38:	2a2f      	cmp	r2, #47	@ 0x2f
 8017a3a:	d1ef      	bne.n	8017a1c <rcl_validate_topic_name+0x164>
 8017a3c:	786a      	ldrb	r2, [r5, #1]
 8017a3e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017a42:	0752      	lsls	r2, r2, #29
 8017a44:	d5ec      	bpl.n	8017a20 <rcl_validate_topic_name+0x168>
 8017a46:	e7ad      	b.n	80179a4 <rcl_validate_topic_name+0xec>
 8017a48:	2307      	movs	r3, #7
 8017a4a:	6033      	str	r3, [r6, #0]
 8017a4c:	2f00      	cmp	r7, #0
 8017a4e:	f43f af7f 	beq.w	8017950 <rcl_validate_topic_name+0x98>
 8017a52:	603c      	str	r4, [r7, #0]
 8017a54:	2000      	movs	r0, #0
 8017a56:	e757      	b.n	8017908 <rcl_validate_topic_name+0x50>
 8017a58:	08019e9b 	.word	0x08019e9b

08017a5c <calloc>:
 8017a5c:	4b02      	ldr	r3, [pc, #8]	@ (8017a68 <calloc+0xc>)
 8017a5e:	460a      	mov	r2, r1
 8017a60:	4601      	mov	r1, r0
 8017a62:	6818      	ldr	r0, [r3, #0]
 8017a64:	f000 b802 	b.w	8017a6c <_calloc_r>
 8017a68:	200000d8 	.word	0x200000d8

08017a6c <_calloc_r>:
 8017a6c:	b570      	push	{r4, r5, r6, lr}
 8017a6e:	fba1 5402 	umull	r5, r4, r1, r2
 8017a72:	b934      	cbnz	r4, 8017a82 <_calloc_r+0x16>
 8017a74:	4629      	mov	r1, r5
 8017a76:	f000 f887 	bl	8017b88 <_malloc_r>
 8017a7a:	4606      	mov	r6, r0
 8017a7c:	b928      	cbnz	r0, 8017a8a <_calloc_r+0x1e>
 8017a7e:	4630      	mov	r0, r6
 8017a80:	bd70      	pop	{r4, r5, r6, pc}
 8017a82:	220c      	movs	r2, #12
 8017a84:	6002      	str	r2, [r0, #0]
 8017a86:	2600      	movs	r6, #0
 8017a88:	e7f9      	b.n	8017a7e <_calloc_r+0x12>
 8017a8a:	462a      	mov	r2, r5
 8017a8c:	4621      	mov	r1, r4
 8017a8e:	f000 fbd5 	bl	801823c <memset>
 8017a92:	e7f4      	b.n	8017a7e <_calloc_r+0x12>

08017a94 <getenv>:
 8017a94:	b507      	push	{r0, r1, r2, lr}
 8017a96:	4b04      	ldr	r3, [pc, #16]	@ (8017aa8 <getenv+0x14>)
 8017a98:	4601      	mov	r1, r0
 8017a9a:	aa01      	add	r2, sp, #4
 8017a9c:	6818      	ldr	r0, [r3, #0]
 8017a9e:	f000 f805 	bl	8017aac <_findenv_r>
 8017aa2:	b003      	add	sp, #12
 8017aa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8017aa8:	200000d8 	.word	0x200000d8

08017aac <_findenv_r>:
 8017aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ab0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017b20 <_findenv_r+0x74>
 8017ab4:	4606      	mov	r6, r0
 8017ab6:	4689      	mov	r9, r1
 8017ab8:	4617      	mov	r7, r2
 8017aba:	f000 fd13 	bl	80184e4 <__env_lock>
 8017abe:	f8da 4000 	ldr.w	r4, [sl]
 8017ac2:	b134      	cbz	r4, 8017ad2 <_findenv_r+0x26>
 8017ac4:	464b      	mov	r3, r9
 8017ac6:	4698      	mov	r8, r3
 8017ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017acc:	b13a      	cbz	r2, 8017ade <_findenv_r+0x32>
 8017ace:	2a3d      	cmp	r2, #61	@ 0x3d
 8017ad0:	d1f9      	bne.n	8017ac6 <_findenv_r+0x1a>
 8017ad2:	4630      	mov	r0, r6
 8017ad4:	f000 fd0c 	bl	80184f0 <__env_unlock>
 8017ad8:	2000      	movs	r0, #0
 8017ada:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ade:	eba8 0809 	sub.w	r8, r8, r9
 8017ae2:	46a3      	mov	fp, r4
 8017ae4:	f854 0b04 	ldr.w	r0, [r4], #4
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	d0f2      	beq.n	8017ad2 <_findenv_r+0x26>
 8017aec:	4642      	mov	r2, r8
 8017aee:	4649      	mov	r1, r9
 8017af0:	f000 fbb9 	bl	8018266 <strncmp>
 8017af4:	2800      	cmp	r0, #0
 8017af6:	d1f4      	bne.n	8017ae2 <_findenv_r+0x36>
 8017af8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017afc:	eb03 0508 	add.w	r5, r3, r8
 8017b00:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017b04:	2b3d      	cmp	r3, #61	@ 0x3d
 8017b06:	d1ec      	bne.n	8017ae2 <_findenv_r+0x36>
 8017b08:	f8da 3000 	ldr.w	r3, [sl]
 8017b0c:	ebab 0303 	sub.w	r3, fp, r3
 8017b10:	109b      	asrs	r3, r3, #2
 8017b12:	4630      	mov	r0, r6
 8017b14:	603b      	str	r3, [r7, #0]
 8017b16:	f000 fceb 	bl	80184f0 <__env_unlock>
 8017b1a:	1c68      	adds	r0, r5, #1
 8017b1c:	e7dd      	b.n	8017ada <_findenv_r+0x2e>
 8017b1e:	bf00      	nop
 8017b20:	20000018 	.word	0x20000018

08017b24 <malloc>:
 8017b24:	4b02      	ldr	r3, [pc, #8]	@ (8017b30 <malloc+0xc>)
 8017b26:	4601      	mov	r1, r0
 8017b28:	6818      	ldr	r0, [r3, #0]
 8017b2a:	f000 b82d 	b.w	8017b88 <_malloc_r>
 8017b2e:	bf00      	nop
 8017b30:	200000d8 	.word	0x200000d8

08017b34 <free>:
 8017b34:	4b02      	ldr	r3, [pc, #8]	@ (8017b40 <free+0xc>)
 8017b36:	4601      	mov	r1, r0
 8017b38:	6818      	ldr	r0, [r3, #0]
 8017b3a:	f000 bcdf 	b.w	80184fc <_free_r>
 8017b3e:	bf00      	nop
 8017b40:	200000d8 	.word	0x200000d8

08017b44 <sbrk_aligned>:
 8017b44:	b570      	push	{r4, r5, r6, lr}
 8017b46:	4e0f      	ldr	r6, [pc, #60]	@ (8017b84 <sbrk_aligned+0x40>)
 8017b48:	460c      	mov	r4, r1
 8017b4a:	6831      	ldr	r1, [r6, #0]
 8017b4c:	4605      	mov	r5, r0
 8017b4e:	b911      	cbnz	r1, 8017b56 <sbrk_aligned+0x12>
 8017b50:	f000 fc44 	bl	80183dc <_sbrk_r>
 8017b54:	6030      	str	r0, [r6, #0]
 8017b56:	4621      	mov	r1, r4
 8017b58:	4628      	mov	r0, r5
 8017b5a:	f000 fc3f 	bl	80183dc <_sbrk_r>
 8017b5e:	1c43      	adds	r3, r0, #1
 8017b60:	d103      	bne.n	8017b6a <sbrk_aligned+0x26>
 8017b62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017b66:	4620      	mov	r0, r4
 8017b68:	bd70      	pop	{r4, r5, r6, pc}
 8017b6a:	1cc4      	adds	r4, r0, #3
 8017b6c:	f024 0403 	bic.w	r4, r4, #3
 8017b70:	42a0      	cmp	r0, r4
 8017b72:	d0f8      	beq.n	8017b66 <sbrk_aligned+0x22>
 8017b74:	1a21      	subs	r1, r4, r0
 8017b76:	4628      	mov	r0, r5
 8017b78:	f000 fc30 	bl	80183dc <_sbrk_r>
 8017b7c:	3001      	adds	r0, #1
 8017b7e:	d1f2      	bne.n	8017b66 <sbrk_aligned+0x22>
 8017b80:	e7ef      	b.n	8017b62 <sbrk_aligned+0x1e>
 8017b82:	bf00      	nop
 8017b84:	20010f34 	.word	0x20010f34

08017b88 <_malloc_r>:
 8017b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b8c:	1ccd      	adds	r5, r1, #3
 8017b8e:	f025 0503 	bic.w	r5, r5, #3
 8017b92:	3508      	adds	r5, #8
 8017b94:	2d0c      	cmp	r5, #12
 8017b96:	bf38      	it	cc
 8017b98:	250c      	movcc	r5, #12
 8017b9a:	2d00      	cmp	r5, #0
 8017b9c:	4606      	mov	r6, r0
 8017b9e:	db01      	blt.n	8017ba4 <_malloc_r+0x1c>
 8017ba0:	42a9      	cmp	r1, r5
 8017ba2:	d904      	bls.n	8017bae <_malloc_r+0x26>
 8017ba4:	230c      	movs	r3, #12
 8017ba6:	6033      	str	r3, [r6, #0]
 8017ba8:	2000      	movs	r0, #0
 8017baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017c84 <_malloc_r+0xfc>
 8017bb2:	f000 f869 	bl	8017c88 <__malloc_lock>
 8017bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8017bba:	461c      	mov	r4, r3
 8017bbc:	bb44      	cbnz	r4, 8017c10 <_malloc_r+0x88>
 8017bbe:	4629      	mov	r1, r5
 8017bc0:	4630      	mov	r0, r6
 8017bc2:	f7ff ffbf 	bl	8017b44 <sbrk_aligned>
 8017bc6:	1c43      	adds	r3, r0, #1
 8017bc8:	4604      	mov	r4, r0
 8017bca:	d158      	bne.n	8017c7e <_malloc_r+0xf6>
 8017bcc:	f8d8 4000 	ldr.w	r4, [r8]
 8017bd0:	4627      	mov	r7, r4
 8017bd2:	2f00      	cmp	r7, #0
 8017bd4:	d143      	bne.n	8017c5e <_malloc_r+0xd6>
 8017bd6:	2c00      	cmp	r4, #0
 8017bd8:	d04b      	beq.n	8017c72 <_malloc_r+0xea>
 8017bda:	6823      	ldr	r3, [r4, #0]
 8017bdc:	4639      	mov	r1, r7
 8017bde:	4630      	mov	r0, r6
 8017be0:	eb04 0903 	add.w	r9, r4, r3
 8017be4:	f000 fbfa 	bl	80183dc <_sbrk_r>
 8017be8:	4581      	cmp	r9, r0
 8017bea:	d142      	bne.n	8017c72 <_malloc_r+0xea>
 8017bec:	6821      	ldr	r1, [r4, #0]
 8017bee:	1a6d      	subs	r5, r5, r1
 8017bf0:	4629      	mov	r1, r5
 8017bf2:	4630      	mov	r0, r6
 8017bf4:	f7ff ffa6 	bl	8017b44 <sbrk_aligned>
 8017bf8:	3001      	adds	r0, #1
 8017bfa:	d03a      	beq.n	8017c72 <_malloc_r+0xea>
 8017bfc:	6823      	ldr	r3, [r4, #0]
 8017bfe:	442b      	add	r3, r5
 8017c00:	6023      	str	r3, [r4, #0]
 8017c02:	f8d8 3000 	ldr.w	r3, [r8]
 8017c06:	685a      	ldr	r2, [r3, #4]
 8017c08:	bb62      	cbnz	r2, 8017c64 <_malloc_r+0xdc>
 8017c0a:	f8c8 7000 	str.w	r7, [r8]
 8017c0e:	e00f      	b.n	8017c30 <_malloc_r+0xa8>
 8017c10:	6822      	ldr	r2, [r4, #0]
 8017c12:	1b52      	subs	r2, r2, r5
 8017c14:	d420      	bmi.n	8017c58 <_malloc_r+0xd0>
 8017c16:	2a0b      	cmp	r2, #11
 8017c18:	d917      	bls.n	8017c4a <_malloc_r+0xc2>
 8017c1a:	1961      	adds	r1, r4, r5
 8017c1c:	42a3      	cmp	r3, r4
 8017c1e:	6025      	str	r5, [r4, #0]
 8017c20:	bf18      	it	ne
 8017c22:	6059      	strne	r1, [r3, #4]
 8017c24:	6863      	ldr	r3, [r4, #4]
 8017c26:	bf08      	it	eq
 8017c28:	f8c8 1000 	streq.w	r1, [r8]
 8017c2c:	5162      	str	r2, [r4, r5]
 8017c2e:	604b      	str	r3, [r1, #4]
 8017c30:	4630      	mov	r0, r6
 8017c32:	f000 f82f 	bl	8017c94 <__malloc_unlock>
 8017c36:	f104 000b 	add.w	r0, r4, #11
 8017c3a:	1d23      	adds	r3, r4, #4
 8017c3c:	f020 0007 	bic.w	r0, r0, #7
 8017c40:	1ac2      	subs	r2, r0, r3
 8017c42:	bf1c      	itt	ne
 8017c44:	1a1b      	subne	r3, r3, r0
 8017c46:	50a3      	strne	r3, [r4, r2]
 8017c48:	e7af      	b.n	8017baa <_malloc_r+0x22>
 8017c4a:	6862      	ldr	r2, [r4, #4]
 8017c4c:	42a3      	cmp	r3, r4
 8017c4e:	bf0c      	ite	eq
 8017c50:	f8c8 2000 	streq.w	r2, [r8]
 8017c54:	605a      	strne	r2, [r3, #4]
 8017c56:	e7eb      	b.n	8017c30 <_malloc_r+0xa8>
 8017c58:	4623      	mov	r3, r4
 8017c5a:	6864      	ldr	r4, [r4, #4]
 8017c5c:	e7ae      	b.n	8017bbc <_malloc_r+0x34>
 8017c5e:	463c      	mov	r4, r7
 8017c60:	687f      	ldr	r7, [r7, #4]
 8017c62:	e7b6      	b.n	8017bd2 <_malloc_r+0x4a>
 8017c64:	461a      	mov	r2, r3
 8017c66:	685b      	ldr	r3, [r3, #4]
 8017c68:	42a3      	cmp	r3, r4
 8017c6a:	d1fb      	bne.n	8017c64 <_malloc_r+0xdc>
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	6053      	str	r3, [r2, #4]
 8017c70:	e7de      	b.n	8017c30 <_malloc_r+0xa8>
 8017c72:	230c      	movs	r3, #12
 8017c74:	6033      	str	r3, [r6, #0]
 8017c76:	4630      	mov	r0, r6
 8017c78:	f000 f80c 	bl	8017c94 <__malloc_unlock>
 8017c7c:	e794      	b.n	8017ba8 <_malloc_r+0x20>
 8017c7e:	6005      	str	r5, [r0, #0]
 8017c80:	e7d6      	b.n	8017c30 <_malloc_r+0xa8>
 8017c82:	bf00      	nop
 8017c84:	20010f38 	.word	0x20010f38

08017c88 <__malloc_lock>:
 8017c88:	4801      	ldr	r0, [pc, #4]	@ (8017c90 <__malloc_lock+0x8>)
 8017c8a:	f000 bbf4 	b.w	8018476 <__retarget_lock_acquire_recursive>
 8017c8e:	bf00      	nop
 8017c90:	2001107d 	.word	0x2001107d

08017c94 <__malloc_unlock>:
 8017c94:	4801      	ldr	r0, [pc, #4]	@ (8017c9c <__malloc_unlock+0x8>)
 8017c96:	f000 bbef 	b.w	8018478 <__retarget_lock_release_recursive>
 8017c9a:	bf00      	nop
 8017c9c:	2001107d 	.word	0x2001107d

08017ca0 <srand>:
 8017ca0:	b538      	push	{r3, r4, r5, lr}
 8017ca2:	4b10      	ldr	r3, [pc, #64]	@ (8017ce4 <srand+0x44>)
 8017ca4:	681d      	ldr	r5, [r3, #0]
 8017ca6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017ca8:	4604      	mov	r4, r0
 8017caa:	b9b3      	cbnz	r3, 8017cda <srand+0x3a>
 8017cac:	2018      	movs	r0, #24
 8017cae:	f7ff ff39 	bl	8017b24 <malloc>
 8017cb2:	4602      	mov	r2, r0
 8017cb4:	6328      	str	r0, [r5, #48]	@ 0x30
 8017cb6:	b920      	cbnz	r0, 8017cc2 <srand+0x22>
 8017cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8017ce8 <srand+0x48>)
 8017cba:	480c      	ldr	r0, [pc, #48]	@ (8017cec <srand+0x4c>)
 8017cbc:	2146      	movs	r1, #70	@ 0x46
 8017cbe:	f000 fbf3 	bl	80184a8 <__assert_func>
 8017cc2:	490b      	ldr	r1, [pc, #44]	@ (8017cf0 <srand+0x50>)
 8017cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8017cf4 <srand+0x54>)
 8017cc6:	e9c0 1300 	strd	r1, r3, [r0]
 8017cca:	4b0b      	ldr	r3, [pc, #44]	@ (8017cf8 <srand+0x58>)
 8017ccc:	6083      	str	r3, [r0, #8]
 8017cce:	230b      	movs	r3, #11
 8017cd0:	8183      	strh	r3, [r0, #12]
 8017cd2:	2100      	movs	r1, #0
 8017cd4:	2001      	movs	r0, #1
 8017cd6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017cda:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017cdc:	2200      	movs	r2, #0
 8017cde:	611c      	str	r4, [r3, #16]
 8017ce0:	615a      	str	r2, [r3, #20]
 8017ce2:	bd38      	pop	{r3, r4, r5, pc}
 8017ce4:	200000d8 	.word	0x200000d8
 8017ce8:	08019dbc 	.word	0x08019dbc
 8017cec:	08019dd3 	.word	0x08019dd3
 8017cf0:	abcd330e 	.word	0xabcd330e
 8017cf4:	e66d1234 	.word	0xe66d1234
 8017cf8:	0005deec 	.word	0x0005deec

08017cfc <rand>:
 8017cfc:	4b16      	ldr	r3, [pc, #88]	@ (8017d58 <rand+0x5c>)
 8017cfe:	b510      	push	{r4, lr}
 8017d00:	681c      	ldr	r4, [r3, #0]
 8017d02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017d04:	b9b3      	cbnz	r3, 8017d34 <rand+0x38>
 8017d06:	2018      	movs	r0, #24
 8017d08:	f7ff ff0c 	bl	8017b24 <malloc>
 8017d0c:	4602      	mov	r2, r0
 8017d0e:	6320      	str	r0, [r4, #48]	@ 0x30
 8017d10:	b920      	cbnz	r0, 8017d1c <rand+0x20>
 8017d12:	4b12      	ldr	r3, [pc, #72]	@ (8017d5c <rand+0x60>)
 8017d14:	4812      	ldr	r0, [pc, #72]	@ (8017d60 <rand+0x64>)
 8017d16:	2152      	movs	r1, #82	@ 0x52
 8017d18:	f000 fbc6 	bl	80184a8 <__assert_func>
 8017d1c:	4911      	ldr	r1, [pc, #68]	@ (8017d64 <rand+0x68>)
 8017d1e:	4b12      	ldr	r3, [pc, #72]	@ (8017d68 <rand+0x6c>)
 8017d20:	e9c0 1300 	strd	r1, r3, [r0]
 8017d24:	4b11      	ldr	r3, [pc, #68]	@ (8017d6c <rand+0x70>)
 8017d26:	6083      	str	r3, [r0, #8]
 8017d28:	230b      	movs	r3, #11
 8017d2a:	8183      	strh	r3, [r0, #12]
 8017d2c:	2100      	movs	r1, #0
 8017d2e:	2001      	movs	r0, #1
 8017d30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017d34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017d36:	480e      	ldr	r0, [pc, #56]	@ (8017d70 <rand+0x74>)
 8017d38:	690b      	ldr	r3, [r1, #16]
 8017d3a:	694c      	ldr	r4, [r1, #20]
 8017d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8017d74 <rand+0x78>)
 8017d3e:	4358      	muls	r0, r3
 8017d40:	fb02 0004 	mla	r0, r2, r4, r0
 8017d44:	fba3 3202 	umull	r3, r2, r3, r2
 8017d48:	3301      	adds	r3, #1
 8017d4a:	eb40 0002 	adc.w	r0, r0, r2
 8017d4e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017d52:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017d56:	bd10      	pop	{r4, pc}
 8017d58:	200000d8 	.word	0x200000d8
 8017d5c:	08019dbc 	.word	0x08019dbc
 8017d60:	08019dd3 	.word	0x08019dd3
 8017d64:	abcd330e 	.word	0xabcd330e
 8017d68:	e66d1234 	.word	0xe66d1234
 8017d6c:	0005deec 	.word	0x0005deec
 8017d70:	5851f42d 	.word	0x5851f42d
 8017d74:	4c957f2d 	.word	0x4c957f2d

08017d78 <realloc>:
 8017d78:	4b02      	ldr	r3, [pc, #8]	@ (8017d84 <realloc+0xc>)
 8017d7a:	460a      	mov	r2, r1
 8017d7c:	4601      	mov	r1, r0
 8017d7e:	6818      	ldr	r0, [r3, #0]
 8017d80:	f000 b802 	b.w	8017d88 <_realloc_r>
 8017d84:	200000d8 	.word	0x200000d8

08017d88 <_realloc_r>:
 8017d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d8c:	4607      	mov	r7, r0
 8017d8e:	4614      	mov	r4, r2
 8017d90:	460d      	mov	r5, r1
 8017d92:	b921      	cbnz	r1, 8017d9e <_realloc_r+0x16>
 8017d94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d98:	4611      	mov	r1, r2
 8017d9a:	f7ff bef5 	b.w	8017b88 <_malloc_r>
 8017d9e:	b92a      	cbnz	r2, 8017dac <_realloc_r+0x24>
 8017da0:	f000 fbac 	bl	80184fc <_free_r>
 8017da4:	4625      	mov	r5, r4
 8017da6:	4628      	mov	r0, r5
 8017da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dac:	f000 fbf0 	bl	8018590 <_malloc_usable_size_r>
 8017db0:	4284      	cmp	r4, r0
 8017db2:	4606      	mov	r6, r0
 8017db4:	d802      	bhi.n	8017dbc <_realloc_r+0x34>
 8017db6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017dba:	d8f4      	bhi.n	8017da6 <_realloc_r+0x1e>
 8017dbc:	4621      	mov	r1, r4
 8017dbe:	4638      	mov	r0, r7
 8017dc0:	f7ff fee2 	bl	8017b88 <_malloc_r>
 8017dc4:	4680      	mov	r8, r0
 8017dc6:	b908      	cbnz	r0, 8017dcc <_realloc_r+0x44>
 8017dc8:	4645      	mov	r5, r8
 8017dca:	e7ec      	b.n	8017da6 <_realloc_r+0x1e>
 8017dcc:	42b4      	cmp	r4, r6
 8017dce:	4622      	mov	r2, r4
 8017dd0:	4629      	mov	r1, r5
 8017dd2:	bf28      	it	cs
 8017dd4:	4632      	movcs	r2, r6
 8017dd6:	f000 fb58 	bl	801848a <memcpy>
 8017dda:	4629      	mov	r1, r5
 8017ddc:	4638      	mov	r0, r7
 8017dde:	f000 fb8d 	bl	80184fc <_free_r>
 8017de2:	e7f1      	b.n	8017dc8 <_realloc_r+0x40>

08017de4 <_strtoul_l.isra.0>:
 8017de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017de8:	4e34      	ldr	r6, [pc, #208]	@ (8017ebc <_strtoul_l.isra.0+0xd8>)
 8017dea:	4686      	mov	lr, r0
 8017dec:	460d      	mov	r5, r1
 8017dee:	4628      	mov	r0, r5
 8017df0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017df4:	5d37      	ldrb	r7, [r6, r4]
 8017df6:	f017 0708 	ands.w	r7, r7, #8
 8017dfa:	d1f8      	bne.n	8017dee <_strtoul_l.isra.0+0xa>
 8017dfc:	2c2d      	cmp	r4, #45	@ 0x2d
 8017dfe:	d110      	bne.n	8017e22 <_strtoul_l.isra.0+0x3e>
 8017e00:	782c      	ldrb	r4, [r5, #0]
 8017e02:	2701      	movs	r7, #1
 8017e04:	1c85      	adds	r5, r0, #2
 8017e06:	f033 0010 	bics.w	r0, r3, #16
 8017e0a:	d115      	bne.n	8017e38 <_strtoul_l.isra.0+0x54>
 8017e0c:	2c30      	cmp	r4, #48	@ 0x30
 8017e0e:	d10d      	bne.n	8017e2c <_strtoul_l.isra.0+0x48>
 8017e10:	7828      	ldrb	r0, [r5, #0]
 8017e12:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017e16:	2858      	cmp	r0, #88	@ 0x58
 8017e18:	d108      	bne.n	8017e2c <_strtoul_l.isra.0+0x48>
 8017e1a:	786c      	ldrb	r4, [r5, #1]
 8017e1c:	3502      	adds	r5, #2
 8017e1e:	2310      	movs	r3, #16
 8017e20:	e00a      	b.n	8017e38 <_strtoul_l.isra.0+0x54>
 8017e22:	2c2b      	cmp	r4, #43	@ 0x2b
 8017e24:	bf04      	itt	eq
 8017e26:	782c      	ldrbeq	r4, [r5, #0]
 8017e28:	1c85      	addeq	r5, r0, #2
 8017e2a:	e7ec      	b.n	8017e06 <_strtoul_l.isra.0+0x22>
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d1f6      	bne.n	8017e1e <_strtoul_l.isra.0+0x3a>
 8017e30:	2c30      	cmp	r4, #48	@ 0x30
 8017e32:	bf14      	ite	ne
 8017e34:	230a      	movne	r3, #10
 8017e36:	2308      	moveq	r3, #8
 8017e38:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017e3c:	2600      	movs	r6, #0
 8017e3e:	fbb8 f8f3 	udiv	r8, r8, r3
 8017e42:	fb03 f908 	mul.w	r9, r3, r8
 8017e46:	ea6f 0909 	mvn.w	r9, r9
 8017e4a:	4630      	mov	r0, r6
 8017e4c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017e50:	f1bc 0f09 	cmp.w	ip, #9
 8017e54:	d810      	bhi.n	8017e78 <_strtoul_l.isra.0+0x94>
 8017e56:	4664      	mov	r4, ip
 8017e58:	42a3      	cmp	r3, r4
 8017e5a:	dd1e      	ble.n	8017e9a <_strtoul_l.isra.0+0xb6>
 8017e5c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017e60:	d007      	beq.n	8017e72 <_strtoul_l.isra.0+0x8e>
 8017e62:	4580      	cmp	r8, r0
 8017e64:	d316      	bcc.n	8017e94 <_strtoul_l.isra.0+0xb0>
 8017e66:	d101      	bne.n	8017e6c <_strtoul_l.isra.0+0x88>
 8017e68:	45a1      	cmp	r9, r4
 8017e6a:	db13      	blt.n	8017e94 <_strtoul_l.isra.0+0xb0>
 8017e6c:	fb00 4003 	mla	r0, r0, r3, r4
 8017e70:	2601      	movs	r6, #1
 8017e72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017e76:	e7e9      	b.n	8017e4c <_strtoul_l.isra.0+0x68>
 8017e78:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017e7c:	f1bc 0f19 	cmp.w	ip, #25
 8017e80:	d801      	bhi.n	8017e86 <_strtoul_l.isra.0+0xa2>
 8017e82:	3c37      	subs	r4, #55	@ 0x37
 8017e84:	e7e8      	b.n	8017e58 <_strtoul_l.isra.0+0x74>
 8017e86:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017e8a:	f1bc 0f19 	cmp.w	ip, #25
 8017e8e:	d804      	bhi.n	8017e9a <_strtoul_l.isra.0+0xb6>
 8017e90:	3c57      	subs	r4, #87	@ 0x57
 8017e92:	e7e1      	b.n	8017e58 <_strtoul_l.isra.0+0x74>
 8017e94:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017e98:	e7eb      	b.n	8017e72 <_strtoul_l.isra.0+0x8e>
 8017e9a:	1c73      	adds	r3, r6, #1
 8017e9c:	d106      	bne.n	8017eac <_strtoul_l.isra.0+0xc8>
 8017e9e:	2322      	movs	r3, #34	@ 0x22
 8017ea0:	f8ce 3000 	str.w	r3, [lr]
 8017ea4:	4630      	mov	r0, r6
 8017ea6:	b932      	cbnz	r2, 8017eb6 <_strtoul_l.isra.0+0xd2>
 8017ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017eac:	b107      	cbz	r7, 8017eb0 <_strtoul_l.isra.0+0xcc>
 8017eae:	4240      	negs	r0, r0
 8017eb0:	2a00      	cmp	r2, #0
 8017eb2:	d0f9      	beq.n	8017ea8 <_strtoul_l.isra.0+0xc4>
 8017eb4:	b106      	cbz	r6, 8017eb8 <_strtoul_l.isra.0+0xd4>
 8017eb6:	1e69      	subs	r1, r5, #1
 8017eb8:	6011      	str	r1, [r2, #0]
 8017eba:	e7f5      	b.n	8017ea8 <_strtoul_l.isra.0+0xc4>
 8017ebc:	08019e9b 	.word	0x08019e9b

08017ec0 <strtoul>:
 8017ec0:	4613      	mov	r3, r2
 8017ec2:	460a      	mov	r2, r1
 8017ec4:	4601      	mov	r1, r0
 8017ec6:	4802      	ldr	r0, [pc, #8]	@ (8017ed0 <strtoul+0x10>)
 8017ec8:	6800      	ldr	r0, [r0, #0]
 8017eca:	f7ff bf8b 	b.w	8017de4 <_strtoul_l.isra.0>
 8017ece:	bf00      	nop
 8017ed0:	200000d8 	.word	0x200000d8

08017ed4 <std>:
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	b510      	push	{r4, lr}
 8017ed8:	4604      	mov	r4, r0
 8017eda:	e9c0 3300 	strd	r3, r3, [r0]
 8017ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017ee2:	6083      	str	r3, [r0, #8]
 8017ee4:	8181      	strh	r1, [r0, #12]
 8017ee6:	6643      	str	r3, [r0, #100]	@ 0x64
 8017ee8:	81c2      	strh	r2, [r0, #14]
 8017eea:	6183      	str	r3, [r0, #24]
 8017eec:	4619      	mov	r1, r3
 8017eee:	2208      	movs	r2, #8
 8017ef0:	305c      	adds	r0, #92	@ 0x5c
 8017ef2:	f000 f9a3 	bl	801823c <memset>
 8017ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8017f2c <std+0x58>)
 8017ef8:	6263      	str	r3, [r4, #36]	@ 0x24
 8017efa:	4b0d      	ldr	r3, [pc, #52]	@ (8017f30 <std+0x5c>)
 8017efc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017efe:	4b0d      	ldr	r3, [pc, #52]	@ (8017f34 <std+0x60>)
 8017f00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017f02:	4b0d      	ldr	r3, [pc, #52]	@ (8017f38 <std+0x64>)
 8017f04:	6323      	str	r3, [r4, #48]	@ 0x30
 8017f06:	4b0d      	ldr	r3, [pc, #52]	@ (8017f3c <std+0x68>)
 8017f08:	6224      	str	r4, [r4, #32]
 8017f0a:	429c      	cmp	r4, r3
 8017f0c:	d006      	beq.n	8017f1c <std+0x48>
 8017f0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017f12:	4294      	cmp	r4, r2
 8017f14:	d002      	beq.n	8017f1c <std+0x48>
 8017f16:	33d0      	adds	r3, #208	@ 0xd0
 8017f18:	429c      	cmp	r4, r3
 8017f1a:	d105      	bne.n	8017f28 <std+0x54>
 8017f1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f24:	f000 baa6 	b.w	8018474 <__retarget_lock_init_recursive>
 8017f28:	bd10      	pop	{r4, pc}
 8017f2a:	bf00      	nop
 8017f2c:	080180e9 	.word	0x080180e9
 8017f30:	0801810b 	.word	0x0801810b
 8017f34:	08018143 	.word	0x08018143
 8017f38:	08018167 	.word	0x08018167
 8017f3c:	20010f3c 	.word	0x20010f3c

08017f40 <stdio_exit_handler>:
 8017f40:	4a02      	ldr	r2, [pc, #8]	@ (8017f4c <stdio_exit_handler+0xc>)
 8017f42:	4903      	ldr	r1, [pc, #12]	@ (8017f50 <stdio_exit_handler+0x10>)
 8017f44:	4803      	ldr	r0, [pc, #12]	@ (8017f54 <stdio_exit_handler+0x14>)
 8017f46:	f000 b869 	b.w	801801c <_fwalk_sglue>
 8017f4a:	bf00      	nop
 8017f4c:	200000cc 	.word	0x200000cc
 8017f50:	08018ef5 	.word	0x08018ef5
 8017f54:	200000dc 	.word	0x200000dc

08017f58 <cleanup_stdio>:
 8017f58:	6841      	ldr	r1, [r0, #4]
 8017f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8017f8c <cleanup_stdio+0x34>)
 8017f5c:	4299      	cmp	r1, r3
 8017f5e:	b510      	push	{r4, lr}
 8017f60:	4604      	mov	r4, r0
 8017f62:	d001      	beq.n	8017f68 <cleanup_stdio+0x10>
 8017f64:	f000 ffc6 	bl	8018ef4 <_fflush_r>
 8017f68:	68a1      	ldr	r1, [r4, #8]
 8017f6a:	4b09      	ldr	r3, [pc, #36]	@ (8017f90 <cleanup_stdio+0x38>)
 8017f6c:	4299      	cmp	r1, r3
 8017f6e:	d002      	beq.n	8017f76 <cleanup_stdio+0x1e>
 8017f70:	4620      	mov	r0, r4
 8017f72:	f000 ffbf 	bl	8018ef4 <_fflush_r>
 8017f76:	68e1      	ldr	r1, [r4, #12]
 8017f78:	4b06      	ldr	r3, [pc, #24]	@ (8017f94 <cleanup_stdio+0x3c>)
 8017f7a:	4299      	cmp	r1, r3
 8017f7c:	d004      	beq.n	8017f88 <cleanup_stdio+0x30>
 8017f7e:	4620      	mov	r0, r4
 8017f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f84:	f000 bfb6 	b.w	8018ef4 <_fflush_r>
 8017f88:	bd10      	pop	{r4, pc}
 8017f8a:	bf00      	nop
 8017f8c:	20010f3c 	.word	0x20010f3c
 8017f90:	20010fa4 	.word	0x20010fa4
 8017f94:	2001100c 	.word	0x2001100c

08017f98 <global_stdio_init.part.0>:
 8017f98:	b510      	push	{r4, lr}
 8017f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8017fc8 <global_stdio_init.part.0+0x30>)
 8017f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8017fcc <global_stdio_init.part.0+0x34>)
 8017f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8017fd0 <global_stdio_init.part.0+0x38>)
 8017fa0:	601a      	str	r2, [r3, #0]
 8017fa2:	4620      	mov	r0, r4
 8017fa4:	2200      	movs	r2, #0
 8017fa6:	2104      	movs	r1, #4
 8017fa8:	f7ff ff94 	bl	8017ed4 <std>
 8017fac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017fb0:	2201      	movs	r2, #1
 8017fb2:	2109      	movs	r1, #9
 8017fb4:	f7ff ff8e 	bl	8017ed4 <std>
 8017fb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017fbc:	2202      	movs	r2, #2
 8017fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fc2:	2112      	movs	r1, #18
 8017fc4:	f7ff bf86 	b.w	8017ed4 <std>
 8017fc8:	20011074 	.word	0x20011074
 8017fcc:	20010f3c 	.word	0x20010f3c
 8017fd0:	08017f41 	.word	0x08017f41

08017fd4 <__sfp_lock_acquire>:
 8017fd4:	4801      	ldr	r0, [pc, #4]	@ (8017fdc <__sfp_lock_acquire+0x8>)
 8017fd6:	f000 ba4e 	b.w	8018476 <__retarget_lock_acquire_recursive>
 8017fda:	bf00      	nop
 8017fdc:	2001107e 	.word	0x2001107e

08017fe0 <__sfp_lock_release>:
 8017fe0:	4801      	ldr	r0, [pc, #4]	@ (8017fe8 <__sfp_lock_release+0x8>)
 8017fe2:	f000 ba49 	b.w	8018478 <__retarget_lock_release_recursive>
 8017fe6:	bf00      	nop
 8017fe8:	2001107e 	.word	0x2001107e

08017fec <__sinit>:
 8017fec:	b510      	push	{r4, lr}
 8017fee:	4604      	mov	r4, r0
 8017ff0:	f7ff fff0 	bl	8017fd4 <__sfp_lock_acquire>
 8017ff4:	6a23      	ldr	r3, [r4, #32]
 8017ff6:	b11b      	cbz	r3, 8018000 <__sinit+0x14>
 8017ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ffc:	f7ff bff0 	b.w	8017fe0 <__sfp_lock_release>
 8018000:	4b04      	ldr	r3, [pc, #16]	@ (8018014 <__sinit+0x28>)
 8018002:	6223      	str	r3, [r4, #32]
 8018004:	4b04      	ldr	r3, [pc, #16]	@ (8018018 <__sinit+0x2c>)
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d1f5      	bne.n	8017ff8 <__sinit+0xc>
 801800c:	f7ff ffc4 	bl	8017f98 <global_stdio_init.part.0>
 8018010:	e7f2      	b.n	8017ff8 <__sinit+0xc>
 8018012:	bf00      	nop
 8018014:	08017f59 	.word	0x08017f59
 8018018:	20011074 	.word	0x20011074

0801801c <_fwalk_sglue>:
 801801c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018020:	4607      	mov	r7, r0
 8018022:	4688      	mov	r8, r1
 8018024:	4614      	mov	r4, r2
 8018026:	2600      	movs	r6, #0
 8018028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801802c:	f1b9 0901 	subs.w	r9, r9, #1
 8018030:	d505      	bpl.n	801803e <_fwalk_sglue+0x22>
 8018032:	6824      	ldr	r4, [r4, #0]
 8018034:	2c00      	cmp	r4, #0
 8018036:	d1f7      	bne.n	8018028 <_fwalk_sglue+0xc>
 8018038:	4630      	mov	r0, r6
 801803a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801803e:	89ab      	ldrh	r3, [r5, #12]
 8018040:	2b01      	cmp	r3, #1
 8018042:	d907      	bls.n	8018054 <_fwalk_sglue+0x38>
 8018044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018048:	3301      	adds	r3, #1
 801804a:	d003      	beq.n	8018054 <_fwalk_sglue+0x38>
 801804c:	4629      	mov	r1, r5
 801804e:	4638      	mov	r0, r7
 8018050:	47c0      	blx	r8
 8018052:	4306      	orrs	r6, r0
 8018054:	3568      	adds	r5, #104	@ 0x68
 8018056:	e7e9      	b.n	801802c <_fwalk_sglue+0x10>

08018058 <iprintf>:
 8018058:	b40f      	push	{r0, r1, r2, r3}
 801805a:	b507      	push	{r0, r1, r2, lr}
 801805c:	4906      	ldr	r1, [pc, #24]	@ (8018078 <iprintf+0x20>)
 801805e:	ab04      	add	r3, sp, #16
 8018060:	6808      	ldr	r0, [r1, #0]
 8018062:	f853 2b04 	ldr.w	r2, [r3], #4
 8018066:	6881      	ldr	r1, [r0, #8]
 8018068:	9301      	str	r3, [sp, #4]
 801806a:	f000 fc1b 	bl	80188a4 <_vfiprintf_r>
 801806e:	b003      	add	sp, #12
 8018070:	f85d eb04 	ldr.w	lr, [sp], #4
 8018074:	b004      	add	sp, #16
 8018076:	4770      	bx	lr
 8018078:	200000d8 	.word	0x200000d8

0801807c <sniprintf>:
 801807c:	b40c      	push	{r2, r3}
 801807e:	b530      	push	{r4, r5, lr}
 8018080:	4b18      	ldr	r3, [pc, #96]	@ (80180e4 <sniprintf+0x68>)
 8018082:	1e0c      	subs	r4, r1, #0
 8018084:	681d      	ldr	r5, [r3, #0]
 8018086:	b09d      	sub	sp, #116	@ 0x74
 8018088:	da08      	bge.n	801809c <sniprintf+0x20>
 801808a:	238b      	movs	r3, #139	@ 0x8b
 801808c:	602b      	str	r3, [r5, #0]
 801808e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018092:	b01d      	add	sp, #116	@ 0x74
 8018094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018098:	b002      	add	sp, #8
 801809a:	4770      	bx	lr
 801809c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80180a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80180a4:	f04f 0300 	mov.w	r3, #0
 80180a8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80180aa:	bf14      	ite	ne
 80180ac:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80180b0:	4623      	moveq	r3, r4
 80180b2:	9304      	str	r3, [sp, #16]
 80180b4:	9307      	str	r3, [sp, #28]
 80180b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80180ba:	9002      	str	r0, [sp, #8]
 80180bc:	9006      	str	r0, [sp, #24]
 80180be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80180c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80180c4:	ab21      	add	r3, sp, #132	@ 0x84
 80180c6:	a902      	add	r1, sp, #8
 80180c8:	4628      	mov	r0, r5
 80180ca:	9301      	str	r3, [sp, #4]
 80180cc:	f000 fac4 	bl	8018658 <_svfiprintf_r>
 80180d0:	1c43      	adds	r3, r0, #1
 80180d2:	bfbc      	itt	lt
 80180d4:	238b      	movlt	r3, #139	@ 0x8b
 80180d6:	602b      	strlt	r3, [r5, #0]
 80180d8:	2c00      	cmp	r4, #0
 80180da:	d0da      	beq.n	8018092 <sniprintf+0x16>
 80180dc:	9b02      	ldr	r3, [sp, #8]
 80180de:	2200      	movs	r2, #0
 80180e0:	701a      	strb	r2, [r3, #0]
 80180e2:	e7d6      	b.n	8018092 <sniprintf+0x16>
 80180e4:	200000d8 	.word	0x200000d8

080180e8 <__sread>:
 80180e8:	b510      	push	{r4, lr}
 80180ea:	460c      	mov	r4, r1
 80180ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180f0:	f000 f962 	bl	80183b8 <_read_r>
 80180f4:	2800      	cmp	r0, #0
 80180f6:	bfab      	itete	ge
 80180f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80180fa:	89a3      	ldrhlt	r3, [r4, #12]
 80180fc:	181b      	addge	r3, r3, r0
 80180fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018102:	bfac      	ite	ge
 8018104:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018106:	81a3      	strhlt	r3, [r4, #12]
 8018108:	bd10      	pop	{r4, pc}

0801810a <__swrite>:
 801810a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801810e:	461f      	mov	r7, r3
 8018110:	898b      	ldrh	r3, [r1, #12]
 8018112:	05db      	lsls	r3, r3, #23
 8018114:	4605      	mov	r5, r0
 8018116:	460c      	mov	r4, r1
 8018118:	4616      	mov	r6, r2
 801811a:	d505      	bpl.n	8018128 <__swrite+0x1e>
 801811c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018120:	2302      	movs	r3, #2
 8018122:	2200      	movs	r2, #0
 8018124:	f000 f936 	bl	8018394 <_lseek_r>
 8018128:	89a3      	ldrh	r3, [r4, #12]
 801812a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801812e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018132:	81a3      	strh	r3, [r4, #12]
 8018134:	4632      	mov	r2, r6
 8018136:	463b      	mov	r3, r7
 8018138:	4628      	mov	r0, r5
 801813a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801813e:	f000 b95d 	b.w	80183fc <_write_r>

08018142 <__sseek>:
 8018142:	b510      	push	{r4, lr}
 8018144:	460c      	mov	r4, r1
 8018146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801814a:	f000 f923 	bl	8018394 <_lseek_r>
 801814e:	1c43      	adds	r3, r0, #1
 8018150:	89a3      	ldrh	r3, [r4, #12]
 8018152:	bf15      	itete	ne
 8018154:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018156:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801815a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801815e:	81a3      	strheq	r3, [r4, #12]
 8018160:	bf18      	it	ne
 8018162:	81a3      	strhne	r3, [r4, #12]
 8018164:	bd10      	pop	{r4, pc}

08018166 <__sclose>:
 8018166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801816a:	f000 b8a5 	b.w	80182b8 <_close_r>

0801816e <_vsniprintf_r>:
 801816e:	b530      	push	{r4, r5, lr}
 8018170:	4614      	mov	r4, r2
 8018172:	2c00      	cmp	r4, #0
 8018174:	b09b      	sub	sp, #108	@ 0x6c
 8018176:	4605      	mov	r5, r0
 8018178:	461a      	mov	r2, r3
 801817a:	da05      	bge.n	8018188 <_vsniprintf_r+0x1a>
 801817c:	238b      	movs	r3, #139	@ 0x8b
 801817e:	6003      	str	r3, [r0, #0]
 8018180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018184:	b01b      	add	sp, #108	@ 0x6c
 8018186:	bd30      	pop	{r4, r5, pc}
 8018188:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801818c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018190:	f04f 0300 	mov.w	r3, #0
 8018194:	9319      	str	r3, [sp, #100]	@ 0x64
 8018196:	bf14      	ite	ne
 8018198:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801819c:	4623      	moveq	r3, r4
 801819e:	9302      	str	r3, [sp, #8]
 80181a0:	9305      	str	r3, [sp, #20]
 80181a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80181a6:	9100      	str	r1, [sp, #0]
 80181a8:	9104      	str	r1, [sp, #16]
 80181aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80181ae:	4669      	mov	r1, sp
 80181b0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80181b2:	f000 fa51 	bl	8018658 <_svfiprintf_r>
 80181b6:	1c43      	adds	r3, r0, #1
 80181b8:	bfbc      	itt	lt
 80181ba:	238b      	movlt	r3, #139	@ 0x8b
 80181bc:	602b      	strlt	r3, [r5, #0]
 80181be:	2c00      	cmp	r4, #0
 80181c0:	d0e0      	beq.n	8018184 <_vsniprintf_r+0x16>
 80181c2:	9b00      	ldr	r3, [sp, #0]
 80181c4:	2200      	movs	r2, #0
 80181c6:	701a      	strb	r2, [r3, #0]
 80181c8:	e7dc      	b.n	8018184 <_vsniprintf_r+0x16>
	...

080181cc <vsniprintf>:
 80181cc:	b507      	push	{r0, r1, r2, lr}
 80181ce:	9300      	str	r3, [sp, #0]
 80181d0:	4613      	mov	r3, r2
 80181d2:	460a      	mov	r2, r1
 80181d4:	4601      	mov	r1, r0
 80181d6:	4803      	ldr	r0, [pc, #12]	@ (80181e4 <vsniprintf+0x18>)
 80181d8:	6800      	ldr	r0, [r0, #0]
 80181da:	f7ff ffc8 	bl	801816e <_vsniprintf_r>
 80181de:	b003      	add	sp, #12
 80181e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80181e4:	200000d8 	.word	0x200000d8

080181e8 <memcmp>:
 80181e8:	b510      	push	{r4, lr}
 80181ea:	3901      	subs	r1, #1
 80181ec:	4402      	add	r2, r0
 80181ee:	4290      	cmp	r0, r2
 80181f0:	d101      	bne.n	80181f6 <memcmp+0xe>
 80181f2:	2000      	movs	r0, #0
 80181f4:	e005      	b.n	8018202 <memcmp+0x1a>
 80181f6:	7803      	ldrb	r3, [r0, #0]
 80181f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80181fc:	42a3      	cmp	r3, r4
 80181fe:	d001      	beq.n	8018204 <memcmp+0x1c>
 8018200:	1b18      	subs	r0, r3, r4
 8018202:	bd10      	pop	{r4, pc}
 8018204:	3001      	adds	r0, #1
 8018206:	e7f2      	b.n	80181ee <memcmp+0x6>

08018208 <memmove>:
 8018208:	4288      	cmp	r0, r1
 801820a:	b510      	push	{r4, lr}
 801820c:	eb01 0402 	add.w	r4, r1, r2
 8018210:	d902      	bls.n	8018218 <memmove+0x10>
 8018212:	4284      	cmp	r4, r0
 8018214:	4623      	mov	r3, r4
 8018216:	d807      	bhi.n	8018228 <memmove+0x20>
 8018218:	1e43      	subs	r3, r0, #1
 801821a:	42a1      	cmp	r1, r4
 801821c:	d008      	beq.n	8018230 <memmove+0x28>
 801821e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018226:	e7f8      	b.n	801821a <memmove+0x12>
 8018228:	4402      	add	r2, r0
 801822a:	4601      	mov	r1, r0
 801822c:	428a      	cmp	r2, r1
 801822e:	d100      	bne.n	8018232 <memmove+0x2a>
 8018230:	bd10      	pop	{r4, pc}
 8018232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801823a:	e7f7      	b.n	801822c <memmove+0x24>

0801823c <memset>:
 801823c:	4402      	add	r2, r0
 801823e:	4603      	mov	r3, r0
 8018240:	4293      	cmp	r3, r2
 8018242:	d100      	bne.n	8018246 <memset+0xa>
 8018244:	4770      	bx	lr
 8018246:	f803 1b01 	strb.w	r1, [r3], #1
 801824a:	e7f9      	b.n	8018240 <memset+0x4>

0801824c <strchr>:
 801824c:	b2c9      	uxtb	r1, r1
 801824e:	4603      	mov	r3, r0
 8018250:	4618      	mov	r0, r3
 8018252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018256:	b112      	cbz	r2, 801825e <strchr+0x12>
 8018258:	428a      	cmp	r2, r1
 801825a:	d1f9      	bne.n	8018250 <strchr+0x4>
 801825c:	4770      	bx	lr
 801825e:	2900      	cmp	r1, #0
 8018260:	bf18      	it	ne
 8018262:	2000      	movne	r0, #0
 8018264:	4770      	bx	lr

08018266 <strncmp>:
 8018266:	b510      	push	{r4, lr}
 8018268:	b16a      	cbz	r2, 8018286 <strncmp+0x20>
 801826a:	3901      	subs	r1, #1
 801826c:	1884      	adds	r4, r0, r2
 801826e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018272:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018276:	429a      	cmp	r2, r3
 8018278:	d103      	bne.n	8018282 <strncmp+0x1c>
 801827a:	42a0      	cmp	r0, r4
 801827c:	d001      	beq.n	8018282 <strncmp+0x1c>
 801827e:	2a00      	cmp	r2, #0
 8018280:	d1f5      	bne.n	801826e <strncmp+0x8>
 8018282:	1ad0      	subs	r0, r2, r3
 8018284:	bd10      	pop	{r4, pc}
 8018286:	4610      	mov	r0, r2
 8018288:	e7fc      	b.n	8018284 <strncmp+0x1e>

0801828a <strstr>:
 801828a:	780a      	ldrb	r2, [r1, #0]
 801828c:	b570      	push	{r4, r5, r6, lr}
 801828e:	b96a      	cbnz	r2, 80182ac <strstr+0x22>
 8018290:	bd70      	pop	{r4, r5, r6, pc}
 8018292:	429a      	cmp	r2, r3
 8018294:	d109      	bne.n	80182aa <strstr+0x20>
 8018296:	460c      	mov	r4, r1
 8018298:	4605      	mov	r5, r0
 801829a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d0f6      	beq.n	8018290 <strstr+0x6>
 80182a2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80182a6:	429e      	cmp	r6, r3
 80182a8:	d0f7      	beq.n	801829a <strstr+0x10>
 80182aa:	3001      	adds	r0, #1
 80182ac:	7803      	ldrb	r3, [r0, #0]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d1ef      	bne.n	8018292 <strstr+0x8>
 80182b2:	4618      	mov	r0, r3
 80182b4:	e7ec      	b.n	8018290 <strstr+0x6>
	...

080182b8 <_close_r>:
 80182b8:	b538      	push	{r3, r4, r5, lr}
 80182ba:	4d06      	ldr	r5, [pc, #24]	@ (80182d4 <_close_r+0x1c>)
 80182bc:	2300      	movs	r3, #0
 80182be:	4604      	mov	r4, r0
 80182c0:	4608      	mov	r0, r1
 80182c2:	602b      	str	r3, [r5, #0]
 80182c4:	f7eb f8f8 	bl	80034b8 <_close>
 80182c8:	1c43      	adds	r3, r0, #1
 80182ca:	d102      	bne.n	80182d2 <_close_r+0x1a>
 80182cc:	682b      	ldr	r3, [r5, #0]
 80182ce:	b103      	cbz	r3, 80182d2 <_close_r+0x1a>
 80182d0:	6023      	str	r3, [r4, #0]
 80182d2:	bd38      	pop	{r3, r4, r5, pc}
 80182d4:	20011078 	.word	0x20011078

080182d8 <_reclaim_reent>:
 80182d8:	4b2d      	ldr	r3, [pc, #180]	@ (8018390 <_reclaim_reent+0xb8>)
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	4283      	cmp	r3, r0
 80182de:	b570      	push	{r4, r5, r6, lr}
 80182e0:	4604      	mov	r4, r0
 80182e2:	d053      	beq.n	801838c <_reclaim_reent+0xb4>
 80182e4:	69c3      	ldr	r3, [r0, #28]
 80182e6:	b31b      	cbz	r3, 8018330 <_reclaim_reent+0x58>
 80182e8:	68db      	ldr	r3, [r3, #12]
 80182ea:	b163      	cbz	r3, 8018306 <_reclaim_reent+0x2e>
 80182ec:	2500      	movs	r5, #0
 80182ee:	69e3      	ldr	r3, [r4, #28]
 80182f0:	68db      	ldr	r3, [r3, #12]
 80182f2:	5959      	ldr	r1, [r3, r5]
 80182f4:	b9b1      	cbnz	r1, 8018324 <_reclaim_reent+0x4c>
 80182f6:	3504      	adds	r5, #4
 80182f8:	2d80      	cmp	r5, #128	@ 0x80
 80182fa:	d1f8      	bne.n	80182ee <_reclaim_reent+0x16>
 80182fc:	69e3      	ldr	r3, [r4, #28]
 80182fe:	4620      	mov	r0, r4
 8018300:	68d9      	ldr	r1, [r3, #12]
 8018302:	f000 f8fb 	bl	80184fc <_free_r>
 8018306:	69e3      	ldr	r3, [r4, #28]
 8018308:	6819      	ldr	r1, [r3, #0]
 801830a:	b111      	cbz	r1, 8018312 <_reclaim_reent+0x3a>
 801830c:	4620      	mov	r0, r4
 801830e:	f000 f8f5 	bl	80184fc <_free_r>
 8018312:	69e3      	ldr	r3, [r4, #28]
 8018314:	689d      	ldr	r5, [r3, #8]
 8018316:	b15d      	cbz	r5, 8018330 <_reclaim_reent+0x58>
 8018318:	4629      	mov	r1, r5
 801831a:	4620      	mov	r0, r4
 801831c:	682d      	ldr	r5, [r5, #0]
 801831e:	f000 f8ed 	bl	80184fc <_free_r>
 8018322:	e7f8      	b.n	8018316 <_reclaim_reent+0x3e>
 8018324:	680e      	ldr	r6, [r1, #0]
 8018326:	4620      	mov	r0, r4
 8018328:	f000 f8e8 	bl	80184fc <_free_r>
 801832c:	4631      	mov	r1, r6
 801832e:	e7e1      	b.n	80182f4 <_reclaim_reent+0x1c>
 8018330:	6961      	ldr	r1, [r4, #20]
 8018332:	b111      	cbz	r1, 801833a <_reclaim_reent+0x62>
 8018334:	4620      	mov	r0, r4
 8018336:	f000 f8e1 	bl	80184fc <_free_r>
 801833a:	69e1      	ldr	r1, [r4, #28]
 801833c:	b111      	cbz	r1, 8018344 <_reclaim_reent+0x6c>
 801833e:	4620      	mov	r0, r4
 8018340:	f000 f8dc 	bl	80184fc <_free_r>
 8018344:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018346:	b111      	cbz	r1, 801834e <_reclaim_reent+0x76>
 8018348:	4620      	mov	r0, r4
 801834a:	f000 f8d7 	bl	80184fc <_free_r>
 801834e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018350:	b111      	cbz	r1, 8018358 <_reclaim_reent+0x80>
 8018352:	4620      	mov	r0, r4
 8018354:	f000 f8d2 	bl	80184fc <_free_r>
 8018358:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801835a:	b111      	cbz	r1, 8018362 <_reclaim_reent+0x8a>
 801835c:	4620      	mov	r0, r4
 801835e:	f000 f8cd 	bl	80184fc <_free_r>
 8018362:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8018364:	b111      	cbz	r1, 801836c <_reclaim_reent+0x94>
 8018366:	4620      	mov	r0, r4
 8018368:	f000 f8c8 	bl	80184fc <_free_r>
 801836c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801836e:	b111      	cbz	r1, 8018376 <_reclaim_reent+0x9e>
 8018370:	4620      	mov	r0, r4
 8018372:	f000 f8c3 	bl	80184fc <_free_r>
 8018376:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018378:	b111      	cbz	r1, 8018380 <_reclaim_reent+0xa8>
 801837a:	4620      	mov	r0, r4
 801837c:	f000 f8be 	bl	80184fc <_free_r>
 8018380:	6a23      	ldr	r3, [r4, #32]
 8018382:	b11b      	cbz	r3, 801838c <_reclaim_reent+0xb4>
 8018384:	4620      	mov	r0, r4
 8018386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801838a:	4718      	bx	r3
 801838c:	bd70      	pop	{r4, r5, r6, pc}
 801838e:	bf00      	nop
 8018390:	200000d8 	.word	0x200000d8

08018394 <_lseek_r>:
 8018394:	b538      	push	{r3, r4, r5, lr}
 8018396:	4d07      	ldr	r5, [pc, #28]	@ (80183b4 <_lseek_r+0x20>)
 8018398:	4604      	mov	r4, r0
 801839a:	4608      	mov	r0, r1
 801839c:	4611      	mov	r1, r2
 801839e:	2200      	movs	r2, #0
 80183a0:	602a      	str	r2, [r5, #0]
 80183a2:	461a      	mov	r2, r3
 80183a4:	f7eb f8af 	bl	8003506 <_lseek>
 80183a8:	1c43      	adds	r3, r0, #1
 80183aa:	d102      	bne.n	80183b2 <_lseek_r+0x1e>
 80183ac:	682b      	ldr	r3, [r5, #0]
 80183ae:	b103      	cbz	r3, 80183b2 <_lseek_r+0x1e>
 80183b0:	6023      	str	r3, [r4, #0]
 80183b2:	bd38      	pop	{r3, r4, r5, pc}
 80183b4:	20011078 	.word	0x20011078

080183b8 <_read_r>:
 80183b8:	b538      	push	{r3, r4, r5, lr}
 80183ba:	4d07      	ldr	r5, [pc, #28]	@ (80183d8 <_read_r+0x20>)
 80183bc:	4604      	mov	r4, r0
 80183be:	4608      	mov	r0, r1
 80183c0:	4611      	mov	r1, r2
 80183c2:	2200      	movs	r2, #0
 80183c4:	602a      	str	r2, [r5, #0]
 80183c6:	461a      	mov	r2, r3
 80183c8:	f7eb f83d 	bl	8003446 <_read>
 80183cc:	1c43      	adds	r3, r0, #1
 80183ce:	d102      	bne.n	80183d6 <_read_r+0x1e>
 80183d0:	682b      	ldr	r3, [r5, #0]
 80183d2:	b103      	cbz	r3, 80183d6 <_read_r+0x1e>
 80183d4:	6023      	str	r3, [r4, #0]
 80183d6:	bd38      	pop	{r3, r4, r5, pc}
 80183d8:	20011078 	.word	0x20011078

080183dc <_sbrk_r>:
 80183dc:	b538      	push	{r3, r4, r5, lr}
 80183de:	4d06      	ldr	r5, [pc, #24]	@ (80183f8 <_sbrk_r+0x1c>)
 80183e0:	2300      	movs	r3, #0
 80183e2:	4604      	mov	r4, r0
 80183e4:	4608      	mov	r0, r1
 80183e6:	602b      	str	r3, [r5, #0]
 80183e8:	f7eb f89a 	bl	8003520 <_sbrk>
 80183ec:	1c43      	adds	r3, r0, #1
 80183ee:	d102      	bne.n	80183f6 <_sbrk_r+0x1a>
 80183f0:	682b      	ldr	r3, [r5, #0]
 80183f2:	b103      	cbz	r3, 80183f6 <_sbrk_r+0x1a>
 80183f4:	6023      	str	r3, [r4, #0]
 80183f6:	bd38      	pop	{r3, r4, r5, pc}
 80183f8:	20011078 	.word	0x20011078

080183fc <_write_r>:
 80183fc:	b538      	push	{r3, r4, r5, lr}
 80183fe:	4d07      	ldr	r5, [pc, #28]	@ (801841c <_write_r+0x20>)
 8018400:	4604      	mov	r4, r0
 8018402:	4608      	mov	r0, r1
 8018404:	4611      	mov	r1, r2
 8018406:	2200      	movs	r2, #0
 8018408:	602a      	str	r2, [r5, #0]
 801840a:	461a      	mov	r2, r3
 801840c:	f7eb f838 	bl	8003480 <_write>
 8018410:	1c43      	adds	r3, r0, #1
 8018412:	d102      	bne.n	801841a <_write_r+0x1e>
 8018414:	682b      	ldr	r3, [r5, #0]
 8018416:	b103      	cbz	r3, 801841a <_write_r+0x1e>
 8018418:	6023      	str	r3, [r4, #0]
 801841a:	bd38      	pop	{r3, r4, r5, pc}
 801841c:	20011078 	.word	0x20011078

08018420 <__errno>:
 8018420:	4b01      	ldr	r3, [pc, #4]	@ (8018428 <__errno+0x8>)
 8018422:	6818      	ldr	r0, [r3, #0]
 8018424:	4770      	bx	lr
 8018426:	bf00      	nop
 8018428:	200000d8 	.word	0x200000d8

0801842c <__libc_init_array>:
 801842c:	b570      	push	{r4, r5, r6, lr}
 801842e:	4d0d      	ldr	r5, [pc, #52]	@ (8018464 <__libc_init_array+0x38>)
 8018430:	4c0d      	ldr	r4, [pc, #52]	@ (8018468 <__libc_init_array+0x3c>)
 8018432:	1b64      	subs	r4, r4, r5
 8018434:	10a4      	asrs	r4, r4, #2
 8018436:	2600      	movs	r6, #0
 8018438:	42a6      	cmp	r6, r4
 801843a:	d109      	bne.n	8018450 <__libc_init_array+0x24>
 801843c:	4d0b      	ldr	r5, [pc, #44]	@ (801846c <__libc_init_array+0x40>)
 801843e:	4c0c      	ldr	r4, [pc, #48]	@ (8018470 <__libc_init_array+0x44>)
 8018440:	f000 fef6 	bl	8019230 <_init>
 8018444:	1b64      	subs	r4, r4, r5
 8018446:	10a4      	asrs	r4, r4, #2
 8018448:	2600      	movs	r6, #0
 801844a:	42a6      	cmp	r6, r4
 801844c:	d105      	bne.n	801845a <__libc_init_array+0x2e>
 801844e:	bd70      	pop	{r4, r5, r6, pc}
 8018450:	f855 3b04 	ldr.w	r3, [r5], #4
 8018454:	4798      	blx	r3
 8018456:	3601      	adds	r6, #1
 8018458:	e7ee      	b.n	8018438 <__libc_init_array+0xc>
 801845a:	f855 3b04 	ldr.w	r3, [r5], #4
 801845e:	4798      	blx	r3
 8018460:	3601      	adds	r6, #1
 8018462:	e7f2      	b.n	801844a <__libc_init_array+0x1e>
 8018464:	08019fa4 	.word	0x08019fa4
 8018468:	08019fa4 	.word	0x08019fa4
 801846c:	08019fa4 	.word	0x08019fa4
 8018470:	08019fb0 	.word	0x08019fb0

08018474 <__retarget_lock_init_recursive>:
 8018474:	4770      	bx	lr

08018476 <__retarget_lock_acquire_recursive>:
 8018476:	4770      	bx	lr

08018478 <__retarget_lock_release_recursive>:
 8018478:	4770      	bx	lr

0801847a <strcpy>:
 801847a:	4603      	mov	r3, r0
 801847c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018480:	f803 2b01 	strb.w	r2, [r3], #1
 8018484:	2a00      	cmp	r2, #0
 8018486:	d1f9      	bne.n	801847c <strcpy+0x2>
 8018488:	4770      	bx	lr

0801848a <memcpy>:
 801848a:	440a      	add	r2, r1
 801848c:	4291      	cmp	r1, r2
 801848e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8018492:	d100      	bne.n	8018496 <memcpy+0xc>
 8018494:	4770      	bx	lr
 8018496:	b510      	push	{r4, lr}
 8018498:	f811 4b01 	ldrb.w	r4, [r1], #1
 801849c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80184a0:	4291      	cmp	r1, r2
 80184a2:	d1f9      	bne.n	8018498 <memcpy+0xe>
 80184a4:	bd10      	pop	{r4, pc}
	...

080184a8 <__assert_func>:
 80184a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80184aa:	4614      	mov	r4, r2
 80184ac:	461a      	mov	r2, r3
 80184ae:	4b09      	ldr	r3, [pc, #36]	@ (80184d4 <__assert_func+0x2c>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	4605      	mov	r5, r0
 80184b4:	68d8      	ldr	r0, [r3, #12]
 80184b6:	b14c      	cbz	r4, 80184cc <__assert_func+0x24>
 80184b8:	4b07      	ldr	r3, [pc, #28]	@ (80184d8 <__assert_func+0x30>)
 80184ba:	9100      	str	r1, [sp, #0]
 80184bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80184c0:	4906      	ldr	r1, [pc, #24]	@ (80184dc <__assert_func+0x34>)
 80184c2:	462b      	mov	r3, r5
 80184c4:	f000 fd3e 	bl	8018f44 <fiprintf>
 80184c8:	f000 fde2 	bl	8019090 <abort>
 80184cc:	4b04      	ldr	r3, [pc, #16]	@ (80184e0 <__assert_func+0x38>)
 80184ce:	461c      	mov	r4, r3
 80184d0:	e7f3      	b.n	80184ba <__assert_func+0x12>
 80184d2:	bf00      	nop
 80184d4:	200000d8 	.word	0x200000d8
 80184d8:	08019e2b 	.word	0x08019e2b
 80184dc:	08019e38 	.word	0x08019e38
 80184e0:	08019e66 	.word	0x08019e66

080184e4 <__env_lock>:
 80184e4:	4801      	ldr	r0, [pc, #4]	@ (80184ec <__env_lock+0x8>)
 80184e6:	f7ff bfc6 	b.w	8018476 <__retarget_lock_acquire_recursive>
 80184ea:	bf00      	nop
 80184ec:	2001107c 	.word	0x2001107c

080184f0 <__env_unlock>:
 80184f0:	4801      	ldr	r0, [pc, #4]	@ (80184f8 <__env_unlock+0x8>)
 80184f2:	f7ff bfc1 	b.w	8018478 <__retarget_lock_release_recursive>
 80184f6:	bf00      	nop
 80184f8:	2001107c 	.word	0x2001107c

080184fc <_free_r>:
 80184fc:	b538      	push	{r3, r4, r5, lr}
 80184fe:	4605      	mov	r5, r0
 8018500:	2900      	cmp	r1, #0
 8018502:	d041      	beq.n	8018588 <_free_r+0x8c>
 8018504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018508:	1f0c      	subs	r4, r1, #4
 801850a:	2b00      	cmp	r3, #0
 801850c:	bfb8      	it	lt
 801850e:	18e4      	addlt	r4, r4, r3
 8018510:	f7ff fbba 	bl	8017c88 <__malloc_lock>
 8018514:	4a1d      	ldr	r2, [pc, #116]	@ (801858c <_free_r+0x90>)
 8018516:	6813      	ldr	r3, [r2, #0]
 8018518:	b933      	cbnz	r3, 8018528 <_free_r+0x2c>
 801851a:	6063      	str	r3, [r4, #4]
 801851c:	6014      	str	r4, [r2, #0]
 801851e:	4628      	mov	r0, r5
 8018520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018524:	f7ff bbb6 	b.w	8017c94 <__malloc_unlock>
 8018528:	42a3      	cmp	r3, r4
 801852a:	d908      	bls.n	801853e <_free_r+0x42>
 801852c:	6820      	ldr	r0, [r4, #0]
 801852e:	1821      	adds	r1, r4, r0
 8018530:	428b      	cmp	r3, r1
 8018532:	bf01      	itttt	eq
 8018534:	6819      	ldreq	r1, [r3, #0]
 8018536:	685b      	ldreq	r3, [r3, #4]
 8018538:	1809      	addeq	r1, r1, r0
 801853a:	6021      	streq	r1, [r4, #0]
 801853c:	e7ed      	b.n	801851a <_free_r+0x1e>
 801853e:	461a      	mov	r2, r3
 8018540:	685b      	ldr	r3, [r3, #4]
 8018542:	b10b      	cbz	r3, 8018548 <_free_r+0x4c>
 8018544:	42a3      	cmp	r3, r4
 8018546:	d9fa      	bls.n	801853e <_free_r+0x42>
 8018548:	6811      	ldr	r1, [r2, #0]
 801854a:	1850      	adds	r0, r2, r1
 801854c:	42a0      	cmp	r0, r4
 801854e:	d10b      	bne.n	8018568 <_free_r+0x6c>
 8018550:	6820      	ldr	r0, [r4, #0]
 8018552:	4401      	add	r1, r0
 8018554:	1850      	adds	r0, r2, r1
 8018556:	4283      	cmp	r3, r0
 8018558:	6011      	str	r1, [r2, #0]
 801855a:	d1e0      	bne.n	801851e <_free_r+0x22>
 801855c:	6818      	ldr	r0, [r3, #0]
 801855e:	685b      	ldr	r3, [r3, #4]
 8018560:	6053      	str	r3, [r2, #4]
 8018562:	4408      	add	r0, r1
 8018564:	6010      	str	r0, [r2, #0]
 8018566:	e7da      	b.n	801851e <_free_r+0x22>
 8018568:	d902      	bls.n	8018570 <_free_r+0x74>
 801856a:	230c      	movs	r3, #12
 801856c:	602b      	str	r3, [r5, #0]
 801856e:	e7d6      	b.n	801851e <_free_r+0x22>
 8018570:	6820      	ldr	r0, [r4, #0]
 8018572:	1821      	adds	r1, r4, r0
 8018574:	428b      	cmp	r3, r1
 8018576:	bf04      	itt	eq
 8018578:	6819      	ldreq	r1, [r3, #0]
 801857a:	685b      	ldreq	r3, [r3, #4]
 801857c:	6063      	str	r3, [r4, #4]
 801857e:	bf04      	itt	eq
 8018580:	1809      	addeq	r1, r1, r0
 8018582:	6021      	streq	r1, [r4, #0]
 8018584:	6054      	str	r4, [r2, #4]
 8018586:	e7ca      	b.n	801851e <_free_r+0x22>
 8018588:	bd38      	pop	{r3, r4, r5, pc}
 801858a:	bf00      	nop
 801858c:	20010f38 	.word	0x20010f38

08018590 <_malloc_usable_size_r>:
 8018590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018594:	1f18      	subs	r0, r3, #4
 8018596:	2b00      	cmp	r3, #0
 8018598:	bfbc      	itt	lt
 801859a:	580b      	ldrlt	r3, [r1, r0]
 801859c:	18c0      	addlt	r0, r0, r3
 801859e:	4770      	bx	lr

080185a0 <__ssputs_r>:
 80185a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185a4:	688e      	ldr	r6, [r1, #8]
 80185a6:	461f      	mov	r7, r3
 80185a8:	42be      	cmp	r6, r7
 80185aa:	680b      	ldr	r3, [r1, #0]
 80185ac:	4682      	mov	sl, r0
 80185ae:	460c      	mov	r4, r1
 80185b0:	4690      	mov	r8, r2
 80185b2:	d82d      	bhi.n	8018610 <__ssputs_r+0x70>
 80185b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80185b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80185bc:	d026      	beq.n	801860c <__ssputs_r+0x6c>
 80185be:	6965      	ldr	r5, [r4, #20]
 80185c0:	6909      	ldr	r1, [r1, #16]
 80185c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80185c6:	eba3 0901 	sub.w	r9, r3, r1
 80185ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80185ce:	1c7b      	adds	r3, r7, #1
 80185d0:	444b      	add	r3, r9
 80185d2:	106d      	asrs	r5, r5, #1
 80185d4:	429d      	cmp	r5, r3
 80185d6:	bf38      	it	cc
 80185d8:	461d      	movcc	r5, r3
 80185da:	0553      	lsls	r3, r2, #21
 80185dc:	d527      	bpl.n	801862e <__ssputs_r+0x8e>
 80185de:	4629      	mov	r1, r5
 80185e0:	f7ff fad2 	bl	8017b88 <_malloc_r>
 80185e4:	4606      	mov	r6, r0
 80185e6:	b360      	cbz	r0, 8018642 <__ssputs_r+0xa2>
 80185e8:	6921      	ldr	r1, [r4, #16]
 80185ea:	464a      	mov	r2, r9
 80185ec:	f7ff ff4d 	bl	801848a <memcpy>
 80185f0:	89a3      	ldrh	r3, [r4, #12]
 80185f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80185f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80185fa:	81a3      	strh	r3, [r4, #12]
 80185fc:	6126      	str	r6, [r4, #16]
 80185fe:	6165      	str	r5, [r4, #20]
 8018600:	444e      	add	r6, r9
 8018602:	eba5 0509 	sub.w	r5, r5, r9
 8018606:	6026      	str	r6, [r4, #0]
 8018608:	60a5      	str	r5, [r4, #8]
 801860a:	463e      	mov	r6, r7
 801860c:	42be      	cmp	r6, r7
 801860e:	d900      	bls.n	8018612 <__ssputs_r+0x72>
 8018610:	463e      	mov	r6, r7
 8018612:	6820      	ldr	r0, [r4, #0]
 8018614:	4632      	mov	r2, r6
 8018616:	4641      	mov	r1, r8
 8018618:	f7ff fdf6 	bl	8018208 <memmove>
 801861c:	68a3      	ldr	r3, [r4, #8]
 801861e:	1b9b      	subs	r3, r3, r6
 8018620:	60a3      	str	r3, [r4, #8]
 8018622:	6823      	ldr	r3, [r4, #0]
 8018624:	4433      	add	r3, r6
 8018626:	6023      	str	r3, [r4, #0]
 8018628:	2000      	movs	r0, #0
 801862a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801862e:	462a      	mov	r2, r5
 8018630:	f7ff fbaa 	bl	8017d88 <_realloc_r>
 8018634:	4606      	mov	r6, r0
 8018636:	2800      	cmp	r0, #0
 8018638:	d1e0      	bne.n	80185fc <__ssputs_r+0x5c>
 801863a:	6921      	ldr	r1, [r4, #16]
 801863c:	4650      	mov	r0, sl
 801863e:	f7ff ff5d 	bl	80184fc <_free_r>
 8018642:	230c      	movs	r3, #12
 8018644:	f8ca 3000 	str.w	r3, [sl]
 8018648:	89a3      	ldrh	r3, [r4, #12]
 801864a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801864e:	81a3      	strh	r3, [r4, #12]
 8018650:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018654:	e7e9      	b.n	801862a <__ssputs_r+0x8a>
	...

08018658 <_svfiprintf_r>:
 8018658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801865c:	4698      	mov	r8, r3
 801865e:	898b      	ldrh	r3, [r1, #12]
 8018660:	061b      	lsls	r3, r3, #24
 8018662:	b09d      	sub	sp, #116	@ 0x74
 8018664:	4607      	mov	r7, r0
 8018666:	460d      	mov	r5, r1
 8018668:	4614      	mov	r4, r2
 801866a:	d510      	bpl.n	801868e <_svfiprintf_r+0x36>
 801866c:	690b      	ldr	r3, [r1, #16]
 801866e:	b973      	cbnz	r3, 801868e <_svfiprintf_r+0x36>
 8018670:	2140      	movs	r1, #64	@ 0x40
 8018672:	f7ff fa89 	bl	8017b88 <_malloc_r>
 8018676:	6028      	str	r0, [r5, #0]
 8018678:	6128      	str	r0, [r5, #16]
 801867a:	b930      	cbnz	r0, 801868a <_svfiprintf_r+0x32>
 801867c:	230c      	movs	r3, #12
 801867e:	603b      	str	r3, [r7, #0]
 8018680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018684:	b01d      	add	sp, #116	@ 0x74
 8018686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801868a:	2340      	movs	r3, #64	@ 0x40
 801868c:	616b      	str	r3, [r5, #20]
 801868e:	2300      	movs	r3, #0
 8018690:	9309      	str	r3, [sp, #36]	@ 0x24
 8018692:	2320      	movs	r3, #32
 8018694:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018698:	f8cd 800c 	str.w	r8, [sp, #12]
 801869c:	2330      	movs	r3, #48	@ 0x30
 801869e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801883c <_svfiprintf_r+0x1e4>
 80186a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80186a6:	f04f 0901 	mov.w	r9, #1
 80186aa:	4623      	mov	r3, r4
 80186ac:	469a      	mov	sl, r3
 80186ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186b2:	b10a      	cbz	r2, 80186b8 <_svfiprintf_r+0x60>
 80186b4:	2a25      	cmp	r2, #37	@ 0x25
 80186b6:	d1f9      	bne.n	80186ac <_svfiprintf_r+0x54>
 80186b8:	ebba 0b04 	subs.w	fp, sl, r4
 80186bc:	d00b      	beq.n	80186d6 <_svfiprintf_r+0x7e>
 80186be:	465b      	mov	r3, fp
 80186c0:	4622      	mov	r2, r4
 80186c2:	4629      	mov	r1, r5
 80186c4:	4638      	mov	r0, r7
 80186c6:	f7ff ff6b 	bl	80185a0 <__ssputs_r>
 80186ca:	3001      	adds	r0, #1
 80186cc:	f000 80a7 	beq.w	801881e <_svfiprintf_r+0x1c6>
 80186d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80186d2:	445a      	add	r2, fp
 80186d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80186d6:	f89a 3000 	ldrb.w	r3, [sl]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	f000 809f 	beq.w	801881e <_svfiprintf_r+0x1c6>
 80186e0:	2300      	movs	r3, #0
 80186e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80186e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80186ea:	f10a 0a01 	add.w	sl, sl, #1
 80186ee:	9304      	str	r3, [sp, #16]
 80186f0:	9307      	str	r3, [sp, #28]
 80186f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80186f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80186f8:	4654      	mov	r4, sl
 80186fa:	2205      	movs	r2, #5
 80186fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018700:	484e      	ldr	r0, [pc, #312]	@ (801883c <_svfiprintf_r+0x1e4>)
 8018702:	f7e7 fd9d 	bl	8000240 <memchr>
 8018706:	9a04      	ldr	r2, [sp, #16]
 8018708:	b9d8      	cbnz	r0, 8018742 <_svfiprintf_r+0xea>
 801870a:	06d0      	lsls	r0, r2, #27
 801870c:	bf44      	itt	mi
 801870e:	2320      	movmi	r3, #32
 8018710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018714:	0711      	lsls	r1, r2, #28
 8018716:	bf44      	itt	mi
 8018718:	232b      	movmi	r3, #43	@ 0x2b
 801871a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801871e:	f89a 3000 	ldrb.w	r3, [sl]
 8018722:	2b2a      	cmp	r3, #42	@ 0x2a
 8018724:	d015      	beq.n	8018752 <_svfiprintf_r+0xfa>
 8018726:	9a07      	ldr	r2, [sp, #28]
 8018728:	4654      	mov	r4, sl
 801872a:	2000      	movs	r0, #0
 801872c:	f04f 0c0a 	mov.w	ip, #10
 8018730:	4621      	mov	r1, r4
 8018732:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018736:	3b30      	subs	r3, #48	@ 0x30
 8018738:	2b09      	cmp	r3, #9
 801873a:	d94b      	bls.n	80187d4 <_svfiprintf_r+0x17c>
 801873c:	b1b0      	cbz	r0, 801876c <_svfiprintf_r+0x114>
 801873e:	9207      	str	r2, [sp, #28]
 8018740:	e014      	b.n	801876c <_svfiprintf_r+0x114>
 8018742:	eba0 0308 	sub.w	r3, r0, r8
 8018746:	fa09 f303 	lsl.w	r3, r9, r3
 801874a:	4313      	orrs	r3, r2
 801874c:	9304      	str	r3, [sp, #16]
 801874e:	46a2      	mov	sl, r4
 8018750:	e7d2      	b.n	80186f8 <_svfiprintf_r+0xa0>
 8018752:	9b03      	ldr	r3, [sp, #12]
 8018754:	1d19      	adds	r1, r3, #4
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	9103      	str	r1, [sp, #12]
 801875a:	2b00      	cmp	r3, #0
 801875c:	bfbb      	ittet	lt
 801875e:	425b      	neglt	r3, r3
 8018760:	f042 0202 	orrlt.w	r2, r2, #2
 8018764:	9307      	strge	r3, [sp, #28]
 8018766:	9307      	strlt	r3, [sp, #28]
 8018768:	bfb8      	it	lt
 801876a:	9204      	strlt	r2, [sp, #16]
 801876c:	7823      	ldrb	r3, [r4, #0]
 801876e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018770:	d10a      	bne.n	8018788 <_svfiprintf_r+0x130>
 8018772:	7863      	ldrb	r3, [r4, #1]
 8018774:	2b2a      	cmp	r3, #42	@ 0x2a
 8018776:	d132      	bne.n	80187de <_svfiprintf_r+0x186>
 8018778:	9b03      	ldr	r3, [sp, #12]
 801877a:	1d1a      	adds	r2, r3, #4
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	9203      	str	r2, [sp, #12]
 8018780:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018784:	3402      	adds	r4, #2
 8018786:	9305      	str	r3, [sp, #20]
 8018788:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801884c <_svfiprintf_r+0x1f4>
 801878c:	7821      	ldrb	r1, [r4, #0]
 801878e:	2203      	movs	r2, #3
 8018790:	4650      	mov	r0, sl
 8018792:	f7e7 fd55 	bl	8000240 <memchr>
 8018796:	b138      	cbz	r0, 80187a8 <_svfiprintf_r+0x150>
 8018798:	9b04      	ldr	r3, [sp, #16]
 801879a:	eba0 000a 	sub.w	r0, r0, sl
 801879e:	2240      	movs	r2, #64	@ 0x40
 80187a0:	4082      	lsls	r2, r0
 80187a2:	4313      	orrs	r3, r2
 80187a4:	3401      	adds	r4, #1
 80187a6:	9304      	str	r3, [sp, #16]
 80187a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187ac:	4824      	ldr	r0, [pc, #144]	@ (8018840 <_svfiprintf_r+0x1e8>)
 80187ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80187b2:	2206      	movs	r2, #6
 80187b4:	f7e7 fd44 	bl	8000240 <memchr>
 80187b8:	2800      	cmp	r0, #0
 80187ba:	d036      	beq.n	801882a <_svfiprintf_r+0x1d2>
 80187bc:	4b21      	ldr	r3, [pc, #132]	@ (8018844 <_svfiprintf_r+0x1ec>)
 80187be:	bb1b      	cbnz	r3, 8018808 <_svfiprintf_r+0x1b0>
 80187c0:	9b03      	ldr	r3, [sp, #12]
 80187c2:	3307      	adds	r3, #7
 80187c4:	f023 0307 	bic.w	r3, r3, #7
 80187c8:	3308      	adds	r3, #8
 80187ca:	9303      	str	r3, [sp, #12]
 80187cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80187ce:	4433      	add	r3, r6
 80187d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80187d2:	e76a      	b.n	80186aa <_svfiprintf_r+0x52>
 80187d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80187d8:	460c      	mov	r4, r1
 80187da:	2001      	movs	r0, #1
 80187dc:	e7a8      	b.n	8018730 <_svfiprintf_r+0xd8>
 80187de:	2300      	movs	r3, #0
 80187e0:	3401      	adds	r4, #1
 80187e2:	9305      	str	r3, [sp, #20]
 80187e4:	4619      	mov	r1, r3
 80187e6:	f04f 0c0a 	mov.w	ip, #10
 80187ea:	4620      	mov	r0, r4
 80187ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80187f0:	3a30      	subs	r2, #48	@ 0x30
 80187f2:	2a09      	cmp	r2, #9
 80187f4:	d903      	bls.n	80187fe <_svfiprintf_r+0x1a6>
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d0c6      	beq.n	8018788 <_svfiprintf_r+0x130>
 80187fa:	9105      	str	r1, [sp, #20]
 80187fc:	e7c4      	b.n	8018788 <_svfiprintf_r+0x130>
 80187fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8018802:	4604      	mov	r4, r0
 8018804:	2301      	movs	r3, #1
 8018806:	e7f0      	b.n	80187ea <_svfiprintf_r+0x192>
 8018808:	ab03      	add	r3, sp, #12
 801880a:	9300      	str	r3, [sp, #0]
 801880c:	462a      	mov	r2, r5
 801880e:	4b0e      	ldr	r3, [pc, #56]	@ (8018848 <_svfiprintf_r+0x1f0>)
 8018810:	a904      	add	r1, sp, #16
 8018812:	4638      	mov	r0, r7
 8018814:	f3af 8000 	nop.w
 8018818:	1c42      	adds	r2, r0, #1
 801881a:	4606      	mov	r6, r0
 801881c:	d1d6      	bne.n	80187cc <_svfiprintf_r+0x174>
 801881e:	89ab      	ldrh	r3, [r5, #12]
 8018820:	065b      	lsls	r3, r3, #25
 8018822:	f53f af2d 	bmi.w	8018680 <_svfiprintf_r+0x28>
 8018826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018828:	e72c      	b.n	8018684 <_svfiprintf_r+0x2c>
 801882a:	ab03      	add	r3, sp, #12
 801882c:	9300      	str	r3, [sp, #0]
 801882e:	462a      	mov	r2, r5
 8018830:	4b05      	ldr	r3, [pc, #20]	@ (8018848 <_svfiprintf_r+0x1f0>)
 8018832:	a904      	add	r1, sp, #16
 8018834:	4638      	mov	r0, r7
 8018836:	f000 f9bb 	bl	8018bb0 <_printf_i>
 801883a:	e7ed      	b.n	8018818 <_svfiprintf_r+0x1c0>
 801883c:	08019e67 	.word	0x08019e67
 8018840:	08019e71 	.word	0x08019e71
 8018844:	00000000 	.word	0x00000000
 8018848:	080185a1 	.word	0x080185a1
 801884c:	08019e6d 	.word	0x08019e6d

08018850 <__sfputc_r>:
 8018850:	6893      	ldr	r3, [r2, #8]
 8018852:	3b01      	subs	r3, #1
 8018854:	2b00      	cmp	r3, #0
 8018856:	b410      	push	{r4}
 8018858:	6093      	str	r3, [r2, #8]
 801885a:	da08      	bge.n	801886e <__sfputc_r+0x1e>
 801885c:	6994      	ldr	r4, [r2, #24]
 801885e:	42a3      	cmp	r3, r4
 8018860:	db01      	blt.n	8018866 <__sfputc_r+0x16>
 8018862:	290a      	cmp	r1, #10
 8018864:	d103      	bne.n	801886e <__sfputc_r+0x1e>
 8018866:	f85d 4b04 	ldr.w	r4, [sp], #4
 801886a:	f000 bb7d 	b.w	8018f68 <__swbuf_r>
 801886e:	6813      	ldr	r3, [r2, #0]
 8018870:	1c58      	adds	r0, r3, #1
 8018872:	6010      	str	r0, [r2, #0]
 8018874:	7019      	strb	r1, [r3, #0]
 8018876:	4608      	mov	r0, r1
 8018878:	f85d 4b04 	ldr.w	r4, [sp], #4
 801887c:	4770      	bx	lr

0801887e <__sfputs_r>:
 801887e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018880:	4606      	mov	r6, r0
 8018882:	460f      	mov	r7, r1
 8018884:	4614      	mov	r4, r2
 8018886:	18d5      	adds	r5, r2, r3
 8018888:	42ac      	cmp	r4, r5
 801888a:	d101      	bne.n	8018890 <__sfputs_r+0x12>
 801888c:	2000      	movs	r0, #0
 801888e:	e007      	b.n	80188a0 <__sfputs_r+0x22>
 8018890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018894:	463a      	mov	r2, r7
 8018896:	4630      	mov	r0, r6
 8018898:	f7ff ffda 	bl	8018850 <__sfputc_r>
 801889c:	1c43      	adds	r3, r0, #1
 801889e:	d1f3      	bne.n	8018888 <__sfputs_r+0xa>
 80188a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080188a4 <_vfiprintf_r>:
 80188a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188a8:	460d      	mov	r5, r1
 80188aa:	b09d      	sub	sp, #116	@ 0x74
 80188ac:	4614      	mov	r4, r2
 80188ae:	4698      	mov	r8, r3
 80188b0:	4606      	mov	r6, r0
 80188b2:	b118      	cbz	r0, 80188bc <_vfiprintf_r+0x18>
 80188b4:	6a03      	ldr	r3, [r0, #32]
 80188b6:	b90b      	cbnz	r3, 80188bc <_vfiprintf_r+0x18>
 80188b8:	f7ff fb98 	bl	8017fec <__sinit>
 80188bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80188be:	07d9      	lsls	r1, r3, #31
 80188c0:	d405      	bmi.n	80188ce <_vfiprintf_r+0x2a>
 80188c2:	89ab      	ldrh	r3, [r5, #12]
 80188c4:	059a      	lsls	r2, r3, #22
 80188c6:	d402      	bmi.n	80188ce <_vfiprintf_r+0x2a>
 80188c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80188ca:	f7ff fdd4 	bl	8018476 <__retarget_lock_acquire_recursive>
 80188ce:	89ab      	ldrh	r3, [r5, #12]
 80188d0:	071b      	lsls	r3, r3, #28
 80188d2:	d501      	bpl.n	80188d8 <_vfiprintf_r+0x34>
 80188d4:	692b      	ldr	r3, [r5, #16]
 80188d6:	b99b      	cbnz	r3, 8018900 <_vfiprintf_r+0x5c>
 80188d8:	4629      	mov	r1, r5
 80188da:	4630      	mov	r0, r6
 80188dc:	f000 fb82 	bl	8018fe4 <__swsetup_r>
 80188e0:	b170      	cbz	r0, 8018900 <_vfiprintf_r+0x5c>
 80188e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80188e4:	07dc      	lsls	r4, r3, #31
 80188e6:	d504      	bpl.n	80188f2 <_vfiprintf_r+0x4e>
 80188e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188ec:	b01d      	add	sp, #116	@ 0x74
 80188ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188f2:	89ab      	ldrh	r3, [r5, #12]
 80188f4:	0598      	lsls	r0, r3, #22
 80188f6:	d4f7      	bmi.n	80188e8 <_vfiprintf_r+0x44>
 80188f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80188fa:	f7ff fdbd 	bl	8018478 <__retarget_lock_release_recursive>
 80188fe:	e7f3      	b.n	80188e8 <_vfiprintf_r+0x44>
 8018900:	2300      	movs	r3, #0
 8018902:	9309      	str	r3, [sp, #36]	@ 0x24
 8018904:	2320      	movs	r3, #32
 8018906:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801890a:	f8cd 800c 	str.w	r8, [sp, #12]
 801890e:	2330      	movs	r3, #48	@ 0x30
 8018910:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018ac0 <_vfiprintf_r+0x21c>
 8018914:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018918:	f04f 0901 	mov.w	r9, #1
 801891c:	4623      	mov	r3, r4
 801891e:	469a      	mov	sl, r3
 8018920:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018924:	b10a      	cbz	r2, 801892a <_vfiprintf_r+0x86>
 8018926:	2a25      	cmp	r2, #37	@ 0x25
 8018928:	d1f9      	bne.n	801891e <_vfiprintf_r+0x7a>
 801892a:	ebba 0b04 	subs.w	fp, sl, r4
 801892e:	d00b      	beq.n	8018948 <_vfiprintf_r+0xa4>
 8018930:	465b      	mov	r3, fp
 8018932:	4622      	mov	r2, r4
 8018934:	4629      	mov	r1, r5
 8018936:	4630      	mov	r0, r6
 8018938:	f7ff ffa1 	bl	801887e <__sfputs_r>
 801893c:	3001      	adds	r0, #1
 801893e:	f000 80a7 	beq.w	8018a90 <_vfiprintf_r+0x1ec>
 8018942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018944:	445a      	add	r2, fp
 8018946:	9209      	str	r2, [sp, #36]	@ 0x24
 8018948:	f89a 3000 	ldrb.w	r3, [sl]
 801894c:	2b00      	cmp	r3, #0
 801894e:	f000 809f 	beq.w	8018a90 <_vfiprintf_r+0x1ec>
 8018952:	2300      	movs	r3, #0
 8018954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801895c:	f10a 0a01 	add.w	sl, sl, #1
 8018960:	9304      	str	r3, [sp, #16]
 8018962:	9307      	str	r3, [sp, #28]
 8018964:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018968:	931a      	str	r3, [sp, #104]	@ 0x68
 801896a:	4654      	mov	r4, sl
 801896c:	2205      	movs	r2, #5
 801896e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018972:	4853      	ldr	r0, [pc, #332]	@ (8018ac0 <_vfiprintf_r+0x21c>)
 8018974:	f7e7 fc64 	bl	8000240 <memchr>
 8018978:	9a04      	ldr	r2, [sp, #16]
 801897a:	b9d8      	cbnz	r0, 80189b4 <_vfiprintf_r+0x110>
 801897c:	06d1      	lsls	r1, r2, #27
 801897e:	bf44      	itt	mi
 8018980:	2320      	movmi	r3, #32
 8018982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018986:	0713      	lsls	r3, r2, #28
 8018988:	bf44      	itt	mi
 801898a:	232b      	movmi	r3, #43	@ 0x2b
 801898c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018990:	f89a 3000 	ldrb.w	r3, [sl]
 8018994:	2b2a      	cmp	r3, #42	@ 0x2a
 8018996:	d015      	beq.n	80189c4 <_vfiprintf_r+0x120>
 8018998:	9a07      	ldr	r2, [sp, #28]
 801899a:	4654      	mov	r4, sl
 801899c:	2000      	movs	r0, #0
 801899e:	f04f 0c0a 	mov.w	ip, #10
 80189a2:	4621      	mov	r1, r4
 80189a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80189a8:	3b30      	subs	r3, #48	@ 0x30
 80189aa:	2b09      	cmp	r3, #9
 80189ac:	d94b      	bls.n	8018a46 <_vfiprintf_r+0x1a2>
 80189ae:	b1b0      	cbz	r0, 80189de <_vfiprintf_r+0x13a>
 80189b0:	9207      	str	r2, [sp, #28]
 80189b2:	e014      	b.n	80189de <_vfiprintf_r+0x13a>
 80189b4:	eba0 0308 	sub.w	r3, r0, r8
 80189b8:	fa09 f303 	lsl.w	r3, r9, r3
 80189bc:	4313      	orrs	r3, r2
 80189be:	9304      	str	r3, [sp, #16]
 80189c0:	46a2      	mov	sl, r4
 80189c2:	e7d2      	b.n	801896a <_vfiprintf_r+0xc6>
 80189c4:	9b03      	ldr	r3, [sp, #12]
 80189c6:	1d19      	adds	r1, r3, #4
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	9103      	str	r1, [sp, #12]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	bfbb      	ittet	lt
 80189d0:	425b      	neglt	r3, r3
 80189d2:	f042 0202 	orrlt.w	r2, r2, #2
 80189d6:	9307      	strge	r3, [sp, #28]
 80189d8:	9307      	strlt	r3, [sp, #28]
 80189da:	bfb8      	it	lt
 80189dc:	9204      	strlt	r2, [sp, #16]
 80189de:	7823      	ldrb	r3, [r4, #0]
 80189e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80189e2:	d10a      	bne.n	80189fa <_vfiprintf_r+0x156>
 80189e4:	7863      	ldrb	r3, [r4, #1]
 80189e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80189e8:	d132      	bne.n	8018a50 <_vfiprintf_r+0x1ac>
 80189ea:	9b03      	ldr	r3, [sp, #12]
 80189ec:	1d1a      	adds	r2, r3, #4
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	9203      	str	r2, [sp, #12]
 80189f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80189f6:	3402      	adds	r4, #2
 80189f8:	9305      	str	r3, [sp, #20]
 80189fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018ad0 <_vfiprintf_r+0x22c>
 80189fe:	7821      	ldrb	r1, [r4, #0]
 8018a00:	2203      	movs	r2, #3
 8018a02:	4650      	mov	r0, sl
 8018a04:	f7e7 fc1c 	bl	8000240 <memchr>
 8018a08:	b138      	cbz	r0, 8018a1a <_vfiprintf_r+0x176>
 8018a0a:	9b04      	ldr	r3, [sp, #16]
 8018a0c:	eba0 000a 	sub.w	r0, r0, sl
 8018a10:	2240      	movs	r2, #64	@ 0x40
 8018a12:	4082      	lsls	r2, r0
 8018a14:	4313      	orrs	r3, r2
 8018a16:	3401      	adds	r4, #1
 8018a18:	9304      	str	r3, [sp, #16]
 8018a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a1e:	4829      	ldr	r0, [pc, #164]	@ (8018ac4 <_vfiprintf_r+0x220>)
 8018a20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018a24:	2206      	movs	r2, #6
 8018a26:	f7e7 fc0b 	bl	8000240 <memchr>
 8018a2a:	2800      	cmp	r0, #0
 8018a2c:	d03f      	beq.n	8018aae <_vfiprintf_r+0x20a>
 8018a2e:	4b26      	ldr	r3, [pc, #152]	@ (8018ac8 <_vfiprintf_r+0x224>)
 8018a30:	bb1b      	cbnz	r3, 8018a7a <_vfiprintf_r+0x1d6>
 8018a32:	9b03      	ldr	r3, [sp, #12]
 8018a34:	3307      	adds	r3, #7
 8018a36:	f023 0307 	bic.w	r3, r3, #7
 8018a3a:	3308      	adds	r3, #8
 8018a3c:	9303      	str	r3, [sp, #12]
 8018a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a40:	443b      	add	r3, r7
 8018a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a44:	e76a      	b.n	801891c <_vfiprintf_r+0x78>
 8018a46:	fb0c 3202 	mla	r2, ip, r2, r3
 8018a4a:	460c      	mov	r4, r1
 8018a4c:	2001      	movs	r0, #1
 8018a4e:	e7a8      	b.n	80189a2 <_vfiprintf_r+0xfe>
 8018a50:	2300      	movs	r3, #0
 8018a52:	3401      	adds	r4, #1
 8018a54:	9305      	str	r3, [sp, #20]
 8018a56:	4619      	mov	r1, r3
 8018a58:	f04f 0c0a 	mov.w	ip, #10
 8018a5c:	4620      	mov	r0, r4
 8018a5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a62:	3a30      	subs	r2, #48	@ 0x30
 8018a64:	2a09      	cmp	r2, #9
 8018a66:	d903      	bls.n	8018a70 <_vfiprintf_r+0x1cc>
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d0c6      	beq.n	80189fa <_vfiprintf_r+0x156>
 8018a6c:	9105      	str	r1, [sp, #20]
 8018a6e:	e7c4      	b.n	80189fa <_vfiprintf_r+0x156>
 8018a70:	fb0c 2101 	mla	r1, ip, r1, r2
 8018a74:	4604      	mov	r4, r0
 8018a76:	2301      	movs	r3, #1
 8018a78:	e7f0      	b.n	8018a5c <_vfiprintf_r+0x1b8>
 8018a7a:	ab03      	add	r3, sp, #12
 8018a7c:	9300      	str	r3, [sp, #0]
 8018a7e:	462a      	mov	r2, r5
 8018a80:	4b12      	ldr	r3, [pc, #72]	@ (8018acc <_vfiprintf_r+0x228>)
 8018a82:	a904      	add	r1, sp, #16
 8018a84:	4630      	mov	r0, r6
 8018a86:	f3af 8000 	nop.w
 8018a8a:	4607      	mov	r7, r0
 8018a8c:	1c78      	adds	r0, r7, #1
 8018a8e:	d1d6      	bne.n	8018a3e <_vfiprintf_r+0x19a>
 8018a90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018a92:	07d9      	lsls	r1, r3, #31
 8018a94:	d405      	bmi.n	8018aa2 <_vfiprintf_r+0x1fe>
 8018a96:	89ab      	ldrh	r3, [r5, #12]
 8018a98:	059a      	lsls	r2, r3, #22
 8018a9a:	d402      	bmi.n	8018aa2 <_vfiprintf_r+0x1fe>
 8018a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018a9e:	f7ff fceb 	bl	8018478 <__retarget_lock_release_recursive>
 8018aa2:	89ab      	ldrh	r3, [r5, #12]
 8018aa4:	065b      	lsls	r3, r3, #25
 8018aa6:	f53f af1f 	bmi.w	80188e8 <_vfiprintf_r+0x44>
 8018aaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018aac:	e71e      	b.n	80188ec <_vfiprintf_r+0x48>
 8018aae:	ab03      	add	r3, sp, #12
 8018ab0:	9300      	str	r3, [sp, #0]
 8018ab2:	462a      	mov	r2, r5
 8018ab4:	4b05      	ldr	r3, [pc, #20]	@ (8018acc <_vfiprintf_r+0x228>)
 8018ab6:	a904      	add	r1, sp, #16
 8018ab8:	4630      	mov	r0, r6
 8018aba:	f000 f879 	bl	8018bb0 <_printf_i>
 8018abe:	e7e4      	b.n	8018a8a <_vfiprintf_r+0x1e6>
 8018ac0:	08019e67 	.word	0x08019e67
 8018ac4:	08019e71 	.word	0x08019e71
 8018ac8:	00000000 	.word	0x00000000
 8018acc:	0801887f 	.word	0x0801887f
 8018ad0:	08019e6d 	.word	0x08019e6d

08018ad4 <_printf_common>:
 8018ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ad8:	4616      	mov	r6, r2
 8018ada:	4698      	mov	r8, r3
 8018adc:	688a      	ldr	r2, [r1, #8]
 8018ade:	690b      	ldr	r3, [r1, #16]
 8018ae0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018ae4:	4293      	cmp	r3, r2
 8018ae6:	bfb8      	it	lt
 8018ae8:	4613      	movlt	r3, r2
 8018aea:	6033      	str	r3, [r6, #0]
 8018aec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018af0:	4607      	mov	r7, r0
 8018af2:	460c      	mov	r4, r1
 8018af4:	b10a      	cbz	r2, 8018afa <_printf_common+0x26>
 8018af6:	3301      	adds	r3, #1
 8018af8:	6033      	str	r3, [r6, #0]
 8018afa:	6823      	ldr	r3, [r4, #0]
 8018afc:	0699      	lsls	r1, r3, #26
 8018afe:	bf42      	ittt	mi
 8018b00:	6833      	ldrmi	r3, [r6, #0]
 8018b02:	3302      	addmi	r3, #2
 8018b04:	6033      	strmi	r3, [r6, #0]
 8018b06:	6825      	ldr	r5, [r4, #0]
 8018b08:	f015 0506 	ands.w	r5, r5, #6
 8018b0c:	d106      	bne.n	8018b1c <_printf_common+0x48>
 8018b0e:	f104 0a19 	add.w	sl, r4, #25
 8018b12:	68e3      	ldr	r3, [r4, #12]
 8018b14:	6832      	ldr	r2, [r6, #0]
 8018b16:	1a9b      	subs	r3, r3, r2
 8018b18:	42ab      	cmp	r3, r5
 8018b1a:	dc26      	bgt.n	8018b6a <_printf_common+0x96>
 8018b1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018b20:	6822      	ldr	r2, [r4, #0]
 8018b22:	3b00      	subs	r3, #0
 8018b24:	bf18      	it	ne
 8018b26:	2301      	movne	r3, #1
 8018b28:	0692      	lsls	r2, r2, #26
 8018b2a:	d42b      	bmi.n	8018b84 <_printf_common+0xb0>
 8018b2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018b30:	4641      	mov	r1, r8
 8018b32:	4638      	mov	r0, r7
 8018b34:	47c8      	blx	r9
 8018b36:	3001      	adds	r0, #1
 8018b38:	d01e      	beq.n	8018b78 <_printf_common+0xa4>
 8018b3a:	6823      	ldr	r3, [r4, #0]
 8018b3c:	6922      	ldr	r2, [r4, #16]
 8018b3e:	f003 0306 	and.w	r3, r3, #6
 8018b42:	2b04      	cmp	r3, #4
 8018b44:	bf02      	ittt	eq
 8018b46:	68e5      	ldreq	r5, [r4, #12]
 8018b48:	6833      	ldreq	r3, [r6, #0]
 8018b4a:	1aed      	subeq	r5, r5, r3
 8018b4c:	68a3      	ldr	r3, [r4, #8]
 8018b4e:	bf0c      	ite	eq
 8018b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018b54:	2500      	movne	r5, #0
 8018b56:	4293      	cmp	r3, r2
 8018b58:	bfc4      	itt	gt
 8018b5a:	1a9b      	subgt	r3, r3, r2
 8018b5c:	18ed      	addgt	r5, r5, r3
 8018b5e:	2600      	movs	r6, #0
 8018b60:	341a      	adds	r4, #26
 8018b62:	42b5      	cmp	r5, r6
 8018b64:	d11a      	bne.n	8018b9c <_printf_common+0xc8>
 8018b66:	2000      	movs	r0, #0
 8018b68:	e008      	b.n	8018b7c <_printf_common+0xa8>
 8018b6a:	2301      	movs	r3, #1
 8018b6c:	4652      	mov	r2, sl
 8018b6e:	4641      	mov	r1, r8
 8018b70:	4638      	mov	r0, r7
 8018b72:	47c8      	blx	r9
 8018b74:	3001      	adds	r0, #1
 8018b76:	d103      	bne.n	8018b80 <_printf_common+0xac>
 8018b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b80:	3501      	adds	r5, #1
 8018b82:	e7c6      	b.n	8018b12 <_printf_common+0x3e>
 8018b84:	18e1      	adds	r1, r4, r3
 8018b86:	1c5a      	adds	r2, r3, #1
 8018b88:	2030      	movs	r0, #48	@ 0x30
 8018b8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018b8e:	4422      	add	r2, r4
 8018b90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018b94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018b98:	3302      	adds	r3, #2
 8018b9a:	e7c7      	b.n	8018b2c <_printf_common+0x58>
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	4622      	mov	r2, r4
 8018ba0:	4641      	mov	r1, r8
 8018ba2:	4638      	mov	r0, r7
 8018ba4:	47c8      	blx	r9
 8018ba6:	3001      	adds	r0, #1
 8018ba8:	d0e6      	beq.n	8018b78 <_printf_common+0xa4>
 8018baa:	3601      	adds	r6, #1
 8018bac:	e7d9      	b.n	8018b62 <_printf_common+0x8e>
	...

08018bb0 <_printf_i>:
 8018bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018bb4:	7e0f      	ldrb	r7, [r1, #24]
 8018bb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018bb8:	2f78      	cmp	r7, #120	@ 0x78
 8018bba:	4691      	mov	r9, r2
 8018bbc:	4680      	mov	r8, r0
 8018bbe:	460c      	mov	r4, r1
 8018bc0:	469a      	mov	sl, r3
 8018bc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018bc6:	d807      	bhi.n	8018bd8 <_printf_i+0x28>
 8018bc8:	2f62      	cmp	r7, #98	@ 0x62
 8018bca:	d80a      	bhi.n	8018be2 <_printf_i+0x32>
 8018bcc:	2f00      	cmp	r7, #0
 8018bce:	f000 80d1 	beq.w	8018d74 <_printf_i+0x1c4>
 8018bd2:	2f58      	cmp	r7, #88	@ 0x58
 8018bd4:	f000 80b8 	beq.w	8018d48 <_printf_i+0x198>
 8018bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018bdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018be0:	e03a      	b.n	8018c58 <_printf_i+0xa8>
 8018be2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018be6:	2b15      	cmp	r3, #21
 8018be8:	d8f6      	bhi.n	8018bd8 <_printf_i+0x28>
 8018bea:	a101      	add	r1, pc, #4	@ (adr r1, 8018bf0 <_printf_i+0x40>)
 8018bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018bf0:	08018c49 	.word	0x08018c49
 8018bf4:	08018c5d 	.word	0x08018c5d
 8018bf8:	08018bd9 	.word	0x08018bd9
 8018bfc:	08018bd9 	.word	0x08018bd9
 8018c00:	08018bd9 	.word	0x08018bd9
 8018c04:	08018bd9 	.word	0x08018bd9
 8018c08:	08018c5d 	.word	0x08018c5d
 8018c0c:	08018bd9 	.word	0x08018bd9
 8018c10:	08018bd9 	.word	0x08018bd9
 8018c14:	08018bd9 	.word	0x08018bd9
 8018c18:	08018bd9 	.word	0x08018bd9
 8018c1c:	08018d5b 	.word	0x08018d5b
 8018c20:	08018c87 	.word	0x08018c87
 8018c24:	08018d15 	.word	0x08018d15
 8018c28:	08018bd9 	.word	0x08018bd9
 8018c2c:	08018bd9 	.word	0x08018bd9
 8018c30:	08018d7d 	.word	0x08018d7d
 8018c34:	08018bd9 	.word	0x08018bd9
 8018c38:	08018c87 	.word	0x08018c87
 8018c3c:	08018bd9 	.word	0x08018bd9
 8018c40:	08018bd9 	.word	0x08018bd9
 8018c44:	08018d1d 	.word	0x08018d1d
 8018c48:	6833      	ldr	r3, [r6, #0]
 8018c4a:	1d1a      	adds	r2, r3, #4
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	6032      	str	r2, [r6, #0]
 8018c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018c54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018c58:	2301      	movs	r3, #1
 8018c5a:	e09c      	b.n	8018d96 <_printf_i+0x1e6>
 8018c5c:	6833      	ldr	r3, [r6, #0]
 8018c5e:	6820      	ldr	r0, [r4, #0]
 8018c60:	1d19      	adds	r1, r3, #4
 8018c62:	6031      	str	r1, [r6, #0]
 8018c64:	0606      	lsls	r6, r0, #24
 8018c66:	d501      	bpl.n	8018c6c <_printf_i+0xbc>
 8018c68:	681d      	ldr	r5, [r3, #0]
 8018c6a:	e003      	b.n	8018c74 <_printf_i+0xc4>
 8018c6c:	0645      	lsls	r5, r0, #25
 8018c6e:	d5fb      	bpl.n	8018c68 <_printf_i+0xb8>
 8018c70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018c74:	2d00      	cmp	r5, #0
 8018c76:	da03      	bge.n	8018c80 <_printf_i+0xd0>
 8018c78:	232d      	movs	r3, #45	@ 0x2d
 8018c7a:	426d      	negs	r5, r5
 8018c7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018c80:	4858      	ldr	r0, [pc, #352]	@ (8018de4 <_printf_i+0x234>)
 8018c82:	230a      	movs	r3, #10
 8018c84:	e011      	b.n	8018caa <_printf_i+0xfa>
 8018c86:	6821      	ldr	r1, [r4, #0]
 8018c88:	6833      	ldr	r3, [r6, #0]
 8018c8a:	0608      	lsls	r0, r1, #24
 8018c8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018c90:	d402      	bmi.n	8018c98 <_printf_i+0xe8>
 8018c92:	0649      	lsls	r1, r1, #25
 8018c94:	bf48      	it	mi
 8018c96:	b2ad      	uxthmi	r5, r5
 8018c98:	2f6f      	cmp	r7, #111	@ 0x6f
 8018c9a:	4852      	ldr	r0, [pc, #328]	@ (8018de4 <_printf_i+0x234>)
 8018c9c:	6033      	str	r3, [r6, #0]
 8018c9e:	bf14      	ite	ne
 8018ca0:	230a      	movne	r3, #10
 8018ca2:	2308      	moveq	r3, #8
 8018ca4:	2100      	movs	r1, #0
 8018ca6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018caa:	6866      	ldr	r6, [r4, #4]
 8018cac:	60a6      	str	r6, [r4, #8]
 8018cae:	2e00      	cmp	r6, #0
 8018cb0:	db05      	blt.n	8018cbe <_printf_i+0x10e>
 8018cb2:	6821      	ldr	r1, [r4, #0]
 8018cb4:	432e      	orrs	r6, r5
 8018cb6:	f021 0104 	bic.w	r1, r1, #4
 8018cba:	6021      	str	r1, [r4, #0]
 8018cbc:	d04b      	beq.n	8018d56 <_printf_i+0x1a6>
 8018cbe:	4616      	mov	r6, r2
 8018cc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8018cc4:	fb03 5711 	mls	r7, r3, r1, r5
 8018cc8:	5dc7      	ldrb	r7, [r0, r7]
 8018cca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018cce:	462f      	mov	r7, r5
 8018cd0:	42bb      	cmp	r3, r7
 8018cd2:	460d      	mov	r5, r1
 8018cd4:	d9f4      	bls.n	8018cc0 <_printf_i+0x110>
 8018cd6:	2b08      	cmp	r3, #8
 8018cd8:	d10b      	bne.n	8018cf2 <_printf_i+0x142>
 8018cda:	6823      	ldr	r3, [r4, #0]
 8018cdc:	07df      	lsls	r7, r3, #31
 8018cde:	d508      	bpl.n	8018cf2 <_printf_i+0x142>
 8018ce0:	6923      	ldr	r3, [r4, #16]
 8018ce2:	6861      	ldr	r1, [r4, #4]
 8018ce4:	4299      	cmp	r1, r3
 8018ce6:	bfde      	ittt	le
 8018ce8:	2330      	movle	r3, #48	@ 0x30
 8018cea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018cee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018cf2:	1b92      	subs	r2, r2, r6
 8018cf4:	6122      	str	r2, [r4, #16]
 8018cf6:	f8cd a000 	str.w	sl, [sp]
 8018cfa:	464b      	mov	r3, r9
 8018cfc:	aa03      	add	r2, sp, #12
 8018cfe:	4621      	mov	r1, r4
 8018d00:	4640      	mov	r0, r8
 8018d02:	f7ff fee7 	bl	8018ad4 <_printf_common>
 8018d06:	3001      	adds	r0, #1
 8018d08:	d14a      	bne.n	8018da0 <_printf_i+0x1f0>
 8018d0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018d0e:	b004      	add	sp, #16
 8018d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d14:	6823      	ldr	r3, [r4, #0]
 8018d16:	f043 0320 	orr.w	r3, r3, #32
 8018d1a:	6023      	str	r3, [r4, #0]
 8018d1c:	4832      	ldr	r0, [pc, #200]	@ (8018de8 <_printf_i+0x238>)
 8018d1e:	2778      	movs	r7, #120	@ 0x78
 8018d20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018d24:	6823      	ldr	r3, [r4, #0]
 8018d26:	6831      	ldr	r1, [r6, #0]
 8018d28:	061f      	lsls	r7, r3, #24
 8018d2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8018d2e:	d402      	bmi.n	8018d36 <_printf_i+0x186>
 8018d30:	065f      	lsls	r7, r3, #25
 8018d32:	bf48      	it	mi
 8018d34:	b2ad      	uxthmi	r5, r5
 8018d36:	6031      	str	r1, [r6, #0]
 8018d38:	07d9      	lsls	r1, r3, #31
 8018d3a:	bf44      	itt	mi
 8018d3c:	f043 0320 	orrmi.w	r3, r3, #32
 8018d40:	6023      	strmi	r3, [r4, #0]
 8018d42:	b11d      	cbz	r5, 8018d4c <_printf_i+0x19c>
 8018d44:	2310      	movs	r3, #16
 8018d46:	e7ad      	b.n	8018ca4 <_printf_i+0xf4>
 8018d48:	4826      	ldr	r0, [pc, #152]	@ (8018de4 <_printf_i+0x234>)
 8018d4a:	e7e9      	b.n	8018d20 <_printf_i+0x170>
 8018d4c:	6823      	ldr	r3, [r4, #0]
 8018d4e:	f023 0320 	bic.w	r3, r3, #32
 8018d52:	6023      	str	r3, [r4, #0]
 8018d54:	e7f6      	b.n	8018d44 <_printf_i+0x194>
 8018d56:	4616      	mov	r6, r2
 8018d58:	e7bd      	b.n	8018cd6 <_printf_i+0x126>
 8018d5a:	6833      	ldr	r3, [r6, #0]
 8018d5c:	6825      	ldr	r5, [r4, #0]
 8018d5e:	6961      	ldr	r1, [r4, #20]
 8018d60:	1d18      	adds	r0, r3, #4
 8018d62:	6030      	str	r0, [r6, #0]
 8018d64:	062e      	lsls	r6, r5, #24
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	d501      	bpl.n	8018d6e <_printf_i+0x1be>
 8018d6a:	6019      	str	r1, [r3, #0]
 8018d6c:	e002      	b.n	8018d74 <_printf_i+0x1c4>
 8018d6e:	0668      	lsls	r0, r5, #25
 8018d70:	d5fb      	bpl.n	8018d6a <_printf_i+0x1ba>
 8018d72:	8019      	strh	r1, [r3, #0]
 8018d74:	2300      	movs	r3, #0
 8018d76:	6123      	str	r3, [r4, #16]
 8018d78:	4616      	mov	r6, r2
 8018d7a:	e7bc      	b.n	8018cf6 <_printf_i+0x146>
 8018d7c:	6833      	ldr	r3, [r6, #0]
 8018d7e:	1d1a      	adds	r2, r3, #4
 8018d80:	6032      	str	r2, [r6, #0]
 8018d82:	681e      	ldr	r6, [r3, #0]
 8018d84:	6862      	ldr	r2, [r4, #4]
 8018d86:	2100      	movs	r1, #0
 8018d88:	4630      	mov	r0, r6
 8018d8a:	f7e7 fa59 	bl	8000240 <memchr>
 8018d8e:	b108      	cbz	r0, 8018d94 <_printf_i+0x1e4>
 8018d90:	1b80      	subs	r0, r0, r6
 8018d92:	6060      	str	r0, [r4, #4]
 8018d94:	6863      	ldr	r3, [r4, #4]
 8018d96:	6123      	str	r3, [r4, #16]
 8018d98:	2300      	movs	r3, #0
 8018d9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018d9e:	e7aa      	b.n	8018cf6 <_printf_i+0x146>
 8018da0:	6923      	ldr	r3, [r4, #16]
 8018da2:	4632      	mov	r2, r6
 8018da4:	4649      	mov	r1, r9
 8018da6:	4640      	mov	r0, r8
 8018da8:	47d0      	blx	sl
 8018daa:	3001      	adds	r0, #1
 8018dac:	d0ad      	beq.n	8018d0a <_printf_i+0x15a>
 8018dae:	6823      	ldr	r3, [r4, #0]
 8018db0:	079b      	lsls	r3, r3, #30
 8018db2:	d413      	bmi.n	8018ddc <_printf_i+0x22c>
 8018db4:	68e0      	ldr	r0, [r4, #12]
 8018db6:	9b03      	ldr	r3, [sp, #12]
 8018db8:	4298      	cmp	r0, r3
 8018dba:	bfb8      	it	lt
 8018dbc:	4618      	movlt	r0, r3
 8018dbe:	e7a6      	b.n	8018d0e <_printf_i+0x15e>
 8018dc0:	2301      	movs	r3, #1
 8018dc2:	4632      	mov	r2, r6
 8018dc4:	4649      	mov	r1, r9
 8018dc6:	4640      	mov	r0, r8
 8018dc8:	47d0      	blx	sl
 8018dca:	3001      	adds	r0, #1
 8018dcc:	d09d      	beq.n	8018d0a <_printf_i+0x15a>
 8018dce:	3501      	adds	r5, #1
 8018dd0:	68e3      	ldr	r3, [r4, #12]
 8018dd2:	9903      	ldr	r1, [sp, #12]
 8018dd4:	1a5b      	subs	r3, r3, r1
 8018dd6:	42ab      	cmp	r3, r5
 8018dd8:	dcf2      	bgt.n	8018dc0 <_printf_i+0x210>
 8018dda:	e7eb      	b.n	8018db4 <_printf_i+0x204>
 8018ddc:	2500      	movs	r5, #0
 8018dde:	f104 0619 	add.w	r6, r4, #25
 8018de2:	e7f5      	b.n	8018dd0 <_printf_i+0x220>
 8018de4:	08019e78 	.word	0x08019e78
 8018de8:	08019e89 	.word	0x08019e89

08018dec <__sflush_r>:
 8018dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018df4:	0716      	lsls	r6, r2, #28
 8018df6:	4605      	mov	r5, r0
 8018df8:	460c      	mov	r4, r1
 8018dfa:	d454      	bmi.n	8018ea6 <__sflush_r+0xba>
 8018dfc:	684b      	ldr	r3, [r1, #4]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	dc02      	bgt.n	8018e08 <__sflush_r+0x1c>
 8018e02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	dd48      	ble.n	8018e9a <__sflush_r+0xae>
 8018e08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018e0a:	2e00      	cmp	r6, #0
 8018e0c:	d045      	beq.n	8018e9a <__sflush_r+0xae>
 8018e0e:	2300      	movs	r3, #0
 8018e10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018e14:	682f      	ldr	r7, [r5, #0]
 8018e16:	6a21      	ldr	r1, [r4, #32]
 8018e18:	602b      	str	r3, [r5, #0]
 8018e1a:	d030      	beq.n	8018e7e <__sflush_r+0x92>
 8018e1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018e1e:	89a3      	ldrh	r3, [r4, #12]
 8018e20:	0759      	lsls	r1, r3, #29
 8018e22:	d505      	bpl.n	8018e30 <__sflush_r+0x44>
 8018e24:	6863      	ldr	r3, [r4, #4]
 8018e26:	1ad2      	subs	r2, r2, r3
 8018e28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018e2a:	b10b      	cbz	r3, 8018e30 <__sflush_r+0x44>
 8018e2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018e2e:	1ad2      	subs	r2, r2, r3
 8018e30:	2300      	movs	r3, #0
 8018e32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018e34:	6a21      	ldr	r1, [r4, #32]
 8018e36:	4628      	mov	r0, r5
 8018e38:	47b0      	blx	r6
 8018e3a:	1c43      	adds	r3, r0, #1
 8018e3c:	89a3      	ldrh	r3, [r4, #12]
 8018e3e:	d106      	bne.n	8018e4e <__sflush_r+0x62>
 8018e40:	6829      	ldr	r1, [r5, #0]
 8018e42:	291d      	cmp	r1, #29
 8018e44:	d82b      	bhi.n	8018e9e <__sflush_r+0xb2>
 8018e46:	4a2a      	ldr	r2, [pc, #168]	@ (8018ef0 <__sflush_r+0x104>)
 8018e48:	40ca      	lsrs	r2, r1
 8018e4a:	07d6      	lsls	r6, r2, #31
 8018e4c:	d527      	bpl.n	8018e9e <__sflush_r+0xb2>
 8018e4e:	2200      	movs	r2, #0
 8018e50:	6062      	str	r2, [r4, #4]
 8018e52:	04d9      	lsls	r1, r3, #19
 8018e54:	6922      	ldr	r2, [r4, #16]
 8018e56:	6022      	str	r2, [r4, #0]
 8018e58:	d504      	bpl.n	8018e64 <__sflush_r+0x78>
 8018e5a:	1c42      	adds	r2, r0, #1
 8018e5c:	d101      	bne.n	8018e62 <__sflush_r+0x76>
 8018e5e:	682b      	ldr	r3, [r5, #0]
 8018e60:	b903      	cbnz	r3, 8018e64 <__sflush_r+0x78>
 8018e62:	6560      	str	r0, [r4, #84]	@ 0x54
 8018e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018e66:	602f      	str	r7, [r5, #0]
 8018e68:	b1b9      	cbz	r1, 8018e9a <__sflush_r+0xae>
 8018e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018e6e:	4299      	cmp	r1, r3
 8018e70:	d002      	beq.n	8018e78 <__sflush_r+0x8c>
 8018e72:	4628      	mov	r0, r5
 8018e74:	f7ff fb42 	bl	80184fc <_free_r>
 8018e78:	2300      	movs	r3, #0
 8018e7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8018e7c:	e00d      	b.n	8018e9a <__sflush_r+0xae>
 8018e7e:	2301      	movs	r3, #1
 8018e80:	4628      	mov	r0, r5
 8018e82:	47b0      	blx	r6
 8018e84:	4602      	mov	r2, r0
 8018e86:	1c50      	adds	r0, r2, #1
 8018e88:	d1c9      	bne.n	8018e1e <__sflush_r+0x32>
 8018e8a:	682b      	ldr	r3, [r5, #0]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d0c6      	beq.n	8018e1e <__sflush_r+0x32>
 8018e90:	2b1d      	cmp	r3, #29
 8018e92:	d001      	beq.n	8018e98 <__sflush_r+0xac>
 8018e94:	2b16      	cmp	r3, #22
 8018e96:	d11e      	bne.n	8018ed6 <__sflush_r+0xea>
 8018e98:	602f      	str	r7, [r5, #0]
 8018e9a:	2000      	movs	r0, #0
 8018e9c:	e022      	b.n	8018ee4 <__sflush_r+0xf8>
 8018e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018ea2:	b21b      	sxth	r3, r3
 8018ea4:	e01b      	b.n	8018ede <__sflush_r+0xf2>
 8018ea6:	690f      	ldr	r7, [r1, #16]
 8018ea8:	2f00      	cmp	r7, #0
 8018eaa:	d0f6      	beq.n	8018e9a <__sflush_r+0xae>
 8018eac:	0793      	lsls	r3, r2, #30
 8018eae:	680e      	ldr	r6, [r1, #0]
 8018eb0:	bf08      	it	eq
 8018eb2:	694b      	ldreq	r3, [r1, #20]
 8018eb4:	600f      	str	r7, [r1, #0]
 8018eb6:	bf18      	it	ne
 8018eb8:	2300      	movne	r3, #0
 8018eba:	eba6 0807 	sub.w	r8, r6, r7
 8018ebe:	608b      	str	r3, [r1, #8]
 8018ec0:	f1b8 0f00 	cmp.w	r8, #0
 8018ec4:	dde9      	ble.n	8018e9a <__sflush_r+0xae>
 8018ec6:	6a21      	ldr	r1, [r4, #32]
 8018ec8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018eca:	4643      	mov	r3, r8
 8018ecc:	463a      	mov	r2, r7
 8018ece:	4628      	mov	r0, r5
 8018ed0:	47b0      	blx	r6
 8018ed2:	2800      	cmp	r0, #0
 8018ed4:	dc08      	bgt.n	8018ee8 <__sflush_r+0xfc>
 8018ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018ede:	81a3      	strh	r3, [r4, #12]
 8018ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ee8:	4407      	add	r7, r0
 8018eea:	eba8 0800 	sub.w	r8, r8, r0
 8018eee:	e7e7      	b.n	8018ec0 <__sflush_r+0xd4>
 8018ef0:	20400001 	.word	0x20400001

08018ef4 <_fflush_r>:
 8018ef4:	b538      	push	{r3, r4, r5, lr}
 8018ef6:	690b      	ldr	r3, [r1, #16]
 8018ef8:	4605      	mov	r5, r0
 8018efa:	460c      	mov	r4, r1
 8018efc:	b913      	cbnz	r3, 8018f04 <_fflush_r+0x10>
 8018efe:	2500      	movs	r5, #0
 8018f00:	4628      	mov	r0, r5
 8018f02:	bd38      	pop	{r3, r4, r5, pc}
 8018f04:	b118      	cbz	r0, 8018f0e <_fflush_r+0x1a>
 8018f06:	6a03      	ldr	r3, [r0, #32]
 8018f08:	b90b      	cbnz	r3, 8018f0e <_fflush_r+0x1a>
 8018f0a:	f7ff f86f 	bl	8017fec <__sinit>
 8018f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d0f3      	beq.n	8018efe <_fflush_r+0xa>
 8018f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018f18:	07d0      	lsls	r0, r2, #31
 8018f1a:	d404      	bmi.n	8018f26 <_fflush_r+0x32>
 8018f1c:	0599      	lsls	r1, r3, #22
 8018f1e:	d402      	bmi.n	8018f26 <_fflush_r+0x32>
 8018f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018f22:	f7ff faa8 	bl	8018476 <__retarget_lock_acquire_recursive>
 8018f26:	4628      	mov	r0, r5
 8018f28:	4621      	mov	r1, r4
 8018f2a:	f7ff ff5f 	bl	8018dec <__sflush_r>
 8018f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018f30:	07da      	lsls	r2, r3, #31
 8018f32:	4605      	mov	r5, r0
 8018f34:	d4e4      	bmi.n	8018f00 <_fflush_r+0xc>
 8018f36:	89a3      	ldrh	r3, [r4, #12]
 8018f38:	059b      	lsls	r3, r3, #22
 8018f3a:	d4e1      	bmi.n	8018f00 <_fflush_r+0xc>
 8018f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018f3e:	f7ff fa9b 	bl	8018478 <__retarget_lock_release_recursive>
 8018f42:	e7dd      	b.n	8018f00 <_fflush_r+0xc>

08018f44 <fiprintf>:
 8018f44:	b40e      	push	{r1, r2, r3}
 8018f46:	b503      	push	{r0, r1, lr}
 8018f48:	4601      	mov	r1, r0
 8018f4a:	ab03      	add	r3, sp, #12
 8018f4c:	4805      	ldr	r0, [pc, #20]	@ (8018f64 <fiprintf+0x20>)
 8018f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f52:	6800      	ldr	r0, [r0, #0]
 8018f54:	9301      	str	r3, [sp, #4]
 8018f56:	f7ff fca5 	bl	80188a4 <_vfiprintf_r>
 8018f5a:	b002      	add	sp, #8
 8018f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018f60:	b003      	add	sp, #12
 8018f62:	4770      	bx	lr
 8018f64:	200000d8 	.word	0x200000d8

08018f68 <__swbuf_r>:
 8018f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f6a:	460e      	mov	r6, r1
 8018f6c:	4614      	mov	r4, r2
 8018f6e:	4605      	mov	r5, r0
 8018f70:	b118      	cbz	r0, 8018f7a <__swbuf_r+0x12>
 8018f72:	6a03      	ldr	r3, [r0, #32]
 8018f74:	b90b      	cbnz	r3, 8018f7a <__swbuf_r+0x12>
 8018f76:	f7ff f839 	bl	8017fec <__sinit>
 8018f7a:	69a3      	ldr	r3, [r4, #24]
 8018f7c:	60a3      	str	r3, [r4, #8]
 8018f7e:	89a3      	ldrh	r3, [r4, #12]
 8018f80:	071a      	lsls	r2, r3, #28
 8018f82:	d501      	bpl.n	8018f88 <__swbuf_r+0x20>
 8018f84:	6923      	ldr	r3, [r4, #16]
 8018f86:	b943      	cbnz	r3, 8018f9a <__swbuf_r+0x32>
 8018f88:	4621      	mov	r1, r4
 8018f8a:	4628      	mov	r0, r5
 8018f8c:	f000 f82a 	bl	8018fe4 <__swsetup_r>
 8018f90:	b118      	cbz	r0, 8018f9a <__swbuf_r+0x32>
 8018f92:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8018f96:	4638      	mov	r0, r7
 8018f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f9a:	6823      	ldr	r3, [r4, #0]
 8018f9c:	6922      	ldr	r2, [r4, #16]
 8018f9e:	1a98      	subs	r0, r3, r2
 8018fa0:	6963      	ldr	r3, [r4, #20]
 8018fa2:	b2f6      	uxtb	r6, r6
 8018fa4:	4283      	cmp	r3, r0
 8018fa6:	4637      	mov	r7, r6
 8018fa8:	dc05      	bgt.n	8018fb6 <__swbuf_r+0x4e>
 8018faa:	4621      	mov	r1, r4
 8018fac:	4628      	mov	r0, r5
 8018fae:	f7ff ffa1 	bl	8018ef4 <_fflush_r>
 8018fb2:	2800      	cmp	r0, #0
 8018fb4:	d1ed      	bne.n	8018f92 <__swbuf_r+0x2a>
 8018fb6:	68a3      	ldr	r3, [r4, #8]
 8018fb8:	3b01      	subs	r3, #1
 8018fba:	60a3      	str	r3, [r4, #8]
 8018fbc:	6823      	ldr	r3, [r4, #0]
 8018fbe:	1c5a      	adds	r2, r3, #1
 8018fc0:	6022      	str	r2, [r4, #0]
 8018fc2:	701e      	strb	r6, [r3, #0]
 8018fc4:	6962      	ldr	r2, [r4, #20]
 8018fc6:	1c43      	adds	r3, r0, #1
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d004      	beq.n	8018fd6 <__swbuf_r+0x6e>
 8018fcc:	89a3      	ldrh	r3, [r4, #12]
 8018fce:	07db      	lsls	r3, r3, #31
 8018fd0:	d5e1      	bpl.n	8018f96 <__swbuf_r+0x2e>
 8018fd2:	2e0a      	cmp	r6, #10
 8018fd4:	d1df      	bne.n	8018f96 <__swbuf_r+0x2e>
 8018fd6:	4621      	mov	r1, r4
 8018fd8:	4628      	mov	r0, r5
 8018fda:	f7ff ff8b 	bl	8018ef4 <_fflush_r>
 8018fde:	2800      	cmp	r0, #0
 8018fe0:	d0d9      	beq.n	8018f96 <__swbuf_r+0x2e>
 8018fe2:	e7d6      	b.n	8018f92 <__swbuf_r+0x2a>

08018fe4 <__swsetup_r>:
 8018fe4:	b538      	push	{r3, r4, r5, lr}
 8018fe6:	4b29      	ldr	r3, [pc, #164]	@ (801908c <__swsetup_r+0xa8>)
 8018fe8:	4605      	mov	r5, r0
 8018fea:	6818      	ldr	r0, [r3, #0]
 8018fec:	460c      	mov	r4, r1
 8018fee:	b118      	cbz	r0, 8018ff8 <__swsetup_r+0x14>
 8018ff0:	6a03      	ldr	r3, [r0, #32]
 8018ff2:	b90b      	cbnz	r3, 8018ff8 <__swsetup_r+0x14>
 8018ff4:	f7fe fffa 	bl	8017fec <__sinit>
 8018ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ffc:	0719      	lsls	r1, r3, #28
 8018ffe:	d422      	bmi.n	8019046 <__swsetup_r+0x62>
 8019000:	06da      	lsls	r2, r3, #27
 8019002:	d407      	bmi.n	8019014 <__swsetup_r+0x30>
 8019004:	2209      	movs	r2, #9
 8019006:	602a      	str	r2, [r5, #0]
 8019008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801900c:	81a3      	strh	r3, [r4, #12]
 801900e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019012:	e033      	b.n	801907c <__swsetup_r+0x98>
 8019014:	0758      	lsls	r0, r3, #29
 8019016:	d512      	bpl.n	801903e <__swsetup_r+0x5a>
 8019018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801901a:	b141      	cbz	r1, 801902e <__swsetup_r+0x4a>
 801901c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019020:	4299      	cmp	r1, r3
 8019022:	d002      	beq.n	801902a <__swsetup_r+0x46>
 8019024:	4628      	mov	r0, r5
 8019026:	f7ff fa69 	bl	80184fc <_free_r>
 801902a:	2300      	movs	r3, #0
 801902c:	6363      	str	r3, [r4, #52]	@ 0x34
 801902e:	89a3      	ldrh	r3, [r4, #12]
 8019030:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019034:	81a3      	strh	r3, [r4, #12]
 8019036:	2300      	movs	r3, #0
 8019038:	6063      	str	r3, [r4, #4]
 801903a:	6923      	ldr	r3, [r4, #16]
 801903c:	6023      	str	r3, [r4, #0]
 801903e:	89a3      	ldrh	r3, [r4, #12]
 8019040:	f043 0308 	orr.w	r3, r3, #8
 8019044:	81a3      	strh	r3, [r4, #12]
 8019046:	6923      	ldr	r3, [r4, #16]
 8019048:	b94b      	cbnz	r3, 801905e <__swsetup_r+0x7a>
 801904a:	89a3      	ldrh	r3, [r4, #12]
 801904c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019054:	d003      	beq.n	801905e <__swsetup_r+0x7a>
 8019056:	4621      	mov	r1, r4
 8019058:	4628      	mov	r0, r5
 801905a:	f000 f846 	bl	80190ea <__smakebuf_r>
 801905e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019062:	f013 0201 	ands.w	r2, r3, #1
 8019066:	d00a      	beq.n	801907e <__swsetup_r+0x9a>
 8019068:	2200      	movs	r2, #0
 801906a:	60a2      	str	r2, [r4, #8]
 801906c:	6962      	ldr	r2, [r4, #20]
 801906e:	4252      	negs	r2, r2
 8019070:	61a2      	str	r2, [r4, #24]
 8019072:	6922      	ldr	r2, [r4, #16]
 8019074:	b942      	cbnz	r2, 8019088 <__swsetup_r+0xa4>
 8019076:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801907a:	d1c5      	bne.n	8019008 <__swsetup_r+0x24>
 801907c:	bd38      	pop	{r3, r4, r5, pc}
 801907e:	0799      	lsls	r1, r3, #30
 8019080:	bf58      	it	pl
 8019082:	6962      	ldrpl	r2, [r4, #20]
 8019084:	60a2      	str	r2, [r4, #8]
 8019086:	e7f4      	b.n	8019072 <__swsetup_r+0x8e>
 8019088:	2000      	movs	r0, #0
 801908a:	e7f7      	b.n	801907c <__swsetup_r+0x98>
 801908c:	200000d8 	.word	0x200000d8

08019090 <abort>:
 8019090:	b508      	push	{r3, lr}
 8019092:	2006      	movs	r0, #6
 8019094:	f000 f88e 	bl	80191b4 <raise>
 8019098:	2001      	movs	r0, #1
 801909a:	f7ea f9c9 	bl	8003430 <_exit>

0801909e <__swhatbuf_r>:
 801909e:	b570      	push	{r4, r5, r6, lr}
 80190a0:	460c      	mov	r4, r1
 80190a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190a6:	2900      	cmp	r1, #0
 80190a8:	b096      	sub	sp, #88	@ 0x58
 80190aa:	4615      	mov	r5, r2
 80190ac:	461e      	mov	r6, r3
 80190ae:	da0d      	bge.n	80190cc <__swhatbuf_r+0x2e>
 80190b0:	89a3      	ldrh	r3, [r4, #12]
 80190b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80190b6:	f04f 0100 	mov.w	r1, #0
 80190ba:	bf14      	ite	ne
 80190bc:	2340      	movne	r3, #64	@ 0x40
 80190be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80190c2:	2000      	movs	r0, #0
 80190c4:	6031      	str	r1, [r6, #0]
 80190c6:	602b      	str	r3, [r5, #0]
 80190c8:	b016      	add	sp, #88	@ 0x58
 80190ca:	bd70      	pop	{r4, r5, r6, pc}
 80190cc:	466a      	mov	r2, sp
 80190ce:	f000 f879 	bl	80191c4 <_fstat_r>
 80190d2:	2800      	cmp	r0, #0
 80190d4:	dbec      	blt.n	80190b0 <__swhatbuf_r+0x12>
 80190d6:	9901      	ldr	r1, [sp, #4]
 80190d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80190dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80190e0:	4259      	negs	r1, r3
 80190e2:	4159      	adcs	r1, r3
 80190e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80190e8:	e7eb      	b.n	80190c2 <__swhatbuf_r+0x24>

080190ea <__smakebuf_r>:
 80190ea:	898b      	ldrh	r3, [r1, #12]
 80190ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190ee:	079d      	lsls	r5, r3, #30
 80190f0:	4606      	mov	r6, r0
 80190f2:	460c      	mov	r4, r1
 80190f4:	d507      	bpl.n	8019106 <__smakebuf_r+0x1c>
 80190f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80190fa:	6023      	str	r3, [r4, #0]
 80190fc:	6123      	str	r3, [r4, #16]
 80190fe:	2301      	movs	r3, #1
 8019100:	6163      	str	r3, [r4, #20]
 8019102:	b003      	add	sp, #12
 8019104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019106:	ab01      	add	r3, sp, #4
 8019108:	466a      	mov	r2, sp
 801910a:	f7ff ffc8 	bl	801909e <__swhatbuf_r>
 801910e:	9f00      	ldr	r7, [sp, #0]
 8019110:	4605      	mov	r5, r0
 8019112:	4639      	mov	r1, r7
 8019114:	4630      	mov	r0, r6
 8019116:	f7fe fd37 	bl	8017b88 <_malloc_r>
 801911a:	b948      	cbnz	r0, 8019130 <__smakebuf_r+0x46>
 801911c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019120:	059a      	lsls	r2, r3, #22
 8019122:	d4ee      	bmi.n	8019102 <__smakebuf_r+0x18>
 8019124:	f023 0303 	bic.w	r3, r3, #3
 8019128:	f043 0302 	orr.w	r3, r3, #2
 801912c:	81a3      	strh	r3, [r4, #12]
 801912e:	e7e2      	b.n	80190f6 <__smakebuf_r+0xc>
 8019130:	89a3      	ldrh	r3, [r4, #12]
 8019132:	6020      	str	r0, [r4, #0]
 8019134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019138:	81a3      	strh	r3, [r4, #12]
 801913a:	9b01      	ldr	r3, [sp, #4]
 801913c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019140:	b15b      	cbz	r3, 801915a <__smakebuf_r+0x70>
 8019142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019146:	4630      	mov	r0, r6
 8019148:	f000 f84e 	bl	80191e8 <_isatty_r>
 801914c:	b128      	cbz	r0, 801915a <__smakebuf_r+0x70>
 801914e:	89a3      	ldrh	r3, [r4, #12]
 8019150:	f023 0303 	bic.w	r3, r3, #3
 8019154:	f043 0301 	orr.w	r3, r3, #1
 8019158:	81a3      	strh	r3, [r4, #12]
 801915a:	89a3      	ldrh	r3, [r4, #12]
 801915c:	431d      	orrs	r5, r3
 801915e:	81a5      	strh	r5, [r4, #12]
 8019160:	e7cf      	b.n	8019102 <__smakebuf_r+0x18>

08019162 <_raise_r>:
 8019162:	291f      	cmp	r1, #31
 8019164:	b538      	push	{r3, r4, r5, lr}
 8019166:	4605      	mov	r5, r0
 8019168:	460c      	mov	r4, r1
 801916a:	d904      	bls.n	8019176 <_raise_r+0x14>
 801916c:	2316      	movs	r3, #22
 801916e:	6003      	str	r3, [r0, #0]
 8019170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019174:	bd38      	pop	{r3, r4, r5, pc}
 8019176:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019178:	b112      	cbz	r2, 8019180 <_raise_r+0x1e>
 801917a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801917e:	b94b      	cbnz	r3, 8019194 <_raise_r+0x32>
 8019180:	4628      	mov	r0, r5
 8019182:	f000 f853 	bl	801922c <_getpid_r>
 8019186:	4622      	mov	r2, r4
 8019188:	4601      	mov	r1, r0
 801918a:	4628      	mov	r0, r5
 801918c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019190:	f000 b83a 	b.w	8019208 <_kill_r>
 8019194:	2b01      	cmp	r3, #1
 8019196:	d00a      	beq.n	80191ae <_raise_r+0x4c>
 8019198:	1c59      	adds	r1, r3, #1
 801919a:	d103      	bne.n	80191a4 <_raise_r+0x42>
 801919c:	2316      	movs	r3, #22
 801919e:	6003      	str	r3, [r0, #0]
 80191a0:	2001      	movs	r0, #1
 80191a2:	e7e7      	b.n	8019174 <_raise_r+0x12>
 80191a4:	2100      	movs	r1, #0
 80191a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80191aa:	4620      	mov	r0, r4
 80191ac:	4798      	blx	r3
 80191ae:	2000      	movs	r0, #0
 80191b0:	e7e0      	b.n	8019174 <_raise_r+0x12>
	...

080191b4 <raise>:
 80191b4:	4b02      	ldr	r3, [pc, #8]	@ (80191c0 <raise+0xc>)
 80191b6:	4601      	mov	r1, r0
 80191b8:	6818      	ldr	r0, [r3, #0]
 80191ba:	f7ff bfd2 	b.w	8019162 <_raise_r>
 80191be:	bf00      	nop
 80191c0:	200000d8 	.word	0x200000d8

080191c4 <_fstat_r>:
 80191c4:	b538      	push	{r3, r4, r5, lr}
 80191c6:	4d07      	ldr	r5, [pc, #28]	@ (80191e4 <_fstat_r+0x20>)
 80191c8:	2300      	movs	r3, #0
 80191ca:	4604      	mov	r4, r0
 80191cc:	4608      	mov	r0, r1
 80191ce:	4611      	mov	r1, r2
 80191d0:	602b      	str	r3, [r5, #0]
 80191d2:	f7ea f97d 	bl	80034d0 <_fstat>
 80191d6:	1c43      	adds	r3, r0, #1
 80191d8:	d102      	bne.n	80191e0 <_fstat_r+0x1c>
 80191da:	682b      	ldr	r3, [r5, #0]
 80191dc:	b103      	cbz	r3, 80191e0 <_fstat_r+0x1c>
 80191de:	6023      	str	r3, [r4, #0]
 80191e0:	bd38      	pop	{r3, r4, r5, pc}
 80191e2:	bf00      	nop
 80191e4:	20011078 	.word	0x20011078

080191e8 <_isatty_r>:
 80191e8:	b538      	push	{r3, r4, r5, lr}
 80191ea:	4d06      	ldr	r5, [pc, #24]	@ (8019204 <_isatty_r+0x1c>)
 80191ec:	2300      	movs	r3, #0
 80191ee:	4604      	mov	r4, r0
 80191f0:	4608      	mov	r0, r1
 80191f2:	602b      	str	r3, [r5, #0]
 80191f4:	f7ea f97c 	bl	80034f0 <_isatty>
 80191f8:	1c43      	adds	r3, r0, #1
 80191fa:	d102      	bne.n	8019202 <_isatty_r+0x1a>
 80191fc:	682b      	ldr	r3, [r5, #0]
 80191fe:	b103      	cbz	r3, 8019202 <_isatty_r+0x1a>
 8019200:	6023      	str	r3, [r4, #0]
 8019202:	bd38      	pop	{r3, r4, r5, pc}
 8019204:	20011078 	.word	0x20011078

08019208 <_kill_r>:
 8019208:	b538      	push	{r3, r4, r5, lr}
 801920a:	4d07      	ldr	r5, [pc, #28]	@ (8019228 <_kill_r+0x20>)
 801920c:	2300      	movs	r3, #0
 801920e:	4604      	mov	r4, r0
 8019210:	4608      	mov	r0, r1
 8019212:	4611      	mov	r1, r2
 8019214:	602b      	str	r3, [r5, #0]
 8019216:	f7ea f8fb 	bl	8003410 <_kill>
 801921a:	1c43      	adds	r3, r0, #1
 801921c:	d102      	bne.n	8019224 <_kill_r+0x1c>
 801921e:	682b      	ldr	r3, [r5, #0]
 8019220:	b103      	cbz	r3, 8019224 <_kill_r+0x1c>
 8019222:	6023      	str	r3, [r4, #0]
 8019224:	bd38      	pop	{r3, r4, r5, pc}
 8019226:	bf00      	nop
 8019228:	20011078 	.word	0x20011078

0801922c <_getpid_r>:
 801922c:	f7ea b8e8 	b.w	8003400 <_getpid>

08019230 <_init>:
 8019230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019232:	bf00      	nop
 8019234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019236:	bc08      	pop	{r3}
 8019238:	469e      	mov	lr, r3
 801923a:	4770      	bx	lr

0801923c <_fini>:
 801923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801923e:	bf00      	nop
 8019240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019242:	bc08      	pop	{r3}
 8019244:	469e      	mov	lr, r3
 8019246:	4770      	bx	lr
