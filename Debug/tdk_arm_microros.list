
tdk_arm_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000191a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  08019378  08019378  0001a378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a0fc  0801a0fc  0001c128  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a0fc  0801a0fc  0001b0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a104  0801a104  0001c128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801a104  0801a104  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a110  0801a110  0001b110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000128  20000000  0801a114  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010f60  20000128  0801a23c  0001c128  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011088  0801a23c  0001d088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a93f  00000000  00000000  0001c158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056cc  00000000  00000000  00046a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  0004c168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b0  00000000  00000000  0004dd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d5aa  00000000  00000000  0004f310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002669b  00000000  00000000  0007c8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee945  00000000  00000000  000a2f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0019189a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000835c  00000000  00000000  00191910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00199c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000128 	.word	0x20000128
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019360 	.word	0x08019360

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000012c 	.word	0x2000012c
 800020c:	08019360 	.word	0x08019360

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_ldivmod>:
 8000b1c:	b97b      	cbnz	r3, 8000b3e <__aeabi_ldivmod+0x22>
 8000b1e:	b972      	cbnz	r2, 8000b3e <__aeabi_ldivmod+0x22>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bfbe      	ittt	lt
 8000b24:	2000      	movlt	r0, #0
 8000b26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b2a:	e006      	blt.n	8000b3a <__aeabi_ldivmod+0x1e>
 8000b2c:	bf08      	it	eq
 8000b2e:	2800      	cmpeq	r0, #0
 8000b30:	bf1c      	itt	ne
 8000b32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b3a:	f000 b9d3 	b.w	8000ee4 <__aeabi_idiv0>
 8000b3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b46:	2900      	cmp	r1, #0
 8000b48:	db09      	blt.n	8000b5e <__aeabi_ldivmod+0x42>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db1a      	blt.n	8000b84 <__aeabi_ldivmod+0x68>
 8000b4e:	f000 f84d 	bl	8000bec <__udivmoddi4>
 8000b52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4770      	bx	lr
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db1b      	blt.n	8000ba0 <__aeabi_ldivmod+0x84>
 8000b68:	f000 f840 	bl	8000bec <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4240      	negs	r0, r0
 8000b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	4770      	bx	lr
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	f000 f82f 	bl	8000bec <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4240      	negs	r0, r0
 8000b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9e:	4770      	bx	lr
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	f000 f821 	bl	8000bec <__udivmoddi4>
 8000baa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb2:	b004      	add	sp, #16
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bd0:	f000 b988 	b.w	8000ee4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	468e      	mov	lr, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	4688      	mov	r8, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d962      	bls.n	8000cc8 <__udivmoddi4+0xdc>
 8000c02:	fab2 f682 	clz	r6, r2
 8000c06:	b14e      	cbz	r6, 8000c1c <__udivmoddi4+0x30>
 8000c08:	f1c6 0320 	rsb	r3, r6, #32
 8000c0c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c10:	fa20 f303 	lsr.w	r3, r0, r3
 8000c14:	40b7      	lsls	r7, r6
 8000c16:	ea43 0808 	orr.w	r8, r3, r8
 8000c1a:	40b4      	lsls	r4, r6
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	fa1f fc87 	uxth.w	ip, r7
 8000c24:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c28:	0c23      	lsrs	r3, r4, #16
 8000c2a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c32:	fb01 f20c 	mul.w	r2, r1, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d909      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c40:	f080 80ea 	bcs.w	8000e18 <__udivmoddi4+0x22c>
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f240 80e7 	bls.w	8000e18 <__udivmoddi4+0x22c>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	443b      	add	r3, r7
 8000c4e:	1a9a      	subs	r2, r3, r2
 8000c50:	b2a3      	uxth	r3, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c62:	459c      	cmp	ip, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x8e>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c6c:	f080 80d6 	bcs.w	8000e1c <__udivmoddi4+0x230>
 8000c70:	459c      	cmp	ip, r3
 8000c72:	f240 80d3 	bls.w	8000e1c <__udivmoddi4+0x230>
 8000c76:	443b      	add	r3, r7
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7e:	eba3 030c 	sub.w	r3, r3, ip
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40f3      	lsrs	r3, r6
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xb6>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb0>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x14c>
 8000caa:	4573      	cmp	r3, lr
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xc8>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 8105 	bhi.w	8000ebe <__udivmoddi4+0x2d2>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4690      	mov	r8, r2
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0e5      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc6:	e7e2      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f000 8090 	beq.w	8000dee <__udivmoddi4+0x202>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f040 80a4 	bne.w	8000e20 <__udivmoddi4+0x234>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	b280      	uxth	r0, r0
 8000ce2:	b2bc      	uxth	r4, r7
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cea:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cf2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x11e>
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x11c>
 8000d02:	429a      	cmp	r2, r3
 8000d04:	f200 80e0 	bhi.w	8000ec8 <__udivmoddi4+0x2dc>
 8000d08:	46c4      	mov	ip, r8
 8000d0a:	1a9b      	subs	r3, r3, r2
 8000d0c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d10:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d18:	fb02 f404 	mul.w	r4, r2, r4
 8000d1c:	429c      	cmp	r4, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x144>
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x142>
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	f200 80ca 	bhi.w	8000ec2 <__udivmoddi4+0x2d6>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	1b1b      	subs	r3, r3, r4
 8000d32:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa0e f401 	lsl.w	r4, lr, r1
 8000d48:	fa20 f306 	lsr.w	r3, r0, r6
 8000d4c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d50:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d54:	4323      	orrs	r3, r4
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	fa1f fc87 	uxth.w	ip, r7
 8000d5e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d62:	0c1c      	lsrs	r4, r3, #16
 8000d64:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d6c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1a0>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 809c 	bcs.w	8000eba <__udivmoddi4+0x2ce>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f240 8099 	bls.w	8000eba <__udivmoddi4+0x2ce>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	eba4 040e 	sub.w	r4, r4, lr
 8000d90:	fa1f fe83 	uxth.w	lr, r3
 8000d94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d98:	fb09 4413 	mls	r4, r9, r3, r4
 8000d9c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000da0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da4:	45a4      	cmp	ip, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1ce>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dae:	f080 8082 	bcs.w	8000eb6 <__udivmoddi4+0x2ca>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d97f      	bls.n	8000eb6 <__udivmoddi4+0x2ca>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc6:	4564      	cmp	r4, ip
 8000dc8:	4673      	mov	r3, lr
 8000dca:	46e1      	mov	r9, ip
 8000dcc:	d362      	bcc.n	8000e94 <__udivmoddi4+0x2a8>
 8000dce:	d05f      	beq.n	8000e90 <__udivmoddi4+0x2a4>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x1fe>
 8000dd2:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	431e      	orrs	r6, r3
 8000de4:	40cc      	lsrs	r4, r1
 8000de6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e74f      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000dee:	fbb1 fcf2 	udiv	ip, r1, r2
 8000df2:	0c01      	lsrs	r1, r0, #16
 8000df4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4638      	mov	r0, r7
 8000e02:	463c      	mov	r4, r7
 8000e04:	46b8      	mov	r8, r7
 8000e06:	46be      	mov	lr, r7
 8000e08:	2620      	movs	r6, #32
 8000e0a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0e:	eba2 0208 	sub.w	r2, r2, r8
 8000e12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e16:	e766      	b.n	8000ce6 <__udivmoddi4+0xfa>
 8000e18:	4601      	mov	r1, r0
 8000e1a:	e718      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	e72c      	b.n	8000c7a <__udivmoddi4+0x8e>
 8000e20:	f1c6 0220 	rsb	r2, r6, #32
 8000e24:	fa2e f302 	lsr.w	r3, lr, r2
 8000e28:	40b7      	lsls	r7, r6
 8000e2a:	40b1      	lsls	r1, r6
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e34:	430a      	orrs	r2, r1
 8000e36:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb08 f904 	mul.w	r9, r8, r4
 8000e4a:	40b0      	lsls	r0, r6
 8000e4c:	4589      	cmp	r9, r1
 8000e4e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e52:	b280      	uxth	r0, r0
 8000e54:	d93e      	bls.n	8000ed4 <__udivmoddi4+0x2e8>
 8000e56:	1879      	adds	r1, r7, r1
 8000e58:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e5c:	d201      	bcs.n	8000e62 <__udivmoddi4+0x276>
 8000e5e:	4589      	cmp	r9, r1
 8000e60:	d81f      	bhi.n	8000ea2 <__udivmoddi4+0x2b6>
 8000e62:	eba1 0109 	sub.w	r1, r1, r9
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fb09 f804 	mul.w	r8, r9, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	b292      	uxth	r2, r2
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	4542      	cmp	r2, r8
 8000e7a:	d229      	bcs.n	8000ed0 <__udivmoddi4+0x2e4>
 8000e7c:	18ba      	adds	r2, r7, r2
 8000e7e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e82:	d2c4      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d2c2      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e88:	f1a9 0102 	sub.w	r1, r9, #2
 8000e8c:	443a      	add	r2, r7
 8000e8e:	e7be      	b.n	8000e0e <__udivmoddi4+0x222>
 8000e90:	45f0      	cmp	r8, lr
 8000e92:	d29d      	bcs.n	8000dd0 <__udivmoddi4+0x1e4>
 8000e94:	ebbe 0302 	subs.w	r3, lr, r2
 8000e98:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	46e1      	mov	r9, ip
 8000ea0:	e796      	b.n	8000dd0 <__udivmoddi4+0x1e4>
 8000ea2:	eba7 0909 	sub.w	r9, r7, r9
 8000ea6:	4449      	add	r1, r9
 8000ea8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eac:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb0:	fb09 f804 	mul.w	r8, r9, r4
 8000eb4:	e7db      	b.n	8000e6e <__udivmoddi4+0x282>
 8000eb6:	4673      	mov	r3, lr
 8000eb8:	e77f      	b.n	8000dba <__udivmoddi4+0x1ce>
 8000eba:	4650      	mov	r0, sl
 8000ebc:	e766      	b.n	8000d8c <__udivmoddi4+0x1a0>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e6fd      	b.n	8000cbe <__udivmoddi4+0xd2>
 8000ec2:	443b      	add	r3, r7
 8000ec4:	3a02      	subs	r2, #2
 8000ec6:	e733      	b.n	8000d30 <__udivmoddi4+0x144>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	443b      	add	r3, r7
 8000ece:	e71c      	b.n	8000d0a <__udivmoddi4+0x11e>
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x222>
 8000ed4:	eba1 0109 	sub.w	r1, r1, r9
 8000ed8:	46c4      	mov	ip, r8
 8000eda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ede:	fb09 f804 	mul.w	r8, r9, r4
 8000ee2:	e7c4      	b.n	8000e6e <__udivmoddi4+0x282>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_ZN10UART_servo9UART_SendEh>:
//servo control variale
//declare struct
//servo control function
//servo control variale
//servo control function
void UART_servo::UART_Send(uint8_t u8_data) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
	uint8_t *u8_pointer = &u8_data;
 8000ef4:	1cfb      	adds	r3, r7, #3
 8000ef6:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1, 100);
 8000ef8:	2364      	movs	r3, #100	@ 0x64
 8000efa:	2201      	movs	r2, #1
 8000efc:	68f9      	ldr	r1, [r7, #12]
 8000efe:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <_ZN10UART_servo9UART_SendEh+0x34>)
 8000f00:	f005 fbfe 	bl	8006700 <HAL_UART_Transmit>
	Checksum_Calc += u8_data;
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <_ZN10UART_servo9UART_SendEh+0x38>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <_ZN10UART_servo9UART_SendEh+0x38>)
 8000f12:	801a      	strh	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200048e4 	.word	0x200048e4
 8000f20:	20000144 	.word	0x20000144

08000f24 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>:
void UART_servo::UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	4611      	mov	r1, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	4603      	mov	r3, r0
 8000f34:	817b      	strh	r3, [r7, #10]
 8000f36:	460b      	mov	r3, r1
 8000f38:	813b      	strh	r3, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	80fb      	strh	r3, [r7, #6]
	Checksum_Calc = 0;
 8000f3e:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	801a      	strh	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8000f44:	897b      	ldrh	r3, [r7, #10]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	3b80      	subs	r3, #128	@ 0x80
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff ffca 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x83);              //header mark & command code
 8000f54:	2183      	movs	r1, #131	@ 0x83
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff ffc6 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(0x05);              //total data length
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f7ff ffc2 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8000f64:	893b      	ldrh	r3, [r7, #8]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f7ff ffb7 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Position % 256);           //Servo Pos_L
 8000f7a:	893b      	ldrh	r3, [r7, #8]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff ffb1 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4619      	mov	r1, r3
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff ffa6 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Time % 256);          //Servo Time_L
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff ffa0 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt+0x9c>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff ff99 	bl	8000ee8 <_ZN10UART_servo9UART_SendEh>
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000144 	.word	0x20000144

08000fc4 <_ZN10UART_servo3runEv>:
void UART_servo::run(){//put in timer IT
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	UART_Send_SetMotorPosition(motorId,(uint16_t)(800+7*pos),reflectime);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	8819      	ldrh	r1, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	00d2      	lsls	r2, r2, #3
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	891b      	ldrh	r3, [r3, #8]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff9b 	bl	8000f24 <_ZN10UART_servo26UART_Send_SetMotorPositionEttt>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_ZN10UART_servo10update_posEi>:
void UART_servo::update_pos(int _pos){
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
	pos = _pos;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	605a      	str	r2, [r3, #4]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>:
public:
	void UART_Send(uint8_t u8_data);
	void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time);
	void update_pos(int pos);
	void run();
    UART_servo(uint16_t id, uint16_t _reflect_time, UART_HandleTypeDef* _servo_uart)
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	817b      	strh	r3, [r7, #10]
 8001020:	4613      	mov	r3, r2
 8001022:	813b      	strh	r3, [r7, #8]
        : motorId(id), reflectime(_reflect_time), servo_uart(_servo_uart) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	897a      	ldrh	r2, [r7, #10]
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	893a      	ldrh	r2, [r7, #8]
 800102e:	811a      	strh	r2, [r3, #8]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	60da      	str	r2, [r3, #12]
        // 初始化其他成員變數
        Position = 0;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	805a      	strh	r2, [r3, #2]
        pos = 0;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
    }
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>:
#include "math.h"
#include "motor_config.h"

class MotorController{
public:
    MotorController(TIM_HandleTypeDef* enc, TIM_HandleTypeDef* pwm, uint32_t channel, GPIO_TypeDef* BGPIO, uint16_t BPin, double kp, double ki, double kd):
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6278      	str	r0, [r7, #36]	@ 0x24
 8001058:	6239      	str	r1, [r7, #32]
 800105a:	61fa      	str	r2, [r7, #28]
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001062:	ed87 1b02 	vstr	d1, [r7, #8]
 8001066:	ed87 2b00 	vstr	d2, [r7]
        _enc(enc), _pwm(pwm), _channel(channel), _BGPIO(BGPIO), _BPin(BPin), _kp(kp), _ki(ki), _kd(kd){}
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	4a3d      	ldr	r2, [pc, #244]	@ (8001164 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x114>)
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	6a3a      	ldr	r2, [r7, #32]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001086:	619a      	str	r2, [r3, #24]
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800108c:	839a      	strh	r2, [r3, #28]
 800108e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001092:	f7ff fcf3 	bl	8000a7c <__aeabi_d2f>
 8001096:	4602      	mov	r2, r0
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	621a      	str	r2, [r3, #32]
 800109c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010a0:	f7ff fcec 	bl	8000a7c <__aeabi_d2f>
 80010a4:	4602      	mov	r2, r0
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80010aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010ae:	f7ff fce5 	bl	8000a7c <__aeabi_d2f>
 80010b2:	4602      	mov	r2, r0
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80010c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	2200      	movs	r2, #0
 80010d2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	2200      	movs	r2, #0
 80010d8:	865a      	strh	r2, [r3, #50]	@ 0x32
 80010da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	645a      	str	r2, [r3, #68]	@ 0x44
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	649a      	str	r2, [r3, #72]	@ 0x48
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x118>)
 8001116:	651a      	str	r2, [r3, #80]	@ 0x50
 8001118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111a:	2200      	movs	r2, #0
 800111c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001122:	2200      	movs	r2, #0
 8001124:	659a      	str	r2, [r3, #88]	@ 0x58
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	2200      	movs	r2, #0
 800112a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	2200      	movs	r2, #0
 8001130:	661a      	str	r2, [r3, #96]	@ 0x60
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	2200      	movs	r2, #0
 8001136:	665a      	str	r2, [r3, #100]	@ 0x64
 8001138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113a:	2200      	movs	r2, #0
 800113c:	669a      	str	r2, [r3, #104]	@ 0x68
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0x114>)
 8001142:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	675a      	str	r2, [r3, #116]	@ 0x74
 800114c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001152:	679a      	str	r2, [r3, #120]	@ 0x78
 8001154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001156:	2232      	movs	r2, #50	@ 0x32
 8001158:	67da      	str	r2, [r3, #124]	@ 0x7c
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	4618      	mov	r0, r3
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	437a0000 	.word	0x437a0000
 8001168:	42c80000 	.word	0x42c80000

0800116c <arm_init>:
#define CASCADE_STARTHIGHT 250.0f
float cascade_height = CASCADE_STARTHIGHT; //cascade起始高度
MotorController Motor_cas(&htim1, &htim12, TIM_CHANNEL_2, GPIOB, GPIO_PIN_12, 0.6, 30, 0);


void arm_init(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af02      	add	r7, sp, #8
	// 手臂初始化邏輯
	HAL_Init();
 8001172:	f002 fb0d 	bl	8003790 <HAL_Init>
	// 啟動 Encoder 與 PWM
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001176:	213c      	movs	r1, #60	@ 0x3c
 8001178:	4824      	ldr	r0, [pc, #144]	@ (800120c <arm_init+0xa0>)
 800117a:	f004 fb9b 	bl	80058b4 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800117e:	2108      	movs	r1, #8
 8001180:	4823      	ldr	r0, [pc, #140]	@ (8001210 <arm_init+0xa4>)
 8001182:	f004 fa29 	bl	80055d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8001186:	2104      	movs	r1, #4
 8001188:	4822      	ldr	r0, [pc, #136]	@ (8001214 <arm_init+0xa8>)
 800118a:	f004 fa25 	bl	80055d8 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001194:	4820      	ldr	r0, [pc, #128]	@ (8001218 <arm_init+0xac>)
 8001196:	f003 f9b5 	bl	8004504 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800119a:	2100      	movs	r1, #0
 800119c:	481c      	ldr	r0, [pc, #112]	@ (8001210 <arm_init+0xa4>)
 800119e:	f004 fa1b 	bl	80055d8 <HAL_TIM_PWM_Start>

	servo1.update_pos(servo1_pos);
 80011a2:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <arm_init+0xb0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	481d      	ldr	r0, [pc, #116]	@ (8001220 <arm_init+0xb4>)
 80011aa:	f7ff ff24 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo2.update_pos(servo2_pos);
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <arm_init+0xb8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	481c      	ldr	r0, [pc, #112]	@ (8001228 <arm_init+0xbc>)
 80011b6:	f7ff ff1e 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo3.update_pos(gripper_close);
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <arm_init+0xc0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	481b      	ldr	r0, [pc, #108]	@ (8001230 <arm_init+0xc4>)
 80011c2:	f7ff ff18 	bl	8000ff6 <_ZN10UART_servo10update_posEi>

	servo1.run();
 80011c6:	4816      	ldr	r0, [pc, #88]	@ (8001220 <arm_init+0xb4>)
 80011c8:	f7ff fefc 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo2.run();
 80011cc:	4816      	ldr	r0, [pc, #88]	@ (8001228 <arm_init+0xbc>)
 80011ce:	f7ff fef9 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo3.run();
 80011d2:	4817      	ldr	r0, [pc, #92]	@ (8001230 <arm_init+0xc4>)
 80011d4:	f7ff fef6 	bl	8000fc4 <_ZN10UART_servo3runEv>

	// 初始化 Cascade
	Motor_cas.init(-1,-1);								// 初始化 Cascade 馬達控制器
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011e0:	4814      	ldr	r0, [pc, #80]	@ (8001234 <arm_init+0xc8>)
 80011e2:	f000 f932 	bl	800144a <_ZN15MotorController4initEii>
	Motor_cas.setSpeed(0.0);							// 停止移動
 80011e6:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001238 <arm_init+0xcc>
 80011ea:	4812      	ldr	r0, [pc, #72]	@ (8001234 <arm_init+0xc8>)
 80011ec:	f000 f9c8 	bl	8001580 <_ZN15MotorController8setSpeedEf>
	xTaskCreate(arm_cascade_set_to_zero, "arm_cascade_set_to_zero", 512, NULL, 2, NULL); // 開啟 Cascade 歸零任務
 80011f0:	2300      	movs	r3, #0
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	2302      	movs	r3, #2
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2300      	movs	r3, #0
 80011fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011fe:	490f      	ldr	r1, [pc, #60]	@ (800123c <arm_init+0xd0>)
 8001200:	480f      	ldr	r0, [pc, #60]	@ (8001240 <arm_init+0xd4>)
 8001202:	f007 fd1d 	bl	8008c40 <xTaskCreate>
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000477c 	.word	0x2000477c
 8001210:	2000480c 	.word	0x2000480c
 8001214:	20004854 	.word	0x20004854
 8001218:	40020400 	.word	0x40020400
 800121c:	20000000 	.word	0x20000000
 8001220:	20000148 	.word	0x20000148
 8001224:	20000004 	.word	0x20000004
 8001228:	20000158 	.word	0x20000158
 800122c:	20000008 	.word	0x20000008
 8001230:	20000168 	.word	0x20000168
 8001234:	20000180 	.word	0x20000180
 8001238:	00000000 	.word	0x00000000
 800123c:	08019378 	.word	0x08019378
 8001240:	080012c5 	.word	0x080012c5

08001244 <arm_timer_callback>:


void arm_timer_callback(void) {							// constantly run the servo in timer callback
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	if(started) Motor_cas.setgoal(cascade_height); 		// after the system is fully initialized, keep updating the goal position
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <arm_timer_callback+0x5c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d007      	beq.n	8001260 <arm_timer_callback+0x1c>
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <arm_timer_callback+0x60>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	4813      	ldr	r0, [pc, #76]	@ (80012a8 <arm_timer_callback+0x64>)
 800125c:	f000 faf6 	bl	800184c <_ZN15MotorController7setgoalEf>
	Motor_cas.MotorOutput();							// update the motor PWM output	
 8001260:	4811      	ldr	r0, [pc, #68]	@ (80012a8 <arm_timer_callback+0x64>)
 8001262:	f000 f911 	bl	8001488 <_ZN15MotorController11MotorOutputEv>
	servo1.update_pos(servo1_pos);
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <arm_timer_callback+0x68>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4619      	mov	r1, r3
 800126c:	4810      	ldr	r0, [pc, #64]	@ (80012b0 <arm_timer_callback+0x6c>)
 800126e:	f7ff fec2 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo2.update_pos(servo2_pos);
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <arm_timer_callback+0x70>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <arm_timer_callback+0x74>)
 800127a:	f7ff febc 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo3.update_pos(gripper_close);
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <arm_timer_callback+0x78>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4619      	mov	r1, r3
 8001284:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <arm_timer_callback+0x7c>)
 8001286:	f7ff feb6 	bl	8000ff6 <_ZN10UART_servo10update_posEi>
	servo1.run();
 800128a:	4809      	ldr	r0, [pc, #36]	@ (80012b0 <arm_timer_callback+0x6c>)
 800128c:	f7ff fe9a 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo2.run();
 8001290:	4809      	ldr	r0, [pc, #36]	@ (80012b8 <arm_timer_callback+0x74>)
 8001292:	f7ff fe97 	bl	8000fc4 <_ZN10UART_servo3runEv>
	servo3.run();
 8001296:	480a      	ldr	r0, [pc, #40]	@ (80012c0 <arm_timer_callback+0x7c>)
 8001298:	f7ff fe94 	bl	8000fc4 <_ZN10UART_servo3runEv>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	2000017c 	.word	0x2000017c
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	20000180 	.word	0x20000180
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000148 	.word	0x20000148
 80012b4:	20000004 	.word	0x20000004
 80012b8:	20000158 	.word	0x20000158
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000168 	.word	0x20000168

080012c4 <arm_cascade_set_to_zero>:


void arm_cascade_set_to_zero(void* pvParameters){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	set_to_zero = 0;
 80012cc:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <arm_cascade_set_to_zero+0x6c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
	cascade_height = CASCADE_STARTHIGHT + 30.0f; 		// 設定目標高度為目前位置向上30mm
 80012d2:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <arm_cascade_set_to_zero+0x70>)
 80012d4:	4a18      	ldr	r2, [pc, #96]	@ (8001338 <arm_cascade_set_to_zero+0x74>)
 80012d6:	601a      	str	r2, [r3, #0]
	while(!Motor_cas.goal_reached()){
 80012d8:	e00a      	b.n	80012f0 <arm_cascade_set_to_zero+0x2c>
		Motor_cas.setgoal(cascade_height); 				// 往上移動一點點，防止原本已經在底部
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <arm_cascade_set_to_zero+0x70>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	4815      	ldr	r0, [pc, #84]	@ (800133c <arm_cascade_set_to_zero+0x78>)
 80012e6:	f000 fab1 	bl	800184c <_ZN15MotorController7setgoalEf>
		osDelay(10);									// delay 10ms to avoid too high refreshing rate
 80012ea:	200a      	movs	r0, #10
 80012ec:	f006 fe4a 	bl	8007f84 <osDelay>
	while(!Motor_cas.goal_reached()){
 80012f0:	4812      	ldr	r0, [pc, #72]	@ (800133c <arm_cascade_set_to_zero+0x78>)
 80012f2:	f000 faff 	bl	80018f4 <_ZN15MotorController12goal_reachedEv>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f083 0301 	eor.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1eb      	bne.n	80012da <arm_cascade_set_to_zero+0x16>
	}
	while(!set_to_zero){
 8001302:	e007      	b.n	8001314 <arm_cascade_set_to_zero+0x50>
		Motor_cas.setSpeed(-0.3f); 						// 以固定速度往下移動
 8001304:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001340 <arm_cascade_set_to_zero+0x7c>
 8001308:	480c      	ldr	r0, [pc, #48]	@ (800133c <arm_cascade_set_to_zero+0x78>)
 800130a:	f000 f939 	bl	8001580 <_ZN15MotorController8setSpeedEf>
		osDelay(10);									// delay 10ms to avoid too high refreshing rate
 800130e:	200a      	movs	r0, #10
 8001310:	f006 fe38 	bl	8007f84 <osDelay>
	while(!set_to_zero){
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <arm_cascade_set_to_zero+0x6c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f3      	beq.n	8001304 <arm_cascade_set_to_zero+0x40>
	}
	started = 1;										// 系統初始化完成，可以開始移動 Cascade
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <arm_cascade_set_to_zero+0x80>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]
	vTaskDelete(NULL);  // Delete current task when mission is complete
 8001322:	2000      	movs	r0, #0
 8001324:	f007 fdea 	bl	8008efc <vTaskDelete>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000178 	.word	0x20000178
 8001334:	2000000c 	.word	0x2000000c
 8001338:	438c0000 	.word	0x438c0000
 800133c:	20000180 	.word	0x20000180
 8001340:	be99999a 	.word	0xbe99999a
 8001344:	2000017c 	.word	0x2000017c

08001348 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2) {
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d10d      	bne.n	8001374 <HAL_GPIO_EXTI_Callback+0x2c>
		set_to_zero = 1;								// 設定 Cascade 歸零旗標
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <HAL_GPIO_EXTI_Callback+0x34>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]
		Motor_cas.setSpeed(0.0f);						// 停止移動
 800135e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001380 <HAL_GPIO_EXTI_Callback+0x38>
 8001362:	4808      	ldr	r0, [pc, #32]	@ (8001384 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001364:	f000 f90c 	bl	8001580 <_ZN15MotorController8setSpeedEf>
		Motor_cas._cascade_height = CASCADE_STARTHIGHT;	// 重置 Cascade 量測高度
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_GPIO_EXTI_Callback+0x3c>)
 800136a:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_GPIO_EXTI_Callback+0x40>)
 800136c:	601a      	str	r2, [r3, #0]
		cascade_height = CASCADE_STARTHIGHT;			// 重置 Cascade 目標高度
 800136e:	4b07      	ldr	r3, [pc, #28]	@ (800138c <HAL_GPIO_EXTI_Callback+0x44>)
 8001370:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <HAL_GPIO_EXTI_Callback+0x40>)
 8001372:	601a      	str	r2, [r3, #0]
	}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000178 	.word	0x20000178
 8001380:	00000000 	.word	0x00000000
 8001384:	20000180 	.word	0x20000180
 8001388:	437a0000 	.word	0x437a0000
 800138c:	2000000c 	.word	0x2000000c

08001390 <_Z41__static_initialization_and_destruction_0v>:
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af02      	add	r7, sp, #8
UART_servo servo1(1, 2000, &huart3);
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <_Z41__static_initialization_and_destruction_0v+0x70>)
 8001398:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800139c:	2101      	movs	r1, #1
 800139e:	4819      	ldr	r0, [pc, #100]	@ (8001404 <_Z41__static_initialization_and_destruction_0v+0x74>)
 80013a0:	f7ff fe37 	bl	8001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
UART_servo servo2(3, 2000, &huart3);
 80013a4:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <_Z41__static_initialization_and_destruction_0v+0x70>)
 80013a6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80013aa:	2103      	movs	r1, #3
 80013ac:	4816      	ldr	r0, [pc, #88]	@ (8001408 <_Z41__static_initialization_and_destruction_0v+0x78>)
 80013ae:	f7ff fe30 	bl	8001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
UART_servo servo3(4, 2000, &huart3);
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <_Z41__static_initialization_and_destruction_0v+0x70>)
 80013b4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80013b8:	2104      	movs	r1, #4
 80013ba:	4814      	ldr	r0, [pc, #80]	@ (800140c <_Z41__static_initialization_and_destruction_0v+0x7c>)
 80013bc:	f7ff fe29 	bl	8001012 <_ZN10UART_servoC1EttP20__UART_HandleTypeDef>
MotorController Motor_cas(&htim1, &htim12, TIM_CHANNEL_2, GPIOB, GPIO_PIN_12, 0.6, 30, 0);
 80013c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <_Z41__static_initialization_and_destruction_0v+0x80>)
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	ed9f 2b07 	vldr	d2, [pc, #28]	@ 80013e8 <_Z41__static_initialization_and_destruction_0v+0x58>
 80013ce:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 80013f0 <_Z41__static_initialization_and_destruction_0v+0x60>
 80013d2:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 80013f8 <_Z41__static_initialization_and_destruction_0v+0x68>
 80013d6:	2304      	movs	r3, #4
 80013d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001414 <_Z41__static_initialization_and_destruction_0v+0x84>)
 80013da:	490f      	ldr	r1, [pc, #60]	@ (8001418 <_Z41__static_initialization_and_destruction_0v+0x88>)
 80013dc:	480f      	ldr	r0, [pc, #60]	@ (800141c <_Z41__static_initialization_and_destruction_0v+0x8c>)
 80013de:	f7ff fe37 	bl	8001050 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
	...
 80013f4:	403e0000 	.word	0x403e0000
 80013f8:	33333333 	.word	0x33333333
 80013fc:	3fe33333 	.word	0x3fe33333
 8001400:	200048e4 	.word	0x200048e4
 8001404:	20000148 	.word	0x20000148
 8001408:	20000158 	.word	0x20000158
 800140c:	20000168 	.word	0x20000168
 8001410:	40020400 	.word	0x40020400
 8001414:	20004854 	.word	0x20004854
 8001418:	2000477c 	.word	0x2000477c
 800141c:	20000180 	.word	0x20000180

08001420 <_GLOBAL__sub_I_servo1>:
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
 8001424:	f7ff ffb4 	bl	8001390 <_Z41__static_initialization_and_destruction_0v>
 8001428:	bd80      	pop	{r7, pc}

0800142a <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	ed87 0a01 	vstr	s0, [r7, #4]
 8001434:	edd7 7a01 	vldr	s15, [r7, #4]
 8001438:	eef0 7ae7 	vabs.f32	s15, s15
 800143c:	eeb0 0a67 	vmov.f32	s0, s15
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_ZN15MotorController4initEii>:
int times = 0;
uint32_t current_cnt;
float v = 0.5;
float e = 1.0;

void MotorController::init(int en_ctrl,int dir_ctrl) {
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
    HAL_TIM_Encoder_Start(_enc, TIM_CHANNEL_ALL);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	213c      	movs	r1, #60	@ 0x3c
 800145c:	4618      	mov	r0, r3
 800145e:	f004 fa29 	bl	80058b4 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(_pwm, _channel);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	4619      	mov	r1, r3
 800146c:	4610      	mov	r0, r2
 800146e:	f004 f8b3 	bl	80055d8 <HAL_TIM_PWM_Start>
    _dir_ctrl = dir_ctrl;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	65da      	str	r2, [r3, #92]	@ 0x5c
    _en_ctrl = en_ctrl;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <_ZN15MotorController11MotorOutputEv>:

void MotorController::MotorOutput(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    ComputePID();
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f885 	bl	80015a0 <_ZN15MotorController10ComputePIDEv>

    if (_dir_ctrl == 1){
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800149a:	2b01      	cmp	r3, #1
 800149c:	d112      	bne.n	80014c4 <_ZN15MotorController11MotorOutputEv+0x3c>
    	HAL_GPIO_WritePin(_BGPIO, _BPin, _pidOutput >= 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6998      	ldr	r0, [r3, #24]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	8b99      	ldrh	r1, [r3, #28]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80014ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	db01      	blt.n	80014ba <_ZN15MotorController11MotorOutputEv+0x32>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <_ZN15MotorController11MotorOutputEv+0x34>
 80014ba:	2300      	movs	r3, #0
 80014bc:	461a      	mov	r2, r3
 80014be:	f003 f821 	bl	8004504 <HAL_GPIO_WritePin>
 80014c2:	e014      	b.n	80014ee <_ZN15MotorController11MotorOutputEv+0x66>
    }else{
    	HAL_GPIO_WritePin(_BGPIO, _BPin, _pidOutput >= 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6998      	ldr	r0, [r3, #24]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	8b99      	ldrh	r1, [r3, #28]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80014d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	bfac      	ite	ge
 80014dc:	2301      	movge	r3, #1
 80014de:	2300      	movlt	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f083 0301 	eor.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	f003 f80b 	bl	8004504 <HAL_GPIO_WritePin>
    }
    _pwmValue = (uint16_t)(fabs(_pidOutput) * PWM_ARR );///  10.0);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80014f4:	eeb0 0a67 	vmov.f32	s0, s15
 80014f8:	f7ff ff97 	bl	800142a <_ZSt4fabsf>
 80014fc:	eef0 7a40 	vmov.f32	s15, s0
 8001500:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800157c <_ZN15MotorController11MotorOutputEv+0xf4>
 8001504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800150c:	ee17 3a90 	vmov	r3, s15
 8001510:	b29a      	uxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	865a      	strh	r2, [r3, #50]	@ 0x32
    if (_pwmValue < 10) _pwmValue = 0;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800151a:	2b09      	cmp	r3, #9
 800151c:	d802      	bhi.n	8001524 <_ZN15MotorController11MotorOutputEv+0x9c>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	865a      	strh	r2, [r3, #50]	@ 0x32
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d106      	bne.n	800153a <_ZN15MotorController11MotorOutputEv+0xb2>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001538:	e01b      	b.n	8001572 <_ZN15MotorController11MotorOutputEv+0xea>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b04      	cmp	r3, #4
 8001540:	d106      	bne.n	8001550 <_ZN15MotorController11MotorOutputEv+0xc8>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800154e:	e010      	b.n	8001572 <_ZN15MotorController11MotorOutputEv+0xea>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b08      	cmp	r3, #8
 8001556:	d106      	bne.n	8001566 <_ZN15MotorController11MotorOutputEv+0xde>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001564:	e005      	b.n	8001572 <_ZN15MotorController11MotorOutputEv+0xea>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	447a0000 	.word	0x447a0000

08001580 <_ZN15MotorController8setSpeedEf>:

void MotorController::setSpeed(float speed) {
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	ed87 0a00 	vstr	s0, [r7]
    _targetSpeed = speed;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <_ZN15MotorController10ComputePIDEv>:

float MotorController::getSpeed() {
    return _currentSpeed;
}

float MotorController::ComputePID() {
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
    updateSpeed();
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f8a9 	bl	8001700 <_ZN15MotorController11updateSpeedEv>
    _error = _targetSpeed - _currentSpeed;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80015ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    _integral += _error * (DT / 1000.0);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffed 	bl	80005a8 <__aeabi_f2d>
 80015ce:	4604      	mov	r4, r0
 80015d0:	460d      	mov	r5, r1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffe6 	bl	80005a8 <__aeabi_f2d>
 80015dc:	a345      	add	r3, pc, #276	@ (adr r3, 80016f4 <_ZN15MotorController10ComputePIDEv+0x154>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7ff f839 	bl	8000658 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4620      	mov	r0, r4
 80015ec:	4629      	mov	r1, r5
 80015ee:	f7fe fe7d 	bl	80002ec <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff fa3f 	bl	8000a7c <__aeabi_d2f>
 80015fe:	4602      	mov	r2, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	64da      	str	r2, [r3, #76]	@ 0x4c
    if(_integral >= INTEGRAL_LIMIT) _integral = INTEGRAL_LIMIT;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800160a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800160e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001616:	db04      	blt.n	8001622 <_ZN15MotorController10ComputePIDEv+0x82>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800161e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001620:	e00d      	b.n	800163e <_ZN15MotorController10ComputePIDEv+0x9e>
    else if(_integral <= -INTEGRAL_LIMIT) _integral = -INTEGRAL_LIMIT;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001628:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 800162c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	d803      	bhi.n	800163e <_ZN15MotorController10ComputePIDEv+0x9e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 800163c:	64da      	str	r2, [r3, #76]	@ 0x4c


    float derivative = (_error - _lastError) / (DT / 1000.0);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800164a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164e:	ee17 0a90 	vmov	r0, s15
 8001652:	f7fe ffa9 	bl	80005a8 <__aeabi_f2d>
 8001656:	a327      	add	r3, pc, #156	@ (adr r3, 80016f4 <_ZN15MotorController10ComputePIDEv+0x154>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7ff f926 	bl	80008ac <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff fa08 	bl	8000a7c <__aeabi_d2f>
 800166c:	4603      	mov	r3, r0
 800166e:	60fb      	str	r3, [r7, #12]

    _pidOutput = (_kp * _error) + (_ki * _integral); //+ (_kd * derivative);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	ed93 7a08 	vldr	s14, [r3, #32]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800167c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800168c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    // Update last error
    _lastError = _error;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	649a      	str	r2, [r3, #72]	@ 0x48
    if(_pidOutput > 1) _pidOutput = 1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80016a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	dd04      	ble.n	80016c0 <_ZN15MotorController10ComputePIDEv+0x120>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80016bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80016be:	e00c      	b.n	80016da <_ZN15MotorController10ComputePIDEv+0x13a>
    else if (_pidOutput < -1) _pidOutput = -1;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80016c6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80016ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	d502      	bpl.n	80016da <_ZN15MotorController10ComputePIDEv+0x13a>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a06      	ldr	r2, [pc, #24]	@ (80016f0 <_ZN15MotorController10ComputePIDEv+0x150>)
 80016d8:	635a      	str	r2, [r3, #52]	@ 0x34
    return _pidOutput;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	_pidOutput = _kp * _error + _ki * _integral ;

	if (_pidOutput > 1) _pidOutput = 1;
	else if (_pidOutput < -1) _pidOutput = -1;
    return _pidOutput;
}
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eeb0 0a67 	vmov.f32	s0, s15
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bdb0      	pop	{r4, r5, r7, pc}
 80016ec:	f3af 8000 	nop.w
 80016f0:	bf800000 	.word	0xbf800000
 80016f4:	47ae147b 	.word	0x47ae147b
 80016f8:	3f847ae1 	.word	0x3f847ae1
 80016fc:	00000000 	.word	0x00000000

08001700 <_ZN15MotorController11updateSpeedEv>:

float MotorController::updateSpeed() {
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	cnt = __HAL_TIM_GetCounter(_enc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	b21a      	sxth	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	861a      	strh	r2, [r3, #48]	@ 0x30
	_cascade_height += -(float)cnt / (4.0f * ENCODER_RESOLUTION * REDUCTION_RATIO) * 3.14 * 35;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff44 	bl	80005a8 <__aeabi_f2d>
 8001720:	4604      	mov	r4, r0
 8001722:	460d      	mov	r5, r1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001732:	eef1 7a67 	vneg.f32	s15, s15
 8001736:	ee17 3a90 	vmov	r3, s15
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff34 	bl	80005a8 <__aeabi_f2d>
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b3c      	ldr	r3, [pc, #240]	@ (8001838 <_ZN15MotorController11updateSpeedEv+0x138>)
 8001746:	f7ff f8b1 	bl	80008ac <__aeabi_ddiv>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	a335      	add	r3, pc, #212	@ (adr r3, 8001828 <_ZN15MotorController11updateSpeedEv+0x128>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff7e 	bl	8000658 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b34      	ldr	r3, [pc, #208]	@ (800183c <_ZN15MotorController11updateSpeedEv+0x13c>)
 800176a:	f7fe ff75 	bl	8000658 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f7fe fdb9 	bl	80002ec <__adddf3>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff f97b 	bl	8000a7c <__aeabi_d2f>
 8001786:	4602      	mov	r2, r0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	601a      	str	r2, [r3, #0]
	_currentSpeed = (cnt/ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fef6 	bl	8000584 <__aeabi_i2d>
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <_ZN15MotorController11updateSpeedEv+0x140>)
 800179e:	f7ff f885 	bl	80008ac <__aeabi_ddiv>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <_ZN15MotorController11updateSpeedEv+0x144>)
 80017b0:	f7ff f87c 	bl	80008ac <__aeabi_ddiv>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <_ZN15MotorController11updateSpeedEv+0x148>)
 80017c2:	f7ff f873 	bl	80008ac <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	a318      	add	r3, pc, #96	@ (adr r3, 8001830 <_ZN15MotorController11updateSpeedEv+0x130>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7ff f86a 	bl	80008ac <__aeabi_ddiv>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f94c 	bl	8000a7c <__aeabi_d2f>
 80017e4:	4602      	mov	r2, r0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COUNTER(_enc, 0);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24
    _currentSpeed *= _en_ctrl;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    return _currentSpeed;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001814:	ee07 3a90 	vmov	s15, r3
}
 8001818:	eeb0 0a67 	vmov.f32	s0, s15
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bdb0      	pop	{r4, r5, r7, pc}
 8001822:	bf00      	nop
 8001824:	f3af 8000 	nop.w
 8001828:	51eb851f 	.word	0x51eb851f
 800182c:	40091eb8 	.word	0x40091eb8
 8001830:	47ae147b 	.word	0x47ae147b
 8001834:	3f847ae1 	.word	0x3f847ae1
 8001838:	40d80000 	.word	0x40d80000
 800183c:	40418000 	.word	0x40418000
 8001840:	40700000 	.word	0x40700000
 8001844:	40380000 	.word	0x40380000
 8001848:	40100000 	.word	0x40100000

0800184c <_ZN15MotorController7setgoalEf>:

void MotorController::setgoal(float target_height) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	ed87 0a00 	vstr	s0, [r7]
	_targrt_height  = target_height;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	641a      	str	r2, [r3, #64]	@ 0x40
	if(fabs(_targrt_height - _cascade_height) <= e){
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800186e:	eeb0 0a67 	vmov.f32	s0, s15
 8001872:	f7ff fdda 	bl	800142a <_ZSt4fabsf>
 8001876:	eeb0 7a40 	vmov.f32	s14, s0
 800187a:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <_ZN15MotorController7setgoalEf+0x9c>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	bf94      	ite	ls
 800188a:	2301      	movls	r3, #1
 800188c:	2300      	movhi	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <_ZN15MotorController7setgoalEf+0x54>
		setSpeed(0.0);
 8001894:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80018ec <_ZN15MotorController7setgoalEf+0xa0>
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fe71 	bl	8001580 <_ZN15MotorController8setSpeedEf>
	}
	else if(_targrt_height - _cascade_height>0) setSpeed(v);
	else setSpeed(-v);
}
 800189e:	e01f      	b.n	80018e0 <_ZN15MotorController7setgoalEf+0x94>
	else if(_targrt_height - _cascade_height>0) setSpeed(v);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	dd08      	ble.n	80018cc <_ZN15MotorController7setgoalEf+0x80>
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <_ZN15MotorController7setgoalEf+0xa4>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	eeb0 0a67 	vmov.f32	s0, s15
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fe5b 	bl	8001580 <_ZN15MotorController8setSpeedEf>
}
 80018ca:	e009      	b.n	80018e0 <_ZN15MotorController7setgoalEf+0x94>
	else setSpeed(-v);
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <_ZN15MotorController7setgoalEf+0xa4>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	eef1 7a67 	vneg.f32	s15, s15
 80018d6:	eeb0 0a67 	vmov.f32	s0, s15
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fe50 	bl	8001580 <_ZN15MotorController8setSpeedEf>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000014 	.word	0x20000014
 80018ec:	00000000 	.word	0x00000000
 80018f0:	20000010 	.word	0x20000010

080018f4 <_ZN15MotorController12goal_reachedEv>:

bool MotorController::goal_reached(){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    if(fabs(_cascade_height-_targrt_height )<= e){
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	ed93 7a00 	vldr	s14, [r3]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190c:	eeb0 0a67 	vmov.f32	s0, s15
 8001910:	f7ff fd8b 	bl	800142a <_ZSt4fabsf>
 8001914:	eeb0 7a40 	vmov.f32	s14, s0
 8001918:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <_ZN15MotorController12goal_reachedEv+0x4c>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	bf94      	ite	ls
 8001928:	2301      	movls	r3, #1
 800192a:	2300      	movhi	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <_ZN15MotorController12goal_reachedEv+0x42>
        return true;
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <_ZN15MotorController12goal_reachedEv+0x44>
    } else
        return false;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000014 	.word	0x20000014

08001944 <mission_ctrl>:

void mission_init(void){
    arm_init();
}

void mission_ctrl(void){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af02      	add	r7, sp, #8
    if(prev_mission_type != mission_type){
 800194a:	4b39      	ldr	r3, [pc, #228]	@ (8001a30 <mission_ctrl+0xec>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b39      	ldr	r3, [pc, #228]	@ (8001a34 <mission_ctrl+0xf0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d069      	beq.n	8001a2a <mission_ctrl+0xe6>
        prev_mission_type = mission_type;
 8001956:	4b37      	ldr	r3, [pc, #220]	@ (8001a34 <mission_ctrl+0xf0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a35      	ldr	r2, [pc, #212]	@ (8001a30 <mission_ctrl+0xec>)
 800195c:	6013      	str	r3, [r2, #0]
        switch (mission_type)
 800195e:	4b35      	ldr	r3, [pc, #212]	@ (8001a34 <mission_ctrl+0xf0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3b01      	subs	r3, #1
 8001964:	2b03      	cmp	r3, #3
 8001966:	d857      	bhi.n	8001a18 <mission_ctrl+0xd4>
 8001968:	a201      	add	r2, pc, #4	@ (adr r2, 8001970 <mission_ctrl+0x2c>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	08001981 	.word	0x08001981
 8001974:	080019a7 	.word	0x080019a7
 8001978:	080019cd 	.word	0x080019cd
 800197c:	080019f3 	.word	0x080019f3
        {
        case 1:
            if (!task_created) {
 8001980:	4b2d      	ldr	r3, [pc, #180]	@ (8001a38 <mission_ctrl+0xf4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d149      	bne.n	8001a1c <mission_ctrl+0xd8>
                task_created = 1;
 8001988:	4b2b      	ldr	r3, [pc, #172]	@ (8001a38 <mission_ctrl+0xf4>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
                xTaskCreate(mission_1, "mission_1", 512, NULL, 2, NULL);
 800198e:	2300      	movs	r3, #0
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	2302      	movs	r3, #2
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2300      	movs	r3, #0
 8001998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800199c:	4927      	ldr	r1, [pc, #156]	@ (8001a3c <mission_ctrl+0xf8>)
 800199e:	4828      	ldr	r0, [pc, #160]	@ (8001a40 <mission_ctrl+0xfc>)
 80019a0:	f007 f94e 	bl	8008c40 <xTaskCreate>
            }
            break;
 80019a4:	e03a      	b.n	8001a1c <mission_ctrl+0xd8>
        case 2:
            if (!task_created) {
 80019a6:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <mission_ctrl+0xf4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d138      	bne.n	8001a20 <mission_ctrl+0xdc>
                task_created = 1;
 80019ae:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <mission_ctrl+0xf4>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
                xTaskCreate(mission_2, "mission_2", 512, NULL, 2, NULL);
 80019b4:	2300      	movs	r3, #0
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	2302      	movs	r3, #2
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c2:	4920      	ldr	r1, [pc, #128]	@ (8001a44 <mission_ctrl+0x100>)
 80019c4:	4820      	ldr	r0, [pc, #128]	@ (8001a48 <mission_ctrl+0x104>)
 80019c6:	f007 f93b 	bl	8008c40 <xTaskCreate>
            }
            break;
 80019ca:	e029      	b.n	8001a20 <mission_ctrl+0xdc>
        case 3:
            if (!task_created) {
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <mission_ctrl+0xf4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d127      	bne.n	8001a24 <mission_ctrl+0xe0>
                task_created = 1;
 80019d4:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <mission_ctrl+0xf4>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
                xTaskCreate(mission_3, "mission_3", 512, NULL, 2, NULL);
 80019da:	2300      	movs	r3, #0
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	2302      	movs	r3, #2
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2300      	movs	r3, #0
 80019e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e8:	4918      	ldr	r1, [pc, #96]	@ (8001a4c <mission_ctrl+0x108>)
 80019ea:	4819      	ldr	r0, [pc, #100]	@ (8001a50 <mission_ctrl+0x10c>)
 80019ec:	f007 f928 	bl	8008c40 <xTaskCreate>
            }
            break;
 80019f0:	e018      	b.n	8001a24 <mission_ctrl+0xe0>
        case 4:
            if (!task_created) {
 80019f2:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <mission_ctrl+0xf4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d116      	bne.n	8001a28 <mission_ctrl+0xe4>
                task_created = 1;
 80019fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <mission_ctrl+0xf4>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
                xTaskCreate(mission_4, "mission_4", 512, NULL, 2, NULL);
 8001a00:	2300      	movs	r3, #0
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a0e:	4911      	ldr	r1, [pc, #68]	@ (8001a54 <mission_ctrl+0x110>)
 8001a10:	4811      	ldr	r0, [pc, #68]	@ (8001a58 <mission_ctrl+0x114>)
 8001a12:	f007 f915 	bl	8008c40 <xTaskCreate>
            }
            break;
 8001a16:	e007      	b.n	8001a28 <mission_ctrl+0xe4>
        default:
            break;
 8001a18:	bf00      	nop
 8001a1a:	e006      	b.n	8001a2a <mission_ctrl+0xe6>
            break;
 8001a1c:	bf00      	nop
 8001a1e:	e004      	b.n	8001a2a <mission_ctrl+0xe6>
            break;
 8001a20:	bf00      	nop
 8001a22:	e002      	b.n	8001a2a <mission_ctrl+0xe6>
            break;
 8001a24:	bf00      	nop
 8001a26:	e000      	b.n	8001a2a <mission_ctrl+0xe6>
            break;
 8001a28:	bf00      	nop
        }
    }
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000204 	.word	0x20000204
 8001a34:	20000200 	.word	0x20000200
 8001a38:	2000020c 	.word	0x2000020c
 8001a3c:	08019390 	.word	0x08019390
 8001a40:	08001a5d 	.word	0x08001a5d
 8001a44:	0801939c 	.word	0x0801939c
 8001a48:	08001a9d 	.word	0x08001a9d
 8001a4c:	080193a8 	.word	0x080193a8
 8001a50:	08001add 	.word	0x08001add
 8001a54:	080193b4 	.word	0x080193b4
 8001a58:	08001b1d 	.word	0x08001b1d

08001a5c <mission_1>:

void mission_1(void *pvParameters){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    mission_status = 0;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <mission_1+0x34>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
    
    /* add motion here */
    osDelay(5000);
 8001a6a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001a6e:	f006 fa89 	bl	8007f84 <osDelay>
    /* add motion here */

    mission_status = mission_type;
 8001a72:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <mission_1+0x38>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a06      	ldr	r2, [pc, #24]	@ (8001a90 <mission_1+0x34>)
 8001a78:	6013      	str	r3, [r2, #0]
    task_created = 0;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	@ (8001a98 <mission_1+0x3c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
    vTaskDelete(NULL);  // Delete current task when mission is complete
 8001a80:	2000      	movs	r0, #0
 8001a82:	f007 fa3b 	bl	8008efc <vTaskDelete>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000208 	.word	0x20000208
 8001a94:	20000200 	.word	0x20000200
 8001a98:	2000020c 	.word	0x2000020c

08001a9c <mission_2>:

void mission_2(void *pvParameters){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    mission_status = 0;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <mission_2+0x34>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]

    /* add motion here */
    osDelay(5000);
 8001aaa:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001aae:	f006 fa69 	bl	8007f84 <osDelay>
    /* add motion here */

    mission_status = mission_type;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <mission_2+0x38>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a06      	ldr	r2, [pc, #24]	@ (8001ad0 <mission_2+0x34>)
 8001ab8:	6013      	str	r3, [r2, #0]
    task_created = 0;
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <mission_2+0x3c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
    vTaskDelete(NULL);  // Delete current task when mission is complete
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f007 fa1b 	bl	8008efc <vTaskDelete>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000208 	.word	0x20000208
 8001ad4:	20000200 	.word	0x20000200
 8001ad8:	2000020c 	.word	0x2000020c

08001adc <mission_3>:
void mission_3(void *pvParameters){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
    mission_status = 0;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <mission_3+0x34>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]

    /* add motion here */
    osDelay(5000);
 8001aea:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001aee:	f006 fa49 	bl	8007f84 <osDelay>
    /* add motion here */

    mission_status = mission_type;
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <mission_3+0x38>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a06      	ldr	r2, [pc, #24]	@ (8001b10 <mission_3+0x34>)
 8001af8:	6013      	str	r3, [r2, #0]
    task_created = 0;
 8001afa:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <mission_3+0x3c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
    vTaskDelete(NULL);  // Delete current task when mission is complete
 8001b00:	2000      	movs	r0, #0
 8001b02:	f007 f9fb 	bl	8008efc <vTaskDelete>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000208 	.word	0x20000208
 8001b14:	20000200 	.word	0x20000200
 8001b18:	2000020c 	.word	0x2000020c

08001b1c <mission_4>:

void mission_4(void *pvParameters){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
    mission_status = 0;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <mission_4+0x34>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]

    /* add motion here */
    osDelay(5000);
 8001b2a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001b2e:	f006 fa29 	bl	8007f84 <osDelay>
    /* add motion here */

    mission_status = mission_type;
 8001b32:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <mission_4+0x38>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a06      	ldr	r2, [pc, #24]	@ (8001b50 <mission_4+0x34>)
 8001b38:	6013      	str	r3, [r2, #0]
    task_created = 0;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <mission_4+0x3c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
    vTaskDelete(NULL);  // Delete current task when mission is complete
 8001b40:	2000      	movs	r0, #0
 8001b42:	f007 f9db 	bl	8008efc <vTaskDelete>
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000208 	.word	0x20000208
 8001b54:	20000200 	.word	0x20000200
 8001b58:	2000020c 	.word	0x2000020c

08001b5c <uros_init>:
#define MAX_PING_FAIL_COUNT 5


extern UART_HandleTypeDef USARTx;

void uros_init(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af02      	add	r7, sp, #8
  // Initialize micro-ROS
  rmw_uros_set_custom_transport(
 8001b62:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <uros_init+0x58>)
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <uros_init+0x5c>)
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <uros_init+0x60>)
 8001b6c:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <uros_init+0x64>)
 8001b6e:	4915      	ldr	r1, [pc, #84]	@ (8001bc4 <uros_init+0x68>)
 8001b70:	2001      	movs	r0, #1
 8001b72:	f00b fbc7 	bl	800d304 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);
  
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00a ffdb 	bl	800cb34 <rcutils_get_zero_initialized_allocator>

  freeRTOS_allocator.allocate = microros_allocate;
 8001b7e:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <uros_init+0x6c>)
 8001b80:	607b      	str	r3, [r7, #4]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001b82:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <uros_init+0x70>)
 8001b84:	60bb      	str	r3, [r7, #8]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <uros_init+0x74>)
 8001b88:	60fb      	str	r3, [r7, #12]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <uros_init+0x78>)
 8001b8c:	613b      	str	r3, [r7, #16]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00a ffdd 	bl	800cb50 <rcutils_set_default_allocator>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f083 0301 	eor.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <uros_init+0x4e>
  printf("Error on default allocators (line %d)\n", __LINE__); 
 8001ba2:	2138      	movs	r1, #56	@ 0x38
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <uros_init+0x7c>)
 8001ba6:	f016 faef 	bl	8018188 <iprintf>
  }
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	08002481 	.word	0x08002481
 8001bb8:	08002419 	.word	0x08002419
 8001bbc:	080023f9 	.word	0x080023f9
 8001bc0:	080023cd 	.word	0x080023cd
 8001bc4:	2000489c 	.word	0x2000489c
 8001bc8:	08002b91 	.word	0x08002b91
 8001bcc:	08002bd5 	.word	0x08002bd5
 8001bd0:	08002c0d 	.word	0x08002c0d
 8001bd4:	08002c79 	.word	0x08002c79
 8001bd8:	080193c0 	.word	0x080193c0

08001bdc <uros_agent_status_check>:

void uros_agent_status_check(void) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  switch (status) {
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <uros_agent_status_check+0x4c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d81c      	bhi.n	8001c22 <uros_agent_status_check+0x46>
 8001be8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bf0 <uros_agent_status_check+0x14>)
 8001bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bee:	bf00      	nop
 8001bf0:	08001c05 	.word	0x08001c05
 8001bf4:	08001c0b 	.word	0x08001c0b
 8001bf8:	08001c11 	.word	0x08001c11
 8001bfc:	08001c17 	.word	0x08001c17
 8001c00:	08001c1d 	.word	0x08001c1d
    case AGENT_WAITING:
      handle_state_agent_waiting();
 8001c04:	f000 f812 	bl	8001c2c <handle_state_agent_waiting>
      break;
 8001c08:	e00c      	b.n	8001c24 <uros_agent_status_check+0x48>
    case AGENT_AVAILABLE:
      handle_state_agent_available();
 8001c0a:	f000 f821 	bl	8001c50 <handle_state_agent_available>
      break;
 8001c0e:	e009      	b.n	8001c24 <uros_agent_status_check+0x48>
    case AGENT_CONNECTED:
      handle_state_agent_connected();
 8001c10:	f000 f82a 	bl	8001c68 <handle_state_agent_connected>
      break;
 8001c14:	e006      	b.n	8001c24 <uros_agent_status_check+0x48>
    case AGENT_TRYING:
      handle_state_agent_trying();
 8001c16:	f000 f859 	bl	8001ccc <handle_state_agent_trying>
      break;
 8001c1a:	e003      	b.n	8001c24 <uros_agent_status_check+0x48>
    case AGENT_DISCONNECTED:
      handle_state_agent_disconnected();
 8001c1c:	f000 f880 	bl	8001d20 <handle_state_agent_disconnected>
      break;
 8001c20:	e000      	b.n	8001c24 <uros_agent_status_check+0x48>
    default:
      break;
 8001c22:	bf00      	nop
  }
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000300 	.word	0x20000300

08001c2c <handle_state_agent_waiting>:

void handle_state_agent_waiting(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  status = (rmw_uros_ping_agent(100, 10) == RMW_RET_OK) ? AGENT_AVAILABLE : AGENT_WAITING;
 8001c30:	210a      	movs	r1, #10
 8001c32:	2064      	movs	r0, #100	@ 0x64
 8001c34:	f00b fb7c 	bl	800d330 <rmw_uros_ping_agent>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <handle_state_agent_waiting+0x16>
 8001c3e:	2201      	movs	r2, #1
 8001c40:	e000      	b.n	8001c44 <handle_state_agent_waiting+0x18>
 8001c42:	2200      	movs	r2, #0
 8001c44:	4b01      	ldr	r3, [pc, #4]	@ (8001c4c <handle_state_agent_waiting+0x20>)
 8001c46:	701a      	strb	r2, [r3, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000300 	.word	0x20000300

08001c50 <handle_state_agent_available>:
void handle_state_agent_available(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  uros_create_entities();
 8001c54:	f000 f870 	bl	8001d38 <uros_create_entities>
  status = AGENT_CONNECTED;
 8001c58:	4b02      	ldr	r3, [pc, #8]	@ (8001c64 <handle_state_agent_available+0x14>)
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	701a      	strb	r2, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000300 	.word	0x20000300

08001c68 <handle_state_agent_connected>:
void handle_state_agent_connected(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(20, 5) == RMW_RET_OK){
 8001c6c:	2105      	movs	r1, #5
 8001c6e:	2014      	movs	r0, #20
 8001c70:	f00b fb5e 	bl	800d330 <rmw_uros_ping_agent>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d009      	beq.n	8001c98 <handle_state_agent_connected+0x30>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(50));
 8001c84:	a30f      	add	r3, pc, #60	@ (adr r3, 8001cc4 <handle_state_agent_connected+0x5c>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	480b      	ldr	r0, [pc, #44]	@ (8001cb8 <handle_state_agent_connected+0x50>)
 8001c8c:	f00a fdde 	bl	800c84c <rclc_executor_spin_some>
    ping_fail_count = 0; // Reset ping fail count
 8001c90:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <handle_state_agent_connected+0x54>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
    ping_fail_count++;
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_TRYING;
    }
  }
}
 8001c96:	e00b      	b.n	8001cb0 <handle_state_agent_connected+0x48>
    ping_fail_count++;
 8001c98:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <handle_state_agent_connected+0x54>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a07      	ldr	r2, [pc, #28]	@ (8001cbc <handle_state_agent_connected+0x54>)
 8001ca0:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <handle_state_agent_connected+0x54>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	dd02      	ble.n	8001cb0 <handle_state_agent_connected+0x48>
      status = AGENT_TRYING;
 8001caa:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <handle_state_agent_connected+0x58>)
 8001cac:	2203      	movs	r2, #3
 8001cae:	701a      	strb	r2, [r3, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	20000278 	.word	0x20000278
 8001cbc:	20000304 	.word	0x20000304
 8001cc0:	20000300 	.word	0x20000300
 8001cc4:	02faf080 	.word	0x02faf080
 8001cc8:	00000000 	.word	0x00000000

08001ccc <handle_state_agent_trying>:
void handle_state_agent_trying(void) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(50, 10) == RMW_RET_OK){
 8001cd0:	210a      	movs	r1, #10
 8001cd2:	2032      	movs	r0, #50	@ 0x32
 8001cd4:	f00b fb2c 	bl	800d330 <rmw_uros_ping_agent>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf0c      	ite	eq
 8001cde:	2301      	moveq	r3, #1
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <handle_state_agent_trying+0x2a>
    status = AGENT_CONNECTED;
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <handle_state_agent_trying+0x4c>)
 8001cea:	2202      	movs	r2, #2
 8001cec:	701a      	strb	r2, [r3, #0]
    ping_fail_count = 0; // Reset ping fail count
 8001cee:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <handle_state_agent_trying+0x50>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_DISCONNECTED;
      ping_fail_count = 0;
    }
  }
}
 8001cf4:	e00e      	b.n	8001d14 <handle_state_agent_trying+0x48>
    ping_fail_count++;
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <handle_state_agent_trying+0x50>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	4a07      	ldr	r2, [pc, #28]	@ (8001d1c <handle_state_agent_trying+0x50>)
 8001cfe:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <handle_state_agent_trying+0x50>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	dd05      	ble.n	8001d14 <handle_state_agent_trying+0x48>
      status = AGENT_DISCONNECTED;
 8001d08:	4b03      	ldr	r3, [pc, #12]	@ (8001d18 <handle_state_agent_trying+0x4c>)
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	701a      	strb	r2, [r3, #0]
      ping_fail_count = 0;
 8001d0e:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <handle_state_agent_trying+0x50>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000300 	.word	0x20000300
 8001d1c:	20000304 	.word	0x20000304

08001d20 <handle_state_agent_disconnected>:
void handle_state_agent_disconnected(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  uros_destroy_entities();
 8001d24:	f000 f8a0 	bl	8001e68 <uros_destroy_entities>
  status = AGENT_WAITING;
 8001d28:	4b02      	ldr	r3, [pc, #8]	@ (8001d34 <handle_state_agent_disconnected+0x14>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000300 	.word	0x20000300

08001d38 <uros_create_entities>:


void uros_create_entities(void) {
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af02      	add	r7, sp, #8
  allocator = rcl_get_default_allocator();
 8001d3e:	4c3a      	ldr	r4, [pc, #232]	@ (8001e28 <uros_create_entities+0xf0>)
 8001d40:	463b      	mov	r3, r7
 8001d42:	4618      	mov	r0, r3
 8001d44:	f00a ff22 	bl	800cb8c <rcutils_get_default_allocator>
 8001d48:	4625      	mov	r5, r4
 8001d4a:	463c      	mov	r4, r7
 8001d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	602b      	str	r3, [r5, #0]

  init_options = rcl_get_zero_initialized_init_options();
 8001d54:	f008 ff12 	bl	800ab7c <rcl_get_zero_initialized_init_options>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a34      	ldr	r2, [pc, #208]	@ (8001e2c <uros_create_entities+0xf4>)
 8001d5c:	6013      	str	r3, [r2, #0]
  rcl_init_options_init(&init_options, allocator);
 8001d5e:	4b32      	ldr	r3, [pc, #200]	@ (8001e28 <uros_create_entities+0xf0>)
 8001d60:	466c      	mov	r4, sp
 8001d62:	f103 020c 	add.w	r2, r3, #12
 8001d66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d6a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d70:	482e      	ldr	r0, [pc, #184]	@ (8001e2c <uros_create_entities+0xf4>)
 8001d72:	f008 ff05 	bl	800ab80 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, DOMAIN_ID);
 8001d76:	2100      	movs	r1, #0
 8001d78:	482c      	ldr	r0, [pc, #176]	@ (8001e2c <uros_create_entities+0xf4>)
 8001d7a:	f008 fffd 	bl	800ad78 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator); // Initialize support structure
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e28 <uros_create_entities+0xf0>)
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	4b2a      	ldr	r3, [pc, #168]	@ (8001e2c <uros_create_entities+0xf4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	4829      	ldr	r0, [pc, #164]	@ (8001e30 <uros_create_entities+0xf8>)
 8001d8a:	f00a fd99 	bl	800c8c0 <rclc_support_init_with_options>

  rcl_init_options_fini(&init_options);
 8001d8e:	4827      	ldr	r0, [pc, #156]	@ (8001e2c <uros_create_entities+0xf4>)
 8001d90:	f008 ff5c 	bl	800ac4c <rcl_init_options_fini>
  
  rclc_node_init_default(&node, NODE_NAME, "", &support);                       // Initialize node
 8001d94:	4b26      	ldr	r3, [pc, #152]	@ (8001e30 <uros_create_entities+0xf8>)
 8001d96:	4a27      	ldr	r2, [pc, #156]	@ (8001e34 <uros_create_entities+0xfc>)
 8001d98:	4927      	ldr	r1, [pc, #156]	@ (8001e38 <uros_create_entities+0x100>)
 8001d9a:	4828      	ldr	r0, [pc, #160]	@ (8001e3c <uros_create_entities+0x104>)
 8001d9c:	f00a fdee 	bl	800c97c <rclc_node_init_default>

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 8001da0:	f00c fe42 	bl	800ea28 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <uros_create_entities+0x108>)
 8001da8:	4924      	ldr	r1, [pc, #144]	@ (8001e3c <uros_create_entities+0x104>)
 8001daa:	4826      	ldr	r0, [pc, #152]	@ (8001e44 <uros_create_entities+0x10c>)
 8001dac:	f00a fe22 	bl	800c9f4 <rclc_publisher_init_default>
    &arm_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/arm_status");
  arm_msg.data = -1;
 8001db0:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <uros_create_entities+0x110>)
 8001db2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001db6:	601a      	str	r2, [r3, #0]

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 8001db8:	4822      	ldr	r0, [pc, #136]	@ (8001e44 <uros_create_entities+0x10c>)
 8001dba:	f009 fad5 	bl	800b368 <rcl_publisher_get_rmw_handle>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	210a      	movs	r1, #10
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f00c faa6 	bl	800e314 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&arm_pub),
    10);

  rclc_subscription_init_default(                                               // Initialize subscriber for arm command
 8001dc8:	f00c fe2e 	bl	800ea28 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <uros_create_entities+0x114>)
 8001dd0:	491a      	ldr	r1, [pc, #104]	@ (8001e3c <uros_create_entities+0x104>)
 8001dd2:	481f      	ldr	r0, [pc, #124]	@ (8001e50 <uros_create_entities+0x118>)
 8001dd4:	f00a fe42 	bl	800ca5c <rclc_subscription_init_default>
    &cmd_arm_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/cmd_arm");
  cmd_arm_msg.data = -1;
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e54 <uros_create_entities+0x11c>)
 8001dda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dde:	601a      	str	r2, [r3, #0]

  rclc_timer_init_default(                                                      // Initialize timer for publishing pose
 8001de0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e58 <uros_create_entities+0x120>)
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001e20 <uros_create_entities+0xe8>)
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	4911      	ldr	r1, [pc, #68]	@ (8001e30 <uros_create_entities+0xf8>)
 8001dec:	481b      	ldr	r0, [pc, #108]	@ (8001e5c <uros_create_entities+0x124>)
 8001dee:	f00a fe69 	bl	800cac4 <rclc_timer_init_default>
    &pub_timer,
    &support,
    RCL_MS_TO_NS(100),
    pub_timer_cb);

  rclc_executor_init(&executor, &support.context, 2, &allocator);               // Create executor (1 timer + 2 subscriptions)
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <uros_create_entities+0xf0>)
 8001df4:	2202      	movs	r2, #2
 8001df6:	490e      	ldr	r1, [pc, #56]	@ (8001e30 <uros_create_entities+0xf8>)
 8001df8:	4819      	ldr	r0, [pc, #100]	@ (8001e60 <uros_create_entities+0x128>)
 8001dfa:	f00a fa39 	bl	800c270 <rclc_executor_init>
  rclc_executor_add_subscription(&executor, &cmd_arm_sub, &cmd_arm_msg, &cmd_arm_sub_cb, ON_NEW_DATA); // Add arm subscriber to executor
 8001dfe:	2300      	movs	r3, #0
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <uros_create_entities+0x12c>)
 8001e04:	4a13      	ldr	r2, [pc, #76]	@ (8001e54 <uros_create_entities+0x11c>)
 8001e06:	4912      	ldr	r1, [pc, #72]	@ (8001e50 <uros_create_entities+0x118>)
 8001e08:	4815      	ldr	r0, [pc, #84]	@ (8001e60 <uros_create_entities+0x128>)
 8001e0a:	f00a fad5 	bl	800c3b8 <rclc_executor_add_subscription>
  rclc_executor_add_timer(&executor, &pub_timer); // Add pose publisher timer to executor
 8001e0e:	4913      	ldr	r1, [pc, #76]	@ (8001e5c <uros_create_entities+0x124>)
 8001e10:	4813      	ldr	r0, [pc, #76]	@ (8001e60 <uros_create_entities+0x128>)
 8001e12:	f00a fb05 	bl	800c420 <rclc_executor_add_timer>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	05f5e100 	.word	0x05f5e100
 8001e24:	00000000 	.word	0x00000000
 8001e28:	20000258 	.word	0x20000258
 8001e2c:	20000274 	.word	0x20000274
 8001e30:	20000224 	.word	0x20000224
 8001e34:	080193e8 	.word	0x080193e8
 8001e38:	080193ec 	.word	0x080193ec
 8001e3c:	2000026c 	.word	0x2000026c
 8001e40:	080193fc 	.word	0x080193fc
 8001e44:	20000210 	.word	0x20000210
 8001e48:	20000214 	.word	0x20000214
 8001e4c:	08019410 	.word	0x08019410
 8001e50:	20000218 	.word	0x20000218
 8001e54:	2000021c 	.word	0x2000021c
 8001e58:	08001ef9 	.word	0x08001ef9
 8001e5c:	20000220 	.word	0x20000220
 8001e60:	20000278 	.word	0x20000278
 8001e64:	08001ec9 	.word	0x08001ec9

08001e68 <uros_destroy_entities>:
void uros_destroy_entities(void) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  rmw_context_t* rmw_context = rcl_context_get_rmw_context(&support.context);
 8001e6e:	4810      	ldr	r0, [pc, #64]	@ (8001eb0 <uros_destroy_entities+0x48>)
 8001e70:	f008 fe0a 	bl	800aa88 <rcl_context_get_rmw_context>
 8001e74:	6078      	str	r0, [r7, #4]
  (void) rmw_uros_set_context_entity_destroy_session_timeout(rmw_context, 0);
 8001e76:	2100      	movs	r1, #0
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f00c fa53 	bl	800e324 <rmw_uros_set_context_entity_destroy_session_timeout>

  // Destroy publisher
  rcl_publisher_fini(&arm_pub, &node);
 8001e7e:	490d      	ldr	r1, [pc, #52]	@ (8001eb4 <uros_destroy_entities+0x4c>)
 8001e80:	480d      	ldr	r0, [pc, #52]	@ (8001eb8 <uros_destroy_entities+0x50>)
 8001e82:	f009 f9f3 	bl	800b26c <rcl_publisher_fini>

  // Destroy subscription
  rcl_subscription_fini(&cmd_arm_sub, &node);
 8001e86:	490b      	ldr	r1, [pc, #44]	@ (8001eb4 <uros_destroy_entities+0x4c>)
 8001e88:	480c      	ldr	r0, [pc, #48]	@ (8001ebc <uros_destroy_entities+0x54>)
 8001e8a:	f009 fb43 	bl	800b514 <rcl_subscription_fini>

  // Destroy timer
  rcl_timer_fini(&pub_timer);
 8001e8e:	480c      	ldr	r0, [pc, #48]	@ (8001ec0 <uros_destroy_entities+0x58>)
 8001e90:	f009 fd74 	bl	800b97c <rcl_timer_fini>

  // Destroy executor
  rclc_executor_fini(&executor);
 8001e94:	480b      	ldr	r0, [pc, #44]	@ (8001ec4 <uros_destroy_entities+0x5c>)
 8001e96:	f00a fa5b 	bl	800c350 <rclc_executor_fini>

  // Destroy node
  rcl_node_fini(&node);
 8001e9a:	4806      	ldr	r0, [pc, #24]	@ (8001eb4 <uros_destroy_entities+0x4c>)
 8001e9c:	f009 f8c4 	bl	800b028 <rcl_node_fini>
  rclc_support_fini(&support);
 8001ea0:	4803      	ldr	r0, [pc, #12]	@ (8001eb0 <uros_destroy_entities+0x48>)
 8001ea2:	f00a fd41 	bl	800c928 <rclc_support_fini>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000224 	.word	0x20000224
 8001eb4:	2000026c 	.word	0x2000026c
 8001eb8:	20000210 	.word	0x20000210
 8001ebc:	20000218 	.word	0x20000218
 8001ec0:	20000220 	.word	0x20000220
 8001ec4:	20000278 	.word	0x20000278

08001ec8 <cmd_arm_sub_cb>:


void cmd_arm_sub_cb(const void* msgin) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	60fb      	str	r3, [r7, #12]
  cmd_arm_msg = *msg;
 8001ed4:	4a06      	ldr	r2, [pc, #24]	@ (8001ef0 <cmd_arm_sub_cb+0x28>)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6013      	str	r3, [r2, #0]
  mission_type = cmd_arm_msg.data;
 8001edc:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <cmd_arm_sub_cb+0x28>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <cmd_arm_sub_cb+0x2c>)
 8001ee2:	6013      	str	r3, [r2, #0]
  mission_ctrl();
 8001ee4:	f7ff fd2e 	bl	8001944 <mission_ctrl>
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000021c 	.word	0x2000021c
 8001ef4:	20000200 	.word	0x20000200

08001ef8 <pub_timer_cb>:

void pub_timer_cb(rcl_timer_t * timer, int64_t last_call_time){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	e9c7 2300 	strd	r2, r3, [r7]
  arm_msg.data = mission_status;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <pub_timer_cb+0x28>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <pub_timer_cb+0x2c>)
 8001f0a:	6013      	str	r3, [r2, #0]
	rcl_publish(&arm_pub, &arm_msg, NULL);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4905      	ldr	r1, [pc, #20]	@ (8001f24 <pub_timer_cb+0x2c>)
 8001f10:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <pub_timer_cb+0x30>)
 8001f12:	f009 fa05 	bl	800b320 <rcl_publish>
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000208 	.word	0x20000208
 8001f24:	20000214 	.word	0x20000214
 8001f28:	20000210 	.word	0x20000210

08001f2c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	@ 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001f38:	f007 f8fa 	bl	8009130 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001f3c:	4b5a      	ldr	r3, [pc, #360]	@ (80020a8 <pvPortMallocMicroROS+0x17c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001f44:	f000 f986 	bl	8002254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001f48:	4b58      	ldr	r3, [pc, #352]	@ (80020ac <pvPortMallocMicroROS+0x180>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f040 8090 	bne.w	8002076 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01e      	beq.n	8001f9a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d015      	beq.n	8001f9a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f023 0307 	bic.w	r3, r3, #7
 8001f74:	3308      	adds	r3, #8
 8001f76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	e7fd      	b.n	8001f96 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d06a      	beq.n	8002076 <pvPortMallocMicroROS+0x14a>
 8001fa0:	4b43      	ldr	r3, [pc, #268]	@ (80020b0 <pvPortMallocMicroROS+0x184>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d865      	bhi.n	8002076 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001faa:	4b42      	ldr	r3, [pc, #264]	@ (80020b4 <pvPortMallocMicroROS+0x188>)
 8001fac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001fae:	4b41      	ldr	r3, [pc, #260]	@ (80020b4 <pvPortMallocMicroROS+0x188>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001fb4:	e004      	b.n	8001fc0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d903      	bls.n	8001fd2 <pvPortMallocMicroROS+0xa6>
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f1      	bne.n	8001fb6 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001fd2:	4b35      	ldr	r3, [pc, #212]	@ (80020a8 <pvPortMallocMicroROS+0x17c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d04c      	beq.n	8002076 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	4413      	add	r3, r2
 8001fe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	1ad2      	subs	r2, r2, r3
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d920      	bls.n	8002040 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00b      	beq.n	8002028 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8002010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	613b      	str	r3, [r7, #16]
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	1ad2      	subs	r2, r2, r3
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800203a:	69b8      	ldr	r0, [r7, #24]
 800203c:	f000 f96c 	bl	8002318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002040:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <pvPortMallocMicroROS+0x184>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	4a19      	ldr	r2, [pc, #100]	@ (80020b0 <pvPortMallocMicroROS+0x184>)
 800204c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800204e:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <pvPortMallocMicroROS+0x184>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <pvPortMallocMicroROS+0x18c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d203      	bcs.n	8002062 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <pvPortMallocMicroROS+0x184>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a16      	ldr	r2, [pc, #88]	@ (80020b8 <pvPortMallocMicroROS+0x18c>)
 8002060:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <pvPortMallocMicroROS+0x180>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	431a      	orrs	r2, r3
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002076:	f007 f869 	bl	800914c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00b      	beq.n	800209c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002088:	f383 8811 	msr	BASEPRI, r3
 800208c:	f3bf 8f6f 	isb	sy
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	60fb      	str	r3, [r7, #12]
}
 8002096:	bf00      	nop
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800209c:	69fb      	ldr	r3, [r7, #28]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3728      	adds	r7, #40	@ 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20003f10 	.word	0x20003f10
 80020ac:	20003f1c 	.word	0x20003f1c
 80020b0:	20003f14 	.word	0x20003f14
 80020b4:	20003f08 	.word	0x20003f08
 80020b8:	20003f18 	.word	0x20003f18

080020bc <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d04a      	beq.n	8002164 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80020ce:	2308      	movs	r3, #8
 80020d0:	425b      	negs	r3, r3
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4413      	add	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	4b22      	ldr	r3, [pc, #136]	@ (800216c <vPortFreeMicroROS+0xb0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10b      	bne.n	8002102 <vPortFreeMicroROS+0x46>
	__asm volatile
 80020ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ee:	f383 8811 	msr	BASEPRI, r3
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	60fb      	str	r3, [r7, #12]
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	e7fd      	b.n	80020fe <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <vPortFreeMicroROS+0x66>
	__asm volatile
 800210a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800210e:	f383 8811 	msr	BASEPRI, r3
 8002112:	f3bf 8f6f 	isb	sy
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	60bb      	str	r3, [r7, #8]
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	e7fd      	b.n	800211e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <vPortFreeMicroROS+0xb0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d019      	beq.n	8002164 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d115      	bne.n	8002164 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <vPortFreeMicroROS+0xb0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002148:	f006 fff2 	bl	8009130 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <vPortFreeMicroROS+0xb4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4413      	add	r3, r2
 8002156:	4a06      	ldr	r2, [pc, #24]	@ (8002170 <vPortFreeMicroROS+0xb4>)
 8002158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800215a:	6938      	ldr	r0, [r7, #16]
 800215c:	f000 f8dc 	bl	8002318 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002160:	f006 fff4 	bl	800914c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002164:	bf00      	nop
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20003f1c 	.word	0x20003f1c
 8002170:	20003f14 	.word	0x20003f14

08002174 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002180:	2308      	movs	r3, #8
 8002182:	425b      	negs	r3, r3
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4413      	add	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <getBlockSize+0x38>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	43db      	mvns	r3, r3
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

	return count;
 800219c:	68fb      	ldr	r3, [r7, #12]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20003f1c 	.word	0x20003f1c

080021b0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80021ba:	f006 ffb9 	bl	8009130 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80021be:	6838      	ldr	r0, [r7, #0]
 80021c0:	f7ff feb4 	bl	8001f2c <pvPortMallocMicroROS>
 80021c4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d017      	beq.n	80021fc <pvPortReallocMicroROS+0x4c>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d014      	beq.n	80021fc <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ffce 	bl	8002174 <getBlockSize>
 80021d8:	4603      	mov	r3, r0
 80021da:	2208      	movs	r2, #8
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d201      	bcs.n	80021ec <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	68b8      	ldr	r0, [r7, #8]
 80021f2:	f016 f9e2 	bl	80185ba <memcpy>

		vPortFreeMicroROS(pv);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff60 	bl	80020bc <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80021fc:	f006 ffa6 	bl	800914c <xTaskResumeAll>

	return newmem;
 8002200:	68bb      	ldr	r3, [r7, #8]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002214:	f006 ff8c 	bl	8009130 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff fe82 	bl	8001f2c <pvPortMallocMicroROS>
 8002228:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800222e:	e004      	b.n	800223a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	613a      	str	r2, [r7, #16]
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	1e5a      	subs	r2, r3, #1
 800223e:	617a      	str	r2, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f5      	bne.n	8002230 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002244:	f006 ff82 	bl	800914c <xTaskResumeAll>
  	return mem;
 8002248:	68fb      	ldr	r3, [r7, #12]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800225a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800225e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002260:	4b27      	ldr	r3, [pc, #156]	@ (8002300 <prvHeapInit+0xac>)
 8002262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00c      	beq.n	8002288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3307      	adds	r3, #7
 8002272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0307 	bic.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	4a1f      	ldr	r2, [pc, #124]	@ (8002300 <prvHeapInit+0xac>)
 8002284:	4413      	add	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800228c:	4a1d      	ldr	r2, [pc, #116]	@ (8002304 <prvHeapInit+0xb0>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002292:	4b1c      	ldr	r3, [pc, #112]	@ (8002304 <prvHeapInit+0xb0>)
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	4413      	add	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80022a0:	2208      	movs	r2, #8
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 0307 	bic.w	r3, r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a15      	ldr	r2, [pc, #84]	@ (8002308 <prvHeapInit+0xb4>)
 80022b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80022b6:	4b14      	ldr	r3, [pc, #80]	@ (8002308 <prvHeapInit+0xb4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80022be:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <prvHeapInit+0xb4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	1ad2      	subs	r2, r2, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <prvHeapInit+0xb4>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	@ (800230c <prvHeapInit+0xb8>)
 80022e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4a09      	ldr	r2, [pc, #36]	@ (8002310 <prvHeapInit+0xbc>)
 80022ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80022ec:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <prvHeapInit+0xc0>)
 80022ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	20000308 	.word	0x20000308
 8002304:	20003f08 	.word	0x20003f08
 8002308:	20003f10 	.word	0x20003f10
 800230c:	20003f18 	.word	0x20003f18
 8002310:	20003f14 	.word	0x20003f14
 8002314:	20003f1c 	.word	0x20003f1c

08002318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002320:	4b28      	ldr	r3, [pc, #160]	@ (80023c4 <prvInsertBlockIntoFreeList+0xac>)
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	e002      	b.n	800232c <prvInsertBlockIntoFreeList+0x14>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d8f7      	bhi.n	8002326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	4413      	add	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d108      	bne.n	800235a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	441a      	add	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	441a      	add	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d118      	bne.n	80023a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <prvInsertBlockIntoFreeList+0xb0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d00d      	beq.n	8002396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	441a      	add	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e008      	b.n	80023a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002396:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <prvInsertBlockIntoFreeList+0xb0>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	e003      	b.n	80023a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d002      	beq.n	80023b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20003f08 	.word	0x20003f08
 80023c8:	20003f10 	.word	0x20003f10

080023cc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80023da:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80023dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023e0:	4904      	ldr	r1, [pc, #16]	@ (80023f4 <cubemx_transport_open+0x28>)
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f004 fa94 	bl	8006910 <HAL_UART_Receive_DMA>
    return true;
 80023e8:	2301      	movs	r3, #1
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20003f20 	.word	0x20003f20

080023f8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002406:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f004 faa6 	bl	800695a <HAL_UART_DMAStop>
    return true;
 800240e:	2301      	movs	r3, #1
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800242c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	d11c      	bne.n	8002474 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	b29b      	uxth	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	6978      	ldr	r0, [r7, #20]
 8002444:	f004 f9e8 	bl	8006818 <HAL_UART_Transmit_DMA>
 8002448:	4603      	mov	r3, r0
 800244a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800244c:	e002      	b.n	8002454 <cubemx_transport_write+0x3c>
            osDelay(1);
 800244e:	2001      	movs	r0, #1
 8002450:	f005 fd98 	bl	8007f84 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <cubemx_transport_write+0x4e>
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b20      	cmp	r3, #32
 8002464:	d1f3      	bne.n	800244e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <cubemx_transport_write+0x58>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	e002      	b.n	8002476 <cubemx_transport_write+0x5e>
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002474:	2300      	movs	r3, #0
    }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002494:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800249a:	b672      	cpsid	i
}
 800249c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80024aa:	4a1c      	ldr	r2, [pc, #112]	@ (800251c <cubemx_transport_read+0x9c>)
 80024ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024ae:	b662      	cpsie	i
}
 80024b0:	bf00      	nop
        __enable_irq();
        ms_used++;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3301      	adds	r3, #1
 80024b6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80024b8:	2001      	movs	r0, #1
 80024ba:	f005 fd63 	bl	8007f84 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80024be:	4b18      	ldr	r3, [pc, #96]	@ (8002520 <cubemx_transport_read+0xa0>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <cubemx_transport_read+0x9c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d103      	bne.n	80024d2 <cubemx_transport_read+0x52>
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	dbe3      	blt.n	800249a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80024d6:	e011      	b.n	80024fc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80024d8:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <cubemx_transport_read+0xa0>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	440b      	add	r3, r1
 80024e2:	4910      	ldr	r1, [pc, #64]	@ (8002524 <cubemx_transport_read+0xa4>)
 80024e4:	5c8a      	ldrb	r2, [r1, r2]
 80024e6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80024e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002520 <cubemx_transport_read+0xa0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002520 <cubemx_transport_read+0xa0>)
 80024f4:	6013      	str	r3, [r2, #0]
        wrote++;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80024fc:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <cubemx_transport_read+0xa0>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <cubemx_transport_read+0x9c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d003      	beq.n	8002510 <cubemx_transport_read+0x90>
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	d3e3      	bcc.n	80024d8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002510:	69bb      	ldr	r3, [r7, #24]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20004724 	.word	0x20004724
 8002520:	20004720 	.word	0x20004720
 8002524:	20003f20 	.word	0x20003f20

08002528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800252c:	f001 f930 	bl	8003790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002530:	f000 f826 	bl	8002580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002534:	f000 fa9a 	bl	8002a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8002538:	f000 fa70 	bl	8002a1c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800253c:	f000 fa1a 	bl	8002974 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002540:	f000 f8be 	bl	80026c0 <MX_TIM1_Init>
  MX_TIM5_Init();
 8002544:	f000 f962 	bl	800280c <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8002548:	f000 fa3e 	bl	80029c8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800254c:	f000 f88a 	bl	8002664 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002550:	f000 f90e 	bl	8002770 <MX_TIM4_Init>
  MX_TIM12_Init();
 8002554:	f000 f9be 	bl	80028d4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002558:	f005 fc38 	bl	8007dcc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800255c:	4a05      	ldr	r2, [pc, #20]	@ (8002574 <main+0x4c>)
 800255e:	2100      	movs	r1, #0
 8002560:	4805      	ldr	r0, [pc, #20]	@ (8002578 <main+0x50>)
 8002562:	f005 fc7d 	bl	8007e60 <osThreadNew>
 8002566:	4603      	mov	r3, r0
 8002568:	4a04      	ldr	r2, [pc, #16]	@ (800257c <main+0x54>)
 800256a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800256c:	f005 fc52 	bl	8007e14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <main+0x48>
 8002574:	08019468 	.word	0x08019468
 8002578:	080036c1 	.word	0x080036c1
 800257c:	200049ec 	.word	0x200049ec

08002580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b094      	sub	sp, #80	@ 0x50
 8002584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	2234      	movs	r2, #52	@ 0x34
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f015 feec 	bl	801836c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002594:	f107 0308 	add.w	r3, r7, #8
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	4b2c      	ldr	r3, [pc, #176]	@ (800265c <SystemClock_Config+0xdc>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	4a2b      	ldr	r2, [pc, #172]	@ (800265c <SystemClock_Config+0xdc>)
 80025ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b4:	4b29      	ldr	r3, [pc, #164]	@ (800265c <SystemClock_Config+0xdc>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c0:	2300      	movs	r3, #0
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	4b26      	ldr	r3, [pc, #152]	@ (8002660 <SystemClock_Config+0xe0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a25      	ldr	r2, [pc, #148]	@ (8002660 <SystemClock_Config+0xe0>)
 80025ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b23      	ldr	r3, [pc, #140]	@ (8002660 <SystemClock_Config+0xe0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025dc:	2302      	movs	r3, #2
 80025de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e0:	2301      	movs	r3, #1
 80025e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025e4:	2310      	movs	r3, #16
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e8:	2302      	movs	r3, #2
 80025ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025ec:	2300      	movs	r3, #0
 80025ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025f0:	2308      	movs	r3, #8
 80025f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80025f4:	23b4      	movs	r3, #180	@ 0xb4
 80025f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025f8:	2302      	movs	r3, #2
 80025fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025fc:	2302      	movs	r3, #2
 80025fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002600:	2302      	movs	r3, #2
 8002602:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002604:	f107 031c 	add.w	r3, r7, #28
 8002608:	4618      	mov	r0, r3
 800260a:	f002 fc37 	bl	8004e7c <HAL_RCC_OscConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002614:	f000 fab6 	bl	8002b84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002618:	f002 f8ea 	bl	80047f0 <HAL_PWREx_EnableOverDrive>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002622:	f000 faaf 	bl	8002b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002626:	230f      	movs	r3, #15
 8002628:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800262a:	2302      	movs	r3, #2
 800262c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002632:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800263c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800263e:	f107 0308 	add.w	r3, r7, #8
 8002642:	2105      	movs	r1, #5
 8002644:	4618      	mov	r0, r3
 8002646:	f002 f923 	bl	8004890 <HAL_RCC_ClockConfig>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002650:	f000 fa98 	bl	8002b84 <Error_Handler>
  }
}
 8002654:	bf00      	nop
 8002656:	3750      	adds	r7, #80	@ 0x50
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000

08002664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002668:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <MX_I2C1_Init+0x50>)
 800266a:	4a13      	ldr	r2, [pc, #76]	@ (80026b8 <MX_I2C1_Init+0x54>)
 800266c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800266e:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <MX_I2C1_Init+0x50>)
 8002670:	4a12      	ldr	r2, [pc, #72]	@ (80026bc <MX_I2C1_Init+0x58>)
 8002672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002674:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <MX_I2C1_Init+0x50>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800267a:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <MX_I2C1_Init+0x50>)
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002680:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <MX_I2C1_Init+0x50>)
 8002682:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002688:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <MX_I2C1_Init+0x50>)
 800268a:	2200      	movs	r2, #0
 800268c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800268e:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <MX_I2C1_Init+0x50>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002694:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <MX_I2C1_Init+0x50>)
 8002696:	2200      	movs	r2, #0
 8002698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800269a:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <MX_I2C1_Init+0x50>)
 800269c:	2200      	movs	r2, #0
 800269e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026a0:	4804      	ldr	r0, [pc, #16]	@ (80026b4 <MX_I2C1_Init+0x50>)
 80026a2:	f001 ff61 	bl	8004568 <HAL_I2C_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026ac:	f000 fa6a 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20004728 	.word	0x20004728
 80026b8:	40005400 	.word	0x40005400
 80026bc:	000186a0 	.word	0x000186a0

080026c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	@ 0x30
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026c6:	f107 030c 	add.w	r3, r7, #12
 80026ca:	2224      	movs	r2, #36	@ 0x24
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f015 fe4c 	bl	801836c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026dc:	4b22      	ldr	r3, [pc, #136]	@ (8002768 <MX_TIM1_Init+0xa8>)
 80026de:	4a23      	ldr	r2, [pc, #140]	@ (800276c <MX_TIM1_Init+0xac>)
 80026e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026e2:	4b21      	ldr	r3, [pc, #132]	@ (8002768 <MX_TIM1_Init+0xa8>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002768 <MX_TIM1_Init+0xa8>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <MX_TIM1_Init+0xa8>)
 80026f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002768 <MX_TIM1_Init+0xa8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <MX_TIM1_Init+0xa8>)
 80026fe:	2200      	movs	r2, #0
 8002700:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002702:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <MX_TIM1_Init+0xa8>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002708:	2303      	movs	r3, #3
 800270a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002710:	2301      	movs	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002720:	2301      	movs	r3, #1
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002724:	2300      	movs	r3, #0
 8002726:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	4619      	mov	r1, r3
 8002732:	480d      	ldr	r0, [pc, #52]	@ (8002768 <MX_TIM1_Init+0xa8>)
 8002734:	f003 f818 	bl	8005768 <HAL_TIM_Encoder_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800273e:	f000 fa21 	bl	8002b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4806      	ldr	r0, [pc, #24]	@ (8002768 <MX_TIM1_Init+0xa8>)
 8002750:	f003 fef6 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800275a:	f000 fa13 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800275e:	bf00      	nop
 8002760:	3730      	adds	r7, #48	@ 0x30
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000477c 	.word	0x2000477c
 800276c:	40010000 	.word	0x40010000

08002770 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002784:	463b      	mov	r3, r7
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800278c:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <MX_TIM4_Init+0x94>)
 800278e:	4a1e      	ldr	r2, [pc, #120]	@ (8002808 <MX_TIM4_Init+0x98>)
 8002790:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8002792:	4b1c      	ldr	r3, [pc, #112]	@ (8002804 <MX_TIM4_Init+0x94>)
 8002794:	2259      	movs	r2, #89	@ 0x59
 8002796:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002798:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <MX_TIM4_Init+0x94>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800279e:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <MX_TIM4_Init+0x94>)
 80027a0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80027a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a6:	4b17      	ldr	r3, [pc, #92]	@ (8002804 <MX_TIM4_Init+0x94>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ac:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <MX_TIM4_Init+0x94>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027b2:	4814      	ldr	r0, [pc, #80]	@ (8002804 <MX_TIM4_Init+0x94>)
 80027b4:	f002 fe00 	bl	80053b8 <HAL_TIM_Base_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80027be:	f000 f9e1 	bl	8002b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027c8:	f107 0308 	add.w	r3, r7, #8
 80027cc:	4619      	mov	r1, r3
 80027ce:	480d      	ldr	r0, [pc, #52]	@ (8002804 <MX_TIM4_Init+0x94>)
 80027d0:	f003 fab0 	bl	8005d34 <HAL_TIM_ConfigClockSource>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80027da:	f000 f9d3 	bl	8002b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027e6:	463b      	mov	r3, r7
 80027e8:	4619      	mov	r1, r3
 80027ea:	4806      	ldr	r0, [pc, #24]	@ (8002804 <MX_TIM4_Init+0x94>)
 80027ec:	f003 fea8 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80027f6:	f000 f9c5 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200047c4 	.word	0x200047c4
 8002808:	40000800 	.word	0x40000800

0800280c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	@ 0x28
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002812:	f107 0320 	add.w	r3, r7, #32
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
 8002828:	611a      	str	r2, [r3, #16]
 800282a:	615a      	str	r2, [r3, #20]
 800282c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800282e:	4b27      	ldr	r3, [pc, #156]	@ (80028cc <MX_TIM5_Init+0xc0>)
 8002830:	4a27      	ldr	r2, [pc, #156]	@ (80028d0 <MX_TIM5_Init+0xc4>)
 8002832:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <MX_TIM5_Init+0xc0>)
 8002836:	2259      	movs	r2, #89	@ 0x59
 8002838:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283a:	4b24      	ldr	r3, [pc, #144]	@ (80028cc <MX_TIM5_Init+0xc0>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8002840:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <MX_TIM5_Init+0xc0>)
 8002842:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002846:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002848:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <MX_TIM5_Init+0xc0>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284e:	4b1f      	ldr	r3, [pc, #124]	@ (80028cc <MX_TIM5_Init+0xc0>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002854:	481d      	ldr	r0, [pc, #116]	@ (80028cc <MX_TIM5_Init+0xc0>)
 8002856:	f002 fe6f 	bl	8005538 <HAL_TIM_PWM_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002860:	f000 f990 	bl	8002b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002864:	2300      	movs	r3, #0
 8002866:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800286c:	f107 0320 	add.w	r3, r7, #32
 8002870:	4619      	mov	r1, r3
 8002872:	4816      	ldr	r0, [pc, #88]	@ (80028cc <MX_TIM5_Init+0xc0>)
 8002874:	f003 fe64 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800287e:	f000 f981 	bl	8002b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002882:	2360      	movs	r3, #96	@ 0x60
 8002884:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	2200      	movs	r2, #0
 8002896:	4619      	mov	r1, r3
 8002898:	480c      	ldr	r0, [pc, #48]	@ (80028cc <MX_TIM5_Init+0xc0>)
 800289a:	f003 f989 	bl	8005bb0 <HAL_TIM_PWM_ConfigChannel>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80028a4:	f000 f96e 	bl	8002b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2204      	movs	r2, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4807      	ldr	r0, [pc, #28]	@ (80028cc <MX_TIM5_Init+0xc0>)
 80028b0:	f003 f97e 	bl	8005bb0 <HAL_TIM_PWM_ConfigChannel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80028ba:	f000 f963 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80028be:	4803      	ldr	r0, [pc, #12]	@ (80028cc <MX_TIM5_Init+0xc0>)
 80028c0:	f000 fbe6 	bl	8003090 <HAL_TIM_MspPostInit>

}
 80028c4:	bf00      	nop
 80028c6:	3728      	adds	r7, #40	@ 0x28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	2000480c 	.word	0x2000480c
 80028d0:	40000c00 	.word	0x40000c00

080028d4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
 80028e8:	615a      	str	r2, [r3, #20]
 80028ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80028ec:	4b1f      	ldr	r3, [pc, #124]	@ (800296c <MX_TIM12_Init+0x98>)
 80028ee:	4a20      	ldr	r2, [pc, #128]	@ (8002970 <MX_TIM12_Init+0x9c>)
 80028f0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 90-1;
 80028f2:	4b1e      	ldr	r3, [pc, #120]	@ (800296c <MX_TIM12_Init+0x98>)
 80028f4:	2259      	movs	r2, #89	@ 0x59
 80028f6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f8:	4b1c      	ldr	r3, [pc, #112]	@ (800296c <MX_TIM12_Init+0x98>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 80028fe:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <MX_TIM12_Init+0x98>)
 8002900:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002904:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002906:	4b19      	ldr	r3, [pc, #100]	@ (800296c <MX_TIM12_Init+0x98>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800290c:	4b17      	ldr	r3, [pc, #92]	@ (800296c <MX_TIM12_Init+0x98>)
 800290e:	2200      	movs	r2, #0
 8002910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002912:	4816      	ldr	r0, [pc, #88]	@ (800296c <MX_TIM12_Init+0x98>)
 8002914:	f002 fe10 	bl	8005538 <HAL_TIM_PWM_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800291e:	f000 f931 	bl	8002b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002922:	2360      	movs	r3, #96	@ 0x60
 8002924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	2200      	movs	r2, #0
 8002936:	4619      	mov	r1, r3
 8002938:	480c      	ldr	r0, [pc, #48]	@ (800296c <MX_TIM12_Init+0x98>)
 800293a:	f003 f939 	bl	8005bb0 <HAL_TIM_PWM_ConfigChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002944:	f000 f91e 	bl	8002b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	2204      	movs	r2, #4
 800294c:	4619      	mov	r1, r3
 800294e:	4807      	ldr	r0, [pc, #28]	@ (800296c <MX_TIM12_Init+0x98>)
 8002950:	f003 f92e 	bl	8005bb0 <HAL_TIM_PWM_ConfigChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800295a:	f000 f913 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800295e:	4803      	ldr	r0, [pc, #12]	@ (800296c <MX_TIM12_Init+0x98>)
 8002960:	f000 fb96 	bl	8003090 <HAL_TIM_MspPostInit>

}
 8002964:	bf00      	nop
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20004854 	.word	0x20004854
 8002970:	40001800 	.word	0x40001800

08002974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002978:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <MX_USART2_UART_Init+0x4c>)
 800297a:	4a12      	ldr	r2, [pc, #72]	@ (80029c4 <MX_USART2_UART_Init+0x50>)
 800297c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800297e:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002986:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800298c:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <MX_USART2_UART_Init+0x4c>)
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002992:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002998:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <MX_USART2_UART_Init+0x4c>)
 800299a:	220c      	movs	r2, #12
 800299c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299e:	4b08      	ldr	r3, [pc, #32]	@ (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029aa:	4805      	ldr	r0, [pc, #20]	@ (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029ac:	f003 fe58 	bl	8006660 <HAL_UART_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029b6:	f000 f8e5 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	2000489c 	.word	0x2000489c
 80029c4:	40004400 	.word	0x40004400

080029c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029cc:	4b10      	ldr	r3, [pc, #64]	@ (8002a10 <MX_USART3_UART_Init+0x48>)
 80029ce:	4a11      	ldr	r2, [pc, #68]	@ (8002a14 <MX_USART3_UART_Init+0x4c>)
 80029d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 80029d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a10 <MX_USART3_UART_Init+0x48>)
 80029d4:	4a10      	ldr	r2, [pc, #64]	@ (8002a18 <MX_USART3_UART_Init+0x50>)
 80029d6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a10 <MX_USART3_UART_Init+0x48>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029de:	4b0c      	ldr	r3, [pc, #48]	@ (8002a10 <MX_USART3_UART_Init+0x48>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <MX_USART3_UART_Init+0x48>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029ea:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <MX_USART3_UART_Init+0x48>)
 80029ec:	220c      	movs	r2, #12
 80029ee:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f0:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <MX_USART3_UART_Init+0x48>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <MX_USART3_UART_Init+0x48>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029fc:	4804      	ldr	r0, [pc, #16]	@ (8002a10 <MX_USART3_UART_Init+0x48>)
 80029fe:	f003 fe2f 	bl	8006660 <HAL_UART_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8002a08:	f000 f8bc 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	200048e4 	.word	0x200048e4
 8002a14:	40004800 	.word	0x40004800
 8002a18:	0007a120 	.word	0x0007a120

08002a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <MX_DMA_Init+0x4c>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a68 <MX_DMA_Init+0x4c>)
 8002a2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a32:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <MX_DMA_Init+0x4c>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2105      	movs	r1, #5
 8002a42:	2010      	movs	r0, #16
 8002a44:	f000 ff9e 	bl	8003984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002a48:	2010      	movs	r0, #16
 8002a4a:	f000 ffb7 	bl	80039bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2105      	movs	r1, #5
 8002a52:	2011      	movs	r0, #17
 8002a54:	f000 ff96 	bl	8003984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002a58:	2011      	movs	r0, #17
 8002a5a:	f000 ffaf 	bl	80039bc <HAL_NVIC_EnableIRQ>

}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800

08002a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	@ 0x28
 8002a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <MX_GPIO_Init+0x108>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b74 <MX_GPIO_Init+0x108>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a92:	4b38      	ldr	r3, [pc, #224]	@ (8002b74 <MX_GPIO_Init+0x108>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b34      	ldr	r3, [pc, #208]	@ (8002b74 <MX_GPIO_Init+0x108>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	4a33      	ldr	r2, [pc, #204]	@ (8002b74 <MX_GPIO_Init+0x108>)
 8002aa8:	f043 0304 	orr.w	r3, r3, #4
 8002aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aae:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <MX_GPIO_Init+0x108>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	4b2d      	ldr	r3, [pc, #180]	@ (8002b74 <MX_GPIO_Init+0x108>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b74 <MX_GPIO_Init+0x108>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aca:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <MX_GPIO_Init+0x108>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	4b26      	ldr	r3, [pc, #152]	@ (8002b74 <MX_GPIO_Init+0x108>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	4a25      	ldr	r2, [pc, #148]	@ (8002b74 <MX_GPIO_Init+0x108>)
 8002ae0:	f043 0308 	orr.w	r3, r3, #8
 8002ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae6:	4b23      	ldr	r3, [pc, #140]	@ (8002b74 <MX_GPIO_Init+0x108>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2110      	movs	r1, #16
 8002af6:	4820      	ldr	r0, [pc, #128]	@ (8002b78 <MX_GPIO_Init+0x10c>)
 8002af8:	f001 fd04 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002afc:	2200      	movs	r2, #0
 8002afe:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002b02:	481e      	ldr	r0, [pc, #120]	@ (8002b7c <MX_GPIO_Init+0x110>)
 8002b04:	f001 fcfe 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b08:	2310      	movs	r3, #16
 8002b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4816      	ldr	r0, [pc, #88]	@ (8002b78 <MX_GPIO_Init+0x10c>)
 8002b20:	f001 fb5c 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002b24:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	f107 0314 	add.w	r3, r7, #20
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	480f      	ldr	r0, [pc, #60]	@ (8002b7c <MX_GPIO_Init+0x110>)
 8002b3e:	f001 fb4d 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b42:	2304      	movs	r3, #4
 8002b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b46:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4619      	mov	r1, r3
 8002b56:	480a      	ldr	r0, [pc, #40]	@ (8002b80 <MX_GPIO_Init+0x114>)
 8002b58:	f001 fb40 	bl	80041dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2105      	movs	r1, #5
 8002b60:	2008      	movs	r0, #8
 8002b62:	f000 ff0f 	bl	8003984 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b66:	2008      	movs	r0, #8
 8002b68:	f000 ff28 	bl	80039bc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002b6c:	bf00      	nop
 8002b6e:	3728      	adds	r7, #40	@ 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020800 	.word	0x40020800
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40020c00 	.word	0x40020c00

08002b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b88:	b672      	cpsid	i
}
 8002b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <Error_Handler+0x8>

08002b90 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <microros_allocate+0x3c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <microros_allocate+0x3c>)
 8002ba8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002baa:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <microros_allocate+0x40>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <microros_allocate+0x40>)
 8002bb8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff f9b6 	bl	8001f2c <pvPortMallocMicroROS>
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20007978 	.word	0x20007978
 8002bd0:	2000797c 	.word	0x2000797c

08002bd4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00c      	beq.n	8002bfe <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff fac5 	bl	8002174 <getBlockSize>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4a06      	ldr	r2, [pc, #24]	@ (8002c08 <microros_deallocate+0x34>)
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <microros_deallocate+0x34>)
 8002bf6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff fa5f 	bl	80020bc <vPortFreeMicroROS>
  }
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	2000797c 	.word	0x2000797c

08002c0c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002c18:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <microros_reallocate+0x64>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4413      	add	r3, r2
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <microros_reallocate+0x64>)
 8002c26:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002c28:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <microros_reallocate+0x68>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4413      	add	r3, r2
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b0f      	ldr	r3, [pc, #60]	@ (8002c74 <microros_reallocate+0x68>)
 8002c36:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d104      	bne.n	8002c48 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002c3e:	68b8      	ldr	r0, [r7, #8]
 8002c40:	f7ff f974 	bl	8001f2c <pvPortMallocMicroROS>
 8002c44:	4603      	mov	r3, r0
 8002c46:	e00e      	b.n	8002c66 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff fa93 	bl	8002174 <getBlockSize>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4a08      	ldr	r2, [pc, #32]	@ (8002c74 <microros_reallocate+0x68>)
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <microros_reallocate+0x68>)
 8002c5a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff faa6 	bl	80021b0 <pvPortReallocMicroROS>
 8002c64:	4603      	mov	r3, r0
  }
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20007978 	.word	0x20007978
 8002c74:	2000797c 	.word	0x2000797c

08002c78 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	fb02 f303 	mul.w	r3, r2, r3
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc0 <microros_zero_allocate+0x48>)
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc0 <microros_zero_allocate+0x48>)
 8002c96:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	4a08      	ldr	r2, [pc, #32]	@ (8002cc4 <microros_zero_allocate+0x4c>)
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <microros_zero_allocate+0x4c>)
 8002caa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff faab 	bl	800220a <pvPortCallocMicroROS>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20007978 	.word	0x20007978
 8002cc4:	2000797c 	.word	0x2000797c

08002cc8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002cc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002cda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cde:	a320      	add	r3, pc, #128	@ (adr r3, 8002d60 <UTILS_NanosecondsToTimespec+0x98>)
 8002ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce4:	f7fd ff1a 	bl	8000b1c <__aeabi_ldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002cf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cf6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002d60 <UTILS_NanosecondsToTimespec+0x98>)
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f7fd ff0e 	bl	8000b1c <__aeabi_ldivmod>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	da20      	bge.n	8002d4e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4a11      	ldr	r2, [pc, #68]	@ (8002d58 <UTILS_NanosecondsToTimespec+0x90>)
 8002d12:	fb82 1203 	smull	r1, r2, r2, r3
 8002d16:	1712      	asrs	r2, r2, #28
 8002d18:	17db      	asrs	r3, r3, #31
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	6979      	ldr	r1, [r7, #20]
 8002d28:	17c8      	asrs	r0, r1, #31
 8002d2a:	460c      	mov	r4, r1
 8002d2c:	4605      	mov	r5, r0
 8002d2e:	ebb2 0804 	subs.w	r8, r2, r4
 8002d32:	eb63 0905 	sbc.w	r9, r3, r5
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	4906      	ldr	r1, [pc, #24]	@ (8002d5c <UTILS_NanosecondsToTimespec+0x94>)
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	441a      	add	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
    }
}
 8002d4e:	bf00      	nop
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d58:	44b82fa1 	.word	0x44b82fa1
 8002d5c:	3b9aca00 	.word	0x3b9aca00
 8002d60:	3b9aca00 	.word	0x3b9aca00
 8002d64:	00000000 	.word	0x00000000

08002d68 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d6c:	b08e      	sub	sp, #56	@ 0x38
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6278      	str	r0, [r7, #36]	@ 0x24
 8002d72:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002d74:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002d8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f006 fc60 	bl	8009654 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d96:	17da      	asrs	r2, r3, #31
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	61fa      	str	r2, [r7, #28]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	69b9      	ldr	r1, [r7, #24]
 8002da6:	000b      	movs	r3, r1
 8002da8:	2200      	movs	r2, #0
 8002daa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db0:	2200      	movs	r2, #0
 8002db2:	461c      	mov	r4, r3
 8002db4:	4615      	mov	r5, r2
 8002db6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002dba:	1911      	adds	r1, r2, r4
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	416b      	adcs	r3, r5
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002dc6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002dca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	f04f 0400 	mov.w	r4, #0
 8002dd6:	f04f 0500 	mov.w	r5, #0
 8002dda:	015d      	lsls	r5, r3, #5
 8002ddc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002de0:	0154      	lsls	r4, r2, #5
 8002de2:	4622      	mov	r2, r4
 8002de4:	462b      	mov	r3, r5
 8002de6:	ebb2 0800 	subs.w	r8, r2, r0
 8002dea:	eb63 0901 	sbc.w	r9, r3, r1
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002dfa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002dfe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002e02:	4690      	mov	r8, r2
 8002e04:	4699      	mov	r9, r3
 8002e06:	eb18 0a00 	adds.w	sl, r8, r0
 8002e0a:	eb49 0b01 	adc.w	fp, r9, r1
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e1a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e1e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e22:	ebb2 040a 	subs.w	r4, r2, sl
 8002e26:	603c      	str	r4, [r7, #0]
 8002e28:	eb63 030b 	sbc.w	r3, r3, fp
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e32:	4623      	mov	r3, r4
 8002e34:	181b      	adds	r3, r3, r0
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	462b      	mov	r3, r5
 8002e3a:	eb41 0303 	adc.w	r3, r1, r3
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	6a3a      	ldr	r2, [r7, #32]
 8002e42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e46:	f7ff ff3f 	bl	8002cc8 <UTILS_NanosecondsToTimespec>

    return 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3738      	adds	r7, #56	@ 0x38
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <HAL_MspInit+0x54>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e66:	4a11      	ldr	r2, [pc, #68]	@ (8002eac <HAL_MspInit+0x54>)
 8002e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002eac <HAL_MspInit+0x54>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <HAL_MspInit+0x54>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	4a0a      	ldr	r2, [pc, #40]	@ (8002eac <HAL_MspInit+0x54>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e8a:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <HAL_MspInit+0x54>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	210f      	movs	r1, #15
 8002e9a:	f06f 0001 	mvn.w	r0, #1
 8002e9e:	f000 fd71 	bl	8003984 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800

08002eb0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	@ 0x28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a19      	ldr	r2, [pc, #100]	@ (8002f34 <HAL_I2C_MspInit+0x84>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d12b      	bne.n	8002f2a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	4b18      	ldr	r3, [pc, #96]	@ (8002f38 <HAL_I2C_MspInit+0x88>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	4a17      	ldr	r2, [pc, #92]	@ (8002f38 <HAL_I2C_MspInit+0x88>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee2:	4b15      	ldr	r3, [pc, #84]	@ (8002f38 <HAL_I2C_MspInit+0x88>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eee:	23c0      	movs	r3, #192	@ 0xc0
 8002ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef2:	2312      	movs	r3, #18
 8002ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002efe:	2304      	movs	r3, #4
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	4619      	mov	r1, r3
 8002f08:	480c      	ldr	r0, [pc, #48]	@ (8002f3c <HAL_I2C_MspInit+0x8c>)
 8002f0a:	f001 f967 	bl	80041dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <HAL_I2C_MspInit+0x88>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	4a08      	ldr	r2, [pc, #32]	@ (8002f38 <HAL_I2C_MspInit+0x88>)
 8002f18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f1e:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <HAL_I2C_MspInit+0x88>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002f2a:	bf00      	nop
 8002f2c:	3728      	adds	r7, #40	@ 0x28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40005400 	.word	0x40005400
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40020400 	.word	0x40020400

08002f40 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	@ 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a19      	ldr	r2, [pc, #100]	@ (8002fc4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d12c      	bne.n	8002fbc <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	4b18      	ldr	r3, [pc, #96]	@ (8002fc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	4a17      	ldr	r2, [pc, #92]	@ (8002fc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f72:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	4a10      	ldr	r2, [pc, #64]	@ (8002fc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fac:	2301      	movs	r3, #1
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4805      	ldr	r0, [pc, #20]	@ (8002fcc <HAL_TIM_Encoder_MspInit+0x8c>)
 8002fb8:	f001 f910 	bl	80041dc <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002fbc:	bf00      	nop
 8002fbe:	3728      	adds	r7, #40	@ 0x28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40010000 	.word	0x40010000
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020000 	.word	0x40020000

08002fd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a0e      	ldr	r2, [pc, #56]	@ (8003018 <HAL_TIM_Base_MspInit+0x48>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d115      	bne.n	800300e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800301c <HAL_TIM_Base_MspInit+0x4c>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	4a0c      	ldr	r2, [pc, #48]	@ (800301c <HAL_TIM_Base_MspInit+0x4c>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <HAL_TIM_Base_MspInit+0x4c>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2105      	movs	r1, #5
 8003002:	201e      	movs	r0, #30
 8003004:	f000 fcbe 	bl	8003984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003008:	201e      	movs	r0, #30
 800300a:	f000 fcd7 	bl	80039bc <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40000800 	.word	0x40000800
 800301c:	40023800 	.word	0x40023800

08003020 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a15      	ldr	r2, [pc, #84]	@ (8003084 <HAL_TIM_PWM_MspInit+0x64>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d10e      	bne.n	8003050 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	4b14      	ldr	r3, [pc, #80]	@ (8003088 <HAL_TIM_PWM_MspInit+0x68>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	4a13      	ldr	r2, [pc, #76]	@ (8003088 <HAL_TIM_PWM_MspInit+0x68>)
 800303c:	f043 0308 	orr.w	r3, r3, #8
 8003040:	6413      	str	r3, [r2, #64]	@ 0x40
 8003042:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <HAL_TIM_PWM_MspInit+0x68>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 800304e:	e012      	b.n	8003076 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0d      	ldr	r2, [pc, #52]	@ (800308c <HAL_TIM_PWM_MspInit+0x6c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10d      	bne.n	8003076 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	4b0a      	ldr	r3, [pc, #40]	@ (8003088 <HAL_TIM_PWM_MspInit+0x68>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	4a09      	ldr	r2, [pc, #36]	@ (8003088 <HAL_TIM_PWM_MspInit+0x68>)
 8003064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003068:	6413      	str	r3, [r2, #64]	@ 0x40
 800306a:	4b07      	ldr	r3, [pc, #28]	@ (8003088 <HAL_TIM_PWM_MspInit+0x68>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40000c00 	.word	0x40000c00
 8003088:	40023800 	.word	0x40023800
 800308c:	40001800 	.word	0x40001800

08003090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	@ 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a24      	ldr	r2, [pc, #144]	@ (8003140 <HAL_TIM_MspPostInit+0xb0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d11e      	bne.n	80030f0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM5_MspPostInit 0 */

    /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	4b23      	ldr	r3, [pc, #140]	@ (8003144 <HAL_TIM_MspPostInit+0xb4>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <HAL_TIM_MspPostInit+0xb4>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c2:	4b20      	ldr	r3, [pc, #128]	@ (8003144 <HAL_TIM_MspPostInit+0xb4>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030ce:	2303      	movs	r3, #3
 80030d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d2:	2302      	movs	r3, #2
 80030d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80030de:	2302      	movs	r3, #2
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	4619      	mov	r1, r3
 80030e8:	4817      	ldr	r0, [pc, #92]	@ (8003148 <HAL_TIM_MspPostInit+0xb8>)
 80030ea:	f001 f877 	bl	80041dc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80030ee:	e023      	b.n	8003138 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a15      	ldr	r2, [pc, #84]	@ (800314c <HAL_TIM_MspPostInit+0xbc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d11e      	bne.n	8003138 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b11      	ldr	r3, [pc, #68]	@ (8003144 <HAL_TIM_MspPostInit+0xb4>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	4a10      	ldr	r2, [pc, #64]	@ (8003144 <HAL_TIM_MspPostInit+0xb4>)
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	6313      	str	r3, [r2, #48]	@ 0x30
 800310a:	4b0e      	ldr	r3, [pc, #56]	@ (8003144 <HAL_TIM_MspPostInit+0xb4>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003116:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800311a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	2302      	movs	r3, #2
 800311e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003124:	2300      	movs	r3, #0
 8003126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003128:	2309      	movs	r3, #9
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	4619      	mov	r1, r3
 8003132:	4807      	ldr	r0, [pc, #28]	@ (8003150 <HAL_TIM_MspPostInit+0xc0>)
 8003134:	f001 f852 	bl	80041dc <HAL_GPIO_Init>
}
 8003138:	bf00      	nop
 800313a:	3728      	adds	r7, #40	@ 0x28
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40000c00 	.word	0x40000c00
 8003144:	40023800 	.word	0x40023800
 8003148:	40020000 	.word	0x40020000
 800314c:	40001800 	.word	0x40001800
 8003150:	40020400 	.word	0x40020400

08003154 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08c      	sub	sp, #48	@ 0x30
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 031c 	add.w	r3, r7, #28
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a75      	ldr	r2, [pc, #468]	@ (8003348 <HAL_UART_MspInit+0x1f4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	f040 8094 	bne.w	80032a0 <HAL_UART_MspInit+0x14c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
 800317c:	4b73      	ldr	r3, [pc, #460]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	4a72      	ldr	r2, [pc, #456]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 8003182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003186:	6413      	str	r3, [r2, #64]	@ 0x40
 8003188:	4b70      	ldr	r3, [pc, #448]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	4b6c      	ldr	r3, [pc, #432]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	4a6b      	ldr	r2, [pc, #428]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80031a4:	4b69      	ldr	r3, [pc, #420]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031b0:	230c      	movs	r3, #12
 80031b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2302      	movs	r3, #2
 80031b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031bc:	2303      	movs	r3, #3
 80031be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031c0:	2307      	movs	r3, #7
 80031c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c4:	f107 031c 	add.w	r3, r7, #28
 80031c8:	4619      	mov	r1, r3
 80031ca:	4861      	ldr	r0, [pc, #388]	@ (8003350 <HAL_UART_MspInit+0x1fc>)
 80031cc:	f001 f806 	bl	80041dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80031d0:	4b60      	ldr	r3, [pc, #384]	@ (8003354 <HAL_UART_MspInit+0x200>)
 80031d2:	4a61      	ldr	r2, [pc, #388]	@ (8003358 <HAL_UART_MspInit+0x204>)
 80031d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80031d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003354 <HAL_UART_MspInit+0x200>)
 80031d8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80031dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031de:	4b5d      	ldr	r3, [pc, #372]	@ (8003354 <HAL_UART_MspInit+0x200>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e4:	4b5b      	ldr	r3, [pc, #364]	@ (8003354 <HAL_UART_MspInit+0x200>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003354 <HAL_UART_MspInit+0x200>)
 80031ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031f2:	4b58      	ldr	r3, [pc, #352]	@ (8003354 <HAL_UART_MspInit+0x200>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031f8:	4b56      	ldr	r3, [pc, #344]	@ (8003354 <HAL_UART_MspInit+0x200>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80031fe:	4b55      	ldr	r3, [pc, #340]	@ (8003354 <HAL_UART_MspInit+0x200>)
 8003200:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003204:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003206:	4b53      	ldr	r3, [pc, #332]	@ (8003354 <HAL_UART_MspInit+0x200>)
 8003208:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800320c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800320e:	4b51      	ldr	r3, [pc, #324]	@ (8003354 <HAL_UART_MspInit+0x200>)
 8003210:	2200      	movs	r2, #0
 8003212:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003214:	484f      	ldr	r0, [pc, #316]	@ (8003354 <HAL_UART_MspInit+0x200>)
 8003216:	f000 fbdf 	bl	80039d8 <HAL_DMA_Init>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003220:	f7ff fcb0 	bl	8002b84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a4b      	ldr	r2, [pc, #300]	@ (8003354 <HAL_UART_MspInit+0x200>)
 8003228:	63da      	str	r2, [r3, #60]	@ 0x3c
 800322a:	4a4a      	ldr	r2, [pc, #296]	@ (8003354 <HAL_UART_MspInit+0x200>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003230:	4b4a      	ldr	r3, [pc, #296]	@ (800335c <HAL_UART_MspInit+0x208>)
 8003232:	4a4b      	ldr	r2, [pc, #300]	@ (8003360 <HAL_UART_MspInit+0x20c>)
 8003234:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003236:	4b49      	ldr	r3, [pc, #292]	@ (800335c <HAL_UART_MspInit+0x208>)
 8003238:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800323c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800323e:	4b47      	ldr	r3, [pc, #284]	@ (800335c <HAL_UART_MspInit+0x208>)
 8003240:	2240      	movs	r2, #64	@ 0x40
 8003242:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003244:	4b45      	ldr	r3, [pc, #276]	@ (800335c <HAL_UART_MspInit+0x208>)
 8003246:	2200      	movs	r2, #0
 8003248:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800324a:	4b44      	ldr	r3, [pc, #272]	@ (800335c <HAL_UART_MspInit+0x208>)
 800324c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003250:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003252:	4b42      	ldr	r3, [pc, #264]	@ (800335c <HAL_UART_MspInit+0x208>)
 8003254:	2200      	movs	r2, #0
 8003256:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003258:	4b40      	ldr	r3, [pc, #256]	@ (800335c <HAL_UART_MspInit+0x208>)
 800325a:	2200      	movs	r2, #0
 800325c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800325e:	4b3f      	ldr	r3, [pc, #252]	@ (800335c <HAL_UART_MspInit+0x208>)
 8003260:	2200      	movs	r2, #0
 8003262:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003264:	4b3d      	ldr	r3, [pc, #244]	@ (800335c <HAL_UART_MspInit+0x208>)
 8003266:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800326a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800326c:	4b3b      	ldr	r3, [pc, #236]	@ (800335c <HAL_UART_MspInit+0x208>)
 800326e:	2200      	movs	r2, #0
 8003270:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003272:	483a      	ldr	r0, [pc, #232]	@ (800335c <HAL_UART_MspInit+0x208>)
 8003274:	f000 fbb0 	bl	80039d8 <HAL_DMA_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800327e:	f7ff fc81 	bl	8002b84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a35      	ldr	r2, [pc, #212]	@ (800335c <HAL_UART_MspInit+0x208>)
 8003286:	639a      	str	r2, [r3, #56]	@ 0x38
 8003288:	4a34      	ldr	r2, [pc, #208]	@ (800335c <HAL_UART_MspInit+0x208>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	2105      	movs	r1, #5
 8003292:	2026      	movs	r0, #38	@ 0x26
 8003294:	f000 fb76 	bl	8003984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003298:	2026      	movs	r0, #38	@ 0x26
 800329a:	f000 fb8f 	bl	80039bc <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800329e:	e04f      	b.n	8003340 <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART3)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003364 <HAL_UART_MspInit+0x210>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d14a      	bne.n	8003340 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	4b27      	ldr	r3, [pc, #156]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	4a26      	ldr	r2, [pc, #152]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 80032b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ba:	4b24      	ldr	r3, [pc, #144]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	4a1f      	ldr	r2, [pc, #124]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 80032d0:	f043 0304 	orr.w	r3, r3, #4
 80032d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032d6:	4b1d      	ldr	r3, [pc, #116]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	4b19      	ldr	r3, [pc, #100]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	4a18      	ldr	r2, [pc, #96]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f2:	4b16      	ldr	r3, [pc, #88]	@ (800334c <HAL_UART_MspInit+0x1f8>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80032fe:	2320      	movs	r3, #32
 8003300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330a:	2303      	movs	r3, #3
 800330c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800330e:	2307      	movs	r3, #7
 8003310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003312:	f107 031c 	add.w	r3, r7, #28
 8003316:	4619      	mov	r1, r3
 8003318:	4813      	ldr	r0, [pc, #76]	@ (8003368 <HAL_UART_MspInit+0x214>)
 800331a:	f000 ff5f 	bl	80041dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800331e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332c:	2303      	movs	r3, #3
 800332e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003330:	2307      	movs	r3, #7
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003334:	f107 031c 	add.w	r3, r7, #28
 8003338:	4619      	mov	r1, r3
 800333a:	480c      	ldr	r0, [pc, #48]	@ (800336c <HAL_UART_MspInit+0x218>)
 800333c:	f000 ff4e 	bl	80041dc <HAL_GPIO_Init>
}
 8003340:	bf00      	nop
 8003342:	3730      	adds	r7, #48	@ 0x30
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40004400 	.word	0x40004400
 800334c:	40023800 	.word	0x40023800
 8003350:	40020000 	.word	0x40020000
 8003354:	2000492c 	.word	0x2000492c
 8003358:	40026088 	.word	0x40026088
 800335c:	2000498c 	.word	0x2000498c
 8003360:	400260a0 	.word	0x400260a0
 8003364:	40004800 	.word	0x40004800
 8003368:	40020800 	.word	0x40020800
 800336c:	40020400 	.word	0x40020400

08003370 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08e      	sub	sp, #56	@ 0x38
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	4b33      	ldr	r3, [pc, #204]	@ (8003454 <HAL_InitTick+0xe4>)
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	4a32      	ldr	r2, [pc, #200]	@ (8003454 <HAL_InitTick+0xe4>)
 800338a:	f043 0310 	orr.w	r3, r3, #16
 800338e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003390:	4b30      	ldr	r3, [pc, #192]	@ (8003454 <HAL_InitTick+0xe4>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800339c:	f107 0210 	add.w	r2, r7, #16
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 fb8c 	bl	8004ac4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80033b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d103      	bne.n	80033be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033b6:	f001 fb5d 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 80033ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80033bc:	e004      	b.n	80033c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80033be:	f001 fb59 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 80033c2:	4603      	mov	r3, r0
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ca:	4a23      	ldr	r2, [pc, #140]	@ (8003458 <HAL_InitTick+0xe8>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	0c9b      	lsrs	r3, r3, #18
 80033d2:	3b01      	subs	r3, #1
 80033d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80033d6:	4b21      	ldr	r3, [pc, #132]	@ (800345c <HAL_InitTick+0xec>)
 80033d8:	4a21      	ldr	r2, [pc, #132]	@ (8003460 <HAL_InitTick+0xf0>)
 80033da:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80033dc:	4b1f      	ldr	r3, [pc, #124]	@ (800345c <HAL_InitTick+0xec>)
 80033de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80033e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80033e4:	4a1d      	ldr	r2, [pc, #116]	@ (800345c <HAL_InitTick+0xec>)
 80033e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80033ea:	4b1c      	ldr	r3, [pc, #112]	@ (800345c <HAL_InitTick+0xec>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f0:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <HAL_InitTick+0xec>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033f6:	4b19      	ldr	r3, [pc, #100]	@ (800345c <HAL_InitTick+0xec>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80033fc:	4817      	ldr	r0, [pc, #92]	@ (800345c <HAL_InitTick+0xec>)
 80033fe:	f001 ffdb 	bl	80053b8 <HAL_TIM_Base_Init>
 8003402:	4603      	mov	r3, r0
 8003404:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003408:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800340c:	2b00      	cmp	r3, #0
 800340e:	d11b      	bne.n	8003448 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003410:	4812      	ldr	r0, [pc, #72]	@ (800345c <HAL_InitTick+0xec>)
 8003412:	f002 f821 	bl	8005458 <HAL_TIM_Base_Start_IT>
 8003416:	4603      	mov	r3, r0
 8003418:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800341c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003420:	2b00      	cmp	r3, #0
 8003422:	d111      	bne.n	8003448 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003424:	2036      	movs	r0, #54	@ 0x36
 8003426:	f000 fac9 	bl	80039bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b0f      	cmp	r3, #15
 800342e:	d808      	bhi.n	8003442 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003430:	2200      	movs	r2, #0
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	2036      	movs	r0, #54	@ 0x36
 8003436:	f000 faa5 	bl	8003984 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800343a:	4a0a      	ldr	r2, [pc, #40]	@ (8003464 <HAL_InitTick+0xf4>)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	e002      	b.n	8003448 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003448:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800344c:	4618      	mov	r0, r3
 800344e:	3738      	adds	r7, #56	@ 0x38
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	431bde83 	.word	0x431bde83
 800345c:	20007980 	.word	0x20007980
 8003460:	40001000 	.word	0x40001000
 8003464:	20000020 	.word	0x20000020

08003468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <NMI_Handler+0x4>

08003470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <HardFault_Handler+0x4>

08003478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <MemManage_Handler+0x4>

08003480 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <BusFault_Handler+0x4>

08003488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800348c:	bf00      	nop
 800348e:	e7fd      	b.n	800348c <UsageFault_Handler+0x4>

08003490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80034a2:	2004      	movs	r0, #4
 80034a4:	f001 f848 	bl	8004538 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80034a8:	bf00      	nop
 80034aa:	bd80      	pop	{r7, pc}

080034ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80034b0:	4802      	ldr	r0, [pc, #8]	@ (80034bc <DMA1_Stream5_IRQHandler+0x10>)
 80034b2:	f000 fc29 	bl	8003d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	2000492c 	.word	0x2000492c

080034c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80034c4:	4802      	ldr	r0, [pc, #8]	@ (80034d0 <DMA1_Stream6_IRQHandler+0x10>)
 80034c6:	f000 fc1f 	bl	8003d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	2000498c 	.word	0x2000498c

080034d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80034d8:	4802      	ldr	r0, [pc, #8]	@ (80034e4 <TIM4_IRQHandler+0x10>)
 80034da:	f002 fa79 	bl	80059d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200047c4 	.word	0x200047c4

080034e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034ec:	4802      	ldr	r0, [pc, #8]	@ (80034f8 <USART2_IRQHandler+0x10>)
 80034ee:	f003 fab3 	bl	8006a58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	2000489c 	.word	0x2000489c

080034fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003500:	4802      	ldr	r0, [pc, #8]	@ (800350c <TIM6_DAC_IRQHandler+0x10>)
 8003502:	f002 fa65 	bl	80059d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20007980 	.word	0x20007980

08003510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return 1;
 8003514:	2301      	movs	r3, #1
}
 8003516:	4618      	mov	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <_kill>:

int _kill(int pid, int sig)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800352a:	f015 f811 	bl	8018550 <__errno>
 800352e:	4603      	mov	r3, r0
 8003530:	2216      	movs	r2, #22
 8003532:	601a      	str	r2, [r3, #0]
  return -1;
 8003534:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <_exit>:

void _exit (int status)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003548:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ffe7 	bl	8003520 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003552:	bf00      	nop
 8003554:	e7fd      	b.n	8003552 <_exit+0x12>

08003556 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e00a      	b.n	800357e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003568:	f3af 8000 	nop.w
 800356c:	4601      	mov	r1, r0
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	60ba      	str	r2, [r7, #8]
 8003574:	b2ca      	uxtb	r2, r1
 8003576:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3301      	adds	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	429a      	cmp	r2, r3
 8003584:	dbf0      	blt.n	8003568 <_read+0x12>
  }

  return len;
 8003586:	687b      	ldr	r3, [r7, #4]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	e009      	b.n	80035b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	60ba      	str	r2, [r7, #8]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3301      	adds	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	dbf1      	blt.n	80035a2 <_write+0x12>
  }
  return len;
 80035be:	687b      	ldr	r3, [r7, #4]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_close>:

int _close(int file)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035f0:	605a      	str	r2, [r3, #4]
  return 0;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <_isatty>:

int _isatty(int file)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003608:	2301      	movs	r3, #1
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003638:	4a14      	ldr	r2, [pc, #80]	@ (800368c <_sbrk+0x5c>)
 800363a:	4b15      	ldr	r3, [pc, #84]	@ (8003690 <_sbrk+0x60>)
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003644:	4b13      	ldr	r3, [pc, #76]	@ (8003694 <_sbrk+0x64>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800364c:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <_sbrk+0x64>)
 800364e:	4a12      	ldr	r2, [pc, #72]	@ (8003698 <_sbrk+0x68>)
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003652:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <_sbrk+0x64>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	429a      	cmp	r2, r3
 800365e:	d207      	bcs.n	8003670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003660:	f014 ff76 	bl	8018550 <__errno>
 8003664:	4603      	mov	r3, r0
 8003666:	220c      	movs	r2, #12
 8003668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800366e:	e009      	b.n	8003684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003670:	4b08      	ldr	r3, [pc, #32]	@ (8003694 <_sbrk+0x64>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003676:	4b07      	ldr	r3, [pc, #28]	@ (8003694 <_sbrk+0x64>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <_sbrk+0x64>)
 8003680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003682:	68fb      	ldr	r3, [r7, #12]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20020000 	.word	0x20020000
 8003690:	00000400 	.word	0x00000400
 8003694:	200079cc 	.word	0x200079cc
 8003698:	20011088 	.word	0x20011088

0800369c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036a0:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <SystemInit+0x20>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a6:	4a05      	ldr	r2, [pc, #20]	@ (80036bc <SystemInit+0x20>)
 80036a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <StartDefaultTask>:
int currentsp = 0;
int sec = 0;


void StartDefaultTask(void *argument)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 80036c8:	4809      	ldr	r0, [pc, #36]	@ (80036f0 <StartDefaultTask+0x30>)
 80036ca:	f001 fec5 	bl	8005458 <HAL_TIM_Base_Start_IT>
	uros_init();
 80036ce:	f7fe fa45 	bl	8001b5c <uros_init>
	arm_init();
 80036d2:	f7fd fd4b 	bl	800116c <arm_init>

    for(;;){
        uros_agent_status_check();
 80036d6:	f7fe fa81 	bl	8001bdc <uros_agent_status_check>
        osDelay(50);
 80036da:	2032      	movs	r0, #50	@ 0x32
 80036dc:	f004 fc52 	bl	8007f84 <osDelay>
		currentsp ++;
 80036e0:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <StartDefaultTask+0x34>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3301      	adds	r3, #1
 80036e6:	4a03      	ldr	r2, [pc, #12]	@ (80036f4 <StartDefaultTask+0x34>)
 80036e8:	6013      	str	r3, [r2, #0]
        uros_agent_status_check();
 80036ea:	bf00      	nop
 80036ec:	e7f3      	b.n	80036d6 <StartDefaultTask+0x16>
 80036ee:	bf00      	nop
 80036f0:	200047c4 	.word	0x200047c4
 80036f4:	200079d0 	.word	0x200079d0

080036f8 <HAL_TIM_PeriodElapsedCallback>:
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM4)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d106      	bne.n	8003718 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		arm_timer_callback();
 800370a:	f7fd fd9b 	bl	8001244 <arm_timer_callback>
		sec ++;
 800370e:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3301      	adds	r3, #1
 8003714:	4a07      	ldr	r2, [pc, #28]	@ (8003734 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003716:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a06      	ldr	r2, [pc, #24]	@ (8003738 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		HAL_IncTick();
 8003722:	f000 f857 	bl	80037d4 <HAL_IncTick>
	}
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40000800 	.word	0x40000800
 8003734:	200079d4 	.word	0x200079d4
 8003738:	40001000 	.word	0x40001000

0800373c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800373c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003774 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003740:	f7ff ffac 	bl	800369c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003744:	480c      	ldr	r0, [pc, #48]	@ (8003778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003746:	490d      	ldr	r1, [pc, #52]	@ (800377c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003748:	4a0d      	ldr	r2, [pc, #52]	@ (8003780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800374a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800374c:	e002      	b.n	8003754 <LoopCopyDataInit>

0800374e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800374e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003752:	3304      	adds	r3, #4

08003754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003758:	d3f9      	bcc.n	800374e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800375a:	4a0a      	ldr	r2, [pc, #40]	@ (8003784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800375c:	4c0a      	ldr	r4, [pc, #40]	@ (8003788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800375e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003760:	e001      	b.n	8003766 <LoopFillZerobss>

08003762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003764:	3204      	adds	r2, #4

08003766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003768:	d3fb      	bcc.n	8003762 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800376a:	f014 fef7 	bl	801855c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800376e:	f7fe fedb 	bl	8002528 <main>
  bx  lr    
 8003772:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800377c:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8003780:	0801a114 	.word	0x0801a114
  ldr r2, =_sbss
 8003784:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8003788:	20011088 	.word	0x20011088

0800378c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800378c:	e7fe      	b.n	800378c <ADC_IRQHandler>
	...

08003790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003794:	4b0e      	ldr	r3, [pc, #56]	@ (80037d0 <HAL_Init+0x40>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0d      	ldr	r2, [pc, #52]	@ (80037d0 <HAL_Init+0x40>)
 800379a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800379e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_Init+0x40>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0a      	ldr	r2, [pc, #40]	@ (80037d0 <HAL_Init+0x40>)
 80037a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037ac:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <HAL_Init+0x40>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a07      	ldr	r2, [pc, #28]	@ (80037d0 <HAL_Init+0x40>)
 80037b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b8:	2003      	movs	r0, #3
 80037ba:	f000 f8d8 	bl	800396e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037be:	200f      	movs	r0, #15
 80037c0:	f7ff fdd6 	bl	8003370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037c4:	f7ff fb48 	bl	8002e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023c00 	.word	0x40023c00

080037d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037d8:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_IncTick+0x20>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <HAL_IncTick+0x24>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4413      	add	r3, r2
 80037e4:	4a04      	ldr	r2, [pc, #16]	@ (80037f8 <HAL_IncTick+0x24>)
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000024 	.word	0x20000024
 80037f8:	200079d8 	.word	0x200079d8

080037fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003800:	4b03      	ldr	r3, [pc, #12]	@ (8003810 <HAL_GetTick+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	200079d8 	.word	0x200079d8

08003814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003824:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003830:	4013      	ands	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800383c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003846:	4a04      	ldr	r2, [pc, #16]	@ (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	60d3      	str	r3, [r2, #12]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003860:	4b04      	ldr	r3, [pc, #16]	@ (8003874 <__NVIC_GetPriorityGrouping+0x18>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	f003 0307 	and.w	r3, r3, #7
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	2b00      	cmp	r3, #0
 8003888:	db0b      	blt.n	80038a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	f003 021f 	and.w	r2, r3, #31
 8003890:	4907      	ldr	r1, [pc, #28]	@ (80038b0 <__NVIC_EnableIRQ+0x38>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2001      	movs	r0, #1
 800389a:	fa00 f202 	lsl.w	r2, r0, r2
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000e100 	.word	0xe000e100

080038b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db0a      	blt.n	80038de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	490c      	ldr	r1, [pc, #48]	@ (8003900 <__NVIC_SetPriority+0x4c>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	0112      	lsls	r2, r2, #4
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	440b      	add	r3, r1
 80038d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038dc:	e00a      	b.n	80038f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4908      	ldr	r1, [pc, #32]	@ (8003904 <__NVIC_SetPriority+0x50>)
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3b04      	subs	r3, #4
 80038ec:	0112      	lsls	r2, r2, #4
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	440b      	add	r3, r1
 80038f2:	761a      	strb	r2, [r3, #24]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000e100 	.word	0xe000e100
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	@ 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f1c3 0307 	rsb	r3, r3, #7
 8003922:	2b04      	cmp	r3, #4
 8003924:	bf28      	it	cs
 8003926:	2304      	movcs	r3, #4
 8003928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3304      	adds	r3, #4
 800392e:	2b06      	cmp	r3, #6
 8003930:	d902      	bls.n	8003938 <NVIC_EncodePriority+0x30>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3b03      	subs	r3, #3
 8003936:	e000      	b.n	800393a <NVIC_EncodePriority+0x32>
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43da      	mvns	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	401a      	ands	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003950:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	43d9      	mvns	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003960:	4313      	orrs	r3, r2
         );
}
 8003962:	4618      	mov	r0, r3
 8003964:	3724      	adds	r7, #36	@ 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ff4c 	bl	8003814 <__NVIC_SetPriorityGrouping>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003996:	f7ff ff61 	bl	800385c <__NVIC_GetPriorityGrouping>
 800399a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	6978      	ldr	r0, [r7, #20]
 80039a2:	f7ff ffb1 	bl	8003908 <NVIC_EncodePriority>
 80039a6:	4602      	mov	r2, r0
 80039a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff ff80 	bl	80038b4 <__NVIC_SetPriority>
}
 80039b4:	bf00      	nop
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ff54 	bl	8003878 <__NVIC_EnableIRQ>
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039e4:	f7ff ff0a 	bl	80037fc <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e099      	b.n	8003b28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a14:	e00f      	b.n	8003a36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a16:	f7ff fef1 	bl	80037fc <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d908      	bls.n	8003a36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e078      	b.n	8003b28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e8      	bne.n	8003a16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4b38      	ldr	r3, [pc, #224]	@ (8003b30 <HAL_DMA_Init+0x158>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d107      	bne.n	8003aa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 0307 	bic.w	r3, r3, #7
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d117      	bne.n	8003afa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00e      	beq.n	8003afa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fb01 	bl	80040e4 <DMA_CheckFifoParam>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2240      	movs	r2, #64	@ 0x40
 8003aec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003af6:	2301      	movs	r3, #1
 8003af8:	e016      	b.n	8003b28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fab8 	bl	8004078 <DMA_CalcBaseAndBitshift>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b10:	223f      	movs	r2, #63	@ 0x3f
 8003b12:	409a      	lsls	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	f010803f 	.word	0xf010803f

08003b34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_DMA_Start_IT+0x26>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e040      	b.n	8003bdc <HAL_DMA_Start_IT+0xa8>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d12f      	bne.n	8003bce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fa4a 	bl	800401c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8c:	223f      	movs	r2, #63	@ 0x3f
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0216 	orr.w	r2, r2, #22
 8003ba2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0208 	orr.w	r2, r2, #8
 8003bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	e005      	b.n	8003bda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bf2:	f7ff fe03 	bl	80037fc <HAL_GetTick>
 8003bf6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d008      	beq.n	8003c16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2280      	movs	r2, #128	@ 0x80
 8003c08:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e052      	b.n	8003cbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0216 	bic.w	r2, r2, #22
 8003c24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <HAL_DMA_Abort+0x62>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0208 	bic.w	r2, r2, #8
 8003c54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c66:	e013      	b.n	8003c90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c68:	f7ff fdc8 	bl	80037fc <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d90c      	bls.n	8003c90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e015      	b.n	8003cbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e4      	bne.n	8003c68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca2:	223f      	movs	r2, #63	@ 0x3f
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d004      	beq.n	8003ce2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2280      	movs	r2, #128	@ 0x80
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e00c      	b.n	8003cfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2205      	movs	r2, #5
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d14:	4b8e      	ldr	r3, [pc, #568]	@ (8003f50 <HAL_DMA_IRQHandler+0x248>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a8e      	ldr	r2, [pc, #568]	@ (8003f54 <HAL_DMA_IRQHandler+0x24c>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	0a9b      	lsrs	r3, r3, #10
 8003d20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d32:	2208      	movs	r2, #8
 8003d34:	409a      	lsls	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01a      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d013      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d60:	2208      	movs	r2, #8
 8003d62:	409a      	lsls	r2, r3
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6c:	f043 0201 	orr.w	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d78:	2201      	movs	r2, #1
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d012      	beq.n	8003daa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d96:	2201      	movs	r2, #1
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da2:	f043 0202 	orr.w	r2, r3, #2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dae:	2204      	movs	r2, #4
 8003db0:	409a      	lsls	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d012      	beq.n	8003de0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dcc:	2204      	movs	r2, #4
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd8:	f043 0204 	orr.w	r2, r3, #4
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	2210      	movs	r2, #16
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d043      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d03c      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e02:	2210      	movs	r2, #16
 8003e04:	409a      	lsls	r2, r3
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d018      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d108      	bne.n	8003e38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d024      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
 8003e36:	e01f      	b.n	8003e78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01b      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
 8003e48:	e016      	b.n	8003e78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d107      	bne.n	8003e68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0208 	bic.w	r2, r2, #8
 8003e66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 808f 	beq.w	8003fa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8087 	beq.w	8003fa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b05      	cmp	r3, #5
 8003eb0:	d136      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0216 	bic.w	r2, r2, #22
 8003ec0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ed0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <HAL_DMA_IRQHandler+0x1da>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0208 	bic.w	r2, r2, #8
 8003ef0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef6:	223f      	movs	r2, #63	@ 0x3f
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d07e      	beq.n	8004014 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4798      	blx	r3
        }
        return;
 8003f1e:	e079      	b.n	8004014 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d01d      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10d      	bne.n	8003f58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d031      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	4798      	blx	r3
 8003f4c:	e02c      	b.n	8003fa8 <HAL_DMA_IRQHandler+0x2a0>
 8003f4e:	bf00      	nop
 8003f50:	2000001c 	.word	0x2000001c
 8003f54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d023      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	4798      	blx	r3
 8003f68:	e01e      	b.n	8003fa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10f      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0210 	bic.w	r2, r2, #16
 8003f86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d032      	beq.n	8004016 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d022      	beq.n	8004002 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2205      	movs	r2, #5
 8003fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d307      	bcc.n	8003ff0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f2      	bne.n	8003fd4 <HAL_DMA_IRQHandler+0x2cc>
 8003fee:	e000      	b.n	8003ff2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ff0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	4798      	blx	r3
 8004012:	e000      	b.n	8004016 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004014:	bf00      	nop
    }
  }
}
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004038:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b40      	cmp	r3, #64	@ 0x40
 8004048:	d108      	bne.n	800405c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800405a:	e007      	b.n	800406c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	3b10      	subs	r3, #16
 8004088:	4a14      	ldr	r2, [pc, #80]	@ (80040dc <DMA_CalcBaseAndBitshift+0x64>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004092:	4a13      	ldr	r2, [pc, #76]	@ (80040e0 <DMA_CalcBaseAndBitshift+0x68>)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d909      	bls.n	80040ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040ae:	f023 0303 	bic.w	r3, r3, #3
 80040b2:	1d1a      	adds	r2, r3, #4
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80040b8:	e007      	b.n	80040ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040c2:	f023 0303 	bic.w	r3, r3, #3
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	aaaaaaab 	.word	0xaaaaaaab
 80040e0:	080194a4 	.word	0x080194a4

080040e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11f      	bne.n	800413e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b03      	cmp	r3, #3
 8004102:	d856      	bhi.n	80041b2 <DMA_CheckFifoParam+0xce>
 8004104:	a201      	add	r2, pc, #4	@ (adr r2, 800410c <DMA_CheckFifoParam+0x28>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	0800411d 	.word	0x0800411d
 8004110:	0800412f 	.word	0x0800412f
 8004114:	0800411d 	.word	0x0800411d
 8004118:	080041b3 	.word	0x080041b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d046      	beq.n	80041b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412c:	e043      	b.n	80041b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004136:	d140      	bne.n	80041ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413c:	e03d      	b.n	80041ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004146:	d121      	bne.n	800418c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d837      	bhi.n	80041be <DMA_CheckFifoParam+0xda>
 800414e:	a201      	add	r2, pc, #4	@ (adr r2, 8004154 <DMA_CheckFifoParam+0x70>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004165 	.word	0x08004165
 8004158:	0800416b 	.word	0x0800416b
 800415c:	08004165 	.word	0x08004165
 8004160:	0800417d 	.word	0x0800417d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      break;
 8004168:	e030      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d025      	beq.n	80041c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417a:	e022      	b.n	80041c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004184:	d11f      	bne.n	80041c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800418a:	e01c      	b.n	80041c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d903      	bls.n	800419a <DMA_CheckFifoParam+0xb6>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d003      	beq.n	80041a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004198:	e018      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
      break;
 800419e:	e015      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      break;
 80041b0:	e00b      	b.n	80041ca <DMA_CheckFifoParam+0xe6>
      break;
 80041b2:	bf00      	nop
 80041b4:	e00a      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041b6:	bf00      	nop
 80041b8:	e008      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041ba:	bf00      	nop
 80041bc:	e006      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041be:	bf00      	nop
 80041c0:	e004      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;   
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041ca:	bf00      	nop
    }
  } 
  
  return status; 
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop

080041dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041dc:	b480      	push	{r7}
 80041de:	b089      	sub	sp, #36	@ 0x24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	e165      	b.n	80044c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041f8:	2201      	movs	r2, #1
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4013      	ands	r3, r2
 800420a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	429a      	cmp	r2, r3
 8004212:	f040 8154 	bne.w	80044be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d005      	beq.n	800422e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800422a:	2b02      	cmp	r3, #2
 800422c:	d130      	bne.n	8004290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	2203      	movs	r2, #3
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43db      	mvns	r3, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004264:	2201      	movs	r2, #1
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 0201 	and.w	r2, r3, #1
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	2b03      	cmp	r3, #3
 800429a:	d017      	beq.n	80042cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	2203      	movs	r2, #3
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4013      	ands	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d123      	bne.n	8004320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	08da      	lsrs	r2, r3, #3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3208      	adds	r2, #8
 80042e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	220f      	movs	r2, #15
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	08da      	lsrs	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3208      	adds	r2, #8
 800431a:	69b9      	ldr	r1, [r7, #24]
 800431c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	2203      	movs	r2, #3
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0203 	and.w	r2, r3, #3
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80ae 	beq.w	80044be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	4b5d      	ldr	r3, [pc, #372]	@ (80044dc <HAL_GPIO_Init+0x300>)
 8004368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436a:	4a5c      	ldr	r2, [pc, #368]	@ (80044dc <HAL_GPIO_Init+0x300>)
 800436c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004370:	6453      	str	r3, [r2, #68]	@ 0x44
 8004372:	4b5a      	ldr	r3, [pc, #360]	@ (80044dc <HAL_GPIO_Init+0x300>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800437e:	4a58      	ldr	r2, [pc, #352]	@ (80044e0 <HAL_GPIO_Init+0x304>)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	089b      	lsrs	r3, r3, #2
 8004384:	3302      	adds	r3, #2
 8004386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	220f      	movs	r2, #15
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4013      	ands	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a4f      	ldr	r2, [pc, #316]	@ (80044e4 <HAL_GPIO_Init+0x308>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d025      	beq.n	80043f6 <HAL_GPIO_Init+0x21a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a4e      	ldr	r2, [pc, #312]	@ (80044e8 <HAL_GPIO_Init+0x30c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01f      	beq.n	80043f2 <HAL_GPIO_Init+0x216>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a4d      	ldr	r2, [pc, #308]	@ (80044ec <HAL_GPIO_Init+0x310>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d019      	beq.n	80043ee <HAL_GPIO_Init+0x212>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a4c      	ldr	r2, [pc, #304]	@ (80044f0 <HAL_GPIO_Init+0x314>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d013      	beq.n	80043ea <HAL_GPIO_Init+0x20e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a4b      	ldr	r2, [pc, #300]	@ (80044f4 <HAL_GPIO_Init+0x318>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00d      	beq.n	80043e6 <HAL_GPIO_Init+0x20a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a4a      	ldr	r2, [pc, #296]	@ (80044f8 <HAL_GPIO_Init+0x31c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d007      	beq.n	80043e2 <HAL_GPIO_Init+0x206>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a49      	ldr	r2, [pc, #292]	@ (80044fc <HAL_GPIO_Init+0x320>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d101      	bne.n	80043de <HAL_GPIO_Init+0x202>
 80043da:	2306      	movs	r3, #6
 80043dc:	e00c      	b.n	80043f8 <HAL_GPIO_Init+0x21c>
 80043de:	2307      	movs	r3, #7
 80043e0:	e00a      	b.n	80043f8 <HAL_GPIO_Init+0x21c>
 80043e2:	2305      	movs	r3, #5
 80043e4:	e008      	b.n	80043f8 <HAL_GPIO_Init+0x21c>
 80043e6:	2304      	movs	r3, #4
 80043e8:	e006      	b.n	80043f8 <HAL_GPIO_Init+0x21c>
 80043ea:	2303      	movs	r3, #3
 80043ec:	e004      	b.n	80043f8 <HAL_GPIO_Init+0x21c>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e002      	b.n	80043f8 <HAL_GPIO_Init+0x21c>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_GPIO_Init+0x21c>
 80043f6:	2300      	movs	r3, #0
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	f002 0203 	and.w	r2, r2, #3
 80043fe:	0092      	lsls	r2, r2, #2
 8004400:	4093      	lsls	r3, r2
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4313      	orrs	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004408:	4935      	ldr	r1, [pc, #212]	@ (80044e0 <HAL_GPIO_Init+0x304>)
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	3302      	adds	r3, #2
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004416:	4b3a      	ldr	r3, [pc, #232]	@ (8004500 <HAL_GPIO_Init+0x324>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	43db      	mvns	r3, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4013      	ands	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800443a:	4a31      	ldr	r2, [pc, #196]	@ (8004500 <HAL_GPIO_Init+0x324>)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004440:	4b2f      	ldr	r3, [pc, #188]	@ (8004500 <HAL_GPIO_Init+0x324>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004464:	4a26      	ldr	r2, [pc, #152]	@ (8004500 <HAL_GPIO_Init+0x324>)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800446a:	4b25      	ldr	r3, [pc, #148]	@ (8004500 <HAL_GPIO_Init+0x324>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	43db      	mvns	r3, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4013      	ands	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800448e:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <HAL_GPIO_Init+0x324>)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004494:	4b1a      	ldr	r3, [pc, #104]	@ (8004500 <HAL_GPIO_Init+0x324>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	43db      	mvns	r3, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044b8:	4a11      	ldr	r2, [pc, #68]	@ (8004500 <HAL_GPIO_Init+0x324>)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3301      	adds	r3, #1
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	2b0f      	cmp	r3, #15
 80044c8:	f67f ae96 	bls.w	80041f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	3724      	adds	r7, #36	@ 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40013800 	.word	0x40013800
 80044e4:	40020000 	.word	0x40020000
 80044e8:	40020400 	.word	0x40020400
 80044ec:	40020800 	.word	0x40020800
 80044f0:	40020c00 	.word	0x40020c00
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40021400 	.word	0x40021400
 80044fc:	40021800 	.word	0x40021800
 8004500:	40013c00 	.word	0x40013c00

08004504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
 8004510:	4613      	mov	r3, r2
 8004512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004514:	787b      	ldrb	r3, [r7, #1]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004520:	e003      	b.n	800452a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004522:	887b      	ldrh	r3, [r7, #2]
 8004524:	041a      	lsls	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	619a      	str	r2, [r3, #24]
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004542:	4b08      	ldr	r3, [pc, #32]	@ (8004564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800454e:	4a05      	ldr	r2, [pc, #20]	@ (8004564 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	4618      	mov	r0, r3
 8004558:	f7fc fef6 	bl	8001348 <HAL_GPIO_EXTI_Callback>
  }
}
 800455c:	bf00      	nop
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40013c00 	.word	0x40013c00

08004568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e12b      	b.n	80047d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fe fc8e 	bl	8002eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	@ 0x24
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045cc:	f000 fa52 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 80045d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4a81      	ldr	r2, [pc, #516]	@ (80047dc <HAL_I2C_Init+0x274>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d807      	bhi.n	80045ec <HAL_I2C_Init+0x84>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a80      	ldr	r2, [pc, #512]	@ (80047e0 <HAL_I2C_Init+0x278>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bf94      	ite	ls
 80045e4:	2301      	movls	r3, #1
 80045e6:	2300      	movhi	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e006      	b.n	80045fa <HAL_I2C_Init+0x92>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a7d      	ldr	r2, [pc, #500]	@ (80047e4 <HAL_I2C_Init+0x27c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	bf94      	ite	ls
 80045f4:	2301      	movls	r3, #1
 80045f6:	2300      	movhi	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e0e7      	b.n	80047d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a78      	ldr	r2, [pc, #480]	@ (80047e8 <HAL_I2C_Init+0x280>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	0c9b      	lsrs	r3, r3, #18
 800460c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4a6a      	ldr	r2, [pc, #424]	@ (80047dc <HAL_I2C_Init+0x274>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d802      	bhi.n	800463c <HAL_I2C_Init+0xd4>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	3301      	adds	r3, #1
 800463a:	e009      	b.n	8004650 <HAL_I2C_Init+0xe8>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	4a69      	ldr	r2, [pc, #420]	@ (80047ec <HAL_I2C_Init+0x284>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	3301      	adds	r3, #1
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	430b      	orrs	r3, r1
 8004656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004662:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	495c      	ldr	r1, [pc, #368]	@ (80047dc <HAL_I2C_Init+0x274>)
 800466c:	428b      	cmp	r3, r1
 800466e:	d819      	bhi.n	80046a4 <HAL_I2C_Init+0x13c>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1e59      	subs	r1, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fbb1 f3f3 	udiv	r3, r1, r3
 800467e:	1c59      	adds	r1, r3, #1
 8004680:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004684:	400b      	ands	r3, r1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_I2C_Init+0x138>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1e59      	subs	r1, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	fbb1 f3f3 	udiv	r3, r1, r3
 8004698:	3301      	adds	r3, #1
 800469a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800469e:	e051      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 80046a0:	2304      	movs	r3, #4
 80046a2:	e04f      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d111      	bne.n	80046d0 <HAL_I2C_Init+0x168>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	1e58      	subs	r0, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6859      	ldr	r1, [r3, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	440b      	add	r3, r1
 80046ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80046be:	3301      	adds	r3, #1
 80046c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e012      	b.n	80046f6 <HAL_I2C_Init+0x18e>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1e58      	subs	r0, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6859      	ldr	r1, [r3, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	0099      	lsls	r1, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e6:	3301      	adds	r3, #1
 80046e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_I2C_Init+0x196>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e022      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10e      	bne.n	8004724 <HAL_I2C_Init+0x1bc>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1e58      	subs	r0, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6859      	ldr	r1, [r3, #4]
 800470e:	460b      	mov	r3, r1
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	440b      	add	r3, r1
 8004714:	fbb0 f3f3 	udiv	r3, r0, r3
 8004718:	3301      	adds	r3, #1
 800471a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004722:	e00f      	b.n	8004744 <HAL_I2C_Init+0x1dc>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1e58      	subs	r0, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	0099      	lsls	r1, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	fbb0 f3f3 	udiv	r3, r0, r3
 800473a:	3301      	adds	r3, #1
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	6809      	ldr	r1, [r1, #0]
 8004748:	4313      	orrs	r3, r2
 800474a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004772:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6911      	ldr	r1, [r2, #16]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	68d2      	ldr	r2, [r2, #12]
 800477e:	4311      	orrs	r1, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	430b      	orrs	r3, r1
 8004786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	000186a0 	.word	0x000186a0
 80047e0:	001e847f 	.word	0x001e847f
 80047e4:	003d08ff 	.word	0x003d08ff
 80047e8:	431bde83 	.word	0x431bde83
 80047ec:	10624dd3 	.word	0x10624dd3

080047f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	4b20      	ldr	r3, [pc, #128]	@ (8004880 <HAL_PWREx_EnableOverDrive+0x90>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	4a1f      	ldr	r2, [pc, #124]	@ (8004880 <HAL_PWREx_EnableOverDrive+0x90>)
 8004804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004808:	6413      	str	r3, [r2, #64]	@ 0x40
 800480a:	4b1d      	ldr	r3, [pc, #116]	@ (8004880 <HAL_PWREx_EnableOverDrive+0x90>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004816:	4b1b      	ldr	r3, [pc, #108]	@ (8004884 <HAL_PWREx_EnableOverDrive+0x94>)
 8004818:	2201      	movs	r2, #1
 800481a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800481c:	f7fe ffee 	bl	80037fc <HAL_GetTick>
 8004820:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004822:	e009      	b.n	8004838 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004824:	f7fe ffea 	bl	80037fc <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004832:	d901      	bls.n	8004838 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e01f      	b.n	8004878 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004838:	4b13      	ldr	r3, [pc, #76]	@ (8004888 <HAL_PWREx_EnableOverDrive+0x98>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004844:	d1ee      	bne.n	8004824 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004846:	4b11      	ldr	r3, [pc, #68]	@ (800488c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800484c:	f7fe ffd6 	bl	80037fc <HAL_GetTick>
 8004850:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004852:	e009      	b.n	8004868 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004854:	f7fe ffd2 	bl	80037fc <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004862:	d901      	bls.n	8004868 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e007      	b.n	8004878 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004868:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <HAL_PWREx_EnableOverDrive+0x98>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004874:	d1ee      	bne.n	8004854 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40023800 	.word	0x40023800
 8004884:	420e0040 	.word	0x420e0040
 8004888:	40007000 	.word	0x40007000
 800488c:	420e0044 	.word	0x420e0044

08004890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0cc      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048a4:	4b68      	ldr	r3, [pc, #416]	@ (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d90c      	bls.n	80048cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	4b65      	ldr	r3, [pc, #404]	@ (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ba:	4b63      	ldr	r3, [pc, #396]	@ (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0b8      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d020      	beq.n	800491a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e4:	4b59      	ldr	r3, [pc, #356]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4a58      	ldr	r2, [pc, #352]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048fc:	4b53      	ldr	r3, [pc, #332]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	4a52      	ldr	r2, [pc, #328]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004908:	4b50      	ldr	r3, [pc, #320]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	494d      	ldr	r1, [pc, #308]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d044      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d107      	bne.n	800493e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492e:	4b47      	ldr	r3, [pc, #284]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d119      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e07f      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d003      	beq.n	800494e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494a:	2b03      	cmp	r3, #3
 800494c:	d107      	bne.n	800495e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e06f      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e067      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496e:	4b37      	ldr	r3, [pc, #220]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f023 0203 	bic.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	4934      	ldr	r1, [pc, #208]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	4313      	orrs	r3, r2
 800497e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004980:	f7fe ff3c 	bl	80037fc <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	e00a      	b.n	800499e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004988:	f7fe ff38 	bl	80037fc <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e04f      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	4b2b      	ldr	r3, [pc, #172]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 020c 	and.w	r2, r3, #12
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d1eb      	bne.n	8004988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049b0:	4b25      	ldr	r3, [pc, #148]	@ (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d20c      	bcs.n	80049d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049be:	4b22      	ldr	r3, [pc, #136]	@ (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c6:	4b20      	ldr	r3, [pc, #128]	@ (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e032      	b.n	8004a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e4:	4b19      	ldr	r3, [pc, #100]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4916      	ldr	r1, [pc, #88]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d009      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a02:	4b12      	ldr	r3, [pc, #72]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	490e      	ldr	r1, [pc, #56]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a16:	f000 f887 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	490a      	ldr	r1, [pc, #40]	@ (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 8004a28:	5ccb      	ldrb	r3, [r1, r3]
 8004a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2e:	4a09      	ldr	r2, [pc, #36]	@ (8004a54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a32:	4b09      	ldr	r3, [pc, #36]	@ (8004a58 <HAL_RCC_ClockConfig+0x1c8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe fc9a 	bl	8003370 <HAL_InitTick>

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40023c00 	.word	0x40023c00
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	0801948c 	.word	0x0801948c
 8004a54:	2000001c 	.word	0x2000001c
 8004a58:	20000020 	.word	0x20000020

08004a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a60:	4b03      	ldr	r3, [pc, #12]	@ (8004a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a62:	681b      	ldr	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	2000001c 	.word	0x2000001c

08004a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a78:	f7ff fff0 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0a9b      	lsrs	r3, r3, #10
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4903      	ldr	r1, [pc, #12]	@ (8004a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	0801949c 	.word	0x0801949c

08004a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004aa0:	f7ff ffdc 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	0b5b      	lsrs	r3, r3, #13
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	4903      	ldr	r1, [pc, #12]	@ (8004ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab2:	5ccb      	ldrb	r3, [r1, r3]
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	0801949c 	.word	0x0801949c

08004ac4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	220f      	movs	r2, #15
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ad4:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <HAL_RCC_GetClockConfig+0x5c>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0203 	and.w	r2, r3, #3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b20 <HAL_RCC_GetClockConfig+0x5c>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004aec:	4b0c      	ldr	r3, [pc, #48]	@ (8004b20 <HAL_RCC_GetClockConfig+0x5c>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004af8:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <HAL_RCC_GetClockConfig+0x5c>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	08db      	lsrs	r3, r3, #3
 8004afe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b06:	4b07      	ldr	r3, [pc, #28]	@ (8004b24 <HAL_RCC_GetClockConfig+0x60>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 020f 	and.w	r2, r3, #15
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	601a      	str	r2, [r3, #0]
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40023c00 	.word	0x40023c00

08004b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b2c:	b0a6      	sub	sp, #152	@ 0x98
 8004b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b4e:	4bc8      	ldr	r3, [pc, #800]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b0c      	cmp	r3, #12
 8004b58:	f200 817e 	bhi.w	8004e58 <HAL_RCC_GetSysClockFreq+0x330>
 8004b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b99 	.word	0x08004b99
 8004b68:	08004e59 	.word	0x08004e59
 8004b6c:	08004e59 	.word	0x08004e59
 8004b70:	08004e59 	.word	0x08004e59
 8004b74:	08004ba1 	.word	0x08004ba1
 8004b78:	08004e59 	.word	0x08004e59
 8004b7c:	08004e59 	.word	0x08004e59
 8004b80:	08004e59 	.word	0x08004e59
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004e59 	.word	0x08004e59
 8004b8c:	08004e59 	.word	0x08004e59
 8004b90:	08004e59 	.word	0x08004e59
 8004b94:	08004d13 	.word	0x08004d13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b98:	4bb6      	ldr	r3, [pc, #728]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004b9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004b9e:	e15f      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ba0:	4bb5      	ldr	r3, [pc, #724]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ba2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004ba6:	e15b      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba8:	4bb1      	ldr	r3, [pc, #708]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x348>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bb4:	4bae      	ldr	r3, [pc, #696]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d031      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc0:	4bab      	ldr	r3, [pc, #684]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	099b      	lsrs	r3, r3, #6
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004bd8:	4ba7      	ldr	r3, [pc, #668]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x350>)
 8004bda:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004bde:	462a      	mov	r2, r5
 8004be0:	fb03 f202 	mul.w	r2, r3, r2
 8004be4:	2300      	movs	r3, #0
 8004be6:	4621      	mov	r1, r4
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	4aa2      	ldr	r2, [pc, #648]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x350>)
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	fba1 1202 	umull	r1, r2, r1, r2
 8004bf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bf8:	460a      	mov	r2, r1
 8004bfa:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004bfc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004bfe:	4413      	add	r3, r2
 8004c00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c06:	2200      	movs	r2, #0
 8004c08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c0a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004c0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c10:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004c14:	f7fb ffd2 	bl	8000bbc <__aeabi_uldivmod>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c22:	e064      	b.n	8004cee <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c24:	4b92      	ldr	r3, [pc, #584]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	099b      	lsrs	r3, r3, #6
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c2e:	657a      	str	r2, [r7, #84]	@ 0x54
 8004c30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c38:	2300      	movs	r3, #0
 8004c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c3c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004c40:	4622      	mov	r2, r4
 8004c42:	462b      	mov	r3, r5
 8004c44:	f04f 0000 	mov.w	r0, #0
 8004c48:	f04f 0100 	mov.w	r1, #0
 8004c4c:	0159      	lsls	r1, r3, #5
 8004c4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c52:	0150      	lsls	r0, r2, #5
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4621      	mov	r1, r4
 8004c5a:	1a51      	subs	r1, r2, r1
 8004c5c:	6139      	str	r1, [r7, #16]
 8004c5e:	4629      	mov	r1, r5
 8004c60:	eb63 0301 	sbc.w	r3, r3, r1
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c72:	4659      	mov	r1, fp
 8004c74:	018b      	lsls	r3, r1, #6
 8004c76:	4651      	mov	r1, sl
 8004c78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c7c:	4651      	mov	r1, sl
 8004c7e:	018a      	lsls	r2, r1, #6
 8004c80:	4651      	mov	r1, sl
 8004c82:	ebb2 0801 	subs.w	r8, r2, r1
 8004c86:	4659      	mov	r1, fp
 8004c88:	eb63 0901 	sbc.w	r9, r3, r1
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca0:	4690      	mov	r8, r2
 8004ca2:	4699      	mov	r9, r3
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	eb18 0303 	adds.w	r3, r8, r3
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	462b      	mov	r3, r5
 8004cae:	eb49 0303 	adc.w	r3, r9, r3
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	028b      	lsls	r3, r1, #10
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cca:	4621      	mov	r1, r4
 8004ccc:	028a      	lsls	r2, r1, #10
 8004cce:	4610      	mov	r0, r2
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cda:	647a      	str	r2, [r7, #68]	@ 0x44
 8004cdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ce0:	f7fb ff6c 	bl	8000bbc <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4613      	mov	r3, r2
 8004cea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004cee:	4b60      	ldr	r3, [pc, #384]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x348>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	0c1b      	lsrs	r3, r3, #16
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004d00:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004d10:	e0a6      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d12:	4b57      	ldr	r3, [pc, #348]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d1e:	4b54      	ldr	r3, [pc, #336]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d02a      	beq.n	8004d80 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2a:	4b51      	ldr	r3, [pc, #324]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	099b      	lsrs	r3, r3, #6
 8004d30:	2200      	movs	r2, #0
 8004d32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4b4e      	ldr	r3, [pc, #312]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d40:	fb03 f201 	mul.w	r2, r3, r1
 8004d44:	2300      	movs	r3, #0
 8004d46:	fb00 f303 	mul.w	r3, r0, r3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	4a4a      	ldr	r2, [pc, #296]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x350>)
 8004d4e:	fba0 1202 	umull	r1, r2, r0, r2
 8004d52:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d54:	460a      	mov	r2, r1
 8004d56:	673a      	str	r2, [r7, #112]	@ 0x70
 8004d58:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d5a:	4413      	add	r3, r2
 8004d5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d62:	2200      	movs	r2, #0
 8004d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d66:	637a      	str	r2, [r7, #52]	@ 0x34
 8004d68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004d6c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004d70:	f7fb ff24 	bl	8000bbc <__aeabi_uldivmod>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4613      	mov	r3, r2
 8004d7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d7e:	e05b      	b.n	8004e38 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d80:	4b3b      	ldr	r3, [pc, #236]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	099b      	lsrs	r3, r3, #6
 8004d86:	2200      	movs	r2, #0
 8004d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d92:	623b      	str	r3, [r7, #32]
 8004d94:	2300      	movs	r3, #0
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	f04f 0000 	mov.w	r0, #0
 8004da4:	f04f 0100 	mov.w	r1, #0
 8004da8:	0159      	lsls	r1, r3, #5
 8004daa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dae:	0150      	lsls	r0, r2, #5
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4641      	mov	r1, r8
 8004db6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dba:	4649      	mov	r1, r9
 8004dbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004dd4:	ebb2 040a 	subs.w	r4, r2, sl
 8004dd8:	eb63 050b 	sbc.w	r5, r3, fp
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	00eb      	lsls	r3, r5, #3
 8004de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dea:	00e2      	lsls	r2, r4, #3
 8004dec:	4614      	mov	r4, r2
 8004dee:	461d      	mov	r5, r3
 8004df0:	4643      	mov	r3, r8
 8004df2:	18e3      	adds	r3, r4, r3
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	464b      	mov	r3, r9
 8004df8:	eb45 0303 	adc.w	r3, r5, r3
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	028b      	lsls	r3, r1, #10
 8004e0e:	4621      	mov	r1, r4
 8004e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e14:	4621      	mov	r1, r4
 8004e16:	028a      	lsls	r2, r1, #10
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e20:	2200      	movs	r2, #0
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	61fa      	str	r2, [r7, #28]
 8004e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e2a:	f7fb fec7 	bl	8000bbc <__aeabi_uldivmod>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4613      	mov	r3, r2
 8004e34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e38:	4b0d      	ldr	r3, [pc, #52]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	0f1b      	lsrs	r3, r3, #28
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004e46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004e56:	e003      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b06      	ldr	r3, [pc, #24]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004e5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004e5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3798      	adds	r7, #152	@ 0x98
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	00f42400 	.word	0x00f42400
 8004e78:	017d7840 	.word	0x017d7840

08004e7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e28d      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 8083 	beq.w	8004fa2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e9c:	4b94      	ldr	r3, [pc, #592]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 030c 	and.w	r3, r3, #12
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d019      	beq.n	8004edc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ea8:	4b91      	ldr	r3, [pc, #580]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 030c 	and.w	r3, r3, #12
        || \
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d106      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004eb4:	4b8e      	ldr	r3, [pc, #568]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ebc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ec0:	d00c      	beq.n	8004edc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004eca:	2b0c      	cmp	r3, #12
 8004ecc:	d112      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ece:	4b88      	ldr	r3, [pc, #544]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eda:	d10b      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	4b84      	ldr	r3, [pc, #528]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d05b      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x124>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d157      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e25a      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004efc:	d106      	bne.n	8004f0c <HAL_RCC_OscConfig+0x90>
 8004efe:	4b7c      	ldr	r3, [pc, #496]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7b      	ldr	r2, [pc, #492]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e01d      	b.n	8004f48 <HAL_RCC_OscConfig+0xcc>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCC_OscConfig+0xb4>
 8004f16:	4b76      	ldr	r3, [pc, #472]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a75      	ldr	r2, [pc, #468]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	4b73      	ldr	r3, [pc, #460]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a72      	ldr	r2, [pc, #456]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e00b      	b.n	8004f48 <HAL_RCC_OscConfig+0xcc>
 8004f30:	4b6f      	ldr	r3, [pc, #444]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a6e      	ldr	r2, [pc, #440]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4b6c      	ldr	r3, [pc, #432]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a6b      	ldr	r2, [pc, #428]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d013      	beq.n	8004f78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fe fc54 	bl	80037fc <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f58:	f7fe fc50 	bl	80037fc <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	@ 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e21f      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	4b61      	ldr	r3, [pc, #388]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0xdc>
 8004f76:	e014      	b.n	8004fa2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fe fc40 	bl	80037fc <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f80:	f7fe fc3c 	bl	80037fc <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b64      	cmp	r3, #100	@ 0x64
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e20b      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f92:	4b57      	ldr	r3, [pc, #348]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x104>
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d06f      	beq.n	800508e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004fae:	4b50      	ldr	r3, [pc, #320]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d017      	beq.n	8004fea <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fba:	4b4d      	ldr	r3, [pc, #308]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
        || \
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d105      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fd2:	4b47      	ldr	r3, [pc, #284]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fda:	2b0c      	cmp	r3, #12
 8004fdc:	d11c      	bne.n	8005018 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fde:	4b44      	ldr	r3, [pc, #272]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d116      	bne.n	8005018 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fea:	4b41      	ldr	r3, [pc, #260]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_RCC_OscConfig+0x186>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d001      	beq.n	8005002 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e1d3      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005002:	4b3b      	ldr	r3, [pc, #236]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4937      	ldr	r1, [pc, #220]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005016:	e03a      	b.n	800508e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d020      	beq.n	8005062 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005020:	4b34      	ldr	r3, [pc, #208]	@ (80050f4 <HAL_RCC_OscConfig+0x278>)
 8005022:	2201      	movs	r2, #1
 8005024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005026:	f7fe fbe9 	bl	80037fc <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800502e:	f7fe fbe5 	bl	80037fc <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e1b4      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005040:	4b2b      	ldr	r3, [pc, #172]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504c:	4b28      	ldr	r3, [pc, #160]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	4925      	ldr	r1, [pc, #148]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 800505c:	4313      	orrs	r3, r2
 800505e:	600b      	str	r3, [r1, #0]
 8005060:	e015      	b.n	800508e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005062:	4b24      	ldr	r3, [pc, #144]	@ (80050f4 <HAL_RCC_OscConfig+0x278>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fe fbc8 	bl	80037fc <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005070:	f7fe fbc4 	bl	80037fc <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e193      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005082:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d036      	beq.n	8005108 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d016      	beq.n	80050d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050a2:	4b15      	ldr	r3, [pc, #84]	@ (80050f8 <HAL_RCC_OscConfig+0x27c>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fe fba8 	bl	80037fc <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b0:	f7fe fba4 	bl	80037fc <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e173      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050c2:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <HAL_RCC_OscConfig+0x274>)
 80050c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0x234>
 80050ce:	e01b      	b.n	8005108 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050d0:	4b09      	ldr	r3, [pc, #36]	@ (80050f8 <HAL_RCC_OscConfig+0x27c>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d6:	f7fe fb91 	bl	80037fc <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050dc:	e00e      	b.n	80050fc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050de:	f7fe fb8d 	bl	80037fc <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d907      	bls.n	80050fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e15c      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
 80050f0:	40023800 	.word	0x40023800
 80050f4:	42470000 	.word	0x42470000
 80050f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050fc:	4b8a      	ldr	r3, [pc, #552]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 80050fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1ea      	bne.n	80050de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 8097 	beq.w	8005244 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005116:	2300      	movs	r3, #0
 8005118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800511a:	4b83      	ldr	r3, [pc, #524]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10f      	bne.n	8005146 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	4b7f      	ldr	r3, [pc, #508]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512e:	4a7e      	ldr	r2, [pc, #504]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 8005130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005134:	6413      	str	r3, [r2, #64]	@ 0x40
 8005136:	4b7c      	ldr	r3, [pc, #496]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005142:	2301      	movs	r3, #1
 8005144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005146:	4b79      	ldr	r3, [pc, #484]	@ (800532c <HAL_RCC_OscConfig+0x4b0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514e:	2b00      	cmp	r3, #0
 8005150:	d118      	bne.n	8005184 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005152:	4b76      	ldr	r3, [pc, #472]	@ (800532c <HAL_RCC_OscConfig+0x4b0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a75      	ldr	r2, [pc, #468]	@ (800532c <HAL_RCC_OscConfig+0x4b0>)
 8005158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800515c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800515e:	f7fe fb4d 	bl	80037fc <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005166:	f7fe fb49 	bl	80037fc <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e118      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005178:	4b6c      	ldr	r3, [pc, #432]	@ (800532c <HAL_RCC_OscConfig+0x4b0>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d106      	bne.n	800519a <HAL_RCC_OscConfig+0x31e>
 800518c:	4b66      	ldr	r3, [pc, #408]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005190:	4a65      	ldr	r2, [pc, #404]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	6713      	str	r3, [r2, #112]	@ 0x70
 8005198:	e01c      	b.n	80051d4 <HAL_RCC_OscConfig+0x358>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b05      	cmp	r3, #5
 80051a0:	d10c      	bne.n	80051bc <HAL_RCC_OscConfig+0x340>
 80051a2:	4b61      	ldr	r3, [pc, #388]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a6:	4a60      	ldr	r2, [pc, #384]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 80051a8:	f043 0304 	orr.w	r3, r3, #4
 80051ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ae:	4b5e      	ldr	r3, [pc, #376]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b2:	4a5d      	ldr	r2, [pc, #372]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ba:	e00b      	b.n	80051d4 <HAL_RCC_OscConfig+0x358>
 80051bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 80051be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c0:	4a59      	ldr	r2, [pc, #356]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c8:	4b57      	ldr	r3, [pc, #348]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051cc:	4a56      	ldr	r2, [pc, #344]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 80051ce:	f023 0304 	bic.w	r3, r3, #4
 80051d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d015      	beq.n	8005208 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051dc:	f7fe fb0e 	bl	80037fc <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e2:	e00a      	b.n	80051fa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e4:	f7fe fb0a 	bl	80037fc <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e0d7      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0ee      	beq.n	80051e4 <HAL_RCC_OscConfig+0x368>
 8005206:	e014      	b.n	8005232 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005208:	f7fe faf8 	bl	80037fc <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520e:	e00a      	b.n	8005226 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005210:	f7fe faf4 	bl	80037fc <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e0c1      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005226:	4b40      	ldr	r3, [pc, #256]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1ee      	bne.n	8005210 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005232:	7dfb      	ldrb	r3, [r7, #23]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d105      	bne.n	8005244 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005238:	4b3b      	ldr	r3, [pc, #236]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	4a3a      	ldr	r2, [pc, #232]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 800523e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005242:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 80ad 	beq.w	80053a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800524e:	4b36      	ldr	r3, [pc, #216]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 030c 	and.w	r3, r3, #12
 8005256:	2b08      	cmp	r3, #8
 8005258:	d060      	beq.n	800531c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d145      	bne.n	80052ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005262:	4b33      	ldr	r3, [pc, #204]	@ (8005330 <HAL_RCC_OscConfig+0x4b4>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005268:	f7fe fac8 	bl	80037fc <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005270:	f7fe fac4 	bl	80037fc <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e093      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005282:	4b29      	ldr	r3, [pc, #164]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f0      	bne.n	8005270 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69da      	ldr	r2, [r3, #28]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529c:	019b      	lsls	r3, r3, #6
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	3b01      	subs	r3, #1
 80052a8:	041b      	lsls	r3, r3, #16
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b0:	061b      	lsls	r3, r3, #24
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b8:	071b      	lsls	r3, r3, #28
 80052ba:	491b      	ldr	r1, [pc, #108]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005330 <HAL_RCC_OscConfig+0x4b4>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c6:	f7fe fa99 	bl	80037fc <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ce:	f7fe fa95 	bl	80037fc <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e064      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e0:	4b11      	ldr	r3, [pc, #68]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x452>
 80052ec:	e05c      	b.n	80053a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ee:	4b10      	ldr	r3, [pc, #64]	@ (8005330 <HAL_RCC_OscConfig+0x4b4>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f4:	f7fe fa82 	bl	80037fc <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fc:	f7fe fa7e 	bl	80037fc <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e04d      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530e:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <HAL_RCC_OscConfig+0x4ac>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x480>
 800531a:	e045      	b.n	80053a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d107      	bne.n	8005334 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e040      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
 8005328:	40023800 	.word	0x40023800
 800532c:	40007000 	.word	0x40007000
 8005330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005334:	4b1f      	ldr	r3, [pc, #124]	@ (80053b4 <HAL_RCC_OscConfig+0x538>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d030      	beq.n	80053a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800534c:	429a      	cmp	r2, r3
 800534e:	d129      	bne.n	80053a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d122      	bne.n	80053a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800536a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800536c:	4293      	cmp	r3, r2
 800536e:	d119      	bne.n	80053a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	3b01      	subs	r3, #1
 800537e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005380:	429a      	cmp	r2, r3
 8005382:	d10f      	bne.n	80053a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005390:	429a      	cmp	r2, r3
 8005392:	d107      	bne.n	80053a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d001      	beq.n	80053a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800

080053b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e041      	b.n	800544e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fd fdf6 	bl	8002fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4619      	mov	r1, r3
 80053f6:	4610      	mov	r0, r2
 80053f8:	f000 fd8c 	bl	8005f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d001      	beq.n	8005470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e04e      	b.n	800550e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a23      	ldr	r2, [pc, #140]	@ (800551c <HAL_TIM_Base_Start_IT+0xc4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d022      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800549a:	d01d      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005520 <HAL_TIM_Base_Start_IT+0xc8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005524 <HAL_TIM_Base_Start_IT+0xcc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005528 <HAL_TIM_Base_Start_IT+0xd0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1b      	ldr	r2, [pc, #108]	@ (800552c <HAL_TIM_Base_Start_IT+0xd4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a19      	ldr	r2, [pc, #100]	@ (8005530 <HAL_TIM_Base_Start_IT+0xd8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x80>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a18      	ldr	r2, [pc, #96]	@ (8005534 <HAL_TIM_Base_Start_IT+0xdc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d111      	bne.n	80054fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b06      	cmp	r3, #6
 80054e8:	d010      	beq.n	800550c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fa:	e007      	b.n	800550c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40010000 	.word	0x40010000
 8005520:	40000400 	.word	0x40000400
 8005524:	40000800 	.word	0x40000800
 8005528:	40000c00 	.word	0x40000c00
 800552c:	40010400 	.word	0x40010400
 8005530:	40014000 	.word	0x40014000
 8005534:	40001800 	.word	0x40001800

08005538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e041      	b.n	80055ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fd fd5e 	bl	8003020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f000 fccc 	bl	8005f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <HAL_TIM_PWM_Start+0x24>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	bf14      	ite	ne
 80055f4:	2301      	movne	r3, #1
 80055f6:	2300      	moveq	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	e022      	b.n	8005642 <HAL_TIM_PWM_Start+0x6a>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d109      	bne.n	8005616 <HAL_TIM_PWM_Start+0x3e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b01      	cmp	r3, #1
 800560c:	bf14      	ite	ne
 800560e:	2301      	movne	r3, #1
 8005610:	2300      	moveq	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	e015      	b.n	8005642 <HAL_TIM_PWM_Start+0x6a>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d109      	bne.n	8005630 <HAL_TIM_PWM_Start+0x58>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	bf14      	ite	ne
 8005628:	2301      	movne	r3, #1
 800562a:	2300      	moveq	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	e008      	b.n	8005642 <HAL_TIM_PWM_Start+0x6a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b01      	cmp	r3, #1
 800563a:	bf14      	ite	ne
 800563c:	2301      	movne	r3, #1
 800563e:	2300      	moveq	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e07c      	b.n	8005744 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <HAL_TIM_PWM_Start+0x82>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005658:	e013      	b.n	8005682 <HAL_TIM_PWM_Start+0xaa>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b04      	cmp	r3, #4
 800565e:	d104      	bne.n	800566a <HAL_TIM_PWM_Start+0x92>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005668:	e00b      	b.n	8005682 <HAL_TIM_PWM_Start+0xaa>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b08      	cmp	r3, #8
 800566e:	d104      	bne.n	800567a <HAL_TIM_PWM_Start+0xa2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005678:	e003      	b.n	8005682 <HAL_TIM_PWM_Start+0xaa>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2201      	movs	r2, #1
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 ff32 	bl	80064f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2d      	ldr	r2, [pc, #180]	@ (800574c <HAL_TIM_PWM_Start+0x174>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_TIM_PWM_Start+0xcc>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a2c      	ldr	r2, [pc, #176]	@ (8005750 <HAL_TIM_PWM_Start+0x178>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d101      	bne.n	80056a8 <HAL_TIM_PWM_Start+0xd0>
 80056a4:	2301      	movs	r3, #1
 80056a6:	e000      	b.n	80056aa <HAL_TIM_PWM_Start+0xd2>
 80056a8:	2300      	movs	r3, #0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a22      	ldr	r2, [pc, #136]	@ (800574c <HAL_TIM_PWM_Start+0x174>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d022      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d0:	d01d      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005754 <HAL_TIM_PWM_Start+0x17c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d018      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005758 <HAL_TIM_PWM_Start+0x180>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1c      	ldr	r2, [pc, #112]	@ (800575c <HAL_TIM_PWM_Start+0x184>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00e      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a16      	ldr	r2, [pc, #88]	@ (8005750 <HAL_TIM_PWM_Start+0x178>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d009      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a18      	ldr	r2, [pc, #96]	@ (8005760 <HAL_TIM_PWM_Start+0x188>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <HAL_TIM_PWM_Start+0x136>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a16      	ldr	r2, [pc, #88]	@ (8005764 <HAL_TIM_PWM_Start+0x18c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d111      	bne.n	8005732 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b06      	cmp	r3, #6
 800571e:	d010      	beq.n	8005742 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005730:	e007      	b.n	8005742 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0201 	orr.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40010000 	.word	0x40010000
 8005750:	40010400 	.word	0x40010400
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800
 800575c:	40000c00 	.word	0x40000c00
 8005760:	40014000 	.word	0x40014000
 8005764:	40001800 	.word	0x40001800

08005768 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e097      	b.n	80058ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7fd fbd5 	bl	8002f40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2202      	movs	r2, #2
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057ac:	f023 0307 	bic.w	r3, r3, #7
 80057b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3304      	adds	r3, #4
 80057ba:	4619      	mov	r1, r3
 80057bc:	4610      	mov	r0, r2
 80057be:	f000 fba9 	bl	8005f14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ea:	f023 0303 	bic.w	r3, r3, #3
 80057ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	4313      	orrs	r3, r2
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005808:	f023 030c 	bic.w	r3, r3, #12
 800580c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005814:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	4313      	orrs	r3, r2
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	011a      	lsls	r2, r3, #4
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	031b      	lsls	r3, r3, #12
 8005838:	4313      	orrs	r3, r2
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005846:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800584e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	4313      	orrs	r3, r2
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d110      	bne.n	8005906 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d102      	bne.n	80058f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058ea:	7b7b      	ldrb	r3, [r7, #13]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d001      	beq.n	80058f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e069      	b.n	80059c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005904:	e031      	b.n	800596a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b04      	cmp	r3, #4
 800590a:	d110      	bne.n	800592e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800590c:	7bbb      	ldrb	r3, [r7, #14]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d102      	bne.n	8005918 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005912:	7b3b      	ldrb	r3, [r7, #12]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d001      	beq.n	800591c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e055      	b.n	80059c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800592c:	e01d      	b.n	800596a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800592e:	7bfb      	ldrb	r3, [r7, #15]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d108      	bne.n	8005946 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005934:	7bbb      	ldrb	r3, [r7, #14]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d105      	bne.n	8005946 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800593a:	7b7b      	ldrb	r3, [r7, #13]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d102      	bne.n	8005946 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005940:	7b3b      	ldrb	r3, [r7, #12]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d001      	beq.n	800594a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e03e      	b.n	80059c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2202      	movs	r2, #2
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2202      	movs	r2, #2
 8005956:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_TIM_Encoder_Start+0xc4>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b04      	cmp	r3, #4
 8005974:	d008      	beq.n	8005988 <HAL_TIM_Encoder_Start+0xd4>
 8005976:	e00f      	b.n	8005998 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2201      	movs	r2, #1
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fdb7 	bl	80064f4 <TIM_CCxChannelCmd>
      break;
 8005986:	e016      	b.n	80059b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2201      	movs	r2, #1
 800598e:	2104      	movs	r1, #4
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fdaf 	bl	80064f4 <TIM_CCxChannelCmd>
      break;
 8005996:	e00e      	b.n	80059b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2201      	movs	r2, #1
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fda7 	bl	80064f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2201      	movs	r2, #1
 80059ac:	2104      	movs	r1, #4
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fda0 	bl	80064f4 <TIM_CCxChannelCmd>
      break;
 80059b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0201 	orr.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d020      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01b      	beq.n	8005a34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0202 	mvn.w	r2, #2
 8005a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fa5b 	bl	8005ed6 <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa4d 	bl	8005ec2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fa5e 	bl	8005eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d020      	beq.n	8005a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01b      	beq.n	8005a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0204 	mvn.w	r2, #4
 8005a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa35 	bl	8005ed6 <HAL_TIM_IC_CaptureCallback>
 8005a6c:	e005      	b.n	8005a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa27 	bl	8005ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fa38 	bl	8005eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d020      	beq.n	8005acc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01b      	beq.n	8005acc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0208 	mvn.w	r2, #8
 8005a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2204      	movs	r2, #4
 8005aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa0f 	bl	8005ed6 <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa01 	bl	8005ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fa12 	bl	8005eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d020      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01b      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0210 	mvn.w	r2, #16
 8005ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2208      	movs	r2, #8
 8005aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f9e9 	bl	8005ed6 <HAL_TIM_IC_CaptureCallback>
 8005b04:	e005      	b.n	8005b12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f9db 	bl	8005ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f9ec 	bl	8005eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0201 	mvn.w	r2, #1
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fd fdde 	bl	80036f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00c      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fd76 	bl	800664c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00c      	beq.n	8005b84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d007      	beq.n	8005b84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f9bd 	bl	8005efe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00c      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d007      	beq.n	8005ba8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0220 	mvn.w	r2, #32
 8005ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fd48 	bl	8006638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ba8:	bf00      	nop
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e0ae      	b.n	8005d2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b0c      	cmp	r3, #12
 8005bda:	f200 809f 	bhi.w	8005d1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bde:	a201      	add	r2, pc, #4	@ (adr r2, 8005be4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be4:	08005c19 	.word	0x08005c19
 8005be8:	08005d1d 	.word	0x08005d1d
 8005bec:	08005d1d 	.word	0x08005d1d
 8005bf0:	08005d1d 	.word	0x08005d1d
 8005bf4:	08005c59 	.word	0x08005c59
 8005bf8:	08005d1d 	.word	0x08005d1d
 8005bfc:	08005d1d 	.word	0x08005d1d
 8005c00:	08005d1d 	.word	0x08005d1d
 8005c04:	08005c9b 	.word	0x08005c9b
 8005c08:	08005d1d 	.word	0x08005d1d
 8005c0c:	08005d1d 	.word	0x08005d1d
 8005c10:	08005d1d 	.word	0x08005d1d
 8005c14:	08005cdb 	.word	0x08005cdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fa1e 	bl	8006060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0208 	orr.w	r2, r2, #8
 8005c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0204 	bic.w	r2, r2, #4
 8005c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6999      	ldr	r1, [r3, #24]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	619a      	str	r2, [r3, #24]
      break;
 8005c56:	e064      	b.n	8005d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fa6e 	bl	8006140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699a      	ldr	r2, [r3, #24]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6999      	ldr	r1, [r3, #24]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	021a      	lsls	r2, r3, #8
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	619a      	str	r2, [r3, #24]
      break;
 8005c98:	e043      	b.n	8005d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fac3 	bl	800622c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f042 0208 	orr.w	r2, r2, #8
 8005cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0204 	bic.w	r2, r2, #4
 8005cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69d9      	ldr	r1, [r3, #28]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	61da      	str	r2, [r3, #28]
      break;
 8005cd8:	e023      	b.n	8005d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fb17 	bl	8006314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69da      	ldr	r2, [r3, #28]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69d9      	ldr	r1, [r3, #28]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	021a      	lsls	r2, r3, #8
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	61da      	str	r2, [r3, #28]
      break;
 8005d1a:	e002      	b.n	8005d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_TIM_ConfigClockSource+0x1c>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e0b4      	b.n	8005eba <HAL_TIM_ConfigClockSource+0x186>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d88:	d03e      	beq.n	8005e08 <HAL_TIM_ConfigClockSource+0xd4>
 8005d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d8e:	f200 8087 	bhi.w	8005ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d96:	f000 8086 	beq.w	8005ea6 <HAL_TIM_ConfigClockSource+0x172>
 8005d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d9e:	d87f      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8005da0:	2b70      	cmp	r3, #112	@ 0x70
 8005da2:	d01a      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0xa6>
 8005da4:	2b70      	cmp	r3, #112	@ 0x70
 8005da6:	d87b      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8005da8:	2b60      	cmp	r3, #96	@ 0x60
 8005daa:	d050      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x11a>
 8005dac:	2b60      	cmp	r3, #96	@ 0x60
 8005dae:	d877      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8005db0:	2b50      	cmp	r3, #80	@ 0x50
 8005db2:	d03c      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0xfa>
 8005db4:	2b50      	cmp	r3, #80	@ 0x50
 8005db6:	d873      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8005db8:	2b40      	cmp	r3, #64	@ 0x40
 8005dba:	d058      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x13a>
 8005dbc:	2b40      	cmp	r3, #64	@ 0x40
 8005dbe:	d86f      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc0:	2b30      	cmp	r3, #48	@ 0x30
 8005dc2:	d064      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x15a>
 8005dc4:	2b30      	cmp	r3, #48	@ 0x30
 8005dc6:	d86b      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d060      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x15a>
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d867      	bhi.n	8005ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d05c      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x15a>
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d05a      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x15a>
 8005dd8:	e062      	b.n	8005ea0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dea:	f000 fb63 	bl	80064b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005dfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	609a      	str	r2, [r3, #8]
      break;
 8005e06:	e04f      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e18:	f000 fb4c 	bl	80064b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e2a:	609a      	str	r2, [r3, #8]
      break;
 8005e2c:	e03c      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f000 fac0 	bl	80063c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2150      	movs	r1, #80	@ 0x50
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fb19 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 8005e4c:	e02c      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f000 fadf 	bl	800641e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2160      	movs	r1, #96	@ 0x60
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fb09 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 8005e6c:	e01c      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f000 faa0 	bl	80063c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2140      	movs	r1, #64	@ 0x40
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 faf9 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 8005e8c:	e00c      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4619      	mov	r1, r3
 8005e98:	4610      	mov	r0, r2
 8005e9a:	f000 faf0 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 8005e9e:	e003      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea4:	e000      	b.n	8005ea8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a43      	ldr	r2, [pc, #268]	@ (8006034 <TIM_Base_SetConfig+0x120>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d013      	beq.n	8005f54 <TIM_Base_SetConfig+0x40>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f32:	d00f      	beq.n	8005f54 <TIM_Base_SetConfig+0x40>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a40      	ldr	r2, [pc, #256]	@ (8006038 <TIM_Base_SetConfig+0x124>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00b      	beq.n	8005f54 <TIM_Base_SetConfig+0x40>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a3f      	ldr	r2, [pc, #252]	@ (800603c <TIM_Base_SetConfig+0x128>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d007      	beq.n	8005f54 <TIM_Base_SetConfig+0x40>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a3e      	ldr	r2, [pc, #248]	@ (8006040 <TIM_Base_SetConfig+0x12c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d003      	beq.n	8005f54 <TIM_Base_SetConfig+0x40>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a3d      	ldr	r2, [pc, #244]	@ (8006044 <TIM_Base_SetConfig+0x130>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d108      	bne.n	8005f66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a32      	ldr	r2, [pc, #200]	@ (8006034 <TIM_Base_SetConfig+0x120>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d02b      	beq.n	8005fc6 <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f74:	d027      	beq.n	8005fc6 <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a2f      	ldr	r2, [pc, #188]	@ (8006038 <TIM_Base_SetConfig+0x124>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d023      	beq.n	8005fc6 <TIM_Base_SetConfig+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a2e      	ldr	r2, [pc, #184]	@ (800603c <TIM_Base_SetConfig+0x128>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d01f      	beq.n	8005fc6 <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a2d      	ldr	r2, [pc, #180]	@ (8006040 <TIM_Base_SetConfig+0x12c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d01b      	beq.n	8005fc6 <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a2c      	ldr	r2, [pc, #176]	@ (8006044 <TIM_Base_SetConfig+0x130>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d017      	beq.n	8005fc6 <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a2b      	ldr	r2, [pc, #172]	@ (8006048 <TIM_Base_SetConfig+0x134>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <TIM_Base_SetConfig+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a2a      	ldr	r2, [pc, #168]	@ (800604c <TIM_Base_SetConfig+0x138>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_Base_SetConfig+0xb2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a29      	ldr	r2, [pc, #164]	@ (8006050 <TIM_Base_SetConfig+0x13c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_Base_SetConfig+0xb2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a28      	ldr	r2, [pc, #160]	@ (8006054 <TIM_Base_SetConfig+0x140>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_Base_SetConfig+0xb2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a27      	ldr	r2, [pc, #156]	@ (8006058 <TIM_Base_SetConfig+0x144>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_Base_SetConfig+0xb2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a26      	ldr	r2, [pc, #152]	@ (800605c <TIM_Base_SetConfig+0x148>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d108      	bne.n	8005fd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8006034 <TIM_Base_SetConfig+0x120>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d003      	beq.n	8006006 <TIM_Base_SetConfig+0xf2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a10      	ldr	r2, [pc, #64]	@ (8006044 <TIM_Base_SetConfig+0x130>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d103      	bne.n	800600e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f043 0204 	orr.w	r2, r3, #4
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	601a      	str	r2, [r3, #0]
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40010000 	.word	0x40010000
 8006038:	40000400 	.word	0x40000400
 800603c:	40000800 	.word	0x40000800
 8006040:	40000c00 	.word	0x40000c00
 8006044:	40010400 	.word	0x40010400
 8006048:	40014000 	.word	0x40014000
 800604c:	40014400 	.word	0x40014400
 8006050:	40014800 	.word	0x40014800
 8006054:	40001800 	.word	0x40001800
 8006058:	40001c00 	.word	0x40001c00
 800605c:	40002000 	.word	0x40002000

08006060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	f023 0201 	bic.w	r2, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f023 0302 	bic.w	r3, r3, #2
 80060a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a20      	ldr	r2, [pc, #128]	@ (8006138 <TIM_OC1_SetConfig+0xd8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d003      	beq.n	80060c4 <TIM_OC1_SetConfig+0x64>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a1f      	ldr	r2, [pc, #124]	@ (800613c <TIM_OC1_SetConfig+0xdc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d10c      	bne.n	80060de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 0308 	bic.w	r3, r3, #8
 80060ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f023 0304 	bic.w	r3, r3, #4
 80060dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a15      	ldr	r2, [pc, #84]	@ (8006138 <TIM_OC1_SetConfig+0xd8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_OC1_SetConfig+0x8e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a14      	ldr	r2, [pc, #80]	@ (800613c <TIM_OC1_SetConfig+0xdc>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d111      	bne.n	8006112 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	621a      	str	r2, [r3, #32]
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	40010000 	.word	0x40010000
 800613c:	40010400 	.word	0x40010400

08006140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f023 0210 	bic.w	r2, r3, #16
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800616e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f023 0320 	bic.w	r3, r3, #32
 800618a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a22      	ldr	r2, [pc, #136]	@ (8006224 <TIM_OC2_SetConfig+0xe4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <TIM_OC2_SetConfig+0x68>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a21      	ldr	r2, [pc, #132]	@ (8006228 <TIM_OC2_SetConfig+0xe8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d10d      	bne.n	80061c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a17      	ldr	r2, [pc, #92]	@ (8006224 <TIM_OC2_SetConfig+0xe4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_OC2_SetConfig+0x94>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a16      	ldr	r2, [pc, #88]	@ (8006228 <TIM_OC2_SetConfig+0xe8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d113      	bne.n	80061fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40010000 	.word	0x40010000
 8006228:	40010400 	.word	0x40010400

0800622c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a21      	ldr	r2, [pc, #132]	@ (800630c <TIM_OC3_SetConfig+0xe0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d003      	beq.n	8006292 <TIM_OC3_SetConfig+0x66>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a20      	ldr	r2, [pc, #128]	@ (8006310 <TIM_OC3_SetConfig+0xe4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d10d      	bne.n	80062ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	021b      	lsls	r3, r3, #8
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a16      	ldr	r2, [pc, #88]	@ (800630c <TIM_OC3_SetConfig+0xe0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d003      	beq.n	80062be <TIM_OC3_SetConfig+0x92>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a15      	ldr	r2, [pc, #84]	@ (8006310 <TIM_OC3_SetConfig+0xe4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d113      	bne.n	80062e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	621a      	str	r2, [r3, #32]
}
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	40010000 	.word	0x40010000
 8006310:	40010400 	.word	0x40010400

08006314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800634a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	021b      	lsls	r3, r3, #8
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4313      	orrs	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800635e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	031b      	lsls	r3, r3, #12
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a12      	ldr	r2, [pc, #72]	@ (80063b8 <TIM_OC4_SetConfig+0xa4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_OC4_SetConfig+0x68>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a11      	ldr	r2, [pc, #68]	@ (80063bc <TIM_OC4_SetConfig+0xa8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d109      	bne.n	8006390 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	019b      	lsls	r3, r3, #6
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40010000 	.word	0x40010000
 80063bc:	40010400 	.word	0x40010400

080063c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f023 0201 	bic.w	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 030a 	bic.w	r3, r3, #10
 80063fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800641e:	b480      	push	{r7}
 8006420:	b087      	sub	sp, #28
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	f023 0210 	bic.w	r2, r3, #16
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	031b      	lsls	r3, r3, #12
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800645a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	f043 0307 	orr.w	r3, r3, #7
 80064a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	609a      	str	r2, [r3, #8]
}
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	021a      	lsls	r2, r3, #8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4313      	orrs	r3, r2
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	609a      	str	r2, [r3, #8]
}
 80064e8:	bf00      	nop
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	2201      	movs	r2, #1
 8006508:	fa02 f303 	lsl.w	r3, r2, r3
 800650c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	43db      	mvns	r3, r3
 8006516:	401a      	ands	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a1a      	ldr	r2, [r3, #32]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	fa01 f303 	lsl.w	r3, r1, r3
 800652c:	431a      	orrs	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006554:	2302      	movs	r3, #2
 8006556:	e05a      	b.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a21      	ldr	r2, [pc, #132]	@ (800661c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d022      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065a4:	d01d      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d018      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d013      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1a      	ldr	r2, [pc, #104]	@ (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00e      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a18      	ldr	r2, [pc, #96]	@ (800662c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d009      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a17      	ldr	r2, [pc, #92]	@ (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d004      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a15      	ldr	r2, [pc, #84]	@ (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d10c      	bne.n	80065fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40010000 	.word	0x40010000
 8006620:	40000400 	.word	0x40000400
 8006624:	40000800 	.word	0x40000800
 8006628:	40000c00 	.word	0x40000c00
 800662c:	40010400 	.word	0x40010400
 8006630:	40014000 	.word	0x40014000
 8006634:	40001800 	.word	0x40001800

08006638 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e042      	b.n	80066f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fc fd64 	bl	8003154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2224      	movs	r2, #36	@ 0x24
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 f8d9 	bl	800785c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	@ 0x28
 8006704:	af02      	add	r7, sp, #8
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b20      	cmp	r3, #32
 800671e:	d175      	bne.n	800680c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_UART_Transmit+0x2c>
 8006726:	88fb      	ldrh	r3, [r7, #6]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e06e      	b.n	800680e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2221      	movs	r2, #33	@ 0x21
 800673a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800673e:	f7fd f85d 	bl	80037fc <HAL_GetTick>
 8006742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	88fa      	ldrh	r2, [r7, #6]
 800674e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006758:	d108      	bne.n	800676c <HAL_UART_Transmit+0x6c>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d104      	bne.n	800676c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006762:	2300      	movs	r3, #0
 8006764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	e003      	b.n	8006774 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006770:	2300      	movs	r3, #0
 8006772:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006774:	e02e      	b.n	80067d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2200      	movs	r2, #0
 800677e:	2180      	movs	r1, #128	@ 0x80
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 fdaa 	bl	80072da <UART_WaitOnFlagUntilTimeout>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e03a      	b.n	800680e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10b      	bne.n	80067b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	3302      	adds	r3, #2
 80067b2:	61bb      	str	r3, [r7, #24]
 80067b4:	e007      	b.n	80067c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	781a      	ldrb	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	3301      	adds	r3, #1
 80067c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1cb      	bne.n	8006776 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2200      	movs	r2, #0
 80067e6:	2140      	movs	r1, #64	@ 0x40
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fd76 	bl	80072da <UART_WaitOnFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e006      	b.n	800680e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	e000      	b.n	800680e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800680c:	2302      	movs	r3, #2
  }
}
 800680e:	4618      	mov	r0, r3
 8006810:	3720      	adds	r7, #32
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08c      	sub	sp, #48	@ 0x30
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b20      	cmp	r3, #32
 8006830:	d162      	bne.n	80068f8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_UART_Transmit_DMA+0x26>
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e05b      	b.n	80068fa <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	88fa      	ldrh	r2, [r7, #6]
 8006852:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2221      	movs	r2, #33	@ 0x21
 800685e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006866:	4a27      	ldr	r2, [pc, #156]	@ (8006904 <HAL_UART_Transmit_DMA+0xec>)
 8006868:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686e:	4a26      	ldr	r2, [pc, #152]	@ (8006908 <HAL_UART_Transmit_DMA+0xf0>)
 8006870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006876:	4a25      	ldr	r2, [pc, #148]	@ (800690c <HAL_UART_Transmit_DMA+0xf4>)
 8006878:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687e:	2200      	movs	r2, #0
 8006880:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006882:	f107 0308 	add.w	r3, r7, #8
 8006886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800688c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688e:	6819      	ldr	r1, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3304      	adds	r3, #4
 8006896:	461a      	mov	r2, r3
 8006898:	88fb      	ldrh	r3, [r7, #6]
 800689a:	f7fd f94b 	bl	8003b34 <HAL_DMA_Start_IT>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d008      	beq.n	80068b6 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2210      	movs	r2, #16
 80068a8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e021      	b.n	80068fa <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3314      	adds	r3, #20
 80068c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	617b      	str	r3, [r7, #20]
   return(result);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3314      	adds	r3, #20
 80068de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80068e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6a39      	ldr	r1, [r7, #32]
 80068e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e5      	bne.n	80068c0 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	e000      	b.n	80068fa <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80068f8:	2302      	movs	r3, #2
  }
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3730      	adds	r7, #48	@ 0x30
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	08007029 	.word	0x08007029
 8006908:	080070c3 	.word	0x080070c3
 800690c:	08007247 	.word	0x08007247

08006910 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	4613      	mov	r3, r2
 800691c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b20      	cmp	r3, #32
 8006928:	d112      	bne.n	8006950 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_UART_Receive_DMA+0x26>
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e00b      	b.n	8006952 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006940:	88fb      	ldrh	r3, [r7, #6]
 8006942:	461a      	mov	r2, r3
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 fd20 	bl	800738c <UART_Start_Receive_DMA>
 800694c:	4603      	mov	r3, r0
 800694e:	e000      	b.n	8006952 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006950:	2302      	movs	r3, #2
  }
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b090      	sub	sp, #64	@ 0x40
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006962:	2300      	movs	r3, #0
 8006964:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006970:	2b80      	cmp	r3, #128	@ 0x80
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b21      	cmp	r3, #33	@ 0x21
 8006986:	d128      	bne.n	80069da <HAL_UART_DMAStop+0x80>
 8006988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800698a:	2b00      	cmp	r3, #0
 800698c:	d025      	beq.n	80069da <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3314      	adds	r3, #20
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	623b      	str	r3, [r7, #32]
   return(result);
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3314      	adds	r3, #20
 80069ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80069b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e5      	bne.n	800698e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fd f908 	bl	8003be4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fd7f 	bl	80074d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e4:	2b40      	cmp	r3, #64	@ 0x40
 80069e6:	bf0c      	ite	eq
 80069e8:	2301      	moveq	r3, #1
 80069ea:	2300      	movne	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b22      	cmp	r3, #34	@ 0x22
 80069fa:	d128      	bne.n	8006a4e <HAL_UART_DMAStop+0xf4>
 80069fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d025      	beq.n	8006a4e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3314      	adds	r3, #20
 8006a08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3314      	adds	r3, #20
 8006a20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a22:	61fa      	str	r2, [r7, #28]
 8006a24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	69b9      	ldr	r1, [r7, #24]
 8006a28:	69fa      	ldr	r2, [r7, #28]
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e5      	bne.n	8006a02 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fd f8ce 	bl	8003be4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fd6d 	bl	8007528 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3740      	adds	r7, #64	@ 0x40
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b0ba      	sub	sp, #232	@ 0xe8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10f      	bne.n	8006abe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d009      	beq.n	8006abe <HAL_UART_IRQHandler+0x66>
 8006aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fe12 	bl	80076e0 <UART_Receive_IT>
      return;
 8006abc:	e273      	b.n	8006fa6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 80de 	beq.w	8006c84 <HAL_UART_IRQHandler+0x22c>
 8006ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d106      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ad8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 80d1 	beq.w	8006c84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <HAL_UART_IRQHandler+0xae>
 8006aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006afe:	f043 0201 	orr.w	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0a:	f003 0304 	and.w	r3, r3, #4
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00b      	beq.n	8006b2a <HAL_UART_IRQHandler+0xd2>
 8006b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b22:	f043 0202 	orr.w	r2, r3, #2
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00b      	beq.n	8006b4e <HAL_UART_IRQHandler+0xf6>
 8006b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b46:	f043 0204 	orr.w	r2, r3, #4
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d011      	beq.n	8006b7e <HAL_UART_IRQHandler+0x126>
 8006b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d105      	bne.n	8006b72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d005      	beq.n	8006b7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b76:	f043 0208 	orr.w	r2, r3, #8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 820a 	beq.w	8006f9c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d008      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x14e>
 8006b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b98:	f003 0320 	and.w	r3, r3, #32
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fd9d 	bl	80076e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bb0:	2b40      	cmp	r3, #64	@ 0x40
 8006bb2:	bf0c      	ite	eq
 8006bb4:	2301      	moveq	r3, #1
 8006bb6:	2300      	movne	r3, #0
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc2:	f003 0308 	and.w	r3, r3, #8
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x17a>
 8006bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d04f      	beq.n	8006c72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fca8 	bl	8007528 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be2:	2b40      	cmp	r3, #64	@ 0x40
 8006be4:	d141      	bne.n	8006c6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3314      	adds	r3, #20
 8006bec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3314      	adds	r3, #20
 8006c0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1d9      	bne.n	8006be6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d013      	beq.n	8006c62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c3e:	4a8a      	ldr	r2, [pc, #552]	@ (8006e68 <HAL_UART_IRQHandler+0x410>)
 8006c40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fd f83c 	bl	8003cc4 <HAL_DMA_Abort_IT>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d016      	beq.n	8006c80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c60:	e00e      	b.n	8006c80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f9ca 	bl	8006ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c68:	e00a      	b.n	8006c80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f9c6 	bl	8006ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c70:	e006      	b.n	8006c80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f9c2 	bl	8006ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006c7e:	e18d      	b.n	8006f9c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c80:	bf00      	nop
    return;
 8006c82:	e18b      	b.n	8006f9c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	f040 8167 	bne.w	8006f5c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c92:	f003 0310 	and.w	r3, r3, #16
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8160 	beq.w	8006f5c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ca0:	f003 0310 	and.w	r3, r3, #16
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 8159 	beq.w	8006f5c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006caa:	2300      	movs	r3, #0
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60bb      	str	r3, [r7, #8]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	60bb      	str	r3, [r7, #8]
 8006cbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cca:	2b40      	cmp	r3, #64	@ 0x40
 8006ccc:	f040 80ce 	bne.w	8006e6c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 80a9 	beq.w	8006e38 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	f080 80a2 	bcs.w	8006e38 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d06:	f000 8088 	beq.w	8006e1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	330c      	adds	r3, #12
 8006d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	330c      	adds	r3, #12
 8006d32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006d36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1d9      	bne.n	8006d0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3314      	adds	r3, #20
 8006d5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3314      	adds	r3, #20
 8006d76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e1      	bne.n	8006d56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3314      	adds	r3, #20
 8006d98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3314      	adds	r3, #20
 8006db2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006db6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006db8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006dbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006dc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e3      	bne.n	8006d92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	330c      	adds	r3, #12
 8006dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dea:	f023 0310 	bic.w	r3, r3, #16
 8006dee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	330c      	adds	r3, #12
 8006df8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006dfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006dfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e3      	bne.n	8006dd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fc fee5 	bl	8003be4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f8ed 	bl	8007010 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006e36:	e0b3      	b.n	8006fa0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e40:	429a      	cmp	r2, r3
 8006e42:	f040 80ad 	bne.w	8006fa0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e50:	f040 80a6 	bne.w	8006fa0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f8d5 	bl	8007010 <HAL_UARTEx_RxEventCallback>
      return;
 8006e66:	e09b      	b.n	8006fa0 <HAL_UART_IRQHandler+0x548>
 8006e68:	080075ef 	.word	0x080075ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 808e 	beq.w	8006fa4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8089 	beq.w	8006fa4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	330c      	adds	r3, #12
 8006e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006eb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006eb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e3      	bne.n	8006e92 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3314      	adds	r3, #20
 8006ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3314      	adds	r3, #20
 8006eea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006eee:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e3      	bne.n	8006eca <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0310 	bic.w	r3, r3, #16
 8006f26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	330c      	adds	r3, #12
 8006f30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f34:	61fa      	str	r2, [r7, #28]
 8006f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	69b9      	ldr	r1, [r7, #24]
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	617b      	str	r3, [r7, #20]
   return(result);
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e3      	bne.n	8006f10 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f85b 	bl	8007010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f5a:	e023      	b.n	8006fa4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d009      	beq.n	8006f7c <HAL_UART_IRQHandler+0x524>
 8006f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fb4b 	bl	8007610 <UART_Transmit_IT>
    return;
 8006f7a:	e014      	b.n	8006fa6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00e      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x54e>
 8006f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d008      	beq.n	8006fa6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fb8b 	bl	80076b0 <UART_EndTransmit_IT>
    return;
 8006f9a:	e004      	b.n	8006fa6 <HAL_UART_IRQHandler+0x54e>
    return;
 8006f9c:	bf00      	nop
 8006f9e:	e002      	b.n	8006fa6 <HAL_UART_IRQHandler+0x54e>
      return;
 8006fa0:	bf00      	nop
 8006fa2:	e000      	b.n	8006fa6 <HAL_UART_IRQHandler+0x54e>
      return;
 8006fa4:	bf00      	nop
  }
}
 8006fa6:	37e8      	adds	r7, #232	@ 0xe8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b090      	sub	sp, #64	@ 0x40
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007034:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007040:	2b00      	cmp	r3, #0
 8007042:	d137      	bne.n	80070b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007046:	2200      	movs	r2, #0
 8007048:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800704a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3314      	adds	r3, #20
 8007050:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	623b      	str	r3, [r7, #32]
   return(result);
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007060:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3314      	adds	r3, #20
 8007068:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800706a:	633a      	str	r2, [r7, #48]	@ 0x30
 800706c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e5      	bne.n	800704a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800707e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	330c      	adds	r3, #12
 8007084:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	60fb      	str	r3, [r7, #12]
   return(result);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007094:	637b      	str	r3, [r7, #52]	@ 0x34
 8007096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	330c      	adds	r3, #12
 800709c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800709e:	61fa      	str	r2, [r7, #28]
 80070a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	69b9      	ldr	r1, [r7, #24]
 80070a4:	69fa      	ldr	r2, [r7, #28]
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	617b      	str	r3, [r7, #20]
   return(result);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e5      	bne.n	800707e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070b2:	e002      	b.n	80070ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80070b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80070b6:	f7ff ff79 	bl	8006fac <HAL_UART_TxCpltCallback>
}
 80070ba:	bf00      	nop
 80070bc:	3740      	adds	r7, #64	@ 0x40
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f7ff ff75 	bl	8006fc0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b09c      	sub	sp, #112	@ 0x70
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d172      	bne.n	80071e0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80070fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070fc:	2200      	movs	r2, #0
 80070fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	330c      	adds	r3, #12
 8007106:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007112:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007116:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	330c      	adds	r3, #12
 800711e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007120:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007122:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007126:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800712e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e5      	bne.n	8007100 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3314      	adds	r3, #20
 800713a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007146:	f023 0301 	bic.w	r3, r3, #1
 800714a:	667b      	str	r3, [r7, #100]	@ 0x64
 800714c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3314      	adds	r3, #20
 8007152:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007154:	647a      	str	r2, [r7, #68]	@ 0x44
 8007156:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800715a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e5      	bne.n	8007134 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007168:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3314      	adds	r3, #20
 800716e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	623b      	str	r3, [r7, #32]
   return(result);
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800717e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3314      	adds	r3, #20
 8007186:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007188:	633a      	str	r2, [r7, #48]	@ 0x30
 800718a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800718e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e5      	bne.n	8007168 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800719c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d119      	bne.n	80071e0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0310 	bic.w	r3, r3, #16
 80071c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80071cc:	61fa      	str	r2, [r7, #28]
 80071ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	69b9      	ldr	r1, [r7, #24]
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	617b      	str	r3, [r7, #20]
   return(result);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e5      	bne.n	80071ac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e2:	2200      	movs	r2, #0
 80071e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d106      	bne.n	80071fc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071f2:	4619      	mov	r1, r3
 80071f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80071f6:	f7ff ff0b 	bl	8007010 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071fa:	e002      	b.n	8007202 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80071fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80071fe:	f7ff fee9 	bl	8006fd4 <HAL_UART_RxCpltCallback>
}
 8007202:	bf00      	nop
 8007204:	3770      	adds	r7, #112	@ 0x70
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007216:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2201      	movs	r2, #1
 800721c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007222:	2b01      	cmp	r3, #1
 8007224:	d108      	bne.n	8007238 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	b29b      	uxth	r3, r3
 800722e:	4619      	mov	r1, r3
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7ff feed 	bl	8007010 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007236:	e002      	b.n	800723e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff fed5 	bl	8006fe8 <HAL_UART_RxHalfCpltCallback>
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007256:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007262:	2b80      	cmp	r3, #128	@ 0x80
 8007264:	bf0c      	ite	eq
 8007266:	2301      	moveq	r3, #1
 8007268:	2300      	movne	r3, #0
 800726a:	b2db      	uxtb	r3, r3
 800726c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b21      	cmp	r3, #33	@ 0x21
 8007278:	d108      	bne.n	800728c <UART_DMAError+0x46>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2200      	movs	r2, #0
 8007284:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007286:	68b8      	ldr	r0, [r7, #8]
 8007288:	f000 f926 	bl	80074d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007296:	2b40      	cmp	r3, #64	@ 0x40
 8007298:	bf0c      	ite	eq
 800729a:	2301      	moveq	r3, #1
 800729c:	2300      	movne	r3, #0
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b22      	cmp	r3, #34	@ 0x22
 80072ac:	d108      	bne.n	80072c0 <UART_DMAError+0x7a>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2200      	movs	r2, #0
 80072b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80072ba:	68b8      	ldr	r0, [r7, #8]
 80072bc:	f000 f934 	bl	8007528 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c4:	f043 0210 	orr.w	r2, r3, #16
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072cc:	68b8      	ldr	r0, [r7, #8]
 80072ce:	f7ff fe95 	bl	8006ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b086      	sub	sp, #24
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	603b      	str	r3, [r7, #0]
 80072e6:	4613      	mov	r3, r2
 80072e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ea:	e03b      	b.n	8007364 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072f2:	d037      	beq.n	8007364 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072f4:	f7fc fa82 	bl	80037fc <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	6a3a      	ldr	r2, [r7, #32]
 8007300:	429a      	cmp	r2, r3
 8007302:	d302      	bcc.n	800730a <UART_WaitOnFlagUntilTimeout+0x30>
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e03a      	b.n	8007384 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d023      	beq.n	8007364 <UART_WaitOnFlagUntilTimeout+0x8a>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b80      	cmp	r3, #128	@ 0x80
 8007320:	d020      	beq.n	8007364 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b40      	cmp	r3, #64	@ 0x40
 8007326:	d01d      	beq.n	8007364 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b08      	cmp	r3, #8
 8007334:	d116      	bne.n	8007364 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	617b      	str	r3, [r7, #20]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f8eb 	bl	8007528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2208      	movs	r2, #8
 8007356:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e00f      	b.n	8007384 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	4013      	ands	r3, r2
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	429a      	cmp	r2, r3
 8007372:	bf0c      	ite	eq
 8007374:	2301      	moveq	r3, #1
 8007376:	2300      	movne	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	461a      	mov	r2, r3
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	429a      	cmp	r2, r3
 8007380:	d0b4      	beq.n	80072ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b098      	sub	sp, #96	@ 0x60
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	4613      	mov	r3, r2
 8007398:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	88fa      	ldrh	r2, [r7, #6]
 80073a4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2222      	movs	r2, #34	@ 0x22
 80073b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b8:	4a44      	ldr	r2, [pc, #272]	@ (80074cc <UART_Start_Receive_DMA+0x140>)
 80073ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c0:	4a43      	ldr	r2, [pc, #268]	@ (80074d0 <UART_Start_Receive_DMA+0x144>)
 80073c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c8:	4a42      	ldr	r2, [pc, #264]	@ (80074d4 <UART_Start_Receive_DMA+0x148>)
 80073ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d0:	2200      	movs	r2, #0
 80073d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80073d4:	f107 0308 	add.w	r3, r7, #8
 80073d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3304      	adds	r3, #4
 80073e4:	4619      	mov	r1, r3
 80073e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	88fb      	ldrh	r3, [r7, #6]
 80073ec:	f7fc fba2 	bl	8003b34 <HAL_DMA_Start_IT>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d008      	beq.n	8007408 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2210      	movs	r2, #16
 80073fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2220      	movs	r2, #32
 8007400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e05d      	b.n	80074c4 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007408:	2300      	movs	r3, #0
 800740a:	613b      	str	r3, [r7, #16]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	613b      	str	r3, [r7, #16]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d019      	beq.n	800745a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	330c      	adds	r3, #12
 800742c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800743c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	330c      	adds	r3, #12
 8007444:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007446:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007448:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800744c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e5      	bne.n	8007426 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3314      	adds	r3, #20
 8007460:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800746a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746c:	f043 0301 	orr.w	r3, r3, #1
 8007470:	657b      	str	r3, [r7, #84]	@ 0x54
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3314      	adds	r3, #20
 8007478:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800747a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800747c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e5      	bne.n	800745a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3314      	adds	r3, #20
 8007494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	617b      	str	r3, [r7, #20]
   return(result);
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3314      	adds	r3, #20
 80074ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80074ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80074b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6a39      	ldr	r1, [r7, #32]
 80074b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e5      	bne.n	800748e <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3760      	adds	r7, #96	@ 0x60
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	080070df 	.word	0x080070df
 80074d0:	0800720b 	.word	0x0800720b
 80074d4:	08007247 	.word	0x08007247

080074d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b089      	sub	sp, #36	@ 0x24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	330c      	adds	r3, #12
 80074e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80074f6:	61fb      	str	r3, [r7, #28]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	330c      	adds	r3, #12
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	61ba      	str	r2, [r7, #24]
 8007502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	6979      	ldr	r1, [r7, #20]
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	613b      	str	r3, [r7, #16]
   return(result);
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e5      	bne.n	80074e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800751c:	bf00      	nop
 800751e:	3724      	adds	r7, #36	@ 0x24
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007528:	b480      	push	{r7}
 800752a:	b095      	sub	sp, #84	@ 0x54
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	330c      	adds	r3, #12
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	330c      	adds	r3, #12
 800754e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007550:	643a      	str	r2, [r7, #64]	@ 0x40
 8007552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007554:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007556:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800755e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e5      	bne.n	8007530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3314      	adds	r3, #20
 800756a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	61fb      	str	r3, [r7, #28]
   return(result);
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f023 0301 	bic.w	r3, r3, #1
 800757a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3314      	adds	r3, #20
 8007582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007584:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800758a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e5      	bne.n	8007564 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759c:	2b01      	cmp	r3, #1
 800759e:	d119      	bne.n	80075d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	330c      	adds	r3, #12
 80075a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f023 0310 	bic.w	r3, r3, #16
 80075b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	330c      	adds	r3, #12
 80075be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075c0:	61ba      	str	r2, [r7, #24]
 80075c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6979      	ldr	r1, [r7, #20]
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	613b      	str	r3, [r7, #16]
   return(result);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e5      	bne.n	80075a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80075e2:	bf00      	nop
 80075e4:	3754      	adds	r7, #84	@ 0x54
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff fcfa 	bl	8006ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b21      	cmp	r3, #33	@ 0x21
 8007622:	d13e      	bne.n	80076a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800762c:	d114      	bne.n	8007658 <UART_Transmit_IT+0x48>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d110      	bne.n	8007658 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800764a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	1c9a      	adds	r2, r3, #2
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	621a      	str	r2, [r3, #32]
 8007656:	e008      	b.n	800766a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	1c59      	adds	r1, r3, #1
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6211      	str	r1, [r2, #32]
 8007662:	781a      	ldrb	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b29b      	uxth	r3, r3
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	4619      	mov	r1, r3
 8007678:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10f      	bne.n	800769e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68da      	ldr	r2, [r3, #12]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800768c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800769c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	e000      	b.n	80076a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076a2:	2302      	movs	r3, #2
  }
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff fc6b 	bl	8006fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08c      	sub	sp, #48	@ 0x30
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80076e8:	2300      	movs	r3, #0
 80076ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b22      	cmp	r3, #34	@ 0x22
 80076fa:	f040 80aa 	bne.w	8007852 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007706:	d115      	bne.n	8007734 <UART_Receive_IT+0x54>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d111      	bne.n	8007734 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007714:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	b29b      	uxth	r3, r3
 800771e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007722:	b29a      	uxth	r2, r3
 8007724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007726:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800772c:	1c9a      	adds	r2, r3, #2
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	629a      	str	r2, [r3, #40]	@ 0x28
 8007732:	e024      	b.n	800777e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007738:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007742:	d007      	beq.n	8007754 <UART_Receive_IT+0x74>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <UART_Receive_IT+0x82>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b2da      	uxtb	r2, r3
 800775c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	e008      	b.n	8007774 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800776e:	b2da      	uxtb	r2, r3
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29b      	uxth	r3, r3
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4619      	mov	r1, r3
 800778c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800778e:	2b00      	cmp	r3, #0
 8007790:	d15d      	bne.n	800784e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0220 	bic.w	r2, r2, #32
 80077a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68da      	ldr	r2, [r3, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	695a      	ldr	r2, [r3, #20]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0201 	bic.w	r2, r2, #1
 80077c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d135      	bne.n	8007844 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	330c      	adds	r3, #12
 80077e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	613b      	str	r3, [r7, #16]
   return(result);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f023 0310 	bic.w	r3, r3, #16
 80077f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	330c      	adds	r3, #12
 80077fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077fe:	623a      	str	r2, [r7, #32]
 8007800:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	69f9      	ldr	r1, [r7, #28]
 8007804:	6a3a      	ldr	r2, [r7, #32]
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	61bb      	str	r3, [r7, #24]
   return(result);
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e5      	bne.n	80077de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0310 	and.w	r3, r3, #16
 800781c:	2b10      	cmp	r3, #16
 800781e:	d10a      	bne.n	8007836 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff fbe7 	bl	8007010 <HAL_UARTEx_RxEventCallback>
 8007842:	e002      	b.n	800784a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff fbc5 	bl	8006fd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	e002      	b.n	8007854 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	e000      	b.n	8007854 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007852:	2302      	movs	r3, #2
  }
}
 8007854:	4618      	mov	r0, r3
 8007856:	3730      	adds	r7, #48	@ 0x30
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800785c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007860:	b0c0      	sub	sp, #256	@ 0x100
 8007862:	af00      	add	r7, sp, #0
 8007864:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007878:	68d9      	ldr	r1, [r3, #12]
 800787a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	ea40 0301 	orr.w	r3, r0, r1
 8007884:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	431a      	orrs	r2, r3
 8007894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	431a      	orrs	r2, r3
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80078b4:	f021 010c 	bic.w	r1, r1, #12
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078c2:	430b      	orrs	r3, r1
 80078c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80078d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d6:	6999      	ldr	r1, [r3, #24]
 80078d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	ea40 0301 	orr.w	r3, r0, r1
 80078e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b8f      	ldr	r3, [pc, #572]	@ (8007b28 <UART_SetConfig+0x2cc>)
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d005      	beq.n	80078fc <UART_SetConfig+0xa0>
 80078f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	4b8d      	ldr	r3, [pc, #564]	@ (8007b2c <UART_SetConfig+0x2d0>)
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d104      	bne.n	8007906 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078fc:	f7fd f8ce 	bl	8004a9c <HAL_RCC_GetPCLK2Freq>
 8007900:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007904:	e003      	b.n	800790e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007906:	f7fd f8b5 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 800790a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800790e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007918:	f040 810c 	bne.w	8007b34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800791c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007920:	2200      	movs	r2, #0
 8007922:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007926:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800792a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800792e:	4622      	mov	r2, r4
 8007930:	462b      	mov	r3, r5
 8007932:	1891      	adds	r1, r2, r2
 8007934:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007936:	415b      	adcs	r3, r3
 8007938:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800793a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800793e:	4621      	mov	r1, r4
 8007940:	eb12 0801 	adds.w	r8, r2, r1
 8007944:	4629      	mov	r1, r5
 8007946:	eb43 0901 	adc.w	r9, r3, r1
 800794a:	f04f 0200 	mov.w	r2, #0
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800795a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800795e:	4690      	mov	r8, r2
 8007960:	4699      	mov	r9, r3
 8007962:	4623      	mov	r3, r4
 8007964:	eb18 0303 	adds.w	r3, r8, r3
 8007968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800796c:	462b      	mov	r3, r5
 800796e:	eb49 0303 	adc.w	r3, r9, r3
 8007972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007982:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007986:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800798a:	460b      	mov	r3, r1
 800798c:	18db      	adds	r3, r3, r3
 800798e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007990:	4613      	mov	r3, r2
 8007992:	eb42 0303 	adc.w	r3, r2, r3
 8007996:	657b      	str	r3, [r7, #84]	@ 0x54
 8007998:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800799c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80079a0:	f7f9 f90c 	bl	8000bbc <__aeabi_uldivmod>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4b61      	ldr	r3, [pc, #388]	@ (8007b30 <UART_SetConfig+0x2d4>)
 80079aa:	fba3 2302 	umull	r2, r3, r3, r2
 80079ae:	095b      	lsrs	r3, r3, #5
 80079b0:	011c      	lsls	r4, r3, #4
 80079b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80079c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80079c4:	4642      	mov	r2, r8
 80079c6:	464b      	mov	r3, r9
 80079c8:	1891      	adds	r1, r2, r2
 80079ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80079cc:	415b      	adcs	r3, r3
 80079ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80079d4:	4641      	mov	r1, r8
 80079d6:	eb12 0a01 	adds.w	sl, r2, r1
 80079da:	4649      	mov	r1, r9
 80079dc:	eb43 0b01 	adc.w	fp, r3, r1
 80079e0:	f04f 0200 	mov.w	r2, #0
 80079e4:	f04f 0300 	mov.w	r3, #0
 80079e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079f4:	4692      	mov	sl, r2
 80079f6:	469b      	mov	fp, r3
 80079f8:	4643      	mov	r3, r8
 80079fa:	eb1a 0303 	adds.w	r3, sl, r3
 80079fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a02:	464b      	mov	r3, r9
 8007a04:	eb4b 0303 	adc.w	r3, fp, r3
 8007a08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a20:	460b      	mov	r3, r1
 8007a22:	18db      	adds	r3, r3, r3
 8007a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a26:	4613      	mov	r3, r2
 8007a28:	eb42 0303 	adc.w	r3, r2, r3
 8007a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a36:	f7f9 f8c1 	bl	8000bbc <__aeabi_uldivmod>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4611      	mov	r1, r2
 8007a40:	4b3b      	ldr	r3, [pc, #236]	@ (8007b30 <UART_SetConfig+0x2d4>)
 8007a42:	fba3 2301 	umull	r2, r3, r3, r1
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	2264      	movs	r2, #100	@ 0x64
 8007a4a:	fb02 f303 	mul.w	r3, r2, r3
 8007a4e:	1acb      	subs	r3, r1, r3
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a56:	4b36      	ldr	r3, [pc, #216]	@ (8007b30 <UART_SetConfig+0x2d4>)
 8007a58:	fba3 2302 	umull	r2, r3, r3, r2
 8007a5c:	095b      	lsrs	r3, r3, #5
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a64:	441c      	add	r4, r3
 8007a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a78:	4642      	mov	r2, r8
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	1891      	adds	r1, r2, r2
 8007a7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a80:	415b      	adcs	r3, r3
 8007a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a88:	4641      	mov	r1, r8
 8007a8a:	1851      	adds	r1, r2, r1
 8007a8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a8e:	4649      	mov	r1, r9
 8007a90:	414b      	adcs	r3, r1
 8007a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007aa0:	4659      	mov	r1, fp
 8007aa2:	00cb      	lsls	r3, r1, #3
 8007aa4:	4651      	mov	r1, sl
 8007aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aaa:	4651      	mov	r1, sl
 8007aac:	00ca      	lsls	r2, r1, #3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	4642      	mov	r2, r8
 8007ab6:	189b      	adds	r3, r3, r2
 8007ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007abc:	464b      	mov	r3, r9
 8007abe:	460a      	mov	r2, r1
 8007ac0:	eb42 0303 	adc.w	r3, r2, r3
 8007ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ad4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007ad8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007adc:	460b      	mov	r3, r1
 8007ade:	18db      	adds	r3, r3, r3
 8007ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	eb42 0303 	adc.w	r3, r2, r3
 8007ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007aea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007aee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007af2:	f7f9 f863 	bl	8000bbc <__aeabi_uldivmod>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4b0d      	ldr	r3, [pc, #52]	@ (8007b30 <UART_SetConfig+0x2d4>)
 8007afc:	fba3 1302 	umull	r1, r3, r3, r2
 8007b00:	095b      	lsrs	r3, r3, #5
 8007b02:	2164      	movs	r1, #100	@ 0x64
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	00db      	lsls	r3, r3, #3
 8007b0c:	3332      	adds	r3, #50	@ 0x32
 8007b0e:	4a08      	ldr	r2, [pc, #32]	@ (8007b30 <UART_SetConfig+0x2d4>)
 8007b10:	fba2 2303 	umull	r2, r3, r2, r3
 8007b14:	095b      	lsrs	r3, r3, #5
 8007b16:	f003 0207 	and.w	r2, r3, #7
 8007b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4422      	add	r2, r4
 8007b22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b24:	e106      	b.n	8007d34 <UART_SetConfig+0x4d8>
 8007b26:	bf00      	nop
 8007b28:	40011000 	.word	0x40011000
 8007b2c:	40011400 	.word	0x40011400
 8007b30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b46:	4642      	mov	r2, r8
 8007b48:	464b      	mov	r3, r9
 8007b4a:	1891      	adds	r1, r2, r2
 8007b4c:	6239      	str	r1, [r7, #32]
 8007b4e:	415b      	adcs	r3, r3
 8007b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b56:	4641      	mov	r1, r8
 8007b58:	1854      	adds	r4, r2, r1
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	eb43 0501 	adc.w	r5, r3, r1
 8007b60:	f04f 0200 	mov.w	r2, #0
 8007b64:	f04f 0300 	mov.w	r3, #0
 8007b68:	00eb      	lsls	r3, r5, #3
 8007b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b6e:	00e2      	lsls	r2, r4, #3
 8007b70:	4614      	mov	r4, r2
 8007b72:	461d      	mov	r5, r3
 8007b74:	4643      	mov	r3, r8
 8007b76:	18e3      	adds	r3, r4, r3
 8007b78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b7c:	464b      	mov	r3, r9
 8007b7e:	eb45 0303 	adc.w	r3, r5, r3
 8007b82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b96:	f04f 0200 	mov.w	r2, #0
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	008b      	lsls	r3, r1, #2
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bac:	4621      	mov	r1, r4
 8007bae:	008a      	lsls	r2, r1, #2
 8007bb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007bb4:	f7f9 f802 	bl	8000bbc <__aeabi_uldivmod>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4b60      	ldr	r3, [pc, #384]	@ (8007d40 <UART_SetConfig+0x4e4>)
 8007bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007bc2:	095b      	lsrs	r3, r3, #5
 8007bc4:	011c      	lsls	r4, r3, #4
 8007bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007bd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007bd8:	4642      	mov	r2, r8
 8007bda:	464b      	mov	r3, r9
 8007bdc:	1891      	adds	r1, r2, r2
 8007bde:	61b9      	str	r1, [r7, #24]
 8007be0:	415b      	adcs	r3, r3
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007be8:	4641      	mov	r1, r8
 8007bea:	1851      	adds	r1, r2, r1
 8007bec:	6139      	str	r1, [r7, #16]
 8007bee:	4649      	mov	r1, r9
 8007bf0:	414b      	adcs	r3, r1
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	f04f 0200 	mov.w	r2, #0
 8007bf8:	f04f 0300 	mov.w	r3, #0
 8007bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c00:	4659      	mov	r1, fp
 8007c02:	00cb      	lsls	r3, r1, #3
 8007c04:	4651      	mov	r1, sl
 8007c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c0a:	4651      	mov	r1, sl
 8007c0c:	00ca      	lsls	r2, r1, #3
 8007c0e:	4610      	mov	r0, r2
 8007c10:	4619      	mov	r1, r3
 8007c12:	4603      	mov	r3, r0
 8007c14:	4642      	mov	r2, r8
 8007c16:	189b      	adds	r3, r3, r2
 8007c18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c1c:	464b      	mov	r3, r9
 8007c1e:	460a      	mov	r2, r1
 8007c20:	eb42 0303 	adc.w	r3, r2, r3
 8007c24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c34:	f04f 0200 	mov.w	r2, #0
 8007c38:	f04f 0300 	mov.w	r3, #0
 8007c3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c40:	4649      	mov	r1, r9
 8007c42:	008b      	lsls	r3, r1, #2
 8007c44:	4641      	mov	r1, r8
 8007c46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c4a:	4641      	mov	r1, r8
 8007c4c:	008a      	lsls	r2, r1, #2
 8007c4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c52:	f7f8 ffb3 	bl	8000bbc <__aeabi_uldivmod>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4b38      	ldr	r3, [pc, #224]	@ (8007d40 <UART_SetConfig+0x4e4>)
 8007c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	2264      	movs	r2, #100	@ 0x64
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
 8007c6a:	1acb      	subs	r3, r1, r3
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	3332      	adds	r3, #50	@ 0x32
 8007c70:	4a33      	ldr	r2, [pc, #204]	@ (8007d40 <UART_SetConfig+0x4e4>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	095b      	lsrs	r3, r3, #5
 8007c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c7c:	441c      	add	r4, r3
 8007c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c82:	2200      	movs	r2, #0
 8007c84:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c86:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	464b      	mov	r3, r9
 8007c90:	1891      	adds	r1, r2, r2
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	415b      	adcs	r3, r3
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c9c:	4641      	mov	r1, r8
 8007c9e:	1851      	adds	r1, r2, r1
 8007ca0:	6039      	str	r1, [r7, #0]
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	414b      	adcs	r3, r1
 8007ca6:	607b      	str	r3, [r7, #4]
 8007ca8:	f04f 0200 	mov.w	r2, #0
 8007cac:	f04f 0300 	mov.w	r3, #0
 8007cb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cb4:	4659      	mov	r1, fp
 8007cb6:	00cb      	lsls	r3, r1, #3
 8007cb8:	4651      	mov	r1, sl
 8007cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cbe:	4651      	mov	r1, sl
 8007cc0:	00ca      	lsls	r2, r1, #3
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4642      	mov	r2, r8
 8007cca:	189b      	adds	r3, r3, r2
 8007ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cce:	464b      	mov	r3, r9
 8007cd0:	460a      	mov	r2, r1
 8007cd2:	eb42 0303 	adc.w	r3, r2, r3
 8007cd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ce2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	008b      	lsls	r3, r1, #2
 8007cf4:	4641      	mov	r1, r8
 8007cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cfa:	4641      	mov	r1, r8
 8007cfc:	008a      	lsls	r2, r1, #2
 8007cfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d02:	f7f8 ff5b 	bl	8000bbc <__aeabi_uldivmod>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d40 <UART_SetConfig+0x4e4>)
 8007d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	2164      	movs	r1, #100	@ 0x64
 8007d14:	fb01 f303 	mul.w	r3, r1, r3
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	3332      	adds	r3, #50	@ 0x32
 8007d1e:	4a08      	ldr	r2, [pc, #32]	@ (8007d40 <UART_SetConfig+0x4e4>)
 8007d20:	fba2 2303 	umull	r2, r3, r2, r3
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	f003 020f 	and.w	r2, r3, #15
 8007d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4422      	add	r2, r4
 8007d32:	609a      	str	r2, [r3, #8]
}
 8007d34:	bf00      	nop
 8007d36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d40:	51eb851f 	.word	0x51eb851f

08007d44 <__NVIC_SetPriority>:
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	db0a      	blt.n	8007d6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	490c      	ldr	r1, [pc, #48]	@ (8007d90 <__NVIC_SetPriority+0x4c>)
 8007d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d62:	0112      	lsls	r2, r2, #4
 8007d64:	b2d2      	uxtb	r2, r2
 8007d66:	440b      	add	r3, r1
 8007d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007d6c:	e00a      	b.n	8007d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	4908      	ldr	r1, [pc, #32]	@ (8007d94 <__NVIC_SetPriority+0x50>)
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	f003 030f 	and.w	r3, r3, #15
 8007d7a:	3b04      	subs	r3, #4
 8007d7c:	0112      	lsls	r2, r2, #4
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	440b      	add	r3, r1
 8007d82:	761a      	strb	r2, [r3, #24]
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	e000e100 	.word	0xe000e100
 8007d94:	e000ed00 	.word	0xe000ed00

08007d98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007d9c:	4b05      	ldr	r3, [pc, #20]	@ (8007db4 <SysTick_Handler+0x1c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007da0:	f001 fde2 	bl	8009968 <xTaskGetSchedulerState>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d001      	beq.n	8007dae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007daa:	f002 fbdd 	bl	800a568 <xPortSysTickHandler>
  }
}
 8007dae:	bf00      	nop
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	e000e010 	.word	0xe000e010

08007db8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	f06f 0004 	mvn.w	r0, #4
 8007dc2:	f7ff ffbf 	bl	8007d44 <__NVIC_SetPriority>
#endif
}
 8007dc6:	bf00      	nop
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dd2:	f3ef 8305 	mrs	r3, IPSR
 8007dd6:	603b      	str	r3, [r7, #0]
  return(result);
 8007dd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007dde:	f06f 0305 	mvn.w	r3, #5
 8007de2:	607b      	str	r3, [r7, #4]
 8007de4:	e00c      	b.n	8007e00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007de6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e10 <osKernelInitialize+0x44>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d105      	bne.n	8007dfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007dee:	4b08      	ldr	r3, [pc, #32]	@ (8007e10 <osKernelInitialize+0x44>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	607b      	str	r3, [r7, #4]
 8007df8:	e002      	b.n	8007e00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007dfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007dfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e00:	687b      	ldr	r3, [r7, #4]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	200079dc 	.word	0x200079dc

08007e14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e1a:	f3ef 8305 	mrs	r3, IPSR
 8007e1e:	603b      	str	r3, [r7, #0]
  return(result);
 8007e20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007e26:	f06f 0305 	mvn.w	r3, #5
 8007e2a:	607b      	str	r3, [r7, #4]
 8007e2c:	e010      	b.n	8007e50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e5c <osKernelStart+0x48>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d109      	bne.n	8007e4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e36:	f7ff ffbf 	bl	8007db8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e3a:	4b08      	ldr	r3, [pc, #32]	@ (8007e5c <osKernelStart+0x48>)
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e40:	f001 f906 	bl	8009050 <vTaskStartScheduler>
      stat = osOK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	607b      	str	r3, [r7, #4]
 8007e48:	e002      	b.n	8007e50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007e4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e50:	687b      	ldr	r3, [r7, #4]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	200079dc 	.word	0x200079dc

08007e60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08e      	sub	sp, #56	@ 0x38
 8007e64:	af04      	add	r7, sp, #16
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e70:	f3ef 8305 	mrs	r3, IPSR
 8007e74:	617b      	str	r3, [r7, #20]
  return(result);
 8007e76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d17e      	bne.n	8007f7a <osThreadNew+0x11a>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d07b      	beq.n	8007f7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e82:	2380      	movs	r3, #128	@ 0x80
 8007e84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e86:	2318      	movs	r3, #24
 8007e88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007e8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d045      	beq.n	8007f26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <osThreadNew+0x48>
        name = attr->name;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <osThreadNew+0x6e>
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b38      	cmp	r3, #56	@ 0x38
 8007ec0:	d805      	bhi.n	8007ece <osThreadNew+0x6e>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <osThreadNew+0x72>
        return (NULL);
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e054      	b.n	8007f7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	089b      	lsrs	r3, r3, #2
 8007ee0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00e      	beq.n	8007f08 <osThreadNew+0xa8>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	2ba7      	cmp	r3, #167	@ 0xa7
 8007ef0:	d90a      	bls.n	8007f08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d006      	beq.n	8007f08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <osThreadNew+0xa8>
        mem = 1;
 8007f02:	2301      	movs	r3, #1
 8007f04:	61bb      	str	r3, [r7, #24]
 8007f06:	e010      	b.n	8007f2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10c      	bne.n	8007f2a <osThreadNew+0xca>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d108      	bne.n	8007f2a <osThreadNew+0xca>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d104      	bne.n	8007f2a <osThreadNew+0xca>
          mem = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	61bb      	str	r3, [r7, #24]
 8007f24:	e001      	b.n	8007f2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d110      	bne.n	8007f52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f38:	9202      	str	r2, [sp, #8]
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	6a3a      	ldr	r2, [r7, #32]
 8007f44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 fe1a 	bl	8008b80 <xTaskCreateStatic>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	613b      	str	r3, [r7, #16]
 8007f50:	e013      	b.n	8007f7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d110      	bne.n	8007f7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	f107 0310 	add.w	r3, r7, #16
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 fe68 	bl	8008c40 <xTaskCreate>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d001      	beq.n	8007f7a <osThreadNew+0x11a>
            hTask = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f7a:	693b      	ldr	r3, [r7, #16]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3728      	adds	r7, #40	@ 0x28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f8c:	f3ef 8305 	mrs	r3, IPSR
 8007f90:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <osDelay+0x1c>
    stat = osErrorISR;
 8007f98:	f06f 0305 	mvn.w	r3, #5
 8007f9c:	60fb      	str	r3, [r7, #12]
 8007f9e:	e007      	b.n	8007fb0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 f81a 	bl	8008fe4 <vTaskDelay>
    }
  }

  return (stat);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
	...

08007fbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4a07      	ldr	r2, [pc, #28]	@ (8007fe8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4a06      	ldr	r2, [pc, #24]	@ (8007fec <vApplicationGetIdleTaskMemory+0x30>)
 8007fd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2280      	movs	r2, #128	@ 0x80
 8007fd8:	601a      	str	r2, [r3, #0]
}
 8007fda:	bf00      	nop
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	200079e0 	.word	0x200079e0
 8007fec:	20007a88 	.word	0x20007a88

08007ff0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4a07      	ldr	r2, [pc, #28]	@ (800801c <vApplicationGetTimerTaskMemory+0x2c>)
 8008000:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	4a06      	ldr	r2, [pc, #24]	@ (8008020 <vApplicationGetTimerTaskMemory+0x30>)
 8008006:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800800e:	601a      	str	r2, [r3, #0]
}
 8008010:	bf00      	nop
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	20007c88 	.word	0x20007c88
 8008020:	20007d30 	.word	0x20007d30

08008024 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f103 0208 	add.w	r2, r3, #8
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800803c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f103 0208 	add.w	r2, r3, #8
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f103 0208 	add.w	r2, r3, #8
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008072:	bf00      	nop
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	1c5a      	adds	r2, r3, #1
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	601a      	str	r2, [r3, #0]
}
 80080ba:	bf00      	nop
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080dc:	d103      	bne.n	80080e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	e00c      	b.n	8008100 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3308      	adds	r3, #8
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	e002      	b.n	80080f4 <vListInsert+0x2e>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d2f6      	bcs.n	80080ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	601a      	str	r2, [r3, #0]
}
 800812c:	bf00      	nop
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	6892      	ldr	r2, [r2, #8]
 800814e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6852      	ldr	r2, [r2, #4]
 8008158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d103      	bne.n	800816c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	1e5a      	subs	r2, r3, #1
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10b      	bne.n	80081b8 <xQueueGenericReset+0x2c>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60bb      	str	r3, [r7, #8]
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80081b8:	f002 f946 	bl	800a448 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c4:	68f9      	ldr	r1, [r7, #12]
 80081c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081c8:	fb01 f303 	mul.w	r3, r1, r3
 80081cc:	441a      	add	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081e8:	3b01      	subs	r3, #1
 80081ea:	68f9      	ldr	r1, [r7, #12]
 80081ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081ee:	fb01 f303 	mul.w	r3, r1, r3
 80081f2:	441a      	add	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	22ff      	movs	r2, #255	@ 0xff
 80081fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	22ff      	movs	r2, #255	@ 0xff
 8008204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d114      	bne.n	8008238 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01a      	beq.n	800824c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3310      	adds	r3, #16
 800821a:	4618      	mov	r0, r3
 800821c:	f001 f9b6 	bl	800958c <xTaskRemoveFromEventList>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d012      	beq.n	800824c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008226:	4b0d      	ldr	r3, [pc, #52]	@ (800825c <xQueueGenericReset+0xd0>)
 8008228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	e009      	b.n	800824c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3310      	adds	r3, #16
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff fef1 	bl	8008024 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3324      	adds	r3, #36	@ 0x24
 8008246:	4618      	mov	r0, r3
 8008248:	f7ff feec 	bl	8008024 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800824c:	f002 f92e 	bl	800a4ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008250:	2301      	movs	r3, #1
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	e000ed04 	.word	0xe000ed04

08008260 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08e      	sub	sp, #56	@ 0x38
 8008264:	af02      	add	r7, sp, #8
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10b      	bne.n	800828c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008286:	bf00      	nop
 8008288:	bf00      	nop
 800828a:	e7fd      	b.n	8008288 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10b      	bne.n	80082aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop
 80082a8:	e7fd      	b.n	80082a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <xQueueGenericCreateStatic+0x56>
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <xQueueGenericCreateStatic+0x5a>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <xQueueGenericCreateStatic+0x5c>
 80082ba:	2300      	movs	r3, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10b      	bne.n	80082d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	623b      	str	r3, [r7, #32]
}
 80082d2:	bf00      	nop
 80082d4:	bf00      	nop
 80082d6:	e7fd      	b.n	80082d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d102      	bne.n	80082e4 <xQueueGenericCreateStatic+0x84>
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <xQueueGenericCreateStatic+0x88>
 80082e4:	2301      	movs	r3, #1
 80082e6:	e000      	b.n	80082ea <xQueueGenericCreateStatic+0x8a>
 80082e8:	2300      	movs	r3, #0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10b      	bne.n	8008306 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	61fb      	str	r3, [r7, #28]
}
 8008300:	bf00      	nop
 8008302:	bf00      	nop
 8008304:	e7fd      	b.n	8008302 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008306:	2350      	movs	r3, #80	@ 0x50
 8008308:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2b50      	cmp	r3, #80	@ 0x50
 800830e:	d00b      	beq.n	8008328 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	61bb      	str	r3, [r7, #24]
}
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	e7fd      	b.n	8008324 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008328:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800832e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00d      	beq.n	8008350 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800833c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	4613      	mov	r3, r2
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 f805 	bl	800835a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008352:	4618      	mov	r0, r3
 8008354:	3730      	adds	r7, #48	@ 0x30
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	607a      	str	r2, [r7, #4]
 8008366:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d103      	bne.n	8008376 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	e002      	b.n	800837c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008388:	2101      	movs	r1, #1
 800838a:	69b8      	ldr	r0, [r7, #24]
 800838c:	f7ff fefe 	bl	800818c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	78fa      	ldrb	r2, [r7, #3]
 8008394:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b08e      	sub	sp, #56	@ 0x38
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083ae:	2300      	movs	r3, #0
 80083b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80083b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10b      	bne.n	80083d4 <xQueueGenericSend+0x34>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083ce:	bf00      	nop
 80083d0:	bf00      	nop
 80083d2:	e7fd      	b.n	80083d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d103      	bne.n	80083e2 <xQueueGenericSend+0x42>
 80083da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <xQueueGenericSend+0x46>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e000      	b.n	80083e8 <xQueueGenericSend+0x48>
 80083e6:	2300      	movs	r3, #0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10b      	bne.n	8008404 <xQueueGenericSend+0x64>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083fe:	bf00      	nop
 8008400:	bf00      	nop
 8008402:	e7fd      	b.n	8008400 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2b02      	cmp	r3, #2
 8008408:	d103      	bne.n	8008412 <xQueueGenericSend+0x72>
 800840a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840e:	2b01      	cmp	r3, #1
 8008410:	d101      	bne.n	8008416 <xQueueGenericSend+0x76>
 8008412:	2301      	movs	r3, #1
 8008414:	e000      	b.n	8008418 <xQueueGenericSend+0x78>
 8008416:	2300      	movs	r3, #0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10b      	bne.n	8008434 <xQueueGenericSend+0x94>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	623b      	str	r3, [r7, #32]
}
 800842e:	bf00      	nop
 8008430:	bf00      	nop
 8008432:	e7fd      	b.n	8008430 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008434:	f001 fa98 	bl	8009968 <xTaskGetSchedulerState>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d102      	bne.n	8008444 <xQueueGenericSend+0xa4>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <xQueueGenericSend+0xa8>
 8008444:	2301      	movs	r3, #1
 8008446:	e000      	b.n	800844a <xQueueGenericSend+0xaa>
 8008448:	2300      	movs	r3, #0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <xQueueGenericSend+0xc6>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	61fb      	str	r3, [r7, #28]
}
 8008460:	bf00      	nop
 8008462:	bf00      	nop
 8008464:	e7fd      	b.n	8008462 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008466:	f001 ffef 	bl	800a448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008472:	429a      	cmp	r2, r3
 8008474:	d302      	bcc.n	800847c <xQueueGenericSend+0xdc>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b02      	cmp	r3, #2
 800847a:	d129      	bne.n	80084d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008482:	f000 fa0f 	bl	80088a4 <prvCopyDataToQueue>
 8008486:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848c:	2b00      	cmp	r3, #0
 800848e:	d010      	beq.n	80084b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008492:	3324      	adds	r3, #36	@ 0x24
 8008494:	4618      	mov	r0, r3
 8008496:	f001 f879 	bl	800958c <xTaskRemoveFromEventList>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d013      	beq.n	80084c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084a0:	4b3f      	ldr	r3, [pc, #252]	@ (80085a0 <xQueueGenericSend+0x200>)
 80084a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	e00a      	b.n	80084c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d007      	beq.n	80084c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084b8:	4b39      	ldr	r3, [pc, #228]	@ (80085a0 <xQueueGenericSend+0x200>)
 80084ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084c8:	f001 fff0 	bl	800a4ac <vPortExitCritical>
				return pdPASS;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e063      	b.n	8008598 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d103      	bne.n	80084de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084d6:	f001 ffe9 	bl	800a4ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	e05c      	b.n	8008598 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d106      	bne.n	80084f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084e4:	f107 0314 	add.w	r3, r7, #20
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 f8db 	bl	80096a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084ee:	2301      	movs	r3, #1
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084f2:	f001 ffdb 	bl	800a4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084f6:	f000 fe1b 	bl	8009130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084fa:	f001 ffa5 	bl	800a448 <vPortEnterCritical>
 80084fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008504:	b25b      	sxtb	r3, r3
 8008506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800850a:	d103      	bne.n	8008514 <xQueueGenericSend+0x174>
 800850c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008516:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800851a:	b25b      	sxtb	r3, r3
 800851c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008520:	d103      	bne.n	800852a <xQueueGenericSend+0x18a>
 8008522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800852a:	f001 ffbf 	bl	800a4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800852e:	1d3a      	adds	r2, r7, #4
 8008530:	f107 0314 	add.w	r3, r7, #20
 8008534:	4611      	mov	r1, r2
 8008536:	4618      	mov	r0, r3
 8008538:	f001 f8ca 	bl	80096d0 <xTaskCheckForTimeOut>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d124      	bne.n	800858c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008542:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008544:	f000 faa6 	bl	8008a94 <prvIsQueueFull>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d018      	beq.n	8008580 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	3310      	adds	r3, #16
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f000 ffc6 	bl	80094e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800855c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800855e:	f000 fa31 	bl	80089c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008562:	f000 fdf3 	bl	800914c <xTaskResumeAll>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	f47f af7c 	bne.w	8008466 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800856e:	4b0c      	ldr	r3, [pc, #48]	@ (80085a0 <xQueueGenericSend+0x200>)
 8008570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	e772      	b.n	8008466 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008580:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008582:	f000 fa1f 	bl	80089c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008586:	f000 fde1 	bl	800914c <xTaskResumeAll>
 800858a:	e76c      	b.n	8008466 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800858c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800858e:	f000 fa19 	bl	80089c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008592:	f000 fddb 	bl	800914c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008596:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008598:	4618      	mov	r0, r3
 800859a:	3738      	adds	r7, #56	@ 0x38
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	e000ed04 	.word	0xe000ed04

080085a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b090      	sub	sp, #64	@ 0x40
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80085b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10b      	bne.n	80085d4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80085ce:	bf00      	nop
 80085d0:	bf00      	nop
 80085d2:	e7fd      	b.n	80085d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d103      	bne.n	80085e2 <xQueueGenericSendFromISR+0x3e>
 80085da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <xQueueGenericSendFromISR+0x42>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <xQueueGenericSendFromISR+0x44>
 80085e6:	2300      	movs	r3, #0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10b      	bne.n	8008604 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085fe:	bf00      	nop
 8008600:	bf00      	nop
 8008602:	e7fd      	b.n	8008600 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b02      	cmp	r3, #2
 8008608:	d103      	bne.n	8008612 <xQueueGenericSendFromISR+0x6e>
 800860a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <xQueueGenericSendFromISR+0x72>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <xQueueGenericSendFromISR+0x74>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10b      	bne.n	8008634 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	623b      	str	r3, [r7, #32]
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	e7fd      	b.n	8008630 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008634:	f001 ffe8 	bl	800a608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008638:	f3ef 8211 	mrs	r2, BASEPRI
 800863c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	61fa      	str	r2, [r7, #28]
 800864e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008650:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008652:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865c:	429a      	cmp	r2, r3
 800865e:	d302      	bcc.n	8008666 <xQueueGenericSendFromISR+0xc2>
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2b02      	cmp	r3, #2
 8008664:	d12f      	bne.n	80086c6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008668:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800866c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008674:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800867c:	f000 f912 	bl	80088a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008680:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008688:	d112      	bne.n	80086b0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800868a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868e:	2b00      	cmp	r3, #0
 8008690:	d016      	beq.n	80086c0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008694:	3324      	adds	r3, #36	@ 0x24
 8008696:	4618      	mov	r0, r3
 8008698:	f000 ff78 	bl	800958c <xTaskRemoveFromEventList>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00e      	beq.n	80086c0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	e007      	b.n	80086c0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80086b4:	3301      	adds	r3, #1
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	b25a      	sxtb	r2, r3
 80086ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80086c0:	2301      	movs	r3, #1
 80086c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80086c4:	e001      	b.n	80086ca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086cc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3740      	adds	r7, #64	@ 0x40
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08c      	sub	sp, #48	@ 0x30
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086ec:	2300      	movs	r3, #0
 80086ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10b      	bne.n	8008712 <xQueueReceive+0x32>
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	623b      	str	r3, [r7, #32]
}
 800870c:	bf00      	nop
 800870e:	bf00      	nop
 8008710:	e7fd      	b.n	800870e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d103      	bne.n	8008720 <xQueueReceive+0x40>
 8008718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <xQueueReceive+0x44>
 8008720:	2301      	movs	r3, #1
 8008722:	e000      	b.n	8008726 <xQueueReceive+0x46>
 8008724:	2300      	movs	r3, #0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10b      	bne.n	8008742 <xQueueReceive+0x62>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	61fb      	str	r3, [r7, #28]
}
 800873c:	bf00      	nop
 800873e:	bf00      	nop
 8008740:	e7fd      	b.n	800873e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008742:	f001 f911 	bl	8009968 <xTaskGetSchedulerState>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d102      	bne.n	8008752 <xQueueReceive+0x72>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <xQueueReceive+0x76>
 8008752:	2301      	movs	r3, #1
 8008754:	e000      	b.n	8008758 <xQueueReceive+0x78>
 8008756:	2300      	movs	r3, #0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10b      	bne.n	8008774 <xQueueReceive+0x94>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	61bb      	str	r3, [r7, #24]
}
 800876e:	bf00      	nop
 8008770:	bf00      	nop
 8008772:	e7fd      	b.n	8008770 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008774:	f001 fe68 	bl	800a448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800877e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01f      	beq.n	80087c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008784:	68b9      	ldr	r1, [r7, #8]
 8008786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008788:	f000 f8f6 	bl	8008978 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800878c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878e:	1e5a      	subs	r2, r3, #1
 8008790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008792:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00f      	beq.n	80087bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800879c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879e:	3310      	adds	r3, #16
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fef3 	bl	800958c <xTaskRemoveFromEventList>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d007      	beq.n	80087bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087ac:	4b3c      	ldr	r3, [pc, #240]	@ (80088a0 <xQueueReceive+0x1c0>)
 80087ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087bc:	f001 fe76 	bl	800a4ac <vPortExitCritical>
				return pdPASS;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e069      	b.n	8008898 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d103      	bne.n	80087d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087ca:	f001 fe6f 	bl	800a4ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087ce:	2300      	movs	r3, #0
 80087d0:	e062      	b.n	8008898 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d106      	bne.n	80087e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087d8:	f107 0310 	add.w	r3, r7, #16
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 ff61 	bl	80096a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087e2:	2301      	movs	r3, #1
 80087e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087e6:	f001 fe61 	bl	800a4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087ea:	f000 fca1 	bl	8009130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087ee:	f001 fe2b 	bl	800a448 <vPortEnterCritical>
 80087f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087f8:	b25b      	sxtb	r3, r3
 80087fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087fe:	d103      	bne.n	8008808 <xQueueReceive+0x128>
 8008800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800880e:	b25b      	sxtb	r3, r3
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008814:	d103      	bne.n	800881e <xQueueReceive+0x13e>
 8008816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800881e:	f001 fe45 	bl	800a4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008822:	1d3a      	adds	r2, r7, #4
 8008824:	f107 0310 	add.w	r3, r7, #16
 8008828:	4611      	mov	r1, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f000 ff50 	bl	80096d0 <xTaskCheckForTimeOut>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d123      	bne.n	800887e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008838:	f000 f916 	bl	8008a68 <prvIsQueueEmpty>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d017      	beq.n	8008872 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008844:	3324      	adds	r3, #36	@ 0x24
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fe4c 	bl	80094e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008850:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008852:	f000 f8b7 	bl	80089c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008856:	f000 fc79 	bl	800914c <xTaskResumeAll>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d189      	bne.n	8008774 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008860:	4b0f      	ldr	r3, [pc, #60]	@ (80088a0 <xQueueReceive+0x1c0>)
 8008862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	e780      	b.n	8008774 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008874:	f000 f8a6 	bl	80089c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008878:	f000 fc68 	bl	800914c <xTaskResumeAll>
 800887c:	e77a      	b.n	8008774 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800887e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008880:	f000 f8a0 	bl	80089c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008884:	f000 fc62 	bl	800914c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008888:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800888a:	f000 f8ed 	bl	8008a68 <prvIsQueueEmpty>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	f43f af6f 	beq.w	8008774 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008896:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008898:	4618      	mov	r0, r3
 800889a:	3730      	adds	r7, #48	@ 0x30
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	e000ed04 	.word	0xe000ed04

080088a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088b0:	2300      	movs	r3, #0
 80088b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10d      	bne.n	80088de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d14d      	bne.n	8008966 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f001 f868 	bl	80099a4 <xTaskPriorityDisinherit>
 80088d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	609a      	str	r2, [r3, #8]
 80088dc:	e043      	b.n	8008966 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d119      	bne.n	8008918 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6858      	ldr	r0, [r3, #4]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ec:	461a      	mov	r2, r3
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	f00f fe63 	bl	80185ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088fc:	441a      	add	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	429a      	cmp	r2, r3
 800890c:	d32b      	bcc.n	8008966 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	605a      	str	r2, [r3, #4]
 8008916:	e026      	b.n	8008966 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	68d8      	ldr	r0, [r3, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008920:	461a      	mov	r2, r3
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	f00f fe49 	bl	80185ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008930:	425b      	negs	r3, r3
 8008932:	441a      	add	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	429a      	cmp	r2, r3
 8008942:	d207      	bcs.n	8008954 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894c:	425b      	negs	r3, r3
 800894e:	441a      	add	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b02      	cmp	r3, #2
 8008958:	d105      	bne.n	8008966 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	3b01      	subs	r3, #1
 8008964:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800896e:	697b      	ldr	r3, [r7, #20]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3718      	adds	r7, #24
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d018      	beq.n	80089bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68da      	ldr	r2, [r3, #12]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	441a      	add	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d303      	bcc.n	80089ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68d9      	ldr	r1, [r3, #12]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b4:	461a      	mov	r2, r3
 80089b6:	6838      	ldr	r0, [r7, #0]
 80089b8:	f00f fdff 	bl	80185ba <memcpy>
	}
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089cc:	f001 fd3c 	bl	800a448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089d8:	e011      	b.n	80089fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d012      	beq.n	8008a08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3324      	adds	r3, #36	@ 0x24
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 fdd0 	bl	800958c <xTaskRemoveFromEventList>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089f2:	f000 fed1 	bl	8009798 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	dce9      	bgt.n	80089da <prvUnlockQueue+0x16>
 8008a06:	e000      	b.n	8008a0a <prvUnlockQueue+0x46>
					break;
 8008a08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	22ff      	movs	r2, #255	@ 0xff
 8008a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008a12:	f001 fd4b 	bl	800a4ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a16:	f001 fd17 	bl	800a448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a22:	e011      	b.n	8008a48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d012      	beq.n	8008a52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3310      	adds	r3, #16
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 fdab 	bl	800958c <xTaskRemoveFromEventList>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a3c:	f000 feac 	bl	8009798 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	dce9      	bgt.n	8008a24 <prvUnlockQueue+0x60>
 8008a50:	e000      	b.n	8008a54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	22ff      	movs	r2, #255	@ 0xff
 8008a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008a5c:	f001 fd26 	bl	800a4ac <vPortExitCritical>
}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a70:	f001 fcea 	bl	800a448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d102      	bne.n	8008a82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	e001      	b.n	8008a86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a86:	f001 fd11 	bl	800a4ac <vPortExitCritical>

	return xReturn;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a9c:	f001 fcd4 	bl	800a448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d102      	bne.n	8008ab2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008aac:	2301      	movs	r3, #1
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	e001      	b.n	8008ab6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ab6:	f001 fcf9 	bl	800a4ac <vPortExitCritical>

	return xReturn;
 8008aba:	68fb      	ldr	r3, [r7, #12]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60fb      	str	r3, [r7, #12]
 8008ad2:	e014      	b.n	8008afe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8008b14 <vQueueAddToRegistry+0x50>)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10b      	bne.n	8008af8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ae0:	490c      	ldr	r1, [pc, #48]	@ (8008b14 <vQueueAddToRegistry+0x50>)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008aea:	4a0a      	ldr	r2, [pc, #40]	@ (8008b14 <vQueueAddToRegistry+0x50>)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	4413      	add	r3, r2
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008af6:	e006      	b.n	8008b06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3301      	adds	r3, #1
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b07      	cmp	r3, #7
 8008b02:	d9e7      	bls.n	8008ad4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	20008130 	.word	0x20008130

08008b18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b28:	f001 fc8e 	bl	800a448 <vPortEnterCritical>
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b32:	b25b      	sxtb	r3, r3
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b38:	d103      	bne.n	8008b42 <vQueueWaitForMessageRestricted+0x2a>
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b48:	b25b      	sxtb	r3, r3
 8008b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b4e:	d103      	bne.n	8008b58 <vQueueWaitForMessageRestricted+0x40>
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b58:	f001 fca8 	bl	800a4ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d106      	bne.n	8008b72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	3324      	adds	r3, #36	@ 0x24
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	68b9      	ldr	r1, [r7, #8]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 fce1 	bl	8009534 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b72:	6978      	ldr	r0, [r7, #20]
 8008b74:	f7ff ff26 	bl	80089c4 <prvUnlockQueue>
	}
 8008b78:	bf00      	nop
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08e      	sub	sp, #56	@ 0x38
 8008b84:	af04      	add	r7, sp, #16
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10b      	bne.n	8008bac <xTaskCreateStatic+0x2c>
	__asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	623b      	str	r3, [r7, #32]
}
 8008ba6:	bf00      	nop
 8008ba8:	bf00      	nop
 8008baa:	e7fd      	b.n	8008ba8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10b      	bne.n	8008bca <xTaskCreateStatic+0x4a>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	61fb      	str	r3, [r7, #28]
}
 8008bc4:	bf00      	nop
 8008bc6:	bf00      	nop
 8008bc8:	e7fd      	b.n	8008bc6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bca:	23a8      	movs	r3, #168	@ 0xa8
 8008bcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	2ba8      	cmp	r3, #168	@ 0xa8
 8008bd2:	d00b      	beq.n	8008bec <xTaskCreateStatic+0x6c>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	61bb      	str	r3, [r7, #24]
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008bec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d01e      	beq.n	8008c32 <xTaskCreateStatic+0xb2>
 8008bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d01b      	beq.n	8008c32 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c02:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c06:	2202      	movs	r2, #2
 8008c08:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	9303      	str	r3, [sp, #12]
 8008c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c12:	9302      	str	r3, [sp, #8]
 8008c14:	f107 0314 	add.w	r3, r7, #20
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	68b9      	ldr	r1, [r7, #8]
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 f851 	bl	8008ccc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c2c:	f000 f8f6 	bl	8008e1c <prvAddNewTaskToReadyList>
 8008c30:	e001      	b.n	8008c36 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c36:	697b      	ldr	r3, [r7, #20]
	}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3728      	adds	r7, #40	@ 0x28
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08c      	sub	sp, #48	@ 0x30
 8008c44:	af04      	add	r7, sp, #16
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	603b      	str	r3, [r7, #0]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c50:	88fb      	ldrh	r3, [r7, #6]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f001 fd19 	bl	800a68c <pvPortMalloc>
 8008c5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00e      	beq.n	8008c80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c62:	20a8      	movs	r0, #168	@ 0xa8
 8008c64:	f001 fd12 	bl	800a68c <pvPortMalloc>
 8008c68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d003      	beq.n	8008c78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c76:	e005      	b.n	8008c84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c78:	6978      	ldr	r0, [r7, #20]
 8008c7a:	f001 fdd5 	bl	800a828 <vPortFree>
 8008c7e:	e001      	b.n	8008c84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d017      	beq.n	8008cba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c92:	88fa      	ldrh	r2, [r7, #6]
 8008c94:	2300      	movs	r3, #0
 8008c96:	9303      	str	r3, [sp, #12]
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	9302      	str	r3, [sp, #8]
 8008c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	68b9      	ldr	r1, [r7, #8]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f80f 	bl	8008ccc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cae:	69f8      	ldr	r0, [r7, #28]
 8008cb0:	f000 f8b4 	bl	8008e1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	61bb      	str	r3, [r7, #24]
 8008cb8:	e002      	b.n	8008cc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008cbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
	}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3720      	adds	r7, #32
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cdc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	21a5      	movs	r1, #165	@ 0xa5
 8008ce6:	f00f fb41 	bl	801836c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	f023 0307 	bic.w	r3, r3, #7
 8008d02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00b      	beq.n	8008d26 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	617b      	str	r3, [r7, #20]
}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	e7fd      	b.n	8008d22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d01f      	beq.n	8008d6c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	61fb      	str	r3, [r7, #28]
 8008d30:	e012      	b.n	8008d58 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	4413      	add	r3, r2
 8008d38:	7819      	ldrb	r1, [r3, #0]
 8008d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	4413      	add	r3, r2
 8008d40:	3334      	adds	r3, #52	@ 0x34
 8008d42:	460a      	mov	r2, r1
 8008d44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d006      	beq.n	8008d60 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	3301      	adds	r3, #1
 8008d56:	61fb      	str	r3, [r7, #28]
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	2b0f      	cmp	r3, #15
 8008d5c:	d9e9      	bls.n	8008d32 <prvInitialiseNewTask+0x66>
 8008d5e:	e000      	b.n	8008d62 <prvInitialiseNewTask+0x96>
			{
				break;
 8008d60:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d6a:	e003      	b.n	8008d74 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d76:	2b37      	cmp	r3, #55	@ 0x37
 8008d78:	d901      	bls.n	8008d7e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d7a:	2337      	movs	r3, #55	@ 0x37
 8008d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d82:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d88:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d92:	3304      	adds	r3, #4
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff f965 	bl	8008064 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9c:	3318      	adds	r3, #24
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff f960 	bl	8008064 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008da8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008db8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	3354      	adds	r3, #84	@ 0x54
 8008dce:	224c      	movs	r2, #76	@ 0x4c
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f00f faca 	bl	801836c <memset>
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dda:	4a0d      	ldr	r2, [pc, #52]	@ (8008e10 <prvInitialiseNewTask+0x144>)
 8008ddc:	659a      	str	r2, [r3, #88]	@ 0x58
 8008dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de0:	4a0c      	ldr	r2, [pc, #48]	@ (8008e14 <prvInitialiseNewTask+0x148>)
 8008de2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de6:	4a0c      	ldr	r2, [pc, #48]	@ (8008e18 <prvInitialiseNewTask+0x14c>)
 8008de8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	68f9      	ldr	r1, [r7, #12]
 8008dee:	69b8      	ldr	r0, [r7, #24]
 8008df0:	f001 f9f6 	bl	800a1e0 <pxPortInitialiseStack>
 8008df4:	4602      	mov	r2, r0
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e06:	bf00      	nop
 8008e08:	3720      	adds	r7, #32
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20010f44 	.word	0x20010f44
 8008e14:	20010fac 	.word	0x20010fac
 8008e18:	20011014 	.word	0x20011014

08008e1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e24:	f001 fb10 	bl	800a448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e28:	4b2d      	ldr	r3, [pc, #180]	@ (8008ee0 <prvAddNewTaskToReadyList+0xc4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8008ee0 <prvAddNewTaskToReadyList+0xc4>)
 8008e30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e32:	4b2c      	ldr	r3, [pc, #176]	@ (8008ee4 <prvAddNewTaskToReadyList+0xc8>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d109      	bne.n	8008e4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ee4 <prvAddNewTaskToReadyList+0xc8>)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e40:	4b27      	ldr	r3, [pc, #156]	@ (8008ee0 <prvAddNewTaskToReadyList+0xc4>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d110      	bne.n	8008e6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e48:	f000 fcca 	bl	80097e0 <prvInitialiseTaskLists>
 8008e4c:	e00d      	b.n	8008e6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e4e:	4b26      	ldr	r3, [pc, #152]	@ (8008ee8 <prvAddNewTaskToReadyList+0xcc>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d109      	bne.n	8008e6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e56:	4b23      	ldr	r3, [pc, #140]	@ (8008ee4 <prvAddNewTaskToReadyList+0xc8>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d802      	bhi.n	8008e6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e64:	4a1f      	ldr	r2, [pc, #124]	@ (8008ee4 <prvAddNewTaskToReadyList+0xc8>)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e6a:	4b20      	ldr	r3, [pc, #128]	@ (8008eec <prvAddNewTaskToReadyList+0xd0>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	4a1e      	ldr	r2, [pc, #120]	@ (8008eec <prvAddNewTaskToReadyList+0xd0>)
 8008e72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e74:	4b1d      	ldr	r3, [pc, #116]	@ (8008eec <prvAddNewTaskToReadyList+0xd0>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e80:	4b1b      	ldr	r3, [pc, #108]	@ (8008ef0 <prvAddNewTaskToReadyList+0xd4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d903      	bls.n	8008e90 <prvAddNewTaskToReadyList+0x74>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8c:	4a18      	ldr	r2, [pc, #96]	@ (8008ef0 <prvAddNewTaskToReadyList+0xd4>)
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e94:	4613      	mov	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4a15      	ldr	r2, [pc, #84]	@ (8008ef4 <prvAddNewTaskToReadyList+0xd8>)
 8008e9e:	441a      	add	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	f7ff f8e9 	bl	800807e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008eac:	f001 fafe 	bl	800a4ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee8 <prvAddNewTaskToReadyList+0xcc>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00e      	beq.n	8008ed6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee4 <prvAddNewTaskToReadyList+0xc8>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d207      	bcs.n	8008ed6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ef8 <prvAddNewTaskToReadyList+0xdc>)
 8008ec8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ed6:	bf00      	nop
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20008644 	.word	0x20008644
 8008ee4:	20008170 	.word	0x20008170
 8008ee8:	20008650 	.word	0x20008650
 8008eec:	20008660 	.word	0x20008660
 8008ef0:	2000864c 	.word	0x2000864c
 8008ef4:	20008174 	.word	0x20008174
 8008ef8:	e000ed04 	.word	0xe000ed04

08008efc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008f04:	f001 faa0 	bl	800a448 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d102      	bne.n	8008f14 <vTaskDelete+0x18>
 8008f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8008fc4 <vTaskDelete+0xc8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	e000      	b.n	8008f16 <vTaskDelete+0x1a>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7ff f90b 	bl	8008138 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d004      	beq.n	8008f34 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3318      	adds	r3, #24
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff f902 	bl	8008138 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008f34:	4b24      	ldr	r3, [pc, #144]	@ (8008fc8 <vTaskDelete+0xcc>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	4a23      	ldr	r2, [pc, #140]	@ (8008fc8 <vTaskDelete+0xcc>)
 8008f3c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008f3e:	4b21      	ldr	r3, [pc, #132]	@ (8008fc4 <vTaskDelete+0xc8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d10b      	bne.n	8008f60 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	481f      	ldr	r0, [pc, #124]	@ (8008fcc <vTaskDelete+0xd0>)
 8008f50:	f7ff f895 	bl	800807e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008f54:	4b1e      	ldr	r3, [pc, #120]	@ (8008fd0 <vTaskDelete+0xd4>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8008fd0 <vTaskDelete+0xd4>)
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	e009      	b.n	8008f74 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008f60:	4b1c      	ldr	r3, [pc, #112]	@ (8008fd4 <vTaskDelete+0xd8>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	4a1b      	ldr	r2, [pc, #108]	@ (8008fd4 <vTaskDelete+0xd8>)
 8008f68:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 fca6 	bl	80098bc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008f70:	f000 fcda 	bl	8009928 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008f74:	f001 fa9a 	bl	800a4ac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008f78:	4b17      	ldr	r3, [pc, #92]	@ (8008fd8 <vTaskDelete+0xdc>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d01c      	beq.n	8008fba <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8008f80:	4b10      	ldr	r3, [pc, #64]	@ (8008fc4 <vTaskDelete+0xc8>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d117      	bne.n	8008fba <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008f8a:	4b14      	ldr	r3, [pc, #80]	@ (8008fdc <vTaskDelete+0xe0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00b      	beq.n	8008faa <vTaskDelete+0xae>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	60bb      	str	r3, [r7, #8]
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	e7fd      	b.n	8008fa6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008faa:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe0 <vTaskDelete+0xe4>)
 8008fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008fba:	bf00      	nop
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20008170 	.word	0x20008170
 8008fc8:	20008660 	.word	0x20008660
 8008fcc:	20008618 	.word	0x20008618
 8008fd0:	2000862c 	.word	0x2000862c
 8008fd4:	20008644 	.word	0x20008644
 8008fd8:	20008650 	.word	0x20008650
 8008fdc:	2000866c 	.word	0x2000866c
 8008fe0:	e000ed04 	.word	0xe000ed04

08008fe4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d018      	beq.n	8009028 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ff6:	4b14      	ldr	r3, [pc, #80]	@ (8009048 <vTaskDelay+0x64>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00b      	beq.n	8009016 <vTaskDelay+0x32>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	60bb      	str	r3, [r7, #8]
}
 8009010:	bf00      	nop
 8009012:	bf00      	nop
 8009014:	e7fd      	b.n	8009012 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009016:	f000 f88b 	bl	8009130 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800901a:	2100      	movs	r1, #0
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fd31 	bl	8009a84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009022:	f000 f893 	bl	800914c <xTaskResumeAll>
 8009026:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d107      	bne.n	800903e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800902e:	4b07      	ldr	r3, [pc, #28]	@ (800904c <vTaskDelay+0x68>)
 8009030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800903e:	bf00      	nop
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	2000866c 	.word	0x2000866c
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08a      	sub	sp, #40	@ 0x28
 8009054:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009056:	2300      	movs	r3, #0
 8009058:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800905a:	2300      	movs	r3, #0
 800905c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800905e:	463a      	mov	r2, r7
 8009060:	1d39      	adds	r1, r7, #4
 8009062:	f107 0308 	add.w	r3, r7, #8
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe ffa8 	bl	8007fbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	9202      	str	r2, [sp, #8]
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	2300      	movs	r3, #0
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	2300      	movs	r3, #0
 800907c:	460a      	mov	r2, r1
 800907e:	4924      	ldr	r1, [pc, #144]	@ (8009110 <vTaskStartScheduler+0xc0>)
 8009080:	4824      	ldr	r0, [pc, #144]	@ (8009114 <vTaskStartScheduler+0xc4>)
 8009082:	f7ff fd7d 	bl	8008b80 <xTaskCreateStatic>
 8009086:	4603      	mov	r3, r0
 8009088:	4a23      	ldr	r2, [pc, #140]	@ (8009118 <vTaskStartScheduler+0xc8>)
 800908a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800908c:	4b22      	ldr	r3, [pc, #136]	@ (8009118 <vTaskStartScheduler+0xc8>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009094:	2301      	movs	r3, #1
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e001      	b.n	800909e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d102      	bne.n	80090aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090a4:	f000 fd42 	bl	8009b2c <xTimerCreateTimerTask>
 80090a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d11b      	bne.n	80090e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	613b      	str	r3, [r7, #16]
}
 80090c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090c4:	4b15      	ldr	r3, [pc, #84]	@ (800911c <vTaskStartScheduler+0xcc>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3354      	adds	r3, #84	@ 0x54
 80090ca:	4a15      	ldr	r2, [pc, #84]	@ (8009120 <vTaskStartScheduler+0xd0>)
 80090cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090ce:	4b15      	ldr	r3, [pc, #84]	@ (8009124 <vTaskStartScheduler+0xd4>)
 80090d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090d6:	4b14      	ldr	r3, [pc, #80]	@ (8009128 <vTaskStartScheduler+0xd8>)
 80090d8:	2201      	movs	r2, #1
 80090da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090dc:	4b13      	ldr	r3, [pc, #76]	@ (800912c <vTaskStartScheduler+0xdc>)
 80090de:	2200      	movs	r2, #0
 80090e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090e2:	f001 f90d 	bl	800a300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090e6:	e00f      	b.n	8009108 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090ee:	d10b      	bne.n	8009108 <vTaskStartScheduler+0xb8>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	60fb      	str	r3, [r7, #12]
}
 8009102:	bf00      	nop
 8009104:	bf00      	nop
 8009106:	e7fd      	b.n	8009104 <vTaskStartScheduler+0xb4>
}
 8009108:	bf00      	nop
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	0801942c 	.word	0x0801942c
 8009114:	080097b1 	.word	0x080097b1
 8009118:	20008668 	.word	0x20008668
 800911c:	20008170 	.word	0x20008170
 8009120:	200000d8 	.word	0x200000d8
 8009124:	20008664 	.word	0x20008664
 8009128:	20008650 	.word	0x20008650
 800912c:	20008648 	.word	0x20008648

08009130 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009134:	4b04      	ldr	r3, [pc, #16]	@ (8009148 <vTaskSuspendAll+0x18>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3301      	adds	r3, #1
 800913a:	4a03      	ldr	r2, [pc, #12]	@ (8009148 <vTaskSuspendAll+0x18>)
 800913c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800913e:	bf00      	nop
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	2000866c 	.word	0x2000866c

0800914c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009152:	2300      	movs	r3, #0
 8009154:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009156:	2300      	movs	r3, #0
 8009158:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800915a:	4b42      	ldr	r3, [pc, #264]	@ (8009264 <xTaskResumeAll+0x118>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10b      	bne.n	800917a <xTaskResumeAll+0x2e>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	603b      	str	r3, [r7, #0]
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	e7fd      	b.n	8009176 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800917a:	f001 f965 	bl	800a448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800917e:	4b39      	ldr	r3, [pc, #228]	@ (8009264 <xTaskResumeAll+0x118>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3b01      	subs	r3, #1
 8009184:	4a37      	ldr	r2, [pc, #220]	@ (8009264 <xTaskResumeAll+0x118>)
 8009186:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009188:	4b36      	ldr	r3, [pc, #216]	@ (8009264 <xTaskResumeAll+0x118>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d162      	bne.n	8009256 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009190:	4b35      	ldr	r3, [pc, #212]	@ (8009268 <xTaskResumeAll+0x11c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d05e      	beq.n	8009256 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009198:	e02f      	b.n	80091fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919a:	4b34      	ldr	r3, [pc, #208]	@ (800926c <xTaskResumeAll+0x120>)
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3318      	adds	r3, #24
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe ffc6 	bl	8008138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3304      	adds	r3, #4
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fe ffc1 	bl	8008138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ba:	4b2d      	ldr	r3, [pc, #180]	@ (8009270 <xTaskResumeAll+0x124>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d903      	bls.n	80091ca <xTaskResumeAll+0x7e>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c6:	4a2a      	ldr	r2, [pc, #168]	@ (8009270 <xTaskResumeAll+0x124>)
 80091c8:	6013      	str	r3, [r2, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4a27      	ldr	r2, [pc, #156]	@ (8009274 <xTaskResumeAll+0x128>)
 80091d8:	441a      	add	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3304      	adds	r3, #4
 80091de:	4619      	mov	r1, r3
 80091e0:	4610      	mov	r0, r2
 80091e2:	f7fe ff4c 	bl	800807e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ea:	4b23      	ldr	r3, [pc, #140]	@ (8009278 <xTaskResumeAll+0x12c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d302      	bcc.n	80091fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80091f4:	4b21      	ldr	r3, [pc, #132]	@ (800927c <xTaskResumeAll+0x130>)
 80091f6:	2201      	movs	r2, #1
 80091f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091fa:	4b1c      	ldr	r3, [pc, #112]	@ (800926c <xTaskResumeAll+0x120>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1cb      	bne.n	800919a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009208:	f000 fb8e 	bl	8009928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800920c:	4b1c      	ldr	r3, [pc, #112]	@ (8009280 <xTaskResumeAll+0x134>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d010      	beq.n	800923a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009218:	f000 f846 	bl	80092a8 <xTaskIncrementTick>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009222:	4b16      	ldr	r3, [pc, #88]	@ (800927c <xTaskResumeAll+0x130>)
 8009224:	2201      	movs	r2, #1
 8009226:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3b01      	subs	r3, #1
 800922c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1f1      	bne.n	8009218 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009234:	4b12      	ldr	r3, [pc, #72]	@ (8009280 <xTaskResumeAll+0x134>)
 8009236:	2200      	movs	r2, #0
 8009238:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800923a:	4b10      	ldr	r3, [pc, #64]	@ (800927c <xTaskResumeAll+0x130>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d009      	beq.n	8009256 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009242:	2301      	movs	r3, #1
 8009244:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009246:	4b0f      	ldr	r3, [pc, #60]	@ (8009284 <xTaskResumeAll+0x138>)
 8009248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009256:	f001 f929 	bl	800a4ac <vPortExitCritical>

	return xAlreadyYielded;
 800925a:	68bb      	ldr	r3, [r7, #8]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	2000866c 	.word	0x2000866c
 8009268:	20008644 	.word	0x20008644
 800926c:	20008604 	.word	0x20008604
 8009270:	2000864c 	.word	0x2000864c
 8009274:	20008174 	.word	0x20008174
 8009278:	20008170 	.word	0x20008170
 800927c:	20008658 	.word	0x20008658
 8009280:	20008654 	.word	0x20008654
 8009284:	e000ed04 	.word	0xe000ed04

08009288 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800928e:	4b05      	ldr	r3, [pc, #20]	@ (80092a4 <xTaskGetTickCount+0x1c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009294:	687b      	ldr	r3, [r7, #4]
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	20008648 	.word	0x20008648

080092a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092b2:	4b4f      	ldr	r3, [pc, #316]	@ (80093f0 <xTaskIncrementTick+0x148>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f040 8090 	bne.w	80093dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092bc:	4b4d      	ldr	r3, [pc, #308]	@ (80093f4 <xTaskIncrementTick+0x14c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3301      	adds	r3, #1
 80092c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092c4:	4a4b      	ldr	r2, [pc, #300]	@ (80093f4 <xTaskIncrementTick+0x14c>)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d121      	bne.n	8009314 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80092d0:	4b49      	ldr	r3, [pc, #292]	@ (80093f8 <xTaskIncrementTick+0x150>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00b      	beq.n	80092f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	603b      	str	r3, [r7, #0]
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	e7fd      	b.n	80092ee <xTaskIncrementTick+0x46>
 80092f2:	4b41      	ldr	r3, [pc, #260]	@ (80093f8 <xTaskIncrementTick+0x150>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60fb      	str	r3, [r7, #12]
 80092f8:	4b40      	ldr	r3, [pc, #256]	@ (80093fc <xTaskIncrementTick+0x154>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a3e      	ldr	r2, [pc, #248]	@ (80093f8 <xTaskIncrementTick+0x150>)
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	4a3e      	ldr	r2, [pc, #248]	@ (80093fc <xTaskIncrementTick+0x154>)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	4b3e      	ldr	r3, [pc, #248]	@ (8009400 <xTaskIncrementTick+0x158>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3301      	adds	r3, #1
 800930c:	4a3c      	ldr	r2, [pc, #240]	@ (8009400 <xTaskIncrementTick+0x158>)
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	f000 fb0a 	bl	8009928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009314:	4b3b      	ldr	r3, [pc, #236]	@ (8009404 <xTaskIncrementTick+0x15c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	429a      	cmp	r2, r3
 800931c:	d349      	bcc.n	80093b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800931e:	4b36      	ldr	r3, [pc, #216]	@ (80093f8 <xTaskIncrementTick+0x150>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d104      	bne.n	8009332 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009328:	4b36      	ldr	r3, [pc, #216]	@ (8009404 <xTaskIncrementTick+0x15c>)
 800932a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800932e:	601a      	str	r2, [r3, #0]
					break;
 8009330:	e03f      	b.n	80093b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009332:	4b31      	ldr	r3, [pc, #196]	@ (80093f8 <xTaskIncrementTick+0x150>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	429a      	cmp	r2, r3
 8009348:	d203      	bcs.n	8009352 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800934a:	4a2e      	ldr	r2, [pc, #184]	@ (8009404 <xTaskIncrementTick+0x15c>)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009350:	e02f      	b.n	80093b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	3304      	adds	r3, #4
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe feee 	bl	8008138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009360:	2b00      	cmp	r3, #0
 8009362:	d004      	beq.n	800936e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	3318      	adds	r3, #24
 8009368:	4618      	mov	r0, r3
 800936a:	f7fe fee5 	bl	8008138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009372:	4b25      	ldr	r3, [pc, #148]	@ (8009408 <xTaskIncrementTick+0x160>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	429a      	cmp	r2, r3
 8009378:	d903      	bls.n	8009382 <xTaskIncrementTick+0xda>
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937e:	4a22      	ldr	r2, [pc, #136]	@ (8009408 <xTaskIncrementTick+0x160>)
 8009380:	6013      	str	r3, [r2, #0]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009386:	4613      	mov	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4a1f      	ldr	r2, [pc, #124]	@ (800940c <xTaskIncrementTick+0x164>)
 8009390:	441a      	add	r2, r3
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	3304      	adds	r3, #4
 8009396:	4619      	mov	r1, r3
 8009398:	4610      	mov	r0, r2
 800939a:	f7fe fe70 	bl	800807e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009410 <xTaskIncrementTick+0x168>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d3b8      	bcc.n	800931e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80093ac:	2301      	movs	r3, #1
 80093ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093b0:	e7b5      	b.n	800931e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093b2:	4b17      	ldr	r3, [pc, #92]	@ (8009410 <xTaskIncrementTick+0x168>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b8:	4914      	ldr	r1, [pc, #80]	@ (800940c <xTaskIncrementTick+0x164>)
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	440b      	add	r3, r1
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d901      	bls.n	80093ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80093ca:	2301      	movs	r3, #1
 80093cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093ce:	4b11      	ldr	r3, [pc, #68]	@ (8009414 <xTaskIncrementTick+0x16c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d007      	beq.n	80093e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80093d6:	2301      	movs	r3, #1
 80093d8:	617b      	str	r3, [r7, #20]
 80093da:	e004      	b.n	80093e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80093dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009418 <xTaskIncrementTick+0x170>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3301      	adds	r3, #1
 80093e2:	4a0d      	ldr	r2, [pc, #52]	@ (8009418 <xTaskIncrementTick+0x170>)
 80093e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093e6:	697b      	ldr	r3, [r7, #20]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	2000866c 	.word	0x2000866c
 80093f4:	20008648 	.word	0x20008648
 80093f8:	200085fc 	.word	0x200085fc
 80093fc:	20008600 	.word	0x20008600
 8009400:	2000865c 	.word	0x2000865c
 8009404:	20008664 	.word	0x20008664
 8009408:	2000864c 	.word	0x2000864c
 800940c:	20008174 	.word	0x20008174
 8009410:	20008170 	.word	0x20008170
 8009414:	20008658 	.word	0x20008658
 8009418:	20008654 	.word	0x20008654

0800941c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009422:	4b2b      	ldr	r3, [pc, #172]	@ (80094d0 <vTaskSwitchContext+0xb4>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800942a:	4b2a      	ldr	r3, [pc, #168]	@ (80094d4 <vTaskSwitchContext+0xb8>)
 800942c:	2201      	movs	r2, #1
 800942e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009430:	e047      	b.n	80094c2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009432:	4b28      	ldr	r3, [pc, #160]	@ (80094d4 <vTaskSwitchContext+0xb8>)
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009438:	4b27      	ldr	r3, [pc, #156]	@ (80094d8 <vTaskSwitchContext+0xbc>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	60fb      	str	r3, [r7, #12]
 800943e:	e011      	b.n	8009464 <vTaskSwitchContext+0x48>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10b      	bne.n	800945e <vTaskSwitchContext+0x42>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	607b      	str	r3, [r7, #4]
}
 8009458:	bf00      	nop
 800945a:	bf00      	nop
 800945c:	e7fd      	b.n	800945a <vTaskSwitchContext+0x3e>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3b01      	subs	r3, #1
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	491d      	ldr	r1, [pc, #116]	@ (80094dc <vTaskSwitchContext+0xc0>)
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	4613      	mov	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4413      	add	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	440b      	add	r3, r1
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d0e3      	beq.n	8009440 <vTaskSwitchContext+0x24>
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4a16      	ldr	r2, [pc, #88]	@ (80094dc <vTaskSwitchContext+0xc0>)
 8009484:	4413      	add	r3, r2
 8009486:	60bb      	str	r3, [r7, #8]
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	605a      	str	r2, [r3, #4]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	685a      	ldr	r2, [r3, #4]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	3308      	adds	r3, #8
 800949a:	429a      	cmp	r2, r3
 800949c:	d104      	bne.n	80094a8 <vTaskSwitchContext+0x8c>
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	605a      	str	r2, [r3, #4]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	4a0c      	ldr	r2, [pc, #48]	@ (80094e0 <vTaskSwitchContext+0xc4>)
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	4a09      	ldr	r2, [pc, #36]	@ (80094d8 <vTaskSwitchContext+0xbc>)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80094b8:	4b09      	ldr	r3, [pc, #36]	@ (80094e0 <vTaskSwitchContext+0xc4>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3354      	adds	r3, #84	@ 0x54
 80094be:	4a09      	ldr	r2, [pc, #36]	@ (80094e4 <vTaskSwitchContext+0xc8>)
 80094c0:	6013      	str	r3, [r2, #0]
}
 80094c2:	bf00      	nop
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	2000866c 	.word	0x2000866c
 80094d4:	20008658 	.word	0x20008658
 80094d8:	2000864c 	.word	0x2000864c
 80094dc:	20008174 	.word	0x20008174
 80094e0:	20008170 	.word	0x20008170
 80094e4:	200000d8 	.word	0x200000d8

080094e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10b      	bne.n	8009510 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80094f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	60fb      	str	r3, [r7, #12]
}
 800950a:	bf00      	nop
 800950c:	bf00      	nop
 800950e:	e7fd      	b.n	800950c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009510:	4b07      	ldr	r3, [pc, #28]	@ (8009530 <vTaskPlaceOnEventList+0x48>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3318      	adds	r3, #24
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f7fe fdd4 	bl	80080c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800951e:	2101      	movs	r1, #1
 8009520:	6838      	ldr	r0, [r7, #0]
 8009522:	f000 faaf 	bl	8009a84 <prvAddCurrentTaskToDelayedList>
}
 8009526:	bf00      	nop
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20008170 	.word	0x20008170

08009534 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10b      	bne.n	800955e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	617b      	str	r3, [r7, #20]
}
 8009558:	bf00      	nop
 800955a:	bf00      	nop
 800955c:	e7fd      	b.n	800955a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800955e:	4b0a      	ldr	r3, [pc, #40]	@ (8009588 <vTaskPlaceOnEventListRestricted+0x54>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3318      	adds	r3, #24
 8009564:	4619      	mov	r1, r3
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f7fe fd89 	bl	800807e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009576:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	68b8      	ldr	r0, [r7, #8]
 800957c:	f000 fa82 	bl	8009a84 <prvAddCurrentTaskToDelayedList>
	}
 8009580:	bf00      	nop
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20008170 	.word	0x20008170

0800958c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	60fb      	str	r3, [r7, #12]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	3318      	adds	r3, #24
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe fdba 	bl	8008138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095c4:	4b1d      	ldr	r3, [pc, #116]	@ (800963c <xTaskRemoveFromEventList+0xb0>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d11d      	bne.n	8009608 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	3304      	adds	r3, #4
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe fdb1 	bl	8008138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095da:	4b19      	ldr	r3, [pc, #100]	@ (8009640 <xTaskRemoveFromEventList+0xb4>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d903      	bls.n	80095ea <xTaskRemoveFromEventList+0x5e>
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e6:	4a16      	ldr	r2, [pc, #88]	@ (8009640 <xTaskRemoveFromEventList+0xb4>)
 80095e8:	6013      	str	r3, [r2, #0]
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ee:	4613      	mov	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4a13      	ldr	r2, [pc, #76]	@ (8009644 <xTaskRemoveFromEventList+0xb8>)
 80095f8:	441a      	add	r2, r3
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	3304      	adds	r3, #4
 80095fe:	4619      	mov	r1, r3
 8009600:	4610      	mov	r0, r2
 8009602:	f7fe fd3c 	bl	800807e <vListInsertEnd>
 8009606:	e005      	b.n	8009614 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	3318      	adds	r3, #24
 800960c:	4619      	mov	r1, r3
 800960e:	480e      	ldr	r0, [pc, #56]	@ (8009648 <xTaskRemoveFromEventList+0xbc>)
 8009610:	f7fe fd35 	bl	800807e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009618:	4b0c      	ldr	r3, [pc, #48]	@ (800964c <xTaskRemoveFromEventList+0xc0>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961e:	429a      	cmp	r2, r3
 8009620:	d905      	bls.n	800962e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009622:	2301      	movs	r3, #1
 8009624:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009626:	4b0a      	ldr	r3, [pc, #40]	@ (8009650 <xTaskRemoveFromEventList+0xc4>)
 8009628:	2201      	movs	r2, #1
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	e001      	b.n	8009632 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800962e:	2300      	movs	r3, #0
 8009630:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009632:	697b      	ldr	r3, [r7, #20]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3718      	adds	r7, #24
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}
 800963c:	2000866c 	.word	0x2000866c
 8009640:	2000864c 	.word	0x2000864c
 8009644:	20008174 	.word	0x20008174
 8009648:	20008604 	.word	0x20008604
 800964c:	20008170 	.word	0x20008170
 8009650:	20008658 	.word	0x20008658

08009654 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10b      	bne.n	800967a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	60fb      	str	r3, [r7, #12]
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop
 8009678:	e7fd      	b.n	8009676 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800967a:	f000 fee5 	bl	800a448 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800967e:	4b07      	ldr	r3, [pc, #28]	@ (800969c <vTaskSetTimeOutState+0x48>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009686:	4b06      	ldr	r3, [pc, #24]	@ (80096a0 <vTaskSetTimeOutState+0x4c>)
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800968e:	f000 ff0d 	bl	800a4ac <vPortExitCritical>
}
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	2000865c 	.word	0x2000865c
 80096a0:	20008648 	.word	0x20008648

080096a4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096ac:	4b06      	ldr	r3, [pc, #24]	@ (80096c8 <vTaskInternalSetTimeOutState+0x24>)
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096b4:	4b05      	ldr	r3, [pc, #20]	@ (80096cc <vTaskInternalSetTimeOutState+0x28>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	605a      	str	r2, [r3, #4]
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	2000865c 	.word	0x2000865c
 80096cc:	20008648 	.word	0x20008648

080096d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10b      	bne.n	80096f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	613b      	str	r3, [r7, #16]
}
 80096f2:	bf00      	nop
 80096f4:	bf00      	nop
 80096f6:	e7fd      	b.n	80096f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10b      	bne.n	8009716 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	60fb      	str	r3, [r7, #12]
}
 8009710:	bf00      	nop
 8009712:	bf00      	nop
 8009714:	e7fd      	b.n	8009712 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009716:	f000 fe97 	bl	800a448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800971a:	4b1d      	ldr	r3, [pc, #116]	@ (8009790 <xTaskCheckForTimeOut+0xc0>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009732:	d102      	bne.n	800973a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009734:	2300      	movs	r3, #0
 8009736:	61fb      	str	r3, [r7, #28]
 8009738:	e023      	b.n	8009782 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	4b15      	ldr	r3, [pc, #84]	@ (8009794 <xTaskCheckForTimeOut+0xc4>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d007      	beq.n	8009756 <xTaskCheckForTimeOut+0x86>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	429a      	cmp	r2, r3
 800974e:	d302      	bcc.n	8009756 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009750:	2301      	movs	r3, #1
 8009752:	61fb      	str	r3, [r7, #28]
 8009754:	e015      	b.n	8009782 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	429a      	cmp	r2, r3
 800975e:	d20b      	bcs.n	8009778 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	1ad2      	subs	r2, r2, r3
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7ff ff99 	bl	80096a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009772:	2300      	movs	r3, #0
 8009774:	61fb      	str	r3, [r7, #28]
 8009776:	e004      	b.n	8009782 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800977e:	2301      	movs	r3, #1
 8009780:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009782:	f000 fe93 	bl	800a4ac <vPortExitCritical>

	return xReturn;
 8009786:	69fb      	ldr	r3, [r7, #28]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3720      	adds	r7, #32
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	20008648 	.word	0x20008648
 8009794:	2000865c 	.word	0x2000865c

08009798 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800979c:	4b03      	ldr	r3, [pc, #12]	@ (80097ac <vTaskMissedYield+0x14>)
 800979e:	2201      	movs	r2, #1
 80097a0:	601a      	str	r2, [r3, #0]
}
 80097a2:	bf00      	nop
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	20008658 	.word	0x20008658

080097b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097b8:	f000 f852 	bl	8009860 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097bc:	4b06      	ldr	r3, [pc, #24]	@ (80097d8 <prvIdleTask+0x28>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d9f9      	bls.n	80097b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80097c4:	4b05      	ldr	r3, [pc, #20]	@ (80097dc <prvIdleTask+0x2c>)
 80097c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097d4:	e7f0      	b.n	80097b8 <prvIdleTask+0x8>
 80097d6:	bf00      	nop
 80097d8:	20008174 	.word	0x20008174
 80097dc:	e000ed04 	.word	0xe000ed04

080097e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097e6:	2300      	movs	r3, #0
 80097e8:	607b      	str	r3, [r7, #4]
 80097ea:	e00c      	b.n	8009806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	4613      	mov	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4a12      	ldr	r2, [pc, #72]	@ (8009840 <prvInitialiseTaskLists+0x60>)
 80097f8:	4413      	add	r3, r2
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe fc12 	bl	8008024 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3301      	adds	r3, #1
 8009804:	607b      	str	r3, [r7, #4]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b37      	cmp	r3, #55	@ 0x37
 800980a:	d9ef      	bls.n	80097ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800980c:	480d      	ldr	r0, [pc, #52]	@ (8009844 <prvInitialiseTaskLists+0x64>)
 800980e:	f7fe fc09 	bl	8008024 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009812:	480d      	ldr	r0, [pc, #52]	@ (8009848 <prvInitialiseTaskLists+0x68>)
 8009814:	f7fe fc06 	bl	8008024 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009818:	480c      	ldr	r0, [pc, #48]	@ (800984c <prvInitialiseTaskLists+0x6c>)
 800981a:	f7fe fc03 	bl	8008024 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800981e:	480c      	ldr	r0, [pc, #48]	@ (8009850 <prvInitialiseTaskLists+0x70>)
 8009820:	f7fe fc00 	bl	8008024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009824:	480b      	ldr	r0, [pc, #44]	@ (8009854 <prvInitialiseTaskLists+0x74>)
 8009826:	f7fe fbfd 	bl	8008024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800982a:	4b0b      	ldr	r3, [pc, #44]	@ (8009858 <prvInitialiseTaskLists+0x78>)
 800982c:	4a05      	ldr	r2, [pc, #20]	@ (8009844 <prvInitialiseTaskLists+0x64>)
 800982e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009830:	4b0a      	ldr	r3, [pc, #40]	@ (800985c <prvInitialiseTaskLists+0x7c>)
 8009832:	4a05      	ldr	r2, [pc, #20]	@ (8009848 <prvInitialiseTaskLists+0x68>)
 8009834:	601a      	str	r2, [r3, #0]
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20008174 	.word	0x20008174
 8009844:	200085d4 	.word	0x200085d4
 8009848:	200085e8 	.word	0x200085e8
 800984c:	20008604 	.word	0x20008604
 8009850:	20008618 	.word	0x20008618
 8009854:	20008630 	.word	0x20008630
 8009858:	200085fc 	.word	0x200085fc
 800985c:	20008600 	.word	0x20008600

08009860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009866:	e019      	b.n	800989c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009868:	f000 fdee 	bl	800a448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800986c:	4b10      	ldr	r3, [pc, #64]	@ (80098b0 <prvCheckTasksWaitingTermination+0x50>)
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	3304      	adds	r3, #4
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe fc5d 	bl	8008138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800987e:	4b0d      	ldr	r3, [pc, #52]	@ (80098b4 <prvCheckTasksWaitingTermination+0x54>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3b01      	subs	r3, #1
 8009884:	4a0b      	ldr	r2, [pc, #44]	@ (80098b4 <prvCheckTasksWaitingTermination+0x54>)
 8009886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009888:	4b0b      	ldr	r3, [pc, #44]	@ (80098b8 <prvCheckTasksWaitingTermination+0x58>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3b01      	subs	r3, #1
 800988e:	4a0a      	ldr	r2, [pc, #40]	@ (80098b8 <prvCheckTasksWaitingTermination+0x58>)
 8009890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009892:	f000 fe0b 	bl	800a4ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f810 	bl	80098bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800989c:	4b06      	ldr	r3, [pc, #24]	@ (80098b8 <prvCheckTasksWaitingTermination+0x58>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e1      	bne.n	8009868 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	20008618 	.word	0x20008618
 80098b4:	20008644 	.word	0x20008644
 80098b8:	2000862c 	.word	0x2000862c

080098bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	3354      	adds	r3, #84	@ 0x54
 80098c8:	4618      	mov	r0, r3
 80098ca:	f00e fd9d 	bl	8018408 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d108      	bne.n	80098ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 ffa3 	bl	800a828 <vPortFree>
				vPortFree( pxTCB );
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 ffa0 	bl	800a828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098e8:	e019      	b.n	800991e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d103      	bne.n	80098fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 ff97 	bl	800a828 <vPortFree>
	}
 80098fa:	e010      	b.n	800991e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009902:	2b02      	cmp	r3, #2
 8009904:	d00b      	beq.n	800991e <prvDeleteTCB+0x62>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	60fb      	str	r3, [r7, #12]
}
 8009918:	bf00      	nop
 800991a:	bf00      	nop
 800991c:	e7fd      	b.n	800991a <prvDeleteTCB+0x5e>
	}
 800991e:	bf00      	nop
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800992e:	4b0c      	ldr	r3, [pc, #48]	@ (8009960 <prvResetNextTaskUnblockTime+0x38>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009938:	4b0a      	ldr	r3, [pc, #40]	@ (8009964 <prvResetNextTaskUnblockTime+0x3c>)
 800993a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800993e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009940:	e008      	b.n	8009954 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009942:	4b07      	ldr	r3, [pc, #28]	@ (8009960 <prvResetNextTaskUnblockTime+0x38>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	4a04      	ldr	r2, [pc, #16]	@ (8009964 <prvResetNextTaskUnblockTime+0x3c>)
 8009952:	6013      	str	r3, [r2, #0]
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	200085fc 	.word	0x200085fc
 8009964:	20008664 	.word	0x20008664

08009968 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800996e:	4b0b      	ldr	r3, [pc, #44]	@ (800999c <xTaskGetSchedulerState+0x34>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d102      	bne.n	800997c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009976:	2301      	movs	r3, #1
 8009978:	607b      	str	r3, [r7, #4]
 800997a:	e008      	b.n	800998e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800997c:	4b08      	ldr	r3, [pc, #32]	@ (80099a0 <xTaskGetSchedulerState+0x38>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d102      	bne.n	800998a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009984:	2302      	movs	r3, #2
 8009986:	607b      	str	r3, [r7, #4]
 8009988:	e001      	b.n	800998e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800998a:	2300      	movs	r3, #0
 800998c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800998e:	687b      	ldr	r3, [r7, #4]
	}
 8009990:	4618      	mov	r0, r3
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	20008650 	.word	0x20008650
 80099a0:	2000866c 	.word	0x2000866c

080099a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099b0:	2300      	movs	r3, #0
 80099b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d058      	beq.n	8009a6c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009a78 <xTaskPriorityDisinherit+0xd4>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d00b      	beq.n	80099dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	60fb      	str	r3, [r7, #12]
}
 80099d6:	bf00      	nop
 80099d8:	bf00      	nop
 80099da:	e7fd      	b.n	80099d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10b      	bne.n	80099fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	60bb      	str	r3, [r7, #8]
}
 80099f6:	bf00      	nop
 80099f8:	bf00      	nop
 80099fa:	e7fd      	b.n	80099f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a00:	1e5a      	subs	r2, r3, #1
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d02c      	beq.n	8009a6c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d128      	bne.n	8009a6c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe fb8a 	bl	8008138 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a7c <xTaskPriorityDisinherit+0xd8>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d903      	bls.n	8009a4c <xTaskPriorityDisinherit+0xa8>
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a48:	4a0c      	ldr	r2, [pc, #48]	@ (8009a7c <xTaskPriorityDisinherit+0xd8>)
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4a09      	ldr	r2, [pc, #36]	@ (8009a80 <xTaskPriorityDisinherit+0xdc>)
 8009a5a:	441a      	add	r2, r3
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4619      	mov	r1, r3
 8009a62:	4610      	mov	r0, r2
 8009a64:	f7fe fb0b 	bl	800807e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a6c:	697b      	ldr	r3, [r7, #20]
	}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20008170 	.word	0x20008170
 8009a7c:	2000864c 	.word	0x2000864c
 8009a80:	20008174 	.word	0x20008174

08009a84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a8e:	4b21      	ldr	r3, [pc, #132]	@ (8009b14 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a94:	4b20      	ldr	r3, [pc, #128]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe fb4c 	bl	8008138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009aa6:	d10a      	bne.n	8009abe <prvAddCurrentTaskToDelayedList+0x3a>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d007      	beq.n	8009abe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aae:	4b1a      	ldr	r3, [pc, #104]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4819      	ldr	r0, [pc, #100]	@ (8009b1c <prvAddCurrentTaskToDelayedList+0x98>)
 8009ab8:	f7fe fae1 	bl	800807e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009abc:	e026      	b.n	8009b0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ac6:	4b14      	ldr	r3, [pc, #80]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d209      	bcs.n	8009aea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ad6:	4b12      	ldr	r3, [pc, #72]	@ (8009b20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	4b0f      	ldr	r3, [pc, #60]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	f7fe faef 	bl	80080c6 <vListInsert>
}
 8009ae8:	e010      	b.n	8009b0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aea:	4b0e      	ldr	r3, [pc, #56]	@ (8009b24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	4b0a      	ldr	r3, [pc, #40]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3304      	adds	r3, #4
 8009af4:	4619      	mov	r1, r3
 8009af6:	4610      	mov	r0, r2
 8009af8:	f7fe fae5 	bl	80080c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009afc:	4b0a      	ldr	r3, [pc, #40]	@ (8009b28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d202      	bcs.n	8009b0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b06:	4a08      	ldr	r2, [pc, #32]	@ (8009b28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6013      	str	r3, [r2, #0]
}
 8009b0c:	bf00      	nop
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20008648 	.word	0x20008648
 8009b18:	20008170 	.word	0x20008170
 8009b1c:	20008630 	.word	0x20008630
 8009b20:	20008600 	.word	0x20008600
 8009b24:	200085fc 	.word	0x200085fc
 8009b28:	20008664 	.word	0x20008664

08009b2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b08a      	sub	sp, #40	@ 0x28
 8009b30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b36:	f000 fb13 	bl	800a160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8009bb0 <xTimerCreateTimerTask+0x84>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d021      	beq.n	8009b86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b46:	2300      	movs	r3, #0
 8009b48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b4a:	1d3a      	adds	r2, r7, #4
 8009b4c:	f107 0108 	add.w	r1, r7, #8
 8009b50:	f107 030c 	add.w	r3, r7, #12
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe fa4b 	bl	8007ff0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	9202      	str	r2, [sp, #8]
 8009b62:	9301      	str	r3, [sp, #4]
 8009b64:	2302      	movs	r3, #2
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	460a      	mov	r2, r1
 8009b6c:	4911      	ldr	r1, [pc, #68]	@ (8009bb4 <xTimerCreateTimerTask+0x88>)
 8009b6e:	4812      	ldr	r0, [pc, #72]	@ (8009bb8 <xTimerCreateTimerTask+0x8c>)
 8009b70:	f7ff f806 	bl	8008b80 <xTaskCreateStatic>
 8009b74:	4603      	mov	r3, r0
 8009b76:	4a11      	ldr	r2, [pc, #68]	@ (8009bbc <xTimerCreateTimerTask+0x90>)
 8009b78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b7a:	4b10      	ldr	r3, [pc, #64]	@ (8009bbc <xTimerCreateTimerTask+0x90>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b82:	2301      	movs	r3, #1
 8009b84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10b      	bne.n	8009ba4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	613b      	str	r3, [r7, #16]
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	e7fd      	b.n	8009ba0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ba4:	697b      	ldr	r3, [r7, #20]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	200086a0 	.word	0x200086a0
 8009bb4:	08019434 	.word	0x08019434
 8009bb8:	08009cf9 	.word	0x08009cf9
 8009bbc:	200086a4 	.word	0x200086a4

08009bc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08a      	sub	sp, #40	@ 0x28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10b      	bne.n	8009bf0 <xTimerGenericCommand+0x30>
	__asm volatile
 8009bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	623b      	str	r3, [r7, #32]
}
 8009bea:	bf00      	nop
 8009bec:	bf00      	nop
 8009bee:	e7fd      	b.n	8009bec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bf0:	4b19      	ldr	r3, [pc, #100]	@ (8009c58 <xTimerGenericCommand+0x98>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d02a      	beq.n	8009c4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	dc18      	bgt.n	8009c3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c0a:	f7ff fead 	bl	8009968 <xTaskGetSchedulerState>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d109      	bne.n	8009c28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c14:	4b10      	ldr	r3, [pc, #64]	@ (8009c58 <xTimerGenericCommand+0x98>)
 8009c16:	6818      	ldr	r0, [r3, #0]
 8009c18:	f107 0110 	add.w	r1, r7, #16
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c20:	f7fe fbbe 	bl	80083a0 <xQueueGenericSend>
 8009c24:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c26:	e012      	b.n	8009c4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c28:	4b0b      	ldr	r3, [pc, #44]	@ (8009c58 <xTimerGenericCommand+0x98>)
 8009c2a:	6818      	ldr	r0, [r3, #0]
 8009c2c:	f107 0110 	add.w	r1, r7, #16
 8009c30:	2300      	movs	r3, #0
 8009c32:	2200      	movs	r2, #0
 8009c34:	f7fe fbb4 	bl	80083a0 <xQueueGenericSend>
 8009c38:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c3a:	e008      	b.n	8009c4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c3c:	4b06      	ldr	r3, [pc, #24]	@ (8009c58 <xTimerGenericCommand+0x98>)
 8009c3e:	6818      	ldr	r0, [r3, #0]
 8009c40:	f107 0110 	add.w	r1, r7, #16
 8009c44:	2300      	movs	r3, #0
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	f7fe fcac 	bl	80085a4 <xQueueGenericSendFromISR>
 8009c4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3728      	adds	r7, #40	@ 0x28
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	200086a0 	.word	0x200086a0

08009c5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c66:	4b23      	ldr	r3, [pc, #140]	@ (8009cf4 <prvProcessExpiredTimer+0x98>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	3304      	adds	r3, #4
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe fa5f 	bl	8008138 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d023      	beq.n	8009cd0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	699a      	ldr	r2, [r3, #24]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	18d1      	adds	r1, r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	6978      	ldr	r0, [r7, #20]
 8009c96:	f000 f8d5 	bl	8009e44 <prvInsertTimerInActiveList>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d020      	beq.n	8009ce2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	2100      	movs	r1, #0
 8009caa:	6978      	ldr	r0, [r7, #20]
 8009cac:	f7ff ff88 	bl	8009bc0 <xTimerGenericCommand>
 8009cb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d114      	bne.n	8009ce2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	60fb      	str	r3, [r7, #12]
}
 8009cca:	bf00      	nop
 8009ccc:	bf00      	nop
 8009cce:	e7fd      	b.n	8009ccc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cd6:	f023 0301 	bic.w	r3, r3, #1
 8009cda:	b2da      	uxtb	r2, r3
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	6978      	ldr	r0, [r7, #20]
 8009ce8:	4798      	blx	r3
}
 8009cea:	bf00      	nop
 8009cec:	3718      	adds	r7, #24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20008698 	.word	0x20008698

08009cf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d00:	f107 0308 	add.w	r3, r7, #8
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 f859 	bl	8009dbc <prvGetNextExpireTime>
 8009d0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f805 	bl	8009d20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d16:	f000 f8d7 	bl	8009ec8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d1a:	bf00      	nop
 8009d1c:	e7f0      	b.n	8009d00 <prvTimerTask+0x8>
	...

08009d20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d2a:	f7ff fa01 	bl	8009130 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d2e:	f107 0308 	add.w	r3, r7, #8
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 f866 	bl	8009e04 <prvSampleTimeNow>
 8009d38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d130      	bne.n	8009da2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10a      	bne.n	8009d5c <prvProcessTimerOrBlockTask+0x3c>
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d806      	bhi.n	8009d5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d4e:	f7ff f9fd 	bl	800914c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d52:	68f9      	ldr	r1, [r7, #12]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff ff81 	bl	8009c5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d5a:	e024      	b.n	8009da6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d008      	beq.n	8009d74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d62:	4b13      	ldr	r3, [pc, #76]	@ (8009db0 <prvProcessTimerOrBlockTask+0x90>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <prvProcessTimerOrBlockTask+0x50>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e000      	b.n	8009d72 <prvProcessTimerOrBlockTask+0x52>
 8009d70:	2300      	movs	r3, #0
 8009d72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d74:	4b0f      	ldr	r3, [pc, #60]	@ (8009db4 <prvProcessTimerOrBlockTask+0x94>)
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	4619      	mov	r1, r3
 8009d82:	f7fe fec9 	bl	8008b18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d86:	f7ff f9e1 	bl	800914c <xTaskResumeAll>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d90:	4b09      	ldr	r3, [pc, #36]	@ (8009db8 <prvProcessTimerOrBlockTask+0x98>)
 8009d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d96:	601a      	str	r2, [r3, #0]
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	f3bf 8f6f 	isb	sy
}
 8009da0:	e001      	b.n	8009da6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009da2:	f7ff f9d3 	bl	800914c <xTaskResumeAll>
}
 8009da6:	bf00      	nop
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	2000869c 	.word	0x2000869c
 8009db4:	200086a0 	.word	0x200086a0
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8009e00 <prvGetNextExpireTime+0x44>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d101      	bne.n	8009dd2 <prvGetNextExpireTime+0x16>
 8009dce:	2201      	movs	r2, #1
 8009dd0:	e000      	b.n	8009dd4 <prvGetNextExpireTime+0x18>
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d105      	bne.n	8009dec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009de0:	4b07      	ldr	r3, [pc, #28]	@ (8009e00 <prvGetNextExpireTime+0x44>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60fb      	str	r3, [r7, #12]
 8009dea:	e001      	b.n	8009df0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009df0:	68fb      	ldr	r3, [r7, #12]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	20008698 	.word	0x20008698

08009e04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e0c:	f7ff fa3c 	bl	8009288 <xTaskGetTickCount>
 8009e10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e12:	4b0b      	ldr	r3, [pc, #44]	@ (8009e40 <prvSampleTimeNow+0x3c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d205      	bcs.n	8009e28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e1c:	f000 f93a 	bl	800a094 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	e002      	b.n	8009e2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e2e:	4a04      	ldr	r2, [pc, #16]	@ (8009e40 <prvSampleTimeNow+0x3c>)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e34:	68fb      	ldr	r3, [r7, #12]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	200086a8 	.word	0x200086a8

08009e44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e52:	2300      	movs	r3, #0
 8009e54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d812      	bhi.n	8009e90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	1ad2      	subs	r2, r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d302      	bcc.n	8009e7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	617b      	str	r3, [r7, #20]
 8009e7c:	e01b      	b.n	8009eb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e7e:	4b10      	ldr	r3, [pc, #64]	@ (8009ec0 <prvInsertTimerInActiveList+0x7c>)
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3304      	adds	r3, #4
 8009e86:	4619      	mov	r1, r3
 8009e88:	4610      	mov	r0, r2
 8009e8a:	f7fe f91c 	bl	80080c6 <vListInsert>
 8009e8e:	e012      	b.n	8009eb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d206      	bcs.n	8009ea6 <prvInsertTimerInActiveList+0x62>
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d302      	bcc.n	8009ea6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	e007      	b.n	8009eb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ea6:	4b07      	ldr	r3, [pc, #28]	@ (8009ec4 <prvInsertTimerInActiveList+0x80>)
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	f7fe f908 	bl	80080c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009eb6:	697b      	ldr	r3, [r7, #20]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3718      	adds	r7, #24
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	2000869c 	.word	0x2000869c
 8009ec4:	20008698 	.word	0x20008698

08009ec8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08e      	sub	sp, #56	@ 0x38
 8009ecc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ece:	e0ce      	b.n	800a06e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	da19      	bge.n	8009f0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ed6:	1d3b      	adds	r3, r7, #4
 8009ed8:	3304      	adds	r3, #4
 8009eda:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10b      	bne.n	8009efa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	61fb      	str	r3, [r7, #28]
}
 8009ef4:	bf00      	nop
 8009ef6:	bf00      	nop
 8009ef8:	e7fd      	b.n	8009ef6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f00:	6850      	ldr	r0, [r2, #4]
 8009f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f04:	6892      	ldr	r2, [r2, #8]
 8009f06:	4611      	mov	r1, r2
 8009f08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f2c0 80ae 	blt.w	800a06e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d004      	beq.n	8009f28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f20:	3304      	adds	r3, #4
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe f908 	bl	8008138 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f28:	463b      	mov	r3, r7
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff ff6a 	bl	8009e04 <prvSampleTimeNow>
 8009f30:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b09      	cmp	r3, #9
 8009f36:	f200 8097 	bhi.w	800a068 <prvProcessReceivedCommands+0x1a0>
 8009f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f40 <prvProcessReceivedCommands+0x78>)
 8009f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f40:	08009f69 	.word	0x08009f69
 8009f44:	08009f69 	.word	0x08009f69
 8009f48:	08009f69 	.word	0x08009f69
 8009f4c:	08009fdf 	.word	0x08009fdf
 8009f50:	08009ff3 	.word	0x08009ff3
 8009f54:	0800a03f 	.word	0x0800a03f
 8009f58:	08009f69 	.word	0x08009f69
 8009f5c:	08009f69 	.word	0x08009f69
 8009f60:	08009fdf 	.word	0x08009fdf
 8009f64:	08009ff3 	.word	0x08009ff3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f6e:	f043 0301 	orr.w	r3, r3, #1
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	18d1      	adds	r1, r2, r3
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f88:	f7ff ff5c 	bl	8009e44 <prvInsertTimerInActiveList>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d06c      	beq.n	800a06c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fa0:	f003 0304 	and.w	r3, r3, #4
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d061      	beq.n	800a06c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	441a      	add	r2, r3
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fba:	f7ff fe01 	bl	8009bc0 <xTimerGenericCommand>
 8009fbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d152      	bne.n	800a06c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	61bb      	str	r3, [r7, #24]
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	e7fd      	b.n	8009fda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fe4:	f023 0301 	bic.w	r3, r3, #1
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009ff0:	e03d      	b.n	800a06e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ff8:	f043 0301 	orr.w	r3, r3, #1
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a000:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a008:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10b      	bne.n	800a02a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	617b      	str	r3, [r7, #20]
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop
 800a028:	e7fd      	b.n	800a026 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02c:	699a      	ldr	r2, [r3, #24]
 800a02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a030:	18d1      	adds	r1, r2, r3
 800a032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a038:	f7ff ff04 	bl	8009e44 <prvInsertTimerInActiveList>
					break;
 800a03c:	e017      	b.n	800a06e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a044:	f003 0302 	and.w	r3, r3, #2
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d103      	bne.n	800a054 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a04c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a04e:	f000 fbeb 	bl	800a828 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a052:	e00c      	b.n	800a06e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a056:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a05a:	f023 0301 	bic.w	r3, r3, #1
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a062:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a066:	e002      	b.n	800a06e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a068:	bf00      	nop
 800a06a:	e000      	b.n	800a06e <prvProcessReceivedCommands+0x1a6>
					break;
 800a06c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a06e:	4b08      	ldr	r3, [pc, #32]	@ (800a090 <prvProcessReceivedCommands+0x1c8>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	1d39      	adds	r1, r7, #4
 800a074:	2200      	movs	r2, #0
 800a076:	4618      	mov	r0, r3
 800a078:	f7fe fb32 	bl	80086e0 <xQueueReceive>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f47f af26 	bne.w	8009ed0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	3730      	adds	r7, #48	@ 0x30
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	200086a0 	.word	0x200086a0

0800a094 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a09a:	e049      	b.n	800a130 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a09c:	4b2e      	ldr	r3, [pc, #184]	@ (800a158 <prvSwitchTimerLists+0xc4>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0a6:	4b2c      	ldr	r3, [pc, #176]	@ (800a158 <prvSwitchTimerLists+0xc4>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fe f83f 	bl	8008138 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d02f      	beq.n	800a130 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d90e      	bls.n	800a100 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a158 <prvSwitchTimerLists+0xc4>)
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	f7fd ffe4 	bl	80080c6 <vListInsert>
 800a0fe:	e017      	b.n	800a130 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a100:	2300      	movs	r3, #0
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	2300      	movs	r3, #0
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	2100      	movs	r1, #0
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f7ff fd58 	bl	8009bc0 <xTimerGenericCommand>
 800a110:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10b      	bne.n	800a130 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	603b      	str	r3, [r7, #0]
}
 800a12a:	bf00      	nop
 800a12c:	bf00      	nop
 800a12e:	e7fd      	b.n	800a12c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a130:	4b09      	ldr	r3, [pc, #36]	@ (800a158 <prvSwitchTimerLists+0xc4>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1b0      	bne.n	800a09c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a13a:	4b07      	ldr	r3, [pc, #28]	@ (800a158 <prvSwitchTimerLists+0xc4>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a140:	4b06      	ldr	r3, [pc, #24]	@ (800a15c <prvSwitchTimerLists+0xc8>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a04      	ldr	r2, [pc, #16]	@ (800a158 <prvSwitchTimerLists+0xc4>)
 800a146:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a148:	4a04      	ldr	r2, [pc, #16]	@ (800a15c <prvSwitchTimerLists+0xc8>)
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	6013      	str	r3, [r2, #0]
}
 800a14e:	bf00      	nop
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20008698 	.word	0x20008698
 800a15c:	2000869c 	.word	0x2000869c

0800a160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a166:	f000 f96f 	bl	800a448 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a16a:	4b15      	ldr	r3, [pc, #84]	@ (800a1c0 <prvCheckForValidListAndQueue+0x60>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d120      	bne.n	800a1b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a172:	4814      	ldr	r0, [pc, #80]	@ (800a1c4 <prvCheckForValidListAndQueue+0x64>)
 800a174:	f7fd ff56 	bl	8008024 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a178:	4813      	ldr	r0, [pc, #76]	@ (800a1c8 <prvCheckForValidListAndQueue+0x68>)
 800a17a:	f7fd ff53 	bl	8008024 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a17e:	4b13      	ldr	r3, [pc, #76]	@ (800a1cc <prvCheckForValidListAndQueue+0x6c>)
 800a180:	4a10      	ldr	r2, [pc, #64]	@ (800a1c4 <prvCheckForValidListAndQueue+0x64>)
 800a182:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a184:	4b12      	ldr	r3, [pc, #72]	@ (800a1d0 <prvCheckForValidListAndQueue+0x70>)
 800a186:	4a10      	ldr	r2, [pc, #64]	@ (800a1c8 <prvCheckForValidListAndQueue+0x68>)
 800a188:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a18a:	2300      	movs	r3, #0
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	4b11      	ldr	r3, [pc, #68]	@ (800a1d4 <prvCheckForValidListAndQueue+0x74>)
 800a190:	4a11      	ldr	r2, [pc, #68]	@ (800a1d8 <prvCheckForValidListAndQueue+0x78>)
 800a192:	2110      	movs	r1, #16
 800a194:	200a      	movs	r0, #10
 800a196:	f7fe f863 	bl	8008260 <xQueueGenericCreateStatic>
 800a19a:	4603      	mov	r3, r0
 800a19c:	4a08      	ldr	r2, [pc, #32]	@ (800a1c0 <prvCheckForValidListAndQueue+0x60>)
 800a19e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a1a0:	4b07      	ldr	r3, [pc, #28]	@ (800a1c0 <prvCheckForValidListAndQueue+0x60>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a1a8:	4b05      	ldr	r3, [pc, #20]	@ (800a1c0 <prvCheckForValidListAndQueue+0x60>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	490b      	ldr	r1, [pc, #44]	@ (800a1dc <prvCheckForValidListAndQueue+0x7c>)
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fc88 	bl	8008ac4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1b4:	f000 f97a 	bl	800a4ac <vPortExitCritical>
}
 800a1b8:	bf00      	nop
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	200086a0 	.word	0x200086a0
 800a1c4:	20008670 	.word	0x20008670
 800a1c8:	20008684 	.word	0x20008684
 800a1cc:	20008698 	.word	0x20008698
 800a1d0:	2000869c 	.word	0x2000869c
 800a1d4:	2000874c 	.word	0x2000874c
 800a1d8:	200086ac 	.word	0x200086ac
 800a1dc:	0801943c 	.word	0x0801943c

0800a1e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3b04      	subs	r3, #4
 800a1f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a1f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3b04      	subs	r3, #4
 800a1fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f023 0201 	bic.w	r2, r3, #1
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3b04      	subs	r3, #4
 800a20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a210:	4a0c      	ldr	r2, [pc, #48]	@ (800a244 <pxPortInitialiseStack+0x64>)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3b14      	subs	r3, #20
 800a21a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3b04      	subs	r3, #4
 800a226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f06f 0202 	mvn.w	r2, #2
 800a22e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	3b20      	subs	r3, #32
 800a234:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a236:	68fb      	ldr	r3, [r7, #12]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	0800a249 	.word	0x0800a249

0800a248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a24e:	2300      	movs	r3, #0
 800a250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a252:	4b13      	ldr	r3, [pc, #76]	@ (800a2a0 <prvTaskExitError+0x58>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a25a:	d00b      	beq.n	800a274 <prvTaskExitError+0x2c>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	60fb      	str	r3, [r7, #12]
}
 800a26e:	bf00      	nop
 800a270:	bf00      	nop
 800a272:	e7fd      	b.n	800a270 <prvTaskExitError+0x28>
	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	60bb      	str	r3, [r7, #8]
}
 800a286:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a288:	bf00      	nop
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d0fc      	beq.n	800a28a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a290:	bf00      	nop
 800a292:	bf00      	nop
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	20000028 	.word	0x20000028
	...

0800a2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2b0:	4b07      	ldr	r3, [pc, #28]	@ (800a2d0 <pxCurrentTCBConst2>)
 800a2b2:	6819      	ldr	r1, [r3, #0]
 800a2b4:	6808      	ldr	r0, [r1, #0]
 800a2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ba:	f380 8809 	msr	PSP, r0
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f04f 0000 	mov.w	r0, #0
 800a2c6:	f380 8811 	msr	BASEPRI, r0
 800a2ca:	4770      	bx	lr
 800a2cc:	f3af 8000 	nop.w

0800a2d0 <pxCurrentTCBConst2>:
 800a2d0:	20008170 	.word	0x20008170
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop

0800a2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2d8:	4808      	ldr	r0, [pc, #32]	@ (800a2fc <prvPortStartFirstTask+0x24>)
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	6800      	ldr	r0, [r0, #0]
 800a2de:	f380 8808 	msr	MSP, r0
 800a2e2:	f04f 0000 	mov.w	r0, #0
 800a2e6:	f380 8814 	msr	CONTROL, r0
 800a2ea:	b662      	cpsie	i
 800a2ec:	b661      	cpsie	f
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	df00      	svc	0
 800a2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2fa:	bf00      	nop
 800a2fc:	e000ed08 	.word	0xe000ed08

0800a300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a306:	4b47      	ldr	r3, [pc, #284]	@ (800a424 <xPortStartScheduler+0x124>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a47      	ldr	r2, [pc, #284]	@ (800a428 <xPortStartScheduler+0x128>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d10b      	bne.n	800a328 <xPortStartScheduler+0x28>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	60fb      	str	r3, [r7, #12]
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	e7fd      	b.n	800a324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a328:	4b3e      	ldr	r3, [pc, #248]	@ (800a424 <xPortStartScheduler+0x124>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a3f      	ldr	r2, [pc, #252]	@ (800a42c <xPortStartScheduler+0x12c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d10b      	bne.n	800a34a <xPortStartScheduler+0x4a>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	613b      	str	r3, [r7, #16]
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	e7fd      	b.n	800a346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a34a:	4b39      	ldr	r3, [pc, #228]	@ (800a430 <xPortStartScheduler+0x130>)
 800a34c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	22ff      	movs	r2, #255	@ 0xff
 800a35a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	4b31      	ldr	r3, [pc, #196]	@ (800a434 <xPortStartScheduler+0x134>)
 800a370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a372:	4b31      	ldr	r3, [pc, #196]	@ (800a438 <xPortStartScheduler+0x138>)
 800a374:	2207      	movs	r2, #7
 800a376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a378:	e009      	b.n	800a38e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a37a:	4b2f      	ldr	r3, [pc, #188]	@ (800a438 <xPortStartScheduler+0x138>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3b01      	subs	r3, #1
 800a380:	4a2d      	ldr	r2, [pc, #180]	@ (800a438 <xPortStartScheduler+0x138>)
 800a382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	b2db      	uxtb	r3, r3
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a38e:	78fb      	ldrb	r3, [r7, #3]
 800a390:	b2db      	uxtb	r3, r3
 800a392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a396:	2b80      	cmp	r3, #128	@ 0x80
 800a398:	d0ef      	beq.n	800a37a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a39a:	4b27      	ldr	r3, [pc, #156]	@ (800a438 <xPortStartScheduler+0x138>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f1c3 0307 	rsb	r3, r3, #7
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d00b      	beq.n	800a3be <xPortStartScheduler+0xbe>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	60bb      	str	r3, [r7, #8]
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	e7fd      	b.n	800a3ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3be:	4b1e      	ldr	r3, [pc, #120]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3d0:	4a19      	ldr	r2, [pc, #100]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3dc:	4b17      	ldr	r3, [pc, #92]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a16      	ldr	r2, [pc, #88]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a3e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3e8:	4b14      	ldr	r3, [pc, #80]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a13      	ldr	r2, [pc, #76]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a3f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3f4:	f000 f8da 	bl	800a5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3f8:	4b11      	ldr	r3, [pc, #68]	@ (800a440 <xPortStartScheduler+0x140>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3fe:	f000 f8f9 	bl	800a5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a402:	4b10      	ldr	r3, [pc, #64]	@ (800a444 <xPortStartScheduler+0x144>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a0f      	ldr	r2, [pc, #60]	@ (800a444 <xPortStartScheduler+0x144>)
 800a408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a40c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a40e:	f7ff ff63 	bl	800a2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a412:	f7ff f803 	bl	800941c <vTaskSwitchContext>
	prvTaskExitError();
 800a416:	f7ff ff17 	bl	800a248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	e000ed00 	.word	0xe000ed00
 800a428:	410fc271 	.word	0x410fc271
 800a42c:	410fc270 	.word	0x410fc270
 800a430:	e000e400 	.word	0xe000e400
 800a434:	2000879c 	.word	0x2000879c
 800a438:	200087a0 	.word	0x200087a0
 800a43c:	e000ed20 	.word	0xe000ed20
 800a440:	20000028 	.word	0x20000028
 800a444:	e000ef34 	.word	0xe000ef34

0800a448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	607b      	str	r3, [r7, #4]
}
 800a460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a462:	4b10      	ldr	r3, [pc, #64]	@ (800a4a4 <vPortEnterCritical+0x5c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3301      	adds	r3, #1
 800a468:	4a0e      	ldr	r2, [pc, #56]	@ (800a4a4 <vPortEnterCritical+0x5c>)
 800a46a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a46c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a4 <vPortEnterCritical+0x5c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d110      	bne.n	800a496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a474:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a8 <vPortEnterCritical+0x60>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00b      	beq.n	800a496 <vPortEnterCritical+0x4e>
	__asm volatile
 800a47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	603b      	str	r3, [r7, #0]
}
 800a490:	bf00      	nop
 800a492:	bf00      	nop
 800a494:	e7fd      	b.n	800a492 <vPortEnterCritical+0x4a>
	}
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	20000028 	.word	0x20000028
 800a4a8:	e000ed04 	.word	0xe000ed04

0800a4ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4b2:	4b12      	ldr	r3, [pc, #72]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10b      	bne.n	800a4d2 <vPortExitCritical+0x26>
	__asm volatile
 800a4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4be:	f383 8811 	msr	BASEPRI, r3
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	607b      	str	r3, [r7, #4]
}
 800a4cc:	bf00      	nop
 800a4ce:	bf00      	nop
 800a4d0:	e7fd      	b.n	800a4ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	4a08      	ldr	r2, [pc, #32]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4dc:	4b07      	ldr	r3, [pc, #28]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d105      	bne.n	800a4f0 <vPortExitCritical+0x44>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	f383 8811 	msr	BASEPRI, r3
}
 800a4ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr
 800a4fc:	20000028 	.word	0x20000028

0800a500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a500:	f3ef 8009 	mrs	r0, PSP
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	4b15      	ldr	r3, [pc, #84]	@ (800a560 <pxCurrentTCBConst>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	f01e 0f10 	tst.w	lr, #16
 800a510:	bf08      	it	eq
 800a512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51a:	6010      	str	r0, [r2, #0]
 800a51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a524:	f380 8811 	msr	BASEPRI, r0
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f7fe ff74 	bl	800941c <vTaskSwitchContext>
 800a534:	f04f 0000 	mov.w	r0, #0
 800a538:	f380 8811 	msr	BASEPRI, r0
 800a53c:	bc09      	pop	{r0, r3}
 800a53e:	6819      	ldr	r1, [r3, #0]
 800a540:	6808      	ldr	r0, [r1, #0]
 800a542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a546:	f01e 0f10 	tst.w	lr, #16
 800a54a:	bf08      	it	eq
 800a54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a550:	f380 8809 	msr	PSP, r0
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	f3af 8000 	nop.w

0800a560 <pxCurrentTCBConst>:
 800a560:	20008170 	.word	0x20008170
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop

0800a568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	607b      	str	r3, [r7, #4]
}
 800a580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a582:	f7fe fe91 	bl	80092a8 <xTaskIncrementTick>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a58c:	4b06      	ldr	r3, [pc, #24]	@ (800a5a8 <xPortSysTickHandler+0x40>)
 800a58e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	2300      	movs	r3, #0
 800a596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	f383 8811 	msr	BASEPRI, r3
}
 800a59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e0 <vPortSetupTimerInterrupt+0x34>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e4 <vPortSetupTimerInterrupt+0x38>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e8 <vPortSetupTimerInterrupt+0x3c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a5ec <vPortSetupTimerInterrupt+0x40>)
 800a5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c6:	099b      	lsrs	r3, r3, #6
 800a5c8:	4a09      	ldr	r2, [pc, #36]	@ (800a5f0 <vPortSetupTimerInterrupt+0x44>)
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5ce:	4b04      	ldr	r3, [pc, #16]	@ (800a5e0 <vPortSetupTimerInterrupt+0x34>)
 800a5d0:	2207      	movs	r2, #7
 800a5d2:	601a      	str	r2, [r3, #0]
}
 800a5d4:	bf00      	nop
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	e000e010 	.word	0xe000e010
 800a5e4:	e000e018 	.word	0xe000e018
 800a5e8:	2000001c 	.word	0x2000001c
 800a5ec:	10624dd3 	.word	0x10624dd3
 800a5f0:	e000e014 	.word	0xe000e014

0800a5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a604 <vPortEnableVFP+0x10>
 800a5f8:	6801      	ldr	r1, [r0, #0]
 800a5fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a5fe:	6001      	str	r1, [r0, #0]
 800a600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a602:	bf00      	nop
 800a604:	e000ed88 	.word	0xe000ed88

0800a608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a60e:	f3ef 8305 	mrs	r3, IPSR
 800a612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b0f      	cmp	r3, #15
 800a618:	d915      	bls.n	800a646 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a61a:	4a18      	ldr	r2, [pc, #96]	@ (800a67c <vPortValidateInterruptPriority+0x74>)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	4413      	add	r3, r2
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a624:	4b16      	ldr	r3, [pc, #88]	@ (800a680 <vPortValidateInterruptPriority+0x78>)
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	7afa      	ldrb	r2, [r7, #11]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d20b      	bcs.n	800a646 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	607b      	str	r3, [r7, #4]
}
 800a640:	bf00      	nop
 800a642:	bf00      	nop
 800a644:	e7fd      	b.n	800a642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a646:	4b0f      	ldr	r3, [pc, #60]	@ (800a684 <vPortValidateInterruptPriority+0x7c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a64e:	4b0e      	ldr	r3, [pc, #56]	@ (800a688 <vPortValidateInterruptPriority+0x80>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d90b      	bls.n	800a66e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	603b      	str	r3, [r7, #0]
}
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	e7fd      	b.n	800a66a <vPortValidateInterruptPriority+0x62>
	}
 800a66e:	bf00      	nop
 800a670:	3714      	adds	r7, #20
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	e000e3f0 	.word	0xe000e3f0
 800a680:	2000879c 	.word	0x2000879c
 800a684:	e000ed0c 	.word	0xe000ed0c
 800a688:	200087a0 	.word	0x200087a0

0800a68c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08a      	sub	sp, #40	@ 0x28
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a698:	f7fe fd4a 	bl	8009130 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a69c:	4b5c      	ldr	r3, [pc, #368]	@ (800a810 <pvPortMalloc+0x184>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6a4:	f000 f924 	bl	800a8f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a814 <pvPortMalloc+0x188>)
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f040 8095 	bne.w	800a7e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01e      	beq.n	800a6fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a6bc:	2208      	movs	r2, #8
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d015      	beq.n	800a6fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f023 0307 	bic.w	r3, r3, #7
 800a6d4:	3308      	adds	r3, #8
 800a6d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f003 0307 	and.w	r3, r3, #7
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00b      	beq.n	800a6fa <pvPortMalloc+0x6e>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	617b      	str	r3, [r7, #20]
}
 800a6f4:	bf00      	nop
 800a6f6:	bf00      	nop
 800a6f8:	e7fd      	b.n	800a6f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d06f      	beq.n	800a7e0 <pvPortMalloc+0x154>
 800a700:	4b45      	ldr	r3, [pc, #276]	@ (800a818 <pvPortMalloc+0x18c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	429a      	cmp	r2, r3
 800a708:	d86a      	bhi.n	800a7e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a70a:	4b44      	ldr	r3, [pc, #272]	@ (800a81c <pvPortMalloc+0x190>)
 800a70c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a70e:	4b43      	ldr	r3, [pc, #268]	@ (800a81c <pvPortMalloc+0x190>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a714:	e004      	b.n	800a720 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a718:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	429a      	cmp	r2, r3
 800a728:	d903      	bls.n	800a732 <pvPortMalloc+0xa6>
 800a72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1f1      	bne.n	800a716 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a732:	4b37      	ldr	r3, [pc, #220]	@ (800a810 <pvPortMalloc+0x184>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a738:	429a      	cmp	r2, r3
 800a73a:	d051      	beq.n	800a7e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2208      	movs	r2, #8
 800a742:	4413      	add	r3, r2
 800a744:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	1ad2      	subs	r2, r2, r3
 800a756:	2308      	movs	r3, #8
 800a758:	005b      	lsls	r3, r3, #1
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d920      	bls.n	800a7a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a75e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4413      	add	r3, r2
 800a764:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	f003 0307 	and.w	r3, r3, #7
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00b      	beq.n	800a788 <pvPortMalloc+0xfc>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	613b      	str	r3, [r7, #16]
}
 800a782:	bf00      	nop
 800a784:	bf00      	nop
 800a786:	e7fd      	b.n	800a784 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	1ad2      	subs	r2, r2, r3
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a79a:	69b8      	ldr	r0, [r7, #24]
 800a79c:	f000 f90a 	bl	800a9b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a818 <pvPortMalloc+0x18c>)
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	4a1b      	ldr	r2, [pc, #108]	@ (800a818 <pvPortMalloc+0x18c>)
 800a7ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a818 <pvPortMalloc+0x18c>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a820 <pvPortMalloc+0x194>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d203      	bcs.n	800a7c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7ba:	4b17      	ldr	r3, [pc, #92]	@ (800a818 <pvPortMalloc+0x18c>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a18      	ldr	r2, [pc, #96]	@ (800a820 <pvPortMalloc+0x194>)
 800a7c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	4b13      	ldr	r3, [pc, #76]	@ (800a814 <pvPortMalloc+0x188>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	431a      	orrs	r2, r3
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7d6:	4b13      	ldr	r3, [pc, #76]	@ (800a824 <pvPortMalloc+0x198>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	4a11      	ldr	r2, [pc, #68]	@ (800a824 <pvPortMalloc+0x198>)
 800a7de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7e0:	f7fe fcb4 	bl	800914c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	f003 0307 	and.w	r3, r3, #7
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00b      	beq.n	800a806 <pvPortMalloc+0x17a>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	60fb      	str	r3, [r7, #12]
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	e7fd      	b.n	800a802 <pvPortMalloc+0x176>
	return pvReturn;
 800a806:	69fb      	ldr	r3, [r7, #28]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3728      	adds	r7, #40	@ 0x28
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	2000c3ac 	.word	0x2000c3ac
 800a814:	2000c3c0 	.word	0x2000c3c0
 800a818:	2000c3b0 	.word	0x2000c3b0
 800a81c:	2000c3a4 	.word	0x2000c3a4
 800a820:	2000c3b4 	.word	0x2000c3b4
 800a824:	2000c3b8 	.word	0x2000c3b8

0800a828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d04f      	beq.n	800a8da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a83a:	2308      	movs	r3, #8
 800a83c:	425b      	negs	r3, r3
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	4413      	add	r3, r2
 800a842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	4b25      	ldr	r3, [pc, #148]	@ (800a8e4 <vPortFree+0xbc>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4013      	ands	r3, r2
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10b      	bne.n	800a86e <vPortFree+0x46>
	__asm volatile
 800a856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	60fb      	str	r3, [r7, #12]
}
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
 800a86c:	e7fd      	b.n	800a86a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00b      	beq.n	800a88e <vPortFree+0x66>
	__asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	60bb      	str	r3, [r7, #8]
}
 800a888:	bf00      	nop
 800a88a:	bf00      	nop
 800a88c:	e7fd      	b.n	800a88a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	685a      	ldr	r2, [r3, #4]
 800a892:	4b14      	ldr	r3, [pc, #80]	@ (800a8e4 <vPortFree+0xbc>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4013      	ands	r3, r2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d01e      	beq.n	800a8da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d11a      	bne.n	800a8da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a8e4 <vPortFree+0xbc>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	43db      	mvns	r3, r3
 800a8ae:	401a      	ands	r2, r3
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8b4:	f7fe fc3c 	bl	8009130 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e8 <vPortFree+0xc0>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	4a09      	ldr	r2, [pc, #36]	@ (800a8e8 <vPortFree+0xc0>)
 800a8c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8c6:	6938      	ldr	r0, [r7, #16]
 800a8c8:	f000 f874 	bl	800a9b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a8cc:	4b07      	ldr	r3, [pc, #28]	@ (800a8ec <vPortFree+0xc4>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	4a06      	ldr	r2, [pc, #24]	@ (800a8ec <vPortFree+0xc4>)
 800a8d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8d6:	f7fe fc39 	bl	800914c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8da:	bf00      	nop
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	2000c3c0 	.word	0x2000c3c0
 800a8e8:	2000c3b0 	.word	0x2000c3b0
 800a8ec:	2000c3bc 	.word	0x2000c3bc

0800a8f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a8fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8fc:	4b27      	ldr	r3, [pc, #156]	@ (800a99c <prvHeapInit+0xac>)
 800a8fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f003 0307 	and.w	r3, r3, #7
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00c      	beq.n	800a924 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3307      	adds	r3, #7
 800a90e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f023 0307 	bic.w	r3, r3, #7
 800a916:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	4a1f      	ldr	r2, [pc, #124]	@ (800a99c <prvHeapInit+0xac>)
 800a920:	4413      	add	r3, r2
 800a922:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a928:	4a1d      	ldr	r2, [pc, #116]	@ (800a9a0 <prvHeapInit+0xb0>)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a92e:	4b1c      	ldr	r3, [pc, #112]	@ (800a9a0 <prvHeapInit+0xb0>)
 800a930:	2200      	movs	r2, #0
 800a932:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	4413      	add	r3, r2
 800a93a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a93c:	2208      	movs	r2, #8
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	1a9b      	subs	r3, r3, r2
 800a942:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f023 0307 	bic.w	r3, r3, #7
 800a94a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4a15      	ldr	r2, [pc, #84]	@ (800a9a4 <prvHeapInit+0xb4>)
 800a950:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a952:	4b14      	ldr	r3, [pc, #80]	@ (800a9a4 <prvHeapInit+0xb4>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2200      	movs	r2, #0
 800a958:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a95a:	4b12      	ldr	r3, [pc, #72]	@ (800a9a4 <prvHeapInit+0xb4>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2200      	movs	r2, #0
 800a960:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	1ad2      	subs	r2, r2, r3
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a970:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a4 <prvHeapInit+0xb4>)
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	4a0a      	ldr	r2, [pc, #40]	@ (800a9a8 <prvHeapInit+0xb8>)
 800a97e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	4a09      	ldr	r2, [pc, #36]	@ (800a9ac <prvHeapInit+0xbc>)
 800a986:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a988:	4b09      	ldr	r3, [pc, #36]	@ (800a9b0 <prvHeapInit+0xc0>)
 800a98a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a98e:	601a      	str	r2, [r3, #0]
}
 800a990:	bf00      	nop
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	200087a4 	.word	0x200087a4
 800a9a0:	2000c3a4 	.word	0x2000c3a4
 800a9a4:	2000c3ac 	.word	0x2000c3ac
 800a9a8:	2000c3b4 	.word	0x2000c3b4
 800a9ac:	2000c3b0 	.word	0x2000c3b0
 800a9b0:	2000c3c0 	.word	0x2000c3c0

0800a9b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9bc:	4b28      	ldr	r3, [pc, #160]	@ (800aa60 <prvInsertBlockIntoFreeList+0xac>)
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	e002      	b.n	800a9c8 <prvInsertBlockIntoFreeList+0x14>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d8f7      	bhi.n	800a9c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	4413      	add	r3, r2
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d108      	bne.n	800a9f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	441a      	add	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	441a      	add	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d118      	bne.n	800aa3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	4b15      	ldr	r3, [pc, #84]	@ (800aa64 <prvInsertBlockIntoFreeList+0xb0>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d00d      	beq.n	800aa32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685a      	ldr	r2, [r3, #4]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	441a      	add	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	e008      	b.n	800aa44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa32:	4b0c      	ldr	r3, [pc, #48]	@ (800aa64 <prvInsertBlockIntoFreeList+0xb0>)
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	601a      	str	r2, [r3, #0]
 800aa3a:	e003      	b.n	800aa44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d002      	beq.n	800aa52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa52:	bf00      	nop
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	2000c3a4 	.word	0x2000c3a4
 800aa64:	2000c3ac 	.word	0x2000c3ac

0800aa68 <rcl_get_zero_initialized_context>:
 800aa68:	4a03      	ldr	r2, [pc, #12]	@ (800aa78 <rcl_get_zero_initialized_context+0x10>)
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa70:	e883 0003 	stmia.w	r3, {r0, r1}
 800aa74:	4618      	mov	r0, r3
 800aa76:	4770      	bx	lr
 800aa78:	080194ac 	.word	0x080194ac

0800aa7c <rcl_context_is_valid>:
 800aa7c:	b118      	cbz	r0, 800aa86 <rcl_context_is_valid+0xa>
 800aa7e:	6840      	ldr	r0, [r0, #4]
 800aa80:	3800      	subs	r0, #0
 800aa82:	bf18      	it	ne
 800aa84:	2001      	movne	r0, #1
 800aa86:	4770      	bx	lr

0800aa88 <rcl_context_get_rmw_context>:
 800aa88:	b110      	cbz	r0, 800aa90 <rcl_context_get_rmw_context+0x8>
 800aa8a:	6800      	ldr	r0, [r0, #0]
 800aa8c:	b100      	cbz	r0, 800aa90 <rcl_context_get_rmw_context+0x8>
 800aa8e:	3028      	adds	r0, #40	@ 0x28
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop

0800aa94 <__cleanup_context>:
 800aa94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa98:	4606      	mov	r6, r0
 800aa9a:	6800      	ldr	r0, [r0, #0]
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	6073      	str	r3, [r6, #4]
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d049      	beq.n	800ab38 <__cleanup_context+0xa4>
 800aaa4:	6947      	ldr	r7, [r0, #20]
 800aaa6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800aaaa:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800aaae:	b137      	cbz	r7, 800aabe <__cleanup_context+0x2a>
 800aab0:	3014      	adds	r0, #20
 800aab2:	f000 f8cb 	bl	800ac4c <rcl_init_options_fini>
 800aab6:	4607      	mov	r7, r0
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d144      	bne.n	800ab46 <__cleanup_context+0xb2>
 800aabc:	6830      	ldr	r0, [r6, #0]
 800aabe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aac0:	b143      	cbz	r3, 800aad4 <__cleanup_context+0x40>
 800aac2:	3028      	adds	r0, #40	@ 0x28
 800aac4:	f002 ff3a 	bl	800d93c <rmw_context_fini>
 800aac8:	b118      	cbz	r0, 800aad2 <__cleanup_context+0x3e>
 800aaca:	2f00      	cmp	r7, #0
 800aacc:	d03e      	beq.n	800ab4c <__cleanup_context+0xb8>
 800aace:	f002 f94b 	bl	800cd68 <rcutils_reset_error>
 800aad2:	6830      	ldr	r0, [r6, #0]
 800aad4:	6a03      	ldr	r3, [r0, #32]
 800aad6:	b1db      	cbz	r3, 800ab10 <__cleanup_context+0x7c>
 800aad8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800aadc:	2a01      	cmp	r2, #1
 800aade:	f17c 0100 	sbcs.w	r1, ip, #0
 800aae2:	db11      	blt.n	800ab08 <__cleanup_context+0x74>
 800aae4:	2400      	movs	r4, #0
 800aae6:	4625      	mov	r5, r4
 800aae8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800aaec:	4649      	mov	r1, r9
 800aaee:	b1b8      	cbz	r0, 800ab20 <__cleanup_context+0x8c>
 800aaf0:	47c0      	blx	r8
 800aaf2:	6833      	ldr	r3, [r6, #0]
 800aaf4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800aaf8:	3401      	adds	r4, #1
 800aafa:	f145 0500 	adc.w	r5, r5, #0
 800aafe:	4294      	cmp	r4, r2
 800ab00:	eb75 010c 	sbcs.w	r1, r5, ip
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	dbef      	blt.n	800aae8 <__cleanup_context+0x54>
 800ab08:	4618      	mov	r0, r3
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	47c0      	blx	r8
 800ab0e:	6830      	ldr	r0, [r6, #0]
 800ab10:	4649      	mov	r1, r9
 800ab12:	47c0      	blx	r8
 800ab14:	2300      	movs	r3, #0
 800ab16:	e9c6 3300 	strd	r3, r3, [r6]
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab20:	3401      	adds	r4, #1
 800ab22:	f145 0500 	adc.w	r5, r5, #0
 800ab26:	4294      	cmp	r4, r2
 800ab28:	eb75 010c 	sbcs.w	r1, r5, ip
 800ab2c:	dbdc      	blt.n	800aae8 <__cleanup_context+0x54>
 800ab2e:	4618      	mov	r0, r3
 800ab30:	4649      	mov	r1, r9
 800ab32:	47c0      	blx	r8
 800ab34:	6830      	ldr	r0, [r6, #0]
 800ab36:	e7eb      	b.n	800ab10 <__cleanup_context+0x7c>
 800ab38:	4607      	mov	r7, r0
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	e9c6 3300 	strd	r3, r3, [r6]
 800ab40:	4638      	mov	r0, r7
 800ab42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab46:	f002 f90f 	bl	800cd68 <rcutils_reset_error>
 800ab4a:	e7b7      	b.n	800aabc <__cleanup_context+0x28>
 800ab4c:	f008 fee6 	bl	801391c <rcl_convert_rmw_ret_to_rcl_ret>
 800ab50:	4607      	mov	r7, r0
 800ab52:	e7bc      	b.n	800aace <__cleanup_context+0x3a>

0800ab54 <rcl_context_fini>:
 800ab54:	b178      	cbz	r0, 800ab76 <rcl_context_fini+0x22>
 800ab56:	b510      	push	{r4, lr}
 800ab58:	4604      	mov	r4, r0
 800ab5a:	6800      	ldr	r0, [r0, #0]
 800ab5c:	b150      	cbz	r0, 800ab74 <rcl_context_fini+0x20>
 800ab5e:	6863      	ldr	r3, [r4, #4]
 800ab60:	b93b      	cbnz	r3, 800ab72 <rcl_context_fini+0x1e>
 800ab62:	f002 f821 	bl	800cba8 <rcutils_allocator_is_valid>
 800ab66:	b120      	cbz	r0, 800ab72 <rcl_context_fini+0x1e>
 800ab68:	4620      	mov	r0, r4
 800ab6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab6e:	f7ff bf91 	b.w	800aa94 <__cleanup_context>
 800ab72:	200b      	movs	r0, #11
 800ab74:	bd10      	pop	{r4, pc}
 800ab76:	200b      	movs	r0, #11
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop

0800ab7c <rcl_get_zero_initialized_init_options>:
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	4770      	bx	lr

0800ab80 <rcl_init_options_init>:
 800ab80:	b084      	sub	sp, #16
 800ab82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab84:	b097      	sub	sp, #92	@ 0x5c
 800ab86:	ae1d      	add	r6, sp, #116	@ 0x74
 800ab88:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d058      	beq.n	800ac42 <rcl_init_options_init+0xc2>
 800ab90:	6803      	ldr	r3, [r0, #0]
 800ab92:	4605      	mov	r5, r0
 800ab94:	b133      	cbz	r3, 800aba4 <rcl_init_options_init+0x24>
 800ab96:	2464      	movs	r4, #100	@ 0x64
 800ab98:	4620      	mov	r0, r4
 800ab9a:	b017      	add	sp, #92	@ 0x5c
 800ab9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800aba0:	b004      	add	sp, #16
 800aba2:	4770      	bx	lr
 800aba4:	4630      	mov	r0, r6
 800aba6:	f001 ffff 	bl	800cba8 <rcutils_allocator_is_valid>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d049      	beq.n	800ac42 <rcl_init_options_init+0xc2>
 800abae:	46b4      	mov	ip, r6
 800abb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800abb4:	ac11      	add	r4, sp, #68	@ 0x44
 800abb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abb8:	f8dc 3000 	ldr.w	r3, [ip]
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800abc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800abc2:	2050      	movs	r0, #80	@ 0x50
 800abc4:	4798      	blx	r3
 800abc6:	4604      	mov	r4, r0
 800abc8:	6028      	str	r0, [r5, #0]
 800abca:	2800      	cmp	r0, #0
 800abcc:	d03b      	beq.n	800ac46 <rcl_init_options_init+0xc6>
 800abce:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800abd2:	4686      	mov	lr, r0
 800abd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800abd8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800abdc:	f8dc 3000 	ldr.w	r3, [ip]
 800abe0:	f8ce 3000 	str.w	r3, [lr]
 800abe4:	a802      	add	r0, sp, #8
 800abe6:	f002 fa83 	bl	800d0f0 <rmw_get_zero_initialized_init_options>
 800abea:	f10d 0e08 	add.w	lr, sp, #8
 800abee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800abf2:	f104 0c18 	add.w	ip, r4, #24
 800abf6:	682f      	ldr	r7, [r5, #0]
 800abf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800abfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ac00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ac04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ac08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ac0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ac10:	ac20      	add	r4, sp, #128	@ 0x80
 800ac12:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ac16:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ac1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ac1e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ac22:	f107 0018 	add.w	r0, r7, #24
 800ac26:	f002 fbcd 	bl	800d3c4 <rmw_init_options_init>
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	d0b3      	beq.n	800ab98 <rcl_init_options_init+0x18>
 800ac30:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800ac32:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ac34:	6828      	ldr	r0, [r5, #0]
 800ac36:	4798      	blx	r3
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f008 fe6f 	bl	801391c <rcl_convert_rmw_ret_to_rcl_ret>
 800ac3e:	4604      	mov	r4, r0
 800ac40:	e7aa      	b.n	800ab98 <rcl_init_options_init+0x18>
 800ac42:	240b      	movs	r4, #11
 800ac44:	e7a8      	b.n	800ab98 <rcl_init_options_init+0x18>
 800ac46:	240a      	movs	r4, #10
 800ac48:	e7a6      	b.n	800ab98 <rcl_init_options_init+0x18>
 800ac4a:	bf00      	nop

0800ac4c <rcl_init_options_fini>:
 800ac4c:	b530      	push	{r4, r5, lr}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	b1f0      	cbz	r0, 800ac90 <rcl_init_options_fini+0x44>
 800ac52:	6803      	ldr	r3, [r0, #0]
 800ac54:	4604      	mov	r4, r0
 800ac56:	b1db      	cbz	r3, 800ac90 <rcl_init_options_fini+0x44>
 800ac58:	469c      	mov	ip, r3
 800ac5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ac5e:	f10d 0e04 	add.w	lr, sp, #4
 800ac62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ac66:	f8dc 3000 	ldr.w	r3, [ip]
 800ac6a:	f8ce 3000 	str.w	r3, [lr]
 800ac6e:	a801      	add	r0, sp, #4
 800ac70:	f001 ff9a 	bl	800cba8 <rcutils_allocator_is_valid>
 800ac74:	b160      	cbz	r0, 800ac90 <rcl_init_options_fini+0x44>
 800ac76:	6820      	ldr	r0, [r4, #0]
 800ac78:	3018      	adds	r0, #24
 800ac7a:	f002 fc79 	bl	800d570 <rmw_init_options_fini>
 800ac7e:	4605      	mov	r5, r0
 800ac80:	b950      	cbnz	r0, 800ac98 <rcl_init_options_fini+0x4c>
 800ac82:	6820      	ldr	r0, [r4, #0]
 800ac84:	9b02      	ldr	r3, [sp, #8]
 800ac86:	9905      	ldr	r1, [sp, #20]
 800ac88:	4798      	blx	r3
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	b007      	add	sp, #28
 800ac8e:	bd30      	pop	{r4, r5, pc}
 800ac90:	250b      	movs	r5, #11
 800ac92:	4628      	mov	r0, r5
 800ac94:	b007      	add	sp, #28
 800ac96:	bd30      	pop	{r4, r5, pc}
 800ac98:	f008 fe40 	bl	801391c <rcl_convert_rmw_ret_to_rcl_ret>
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	e7f8      	b.n	800ac92 <rcl_init_options_fini+0x46>

0800aca0 <rcl_init_options_copy>:
 800aca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aca4:	b094      	sub	sp, #80	@ 0x50
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d058      	beq.n	800ad5c <rcl_init_options_copy+0xbc>
 800acaa:	4604      	mov	r4, r0
 800acac:	6800      	ldr	r0, [r0, #0]
 800acae:	2800      	cmp	r0, #0
 800acb0:	d054      	beq.n	800ad5c <rcl_init_options_copy+0xbc>
 800acb2:	460e      	mov	r6, r1
 800acb4:	f001 ff78 	bl	800cba8 <rcutils_allocator_is_valid>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d04f      	beq.n	800ad5c <rcl_init_options_copy+0xbc>
 800acbc:	2e00      	cmp	r6, #0
 800acbe:	d04d      	beq.n	800ad5c <rcl_init_options_copy+0xbc>
 800acc0:	6833      	ldr	r3, [r6, #0]
 800acc2:	b123      	cbz	r3, 800acce <rcl_init_options_copy+0x2e>
 800acc4:	2464      	movs	r4, #100	@ 0x64
 800acc6:	4620      	mov	r0, r4
 800acc8:	b014      	add	sp, #80	@ 0x50
 800acca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acce:	6827      	ldr	r7, [r4, #0]
 800acd0:	46bc      	mov	ip, r7
 800acd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800acd6:	ad0f      	add	r5, sp, #60	@ 0x3c
 800acd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800acda:	f8dc 3000 	ldr.w	r3, [ip]
 800acde:	f8d7 8000 	ldr.w	r8, [r7]
 800ace2:	602b      	str	r3, [r5, #0]
 800ace4:	4619      	mov	r1, r3
 800ace6:	2050      	movs	r0, #80	@ 0x50
 800ace8:	47c0      	blx	r8
 800acea:	4605      	mov	r5, r0
 800acec:	6030      	str	r0, [r6, #0]
 800acee:	b3d0      	cbz	r0, 800ad66 <rcl_init_options_copy+0xc6>
 800acf0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800acf4:	4686      	mov	lr, r0
 800acf6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800acfa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800acfe:	f8dc 3000 	ldr.w	r3, [ip]
 800ad02:	f8ce 3000 	str.w	r3, [lr]
 800ad06:	4668      	mov	r0, sp
 800ad08:	f002 f9f2 	bl	800d0f0 <rmw_get_zero_initialized_init_options>
 800ad0c:	46ee      	mov	lr, sp
 800ad0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ad12:	f105 0c18 	add.w	ip, r5, #24
 800ad16:	6824      	ldr	r4, [r4, #0]
 800ad18:	6835      	ldr	r5, [r6, #0]
 800ad1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad1e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ad22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ad2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad2e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ad32:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ad36:	f104 0018 	add.w	r0, r4, #24
 800ad3a:	f105 0118 	add.w	r1, r5, #24
 800ad3e:	f002 fba3 	bl	800d488 <rmw_init_options_copy>
 800ad42:	4604      	mov	r4, r0
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d0be      	beq.n	800acc6 <rcl_init_options_copy+0x26>
 800ad48:	f001 fff8 	bl	800cd3c <rcutils_get_error_string>
 800ad4c:	f002 f80c 	bl	800cd68 <rcutils_reset_error>
 800ad50:	4630      	mov	r0, r6
 800ad52:	f7ff ff7b 	bl	800ac4c <rcl_init_options_fini>
 800ad56:	b140      	cbz	r0, 800ad6a <rcl_init_options_copy+0xca>
 800ad58:	4604      	mov	r4, r0
 800ad5a:	e7b4      	b.n	800acc6 <rcl_init_options_copy+0x26>
 800ad5c:	240b      	movs	r4, #11
 800ad5e:	4620      	mov	r0, r4
 800ad60:	b014      	add	sp, #80	@ 0x50
 800ad62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad66:	240a      	movs	r4, #10
 800ad68:	e7ad      	b.n	800acc6 <rcl_init_options_copy+0x26>
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	b014      	add	sp, #80	@ 0x50
 800ad6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad72:	f008 bdd3 	b.w	801391c <rcl_convert_rmw_ret_to_rcl_ret>
 800ad76:	bf00      	nop

0800ad78 <rcl_init_options_set_domain_id>:
 800ad78:	b120      	cbz	r0, 800ad84 <rcl_init_options_set_domain_id+0xc>
 800ad7a:	6803      	ldr	r3, [r0, #0]
 800ad7c:	b113      	cbz	r3, 800ad84 <rcl_init_options_set_domain_id+0xc>
 800ad7e:	6259      	str	r1, [r3, #36]	@ 0x24
 800ad80:	2000      	movs	r0, #0
 800ad82:	4770      	bx	lr
 800ad84:	200b      	movs	r0, #11
 800ad86:	4770      	bx	lr

0800ad88 <rcl_get_zero_initialized_node>:
 800ad88:	4a03      	ldr	r2, [pc, #12]	@ (800ad98 <rcl_get_zero_initialized_node+0x10>)
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ad90:	e883 0003 	stmia.w	r3, {r0, r1}
 800ad94:	4618      	mov	r0, r3
 800ad96:	4770      	bx	lr
 800ad98:	080199b8 	.word	0x080199b8

0800ad9c <rcl_node_init>:
 800ad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada0:	b0a9      	sub	sp, #164	@ 0xa4
 800ada2:	4604      	mov	r4, r0
 800ada4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800ada8:	a823      	add	r0, sp, #140	@ 0x8c
 800adaa:	460e      	mov	r6, r1
 800adac:	4615      	mov	r5, r2
 800adae:	461f      	mov	r7, r3
 800adb0:	f008 fea4 	bl	8013afc <rcl_guard_condition_get_default_options>
 800adb4:	f1b8 0f00 	cmp.w	r8, #0
 800adb8:	f000 80e6 	beq.w	800af88 <rcl_node_init+0x1ec>
 800adbc:	4640      	mov	r0, r8
 800adbe:	f001 fef3 	bl	800cba8 <rcutils_allocator_is_valid>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	f000 80e0 	beq.w	800af88 <rcl_node_init+0x1ec>
 800adc8:	2e00      	cmp	r6, #0
 800adca:	f000 80dd 	beq.w	800af88 <rcl_node_init+0x1ec>
 800adce:	2d00      	cmp	r5, #0
 800add0:	f000 80da 	beq.w	800af88 <rcl_node_init+0x1ec>
 800add4:	2c00      	cmp	r4, #0
 800add6:	f000 80d7 	beq.w	800af88 <rcl_node_init+0x1ec>
 800adda:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800adde:	f1b9 0f00 	cmp.w	r9, #0
 800ade2:	f040 80fd 	bne.w	800afe0 <rcl_node_init+0x244>
 800ade6:	2f00      	cmp	r7, #0
 800ade8:	f000 80ce 	beq.w	800af88 <rcl_node_init+0x1ec>
 800adec:	4638      	mov	r0, r7
 800adee:	f7ff fe45 	bl	800aa7c <rcl_context_is_valid>
 800adf2:	4682      	mov	sl, r0
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f000 80cd 	beq.w	800af94 <rcl_node_init+0x1f8>
 800adfa:	464a      	mov	r2, r9
 800adfc:	a922      	add	r1, sp, #136	@ 0x88
 800adfe:	4630      	mov	r0, r6
 800ae00:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800ae04:	f002 fa20 	bl	800d248 <rmw_validate_node_name>
 800ae08:	4681      	mov	r9, r0
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	f040 80be 	bne.w	800af8c <rcl_node_init+0x1f0>
 800ae10:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ae12:	2800      	cmp	r0, #0
 800ae14:	f040 80f0 	bne.w	800aff8 <rcl_node_init+0x25c>
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f7f5 fa03 	bl	8000224 <strlen>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	f040 80bb 	bne.w	800af9a <rcl_node_init+0x1fe>
 800ae24:	4d7c      	ldr	r5, [pc, #496]	@ (800b018 <rcl_node_init+0x27c>)
 800ae26:	a922      	add	r1, sp, #136	@ 0x88
 800ae28:	2200      	movs	r2, #0
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f002 f9ee 	bl	800d20c <rmw_validate_namespace>
 800ae30:	4681      	mov	r9, r0
 800ae32:	2800      	cmp	r0, #0
 800ae34:	f040 80aa 	bne.w	800af8c <rcl_node_init+0x1f0>
 800ae38:	4682      	mov	sl, r0
 800ae3a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	f040 80e0 	bne.w	800b002 <rcl_node_init+0x266>
 800ae42:	f8d8 3000 	ldr.w	r3, [r8]
 800ae46:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ae4a:	2078      	movs	r0, #120	@ 0x78
 800ae4c:	4798      	blx	r3
 800ae4e:	4681      	mov	r9, r0
 800ae50:	6060      	str	r0, [r4, #4]
 800ae52:	2800      	cmp	r0, #0
 800ae54:	f000 80ca 	beq.w	800afec <rcl_node_init+0x250>
 800ae58:	2200      	movs	r2, #0
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800ae60:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800ae64:	a808      	add	r0, sp, #32
 800ae66:	f000 f939 	bl	800b0dc <rcl_node_get_default_options>
 800ae6a:	a908      	add	r1, sp, #32
 800ae6c:	4648      	mov	r0, r9
 800ae6e:	2268      	movs	r2, #104	@ 0x68
 800ae70:	f00d fba3 	bl	80185ba <memcpy>
 800ae74:	6861      	ldr	r1, [r4, #4]
 800ae76:	6027      	str	r7, [r4, #0]
 800ae78:	4640      	mov	r0, r8
 800ae7a:	f000 f93d 	bl	800b0f8 <rcl_node_options_copy>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d158      	bne.n	800af34 <rcl_node_init+0x198>
 800ae82:	4628      	mov	r0, r5
 800ae84:	f7f5 f9ce 	bl	8000224 <strlen>
 800ae88:	4428      	add	r0, r5
 800ae8a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800ae8e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800ae92:	2b2f      	cmp	r3, #47	@ 0x2f
 800ae94:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	bf0c      	ite	eq
 800ae9c:	4b5f      	ldreq	r3, [pc, #380]	@ (800b01c <rcl_node_init+0x280>)
 800ae9e:	4b60      	ldrne	r3, [pc, #384]	@ (800b020 <rcl_node_init+0x284>)
 800aea0:	9302      	str	r3, [sp, #8]
 800aea2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aea6:	9301      	str	r3, [sp, #4]
 800aea8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800aeac:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800aeb0:	f001 ff76 	bl	800cda0 <rcutils_format_string_limit>
 800aeb4:	6823      	ldr	r3, [r4, #0]
 800aeb6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800aeba:	6818      	ldr	r0, [r3, #0]
 800aebc:	4631      	mov	r1, r6
 800aebe:	3028      	adds	r0, #40	@ 0x28
 800aec0:	462a      	mov	r2, r5
 800aec2:	6866      	ldr	r6, [r4, #4]
 800aec4:	f002 fde6 	bl	800da94 <rmw_create_node>
 800aec8:	6863      	ldr	r3, [r4, #4]
 800aeca:	66b0      	str	r0, [r6, #104]	@ 0x68
 800aecc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800aece:	2800      	cmp	r0, #0
 800aed0:	d032      	beq.n	800af38 <rcl_node_init+0x19c>
 800aed2:	f002 fe73 	bl	800dbbc <rmw_node_get_graph_guard_condition>
 800aed6:	4681      	mov	r9, r0
 800aed8:	b360      	cbz	r0, 800af34 <rcl_node_init+0x198>
 800aeda:	f8d8 3000 	ldr.w	r3, [r8]
 800aede:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800aee2:	6866      	ldr	r6, [r4, #4]
 800aee4:	2008      	movs	r0, #8
 800aee6:	4798      	blx	r3
 800aee8:	6863      	ldr	r3, [r4, #4]
 800aeea:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800aeec:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800aef0:	f1bb 0f00 	cmp.w	fp, #0
 800aef4:	d020      	beq.n	800af38 <rcl_node_init+0x19c>
 800aef6:	a806      	add	r0, sp, #24
 800aef8:	f008 fd24 	bl	8013944 <rcl_get_zero_initialized_guard_condition>
 800aefc:	a806      	add	r0, sp, #24
 800aefe:	c803      	ldmia	r0, {r0, r1}
 800af00:	6863      	ldr	r3, [r4, #4]
 800af02:	46c4      	mov	ip, r8
 800af04:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800af08:	e88b 0003 	stmia.w	fp, {r0, r1}
 800af0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800af10:	ae23      	add	r6, sp, #140	@ 0x8c
 800af12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800af14:	f8dc 3000 	ldr.w	r3, [ip]
 800af18:	6033      	str	r3, [r6, #0]
 800af1a:	ab28      	add	r3, sp, #160	@ 0xa0
 800af1c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800af20:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800af24:	4649      	mov	r1, r9
 800af26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af28:	463a      	mov	r2, r7
 800af2a:	4670      	mov	r0, lr
 800af2c:	f008 fd60 	bl	80139f0 <rcl_guard_condition_init_from_rmw>
 800af30:	4681      	mov	r9, r0
 800af32:	b328      	cbz	r0, 800af80 <rcl_node_init+0x1e4>
 800af34:	6863      	ldr	r3, [r4, #4]
 800af36:	b1f3      	cbz	r3, 800af76 <rcl_node_init+0x1da>
 800af38:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800af3a:	b128      	cbz	r0, 800af48 <rcl_node_init+0x1ac>
 800af3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af40:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800af44:	4798      	blx	r3
 800af46:	6863      	ldr	r3, [r4, #4]
 800af48:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800af4a:	b110      	cbz	r0, 800af52 <rcl_node_init+0x1b6>
 800af4c:	f002 fdba 	bl	800dac4 <rmw_destroy_node>
 800af50:	6863      	ldr	r3, [r4, #4]
 800af52:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800af54:	b148      	cbz	r0, 800af6a <rcl_node_init+0x1ce>
 800af56:	f008 fdab 	bl	8013ab0 <rcl_guard_condition_fini>
 800af5a:	6863      	ldr	r3, [r4, #4]
 800af5c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800af60:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800af62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af66:	4798      	blx	r3
 800af68:	6863      	ldr	r3, [r4, #4]
 800af6a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800af6e:	4618      	mov	r0, r3
 800af70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af74:	4798      	blx	r3
 800af76:	2300      	movs	r3, #0
 800af78:	e9c4 3300 	strd	r3, r3, [r4]
 800af7c:	f04f 0901 	mov.w	r9, #1
 800af80:	f1ba 0f00 	cmp.w	sl, #0
 800af84:	d125      	bne.n	800afd2 <rcl_node_init+0x236>
 800af86:	e001      	b.n	800af8c <rcl_node_init+0x1f0>
 800af88:	f04f 090b 	mov.w	r9, #11
 800af8c:	4648      	mov	r0, r9
 800af8e:	b029      	add	sp, #164	@ 0xa4
 800af90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af94:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800af98:	e7f8      	b.n	800af8c <rcl_node_init+0x1f0>
 800af9a:	782b      	ldrb	r3, [r5, #0]
 800af9c:	2b2f      	cmp	r3, #47	@ 0x2f
 800af9e:	f43f af42 	beq.w	800ae26 <rcl_node_init+0x8a>
 800afa2:	9503      	str	r5, [sp, #12]
 800afa4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	4b1e      	ldr	r3, [pc, #120]	@ (800b024 <rcl_node_init+0x288>)
 800afac:	9302      	str	r3, [sp, #8]
 800afae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800afb2:	9301      	str	r3, [sp, #4]
 800afb4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800afb8:	f001 fef2 	bl	800cda0 <rcutils_format_string_limit>
 800afbc:	4605      	mov	r5, r0
 800afbe:	b340      	cbz	r0, 800b012 <rcl_node_init+0x276>
 800afc0:	2200      	movs	r2, #0
 800afc2:	a922      	add	r1, sp, #136	@ 0x88
 800afc4:	9222      	str	r2, [sp, #136]	@ 0x88
 800afc6:	f002 f921 	bl	800d20c <rmw_validate_namespace>
 800afca:	4681      	mov	r9, r0
 800afcc:	2800      	cmp	r0, #0
 800afce:	f43f af34 	beq.w	800ae3a <rcl_node_init+0x9e>
 800afd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800afd6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800afda:	4628      	mov	r0, r5
 800afdc:	4798      	blx	r3
 800afde:	e7d5      	b.n	800af8c <rcl_node_init+0x1f0>
 800afe0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800afe4:	4648      	mov	r0, r9
 800afe6:	b029      	add	sp, #164	@ 0xa4
 800afe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afec:	f04f 090a 	mov.w	r9, #10
 800aff0:	f1ba 0f00 	cmp.w	sl, #0
 800aff4:	d1ed      	bne.n	800afd2 <rcl_node_init+0x236>
 800aff6:	e7c9      	b.n	800af8c <rcl_node_init+0x1f0>
 800aff8:	f002 f978 	bl	800d2ec <rmw_node_name_validation_result_string>
 800affc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800b000:	e7c4      	b.n	800af8c <rcl_node_init+0x1f0>
 800b002:	f002 f915 	bl	800d230 <rmw_namespace_validation_result_string>
 800b006:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800b00a:	f1ba 0f00 	cmp.w	sl, #0
 800b00e:	d1e0      	bne.n	800afd2 <rcl_node_init+0x236>
 800b010:	e7bc      	b.n	800af8c <rcl_node_init+0x1f0>
 800b012:	f04f 090a 	mov.w	r9, #10
 800b016:	e7b9      	b.n	800af8c <rcl_node_init+0x1f0>
 800b018:	080194b8 	.word	0x080194b8
 800b01c:	080194c0 	.word	0x080194c0
 800b020:	080194c8 	.word	0x080194c8
 800b024:	080194bc 	.word	0x080194bc

0800b028 <rcl_node_fini>:
 800b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02a:	b320      	cbz	r0, 800b076 <rcl_node_fini+0x4e>
 800b02c:	6845      	ldr	r5, [r0, #4]
 800b02e:	4604      	mov	r4, r0
 800b030:	b1fd      	cbz	r5, 800b072 <rcl_node_fini+0x4a>
 800b032:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800b034:	686f      	ldr	r7, [r5, #4]
 800b036:	692e      	ldr	r6, [r5, #16]
 800b038:	f002 fd44 	bl	800dac4 <rmw_destroy_node>
 800b03c:	6863      	ldr	r3, [r4, #4]
 800b03e:	4605      	mov	r5, r0
 800b040:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800b042:	f008 fd35 	bl	8013ab0 <rcl_guard_condition_fini>
 800b046:	ea55 0300 	orrs.w	r3, r5, r0
 800b04a:	6863      	ldr	r3, [r4, #4]
 800b04c:	4631      	mov	r1, r6
 800b04e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800b050:	bf14      	ite	ne
 800b052:	2501      	movne	r5, #1
 800b054:	2500      	moveq	r5, #0
 800b056:	47b8      	blx	r7
 800b058:	6863      	ldr	r3, [r4, #4]
 800b05a:	4631      	mov	r1, r6
 800b05c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800b05e:	47b8      	blx	r7
 800b060:	6863      	ldr	r3, [r4, #4]
 800b062:	4631      	mov	r1, r6
 800b064:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b066:	47b8      	blx	r7
 800b068:	6860      	ldr	r0, [r4, #4]
 800b06a:	4631      	mov	r1, r6
 800b06c:	47b8      	blx	r7
 800b06e:	2300      	movs	r3, #0
 800b070:	6063      	str	r3, [r4, #4]
 800b072:	4628      	mov	r0, r5
 800b074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b076:	25c8      	movs	r5, #200	@ 0xc8
 800b078:	4628      	mov	r0, r5
 800b07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b07c <rcl_node_is_valid_except_context>:
 800b07c:	b128      	cbz	r0, 800b08a <rcl_node_is_valid_except_context+0xe>
 800b07e:	6840      	ldr	r0, [r0, #4]
 800b080:	b118      	cbz	r0, 800b08a <rcl_node_is_valid_except_context+0xe>
 800b082:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800b084:	3800      	subs	r0, #0
 800b086:	bf18      	it	ne
 800b088:	2001      	movne	r0, #1
 800b08a:	4770      	bx	lr

0800b08c <rcl_node_is_valid>:
 800b08c:	b130      	cbz	r0, 800b09c <rcl_node_is_valid+0x10>
 800b08e:	6843      	ldr	r3, [r0, #4]
 800b090:	b123      	cbz	r3, 800b09c <rcl_node_is_valid+0x10>
 800b092:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b094:	b113      	cbz	r3, 800b09c <rcl_node_is_valid+0x10>
 800b096:	6800      	ldr	r0, [r0, #0]
 800b098:	f7ff bcf0 	b.w	800aa7c <rcl_context_is_valid>
 800b09c:	2000      	movs	r0, #0
 800b09e:	4770      	bx	lr

0800b0a0 <rcl_node_get_name>:
 800b0a0:	b120      	cbz	r0, 800b0ac <rcl_node_get_name+0xc>
 800b0a2:	6840      	ldr	r0, [r0, #4]
 800b0a4:	b110      	cbz	r0, 800b0ac <rcl_node_get_name+0xc>
 800b0a6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800b0a8:	b100      	cbz	r0, 800b0ac <rcl_node_get_name+0xc>
 800b0aa:	6880      	ldr	r0, [r0, #8]
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop

0800b0b0 <rcl_node_get_namespace>:
 800b0b0:	b120      	cbz	r0, 800b0bc <rcl_node_get_namespace+0xc>
 800b0b2:	6840      	ldr	r0, [r0, #4]
 800b0b4:	b110      	cbz	r0, 800b0bc <rcl_node_get_namespace+0xc>
 800b0b6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800b0b8:	b100      	cbz	r0, 800b0bc <rcl_node_get_namespace+0xc>
 800b0ba:	68c0      	ldr	r0, [r0, #12]
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop

0800b0c0 <rcl_node_get_options>:
 800b0c0:	b128      	cbz	r0, 800b0ce <rcl_node_get_options+0xe>
 800b0c2:	6840      	ldr	r0, [r0, #4]
 800b0c4:	b118      	cbz	r0, 800b0ce <rcl_node_get_options+0xe>
 800b0c6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	bf08      	it	eq
 800b0cc:	2000      	moveq	r0, #0
 800b0ce:	4770      	bx	lr

0800b0d0 <rcl_node_get_rmw_handle>:
 800b0d0:	b110      	cbz	r0, 800b0d8 <rcl_node_get_rmw_handle+0x8>
 800b0d2:	6840      	ldr	r0, [r0, #4]
 800b0d4:	b100      	cbz	r0, 800b0d8 <rcl_node_get_rmw_handle+0x8>
 800b0d6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop

0800b0dc <rcl_node_get_default_options>:
 800b0dc:	b510      	push	{r4, lr}
 800b0de:	2268      	movs	r2, #104	@ 0x68
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	f00d f942 	bl	801836c <memset>
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f001 fd4f 	bl	800cb8c <rcutils_get_default_allocator>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	7523      	strb	r3, [r4, #20]
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	bd10      	pop	{r4, pc}
 800b0f6:	bf00      	nop

0800b0f8 <rcl_node_options_copy>:
 800b0f8:	b1d0      	cbz	r0, 800b130 <rcl_node_options_copy+0x38>
 800b0fa:	b570      	push	{r4, r5, r6, lr}
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	b1a9      	cbz	r1, 800b12c <rcl_node_options_copy+0x34>
 800b100:	4288      	cmp	r0, r1
 800b102:	4684      	mov	ip, r0
 800b104:	d012      	beq.n	800b12c <rcl_node_options_copy+0x34>
 800b106:	4605      	mov	r5, r0
 800b108:	8a86      	ldrh	r6, [r0, #20]
 800b10a:	468e      	mov	lr, r1
 800b10c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b10e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b112:	682b      	ldr	r3, [r5, #0]
 800b114:	f8ce 3000 	str.w	r3, [lr]
 800b118:	f10c 0118 	add.w	r1, ip, #24
 800b11c:	2250      	movs	r2, #80	@ 0x50
 800b11e:	82a6      	strh	r6, [r4, #20]
 800b120:	f104 0018 	add.w	r0, r4, #24
 800b124:	f00d fa49 	bl	80185ba <memcpy>
 800b128:	2000      	movs	r0, #0
 800b12a:	bd70      	pop	{r4, r5, r6, pc}
 800b12c:	200b      	movs	r0, #11
 800b12e:	bd70      	pop	{r4, r5, r6, pc}
 800b130:	200b      	movs	r0, #11
 800b132:	4770      	bx	lr

0800b134 <rcl_get_zero_initialized_publisher>:
 800b134:	4b01      	ldr	r3, [pc, #4]	@ (800b13c <rcl_get_zero_initialized_publisher+0x8>)
 800b136:	6818      	ldr	r0, [r3, #0]
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	080199c0 	.word	0x080199c0

0800b140 <rcl_publisher_init>:
 800b140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b144:	b088      	sub	sp, #32
 800b146:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b148:	2d00      	cmp	r5, #0
 800b14a:	d069      	beq.n	800b220 <rcl_publisher_init+0xe0>
 800b14c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800b150:	4604      	mov	r4, r0
 800b152:	4648      	mov	r0, r9
 800b154:	460e      	mov	r6, r1
 800b156:	4690      	mov	r8, r2
 800b158:	461f      	mov	r7, r3
 800b15a:	f001 fd25 	bl	800cba8 <rcutils_allocator_is_valid>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d05e      	beq.n	800b220 <rcl_publisher_init+0xe0>
 800b162:	2c00      	cmp	r4, #0
 800b164:	d05c      	beq.n	800b220 <rcl_publisher_init+0xe0>
 800b166:	f8d4 a000 	ldr.w	sl, [r4]
 800b16a:	f1ba 0f00 	cmp.w	sl, #0
 800b16e:	d004      	beq.n	800b17a <rcl_publisher_init+0x3a>
 800b170:	2764      	movs	r7, #100	@ 0x64
 800b172:	4638      	mov	r0, r7
 800b174:	b008      	add	sp, #32
 800b176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b17a:	4630      	mov	r0, r6
 800b17c:	f7ff ff86 	bl	800b08c <rcl_node_is_valid>
 800b180:	2800      	cmp	r0, #0
 800b182:	d052      	beq.n	800b22a <rcl_publisher_init+0xea>
 800b184:	f1b8 0f00 	cmp.w	r8, #0
 800b188:	d04a      	beq.n	800b220 <rcl_publisher_init+0xe0>
 800b18a:	2f00      	cmp	r7, #0
 800b18c:	d048      	beq.n	800b220 <rcl_publisher_init+0xe0>
 800b18e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800b192:	aa07      	add	r2, sp, #28
 800b194:	9205      	str	r2, [sp, #20]
 800b196:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800b19a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b19e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b1a2:	f8cd a01c 	str.w	sl, [sp, #28]
 800b1a6:	4639      	mov	r1, r7
 800b1a8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f008 fe05 	bl	8013dbc <rcl_node_resolve_name>
 800b1b2:	4607      	mov	r7, r0
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d14f      	bne.n	800b258 <rcl_publisher_init+0x118>
 800b1b8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b1ba:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b1bc:	20c8      	movs	r0, #200	@ 0xc8
 800b1be:	4798      	blx	r3
 800b1c0:	6020      	str	r0, [r4, #0]
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d04e      	beq.n	800b264 <rcl_publisher_init+0x124>
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f7ff ff82 	bl	800b0d0 <rcl_node_get_rmw_handle>
 800b1cc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	9a07      	ldr	r2, [sp, #28]
 800b1d4:	6827      	ldr	r7, [r4, #0]
 800b1d6:	462b      	mov	r3, r5
 800b1d8:	4641      	mov	r1, r8
 800b1da:	f002 fd59 	bl	800dc90 <rmw_create_publisher>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800b1e4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b1e8:	b370      	cbz	r0, 800b248 <rcl_publisher_init+0x108>
 800b1ea:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800b1ee:	f002 fe2d 	bl	800de4c <rmw_publisher_get_actual_qos>
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	4607      	mov	r7, r0
 800b1f6:	b9d0      	cbnz	r0, 800b22e <rcl_publisher_init+0xee>
 800b1f8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800b1fc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800b200:	4629      	mov	r1, r5
 800b202:	2270      	movs	r2, #112	@ 0x70
 800b204:	4618      	mov	r0, r3
 800b206:	f00d f9d8 	bl	80185ba <memcpy>
 800b20a:	6832      	ldr	r2, [r6, #0]
 800b20c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800b210:	9807      	ldr	r0, [sp, #28]
 800b212:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b214:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b216:	4798      	blx	r3
 800b218:	4638      	mov	r0, r7
 800b21a:	b008      	add	sp, #32
 800b21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b220:	270b      	movs	r7, #11
 800b222:	4638      	mov	r0, r7
 800b224:	b008      	add	sp, #32
 800b226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b22a:	27c8      	movs	r7, #200	@ 0xc8
 800b22c:	e7a1      	b.n	800b172 <rcl_publisher_init+0x32>
 800b22e:	b18b      	cbz	r3, 800b254 <rcl_publisher_init+0x114>
 800b230:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b234:	b142      	cbz	r2, 800b248 <rcl_publisher_init+0x108>
 800b236:	4630      	mov	r0, r6
 800b238:	f7ff ff4a 	bl	800b0d0 <rcl_node_get_rmw_handle>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800b242:	f002 fe13 	bl	800de6c <rmw_destroy_publisher>
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800b24a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b24c:	4618      	mov	r0, r3
 800b24e:	4790      	blx	r2
 800b250:	2300      	movs	r3, #0
 800b252:	6023      	str	r3, [r4, #0]
 800b254:	2701      	movs	r7, #1
 800b256:	e7db      	b.n	800b210 <rcl_publisher_init+0xd0>
 800b258:	2867      	cmp	r0, #103	@ 0x67
 800b25a:	d0d9      	beq.n	800b210 <rcl_publisher_init+0xd0>
 800b25c:	2869      	cmp	r0, #105	@ 0x69
 800b25e:	d003      	beq.n	800b268 <rcl_publisher_init+0x128>
 800b260:	280a      	cmp	r0, #10
 800b262:	d1f7      	bne.n	800b254 <rcl_publisher_init+0x114>
 800b264:	270a      	movs	r7, #10
 800b266:	e7d3      	b.n	800b210 <rcl_publisher_init+0xd0>
 800b268:	2767      	movs	r7, #103	@ 0x67
 800b26a:	e7d1      	b.n	800b210 <rcl_publisher_init+0xd0>

0800b26c <rcl_publisher_fini>:
 800b26c:	b570      	push	{r4, r5, r6, lr}
 800b26e:	b300      	cbz	r0, 800b2b2 <rcl_publisher_fini+0x46>
 800b270:	4604      	mov	r4, r0
 800b272:	4608      	mov	r0, r1
 800b274:	460d      	mov	r5, r1
 800b276:	f7ff ff01 	bl	800b07c <rcl_node_is_valid_except_context>
 800b27a:	b1f0      	cbz	r0, 800b2ba <rcl_publisher_fini+0x4e>
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	b1ab      	cbz	r3, 800b2ac <rcl_publisher_fini+0x40>
 800b280:	4628      	mov	r0, r5
 800b282:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800b284:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800b286:	f7ff ff23 	bl	800b0d0 <rcl_node_get_rmw_handle>
 800b28a:	b1c8      	cbz	r0, 800b2c0 <rcl_publisher_fini+0x54>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800b292:	f002 fdeb 	bl	800de6c <rmw_destroy_publisher>
 800b296:	4603      	mov	r3, r0
 800b298:	4629      	mov	r1, r5
 800b29a:	6820      	ldr	r0, [r4, #0]
 800b29c:	1e1d      	subs	r5, r3, #0
 800b29e:	bf18      	it	ne
 800b2a0:	2501      	movne	r5, #1
 800b2a2:	47b0      	blx	r6
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	6023      	str	r3, [r4, #0]
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	461d      	mov	r5, r3
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	bd70      	pop	{r4, r5, r6, pc}
 800b2b2:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ba:	25c8      	movs	r5, #200	@ 0xc8
 800b2bc:	4628      	mov	r0, r5
 800b2be:	bd70      	pop	{r4, r5, r6, pc}
 800b2c0:	250b      	movs	r5, #11
 800b2c2:	e7f1      	b.n	800b2a8 <rcl_publisher_fini+0x3c>

0800b2c4 <rcl_publisher_get_default_options>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	4d14      	ldr	r5, [pc, #80]	@ (800b318 <rcl_publisher_get_default_options+0x54>)
 800b2c8:	4914      	ldr	r1, [pc, #80]	@ (800b31c <rcl_publisher_get_default_options+0x58>)
 800b2ca:	b088      	sub	sp, #32
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	2250      	movs	r2, #80	@ 0x50
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	f00d f972 	bl	80185ba <memcpy>
 800b2d6:	a802      	add	r0, sp, #8
 800b2d8:	f001 fc58 	bl	800cb8c <rcutils_get_default_allocator>
 800b2dc:	f10d 0c08 	add.w	ip, sp, #8
 800b2e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b2e4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800b2e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b2ec:	466e      	mov	r6, sp
 800b2ee:	f8dc 3000 	ldr.w	r3, [ip]
 800b2f2:	f8ce 3000 	str.w	r3, [lr]
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f001 ff0a 	bl	800d110 <rmw_get_default_publisher_options>
 800b2fc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b300:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b304:	e883 0003 	stmia.w	r3, {r0, r1}
 800b308:	2270      	movs	r2, #112	@ 0x70
 800b30a:	4629      	mov	r1, r5
 800b30c:	4620      	mov	r0, r4
 800b30e:	f00d f954 	bl	80185ba <memcpy>
 800b312:	4620      	mov	r0, r4
 800b314:	b008      	add	sp, #32
 800b316:	bd70      	pop	{r4, r5, r6, pc}
 800b318:	2000c3c8 	.word	0x2000c3c8
 800b31c:	080199c8 	.word	0x080199c8

0800b320 <rcl_publish>:
 800b320:	b1f8      	cbz	r0, 800b362 <rcl_publish+0x42>
 800b322:	6803      	ldr	r3, [r0, #0]
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	4604      	mov	r4, r0
 800b328:	b1b3      	cbz	r3, 800b358 <rcl_publish+0x38>
 800b32a:	4616      	mov	r6, r2
 800b32c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b330:	b192      	cbz	r2, 800b358 <rcl_publish+0x38>
 800b332:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b336:	460d      	mov	r5, r1
 800b338:	f7ff fba0 	bl	800aa7c <rcl_context_is_valid>
 800b33c:	b160      	cbz	r0, 800b358 <rcl_publish+0x38>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b344:	b140      	cbz	r0, 800b358 <rcl_publish+0x38>
 800b346:	b155      	cbz	r5, 800b35e <rcl_publish+0x3e>
 800b348:	4632      	mov	r2, r6
 800b34a:	4629      	mov	r1, r5
 800b34c:	f002 fc40 	bl	800dbd0 <rmw_publish>
 800b350:	3800      	subs	r0, #0
 800b352:	bf18      	it	ne
 800b354:	2001      	movne	r0, #1
 800b356:	bd70      	pop	{r4, r5, r6, pc}
 800b358:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b35c:	bd70      	pop	{r4, r5, r6, pc}
 800b35e:	200b      	movs	r0, #11
 800b360:	bd70      	pop	{r4, r5, r6, pc}
 800b362:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b366:	4770      	bx	lr

0800b368 <rcl_publisher_get_rmw_handle>:
 800b368:	b118      	cbz	r0, 800b372 <rcl_publisher_get_rmw_handle+0xa>
 800b36a:	6800      	ldr	r0, [r0, #0]
 800b36c:	b108      	cbz	r0, 800b372 <rcl_publisher_get_rmw_handle+0xa>
 800b36e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800b372:	4770      	bx	lr

0800b374 <rcl_publisher_is_valid>:
 800b374:	b1a0      	cbz	r0, 800b3a0 <rcl_publisher_is_valid+0x2c>
 800b376:	6803      	ldr	r3, [r0, #0]
 800b378:	b510      	push	{r4, lr}
 800b37a:	4604      	mov	r4, r0
 800b37c:	b173      	cbz	r3, 800b39c <rcl_publisher_is_valid+0x28>
 800b37e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b382:	b15a      	cbz	r2, 800b39c <rcl_publisher_is_valid+0x28>
 800b384:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b388:	f7ff fb78 	bl	800aa7c <rcl_context_is_valid>
 800b38c:	b130      	cbz	r0, 800b39c <rcl_publisher_is_valid+0x28>
 800b38e:	6823      	ldr	r3, [r4, #0]
 800b390:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b394:	3800      	subs	r0, #0
 800b396:	bf18      	it	ne
 800b398:	2001      	movne	r0, #1
 800b39a:	bd10      	pop	{r4, pc}
 800b39c:	2000      	movs	r0, #0
 800b39e:	bd10      	pop	{r4, pc}
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	4770      	bx	lr

0800b3a4 <rcl_publisher_is_valid_except_context>:
 800b3a4:	b130      	cbz	r0, 800b3b4 <rcl_publisher_is_valid_except_context+0x10>
 800b3a6:	6800      	ldr	r0, [r0, #0]
 800b3a8:	b120      	cbz	r0, 800b3b4 <rcl_publisher_is_valid_except_context+0x10>
 800b3aa:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800b3ae:	3800      	subs	r0, #0
 800b3b0:	bf18      	it	ne
 800b3b2:	2001      	movne	r0, #1
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop

0800b3b8 <rcl_get_zero_initialized_subscription>:
 800b3b8:	4b01      	ldr	r3, [pc, #4]	@ (800b3c0 <rcl_get_zero_initialized_subscription+0x8>)
 800b3ba:	6818      	ldr	r0, [r3, #0]
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	08019a18 	.word	0x08019a18

0800b3c4 <rcl_subscription_init>:
 800b3c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3c8:	b089      	sub	sp, #36	@ 0x24
 800b3ca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b3cc:	b1d6      	cbz	r6, 800b404 <rcl_subscription_init+0x40>
 800b3ce:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	4648      	mov	r0, r9
 800b3d6:	460d      	mov	r5, r1
 800b3d8:	4690      	mov	r8, r2
 800b3da:	461f      	mov	r7, r3
 800b3dc:	f001 fbe4 	bl	800cba8 <rcutils_allocator_is_valid>
 800b3e0:	b180      	cbz	r0, 800b404 <rcl_subscription_init+0x40>
 800b3e2:	b17c      	cbz	r4, 800b404 <rcl_subscription_init+0x40>
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f7ff fe51 	bl	800b08c <rcl_node_is_valid>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d054      	beq.n	800b498 <rcl_subscription_init+0xd4>
 800b3ee:	f1b8 0f00 	cmp.w	r8, #0
 800b3f2:	d007      	beq.n	800b404 <rcl_subscription_init+0x40>
 800b3f4:	b137      	cbz	r7, 800b404 <rcl_subscription_init+0x40>
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	b14b      	cbz	r3, 800b40e <rcl_subscription_init+0x4a>
 800b3fa:	2764      	movs	r7, #100	@ 0x64
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	b009      	add	sp, #36	@ 0x24
 800b400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b404:	270b      	movs	r7, #11
 800b406:	4638      	mov	r0, r7
 800b408:	b009      	add	sp, #36	@ 0x24
 800b40a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b40e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800b412:	aa07      	add	r2, sp, #28
 800b414:	9205      	str	r2, [sp, #20]
 800b416:	9307      	str	r3, [sp, #28]
 800b418:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800b41c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b420:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b424:	4639      	mov	r1, r7
 800b426:	e899 000c 	ldmia.w	r9, {r2, r3}
 800b42a:	4628      	mov	r0, r5
 800b42c:	f008 fcc6 	bl	8013dbc <rcl_node_resolve_name>
 800b430:	4607      	mov	r7, r0
 800b432:	2800      	cmp	r0, #0
 800b434:	d15f      	bne.n	800b4f6 <rcl_subscription_init+0x132>
 800b436:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800b43a:	21c8      	movs	r1, #200	@ 0xc8
 800b43c:	2001      	movs	r0, #1
 800b43e:	4798      	blx	r3
 800b440:	6020      	str	r0, [r4, #0]
 800b442:	2800      	cmp	r0, #0
 800b444:	d05d      	beq.n	800b502 <rcl_subscription_init+0x13e>
 800b446:	4628      	mov	r0, r5
 800b448:	f7ff fe42 	bl	800b0d0 <rcl_node_get_rmw_handle>
 800b44c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	9a07      	ldr	r2, [sp, #28]
 800b454:	6827      	ldr	r7, [r4, #0]
 800b456:	4641      	mov	r1, r8
 800b458:	4633      	mov	r3, r6
 800b45a:	f002 fd9d 	bl	800df98 <rmw_create_subscription>
 800b45e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800b462:	6827      	ldr	r7, [r4, #0]
 800b464:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800b468:	b348      	cbz	r0, 800b4be <rcl_subscription_init+0xfa>
 800b46a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800b46e:	f002 fe75 	bl	800e15c <rmw_subscription_get_actual_qos>
 800b472:	4607      	mov	r7, r0
 800b474:	b9a8      	cbnz	r0, 800b4a2 <rcl_subscription_init+0xde>
 800b476:	6820      	ldr	r0, [r4, #0]
 800b478:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800b47c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800b480:	2270      	movs	r2, #112	@ 0x70
 800b482:	4631      	mov	r1, r6
 800b484:	f00d f899 	bl	80185ba <memcpy>
 800b488:	9807      	ldr	r0, [sp, #28]
 800b48a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800b48c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800b48e:	4798      	blx	r3
 800b490:	4638      	mov	r0, r7
 800b492:	b009      	add	sp, #36	@ 0x24
 800b494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b498:	27c8      	movs	r7, #200	@ 0xc8
 800b49a:	4638      	mov	r0, r7
 800b49c:	b009      	add	sp, #36	@ 0x24
 800b49e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4a2:	6827      	ldr	r7, [r4, #0]
 800b4a4:	b32f      	cbz	r7, 800b4f2 <rcl_subscription_init+0x12e>
 800b4a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b4aa:	b14b      	cbz	r3, 800b4c0 <rcl_subscription_init+0xfc>
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	f7ff fe0f 	bl	800b0d0 <rcl_node_get_rmw_handle>
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800b4b8:	f002 fe60 	bl	800e17c <rmw_destroy_subscription>
 800b4bc:	6827      	ldr	r7, [r4, #0]
 800b4be:	b197      	cbz	r7, 800b4e6 <rcl_subscription_init+0x122>
 800b4c0:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	f001 fb6f 	bl	800cba8 <rcutils_allocator_is_valid>
 800b4ca:	b158      	cbz	r0, 800b4e4 <rcl_subscription_init+0x120>
 800b4cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b4ce:	b148      	cbz	r0, 800b4e4 <rcl_subscription_init+0x120>
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	f001 fe25 	bl	800d120 <rmw_subscription_content_filter_options_fini>
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	b9b8      	cbnz	r0, 800b50a <rcl_subscription_init+0x146>
 800b4da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4dc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b4de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b4e0:	4798      	blx	r3
 800b4e2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800b4e4:	6827      	ldr	r7, [r4, #0]
 800b4e6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800b4e8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	4798      	blx	r3
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	6023      	str	r3, [r4, #0]
 800b4f2:	2701      	movs	r7, #1
 800b4f4:	e7c8      	b.n	800b488 <rcl_subscription_init+0xc4>
 800b4f6:	2867      	cmp	r0, #103	@ 0x67
 800b4f8:	d0c6      	beq.n	800b488 <rcl_subscription_init+0xc4>
 800b4fa:	2869      	cmp	r0, #105	@ 0x69
 800b4fc:	d003      	beq.n	800b506 <rcl_subscription_init+0x142>
 800b4fe:	280a      	cmp	r0, #10
 800b500:	d1f7      	bne.n	800b4f2 <rcl_subscription_init+0x12e>
 800b502:	270a      	movs	r7, #10
 800b504:	e7c0      	b.n	800b488 <rcl_subscription_init+0xc4>
 800b506:	2767      	movs	r7, #103	@ 0x67
 800b508:	e7be      	b.n	800b488 <rcl_subscription_init+0xc4>
 800b50a:	f008 fa07 	bl	801391c <rcl_convert_rmw_ret_to_rcl_ret>
 800b50e:	6827      	ldr	r7, [r4, #0]
 800b510:	e7e9      	b.n	800b4e6 <rcl_subscription_init+0x122>
 800b512:	bf00      	nop

0800b514 <rcl_subscription_fini>:
 800b514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b518:	2800      	cmp	r0, #0
 800b51a:	d039      	beq.n	800b590 <rcl_subscription_fini+0x7c>
 800b51c:	4604      	mov	r4, r0
 800b51e:	4608      	mov	r0, r1
 800b520:	460d      	mov	r5, r1
 800b522:	f7ff fdab 	bl	800b07c <rcl_node_is_valid_except_context>
 800b526:	2800      	cmp	r0, #0
 800b528:	d037      	beq.n	800b59a <rcl_subscription_fini+0x86>
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	b363      	cbz	r3, 800b588 <rcl_subscription_fini+0x74>
 800b52e:	4628      	mov	r0, r5
 800b530:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800b532:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800b536:	f7ff fdcb 	bl	800b0d0 <rcl_node_get_rmw_handle>
 800b53a:	b390      	cbz	r0, 800b5a2 <rcl_subscription_fini+0x8e>
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800b542:	f002 fe1b 	bl	800e17c <rmw_destroy_subscription>
 800b546:	6826      	ldr	r6, [r4, #0]
 800b548:	1e05      	subs	r5, r0, #0
 800b54a:	bf18      	it	ne
 800b54c:	2501      	movne	r5, #1
 800b54e:	b37e      	cbz	r6, 800b5b0 <rcl_subscription_fini+0x9c>
 800b550:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800b554:	4648      	mov	r0, r9
 800b556:	f001 fb27 	bl	800cba8 <rcutils_allocator_is_valid>
 800b55a:	b358      	cbz	r0, 800b5b4 <rcl_subscription_fini+0xa0>
 800b55c:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800b55e:	b150      	cbz	r0, 800b576 <rcl_subscription_fini+0x62>
 800b560:	4649      	mov	r1, r9
 800b562:	f001 fddd 	bl	800d120 <rmw_subscription_content_filter_options_fini>
 800b566:	4681      	mov	r9, r0
 800b568:	b9e8      	cbnz	r0, 800b5a6 <rcl_subscription_fini+0x92>
 800b56a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800b56c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800b56e:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800b570:	4798      	blx	r3
 800b572:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800b576:	6826      	ldr	r6, [r4, #0]
 800b578:	4630      	mov	r0, r6
 800b57a:	4641      	mov	r1, r8
 800b57c:	47b8      	blx	r7
 800b57e:	2300      	movs	r3, #0
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	4628      	mov	r0, r5
 800b584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b588:	461d      	mov	r5, r3
 800b58a:	4628      	mov	r0, r5
 800b58c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b590:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800b594:	4628      	mov	r0, r5
 800b596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b59a:	25c8      	movs	r5, #200	@ 0xc8
 800b59c:	4628      	mov	r0, r5
 800b59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5a2:	250b      	movs	r5, #11
 800b5a4:	e7f1      	b.n	800b58a <rcl_subscription_fini+0x76>
 800b5a6:	f008 f9b9 	bl	801391c <rcl_convert_rmw_ret_to_rcl_ret>
 800b5aa:	6826      	ldr	r6, [r4, #0]
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d0e3      	beq.n	800b578 <rcl_subscription_fini+0x64>
 800b5b0:	2501      	movs	r5, #1
 800b5b2:	e7e1      	b.n	800b578 <rcl_subscription_fini+0x64>
 800b5b4:	6826      	ldr	r6, [r4, #0]
 800b5b6:	2501      	movs	r5, #1
 800b5b8:	e7de      	b.n	800b578 <rcl_subscription_fini+0x64>
 800b5ba:	bf00      	nop

0800b5bc <rcl_subscription_get_default_options>:
 800b5bc:	b570      	push	{r4, r5, r6, lr}
 800b5be:	4d14      	ldr	r5, [pc, #80]	@ (800b610 <rcl_subscription_get_default_options+0x54>)
 800b5c0:	4914      	ldr	r1, [pc, #80]	@ (800b614 <rcl_subscription_get_default_options+0x58>)
 800b5c2:	b08a      	sub	sp, #40	@ 0x28
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	2250      	movs	r2, #80	@ 0x50
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	f00c fff6 	bl	80185ba <memcpy>
 800b5ce:	a804      	add	r0, sp, #16
 800b5d0:	f001 fadc 	bl	800cb8c <rcutils_get_default_allocator>
 800b5d4:	f10d 0c10 	add.w	ip, sp, #16
 800b5d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b5dc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800b5e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b5e4:	466e      	mov	r6, sp
 800b5e6:	f8dc 3000 	ldr.w	r3, [ip]
 800b5ea:	f8ce 3000 	str.w	r3, [lr]
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f001 fdb0 	bl	800d154 <rmw_get_default_subscription_options>
 800b5f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b5f8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b5fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b600:	2270      	movs	r2, #112	@ 0x70
 800b602:	4629      	mov	r1, r5
 800b604:	4620      	mov	r0, r4
 800b606:	f00c ffd8 	bl	80185ba <memcpy>
 800b60a:	4620      	mov	r0, r4
 800b60c:	b00a      	add	sp, #40	@ 0x28
 800b60e:	bd70      	pop	{r4, r5, r6, pc}
 800b610:	2000c438 	.word	0x2000c438
 800b614:	08019a20 	.word	0x08019a20

0800b618 <rcl_take>:
 800b618:	2800      	cmp	r0, #0
 800b61a:	d04a      	beq.n	800b6b2 <rcl_take+0x9a>
 800b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	4604      	mov	r4, r0
 800b622:	6800      	ldr	r0, [r0, #0]
 800b624:	b0a4      	sub	sp, #144	@ 0x90
 800b626:	2800      	cmp	r0, #0
 800b628:	d03b      	beq.n	800b6a2 <rcl_take+0x8a>
 800b62a:	461f      	mov	r7, r3
 800b62c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d036      	beq.n	800b6a2 <rcl_take+0x8a>
 800b634:	460e      	mov	r6, r1
 800b636:	2900      	cmp	r1, #0
 800b638:	d039      	beq.n	800b6ae <rcl_take+0x96>
 800b63a:	4615      	mov	r5, r2
 800b63c:	2a00      	cmp	r2, #0
 800b63e:	d03c      	beq.n	800b6ba <rcl_take+0xa2>
 800b640:	a802      	add	r0, sp, #8
 800b642:	f001 fd8d 	bl	800d160 <rmw_get_zero_initialized_message_info>
 800b646:	f10d 0c08 	add.w	ip, sp, #8
 800b64a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b64e:	46ae      	mov	lr, r5
 800b650:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b654:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b658:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b65c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b660:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b664:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800b668:	f04f 0800 	mov.w	r8, #0
 800b66c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800b670:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800b674:	6822      	ldr	r2, [r4, #0]
 800b676:	462b      	mov	r3, r5
 800b678:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800b67c:	9700      	str	r7, [sp, #0]
 800b67e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800b682:	4631      	mov	r1, r6
 800b684:	f002 fdda 	bl	800e23c <rmw_take_with_info>
 800b688:	4603      	mov	r3, r0
 800b68a:	b9c0      	cbnz	r0, 800b6be <rcl_take+0xa6>
 800b68c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800b690:	f240 1291 	movw	r2, #401	@ 0x191
 800b694:	2900      	cmp	r1, #0
 800b696:	bf08      	it	eq
 800b698:	4613      	moveq	r3, r2
 800b69a:	4618      	mov	r0, r3
 800b69c:	b024      	add	sp, #144	@ 0x90
 800b69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	b024      	add	sp, #144	@ 0x90
 800b6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ae:	230b      	movs	r3, #11
 800b6b0:	e7f3      	b.n	800b69a <rcl_take+0x82>
 800b6b2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	4770      	bx	lr
 800b6ba:	ad14      	add	r5, sp, #80	@ 0x50
 800b6bc:	e7c0      	b.n	800b640 <rcl_take+0x28>
 800b6be:	f008 f92d 	bl	801391c <rcl_convert_rmw_ret_to_rcl_ret>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	e7e9      	b.n	800b69a <rcl_take+0x82>
 800b6c6:	bf00      	nop

0800b6c8 <rcl_subscription_get_rmw_handle>:
 800b6c8:	b118      	cbz	r0, 800b6d2 <rcl_subscription_get_rmw_handle+0xa>
 800b6ca:	6800      	ldr	r0, [r0, #0]
 800b6cc:	b108      	cbz	r0, 800b6d2 <rcl_subscription_get_rmw_handle+0xa>
 800b6ce:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800b6d2:	4770      	bx	lr

0800b6d4 <rcl_subscription_is_valid>:
 800b6d4:	b130      	cbz	r0, 800b6e4 <rcl_subscription_is_valid+0x10>
 800b6d6:	6800      	ldr	r0, [r0, #0]
 800b6d8:	b120      	cbz	r0, 800b6e4 <rcl_subscription_is_valid+0x10>
 800b6da:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800b6de:	3800      	subs	r0, #0
 800b6e0:	bf18      	it	ne
 800b6e2:	2001      	movne	r0, #1
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop

0800b6e8 <_rcl_timer_time_jump>:
 800b6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ec:	4605      	mov	r5, r0
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	4614      	mov	r4, r2
 800b6f2:	b131      	cbz	r1, 800b702 <_rcl_timer_time_jump+0x1a>
 800b6f4:	7803      	ldrb	r3, [r0, #0]
 800b6f6:	3b02      	subs	r3, #2
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d93f      	bls.n	800b77c <_rcl_timer_time_jump+0x94>
 800b6fc:	b004      	add	sp, #16
 800b6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b702:	6813      	ldr	r3, [r2, #0]
 800b704:	a902      	add	r1, sp, #8
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	f008 fd2a 	bl	8014160 <rcl_clock_get_now>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d1f5      	bne.n	800b6fc <_rcl_timer_time_jump+0x14>
 800b710:	6820      	ldr	r0, [r4, #0]
 800b712:	2105      	movs	r1, #5
 800b714:	3020      	adds	r0, #32
 800b716:	f001 fa55 	bl	800cbc4 <__atomic_load_8>
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	4681      	mov	r9, r0
 800b71e:	4688      	mov	r8, r1
 800b720:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800b724:	2105      	movs	r1, #5
 800b726:	f001 fa4d 	bl	800cbc4 <__atomic_load_8>
 800b72a:	4607      	mov	r7, r0
 800b72c:	6820      	ldr	r0, [r4, #0]
 800b72e:	460e      	mov	r6, r1
 800b730:	3018      	adds	r0, #24
 800b732:	2105      	movs	r1, #5
 800b734:	f001 fa46 	bl	800cbc4 <__atomic_load_8>
 800b738:	782b      	ldrb	r3, [r5, #0]
 800b73a:	9a02      	ldr	r2, [sp, #8]
 800b73c:	3b02      	subs	r3, #2
 800b73e:	2b01      	cmp	r3, #1
 800b740:	460d      	mov	r5, r1
 800b742:	9b03      	ldr	r3, [sp, #12]
 800b744:	4682      	mov	sl, r0
 800b746:	d937      	bls.n	800b7b8 <_rcl_timer_time_jump+0xd0>
 800b748:	42ba      	cmp	r2, r7
 800b74a:	eb73 0106 	sbcs.w	r1, r3, r6
 800b74e:	da5f      	bge.n	800b810 <_rcl_timer_time_jump+0x128>
 800b750:	454a      	cmp	r2, r9
 800b752:	eb73 0108 	sbcs.w	r1, r3, r8
 800b756:	dad1      	bge.n	800b6fc <_rcl_timer_time_jump+0x14>
 800b758:	6820      	ldr	r0, [r4, #0]
 800b75a:	eb1a 0202 	adds.w	r2, sl, r2
 800b75e:	eb43 0305 	adc.w	r3, r3, r5
 800b762:	2505      	movs	r5, #5
 800b764:	3028      	adds	r0, #40	@ 0x28
 800b766:	9500      	str	r5, [sp, #0]
 800b768:	f001 fa62 	bl	800cc30 <__atomic_store_8>
 800b76c:	6820      	ldr	r0, [r4, #0]
 800b76e:	9500      	str	r5, [sp, #0]
 800b770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b774:	3020      	adds	r0, #32
 800b776:	f001 fa5b 	bl	800cc30 <__atomic_store_8>
 800b77a:	e7bf      	b.n	800b6fc <_rcl_timer_time_jump+0x14>
 800b77c:	6813      	ldr	r3, [r2, #0]
 800b77e:	a902      	add	r1, sp, #8
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	f008 fced 	bl	8014160 <rcl_clock_get_now>
 800b786:	2800      	cmp	r0, #0
 800b788:	d1b8      	bne.n	800b6fc <_rcl_timer_time_jump+0x14>
 800b78a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b78e:	4313      	orrs	r3, r2
 800b790:	d0b4      	beq.n	800b6fc <_rcl_timer_time_jump+0x14>
 800b792:	6820      	ldr	r0, [r4, #0]
 800b794:	2105      	movs	r1, #5
 800b796:	3028      	adds	r0, #40	@ 0x28
 800b798:	f001 fa14 	bl	800cbc4 <__atomic_load_8>
 800b79c:	9d02      	ldr	r5, [sp, #8]
 800b79e:	9b03      	ldr	r3, [sp, #12]
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	6820      	ldr	r0, [r4, #0]
 800b7a4:	1b52      	subs	r2, r2, r5
 800b7a6:	f04f 0405 	mov.w	r4, #5
 800b7aa:	9400      	str	r4, [sp, #0]
 800b7ac:	eb61 0303 	sbc.w	r3, r1, r3
 800b7b0:	3030      	adds	r0, #48	@ 0x30
 800b7b2:	f001 fa3d 	bl	800cc30 <__atomic_store_8>
 800b7b6:	e7a1      	b.n	800b6fc <_rcl_timer_time_jump+0x14>
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	d09f      	beq.n	800b6fc <_rcl_timer_time_jump+0x14>
 800b7bc:	6820      	ldr	r0, [r4, #0]
 800b7be:	f04f 0805 	mov.w	r8, #5
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	f8cd 8000 	str.w	r8, [sp]
 800b7c8:	3030      	adds	r0, #48	@ 0x30
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f001 fa66 	bl	800cc9c <__atomic_exchange_8>
 800b7d0:	ea51 0300 	orrs.w	r3, r1, r0
 800b7d4:	4606      	mov	r6, r0
 800b7d6:	460f      	mov	r7, r1
 800b7d8:	d090      	beq.n	800b6fc <_rcl_timer_time_jump+0x14>
 800b7da:	9a02      	ldr	r2, [sp, #8]
 800b7dc:	9b03      	ldr	r3, [sp, #12]
 800b7de:	f8cd 8000 	str.w	r8, [sp]
 800b7e2:	1a12      	subs	r2, r2, r0
 800b7e4:	6820      	ldr	r0, [r4, #0]
 800b7e6:	eb63 0301 	sbc.w	r3, r3, r1
 800b7ea:	eb12 020a 	adds.w	r2, r2, sl
 800b7ee:	eb43 0305 	adc.w	r3, r3, r5
 800b7f2:	3028      	adds	r0, #40	@ 0x28
 800b7f4:	f001 fa1c 	bl	800cc30 <__atomic_store_8>
 800b7f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7fc:	f8cd 8000 	str.w	r8, [sp]
 800b800:	6820      	ldr	r0, [r4, #0]
 800b802:	1b92      	subs	r2, r2, r6
 800b804:	eb63 0307 	sbc.w	r3, r3, r7
 800b808:	3020      	adds	r0, #32
 800b80a:	f001 fa11 	bl	800cc30 <__atomic_store_8>
 800b80e:	e775      	b.n	800b6fc <_rcl_timer_time_jump+0x14>
 800b810:	6820      	ldr	r0, [r4, #0]
 800b812:	3008      	adds	r0, #8
 800b814:	f008 f98e 	bl	8013b34 <rcl_trigger_guard_condition>
 800b818:	e770      	b.n	800b6fc <_rcl_timer_time_jump+0x14>
 800b81a:	bf00      	nop

0800b81c <rcl_get_zero_initialized_timer>:
 800b81c:	4b01      	ldr	r3, [pc, #4]	@ (800b824 <rcl_get_zero_initialized_timer+0x8>)
 800b81e:	6818      	ldr	r0, [r3, #0]
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	08019a70 	.word	0x08019a70

0800b828 <rcl_timer_init>:
 800b828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b82c:	b0aa      	sub	sp, #168	@ 0xa8
 800b82e:	4604      	mov	r4, r0
 800b830:	a835      	add	r0, sp, #212	@ 0xd4
 800b832:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 800b836:	460d      	mov	r5, r1
 800b838:	4692      	mov	sl, r2
 800b83a:	f001 f9b5 	bl	800cba8 <rcutils_allocator_is_valid>
 800b83e:	2800      	cmp	r0, #0
 800b840:	d064      	beq.n	800b90c <rcl_timer_init+0xe4>
 800b842:	2c00      	cmp	r4, #0
 800b844:	d062      	beq.n	800b90c <rcl_timer_init+0xe4>
 800b846:	2d00      	cmp	r5, #0
 800b848:	d060      	beq.n	800b90c <rcl_timer_init+0xe4>
 800b84a:	2f00      	cmp	r7, #0
 800b84c:	db5e      	blt.n	800b90c <rcl_timer_init+0xe4>
 800b84e:	6823      	ldr	r3, [r4, #0]
 800b850:	b123      	cbz	r3, 800b85c <rcl_timer_init+0x34>
 800b852:	2664      	movs	r6, #100	@ 0x64
 800b854:	4630      	mov	r0, r6
 800b856:	b02a      	add	sp, #168	@ 0xa8
 800b858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85c:	a908      	add	r1, sp, #32
 800b85e:	4628      	mov	r0, r5
 800b860:	f008 fc7e 	bl	8014160 <rcl_clock_get_now>
 800b864:	4606      	mov	r6, r0
 800b866:	2800      	cmp	r0, #0
 800b868:	d1f4      	bne.n	800b854 <rcl_timer_init+0x2c>
 800b86a:	ae06      	add	r6, sp, #24
 800b86c:	4630      	mov	r0, r6
 800b86e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 800b872:	f008 f867 	bl	8013944 <rcl_get_zero_initialized_guard_condition>
 800b876:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b87a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 800b87e:	ae0b      	add	r6, sp, #44	@ 0x2c
 800b880:	e889 0003 	stmia.w	r9, {r0, r1}
 800b884:	4630      	mov	r0, r6
 800b886:	f008 f939 	bl	8013afc <rcl_guard_condition_get_default_options>
 800b88a:	ab0d      	add	r3, sp, #52	@ 0x34
 800b88c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b890:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b894:	4651      	mov	r1, sl
 800b896:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b89a:	4648      	mov	r0, r9
 800b89c:	f008 f85c 	bl	8013958 <rcl_guard_condition_init>
 800b8a0:	4606      	mov	r6, r0
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d1d6      	bne.n	800b854 <rcl_timer_init+0x2c>
 800b8a6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d033      	beq.n	800b916 <rcl_timer_init+0xee>
 800b8ae:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800b8b0:	911a      	str	r1, [sp, #104]	@ 0x68
 800b8b2:	4642      	mov	r2, r8
 800b8b4:	463b      	mov	r3, r7
 800b8b6:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800b8ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b8be:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800b970 <rcl_timer_init+0x148>
 800b8c2:	eb12 0008 	adds.w	r0, r2, r8
 800b8c6:	eb47 0103 	adc.w	r1, r7, r3
 800b8ca:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 800b8ce:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800b8d2:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800b8d6:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800b8da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b8de:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 800b8e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8e6:	f8de 3000 	ldr.w	r3, [lr]
 800b8ea:	f8cc 3000 	str.w	r3, [ip]
 800b8ee:	f04f 0a00 	mov.w	sl, #0
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 800b8f8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800b8fa:	2050      	movs	r0, #80	@ 0x50
 800b8fc:	4798      	blx	r3
 800b8fe:	6020      	str	r0, [r4, #0]
 800b900:	b358      	cbz	r0, 800b95a <rcl_timer_init+0x132>
 800b902:	2250      	movs	r2, #80	@ 0x50
 800b904:	a916      	add	r1, sp, #88	@ 0x58
 800b906:	f00c fe58 	bl	80185ba <memcpy>
 800b90a:	e7a3      	b.n	800b854 <rcl_timer_init+0x2c>
 800b90c:	260b      	movs	r6, #11
 800b90e:	4630      	mov	r0, r6
 800b910:	b02a      	add	sp, #168	@ 0xa8
 800b912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b916:	2001      	movs	r0, #1
 800b918:	2100      	movs	r1, #0
 800b91a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800b91e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b922:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b926:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800b92a:	4a13      	ldr	r2, [pc, #76]	@ (800b978 <rcl_timer_init+0x150>)
 800b92c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800b930:	9405      	str	r4, [sp, #20]
 800b932:	9204      	str	r2, [sp, #16]
 800b934:	ab12      	add	r3, sp, #72	@ 0x48
 800b936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b938:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b93c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800b940:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800b944:	4628      	mov	r0, r5
 800b946:	f008 fc17 	bl	8014178 <rcl_clock_add_jump_callback>
 800b94a:	4682      	mov	sl, r0
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d0ae      	beq.n	800b8ae <rcl_timer_init+0x86>
 800b950:	4648      	mov	r0, r9
 800b952:	f008 f8ad 	bl	8013ab0 <rcl_guard_condition_fini>
 800b956:	4656      	mov	r6, sl
 800b958:	e77c      	b.n	800b854 <rcl_timer_init+0x2c>
 800b95a:	4648      	mov	r0, r9
 800b95c:	f008 f8a8 	bl	8013ab0 <rcl_guard_condition_fini>
 800b960:	4905      	ldr	r1, [pc, #20]	@ (800b978 <rcl_timer_init+0x150>)
 800b962:	4622      	mov	r2, r4
 800b964:	4628      	mov	r0, r5
 800b966:	f008 fc69 	bl	801423c <rcl_clock_remove_jump_callback>
 800b96a:	260a      	movs	r6, #10
 800b96c:	e772      	b.n	800b854 <rcl_timer_init+0x2c>
 800b96e:	bf00      	nop
	...
 800b978:	0800b6e9 	.word	0x0800b6e9

0800b97c <rcl_timer_fini>:
 800b97c:	b310      	cbz	r0, 800b9c4 <rcl_timer_fini+0x48>
 800b97e:	6803      	ldr	r3, [r0, #0]
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	4604      	mov	r4, r0
 800b984:	b1b3      	cbz	r3, 800b9b4 <rcl_timer_fini+0x38>
 800b986:	f3bf 8f5b 	dmb	ish
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800b990:	f3bf 8f5b 	dmb	ish
 800b994:	6803      	ldr	r3, [r0, #0]
 800b996:	6818      	ldr	r0, [r3, #0]
 800b998:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800b99a:	7802      	ldrb	r2, [r0, #0]
 800b99c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800b99e:	2a01      	cmp	r2, #1
 800b9a0:	d00a      	beq.n	800b9b8 <rcl_timer_fini+0x3c>
 800b9a2:	f103 0008 	add.w	r0, r3, #8
 800b9a6:	f008 f883 	bl	8013ab0 <rcl_guard_condition_fini>
 800b9aa:	6820      	ldr	r0, [r4, #0]
 800b9ac:	4631      	mov	r1, r6
 800b9ae:	47a8      	blx	r5
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	6023      	str	r3, [r4, #0]
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	bd70      	pop	{r4, r5, r6, pc}
 800b9b8:	4903      	ldr	r1, [pc, #12]	@ (800b9c8 <rcl_timer_fini+0x4c>)
 800b9ba:	4622      	mov	r2, r4
 800b9bc:	f008 fc3e 	bl	801423c <rcl_clock_remove_jump_callback>
 800b9c0:	6823      	ldr	r3, [r4, #0]
 800b9c2:	e7ee      	b.n	800b9a2 <rcl_timer_fini+0x26>
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	4770      	bx	lr
 800b9c8:	0800b6e9 	.word	0x0800b6e9

0800b9cc <rcl_timer_call>:
 800b9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d0:	b087      	sub	sp, #28
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d06d      	beq.n	800bab2 <rcl_timer_call+0xe6>
 800b9d6:	6803      	ldr	r3, [r0, #0]
 800b9d8:	4604      	mov	r4, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d063      	beq.n	800baa6 <rcl_timer_call+0xda>
 800b9de:	f3bf 8f5b 	dmb	ish
 800b9e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b9e6:	f3bf 8f5b 	dmb	ish
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d150      	bne.n	800ba90 <rcl_timer_call+0xc4>
 800b9ee:	6803      	ldr	r3, [r0, #0]
 800b9f0:	a904      	add	r1, sp, #16
 800b9f2:	6818      	ldr	r0, [r3, #0]
 800b9f4:	f008 fbb4 	bl	8014160 <rcl_clock_get_now>
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d14a      	bne.n	800ba94 <rcl_timer_call+0xc8>
 800b9fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	db4a      	blt.n	800ba9c <rcl_timer_call+0xd0>
 800ba06:	6820      	ldr	r0, [r4, #0]
 800ba08:	f04f 0a05 	mov.w	sl, #5
 800ba0c:	f8cd a000 	str.w	sl, [sp]
 800ba10:	3020      	adds	r0, #32
 800ba12:	f001 f943 	bl	800cc9c <__atomic_exchange_8>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	f3bf 8f5b 	dmb	ish
 800ba1c:	4680      	mov	r8, r0
 800ba1e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800ba22:	f3bf 8f5b 	dmb	ish
 800ba26:	6820      	ldr	r0, [r4, #0]
 800ba28:	4689      	mov	r9, r1
 800ba2a:	3028      	adds	r0, #40	@ 0x28
 800ba2c:	4651      	mov	r1, sl
 800ba2e:	f001 f8c9 	bl	800cbc4 <__atomic_load_8>
 800ba32:	4606      	mov	r6, r0
 800ba34:	6820      	ldr	r0, [r4, #0]
 800ba36:	460f      	mov	r7, r1
 800ba38:	3018      	adds	r0, #24
 800ba3a:	4651      	mov	r1, sl
 800ba3c:	f001 f8c2 	bl	800cbc4 <__atomic_load_8>
 800ba40:	1836      	adds	r6, r6, r0
 800ba42:	4602      	mov	r2, r0
 800ba44:	4682      	mov	sl, r0
 800ba46:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800ba4a:	eb47 0701 	adc.w	r7, r7, r1
 800ba4e:	4286      	cmp	r6, r0
 800ba50:	460b      	mov	r3, r1
 800ba52:	eb77 010c 	sbcs.w	r1, r7, ip
 800ba56:	da04      	bge.n	800ba62 <rcl_timer_call+0x96>
 800ba58:	ea53 0102 	orrs.w	r1, r3, r2
 800ba5c:	d12e      	bne.n	800babc <rcl_timer_call+0xf0>
 800ba5e:	4606      	mov	r6, r0
 800ba60:	4667      	mov	r7, ip
 800ba62:	6820      	ldr	r0, [r4, #0]
 800ba64:	2105      	movs	r1, #5
 800ba66:	4632      	mov	r2, r6
 800ba68:	463b      	mov	r3, r7
 800ba6a:	3028      	adds	r0, #40	@ 0x28
 800ba6c:	9100      	str	r1, [sp, #0]
 800ba6e:	f001 f8df 	bl	800cc30 <__atomic_store_8>
 800ba72:	f1bb 0f00 	cmp.w	fp, #0
 800ba76:	d00d      	beq.n	800ba94 <rcl_timer_call+0xc8>
 800ba78:	9a04      	ldr	r2, [sp, #16]
 800ba7a:	9b05      	ldr	r3, [sp, #20]
 800ba7c:	ebb2 0208 	subs.w	r2, r2, r8
 800ba80:	4620      	mov	r0, r4
 800ba82:	eb63 0309 	sbc.w	r3, r3, r9
 800ba86:	47d8      	blx	fp
 800ba88:	4628      	mov	r0, r5
 800ba8a:	b007      	add	sp, #28
 800ba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba90:	f240 3521 	movw	r5, #801	@ 0x321
 800ba94:	4628      	mov	r0, r5
 800ba96:	b007      	add	sp, #28
 800ba98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9c:	2501      	movs	r5, #1
 800ba9e:	4628      	mov	r0, r5
 800baa0:	b007      	add	sp, #28
 800baa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800baaa:	4628      	mov	r0, r5
 800baac:	b007      	add	sp, #28
 800baae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab2:	250b      	movs	r5, #11
 800bab4:	4628      	mov	r0, r5
 800bab6:	b007      	add	sp, #28
 800bab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800babc:	1b80      	subs	r0, r0, r6
 800babe:	eb6c 0107 	sbc.w	r1, ip, r7
 800bac2:	3801      	subs	r0, #1
 800bac4:	f161 0100 	sbc.w	r1, r1, #0
 800bac8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800bacc:	f7f5 f826 	bl	8000b1c <__aeabi_ldivmod>
 800bad0:	9b02      	ldr	r3, [sp, #8]
 800bad2:	3001      	adds	r0, #1
 800bad4:	f141 0100 	adc.w	r1, r1, #0
 800bad8:	fb00 f303 	mul.w	r3, r0, r3
 800badc:	fb01 330a 	mla	r3, r1, sl, r3
 800bae0:	fba0 0a0a 	umull	r0, sl, r0, sl
 800bae4:	1986      	adds	r6, r0, r6
 800bae6:	4453      	add	r3, sl
 800bae8:	eb43 0707 	adc.w	r7, r3, r7
 800baec:	e7b9      	b.n	800ba62 <rcl_timer_call+0x96>
 800baee:	bf00      	nop

0800baf0 <rcl_timer_is_ready>:
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	b378      	cbz	r0, 800bb56 <rcl_timer_is_ready+0x66>
 800baf6:	6803      	ldr	r3, [r0, #0]
 800baf8:	4604      	mov	r4, r0
 800bafa:	b383      	cbz	r3, 800bb5e <rcl_timer_is_ready+0x6e>
 800bafc:	460d      	mov	r5, r1
 800bafe:	b351      	cbz	r1, 800bb56 <rcl_timer_is_ready+0x66>
 800bb00:	f3bf 8f5b 	dmb	ish
 800bb04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bb08:	f3bf 8f5b 	dmb	ish
 800bb0c:	b953      	cbnz	r3, 800bb24 <rcl_timer_is_ready+0x34>
 800bb0e:	6803      	ldr	r3, [r0, #0]
 800bb10:	4669      	mov	r1, sp
 800bb12:	6818      	ldr	r0, [r3, #0]
 800bb14:	f008 fb24 	bl	8014160 <rcl_clock_get_now>
 800bb18:	4606      	mov	r6, r0
 800bb1a:	b140      	cbz	r0, 800bb2e <rcl_timer_is_ready+0x3e>
 800bb1c:	f240 3321 	movw	r3, #801	@ 0x321
 800bb20:	4298      	cmp	r0, r3
 800bb22:	d101      	bne.n	800bb28 <rcl_timer_is_ready+0x38>
 800bb24:	2600      	movs	r6, #0
 800bb26:	702e      	strb	r6, [r5, #0]
 800bb28:	4630      	mov	r0, r6
 800bb2a:	b002      	add	sp, #8
 800bb2c:	bd70      	pop	{r4, r5, r6, pc}
 800bb2e:	6820      	ldr	r0, [r4, #0]
 800bb30:	2105      	movs	r1, #5
 800bb32:	3028      	adds	r0, #40	@ 0x28
 800bb34:	f001 f846 	bl	800cbc4 <__atomic_load_8>
 800bb38:	9b00      	ldr	r3, [sp, #0]
 800bb3a:	1ac0      	subs	r0, r0, r3
 800bb3c:	9b01      	ldr	r3, [sp, #4]
 800bb3e:	eb61 0103 	sbc.w	r1, r1, r3
 800bb42:	2801      	cmp	r0, #1
 800bb44:	f171 0300 	sbcs.w	r3, r1, #0
 800bb48:	bfb4      	ite	lt
 800bb4a:	2301      	movlt	r3, #1
 800bb4c:	2300      	movge	r3, #0
 800bb4e:	4630      	mov	r0, r6
 800bb50:	702b      	strb	r3, [r5, #0]
 800bb52:	b002      	add	sp, #8
 800bb54:	bd70      	pop	{r4, r5, r6, pc}
 800bb56:	260b      	movs	r6, #11
 800bb58:	4630      	mov	r0, r6
 800bb5a:	b002      	add	sp, #8
 800bb5c:	bd70      	pop	{r4, r5, r6, pc}
 800bb5e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800bb62:	e7e1      	b.n	800bb28 <rcl_timer_is_ready+0x38>

0800bb64 <rcl_timer_get_time_until_next_call>:
 800bb64:	b570      	push	{r4, r5, r6, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	b330      	cbz	r0, 800bbb8 <rcl_timer_get_time_until_next_call+0x54>
 800bb6a:	6803      	ldr	r3, [r0, #0]
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	b33b      	cbz	r3, 800bbc0 <rcl_timer_get_time_until_next_call+0x5c>
 800bb70:	460d      	mov	r5, r1
 800bb72:	b309      	cbz	r1, 800bbb8 <rcl_timer_get_time_until_next_call+0x54>
 800bb74:	f3bf 8f5b 	dmb	ish
 800bb78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bb7c:	f3bf 8f5b 	dmb	ish
 800bb80:	b9ab      	cbnz	r3, 800bbae <rcl_timer_get_time_until_next_call+0x4a>
 800bb82:	6803      	ldr	r3, [r0, #0]
 800bb84:	4669      	mov	r1, sp
 800bb86:	6818      	ldr	r0, [r3, #0]
 800bb88:	f008 faea 	bl	8014160 <rcl_clock_get_now>
 800bb8c:	4606      	mov	r6, r0
 800bb8e:	b958      	cbnz	r0, 800bba8 <rcl_timer_get_time_until_next_call+0x44>
 800bb90:	6820      	ldr	r0, [r4, #0]
 800bb92:	2105      	movs	r1, #5
 800bb94:	3028      	adds	r0, #40	@ 0x28
 800bb96:	f001 f815 	bl	800cbc4 <__atomic_load_8>
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	1ac0      	subs	r0, r0, r3
 800bb9e:	9b01      	ldr	r3, [sp, #4]
 800bba0:	6028      	str	r0, [r5, #0]
 800bba2:	eb61 0103 	sbc.w	r1, r1, r3
 800bba6:	6069      	str	r1, [r5, #4]
 800bba8:	4630      	mov	r0, r6
 800bbaa:	b002      	add	sp, #8
 800bbac:	bd70      	pop	{r4, r5, r6, pc}
 800bbae:	f240 3621 	movw	r6, #801	@ 0x321
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	b002      	add	sp, #8
 800bbb6:	bd70      	pop	{r4, r5, r6, pc}
 800bbb8:	260b      	movs	r6, #11
 800bbba:	4630      	mov	r0, r6
 800bbbc:	b002      	add	sp, #8
 800bbbe:	bd70      	pop	{r4, r5, r6, pc}
 800bbc0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800bbc4:	e7f0      	b.n	800bba8 <rcl_timer_get_time_until_next_call+0x44>
 800bbc6:	bf00      	nop

0800bbc8 <rcl_timer_get_guard_condition>:
 800bbc8:	b130      	cbz	r0, 800bbd8 <rcl_timer_get_guard_condition+0x10>
 800bbca:	6800      	ldr	r0, [r0, #0]
 800bbcc:	b120      	cbz	r0, 800bbd8 <rcl_timer_get_guard_condition+0x10>
 800bbce:	68c3      	ldr	r3, [r0, #12]
 800bbd0:	b10b      	cbz	r3, 800bbd6 <rcl_timer_get_guard_condition+0xe>
 800bbd2:	3008      	adds	r0, #8
 800bbd4:	4770      	bx	lr
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop

0800bbdc <_rclc_check_for_new_data>:
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d046      	beq.n	800bc6e <_rclc_check_for_new_data+0x92>
 800bbe0:	b510      	push	{r4, lr}
 800bbe2:	7802      	ldrb	r2, [r0, #0]
 800bbe4:	b084      	sub	sp, #16
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2a0a      	cmp	r2, #10
 800bbea:	d842      	bhi.n	800bc72 <_rclc_check_for_new_data+0x96>
 800bbec:	e8df f002 	tbb	[pc, r2]
 800bbf0:	14181212 	.word	0x14181212
 800bbf4:	06060614 	.word	0x06060614
 800bbf8:	2e1a      	.short	0x2e1a
 800bbfa:	16          	.byte	0x16
 800bbfb:	00          	.byte	0x00
 800bbfc:	6a0a      	ldr	r2, [r1, #32]
 800bbfe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bc00:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bc04:	2000      	movs	r0, #0
 800bc06:	1a12      	subs	r2, r2, r0
 800bc08:	bf18      	it	ne
 800bc0a:	2201      	movne	r2, #1
 800bc0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800bc10:	b004      	add	sp, #16
 800bc12:	bd10      	pop	{r4, pc}
 800bc14:	680a      	ldr	r2, [r1, #0]
 800bc16:	e7f2      	b.n	800bbfe <_rclc_check_for_new_data+0x22>
 800bc18:	698a      	ldr	r2, [r1, #24]
 800bc1a:	e7f0      	b.n	800bbfe <_rclc_check_for_new_data+0x22>
 800bc1c:	688a      	ldr	r2, [r1, #8]
 800bc1e:	e7ee      	b.n	800bbfe <_rclc_check_for_new_data+0x22>
 800bc20:	690a      	ldr	r2, [r1, #16]
 800bc22:	e7ec      	b.n	800bbfe <_rclc_check_for_new_data+0x22>
 800bc24:	685c      	ldr	r4, [r3, #4]
 800bc26:	4608      	mov	r0, r1
 800bc28:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800bc2c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800bc30:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800bc34:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800bc3e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800bc42:	f104 0110 	add.w	r1, r4, #16
 800bc46:	f009 fac7 	bl	80151d8 <rcl_action_client_wait_set_get_entities_ready>
 800bc4a:	e7e1      	b.n	800bc10 <_rclc_check_for_new_data+0x34>
 800bc4c:	685c      	ldr	r4, [r3, #4]
 800bc4e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800bc52:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800bc56:	e9cd 3200 	strd	r3, r2, [sp]
 800bc5a:	4608      	mov	r0, r1
 800bc5c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800bc60:	f104 0220 	add.w	r2, r4, #32
 800bc64:	f104 0110 	add.w	r1, r4, #16
 800bc68:	f009 fcce 	bl	8015608 <rcl_action_server_wait_set_get_entities_ready>
 800bc6c:	e7d0      	b.n	800bc10 <_rclc_check_for_new_data+0x34>
 800bc6e:	200b      	movs	r0, #11
 800bc70:	4770      	bx	lr
 800bc72:	2001      	movs	r0, #1
 800bc74:	e7cc      	b.n	800bc10 <_rclc_check_for_new_data+0x34>
 800bc76:	bf00      	nop

0800bc78 <_rclc_take_new_data>:
 800bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc7a:	b09b      	sub	sp, #108	@ 0x6c
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	f000 8088 	beq.w	800bd92 <_rclc_take_new_data+0x11a>
 800bc82:	7803      	ldrb	r3, [r0, #0]
 800bc84:	4604      	mov	r4, r0
 800bc86:	2b0a      	cmp	r3, #10
 800bc88:	f200 8167 	bhi.w	800bf5a <_rclc_take_new_data+0x2e2>
 800bc8c:	e8df f003 	tbb	[pc, r3]
 800bc90:	44152d2d 	.word	0x44152d2d
 800bc94:	19191944 	.word	0x19191944
 800bc98:	065a      	.short	0x065a
 800bc9a:	15          	.byte	0x15
 800bc9b:	00          	.byte	0x00
 800bc9c:	6840      	ldr	r0, [r0, #4]
 800bc9e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f040 80b2 	bne.w	800be0c <_rclc_take_new_data+0x194>
 800bca8:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f040 80e4 	bne.w	800be7a <_rclc_take_new_data+0x202>
 800bcb2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d16f      	bne.n	800bd9a <_rclc_take_new_data+0x122>
 800bcba:	2500      	movs	r5, #0
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	b01b      	add	sp, #108	@ 0x6c
 800bcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcc2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bcc4:	6a0b      	ldr	r3, [r1, #32]
 800bcc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d0f5      	beq.n	800bcba <_rclc_take_new_data+0x42>
 800bcce:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bcd2:	f104 0110 	add.w	r1, r4, #16
 800bcd6:	f008 f91f 	bl	8013f18 <rcl_take_request>
 800bcda:	4605      	mov	r5, r0
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d0ec      	beq.n	800bcba <_rclc_take_new_data+0x42>
 800bce0:	f240 2359 	movw	r3, #601	@ 0x259
 800bce4:	4298      	cmp	r0, r3
 800bce6:	d013      	beq.n	800bd10 <_rclc_take_new_data+0x98>
 800bce8:	e029      	b.n	800bd3e <_rclc_take_new_data+0xc6>
 800bcea:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bcec:	680b      	ldr	r3, [r1, #0]
 800bcee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d0e1      	beq.n	800bcba <_rclc_take_new_data+0x42>
 800bcf6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	aa0a      	add	r2, sp, #40	@ 0x28
 800bcfe:	f7ff fc8b 	bl	800b618 <rcl_take>
 800bd02:	4605      	mov	r5, r0
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d0d9      	beq.n	800bcbc <_rclc_take_new_data+0x44>
 800bd08:	f240 1391 	movw	r3, #401	@ 0x191
 800bd0c:	4298      	cmp	r0, r3
 800bd0e:	d116      	bne.n	800bd3e <_rclc_take_new_data+0xc6>
 800bd10:	2300      	movs	r3, #0
 800bd12:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800bd16:	e7d1      	b.n	800bcbc <_rclc_take_new_data+0x44>
 800bd18:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bd1a:	698b      	ldr	r3, [r1, #24]
 800bd1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d0ca      	beq.n	800bcba <_rclc_take_new_data+0x42>
 800bd24:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bd28:	f104 0110 	add.w	r1, r4, #16
 800bd2c:	f007 fda4 	bl	8013878 <rcl_take_response>
 800bd30:	4605      	mov	r5, r0
 800bd32:	2800      	cmp	r0, #0
 800bd34:	d0c1      	beq.n	800bcba <_rclc_take_new_data+0x42>
 800bd36:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800bd3a:	4298      	cmp	r0, r3
 800bd3c:	d0be      	beq.n	800bcbc <_rclc_take_new_data+0x44>
 800bd3e:	f001 f813 	bl	800cd68 <rcutils_reset_error>
 800bd42:	e7bb      	b.n	800bcbc <_rclc_take_new_data+0x44>
 800bd44:	6840      	ldr	r0, [r0, #4]
 800bd46:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d17d      	bne.n	800be4a <_rclc_take_new_data+0x1d2>
 800bd4e:	69c3      	ldr	r3, [r0, #28]
 800bd50:	b11b      	cbz	r3, 800bd5a <_rclc_take_new_data+0xe2>
 800bd52:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d144      	bne.n	800bde4 <_rclc_take_new_data+0x16c>
 800bd5a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f040 80ac 	bne.w	800bebc <_rclc_take_new_data+0x244>
 800bd64:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d0a6      	beq.n	800bcba <_rclc_take_new_data+0x42>
 800bd6c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800bd6e:	a90a      	add	r1, sp, #40	@ 0x28
 800bd70:	3010      	adds	r0, #16
 800bd72:	f009 f909 	bl	8014f88 <rcl_action_take_result_response>
 800bd76:	4605      	mov	r5, r0
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d1e0      	bne.n	800bd3e <_rclc_take_new_data+0xc6>
 800bd7c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd80:	6860      	ldr	r0, [r4, #4]
 800bd82:	f009 fd65 	bl	8015850 <rclc_action_find_handle_by_result_request_sequence_number>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d098      	beq.n	800bcbc <_rclc_take_new_data+0x44>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800bd90:	e794      	b.n	800bcbc <_rclc_take_new_data+0x44>
 800bd92:	250b      	movs	r5, #11
 800bd94:	4628      	mov	r0, r5
 800bd96:	b01b      	add	sp, #108	@ 0x6c
 800bd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd9a:	ae04      	add	r6, sp, #16
 800bd9c:	aa0a      	add	r2, sp, #40	@ 0x28
 800bd9e:	3010      	adds	r0, #16
 800bda0:	4631      	mov	r1, r6
 800bda2:	f009 fb65 	bl	8015470 <rcl_action_take_cancel_request>
 800bda6:	4605      	mov	r5, r0
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d1c8      	bne.n	800bd3e <_rclc_take_new_data+0xc6>
 800bdac:	6860      	ldr	r0, [r4, #4]
 800bdae:	a90a      	add	r1, sp, #40	@ 0x28
 800bdb0:	f009 fd0c 	bl	80157cc <rclc_action_find_goal_handle_by_uuid>
 800bdb4:	4607      	mov	r7, r0
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	f000 80bb 	beq.w	800bf32 <_rclc_take_new_data+0x2ba>
 800bdbc:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	f009 fc8d 	bl	80156e0 <rcl_action_transition_goal_state>
 800bdc6:	2803      	cmp	r0, #3
 800bdc8:	4684      	mov	ip, r0
 800bdca:	f040 80a7 	bne.w	800bf1c <_rclc_take_new_data+0x2a4>
 800bdce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bdd0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800bdd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdd6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bdda:	e884 0003 	stmia.w	r4, {r0, r1}
 800bdde:	f887 c008 	strb.w	ip, [r7, #8]
 800bde2:	e76b      	b.n	800bcbc <_rclc_take_new_data+0x44>
 800bde4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bde6:	3010      	adds	r0, #16
 800bde8:	f009 f94e 	bl	8015088 <rcl_action_take_feedback>
 800bdec:	4605      	mov	r5, r0
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d1a5      	bne.n	800bd3e <_rclc_take_new_data+0xc6>
 800bdf2:	6860      	ldr	r0, [r4, #4]
 800bdf4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bdf6:	f009 fce9 	bl	80157cc <rclc_action_find_goal_handle_by_uuid>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	f000 80a3 	beq.w	800bf48 <_rclc_take_new_data+0x2d0>
 800be02:	2201      	movs	r2, #1
 800be04:	6860      	ldr	r0, [r4, #4]
 800be06:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800be0a:	e7a6      	b.n	800bd5a <_rclc_take_new_data+0xe2>
 800be0c:	f009 fcb8 	bl	8015780 <rclc_action_take_goal_handle>
 800be10:	4606      	mov	r6, r0
 800be12:	6860      	ldr	r0, [r4, #4]
 800be14:	2e00      	cmp	r6, #0
 800be16:	f43f af47 	beq.w	800bca8 <_rclc_take_new_data+0x30>
 800be1a:	6070      	str	r0, [r6, #4]
 800be1c:	69f2      	ldr	r2, [r6, #28]
 800be1e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800be22:	3010      	adds	r0, #16
 800be24:	f009 fa6c 	bl	8015300 <rcl_action_take_goal_request>
 800be28:	4605      	mov	r5, r0
 800be2a:	2800      	cmp	r0, #0
 800be2c:	f040 808e 	bne.w	800bf4c <_rclc_take_new_data+0x2d4>
 800be30:	69f7      	ldr	r7, [r6, #28]
 800be32:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800be34:	7235      	strb	r5, [r6, #8]
 800be36:	f8c6 0009 	str.w	r0, [r6, #9]
 800be3a:	f8c6 100d 	str.w	r1, [r6, #13]
 800be3e:	6860      	ldr	r0, [r4, #4]
 800be40:	f8c6 2011 	str.w	r2, [r6, #17]
 800be44:	f8c6 3015 	str.w	r3, [r6, #21]
 800be48:	e72e      	b.n	800bca8 <_rclc_take_new_data+0x30>
 800be4a:	aa04      	add	r2, sp, #16
 800be4c:	a90a      	add	r1, sp, #40	@ 0x28
 800be4e:	3010      	adds	r0, #16
 800be50:	f009 f822 	bl	8014e98 <rcl_action_take_goal_response>
 800be54:	4605      	mov	r5, r0
 800be56:	2800      	cmp	r0, #0
 800be58:	f47f af71 	bne.w	800bd3e <_rclc_take_new_data+0xc6>
 800be5c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be60:	6860      	ldr	r0, [r4, #4]
 800be62:	f009 fce3 	bl	801582c <rclc_action_find_handle_by_goal_request_sequence_number>
 800be66:	b130      	cbz	r0, 800be76 <_rclc_take_new_data+0x1fe>
 800be68:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800be6c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800be70:	2201      	movs	r2, #1
 800be72:	f880 2020 	strb.w	r2, [r0, #32]
 800be76:	6860      	ldr	r0, [r4, #4]
 800be78:	e769      	b.n	800bd4e <_rclc_take_new_data+0xd6>
 800be7a:	aa04      	add	r2, sp, #16
 800be7c:	3010      	adds	r0, #16
 800be7e:	a90a      	add	r1, sp, #40	@ 0x28
 800be80:	f009 fab6 	bl	80153f0 <rcl_action_take_result_request>
 800be84:	4605      	mov	r5, r0
 800be86:	2800      	cmp	r0, #0
 800be88:	f47f af59 	bne.w	800bd3e <_rclc_take_new_data+0xc6>
 800be8c:	6860      	ldr	r0, [r4, #4]
 800be8e:	a904      	add	r1, sp, #16
 800be90:	f009 fc9c 	bl	80157cc <rclc_action_find_goal_handle_by_uuid>
 800be94:	4607      	mov	r7, r0
 800be96:	b160      	cbz	r0, 800beb2 <_rclc_take_new_data+0x23a>
 800be98:	ad0a      	add	r5, sp, #40	@ 0x28
 800be9a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800be9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bea0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bea2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bea6:	f04f 0c02 	mov.w	ip, #2
 800beaa:	e886 0003 	stmia.w	r6, {r0, r1}
 800beae:	f887 c008 	strb.w	ip, [r7, #8]
 800beb2:	6860      	ldr	r0, [r4, #4]
 800beb4:	2300      	movs	r3, #0
 800beb6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800beba:	e6fa      	b.n	800bcb2 <_rclc_take_new_data+0x3a>
 800bebc:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800bec0:	a90a      	add	r1, sp, #40	@ 0x28
 800bec2:	3010      	adds	r0, #16
 800bec4:	f009 f8a0 	bl	8015008 <rcl_action_take_cancel_response>
 800bec8:	4605      	mov	r5, r0
 800beca:	2800      	cmp	r0, #0
 800becc:	f47f af37 	bne.w	800bd3e <_rclc_take_new_data+0xc6>
 800bed0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bed4:	6860      	ldr	r0, [r4, #4]
 800bed6:	f009 fccd 	bl	8015874 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800beda:	4606      	mov	r6, r0
 800bedc:	6860      	ldr	r0, [r4, #4]
 800bede:	2e00      	cmp	r6, #0
 800bee0:	f43f af40 	beq.w	800bd64 <_rclc_take_new_data+0xec>
 800bee4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bee6:	2701      	movs	r7, #1
 800bee8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800beea:	2b00      	cmp	r3, #0
 800beec:	f43f af3a 	beq.w	800bd64 <_rclc_take_new_data+0xec>
 800bef0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bef2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800bef6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800befa:	f009 fc67 	bl	80157cc <rclc_action_find_goal_handle_by_uuid>
 800befe:	b138      	cbz	r0, 800bf10 <_rclc_take_new_data+0x298>
 800bf00:	6860      	ldr	r0, [r4, #4]
 800bf02:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bf04:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800bf08:	3501      	adds	r5, #1
 800bf0a:	42ab      	cmp	r3, r5
 800bf0c:	d8f0      	bhi.n	800bef0 <_rclc_take_new_data+0x278>
 800bf0e:	e729      	b.n	800bd64 <_rclc_take_new_data+0xec>
 800bf10:	6860      	ldr	r0, [r4, #4]
 800bf12:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bf14:	3501      	adds	r5, #1
 800bf16:	42ab      	cmp	r3, r5
 800bf18:	d8ea      	bhi.n	800bef0 <_rclc_take_new_data+0x278>
 800bf1a:	e723      	b.n	800bd64 <_rclc_take_new_data+0xec>
 800bf1c:	ab06      	add	r3, sp, #24
 800bf1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf20:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bf24:	2103      	movs	r1, #3
 800bf26:	e896 000c 	ldmia.w	r6, {r2, r3}
 800bf2a:	6860      	ldr	r0, [r4, #4]
 800bf2c:	f009 fd18 	bl	8015960 <rclc_action_server_goal_cancel_reject>
 800bf30:	e6c4      	b.n	800bcbc <_rclc_take_new_data+0x44>
 800bf32:	ab06      	add	r3, sp, #24
 800bf34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf36:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bf3a:	2102      	movs	r1, #2
 800bf3c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800bf40:	6860      	ldr	r0, [r4, #4]
 800bf42:	f009 fd0d 	bl	8015960 <rclc_action_server_goal_cancel_reject>
 800bf46:	e6b9      	b.n	800bcbc <_rclc_take_new_data+0x44>
 800bf48:	6860      	ldr	r0, [r4, #4]
 800bf4a:	e706      	b.n	800bd5a <_rclc_take_new_data+0xe2>
 800bf4c:	6860      	ldr	r0, [r4, #4]
 800bf4e:	4631      	mov	r1, r6
 800bf50:	f009 fc26 	bl	80157a0 <rclc_action_remove_used_goal_handle>
 800bf54:	f000 ff08 	bl	800cd68 <rcutils_reset_error>
 800bf58:	e6b0      	b.n	800bcbc <_rclc_take_new_data+0x44>
 800bf5a:	2501      	movs	r5, #1
 800bf5c:	e6ae      	b.n	800bcbc <_rclc_take_new_data+0x44>
 800bf5e:	bf00      	nop

0800bf60 <_rclc_execute.part.0>:
 800bf60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf62:	7803      	ldrb	r3, [r0, #0]
 800bf64:	b087      	sub	sp, #28
 800bf66:	4604      	mov	r4, r0
 800bf68:	2b0a      	cmp	r3, #10
 800bf6a:	f200 8136 	bhi.w	800c1da <_rclc_execute.part.0+0x27a>
 800bf6e:	e8df f003 	tbb	[pc, r3]
 800bf72:	435e      	.short	0x435e
 800bf74:	06a1664f 	.word	0x06a1664f
 800bf78:	6c1e0606 	.word	0x6c1e0606
 800bf7c:	59          	.byte	0x59
 800bf7d:	00          	.byte	0x00
 800bf7e:	2b06      	cmp	r3, #6
 800bf80:	f000 8122 	beq.w	800c1c8 <_rclc_execute.part.0+0x268>
 800bf84:	2b07      	cmp	r3, #7
 800bf86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bf88:	f040 8118 	bne.w	800c1bc <_rclc_execute.part.0+0x25c>
 800bf8c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800bf90:	6880      	ldr	r0, [r0, #8]
 800bf92:	4798      	blx	r3
 800bf94:	f104 0110 	add.w	r1, r4, #16
 800bf98:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800bf9a:	6860      	ldr	r0, [r4, #4]
 800bf9c:	f007 fffc 	bl	8013f98 <rcl_send_response>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d033      	beq.n	800c00c <_rclc_execute.part.0+0xac>
 800bfa4:	9005      	str	r0, [sp, #20]
 800bfa6:	f000 fedf 	bl	800cd68 <rcutils_reset_error>
 800bfaa:	9805      	ldr	r0, [sp, #20]
 800bfac:	e02e      	b.n	800c00c <_rclc_execute.part.0+0xac>
 800bfae:	6840      	ldr	r0, [r0, #4]
 800bfb0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f000 8086 	beq.w	800c0c6 <_rclc_execute.part.0+0x166>
 800bfba:	2600      	movs	r6, #0
 800bfbc:	2701      	movs	r7, #1
 800bfbe:	e004      	b.n	800bfca <_rclc_execute.part.0+0x6a>
 800bfc0:	f009 fbb8 	bl	8015734 <rclc_action_send_result_request>
 800bfc4:	b998      	cbnz	r0, 800bfee <_rclc_execute.part.0+0x8e>
 800bfc6:	722f      	strb	r7, [r5, #8]
 800bfc8:	6860      	ldr	r0, [r4, #4]
 800bfca:	f009 fc65 	bl	8015898 <rclc_action_find_first_handle_with_goal_response>
 800bfce:	4605      	mov	r5, r0
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d077      	beq.n	800c0c4 <_rclc_execute.part.0+0x164>
 800bfd4:	6863      	ldr	r3, [r4, #4]
 800bfd6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bfd8:	699b      	ldr	r3, [r3, #24]
 800bfda:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800bfde:	f885 6020 	strb.w	r6, [r5, #32]
 800bfe2:	4798      	blx	r3
 800bfe4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800bfe8:	4628      	mov	r0, r5
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1e8      	bne.n	800bfc0 <_rclc_execute.part.0+0x60>
 800bfee:	6860      	ldr	r0, [r4, #4]
 800bff0:	4629      	mov	r1, r5
 800bff2:	f009 fbd5 	bl	80157a0 <rclc_action_remove_used_goal_handle>
 800bff6:	e7e7      	b.n	800bfc8 <_rclc_execute.part.0+0x68>
 800bff8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800bffc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c000:	2d00      	cmp	r5, #0
 800c002:	f000 80c9 	beq.w	800c198 <_rclc_execute.part.0+0x238>
 800c006:	6880      	ldr	r0, [r0, #8]
 800c008:	4798      	blx	r3
 800c00a:	2000      	movs	r0, #0
 800c00c:	b007      	add	sp, #28
 800c00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c010:	6840      	ldr	r0, [r0, #4]
 800c012:	f7ff fcdb 	bl	800b9cc <rcl_timer_call>
 800c016:	f240 3321 	movw	r3, #801	@ 0x321
 800c01a:	4298      	cmp	r0, r3
 800c01c:	d004      	beq.n	800c028 <_rclc_execute.part.0+0xc8>
 800c01e:	2800      	cmp	r0, #0
 800c020:	d0f4      	beq.n	800c00c <_rclc_execute.part.0+0xac>
 800c022:	e7bf      	b.n	800bfa4 <_rclc_execute.part.0+0x44>
 800c024:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c026:	4798      	blx	r3
 800c028:	2000      	movs	r0, #0
 800c02a:	b007      	add	sp, #28
 800c02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c02e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c032:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c034:	b925      	cbnz	r5, 800c040 <_rclc_execute.part.0+0xe0>
 800c036:	4628      	mov	r0, r5
 800c038:	4798      	blx	r3
 800c03a:	4628      	mov	r0, r5
 800c03c:	e7e6      	b.n	800c00c <_rclc_execute.part.0+0xac>
 800c03e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c040:	68a0      	ldr	r0, [r4, #8]
 800c042:	4798      	blx	r3
 800c044:	2000      	movs	r0, #0
 800c046:	b007      	add	sp, #28
 800c048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c04a:	6840      	ldr	r0, [r0, #4]
 800c04c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c050:	bb3b      	cbnz	r3, 800c0a2 <_rclc_execute.part.0+0x142>
 800c052:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d07b      	beq.n	800c152 <_rclc_execute.part.0+0x1f2>
 800c05a:	f640 0634 	movw	r6, #2100	@ 0x834
 800c05e:	2701      	movs	r7, #1
 800c060:	e007      	b.n	800c072 <_rclc_execute.part.0+0x112>
 800c062:	4628      	mov	r0, r5
 800c064:	f009 fc30 	bl	80158c8 <rclc_action_server_response_goal_request>
 800c068:	6860      	ldr	r0, [r4, #4]
 800c06a:	4629      	mov	r1, r5
 800c06c:	f009 fb98 	bl	80157a0 <rclc_action_remove_used_goal_handle>
 800c070:	6860      	ldr	r0, [r4, #4]
 800c072:	2100      	movs	r1, #0
 800c074:	f009 fbc2 	bl	80157fc <rclc_action_find_first_handle_by_status>
 800c078:	4605      	mov	r5, r0
 800c07a:	2800      	cmp	r0, #0
 800c07c:	d066      	beq.n	800c14c <_rclc_execute.part.0+0x1ec>
 800c07e:	6863      	ldr	r3, [r4, #4]
 800c080:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	4798      	blx	r3
 800c086:	42b0      	cmp	r0, r6
 800c088:	f04f 0100 	mov.w	r1, #0
 800c08c:	d1e9      	bne.n	800c062 <_rclc_execute.part.0+0x102>
 800c08e:	2101      	movs	r1, #1
 800c090:	4628      	mov	r0, r5
 800c092:	f009 fc19 	bl	80158c8 <rclc_action_server_response_goal_request>
 800c096:	722f      	strb	r7, [r5, #8]
 800c098:	e7ea      	b.n	800c070 <_rclc_execute.part.0+0x110>
 800c09a:	6848      	ldr	r0, [r1, #4]
 800c09c:	f009 fb80 	bl	80157a0 <rclc_action_remove_used_goal_handle>
 800c0a0:	6860      	ldr	r0, [r4, #4]
 800c0a2:	f009 fbb7 	bl	8015814 <rclc_action_find_first_terminated_handle>
 800c0a6:	4601      	mov	r1, r0
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d1f6      	bne.n	800c09a <_rclc_execute.part.0+0x13a>
 800c0ac:	6860      	ldr	r0, [r4, #4]
 800c0ae:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c0b2:	e7ce      	b.n	800c052 <_rclc_execute.part.0+0xf2>
 800c0b4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c0b6:	6880      	ldr	r0, [r0, #8]
 800c0b8:	f104 0110 	add.w	r1, r4, #16
 800c0bc:	4798      	blx	r3
 800c0be:	2000      	movs	r0, #0
 800c0c0:	b007      	add	sp, #28
 800c0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0c4:	6860      	ldr	r0, [r4, #4]
 800c0c6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c0ca:	b18b      	cbz	r3, 800c0f0 <_rclc_execute.part.0+0x190>
 800c0cc:	68c5      	ldr	r5, [r0, #12]
 800c0ce:	b32d      	cbz	r5, 800c11c <_rclc_execute.part.0+0x1bc>
 800c0d0:	2600      	movs	r6, #0
 800c0d2:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c0d6:	b143      	cbz	r3, 800c0ea <_rclc_execute.part.0+0x18a>
 800c0d8:	69c3      	ldr	r3, [r0, #28]
 800c0da:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c0de:	b123      	cbz	r3, 800c0ea <_rclc_execute.part.0+0x18a>
 800c0e0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c0e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	4798      	blx	r3
 800c0e8:	6860      	ldr	r0, [r4, #4]
 800c0ea:	682d      	ldr	r5, [r5, #0]
 800c0ec:	2d00      	cmp	r5, #0
 800c0ee:	d1f0      	bne.n	800c0d2 <_rclc_execute.part.0+0x172>
 800c0f0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c0f4:	b193      	cbz	r3, 800c11c <_rclc_execute.part.0+0x1bc>
 800c0f6:	68c5      	ldr	r5, [r0, #12]
 800c0f8:	b185      	cbz	r5, 800c11c <_rclc_execute.part.0+0x1bc>
 800c0fa:	2600      	movs	r6, #0
 800c0fc:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c100:	b14b      	cbz	r3, 800c116 <_rclc_execute.part.0+0x1b6>
 800c102:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c104:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c108:	b12b      	cbz	r3, 800c116 <_rclc_execute.part.0+0x1b6>
 800c10a:	4628      	mov	r0, r5
 800c10c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c110:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c112:	4798      	blx	r3
 800c114:	6860      	ldr	r0, [r4, #4]
 800c116:	682d      	ldr	r5, [r5, #0]
 800c118:	2d00      	cmp	r5, #0
 800c11a:	d1ef      	bne.n	800c0fc <_rclc_execute.part.0+0x19c>
 800c11c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c120:	2b00      	cmp	r3, #0
 800c122:	d081      	beq.n	800c028 <_rclc_execute.part.0+0xc8>
 800c124:	2700      	movs	r7, #0
 800c126:	e00b      	b.n	800c140 <_rclc_execute.part.0+0x1e0>
 800c128:	6863      	ldr	r3, [r4, #4]
 800c12a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c12c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c12e:	6a1e      	ldr	r6, [r3, #32]
 800c130:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c134:	47b0      	blx	r6
 800c136:	6860      	ldr	r0, [r4, #4]
 800c138:	4629      	mov	r1, r5
 800c13a:	f009 fb31 	bl	80157a0 <rclc_action_remove_used_goal_handle>
 800c13e:	6860      	ldr	r0, [r4, #4]
 800c140:	f009 fbb6 	bl	80158b0 <rclc_action_find_first_handle_with_result_response>
 800c144:	4605      	mov	r5, r0
 800c146:	2800      	cmp	r0, #0
 800c148:	d1ee      	bne.n	800c128 <_rclc_execute.part.0+0x1c8>
 800c14a:	e76d      	b.n	800c028 <_rclc_execute.part.0+0xc8>
 800c14c:	6860      	ldr	r0, [r4, #4]
 800c14e:	f880 5020 	strb.w	r5, [r0, #32]
 800c152:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c156:	2b00      	cmp	r3, #0
 800c158:	f43f af66 	beq.w	800c028 <_rclc_execute.part.0+0xc8>
 800c15c:	68c5      	ldr	r5, [r0, #12]
 800c15e:	b1b5      	cbz	r5, 800c18e <_rclc_execute.part.0+0x22e>
 800c160:	2602      	movs	r6, #2
 800c162:	e001      	b.n	800c168 <_rclc_execute.part.0+0x208>
 800c164:	682d      	ldr	r5, [r5, #0]
 800c166:	b195      	cbz	r5, 800c18e <_rclc_execute.part.0+0x22e>
 800c168:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c16c:	2b03      	cmp	r3, #3
 800c16e:	d1f9      	bne.n	800c164 <_rclc_execute.part.0+0x204>
 800c170:	69c3      	ldr	r3, [r0, #28]
 800c172:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c174:	4628      	mov	r0, r5
 800c176:	4798      	blx	r3
 800c178:	4603      	mov	r3, r0
 800c17a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c17e:	4628      	mov	r0, r5
 800c180:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c184:	b163      	cbz	r3, 800c1a0 <_rclc_execute.part.0+0x240>
 800c186:	f009 fbbf 	bl	8015908 <rclc_action_server_goal_cancel_accept>
 800c18a:	6860      	ldr	r0, [r4, #4]
 800c18c:	e7ea      	b.n	800c164 <_rclc_execute.part.0+0x204>
 800c18e:	2300      	movs	r3, #0
 800c190:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c194:	4618      	mov	r0, r3
 800c196:	e739      	b.n	800c00c <_rclc_execute.part.0+0xac>
 800c198:	4628      	mov	r0, r5
 800c19a:	4798      	blx	r3
 800c19c:	4628      	mov	r0, r5
 800c19e:	e735      	b.n	800c00c <_rclc_execute.part.0+0xac>
 800c1a0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c1a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c1a6:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1ae:	6860      	ldr	r0, [r4, #4]
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	f009 fbd5 	bl	8015960 <rclc_action_server_goal_cancel_reject>
 800c1b6:	722e      	strb	r6, [r5, #8]
 800c1b8:	6860      	ldr	r0, [r4, #4]
 800c1ba:	e7d3      	b.n	800c164 <_rclc_execute.part.0+0x204>
 800c1bc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c1be:	6880      	ldr	r0, [r0, #8]
 800c1c0:	4798      	blx	r3
 800c1c2:	f104 0110 	add.w	r1, r4, #16
 800c1c6:	e6e7      	b.n	800bf98 <_rclc_execute.part.0+0x38>
 800c1c8:	f100 0110 	add.w	r1, r0, #16
 800c1cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c1ce:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c1d0:	6880      	ldr	r0, [r0, #8]
 800c1d2:	9105      	str	r1, [sp, #20]
 800c1d4:	4798      	blx	r3
 800c1d6:	9905      	ldr	r1, [sp, #20]
 800c1d8:	e6de      	b.n	800bf98 <_rclc_execute.part.0+0x38>
 800c1da:	2001      	movs	r0, #1
 800c1dc:	e716      	b.n	800c00c <_rclc_execute.part.0+0xac>
 800c1de:	bf00      	nop

0800c1e0 <rclc_executor_trigger_any>:
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	d03f      	beq.n	800c264 <rclc_executor_trigger_any+0x84>
 800c1e4:	2900      	cmp	r1, #0
 800c1e6:	d03e      	beq.n	800c266 <rclc_executor_trigger_any+0x86>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	d037      	beq.n	800c264 <rclc_executor_trigger_any+0x84>
 800c1f4:	b430      	push	{r4, r5}
 800c1f6:	f893 c000 	ldrb.w	ip, [r3]
 800c1fa:	f1bc 0f08 	cmp.w	ip, #8
 800c1fe:	d11e      	bne.n	800c23e <rclc_executor_trigger_any+0x5e>
 800c200:	685c      	ldr	r4, [r3, #4]
 800c202:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c204:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c208:	d105      	bne.n	800c216 <rclc_executor_trigger_any+0x36>
 800c20a:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c20e:	b910      	cbnz	r0, 800c216 <rclc_executor_trigger_any+0x36>
 800c210:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c214:	b128      	cbz	r0, 800c222 <rclc_executor_trigger_any+0x42>
 800c216:	bc30      	pop	{r4, r5}
 800c218:	4770      	bx	lr
 800c21a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c21e:	2800      	cmp	r0, #0
 800c220:	d1f9      	bne.n	800c216 <rclc_executor_trigger_any+0x36>
 800c222:	3201      	adds	r2, #1
 800c224:	4291      	cmp	r1, r2
 800c226:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c22a:	d018      	beq.n	800c25e <rclc_executor_trigger_any+0x7e>
 800c22c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c230:	2800      	cmp	r0, #0
 800c232:	d0f0      	beq.n	800c216 <rclc_executor_trigger_any+0x36>
 800c234:	f893 c000 	ldrb.w	ip, [r3]
 800c238:	f1bc 0f08 	cmp.w	ip, #8
 800c23c:	d0e0      	beq.n	800c200 <rclc_executor_trigger_any+0x20>
 800c23e:	f1bc 0f09 	cmp.w	ip, #9
 800c242:	d1ea      	bne.n	800c21a <rclc_executor_trigger_any+0x3a>
 800c244:	685c      	ldr	r4, [r3, #4]
 800c246:	6a25      	ldr	r5, [r4, #32]
 800c248:	2d00      	cmp	r5, #0
 800c24a:	d1e4      	bne.n	800c216 <rclc_executor_trigger_any+0x36>
 800c24c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c250:	2800      	cmp	r0, #0
 800c252:	d1e0      	bne.n	800c216 <rclc_executor_trigger_any+0x36>
 800c254:	3201      	adds	r2, #1
 800c256:	4291      	cmp	r1, r2
 800c258:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c25c:	d1e6      	bne.n	800c22c <rclc_executor_trigger_any+0x4c>
 800c25e:	2000      	movs	r0, #0
 800c260:	bc30      	pop	{r4, r5}
 800c262:	4770      	bx	lr
 800c264:	4770      	bx	lr
 800c266:	4608      	mov	r0, r1
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	0000      	movs	r0, r0
	...

0800c270 <rclc_executor_init>:
 800c270:	2800      	cmp	r0, #0
 800c272:	d05f      	beq.n	800c334 <rclc_executor_init+0xc4>
 800c274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c278:	460c      	mov	r4, r1
 800c27a:	b0b0      	sub	sp, #192	@ 0xc0
 800c27c:	2900      	cmp	r1, #0
 800c27e:	d051      	beq.n	800c324 <rclc_executor_init+0xb4>
 800c280:	4605      	mov	r5, r0
 800c282:	4618      	mov	r0, r3
 800c284:	4616      	mov	r6, r2
 800c286:	461f      	mov	r7, r3
 800c288:	f000 fc8e 	bl	800cba8 <rcutils_allocator_is_valid>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d049      	beq.n	800c324 <rclc_executor_init+0xb4>
 800c290:	2e00      	cmp	r6, #0
 800c292:	d047      	beq.n	800c324 <rclc_executor_init+0xb4>
 800c294:	492c      	ldr	r1, [pc, #176]	@ (800c348 <rclc_executor_init+0xd8>)
 800c296:	2288      	movs	r2, #136	@ 0x88
 800c298:	a80e      	add	r0, sp, #56	@ 0x38
 800c29a:	f00c f98e 	bl	80185ba <memcpy>
 800c29e:	a90e      	add	r1, sp, #56	@ 0x38
 800c2a0:	2288      	movs	r2, #136	@ 0x88
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	f00c f989 	bl	80185ba <memcpy>
 800c2a8:	602c      	str	r4, [r5, #0]
 800c2aa:	4668      	mov	r0, sp
 800c2ac:	60ae      	str	r6, [r5, #8]
 800c2ae:	466c      	mov	r4, sp
 800c2b0:	f008 f822 	bl	80142f8 <rcl_get_zero_initialized_wait_set>
 800c2b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2b6:	f105 0c14 	add.w	ip, r5, #20
 800c2ba:	f8d7 8000 	ldr.w	r8, [r7]
 800c2be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2ce:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c340 <rclc_executor_init+0xd0>
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	f8cc 3000 	str.w	r3, [ip]
 800c2d8:	6939      	ldr	r1, [r7, #16]
 800c2da:	612f      	str	r7, [r5, #16]
 800c2dc:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c2e0:	01b0      	lsls	r0, r6, #6
 800c2e2:	47c0      	blx	r8
 800c2e4:	6068      	str	r0, [r5, #4]
 800c2e6:	b338      	cbz	r0, 800c338 <rclc_executor_init+0xc8>
 800c2e8:	2400      	movs	r4, #0
 800c2ea:	e000      	b.n	800c2ee <rclc_executor_init+0x7e>
 800c2ec:	6868      	ldr	r0, [r5, #4]
 800c2ee:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	3401      	adds	r4, #1
 800c2f6:	f000 facb 	bl	800c890 <rclc_executor_handle_init>
 800c2fa:	42a6      	cmp	r6, r4
 800c2fc:	d1f6      	bne.n	800c2ec <rclc_executor_init+0x7c>
 800c2fe:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c302:	f000 fab9 	bl	800c878 <rclc_executor_handle_counters_zero_init>
 800c306:	4a11      	ldr	r2, [pc, #68]	@ (800c34c <rclc_executor_init+0xdc>)
 800c308:	686b      	ldr	r3, [r5, #4]
 800c30a:	2000      	movs	r0, #0
 800c30c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c310:	b163      	cbz	r3, 800c32c <rclc_executor_init+0xbc>
 800c312:	692b      	ldr	r3, [r5, #16]
 800c314:	b153      	cbz	r3, 800c32c <rclc_executor_init+0xbc>
 800c316:	68ab      	ldr	r3, [r5, #8]
 800c318:	b143      	cbz	r3, 800c32c <rclc_executor_init+0xbc>
 800c31a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c31e:	b030      	add	sp, #192	@ 0xc0
 800c320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c324:	200b      	movs	r0, #11
 800c326:	b030      	add	sp, #192	@ 0xc0
 800c328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c32c:	4618      	mov	r0, r3
 800c32e:	b030      	add	sp, #192	@ 0xc0
 800c330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c334:	200b      	movs	r0, #11
 800c336:	4770      	bx	lr
 800c338:	200a      	movs	r0, #10
 800c33a:	e7f4      	b.n	800c326 <rclc_executor_init+0xb6>
 800c33c:	f3af 8000 	nop.w
 800c340:	3b9aca00 	.word	0x3b9aca00
 800c344:	00000000 	.word	0x00000000
 800c348:	08019a78 	.word	0x08019a78
 800c34c:	0800c1e1 	.word	0x0800c1e1

0800c350 <rclc_executor_fini>:
 800c350:	b308      	cbz	r0, 800c396 <rclc_executor_fini+0x46>
 800c352:	b538      	push	{r3, r4, r5, lr}
 800c354:	4604      	mov	r4, r0
 800c356:	6840      	ldr	r0, [r0, #4]
 800c358:	b1d8      	cbz	r0, 800c392 <rclc_executor_fini+0x42>
 800c35a:	6923      	ldr	r3, [r4, #16]
 800c35c:	b1cb      	cbz	r3, 800c392 <rclc_executor_fini+0x42>
 800c35e:	68a2      	ldr	r2, [r4, #8]
 800c360:	b1ba      	cbz	r2, 800c392 <rclc_executor_fini+0x42>
 800c362:	6919      	ldr	r1, [r3, #16]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	4798      	blx	r3
 800c368:	2300      	movs	r3, #0
 800c36a:	2000      	movs	r0, #0
 800c36c:	2100      	movs	r1, #0
 800c36e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c372:	6063      	str	r3, [r4, #4]
 800c374:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800c378:	f104 0514 	add.w	r5, r4, #20
 800c37c:	f000 fa7c 	bl	800c878 <rclc_executor_handle_counters_zero_init>
 800c380:	4628      	mov	r0, r5
 800c382:	f007 ffcd 	bl	8014320 <rcl_wait_set_is_valid>
 800c386:	b940      	cbnz	r0, 800c39a <rclc_executor_fini+0x4a>
 800c388:	a309      	add	r3, pc, #36	@ (adr r3, 800c3b0 <rclc_executor_fini+0x60>)
 800c38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38e:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68
 800c392:	2000      	movs	r0, #0
 800c394:	bd38      	pop	{r3, r4, r5, pc}
 800c396:	2000      	movs	r0, #0
 800c398:	4770      	bx	lr
 800c39a:	4628      	mov	r0, r5
 800c39c:	f007 ffc6 	bl	801432c <rcl_wait_set_fini>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	d0f1      	beq.n	800c388 <rclc_executor_fini+0x38>
 800c3a4:	f000 fce0 	bl	800cd68 <rcutils_reset_error>
 800c3a8:	e7ee      	b.n	800c388 <rclc_executor_fini+0x38>
 800c3aa:	bf00      	nop
 800c3ac:	f3af 8000 	nop.w
 800c3b0:	3b9aca00 	.word	0x3b9aca00
 800c3b4:	00000000 	.word	0x00000000

0800c3b8 <rclc_executor_add_subscription>:
 800c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ba:	f89d e018 	ldrb.w	lr, [sp, #24]
 800c3be:	b338      	cbz	r0, 800c410 <rclc_executor_add_subscription+0x58>
 800c3c0:	b331      	cbz	r1, 800c410 <rclc_executor_add_subscription+0x58>
 800c3c2:	b32a      	cbz	r2, 800c410 <rclc_executor_add_subscription+0x58>
 800c3c4:	b323      	cbz	r3, 800c410 <rclc_executor_add_subscription+0x58>
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800c3cc:	42a8      	cmp	r0, r5
 800c3ce:	d301      	bcc.n	800c3d4 <rclc_executor_add_subscription+0x1c>
 800c3d0:	2001      	movs	r0, #1
 800c3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3d4:	6866      	ldr	r6, [r4, #4]
 800c3d6:	0187      	lsls	r7, r0, #6
 800c3d8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800c3dc:	2500      	movs	r5, #0
 800c3de:	55f5      	strb	r5, [r6, r7]
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c3e6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	f104 0514 	add.w	r5, r4, #20
 800c3f0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c3f4:	f88c e001 	strb.w	lr, [ip, #1]
 800c3f8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800c3fc:	60e0      	str	r0, [r4, #12]
 800c3fe:	4628      	mov	r0, r5
 800c400:	f007 ff8e 	bl	8014320 <rcl_wait_set_is_valid>
 800c404:	b930      	cbnz	r0, 800c414 <rclc_executor_add_subscription+0x5c>
 800c406:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800c408:	3301      	adds	r3, #1
 800c40a:	2000      	movs	r0, #0
 800c40c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800c40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c410:	200b      	movs	r0, #11
 800c412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c414:	4628      	mov	r0, r5
 800c416:	f007 ff89 	bl	801432c <rcl_wait_set_fini>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d0f3      	beq.n	800c406 <rclc_executor_add_subscription+0x4e>
 800c41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c420 <rclc_executor_add_timer>:
 800c420:	b300      	cbz	r0, 800c464 <rclc_executor_add_timer+0x44>
 800c422:	b1f9      	cbz	r1, 800c464 <rclc_executor_add_timer+0x44>
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800c42a:	4293      	cmp	r3, r2
 800c42c:	4604      	mov	r4, r0
 800c42e:	d301      	bcc.n	800c434 <rclc_executor_add_timer+0x14>
 800c430:	2001      	movs	r0, #1
 800c432:	bd38      	pop	{r3, r4, r5, pc}
 800c434:	6840      	ldr	r0, [r0, #4]
 800c436:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800c43a:	019d      	lsls	r5, r3, #6
 800c43c:	6051      	str	r1, [r2, #4]
 800c43e:	2102      	movs	r1, #2
 800c440:	5341      	strh	r1, [r0, r5]
 800c442:	3301      	adds	r3, #1
 800c444:	2000      	movs	r0, #0
 800c446:	2101      	movs	r1, #1
 800c448:	f104 0514 	add.w	r5, r4, #20
 800c44c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800c44e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800c450:	4628      	mov	r0, r5
 800c452:	60e3      	str	r3, [r4, #12]
 800c454:	f007 ff64 	bl	8014320 <rcl_wait_set_is_valid>
 800c458:	b930      	cbnz	r0, 800c468 <rclc_executor_add_timer+0x48>
 800c45a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800c45c:	3301      	adds	r3, #1
 800c45e:	2000      	movs	r0, #0
 800c460:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800c462:	bd38      	pop	{r3, r4, r5, pc}
 800c464:	200b      	movs	r0, #11
 800c466:	4770      	bx	lr
 800c468:	4628      	mov	r0, r5
 800c46a:	f007 ff5f 	bl	801432c <rcl_wait_set_fini>
 800c46e:	2800      	cmp	r0, #0
 800c470:	d0f3      	beq.n	800c45a <rclc_executor_add_timer+0x3a>
 800c472:	bd38      	pop	{r3, r4, r5, pc}

0800c474 <rclc_executor_prepare>:
 800c474:	2800      	cmp	r0, #0
 800c476:	d044      	beq.n	800c502 <rclc_executor_prepare+0x8e>
 800c478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c47a:	f100 0514 	add.w	r5, r0, #20
 800c47e:	b09b      	sub	sp, #108	@ 0x6c
 800c480:	4604      	mov	r4, r0
 800c482:	4628      	mov	r0, r5
 800c484:	f007 ff4c 	bl	8014320 <rcl_wait_set_is_valid>
 800c488:	b110      	cbz	r0, 800c490 <rclc_executor_prepare+0x1c>
 800c48a:	2000      	movs	r0, #0
 800c48c:	b01b      	add	sp, #108	@ 0x6c
 800c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c490:	4628      	mov	r0, r5
 800c492:	f007 ff4b 	bl	801432c <rcl_wait_set_fini>
 800c496:	2800      	cmp	r0, #0
 800c498:	d130      	bne.n	800c4fc <rclc_executor_prepare+0x88>
 800c49a:	a80c      	add	r0, sp, #48	@ 0x30
 800c49c:	f007 ff2c 	bl	80142f8 <rcl_get_zero_initialized_wait_set>
 800c4a0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c4a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4a8:	46ae      	mov	lr, r5
 800c4aa:	6927      	ldr	r7, [r4, #16]
 800c4ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4c0:	f8dc 3000 	ldr.w	r3, [ip]
 800c4c4:	f8ce 3000 	str.w	r3, [lr]
 800c4c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c4ca:	ae04      	add	r6, sp, #16
 800c4cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	6822      	ldr	r2, [r4, #0]
 800c4d2:	6033      	str	r3, [r6, #0]
 800c4d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4d6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c4d8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c4dc:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800c4e0:	e9cd 2100 	strd	r2, r1, [sp]
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800c4e8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c4ea:	f008 fa1d 	bl	8014928 <rcl_wait_set_init>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d0cc      	beq.n	800c48c <rclc_executor_prepare+0x18>
 800c4f2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c4f4:	f000 fc38 	bl	800cd68 <rcutils_reset_error>
 800c4f8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c4fa:	e7c7      	b.n	800c48c <rclc_executor_prepare+0x18>
 800c4fc:	f000 fc34 	bl	800cd68 <rcutils_reset_error>
 800c500:	e7cb      	b.n	800c49a <rclc_executor_prepare+0x26>
 800c502:	200b      	movs	r0, #11
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop

0800c508 <rclc_executor_spin_some.part.0>:
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	f100 0614 	add.w	r6, r0, #20
 800c510:	b083      	sub	sp, #12
 800c512:	4691      	mov	r9, r2
 800c514:	4698      	mov	r8, r3
 800c516:	4605      	mov	r5, r0
 800c518:	f7ff ffac 	bl	800c474 <rclc_executor_prepare>
 800c51c:	4630      	mov	r0, r6
 800c51e:	f007 ffd1 	bl	80144c4 <rcl_wait_set_clear>
 800c522:	4607      	mov	r7, r0
 800c524:	2800      	cmp	r0, #0
 800c526:	f040 80ed 	bne.w	800c704 <rclc_executor_spin_some.part.0+0x1fc>
 800c52a:	68ab      	ldr	r3, [r5, #8]
 800c52c:	4604      	mov	r4, r0
 800c52e:	b303      	cbz	r3, 800c572 <rclc_executor_spin_some.part.0+0x6a>
 800c530:	6869      	ldr	r1, [r5, #4]
 800c532:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c536:	01a2      	lsls	r2, r4, #6
 800c538:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800c53c:	b1cb      	cbz	r3, 800c572 <rclc_executor_spin_some.part.0+0x6a>
 800c53e:	5c8b      	ldrb	r3, [r1, r2]
 800c540:	2b0a      	cmp	r3, #10
 800c542:	f200 80d8 	bhi.w	800c6f6 <rclc_executor_spin_some.part.0+0x1ee>
 800c546:	e8df f003 	tbb	[pc, r3]
 800c54a:	9c9c      	.short	0x9c9c
 800c54c:	068c8ca7 	.word	0x068c8ca7
 800c550:	bdc90606 	.word	0xbdc90606
 800c554:	b2          	.byte	0xb2
 800c555:	00          	.byte	0x00
 800c556:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c55a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c55e:	4630      	mov	r0, r6
 800c560:	f008 faf8 	bl	8014b54 <rcl_wait_set_add_service>
 800c564:	2800      	cmp	r0, #0
 800c566:	f040 8086 	bne.w	800c676 <rclc_executor_spin_some.part.0+0x16e>
 800c56a:	68ab      	ldr	r3, [r5, #8]
 800c56c:	3401      	adds	r4, #1
 800c56e:	429c      	cmp	r4, r3
 800c570:	d3de      	bcc.n	800c530 <rclc_executor_spin_some.part.0+0x28>
 800c572:	4643      	mov	r3, r8
 800c574:	464a      	mov	r2, r9
 800c576:	4630      	mov	r0, r6
 800c578:	f008 fb1a 	bl	8014bb0 <rcl_wait>
 800c57c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 80c7 	beq.w	800c714 <rclc_executor_spin_some.part.0+0x20c>
 800c586:	2b01      	cmp	r3, #1
 800c588:	f040 80b5 	bne.w	800c6f6 <rclc_executor_spin_some.part.0+0x1ee>
 800c58c:	68ab      	ldr	r3, [r5, #8]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f000 8159 	beq.w	800c846 <rclc_executor_spin_some.part.0+0x33e>
 800c594:	2400      	movs	r4, #0
 800c596:	46a0      	mov	r8, r4
 800c598:	f240 1991 	movw	r9, #401	@ 0x191
 800c59c:	e00a      	b.n	800c5b4 <rclc_executor_spin_some.part.0+0xac>
 800c59e:	f7ff fb1d 	bl	800bbdc <_rclc_check_for_new_data>
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	b110      	cbz	r0, 800c5ac <rclc_executor_spin_some.part.0+0xa4>
 800c5a6:	4548      	cmp	r0, r9
 800c5a8:	f040 80b2 	bne.w	800c710 <rclc_executor_spin_some.part.0+0x208>
 800c5ac:	68ab      	ldr	r3, [r5, #8]
 800c5ae:	4598      	cmp	r8, r3
 800c5b0:	f080 8126 	bcs.w	800c800 <rclc_executor_spin_some.part.0+0x2f8>
 800c5b4:	686a      	ldr	r2, [r5, #4]
 800c5b6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c5c0:	f108 0801 	add.w	r8, r8, #1
 800c5c4:	f1bc 0f00 	cmp.w	ip, #0
 800c5c8:	d1e9      	bne.n	800c59e <rclc_executor_spin_some.part.0+0x96>
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	4610      	mov	r0, r2
 800c5ce:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c5d2:	4798      	blx	r3
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	f000 809b 	beq.w	800c710 <rclc_executor_spin_some.part.0+0x208>
 800c5da:	68ab      	ldr	r3, [r5, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f000 8097 	beq.w	800c710 <rclc_executor_spin_some.part.0+0x208>
 800c5e2:	f04f 0800 	mov.w	r8, #0
 800c5e6:	f240 1991 	movw	r9, #401	@ 0x191
 800c5ea:	e009      	b.n	800c600 <rclc_executor_spin_some.part.0+0xf8>
 800c5ec:	f7ff fb44 	bl	800bc78 <_rclc_take_new_data>
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	b110      	cbz	r0, 800c5fa <rclc_executor_spin_some.part.0+0xf2>
 800c5f4:	4548      	cmp	r0, r9
 800c5f6:	f040 808b 	bne.w	800c710 <rclc_executor_spin_some.part.0+0x208>
 800c5fa:	68ab      	ldr	r3, [r5, #8]
 800c5fc:	4598      	cmp	r8, r3
 800c5fe:	d209      	bcs.n	800c614 <rclc_executor_spin_some.part.0+0x10c>
 800c600:	6868      	ldr	r0, [r5, #4]
 800c602:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c606:	4631      	mov	r1, r6
 800c608:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800c60c:	f108 0801 	add.w	r8, r8, #1
 800c610:	2a00      	cmp	r2, #0
 800c612:	d1eb      	bne.n	800c5ec <rclc_executor_spin_some.part.0+0xe4>
 800c614:	2600      	movs	r6, #0
 800c616:	b97b      	cbnz	r3, 800c638 <rclc_executor_spin_some.part.0+0x130>
 800c618:	e07a      	b.n	800c710 <rclc_executor_spin_some.part.0+0x208>
 800c61a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c61e:	2a08      	cmp	r2, #8
 800c620:	f000 80fd 	beq.w	800c81e <rclc_executor_spin_some.part.0+0x316>
 800c624:	2a09      	cmp	r2, #9
 800c626:	f000 80ef 	beq.w	800c808 <rclc_executor_spin_some.part.0+0x300>
 800c62a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800c62e:	b98a      	cbnz	r2, 800c654 <rclc_executor_spin_some.part.0+0x14c>
 800c630:	3601      	adds	r6, #1
 800c632:	429e      	cmp	r6, r3
 800c634:	d262      	bcs.n	800c6fc <rclc_executor_spin_some.part.0+0x1f4>
 800c636:	2400      	movs	r4, #0
 800c638:	686a      	ldr	r2, [r5, #4]
 800c63a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c63e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c642:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800c646:	2900      	cmp	r1, #0
 800c648:	d062      	beq.n	800c710 <rclc_executor_spin_some.part.0+0x208>
 800c64a:	7841      	ldrb	r1, [r0, #1]
 800c64c:	2900      	cmp	r1, #0
 800c64e:	d0e4      	beq.n	800c61a <rclc_executor_spin_some.part.0+0x112>
 800c650:	2901      	cmp	r1, #1
 800c652:	d1ed      	bne.n	800c630 <rclc_executor_spin_some.part.0+0x128>
 800c654:	f7ff fc84 	bl	800bf60 <_rclc_execute.part.0>
 800c658:	2800      	cmp	r0, #0
 800c65a:	f040 80b6 	bne.w	800c7ca <rclc_executor_spin_some.part.0+0x2c2>
 800c65e:	68ab      	ldr	r3, [r5, #8]
 800c660:	e7e6      	b.n	800c630 <rclc_executor_spin_some.part.0+0x128>
 800c662:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c666:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c66a:	4630      	mov	r0, r6
 800c66c:	f008 fa46 	bl	8014afc <rcl_wait_set_add_client>
 800c670:	2800      	cmp	r0, #0
 800c672:	f43f af7a 	beq.w	800c56a <rclc_executor_spin_some.part.0+0x62>
 800c676:	9001      	str	r0, [sp, #4]
 800c678:	f000 fb76 	bl	800cd68 <rcutils_reset_error>
 800c67c:	9801      	ldr	r0, [sp, #4]
 800c67e:	4607      	mov	r7, r0
 800c680:	e03c      	b.n	800c6fc <rclc_executor_spin_some.part.0+0x1f4>
 800c682:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c686:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c68a:	4630      	mov	r0, r6
 800c68c:	f007 feee 	bl	801446c <rcl_wait_set_add_subscription>
 800c690:	2800      	cmp	r0, #0
 800c692:	f43f af6a 	beq.w	800c56a <rclc_executor_spin_some.part.0+0x62>
 800c696:	e7ee      	b.n	800c676 <rclc_executor_spin_some.part.0+0x16e>
 800c698:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c69c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	f008 f9fb 	bl	8014a9c <rcl_wait_set_add_timer>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	f43f af5f 	beq.w	800c56a <rclc_executor_spin_some.part.0+0x62>
 800c6ac:	e7e3      	b.n	800c676 <rclc_executor_spin_some.part.0+0x16e>
 800c6ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c6b2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	f008 f9c4 	bl	8014a44 <rcl_wait_set_add_guard_condition>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	f43f af54 	beq.w	800c56a <rclc_executor_spin_some.part.0+0x62>
 800c6c2:	e7d8      	b.n	800c676 <rclc_executor_spin_some.part.0+0x16e>
 800c6c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c6c8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c6cc:	3110      	adds	r1, #16
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	f008 ff46 	bl	8015560 <rcl_action_wait_set_add_action_server>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	f43f af48 	beq.w	800c56a <rclc_executor_spin_some.part.0+0x62>
 800c6da:	e7cc      	b.n	800c676 <rclc_executor_spin_some.part.0+0x16e>
 800c6dc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c6e0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c6e4:	3110      	adds	r1, #16
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f008 fd11 	bl	8015110 <rcl_action_wait_set_add_action_client>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	f43f af3b 	beq.w	800c56a <rclc_executor_spin_some.part.0+0x62>
 800c6f4:	e7bf      	b.n	800c676 <rclc_executor_spin_some.part.0+0x16e>
 800c6f6:	f000 fb37 	bl	800cd68 <rcutils_reset_error>
 800c6fa:	2701      	movs	r7, #1
 800c6fc:	4638      	mov	r0, r7
 800c6fe:	b003      	add	sp, #12
 800c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c704:	f000 fb30 	bl	800cd68 <rcutils_reset_error>
 800c708:	4638      	mov	r0, r7
 800c70a:	b003      	add	sp, #12
 800c70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c710:	4627      	mov	r7, r4
 800c712:	e7f3      	b.n	800c6fc <rclc_executor_spin_some.part.0+0x1f4>
 800c714:	68ab      	ldr	r3, [r5, #8]
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 8092 	beq.w	800c840 <rclc_executor_spin_some.part.0+0x338>
 800c71c:	2400      	movs	r4, #0
 800c71e:	46a0      	mov	r8, r4
 800c720:	f240 1991 	movw	r9, #401	@ 0x191
 800c724:	e008      	b.n	800c738 <rclc_executor_spin_some.part.0+0x230>
 800c726:	f7ff fa59 	bl	800bbdc <_rclc_check_for_new_data>
 800c72a:	4604      	mov	r4, r0
 800c72c:	b108      	cbz	r0, 800c732 <rclc_executor_spin_some.part.0+0x22a>
 800c72e:	4548      	cmp	r0, r9
 800c730:	d1ee      	bne.n	800c710 <rclc_executor_spin_some.part.0+0x208>
 800c732:	68ab      	ldr	r3, [r5, #8]
 800c734:	4598      	cmp	r8, r3
 800c736:	d265      	bcs.n	800c804 <rclc_executor_spin_some.part.0+0x2fc>
 800c738:	686a      	ldr	r2, [r5, #4]
 800c73a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c73e:	4631      	mov	r1, r6
 800c740:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c744:	f108 0801 	add.w	r8, r8, #1
 800c748:	f1bc 0f00 	cmp.w	ip, #0
 800c74c:	d1eb      	bne.n	800c726 <rclc_executor_spin_some.part.0+0x21e>
 800c74e:	4619      	mov	r1, r3
 800c750:	4610      	mov	r0, r2
 800c752:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c756:	4798      	blx	r3
 800c758:	2800      	cmp	r0, #0
 800c75a:	d0d9      	beq.n	800c710 <rclc_executor_spin_some.part.0+0x208>
 800c75c:	68ab      	ldr	r3, [r5, #8]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d0d6      	beq.n	800c710 <rclc_executor_spin_some.part.0+0x208>
 800c762:	f04f 0800 	mov.w	r8, #0
 800c766:	f240 1991 	movw	r9, #401	@ 0x191
 800c76a:	f240 2a59 	movw	sl, #601	@ 0x259
 800c76e:	e00e      	b.n	800c78e <rclc_executor_spin_some.part.0+0x286>
 800c770:	f813 300b 	ldrb.w	r3, [r3, fp]
 800c774:	2b08      	cmp	r3, #8
 800c776:	d033      	beq.n	800c7e0 <rclc_executor_spin_some.part.0+0x2d8>
 800c778:	2b09      	cmp	r3, #9
 800c77a:	d028      	beq.n	800c7ce <rclc_executor_spin_some.part.0+0x2c6>
 800c77c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800c780:	b9fb      	cbnz	r3, 800c7c2 <rclc_executor_spin_some.part.0+0x2ba>
 800c782:	68ab      	ldr	r3, [r5, #8]
 800c784:	f108 0801 	add.w	r8, r8, #1
 800c788:	4598      	cmp	r8, r3
 800c78a:	d2b7      	bcs.n	800c6fc <rclc_executor_spin_some.part.0+0x1f4>
 800c78c:	2400      	movs	r4, #0
 800c78e:	6868      	ldr	r0, [r5, #4]
 800c790:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c794:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800c798:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d0b7      	beq.n	800c710 <rclc_executor_spin_some.part.0+0x208>
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	f7ff fa69 	bl	800bc78 <_rclc_take_new_data>
 800c7a6:	b118      	cbz	r0, 800c7b0 <rclc_executor_spin_some.part.0+0x2a8>
 800c7a8:	4548      	cmp	r0, r9
 800c7aa:	d001      	beq.n	800c7b0 <rclc_executor_spin_some.part.0+0x2a8>
 800c7ac:	4550      	cmp	r0, sl
 800c7ae:	d10c      	bne.n	800c7ca <rclc_executor_spin_some.part.0+0x2c2>
 800c7b0:	686b      	ldr	r3, [r5, #4]
 800c7b2:	eb13 000b 	adds.w	r0, r3, fp
 800c7b6:	d021      	beq.n	800c7fc <rclc_executor_spin_some.part.0+0x2f4>
 800c7b8:	7842      	ldrb	r2, [r0, #1]
 800c7ba:	2a00      	cmp	r2, #0
 800c7bc:	d0d8      	beq.n	800c770 <rclc_executor_spin_some.part.0+0x268>
 800c7be:	2a01      	cmp	r2, #1
 800c7c0:	d1df      	bne.n	800c782 <rclc_executor_spin_some.part.0+0x27a>
 800c7c2:	f7ff fbcd 	bl	800bf60 <_rclc_execute.part.0>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d0db      	beq.n	800c782 <rclc_executor_spin_some.part.0+0x27a>
 800c7ca:	4607      	mov	r7, r0
 800c7cc:	e796      	b.n	800c6fc <rclc_executor_spin_some.part.0+0x1f4>
 800c7ce:	6843      	ldr	r3, [r0, #4]
 800c7d0:	6a1a      	ldr	r2, [r3, #32]
 800c7d2:	2a00      	cmp	r2, #0
 800c7d4:	d1f5      	bne.n	800c7c2 <rclc_executor_spin_some.part.0+0x2ba>
 800c7d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d0d1      	beq.n	800c782 <rclc_executor_spin_some.part.0+0x27a>
 800c7de:	e7f0      	b.n	800c7c2 <rclc_executor_spin_some.part.0+0x2ba>
 800c7e0:	6843      	ldr	r3, [r0, #4]
 800c7e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c7e4:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c7e8:	d1eb      	bne.n	800c7c2 <rclc_executor_spin_some.part.0+0x2ba>
 800c7ea:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c7ee:	2a00      	cmp	r2, #0
 800c7f0:	d1e7      	bne.n	800c7c2 <rclc_executor_spin_some.part.0+0x2ba>
 800c7f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d0c3      	beq.n	800c782 <rclc_executor_spin_some.part.0+0x27a>
 800c7fa:	e7e2      	b.n	800c7c2 <rclc_executor_spin_some.part.0+0x2ba>
 800c7fc:	270b      	movs	r7, #11
 800c7fe:	e77d      	b.n	800c6fc <rclc_executor_spin_some.part.0+0x1f4>
 800c800:	686a      	ldr	r2, [r5, #4]
 800c802:	e6e2      	b.n	800c5ca <rclc_executor_spin_some.part.0+0xc2>
 800c804:	686a      	ldr	r2, [r5, #4]
 800c806:	e7a2      	b.n	800c74e <rclc_executor_spin_some.part.0+0x246>
 800c808:	6842      	ldr	r2, [r0, #4]
 800c80a:	6a11      	ldr	r1, [r2, #32]
 800c80c:	2900      	cmp	r1, #0
 800c80e:	f47f af21 	bne.w	800c654 <rclc_executor_spin_some.part.0+0x14c>
 800c812:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800c816:	2a00      	cmp	r2, #0
 800c818:	f43f af0a 	beq.w	800c630 <rclc_executor_spin_some.part.0+0x128>
 800c81c:	e71a      	b.n	800c654 <rclc_executor_spin_some.part.0+0x14c>
 800c81e:	6842      	ldr	r2, [r0, #4]
 800c820:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800c822:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800c826:	f47f af15 	bne.w	800c654 <rclc_executor_spin_some.part.0+0x14c>
 800c82a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800c82e:	2900      	cmp	r1, #0
 800c830:	f47f af10 	bne.w	800c654 <rclc_executor_spin_some.part.0+0x14c>
 800c834:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800c838:	2a00      	cmp	r2, #0
 800c83a:	f43f aef9 	beq.w	800c630 <rclc_executor_spin_some.part.0+0x128>
 800c83e:	e709      	b.n	800c654 <rclc_executor_spin_some.part.0+0x14c>
 800c840:	686a      	ldr	r2, [r5, #4]
 800c842:	461c      	mov	r4, r3
 800c844:	e783      	b.n	800c74e <rclc_executor_spin_some.part.0+0x246>
 800c846:	686a      	ldr	r2, [r5, #4]
 800c848:	461c      	mov	r4, r3
 800c84a:	e6be      	b.n	800c5ca <rclc_executor_spin_some.part.0+0xc2>

0800c84c <rclc_executor_spin_some>:
 800c84c:	b190      	cbz	r0, 800c874 <rclc_executor_spin_some+0x28>
 800c84e:	b570      	push	{r4, r5, r6, lr}
 800c850:	4604      	mov	r4, r0
 800c852:	6800      	ldr	r0, [r0, #0]
 800c854:	4616      	mov	r6, r2
 800c856:	461d      	mov	r5, r3
 800c858:	f7fe f910 	bl	800aa7c <rcl_context_is_valid>
 800c85c:	b130      	cbz	r0, 800c86c <rclc_executor_spin_some+0x20>
 800c85e:	4632      	mov	r2, r6
 800c860:	462b      	mov	r3, r5
 800c862:	4620      	mov	r0, r4
 800c864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c868:	f7ff be4e 	b.w	800c508 <rclc_executor_spin_some.part.0>
 800c86c:	f000 fa7c 	bl	800cd68 <rcutils_reset_error>
 800c870:	2001      	movs	r0, #1
 800c872:	bd70      	pop	{r4, r5, r6, pc}
 800c874:	200b      	movs	r0, #11
 800c876:	4770      	bx	lr

0800c878 <rclc_executor_handle_counters_zero_init>:
 800c878:	b130      	cbz	r0, 800c888 <rclc_executor_handle_counters_zero_init+0x10>
 800c87a:	b508      	push	{r3, lr}
 800c87c:	2220      	movs	r2, #32
 800c87e:	2100      	movs	r1, #0
 800c880:	f00b fd74 	bl	801836c <memset>
 800c884:	2000      	movs	r0, #0
 800c886:	bd08      	pop	{r3, pc}
 800c888:	200b      	movs	r0, #11
 800c88a:	4770      	bx	lr
 800c88c:	0000      	movs	r0, r0
	...

0800c890 <rclc_executor_handle_init>:
 800c890:	b168      	cbz	r0, 800c8ae <rclc_executor_handle_init+0x1e>
 800c892:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800c8b8 <rclc_executor_handle_init+0x28>
 800c896:	2300      	movs	r3, #0
 800c898:	220b      	movs	r2, #11
 800c89a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800c89e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800c8a2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800c8a6:	8002      	strh	r2, [r0, #0]
 800c8a8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	4770      	bx	lr
 800c8ae:	200b      	movs	r0, #11
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	f3af 8000 	nop.w
	...

0800c8c0 <rclc_support_init_with_options>:
 800c8c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8c4:	b083      	sub	sp, #12
 800c8c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c8c8:	b340      	cbz	r0, 800c91c <rclc_support_init_with_options+0x5c>
 800c8ca:	461d      	mov	r5, r3
 800c8cc:	b333      	cbz	r3, 800c91c <rclc_support_init_with_options+0x5c>
 800c8ce:	b32e      	cbz	r6, 800c91c <rclc_support_init_with_options+0x5c>
 800c8d0:	46e9      	mov	r9, sp
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	4648      	mov	r0, r9
 800c8d6:	460f      	mov	r7, r1
 800c8d8:	4690      	mov	r8, r2
 800c8da:	f7fe f8c5 	bl	800aa68 <rcl_get_zero_initialized_context>
 800c8de:	e899 0003 	ldmia.w	r9, {r0, r1}
 800c8e2:	462a      	mov	r2, r5
 800c8e4:	e884 0003 	stmia.w	r4, {r0, r1}
 800c8e8:	4623      	mov	r3, r4
 800c8ea:	4641      	mov	r1, r8
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	f007 f937 	bl	8013b60 <rcl_init>
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	b960      	cbnz	r0, 800c910 <rclc_support_init_with_options+0x50>
 800c8f6:	60a6      	str	r6, [r4, #8]
 800c8f8:	4632      	mov	r2, r6
 800c8fa:	f104 010c 	add.w	r1, r4, #12
 800c8fe:	2003      	movs	r0, #3
 800c900:	f007 fb84 	bl	801400c <rcl_clock_init>
 800c904:	4605      	mov	r5, r0
 800c906:	b918      	cbnz	r0, 800c910 <rclc_support_init_with_options+0x50>
 800c908:	4628      	mov	r0, r5
 800c90a:	b003      	add	sp, #12
 800c90c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c910:	f000 fa2a 	bl	800cd68 <rcutils_reset_error>
 800c914:	4628      	mov	r0, r5
 800c916:	b003      	add	sp, #12
 800c918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c91c:	250b      	movs	r5, #11
 800c91e:	4628      	mov	r0, r5
 800c920:	b003      	add	sp, #12
 800c922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c926:	bf00      	nop

0800c928 <rclc_support_fini>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	b320      	cbz	r0, 800c976 <rclc_support_fini+0x4e>
 800c92c:	4604      	mov	r4, r0
 800c92e:	300c      	adds	r0, #12
 800c930:	f007 fbe4 	bl	80140fc <rcl_clock_fini>
 800c934:	4605      	mov	r5, r0
 800c936:	b948      	cbnz	r0, 800c94c <rclc_support_fini+0x24>
 800c938:	4620      	mov	r0, r4
 800c93a:	f007 f9ff 	bl	8013d3c <rcl_shutdown>
 800c93e:	b968      	cbnz	r0, 800c95c <rclc_support_fini+0x34>
 800c940:	4620      	mov	r0, r4
 800c942:	f7fe f907 	bl	800ab54 <rcl_context_fini>
 800c946:	b988      	cbnz	r0, 800c96c <rclc_support_fini+0x44>
 800c948:	4628      	mov	r0, r5
 800c94a:	bd38      	pop	{r3, r4, r5, pc}
 800c94c:	f000 fa0c 	bl	800cd68 <rcutils_reset_error>
 800c950:	4620      	mov	r0, r4
 800c952:	2501      	movs	r5, #1
 800c954:	f007 f9f2 	bl	8013d3c <rcl_shutdown>
 800c958:	2800      	cmp	r0, #0
 800c95a:	d0f1      	beq.n	800c940 <rclc_support_fini+0x18>
 800c95c:	f000 fa04 	bl	800cd68 <rcutils_reset_error>
 800c960:	4620      	mov	r0, r4
 800c962:	2501      	movs	r5, #1
 800c964:	f7fe f8f6 	bl	800ab54 <rcl_context_fini>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d0ed      	beq.n	800c948 <rclc_support_fini+0x20>
 800c96c:	2501      	movs	r5, #1
 800c96e:	f000 f9fb 	bl	800cd68 <rcutils_reset_error>
 800c972:	4628      	mov	r0, r5
 800c974:	bd38      	pop	{r3, r4, r5, pc}
 800c976:	250b      	movs	r5, #11
 800c978:	4628      	mov	r0, r5
 800c97a:	bd38      	pop	{r3, r4, r5, pc}

0800c97c <rclc_node_init_default>:
 800c97c:	b3b8      	cbz	r0, 800c9ee <rclc_node_init_default+0x72>
 800c97e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c982:	460d      	mov	r5, r1
 800c984:	b0a1      	sub	sp, #132	@ 0x84
 800c986:	b329      	cbz	r1, 800c9d4 <rclc_node_init_default+0x58>
 800c988:	4616      	mov	r6, r2
 800c98a:	b31a      	cbz	r2, 800c9d4 <rclc_node_init_default+0x58>
 800c98c:	461f      	mov	r7, r3
 800c98e:	b30b      	cbz	r3, 800c9d4 <rclc_node_init_default+0x58>
 800c990:	f10d 0810 	add.w	r8, sp, #16
 800c994:	4604      	mov	r4, r0
 800c996:	4640      	mov	r0, r8
 800c998:	f7fe f9f6 	bl	800ad88 <rcl_get_zero_initialized_node>
 800c99c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c9a0:	f10d 0918 	add.w	r9, sp, #24
 800c9a4:	e884 0003 	stmia.w	r4, {r0, r1}
 800c9a8:	4648      	mov	r0, r9
 800c9aa:	f7fe fb97 	bl	800b0dc <rcl_node_get_default_options>
 800c9ae:	4640      	mov	r0, r8
 800c9b0:	f7fe f9ea 	bl	800ad88 <rcl_get_zero_initialized_node>
 800c9b4:	f8cd 9000 	str.w	r9, [sp]
 800c9b8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c9bc:	463b      	mov	r3, r7
 800c9be:	e884 0003 	stmia.w	r4, {r0, r1}
 800c9c2:	4632      	mov	r2, r6
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f7fe f9e8 	bl	800ad9c <rcl_node_init>
 800c9cc:	b930      	cbnz	r0, 800c9dc <rclc_node_init_default+0x60>
 800c9ce:	b021      	add	sp, #132	@ 0x84
 800c9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9d4:	200b      	movs	r0, #11
 800c9d6:	b021      	add	sp, #132	@ 0x84
 800c9d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9dc:	9003      	str	r0, [sp, #12]
 800c9de:	f000 f9c3 	bl	800cd68 <rcutils_reset_error>
 800c9e2:	f000 f9c1 	bl	800cd68 <rcutils_reset_error>
 800c9e6:	9803      	ldr	r0, [sp, #12]
 800c9e8:	b021      	add	sp, #132	@ 0x84
 800c9ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9ee:	200b      	movs	r0, #11
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop

0800c9f4 <rclc_publisher_init_default>:
 800c9f4:	b368      	cbz	r0, 800ca52 <rclc_publisher_init_default+0x5e>
 800c9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9fa:	460d      	mov	r5, r1
 800c9fc:	b0a0      	sub	sp, #128	@ 0x80
 800c9fe:	b321      	cbz	r1, 800ca4a <rclc_publisher_init_default+0x56>
 800ca00:	4616      	mov	r6, r2
 800ca02:	b312      	cbz	r2, 800ca4a <rclc_publisher_init_default+0x56>
 800ca04:	461f      	mov	r7, r3
 800ca06:	b303      	cbz	r3, 800ca4a <rclc_publisher_init_default+0x56>
 800ca08:	4604      	mov	r4, r0
 800ca0a:	f7fe fb93 	bl	800b134 <rcl_get_zero_initialized_publisher>
 800ca0e:	f10d 0810 	add.w	r8, sp, #16
 800ca12:	6020      	str	r0, [r4, #0]
 800ca14:	4640      	mov	r0, r8
 800ca16:	f7fe fc55 	bl	800b2c4 <rcl_publisher_get_default_options>
 800ca1a:	490f      	ldr	r1, [pc, #60]	@ (800ca58 <rclc_publisher_init_default+0x64>)
 800ca1c:	2250      	movs	r2, #80	@ 0x50
 800ca1e:	4640      	mov	r0, r8
 800ca20:	f00b fdcb 	bl	80185ba <memcpy>
 800ca24:	f8cd 8000 	str.w	r8, [sp]
 800ca28:	463b      	mov	r3, r7
 800ca2a:	4632      	mov	r2, r6
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f7fe fb86 	bl	800b140 <rcl_publisher_init>
 800ca34:	b910      	cbnz	r0, 800ca3c <rclc_publisher_init_default+0x48>
 800ca36:	b020      	add	sp, #128	@ 0x80
 800ca38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca3c:	9003      	str	r0, [sp, #12]
 800ca3e:	f000 f993 	bl	800cd68 <rcutils_reset_error>
 800ca42:	9803      	ldr	r0, [sp, #12]
 800ca44:	b020      	add	sp, #128	@ 0x80
 800ca46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca4a:	200b      	movs	r0, #11
 800ca4c:	b020      	add	sp, #128	@ 0x80
 800ca4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca52:	200b      	movs	r0, #11
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop
 800ca58:	08019b00 	.word	0x08019b00

0800ca5c <rclc_subscription_init_default>:
 800ca5c:	b368      	cbz	r0, 800caba <rclc_subscription_init_default+0x5e>
 800ca5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca62:	460d      	mov	r5, r1
 800ca64:	b0a0      	sub	sp, #128	@ 0x80
 800ca66:	b321      	cbz	r1, 800cab2 <rclc_subscription_init_default+0x56>
 800ca68:	4616      	mov	r6, r2
 800ca6a:	b312      	cbz	r2, 800cab2 <rclc_subscription_init_default+0x56>
 800ca6c:	461f      	mov	r7, r3
 800ca6e:	b303      	cbz	r3, 800cab2 <rclc_subscription_init_default+0x56>
 800ca70:	4604      	mov	r4, r0
 800ca72:	f7fe fca1 	bl	800b3b8 <rcl_get_zero_initialized_subscription>
 800ca76:	f10d 0810 	add.w	r8, sp, #16
 800ca7a:	6020      	str	r0, [r4, #0]
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	f7fe fd9d 	bl	800b5bc <rcl_subscription_get_default_options>
 800ca82:	490f      	ldr	r1, [pc, #60]	@ (800cac0 <rclc_subscription_init_default+0x64>)
 800ca84:	2250      	movs	r2, #80	@ 0x50
 800ca86:	4640      	mov	r0, r8
 800ca88:	f00b fd97 	bl	80185ba <memcpy>
 800ca8c:	f8cd 8000 	str.w	r8, [sp]
 800ca90:	463b      	mov	r3, r7
 800ca92:	4632      	mov	r2, r6
 800ca94:	4629      	mov	r1, r5
 800ca96:	4620      	mov	r0, r4
 800ca98:	f7fe fc94 	bl	800b3c4 <rcl_subscription_init>
 800ca9c:	b910      	cbnz	r0, 800caa4 <rclc_subscription_init_default+0x48>
 800ca9e:	b020      	add	sp, #128	@ 0x80
 800caa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa4:	9003      	str	r0, [sp, #12]
 800caa6:	f000 f95f 	bl	800cd68 <rcutils_reset_error>
 800caaa:	9803      	ldr	r0, [sp, #12]
 800caac:	b020      	add	sp, #128	@ 0x80
 800caae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab2:	200b      	movs	r0, #11
 800cab4:	b020      	add	sp, #128	@ 0x80
 800cab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caba:	200b      	movs	r0, #11
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop
 800cac0:	08019b50 	.word	0x08019b50

0800cac4 <rclc_timer_init_default>:
 800cac4:	b360      	cbz	r0, 800cb20 <rclc_timer_init_default+0x5c>
 800cac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caca:	460e      	mov	r6, r1
 800cacc:	b08a      	sub	sp, #40	@ 0x28
 800cace:	b319      	cbz	r1, 800cb18 <rclc_timer_init_default+0x54>
 800cad0:	4690      	mov	r8, r2
 800cad2:	461f      	mov	r7, r3
 800cad4:	4605      	mov	r5, r0
 800cad6:	f7fe fea1 	bl	800b81c <rcl_get_zero_initialized_timer>
 800cada:	68b4      	ldr	r4, [r6, #8]
 800cadc:	6028      	str	r0, [r5, #0]
 800cade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cae0:	f10d 0c0c 	add.w	ip, sp, #12
 800cae4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cae8:	6823      	ldr	r3, [r4, #0]
 800caea:	f8cc 3000 	str.w	r3, [ip]
 800caee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800caf0:	9302      	str	r3, [sp, #8]
 800caf2:	e9cd 8700 	strd	r8, r7, [sp]
 800caf6:	4628      	mov	r0, r5
 800caf8:	4632      	mov	r2, r6
 800cafa:	f106 010c 	add.w	r1, r6, #12
 800cafe:	f7fe fe93 	bl	800b828 <rcl_timer_init>
 800cb02:	b910      	cbnz	r0, 800cb0a <rclc_timer_init_default+0x46>
 800cb04:	b00a      	add	sp, #40	@ 0x28
 800cb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb0a:	9009      	str	r0, [sp, #36]	@ 0x24
 800cb0c:	f000 f92c 	bl	800cd68 <rcutils_reset_error>
 800cb10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb12:	b00a      	add	sp, #40	@ 0x28
 800cb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb18:	200b      	movs	r0, #11
 800cb1a:	b00a      	add	sp, #40	@ 0x28
 800cb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb20:	200b      	movs	r0, #11
 800cb22:	4770      	bx	lr

0800cb24 <__default_zero_allocate>:
 800cb24:	f00b b832 	b.w	8017b8c <calloc>

0800cb28 <__default_reallocate>:
 800cb28:	f00b b9be 	b.w	8017ea8 <realloc>

0800cb2c <__default_deallocate>:
 800cb2c:	f00b b89a 	b.w	8017c64 <free>

0800cb30 <__default_allocate>:
 800cb30:	f00b b890 	b.w	8017c54 <malloc>

0800cb34 <rcutils_get_zero_initialized_allocator>:
 800cb34:	b510      	push	{r4, lr}
 800cb36:	4c05      	ldr	r4, [pc, #20]	@ (800cb4c <rcutils_get_zero_initialized_allocator+0x18>)
 800cb38:	4686      	mov	lr, r0
 800cb3a:	4684      	mov	ip, r0
 800cb3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb42:	6823      	ldr	r3, [r4, #0]
 800cb44:	f8cc 3000 	str.w	r3, [ip]
 800cb48:	4670      	mov	r0, lr
 800cb4a:	bd10      	pop	{r4, pc}
 800cb4c:	08019ba0 	.word	0x08019ba0

0800cb50 <rcutils_set_default_allocator>:
 800cb50:	b1a8      	cbz	r0, 800cb7e <rcutils_set_default_allocator+0x2e>
 800cb52:	6802      	ldr	r2, [r0, #0]
 800cb54:	b1a2      	cbz	r2, 800cb80 <rcutils_set_default_allocator+0x30>
 800cb56:	6841      	ldr	r1, [r0, #4]
 800cb58:	b1a1      	cbz	r1, 800cb84 <rcutils_set_default_allocator+0x34>
 800cb5a:	b410      	push	{r4}
 800cb5c:	68c4      	ldr	r4, [r0, #12]
 800cb5e:	b164      	cbz	r4, 800cb7a <rcutils_set_default_allocator+0x2a>
 800cb60:	6880      	ldr	r0, [r0, #8]
 800cb62:	b138      	cbz	r0, 800cb74 <rcutils_set_default_allocator+0x24>
 800cb64:	4b08      	ldr	r3, [pc, #32]	@ (800cb88 <rcutils_set_default_allocator+0x38>)
 800cb66:	601a      	str	r2, [r3, #0]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800cb6e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800cb72:	2001      	movs	r0, #1
 800cb74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb78:	4770      	bx	lr
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	e7fa      	b.n	800cb74 <rcutils_set_default_allocator+0x24>
 800cb7e:	4770      	bx	lr
 800cb80:	4610      	mov	r0, r2
 800cb82:	4770      	bx	lr
 800cb84:	4608      	mov	r0, r1
 800cb86:	4770      	bx	lr
 800cb88:	2000002c 	.word	0x2000002c

0800cb8c <rcutils_get_default_allocator>:
 800cb8c:	b510      	push	{r4, lr}
 800cb8e:	4c05      	ldr	r4, [pc, #20]	@ (800cba4 <rcutils_get_default_allocator+0x18>)
 800cb90:	4686      	mov	lr, r0
 800cb92:	4684      	mov	ip, r0
 800cb94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	f8cc 3000 	str.w	r3, [ip]
 800cba0:	4670      	mov	r0, lr
 800cba2:	bd10      	pop	{r4, pc}
 800cba4:	2000002c 	.word	0x2000002c

0800cba8 <rcutils_allocator_is_valid>:
 800cba8:	b158      	cbz	r0, 800cbc2 <rcutils_allocator_is_valid+0x1a>
 800cbaa:	6803      	ldr	r3, [r0, #0]
 800cbac:	b143      	cbz	r3, 800cbc0 <rcutils_allocator_is_valid+0x18>
 800cbae:	6843      	ldr	r3, [r0, #4]
 800cbb0:	b133      	cbz	r3, 800cbc0 <rcutils_allocator_is_valid+0x18>
 800cbb2:	68c3      	ldr	r3, [r0, #12]
 800cbb4:	b123      	cbz	r3, 800cbc0 <rcutils_allocator_is_valid+0x18>
 800cbb6:	6880      	ldr	r0, [r0, #8]
 800cbb8:	3800      	subs	r0, #0
 800cbba:	bf18      	it	ne
 800cbbc:	2001      	movne	r0, #1
 800cbbe:	4770      	bx	lr
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	4770      	bx	lr

0800cbc4 <__atomic_load_8>:
 800cbc4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800cbc8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800cbcc:	4a15      	ldr	r2, [pc, #84]	@ (800cc24 <__atomic_load_8+0x60>)
 800cbce:	4b16      	ldr	r3, [pc, #88]	@ (800cc28 <__atomic_load_8+0x64>)
 800cbd0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800cbd4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800cbd8:	fb02 f101 	mul.w	r1, r2, r1
 800cbdc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800cbe0:	fba3 2301 	umull	r2, r3, r3, r1
 800cbe4:	091b      	lsrs	r3, r3, #4
 800cbe6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800cbea:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800cbee:	b4d0      	push	{r4, r6, r7}
 800cbf0:	4c0e      	ldr	r4, [pc, #56]	@ (800cc2c <__atomic_load_8+0x68>)
 800cbf2:	1ac9      	subs	r1, r1, r3
 800cbf4:	1862      	adds	r2, r4, r1
 800cbf6:	f04f 0c01 	mov.w	ip, #1
 800cbfa:	e8d2 3f4f 	ldrexb	r3, [r2]
 800cbfe:	e8c2 cf46 	strexb	r6, ip, [r2]
 800cc02:	2e00      	cmp	r6, #0
 800cc04:	d1f9      	bne.n	800cbfa <__atomic_load_8+0x36>
 800cc06:	f3bf 8f5b 	dmb	ish
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1f4      	bne.n	800cbfa <__atomic_load_8+0x36>
 800cc10:	e9d0 6700 	ldrd	r6, r7, [r0]
 800cc14:	f3bf 8f5b 	dmb	ish
 800cc18:	5463      	strb	r3, [r4, r1]
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	bcd0      	pop	{r4, r6, r7}
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	27d4eb2d 	.word	0x27d4eb2d
 800cc28:	b21642c9 	.word	0xb21642c9
 800cc2c:	2000c4a8 	.word	0x2000c4a8

0800cc30 <__atomic_store_8>:
 800cc30:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800cc34:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800cc38:	b570      	push	{r4, r5, r6, lr}
 800cc3a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800cc3e:	4c14      	ldr	r4, [pc, #80]	@ (800cc90 <__atomic_store_8+0x60>)
 800cc40:	4d14      	ldr	r5, [pc, #80]	@ (800cc94 <__atomic_store_8+0x64>)
 800cc42:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800cc46:	fb04 f101 	mul.w	r1, r4, r1
 800cc4a:	4c13      	ldr	r4, [pc, #76]	@ (800cc98 <__atomic_store_8+0x68>)
 800cc4c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800cc50:	fba4 4e01 	umull	r4, lr, r4, r1
 800cc54:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800cc58:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800cc5c:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800cc60:	eba1 0e0e 	sub.w	lr, r1, lr
 800cc64:	eb05 0c0e 	add.w	ip, r5, lr
 800cc68:	f04f 0401 	mov.w	r4, #1
 800cc6c:	e8dc 1f4f 	ldrexb	r1, [ip]
 800cc70:	e8cc 4f46 	strexb	r6, r4, [ip]
 800cc74:	2e00      	cmp	r6, #0
 800cc76:	d1f9      	bne.n	800cc6c <__atomic_store_8+0x3c>
 800cc78:	f3bf 8f5b 	dmb	ish
 800cc7c:	b2c9      	uxtb	r1, r1
 800cc7e:	2900      	cmp	r1, #0
 800cc80:	d1f4      	bne.n	800cc6c <__atomic_store_8+0x3c>
 800cc82:	e9c0 2300 	strd	r2, r3, [r0]
 800cc86:	f3bf 8f5b 	dmb	ish
 800cc8a:	f805 100e 	strb.w	r1, [r5, lr]
 800cc8e:	bd70      	pop	{r4, r5, r6, pc}
 800cc90:	27d4eb2d 	.word	0x27d4eb2d
 800cc94:	2000c4a8 	.word	0x2000c4a8
 800cc98:	b21642c9 	.word	0xb21642c9

0800cc9c <__atomic_exchange_8>:
 800cc9c:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800cca0:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 800cca4:	4916      	ldr	r1, [pc, #88]	@ (800cd00 <__atomic_exchange_8+0x64>)
 800cca6:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800ccaa:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800ccae:	fb01 fc0c 	mul.w	ip, r1, ip
 800ccb2:	4914      	ldr	r1, [pc, #80]	@ (800cd04 <__atomic_exchange_8+0x68>)
 800ccb4:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	4605      	mov	r5, r0
 800ccbc:	fba1 010c 	umull	r0, r1, r1, ip
 800ccc0:	0909      	lsrs	r1, r1, #4
 800ccc2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800ccc6:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800ccca:	4e0f      	ldr	r6, [pc, #60]	@ (800cd08 <__atomic_exchange_8+0x6c>)
 800cccc:	ebac 0c01 	sub.w	ip, ip, r1
 800ccd0:	eb06 010c 	add.w	r1, r6, ip
 800ccd4:	f04f 0e01 	mov.w	lr, #1
 800ccd8:	e8d1 4f4f 	ldrexb	r4, [r1]
 800ccdc:	e8c1 ef40 	strexb	r0, lr, [r1]
 800cce0:	2800      	cmp	r0, #0
 800cce2:	d1f9      	bne.n	800ccd8 <__atomic_exchange_8+0x3c>
 800cce4:	f3bf 8f5b 	dmb	ish
 800cce8:	b2e4      	uxtb	r4, r4
 800ccea:	2c00      	cmp	r4, #0
 800ccec:	d1f4      	bne.n	800ccd8 <__atomic_exchange_8+0x3c>
 800ccee:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ccf2:	e9c5 2300 	strd	r2, r3, [r5]
 800ccf6:	f3bf 8f5b 	dmb	ish
 800ccfa:	f806 400c 	strb.w	r4, [r6, ip]
 800ccfe:	bd70      	pop	{r4, r5, r6, pc}
 800cd00:	27d4eb2d 	.word	0x27d4eb2d
 800cd04:	b21642c9 	.word	0xb21642c9
 800cd08:	2000c4a8 	.word	0x2000c4a8

0800cd0c <rcutils_get_env>:
 800cd0c:	b168      	cbz	r0, 800cd2a <rcutils_get_env+0x1e>
 800cd0e:	b510      	push	{r4, lr}
 800cd10:	460c      	mov	r4, r1
 800cd12:	b129      	cbz	r1, 800cd20 <rcutils_get_env+0x14>
 800cd14:	f00a ff56 	bl	8017bc4 <getenv>
 800cd18:	b120      	cbz	r0, 800cd24 <rcutils_get_env+0x18>
 800cd1a:	6020      	str	r0, [r4, #0]
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	bd10      	pop	{r4, pc}
 800cd20:	4803      	ldr	r0, [pc, #12]	@ (800cd30 <rcutils_get_env+0x24>)
 800cd22:	bd10      	pop	{r4, pc}
 800cd24:	4b03      	ldr	r3, [pc, #12]	@ (800cd34 <rcutils_get_env+0x28>)
 800cd26:	6023      	str	r3, [r4, #0]
 800cd28:	bd10      	pop	{r4, pc}
 800cd2a:	4803      	ldr	r0, [pc, #12]	@ (800cd38 <rcutils_get_env+0x2c>)
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	080194ec 	.word	0x080194ec
 800cd34:	08019614 	.word	0x08019614
 800cd38:	080194d0 	.word	0x080194d0

0800cd3c <rcutils_get_error_string>:
 800cd3c:	4b06      	ldr	r3, [pc, #24]	@ (800cd58 <rcutils_get_error_string+0x1c>)
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	b13b      	cbz	r3, 800cd52 <rcutils_get_error_string+0x16>
 800cd42:	4b06      	ldr	r3, [pc, #24]	@ (800cd5c <rcutils_get_error_string+0x20>)
 800cd44:	781a      	ldrb	r2, [r3, #0]
 800cd46:	b90a      	cbnz	r2, 800cd4c <rcutils_get_error_string+0x10>
 800cd48:	2201      	movs	r2, #1
 800cd4a:	701a      	strb	r2, [r3, #0]
 800cd4c:	4b04      	ldr	r3, [pc, #16]	@ (800cd60 <rcutils_get_error_string+0x24>)
 800cd4e:	7818      	ldrb	r0, [r3, #0]
 800cd50:	4770      	bx	lr
 800cd52:	4b04      	ldr	r3, [pc, #16]	@ (800cd64 <rcutils_get_error_string+0x28>)
 800cd54:	7818      	ldrb	r0, [r3, #0]
 800cd56:	4770      	bx	lr
 800cd58:	2000c4bf 	.word	0x2000c4bf
 800cd5c:	2000c4d1 	.word	0x2000c4d1
 800cd60:	2000c4d0 	.word	0x2000c4d0
 800cd64:	08019508 	.word	0x08019508

0800cd68 <rcutils_reset_error>:
 800cd68:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800cd88 <rcutils_reset_error+0x20>
 800cd6c:	4a08      	ldr	r2, [pc, #32]	@ (800cd90 <rcutils_reset_error+0x28>)
 800cd6e:	4809      	ldr	r0, [pc, #36]	@ (800cd94 <rcutils_reset_error+0x2c>)
 800cd70:	4909      	ldr	r1, [pc, #36]	@ (800cd98 <rcutils_reset_error+0x30>)
 800cd72:	2300      	movs	r3, #0
 800cd74:	8013      	strh	r3, [r2, #0]
 800cd76:	ed82 7b02 	vstr	d7, [r2, #8]
 800cd7a:	4a08      	ldr	r2, [pc, #32]	@ (800cd9c <rcutils_reset_error+0x34>)
 800cd7c:	7003      	strb	r3, [r0, #0]
 800cd7e:	700b      	strb	r3, [r1, #0]
 800cd80:	7013      	strb	r3, [r2, #0]
 800cd82:	4770      	bx	lr
 800cd84:	f3af 8000 	nop.w
	...
 800cd90:	2000c4c0 	.word	0x2000c4c0
 800cd94:	2000c4d1 	.word	0x2000c4d1
 800cd98:	2000c4d0 	.word	0x2000c4d0
 800cd9c:	2000c4bf 	.word	0x2000c4bf

0800cda0 <rcutils_format_string_limit>:
 800cda0:	b40f      	push	{r0, r1, r2, r3}
 800cda2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cda4:	b083      	sub	sp, #12
 800cda6:	ac08      	add	r4, sp, #32
 800cda8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800cdaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cdae:	b34e      	cbz	r6, 800ce04 <rcutils_format_string_limit+0x64>
 800cdb0:	a808      	add	r0, sp, #32
 800cdb2:	f7ff fef9 	bl	800cba8 <rcutils_allocator_is_valid>
 800cdb6:	b328      	cbz	r0, 800ce04 <rcutils_format_string_limit+0x64>
 800cdb8:	2100      	movs	r1, #0
 800cdba:	ab0f      	add	r3, sp, #60	@ 0x3c
 800cdbc:	4632      	mov	r2, r6
 800cdbe:	4608      	mov	r0, r1
 800cdc0:	e9cd 3300 	strd	r3, r3, [sp]
 800cdc4:	f000 f8f4 	bl	800cfb0 <rcutils_vsnprintf>
 800cdc8:	1c43      	adds	r3, r0, #1
 800cdca:	4605      	mov	r5, r0
 800cdcc:	d01a      	beq.n	800ce04 <rcutils_format_string_limit+0x64>
 800cdce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdd0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cdd2:	1c47      	adds	r7, r0, #1
 800cdd4:	429f      	cmp	r7, r3
 800cdd6:	bf84      	itt	hi
 800cdd8:	461f      	movhi	r7, r3
 800cdda:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800cdde:	4638      	mov	r0, r7
 800cde0:	9b08      	ldr	r3, [sp, #32]
 800cde2:	4798      	blx	r3
 800cde4:	4604      	mov	r4, r0
 800cde6:	b168      	cbz	r0, 800ce04 <rcutils_format_string_limit+0x64>
 800cde8:	9b01      	ldr	r3, [sp, #4]
 800cdea:	4632      	mov	r2, r6
 800cdec:	4639      	mov	r1, r7
 800cdee:	f000 f8df 	bl	800cfb0 <rcutils_vsnprintf>
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	db02      	blt.n	800cdfc <rcutils_format_string_limit+0x5c>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	5563      	strb	r3, [r4, r5]
 800cdfa:	e004      	b.n	800ce06 <rcutils_format_string_limit+0x66>
 800cdfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdfe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ce00:	4620      	mov	r0, r4
 800ce02:	4798      	blx	r3
 800ce04:	2400      	movs	r4, #0
 800ce06:	4620      	mov	r0, r4
 800ce08:	b003      	add	sp, #12
 800ce0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ce0e:	b004      	add	sp, #16
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop

0800ce14 <rcutils_repl_str>:
 800ce14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce18:	ed2d 8b02 	vpush	{d8}
 800ce1c:	b087      	sub	sp, #28
 800ce1e:	4680      	mov	r8, r0
 800ce20:	4608      	mov	r0, r1
 800ce22:	f8cd 8004 	str.w	r8, [sp, #4]
 800ce26:	ee08 2a10 	vmov	s16, r2
 800ce2a:	468a      	mov	sl, r1
 800ce2c:	4699      	mov	r9, r3
 800ce2e:	f7f3 f9f9 	bl	8000224 <strlen>
 800ce32:	2600      	movs	r6, #0
 800ce34:	4647      	mov	r7, r8
 800ce36:	9002      	str	r0, [sp, #8]
 800ce38:	46b3      	mov	fp, r6
 800ce3a:	2510      	movs	r5, #16
 800ce3c:	46b0      	mov	r8, r6
 800ce3e:	e01d      	b.n	800ce7c <rcutils_repl_str+0x68>
 800ce40:	f10b 0b01 	add.w	fp, fp, #1
 800ce44:	455e      	cmp	r6, fp
 800ce46:	d211      	bcs.n	800ce6c <rcutils_repl_str+0x58>
 800ce48:	442e      	add	r6, r5
 800ce4a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ce4e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ce52:	00b1      	lsls	r1, r6, #2
 800ce54:	4798      	blx	r3
 800ce56:	2800      	cmp	r0, #0
 800ce58:	f000 8088 	beq.w	800cf6c <rcutils_repl_str+0x158>
 800ce5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce60:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800ce64:	4680      	mov	r8, r0
 800ce66:	bf28      	it	cs
 800ce68:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800ce6c:	9a01      	ldr	r2, [sp, #4]
 800ce6e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800ce72:	1aa2      	subs	r2, r4, r2
 800ce74:	f843 2c04 	str.w	r2, [r3, #-4]
 800ce78:	9b02      	ldr	r3, [sp, #8]
 800ce7a:	18e7      	adds	r7, r4, r3
 800ce7c:	4651      	mov	r1, sl
 800ce7e:	4638      	mov	r0, r7
 800ce80:	f00b fa9b 	bl	80183ba <strstr>
 800ce84:	4604      	mov	r4, r0
 800ce86:	4640      	mov	r0, r8
 800ce88:	2c00      	cmp	r4, #0
 800ce8a:	d1d9      	bne.n	800ce40 <rcutils_repl_str+0x2c>
 800ce8c:	46b8      	mov	r8, r7
 800ce8e:	4607      	mov	r7, r0
 800ce90:	4640      	mov	r0, r8
 800ce92:	f7f3 f9c7 	bl	8000224 <strlen>
 800ce96:	9b01      	ldr	r3, [sp, #4]
 800ce98:	eba8 0303 	sub.w	r3, r8, r3
 800ce9c:	181c      	adds	r4, r3, r0
 800ce9e:	9404      	str	r4, [sp, #16]
 800cea0:	f1bb 0f00 	cmp.w	fp, #0
 800cea4:	d04a      	beq.n	800cf3c <rcutils_repl_str+0x128>
 800cea6:	ee18 0a10 	vmov	r0, s16
 800ceaa:	f7f3 f9bb 	bl	8000224 <strlen>
 800ceae:	9b02      	ldr	r3, [sp, #8]
 800ceb0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ceb4:	1ac3      	subs	r3, r0, r3
 800ceb6:	fb0b 4303 	mla	r3, fp, r3, r4
 800ceba:	461a      	mov	r2, r3
 800cebc:	9305      	str	r3, [sp, #20]
 800cebe:	4606      	mov	r6, r0
 800cec0:	f8d9 3000 	ldr.w	r3, [r9]
 800cec4:	1c50      	adds	r0, r2, #1
 800cec6:	4798      	blx	r3
 800cec8:	9003      	str	r0, [sp, #12]
 800ceca:	2800      	cmp	r0, #0
 800cecc:	d04f      	beq.n	800cf6e <rcutils_repl_str+0x15a>
 800cece:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	4641      	mov	r1, r8
 800ced6:	f00b fb70 	bl	80185ba <memcpy>
 800ceda:	683d      	ldr	r5, [r7, #0]
 800cedc:	9b03      	ldr	r3, [sp, #12]
 800cede:	9701      	str	r7, [sp, #4]
 800cee0:	46ba      	mov	sl, r7
 800cee2:	441d      	add	r5, r3
 800cee4:	9f02      	ldr	r7, [sp, #8]
 800cee6:	f8cd 9008 	str.w	r9, [sp, #8]
 800ceea:	2401      	movs	r4, #1
 800ceec:	46d1      	mov	r9, sl
 800ceee:	ee18 aa10 	vmov	sl, s16
 800cef2:	e00a      	b.n	800cf0a <rcutils_repl_str+0xf6>
 800cef4:	f8d9 5000 	ldr.w	r5, [r9]
 800cef8:	1aaa      	subs	r2, r5, r2
 800cefa:	1885      	adds	r5, r0, r2
 800cefc:	f00b fb5d 	bl	80185ba <memcpy>
 800cf00:	45a3      	cmp	fp, r4
 800cf02:	f104 0201 	add.w	r2, r4, #1
 800cf06:	d935      	bls.n	800cf74 <rcutils_repl_str+0x160>
 800cf08:	4614      	mov	r4, r2
 800cf0a:	4632      	mov	r2, r6
 800cf0c:	4651      	mov	r1, sl
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f00b fb53 	bl	80185ba <memcpy>
 800cf14:	f859 2b04 	ldr.w	r2, [r9], #4
 800cf18:	45a3      	cmp	fp, r4
 800cf1a:	443a      	add	r2, r7
 800cf1c:	eb05 0006 	add.w	r0, r5, r6
 800cf20:	eb08 0102 	add.w	r1, r8, r2
 800cf24:	d1e6      	bne.n	800cef4 <rcutils_repl_str+0xe0>
 800cf26:	9b04      	ldr	r3, [sp, #16]
 800cf28:	1a9a      	subs	r2, r3, r2
 800cf2a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800cf2e:	f00b fb44 	bl	80185ba <memcpy>
 800cf32:	9a03      	ldr	r2, [sp, #12]
 800cf34:	9905      	ldr	r1, [sp, #20]
 800cf36:	2300      	movs	r3, #0
 800cf38:	5453      	strb	r3, [r2, r1]
 800cf3a:	e00b      	b.n	800cf54 <rcutils_repl_str+0x140>
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f8d9 3000 	ldr.w	r3, [r9]
 800cf42:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800cf46:	3001      	adds	r0, #1
 800cf48:	4798      	blx	r3
 800cf4a:	9003      	str	r0, [sp, #12]
 800cf4c:	b110      	cbz	r0, 800cf54 <rcutils_repl_str+0x140>
 800cf4e:	9901      	ldr	r1, [sp, #4]
 800cf50:	f00b fb2b 	bl	80185aa <strcpy>
 800cf54:	4638      	mov	r0, r7
 800cf56:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cf5a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800cf5e:	4798      	blx	r3
 800cf60:	9803      	ldr	r0, [sp, #12]
 800cf62:	b007      	add	sp, #28
 800cf64:	ecbd 8b02 	vpop	{d8}
 800cf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6c:	4647      	mov	r7, r8
 800cf6e:	2300      	movs	r3, #0
 800cf70:	9303      	str	r3, [sp, #12]
 800cf72:	e7ef      	b.n	800cf54 <rcutils_repl_str+0x140>
 800cf74:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800cf78:	e7db      	b.n	800cf32 <rcutils_repl_str+0x11e>
 800cf7a:	bf00      	nop

0800cf7c <rcutils_snprintf>:
 800cf7c:	b40c      	push	{r2, r3}
 800cf7e:	b530      	push	{r4, r5, lr}
 800cf80:	b083      	sub	sp, #12
 800cf82:	ab06      	add	r3, sp, #24
 800cf84:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf88:	9301      	str	r3, [sp, #4]
 800cf8a:	b152      	cbz	r2, 800cfa2 <rcutils_snprintf+0x26>
 800cf8c:	b138      	cbz	r0, 800cf9e <rcutils_snprintf+0x22>
 800cf8e:	b141      	cbz	r1, 800cfa2 <rcutils_snprintf+0x26>
 800cf90:	f00b f9b4 	bl	80182fc <vsniprintf>
 800cf94:	b003      	add	sp, #12
 800cf96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf9a:	b002      	add	sp, #8
 800cf9c:	4770      	bx	lr
 800cf9e:	2900      	cmp	r1, #0
 800cfa0:	d0f6      	beq.n	800cf90 <rcutils_snprintf+0x14>
 800cfa2:	f00b fad5 	bl	8018550 <__errno>
 800cfa6:	2316      	movs	r3, #22
 800cfa8:	6003      	str	r3, [r0, #0]
 800cfaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfae:	e7f1      	b.n	800cf94 <rcutils_snprintf+0x18>

0800cfb0 <rcutils_vsnprintf>:
 800cfb0:	b570      	push	{r4, r5, r6, lr}
 800cfb2:	b13a      	cbz	r2, 800cfc4 <rcutils_vsnprintf+0x14>
 800cfb4:	b120      	cbz	r0, 800cfc0 <rcutils_vsnprintf+0x10>
 800cfb6:	b129      	cbz	r1, 800cfc4 <rcutils_vsnprintf+0x14>
 800cfb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfbc:	f00b b99e 	b.w	80182fc <vsniprintf>
 800cfc0:	2900      	cmp	r1, #0
 800cfc2:	d0f9      	beq.n	800cfb8 <rcutils_vsnprintf+0x8>
 800cfc4:	f00b fac4 	bl	8018550 <__errno>
 800cfc8:	2316      	movs	r3, #22
 800cfca:	6003      	str	r3, [r0, #0]
 800cfcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfd0:	bd70      	pop	{r4, r5, r6, pc}
 800cfd2:	bf00      	nop

0800cfd4 <rcutils_strdup>:
 800cfd4:	b084      	sub	sp, #16
 800cfd6:	b570      	push	{r4, r5, r6, lr}
 800cfd8:	b082      	sub	sp, #8
 800cfda:	ac07      	add	r4, sp, #28
 800cfdc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	b1b0      	cbz	r0, 800d012 <rcutils_strdup+0x3e>
 800cfe4:	f7f3 f91e 	bl	8000224 <strlen>
 800cfe8:	1c42      	adds	r2, r0, #1
 800cfea:	9b07      	ldr	r3, [sp, #28]
 800cfec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cfee:	9201      	str	r2, [sp, #4]
 800cff0:	4606      	mov	r6, r0
 800cff2:	4610      	mov	r0, r2
 800cff4:	4798      	blx	r3
 800cff6:	4604      	mov	r4, r0
 800cff8:	b128      	cbz	r0, 800d006 <rcutils_strdup+0x32>
 800cffa:	9a01      	ldr	r2, [sp, #4]
 800cffc:	4629      	mov	r1, r5
 800cffe:	f00b fadc 	bl	80185ba <memcpy>
 800d002:	2300      	movs	r3, #0
 800d004:	55a3      	strb	r3, [r4, r6]
 800d006:	4620      	mov	r0, r4
 800d008:	b002      	add	sp, #8
 800d00a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d00e:	b004      	add	sp, #16
 800d010:	4770      	bx	lr
 800d012:	4604      	mov	r4, r0
 800d014:	e7f7      	b.n	800d006 <rcutils_strdup+0x32>
 800d016:	bf00      	nop

0800d018 <rcutils_strndup>:
 800d018:	b082      	sub	sp, #8
 800d01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01c:	ac06      	add	r4, sp, #24
 800d01e:	e884 000c 	stmia.w	r4, {r2, r3}
 800d022:	4605      	mov	r5, r0
 800d024:	b188      	cbz	r0, 800d04a <rcutils_strndup+0x32>
 800d026:	1c4f      	adds	r7, r1, #1
 800d028:	460e      	mov	r6, r1
 800d02a:	4638      	mov	r0, r7
 800d02c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d02e:	4790      	blx	r2
 800d030:	4604      	mov	r4, r0
 800d032:	b128      	cbz	r0, 800d040 <rcutils_strndup+0x28>
 800d034:	463a      	mov	r2, r7
 800d036:	4629      	mov	r1, r5
 800d038:	f00b fabf 	bl	80185ba <memcpy>
 800d03c:	2300      	movs	r3, #0
 800d03e:	55a3      	strb	r3, [r4, r6]
 800d040:	4620      	mov	r0, r4
 800d042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d046:	b002      	add	sp, #8
 800d048:	4770      	bx	lr
 800d04a:	4604      	mov	r4, r0
 800d04c:	e7f8      	b.n	800d040 <rcutils_strndup+0x28>
 800d04e:	bf00      	nop

0800d050 <rcutils_system_time_now>:
 800d050:	b308      	cbz	r0, 800d096 <rcutils_system_time_now+0x46>
 800d052:	b570      	push	{r4, r5, r6, lr}
 800d054:	b084      	sub	sp, #16
 800d056:	4604      	mov	r4, r0
 800d058:	4669      	mov	r1, sp
 800d05a:	2001      	movs	r0, #1
 800d05c:	f7f5 fe84 	bl	8002d68 <clock_gettime>
 800d060:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d064:	2d00      	cmp	r5, #0
 800d066:	db13      	blt.n	800d090 <rcutils_system_time_now+0x40>
 800d068:	9902      	ldr	r1, [sp, #8]
 800d06a:	2900      	cmp	r1, #0
 800d06c:	db0d      	blt.n	800d08a <rcutils_system_time_now+0x3a>
 800d06e:	4e0b      	ldr	r6, [pc, #44]	@ (800d09c <rcutils_system_time_now+0x4c>)
 800d070:	fba3 3206 	umull	r3, r2, r3, r6
 800d074:	185b      	adds	r3, r3, r1
 800d076:	fb06 2205 	mla	r2, r6, r5, r2
 800d07a:	f04f 0000 	mov.w	r0, #0
 800d07e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d082:	e9c4 3200 	strd	r3, r2, [r4]
 800d086:	b004      	add	sp, #16
 800d088:	bd70      	pop	{r4, r5, r6, pc}
 800d08a:	ea53 0205 	orrs.w	r2, r3, r5
 800d08e:	d1ee      	bne.n	800d06e <rcutils_system_time_now+0x1e>
 800d090:	2002      	movs	r0, #2
 800d092:	b004      	add	sp, #16
 800d094:	bd70      	pop	{r4, r5, r6, pc}
 800d096:	200b      	movs	r0, #11
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	3b9aca00 	.word	0x3b9aca00

0800d0a0 <rcutils_steady_time_now>:
 800d0a0:	b308      	cbz	r0, 800d0e6 <rcutils_steady_time_now+0x46>
 800d0a2:	b570      	push	{r4, r5, r6, lr}
 800d0a4:	b084      	sub	sp, #16
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	4669      	mov	r1, sp
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	f7f5 fe5c 	bl	8002d68 <clock_gettime>
 800d0b0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d0b4:	2d00      	cmp	r5, #0
 800d0b6:	db13      	blt.n	800d0e0 <rcutils_steady_time_now+0x40>
 800d0b8:	9902      	ldr	r1, [sp, #8]
 800d0ba:	2900      	cmp	r1, #0
 800d0bc:	db0d      	blt.n	800d0da <rcutils_steady_time_now+0x3a>
 800d0be:	4e0b      	ldr	r6, [pc, #44]	@ (800d0ec <rcutils_steady_time_now+0x4c>)
 800d0c0:	fba3 3206 	umull	r3, r2, r3, r6
 800d0c4:	185b      	adds	r3, r3, r1
 800d0c6:	fb06 2205 	mla	r2, r6, r5, r2
 800d0ca:	f04f 0000 	mov.w	r0, #0
 800d0ce:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d0d2:	e9c4 3200 	strd	r3, r2, [r4]
 800d0d6:	b004      	add	sp, #16
 800d0d8:	bd70      	pop	{r4, r5, r6, pc}
 800d0da:	ea53 0205 	orrs.w	r2, r3, r5
 800d0de:	d1ee      	bne.n	800d0be <rcutils_steady_time_now+0x1e>
 800d0e0:	2002      	movs	r0, #2
 800d0e2:	b004      	add	sp, #16
 800d0e4:	bd70      	pop	{r4, r5, r6, pc}
 800d0e6:	200b      	movs	r0, #11
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	3b9aca00 	.word	0x3b9aca00

0800d0f0 <rmw_get_zero_initialized_init_options>:
 800d0f0:	b510      	push	{r4, lr}
 800d0f2:	2238      	movs	r2, #56	@ 0x38
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	f00b f938 	bl	801836c <memset>
 800d0fc:	f104 0010 	add.w	r0, r4, #16
 800d100:	f000 f80a 	bl	800d118 <rmw_get_default_security_options>
 800d104:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d108:	60e3      	str	r3, [r4, #12]
 800d10a:	4620      	mov	r0, r4
 800d10c:	bd10      	pop	{r4, pc}
 800d10e:	bf00      	nop

0800d110 <rmw_get_default_publisher_options>:
 800d110:	2200      	movs	r2, #0
 800d112:	6002      	str	r2, [r0, #0]
 800d114:	7102      	strb	r2, [r0, #4]
 800d116:	4770      	bx	lr

0800d118 <rmw_get_default_security_options>:
 800d118:	2200      	movs	r2, #0
 800d11a:	7002      	strb	r2, [r0, #0]
 800d11c:	6042      	str	r2, [r0, #4]
 800d11e:	4770      	bx	lr

0800d120 <rmw_subscription_content_filter_options_fini>:
 800d120:	b1b0      	cbz	r0, 800d150 <rmw_subscription_content_filter_options_fini+0x30>
 800d122:	b538      	push	{r3, r4, r5, lr}
 800d124:	4604      	mov	r4, r0
 800d126:	4608      	mov	r0, r1
 800d128:	460d      	mov	r5, r1
 800d12a:	f7ff fd3d 	bl	800cba8 <rcutils_allocator_is_valid>
 800d12e:	b168      	cbz	r0, 800d14c <rmw_subscription_content_filter_options_fini+0x2c>
 800d130:	6820      	ldr	r0, [r4, #0]
 800d132:	b120      	cbz	r0, 800d13e <rmw_subscription_content_filter_options_fini+0x1e>
 800d134:	686b      	ldr	r3, [r5, #4]
 800d136:	6929      	ldr	r1, [r5, #16]
 800d138:	4798      	blx	r3
 800d13a:	2300      	movs	r3, #0
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	1d20      	adds	r0, r4, #4
 800d140:	f008 fc2e 	bl	80159a0 <rcutils_string_array_fini>
 800d144:	3800      	subs	r0, #0
 800d146:	bf18      	it	ne
 800d148:	2001      	movne	r0, #1
 800d14a:	bd38      	pop	{r3, r4, r5, pc}
 800d14c:	200b      	movs	r0, #11
 800d14e:	bd38      	pop	{r3, r4, r5, pc}
 800d150:	200b      	movs	r0, #11
 800d152:	4770      	bx	lr

0800d154 <rmw_get_default_subscription_options>:
 800d154:	2200      	movs	r2, #0
 800d156:	e9c0 2200 	strd	r2, r2, [r0]
 800d15a:	6082      	str	r2, [r0, #8]
 800d15c:	4770      	bx	lr
 800d15e:	bf00      	nop

0800d160 <rmw_get_zero_initialized_message_info>:
 800d160:	b510      	push	{r4, lr}
 800d162:	2240      	movs	r2, #64	@ 0x40
 800d164:	4604      	mov	r4, r0
 800d166:	2100      	movs	r1, #0
 800d168:	f00b f900 	bl	801836c <memset>
 800d16c:	4620      	mov	r0, r4
 800d16e:	bd10      	pop	{r4, pc}

0800d170 <rmw_validate_namespace_with_size>:
 800d170:	b340      	cbz	r0, 800d1c4 <rmw_validate_namespace_with_size+0x54>
 800d172:	b570      	push	{r4, r5, r6, lr}
 800d174:	4614      	mov	r4, r2
 800d176:	b0c2      	sub	sp, #264	@ 0x108
 800d178:	b332      	cbz	r2, 800d1c8 <rmw_validate_namespace_with_size+0x58>
 800d17a:	2901      	cmp	r1, #1
 800d17c:	460d      	mov	r5, r1
 800d17e:	461e      	mov	r6, r3
 800d180:	d102      	bne.n	800d188 <rmw_validate_namespace_with_size+0x18>
 800d182:	7803      	ldrb	r3, [r0, #0]
 800d184:	2b2f      	cmp	r3, #47	@ 0x2f
 800d186:	d012      	beq.n	800d1ae <rmw_validate_namespace_with_size+0x3e>
 800d188:	aa01      	add	r2, sp, #4
 800d18a:	4669      	mov	r1, sp
 800d18c:	f008 fdf0 	bl	8015d70 <rmw_validate_full_topic_name>
 800d190:	b978      	cbnz	r0, 800d1b2 <rmw_validate_namespace_with_size+0x42>
 800d192:	9b00      	ldr	r3, [sp, #0]
 800d194:	b14b      	cbz	r3, 800d1aa <rmw_validate_namespace_with_size+0x3a>
 800d196:	2b07      	cmp	r3, #7
 800d198:	d007      	beq.n	800d1aa <rmw_validate_namespace_with_size+0x3a>
 800d19a:	1e5a      	subs	r2, r3, #1
 800d19c:	2a05      	cmp	r2, #5
 800d19e:	d82b      	bhi.n	800d1f8 <rmw_validate_namespace_with_size+0x88>
 800d1a0:	e8df f002 	tbb	[pc, r2]
 800d1a4:	1e212427 	.word	0x1e212427
 800d1a8:	141b      	.short	0x141b
 800d1aa:	2df5      	cmp	r5, #245	@ 0xf5
 800d1ac:	d803      	bhi.n	800d1b6 <rmw_validate_namespace_with_size+0x46>
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	6020      	str	r0, [r4, #0]
 800d1b2:	b042      	add	sp, #264	@ 0x108
 800d1b4:	bd70      	pop	{r4, r5, r6, pc}
 800d1b6:	2307      	movs	r3, #7
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	2e00      	cmp	r6, #0
 800d1bc:	d0f9      	beq.n	800d1b2 <rmw_validate_namespace_with_size+0x42>
 800d1be:	23f4      	movs	r3, #244	@ 0xf4
 800d1c0:	6033      	str	r3, [r6, #0]
 800d1c2:	e7f6      	b.n	800d1b2 <rmw_validate_namespace_with_size+0x42>
 800d1c4:	200b      	movs	r0, #11
 800d1c6:	4770      	bx	lr
 800d1c8:	200b      	movs	r0, #11
 800d1ca:	e7f2      	b.n	800d1b2 <rmw_validate_namespace_with_size+0x42>
 800d1cc:	2306      	movs	r3, #6
 800d1ce:	6023      	str	r3, [r4, #0]
 800d1d0:	2e00      	cmp	r6, #0
 800d1d2:	d0ee      	beq.n	800d1b2 <rmw_validate_namespace_with_size+0x42>
 800d1d4:	9b01      	ldr	r3, [sp, #4]
 800d1d6:	6033      	str	r3, [r6, #0]
 800d1d8:	e7eb      	b.n	800d1b2 <rmw_validate_namespace_with_size+0x42>
 800d1da:	2305      	movs	r3, #5
 800d1dc:	6023      	str	r3, [r4, #0]
 800d1de:	e7f7      	b.n	800d1d0 <rmw_validate_namespace_with_size+0x60>
 800d1e0:	2304      	movs	r3, #4
 800d1e2:	6023      	str	r3, [r4, #0]
 800d1e4:	e7f4      	b.n	800d1d0 <rmw_validate_namespace_with_size+0x60>
 800d1e6:	2303      	movs	r3, #3
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	e7f1      	b.n	800d1d0 <rmw_validate_namespace_with_size+0x60>
 800d1ec:	2302      	movs	r3, #2
 800d1ee:	6023      	str	r3, [r4, #0]
 800d1f0:	e7ee      	b.n	800d1d0 <rmw_validate_namespace_with_size+0x60>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	6023      	str	r3, [r4, #0]
 800d1f6:	e7eb      	b.n	800d1d0 <rmw_validate_namespace_with_size+0x60>
 800d1f8:	4a03      	ldr	r2, [pc, #12]	@ (800d208 <rmw_validate_namespace_with_size+0x98>)
 800d1fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d1fe:	a802      	add	r0, sp, #8
 800d200:	f7ff febc 	bl	800cf7c <rcutils_snprintf>
 800d204:	2001      	movs	r0, #1
 800d206:	e7d4      	b.n	800d1b2 <rmw_validate_namespace_with_size+0x42>
 800d208:	0801950c 	.word	0x0801950c

0800d20c <rmw_validate_namespace>:
 800d20c:	b168      	cbz	r0, 800d22a <rmw_validate_namespace+0x1e>
 800d20e:	b570      	push	{r4, r5, r6, lr}
 800d210:	460d      	mov	r5, r1
 800d212:	4616      	mov	r6, r2
 800d214:	4604      	mov	r4, r0
 800d216:	f7f3 f805 	bl	8000224 <strlen>
 800d21a:	4633      	mov	r3, r6
 800d21c:	4601      	mov	r1, r0
 800d21e:	462a      	mov	r2, r5
 800d220:	4620      	mov	r0, r4
 800d222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d226:	f7ff bfa3 	b.w	800d170 <rmw_validate_namespace_with_size>
 800d22a:	200b      	movs	r0, #11
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop

0800d230 <rmw_namespace_validation_result_string>:
 800d230:	2807      	cmp	r0, #7
 800d232:	bf9a      	itte	ls
 800d234:	4b02      	ldrls	r3, [pc, #8]	@ (800d240 <rmw_namespace_validation_result_string+0x10>)
 800d236:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d23a:	4802      	ldrhi	r0, [pc, #8]	@ (800d244 <rmw_namespace_validation_result_string+0x14>)
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	08019bb4 	.word	0x08019bb4
 800d244:	0801955c 	.word	0x0801955c

0800d248 <rmw_validate_node_name>:
 800d248:	2800      	cmp	r0, #0
 800d24a:	d03b      	beq.n	800d2c4 <rmw_validate_node_name+0x7c>
 800d24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d250:	460d      	mov	r5, r1
 800d252:	2900      	cmp	r1, #0
 800d254:	d038      	beq.n	800d2c8 <rmw_validate_node_name+0x80>
 800d256:	4616      	mov	r6, r2
 800d258:	4604      	mov	r4, r0
 800d25a:	f7f2 ffe3 	bl	8000224 <strlen>
 800d25e:	b1e0      	cbz	r0, 800d29a <rmw_validate_node_name+0x52>
 800d260:	1e63      	subs	r3, r4, #1
 800d262:	eb03 0800 	add.w	r8, r3, r0
 800d266:	f1c4 0101 	rsb	r1, r4, #1
 800d26a:	18cf      	adds	r7, r1, r3
 800d26c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800d270:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800d274:	f02e 0c20 	bic.w	ip, lr, #32
 800d278:	2a09      	cmp	r2, #9
 800d27a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800d27e:	d914      	bls.n	800d2aa <rmw_validate_node_name+0x62>
 800d280:	f1bc 0f19 	cmp.w	ip, #25
 800d284:	d911      	bls.n	800d2aa <rmw_validate_node_name+0x62>
 800d286:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800d28a:	d00e      	beq.n	800d2aa <rmw_validate_node_name+0x62>
 800d28c:	2302      	movs	r3, #2
 800d28e:	602b      	str	r3, [r5, #0]
 800d290:	b106      	cbz	r6, 800d294 <rmw_validate_node_name+0x4c>
 800d292:	6037      	str	r7, [r6, #0]
 800d294:	2000      	movs	r0, #0
 800d296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29a:	2301      	movs	r3, #1
 800d29c:	602b      	str	r3, [r5, #0]
 800d29e:	2e00      	cmp	r6, #0
 800d2a0:	d0f8      	beq.n	800d294 <rmw_validate_node_name+0x4c>
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	6030      	str	r0, [r6, #0]
 800d2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2aa:	4543      	cmp	r3, r8
 800d2ac:	d1dd      	bne.n	800d26a <rmw_validate_node_name+0x22>
 800d2ae:	7822      	ldrb	r2, [r4, #0]
 800d2b0:	4b0d      	ldr	r3, [pc, #52]	@ (800d2e8 <rmw_validate_node_name+0xa0>)
 800d2b2:	5cd3      	ldrb	r3, [r2, r3]
 800d2b4:	f013 0304 	ands.w	r3, r3, #4
 800d2b8:	d110      	bne.n	800d2dc <rmw_validate_node_name+0x94>
 800d2ba:	28ff      	cmp	r0, #255	@ 0xff
 800d2bc:	d806      	bhi.n	800d2cc <rmw_validate_node_name+0x84>
 800d2be:	602b      	str	r3, [r5, #0]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	e7e8      	b.n	800d296 <rmw_validate_node_name+0x4e>
 800d2c4:	200b      	movs	r0, #11
 800d2c6:	4770      	bx	lr
 800d2c8:	200b      	movs	r0, #11
 800d2ca:	e7e4      	b.n	800d296 <rmw_validate_node_name+0x4e>
 800d2cc:	2204      	movs	r2, #4
 800d2ce:	602a      	str	r2, [r5, #0]
 800d2d0:	2e00      	cmp	r6, #0
 800d2d2:	d0df      	beq.n	800d294 <rmw_validate_node_name+0x4c>
 800d2d4:	22fe      	movs	r2, #254	@ 0xfe
 800d2d6:	6032      	str	r2, [r6, #0]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	e7dc      	b.n	800d296 <rmw_validate_node_name+0x4e>
 800d2dc:	2303      	movs	r3, #3
 800d2de:	602b      	str	r3, [r5, #0]
 800d2e0:	2e00      	cmp	r6, #0
 800d2e2:	d1de      	bne.n	800d2a2 <rmw_validate_node_name+0x5a>
 800d2e4:	e7d6      	b.n	800d294 <rmw_validate_node_name+0x4c>
 800d2e6:	bf00      	nop
 800d2e8:	08019ffb 	.word	0x08019ffb

0800d2ec <rmw_node_name_validation_result_string>:
 800d2ec:	2804      	cmp	r0, #4
 800d2ee:	bf9a      	itte	ls
 800d2f0:	4b02      	ldrls	r3, [pc, #8]	@ (800d2fc <rmw_node_name_validation_result_string+0x10>)
 800d2f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d2f6:	4802      	ldrhi	r0, [pc, #8]	@ (800d300 <rmw_node_name_validation_result_string+0x14>)
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	08019bd4 	.word	0x08019bd4
 800d300:	08019704 	.word	0x08019704

0800d304 <rmw_uros_set_custom_transport>:
 800d304:	b470      	push	{r4, r5, r6}
 800d306:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d30a:	b162      	cbz	r2, 800d326 <rmw_uros_set_custom_transport+0x22>
 800d30c:	b15b      	cbz	r3, 800d326 <rmw_uros_set_custom_transport+0x22>
 800d30e:	b155      	cbz	r5, 800d326 <rmw_uros_set_custom_transport+0x22>
 800d310:	b14e      	cbz	r6, 800d326 <rmw_uros_set_custom_transport+0x22>
 800d312:	4c06      	ldr	r4, [pc, #24]	@ (800d32c <rmw_uros_set_custom_transport+0x28>)
 800d314:	7020      	strb	r0, [r4, #0]
 800d316:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d31a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d31e:	6166      	str	r6, [r4, #20]
 800d320:	2000      	movs	r0, #0
 800d322:	bc70      	pop	{r4, r5, r6}
 800d324:	4770      	bx	lr
 800d326:	200b      	movs	r0, #11
 800d328:	bc70      	pop	{r4, r5, r6}
 800d32a:	4770      	bx	lr
 800d32c:	2000c4d4 	.word	0x2000c4d4

0800d330 <rmw_uros_ping_agent>:
 800d330:	b570      	push	{r4, r5, r6, lr}
 800d332:	4b22      	ldr	r3, [pc, #136]	@ (800d3bc <rmw_uros_ping_agent+0x8c>)
 800d334:	7b1a      	ldrb	r2, [r3, #12]
 800d336:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d33a:	4605      	mov	r5, r0
 800d33c:	460e      	mov	r6, r1
 800d33e:	b10a      	cbz	r2, 800d344 <rmw_uros_ping_agent+0x14>
 800d340:	681c      	ldr	r4, [r3, #0]
 800d342:	b9bc      	cbnz	r4, 800d374 <rmw_uros_ping_agent+0x44>
 800d344:	4b1e      	ldr	r3, [pc, #120]	@ (800d3c0 <rmw_uros_ping_agent+0x90>)
 800d346:	781a      	ldrb	r2, [r3, #0]
 800d348:	6918      	ldr	r0, [r3, #16]
 800d34a:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800d34e:	685a      	ldr	r2, [r3, #4]
 800d350:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800d352:	2100      	movs	r1, #0
 800d354:	68da      	ldr	r2, [r3, #12]
 800d356:	909c      	str	r0, [sp, #624]	@ 0x270
 800d358:	6958      	ldr	r0, [r3, #20]
 800d35a:	929b      	str	r2, [sp, #620]	@ 0x26c
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	909d      	str	r0, [sp, #628]	@ 0x274
 800d360:	466a      	mov	r2, sp
 800d362:	4608      	mov	r0, r1
 800d364:	939a      	str	r3, [sp, #616]	@ 0x268
 800d366:	f000 ffbd 	bl	800e2e4 <rmw_uxrce_transport_init>
 800d36a:	b198      	cbz	r0, 800d394 <rmw_uros_ping_agent+0x64>
 800d36c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d370:	bd70      	pop	{r4, r5, r6, pc}
 800d372:	b9f0      	cbnz	r0, 800d3b2 <rmw_uros_ping_agent+0x82>
 800d374:	68a0      	ldr	r0, [r4, #8]
 800d376:	4632      	mov	r2, r6
 800d378:	4629      	mov	r1, r5
 800d37a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d37e:	f002 fee9 	bl	8010154 <uxr_ping_agent_session>
 800d382:	6864      	ldr	r4, [r4, #4]
 800d384:	2c00      	cmp	r4, #0
 800d386:	d1f4      	bne.n	800d372 <rmw_uros_ping_agent+0x42>
 800d388:	f080 0001 	eor.w	r0, r0, #1
 800d38c:	b2c0      	uxtb	r0, r0
 800d38e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d392:	bd70      	pop	{r4, r5, r6, pc}
 800d394:	4632      	mov	r2, r6
 800d396:	4629      	mov	r1, r5
 800d398:	a89e      	add	r0, sp, #632	@ 0x278
 800d39a:	f002 ff27 	bl	80101ec <uxr_ping_agent_attempts>
 800d39e:	4604      	mov	r4, r0
 800d3a0:	4668      	mov	r0, sp
 800d3a2:	f002 fea3 	bl	80100ec <uxr_close_custom_transport>
 800d3a6:	f084 0001 	eor.w	r0, r4, #1
 800d3aa:	b2c0      	uxtb	r0, r0
 800d3ac:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d3b0:	bd70      	pop	{r4, r5, r6, pc}
 800d3b2:	2000      	movs	r0, #0
 800d3b4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d3b8:	bd70      	pop	{r4, r5, r6, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20010e2c 	.word	0x20010e2c
 800d3c0:	2000c4d4 	.word	0x2000c4d4

0800d3c4 <rmw_init_options_init>:
 800d3c4:	b084      	sub	sp, #16
 800d3c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3c8:	b083      	sub	sp, #12
 800d3ca:	ad09      	add	r5, sp, #36	@ 0x24
 800d3cc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d3d0:	b130      	cbz	r0, 800d3e0 <rmw_init_options_init+0x1c>
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	f7ff fbe7 	bl	800cba8 <rcutils_allocator_is_valid>
 800d3da:	b108      	cbz	r0, 800d3e0 <rmw_init_options_init+0x1c>
 800d3dc:	68a6      	ldr	r6, [r4, #8]
 800d3de:	b12e      	cbz	r6, 800d3ec <rmw_init_options_init+0x28>
 800d3e0:	200b      	movs	r0, #11
 800d3e2:	b003      	add	sp, #12
 800d3e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d3e8:	b004      	add	sp, #16
 800d3ea:	4770      	bx	lr
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	e9c4 2300 	strd	r2, r3, [r4]
 800d3f4:	4b20      	ldr	r3, [pc, #128]	@ (800d478 <rmw_init_options_init+0xb4>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	60a3      	str	r3, [r4, #8]
 800d3fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3fc:	f104 0c20 	add.w	ip, r4, #32
 800d400:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d404:	466f      	mov	r7, sp
 800d406:	682b      	ldr	r3, [r5, #0]
 800d408:	f8cc 3000 	str.w	r3, [ip]
 800d40c:	4638      	mov	r0, r7
 800d40e:	61e6      	str	r6, [r4, #28]
 800d410:	60e6      	str	r6, [r4, #12]
 800d412:	f7ff fe81 	bl	800d118 <rmw_get_default_security_options>
 800d416:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d41a:	f104 0310 	add.w	r3, r4, #16
 800d41e:	e883 0003 	stmia.w	r3, {r0, r1}
 800d422:	2203      	movs	r2, #3
 800d424:	4815      	ldr	r0, [pc, #84]	@ (800d47c <rmw_init_options_init+0xb8>)
 800d426:	4916      	ldr	r1, [pc, #88]	@ (800d480 <rmw_init_options_init+0xbc>)
 800d428:	7626      	strb	r6, [r4, #24]
 800d42a:	f001 f88b 	bl	800e544 <rmw_uxrce_init_init_options_impl_memory>
 800d42e:	4813      	ldr	r0, [pc, #76]	@ (800d47c <rmw_init_options_init+0xb8>)
 800d430:	f008 fdfc 	bl	801602c <get_memory>
 800d434:	b1f0      	cbz	r0, 800d474 <rmw_init_options_init+0xb0>
 800d436:	4a13      	ldr	r2, [pc, #76]	@ (800d484 <rmw_init_options_init+0xc0>)
 800d438:	6883      	ldr	r3, [r0, #8]
 800d43a:	6851      	ldr	r1, [r2, #4]
 800d43c:	7810      	ldrb	r0, [r2, #0]
 800d43e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d440:	7418      	strb	r0, [r3, #16]
 800d442:	6159      	str	r1, [r3, #20]
 800d444:	68d1      	ldr	r1, [r2, #12]
 800d446:	61d9      	str	r1, [r3, #28]
 800d448:	6911      	ldr	r1, [r2, #16]
 800d44a:	6219      	str	r1, [r3, #32]
 800d44c:	6951      	ldr	r1, [r2, #20]
 800d44e:	6892      	ldr	r2, [r2, #8]
 800d450:	619a      	str	r2, [r3, #24]
 800d452:	6259      	str	r1, [r3, #36]	@ 0x24
 800d454:	f004 ff98 	bl	8012388 <uxr_nanos>
 800d458:	f00a fcba 	bl	8017dd0 <srand>
 800d45c:	f00a fce6 	bl	8017e2c <rand>
 800d460:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d462:	6298      	str	r0, [r3, #40]	@ 0x28
 800d464:	2800      	cmp	r0, #0
 800d466:	d0f9      	beq.n	800d45c <rmw_init_options_init+0x98>
 800d468:	2000      	movs	r0, #0
 800d46a:	b003      	add	sp, #12
 800d46c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d470:	b004      	add	sp, #16
 800d472:	4770      	bx	lr
 800d474:	2001      	movs	r0, #1
 800d476:	e7b4      	b.n	800d3e2 <rmw_init_options_init+0x1e>
 800d478:	08019f18 	.word	0x08019f18
 800d47c:	20010dec 	.word	0x20010dec
 800d480:	2000c688 	.word	0x2000c688
 800d484:	2000c4d4 	.word	0x2000c4d4

0800d488 <rmw_init_options_copy>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	b088      	sub	sp, #32
 800d48c:	b160      	cbz	r0, 800d4a8 <rmw_init_options_copy+0x20>
 800d48e:	460d      	mov	r5, r1
 800d490:	b151      	cbz	r1, 800d4a8 <rmw_init_options_copy+0x20>
 800d492:	4604      	mov	r4, r0
 800d494:	6880      	ldr	r0, [r0, #8]
 800d496:	b128      	cbz	r0, 800d4a4 <rmw_init_options_copy+0x1c>
 800d498:	4b33      	ldr	r3, [pc, #204]	@ (800d568 <rmw_init_options_copy+0xe0>)
 800d49a:	6819      	ldr	r1, [r3, #0]
 800d49c:	f7f2 feb8 	bl	8000210 <strcmp>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	d154      	bne.n	800d54e <rmw_init_options_copy+0xc6>
 800d4a4:	68ab      	ldr	r3, [r5, #8]
 800d4a6:	b11b      	cbz	r3, 800d4b0 <rmw_init_options_copy+0x28>
 800d4a8:	240b      	movs	r4, #11
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	b008      	add	sp, #32
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	4623      	mov	r3, r4
 800d4b2:	462a      	mov	r2, r5
 800d4b4:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d4b8:	f8d3 c000 	ldr.w	ip, [r3]
 800d4bc:	6858      	ldr	r0, [r3, #4]
 800d4be:	6899      	ldr	r1, [r3, #8]
 800d4c0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d4c4:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d4c8:	3310      	adds	r3, #16
 800d4ca:	42b3      	cmp	r3, r6
 800d4cc:	f8c2 c000 	str.w	ip, [r2]
 800d4d0:	6050      	str	r0, [r2, #4]
 800d4d2:	6091      	str	r1, [r2, #8]
 800d4d4:	f102 0210 	add.w	r2, r2, #16
 800d4d8:	d1ee      	bne.n	800d4b8 <rmw_init_options_copy+0x30>
 800d4da:	6819      	ldr	r1, [r3, #0]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	6053      	str	r3, [r2, #4]
 800d4e0:	6011      	str	r1, [r2, #0]
 800d4e2:	f104 0e20 	add.w	lr, r4, #32
 800d4e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d4ea:	f10d 0c0c 	add.w	ip, sp, #12
 800d4ee:	4666      	mov	r6, ip
 800d4f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4f4:	f8de 3000 	ldr.w	r3, [lr]
 800d4f8:	f8cc 3000 	str.w	r3, [ip]
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	f7ff fb53 	bl	800cba8 <rcutils_allocator_is_valid>
 800d502:	2800      	cmp	r0, #0
 800d504:	d0d0      	beq.n	800d4a8 <rmw_init_options_copy+0x20>
 800d506:	ab08      	add	r3, sp, #32
 800d508:	e913 0003 	ldmdb	r3, {r0, r1}
 800d50c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d510:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d514:	69e0      	ldr	r0, [r4, #28]
 800d516:	f7ff fd5d 	bl	800cfd4 <rcutils_strdup>
 800d51a:	61e8      	str	r0, [r5, #28]
 800d51c:	69e3      	ldr	r3, [r4, #28]
 800d51e:	b103      	cbz	r3, 800d522 <rmw_init_options_copy+0x9a>
 800d520:	b1f8      	cbz	r0, 800d562 <rmw_init_options_copy+0xda>
 800d522:	4812      	ldr	r0, [pc, #72]	@ (800d56c <rmw_init_options_copy+0xe4>)
 800d524:	f008 fd82 	bl	801602c <get_memory>
 800d528:	b1a8      	cbz	r0, 800d556 <rmw_init_options_copy+0xce>
 800d52a:	6883      	ldr	r3, [r0, #8]
 800d52c:	636b      	str	r3, [r5, #52]	@ 0x34
 800d52e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d530:	f102 0c10 	add.w	ip, r2, #16
 800d534:	f103 0510 	add.w	r5, r3, #16
 800d538:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d53c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d53e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d542:	2400      	movs	r4, #0
 800d544:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d548:	4620      	mov	r0, r4
 800d54a:	b008      	add	sp, #32
 800d54c:	bd70      	pop	{r4, r5, r6, pc}
 800d54e:	240c      	movs	r4, #12
 800d550:	4620      	mov	r0, r4
 800d552:	b008      	add	sp, #32
 800d554:	bd70      	pop	{r4, r5, r6, pc}
 800d556:	9b04      	ldr	r3, [sp, #16]
 800d558:	9907      	ldr	r1, [sp, #28]
 800d55a:	69e8      	ldr	r0, [r5, #28]
 800d55c:	4798      	blx	r3
 800d55e:	2401      	movs	r4, #1
 800d560:	e7a3      	b.n	800d4aa <rmw_init_options_copy+0x22>
 800d562:	240a      	movs	r4, #10
 800d564:	e7a1      	b.n	800d4aa <rmw_init_options_copy+0x22>
 800d566:	bf00      	nop
 800d568:	08019f18 	.word	0x08019f18
 800d56c:	20010dec 	.word	0x20010dec

0800d570 <rmw_init_options_fini>:
 800d570:	2800      	cmp	r0, #0
 800d572:	d041      	beq.n	800d5f8 <rmw_init_options_fini+0x88>
 800d574:	b510      	push	{r4, lr}
 800d576:	4604      	mov	r4, r0
 800d578:	b08e      	sub	sp, #56	@ 0x38
 800d57a:	3020      	adds	r0, #32
 800d57c:	f7ff fb14 	bl	800cba8 <rcutils_allocator_is_valid>
 800d580:	b380      	cbz	r0, 800d5e4 <rmw_init_options_fini+0x74>
 800d582:	68a0      	ldr	r0, [r4, #8]
 800d584:	b120      	cbz	r0, 800d590 <rmw_init_options_fini+0x20>
 800d586:	4b1e      	ldr	r3, [pc, #120]	@ (800d600 <rmw_init_options_fini+0x90>)
 800d588:	6819      	ldr	r1, [r3, #0]
 800d58a:	f7f2 fe41 	bl	8000210 <strcmp>
 800d58e:	bb88      	cbnz	r0, 800d5f4 <rmw_init_options_fini+0x84>
 800d590:	4b1c      	ldr	r3, [pc, #112]	@ (800d604 <rmw_init_options_fini+0x94>)
 800d592:	6819      	ldr	r1, [r3, #0]
 800d594:	b351      	cbz	r1, 800d5ec <rmw_init_options_fini+0x7c>
 800d596:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d598:	e001      	b.n	800d59e <rmw_init_options_fini+0x2e>
 800d59a:	6849      	ldr	r1, [r1, #4]
 800d59c:	b331      	cbz	r1, 800d5ec <rmw_init_options_fini+0x7c>
 800d59e:	688b      	ldr	r3, [r1, #8]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d1fa      	bne.n	800d59a <rmw_init_options_fini+0x2a>
 800d5a4:	4817      	ldr	r0, [pc, #92]	@ (800d604 <rmw_init_options_fini+0x94>)
 800d5a6:	f008 fd51 	bl	801604c <put_memory>
 800d5aa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d5ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d5ae:	69e0      	ldr	r0, [r4, #28]
 800d5b0:	4798      	blx	r3
 800d5b2:	4668      	mov	r0, sp
 800d5b4:	f7ff fd9c 	bl	800d0f0 <rmw_get_zero_initialized_init_options>
 800d5b8:	46ee      	mov	lr, sp
 800d5ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d5be:	46a4      	mov	ip, r4
 800d5c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d5c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d5d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5d4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d5d8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d5dc:	2300      	movs	r3, #0
 800d5de:	4618      	mov	r0, r3
 800d5e0:	b00e      	add	sp, #56	@ 0x38
 800d5e2:	bd10      	pop	{r4, pc}
 800d5e4:	230b      	movs	r3, #11
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	b00e      	add	sp, #56	@ 0x38
 800d5ea:	bd10      	pop	{r4, pc}
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	b00e      	add	sp, #56	@ 0x38
 800d5f2:	bd10      	pop	{r4, pc}
 800d5f4:	230c      	movs	r3, #12
 800d5f6:	e7f2      	b.n	800d5de <rmw_init_options_fini+0x6e>
 800d5f8:	230b      	movs	r3, #11
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	08019f18 	.word	0x08019f18
 800d604:	20010dec 	.word	0x20010dec

0800d608 <rmw_init>:
 800d608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d60c:	b083      	sub	sp, #12
 800d60e:	2800      	cmp	r0, #0
 800d610:	f000 80d3 	beq.w	800d7ba <rmw_init+0x1b2>
 800d614:	460e      	mov	r6, r1
 800d616:	2900      	cmp	r1, #0
 800d618:	f000 80cf 	beq.w	800d7ba <rmw_init+0x1b2>
 800d61c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d61e:	4605      	mov	r5, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	f000 80ca 	beq.w	800d7ba <rmw_init+0x1b2>
 800d626:	4b78      	ldr	r3, [pc, #480]	@ (800d808 <rmw_init+0x200>)
 800d628:	6880      	ldr	r0, [r0, #8]
 800d62a:	681f      	ldr	r7, [r3, #0]
 800d62c:	b128      	cbz	r0, 800d63a <rmw_init+0x32>
 800d62e:	4639      	mov	r1, r7
 800d630:	f7f2 fdee 	bl	8000210 <strcmp>
 800d634:	2800      	cmp	r0, #0
 800d636:	f040 80ca 	bne.w	800d7ce <rmw_init+0x1c6>
 800d63a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d63e:	4c73      	ldr	r4, [pc, #460]	@ (800d80c <rmw_init+0x204>)
 800d640:	4973      	ldr	r1, [pc, #460]	@ (800d810 <rmw_init+0x208>)
 800d642:	4874      	ldr	r0, [pc, #464]	@ (800d814 <rmw_init+0x20c>)
 800d644:	60b7      	str	r7, [r6, #8]
 800d646:	e9c6 2300 	strd	r2, r3, [r6]
 800d64a:	68eb      	ldr	r3, [r5, #12]
 800d64c:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d64e:	2201      	movs	r2, #1
 800d650:	f000 ff18 	bl	800e484 <rmw_uxrce_init_session_memory>
 800d654:	4620      	mov	r0, r4
 800d656:	4970      	ldr	r1, [pc, #448]	@ (800d818 <rmw_init+0x210>)
 800d658:	2204      	movs	r2, #4
 800d65a:	f000 ff53 	bl	800e504 <rmw_uxrce_init_static_input_buffer_memory>
 800d65e:	f04f 0800 	mov.w	r8, #0
 800d662:	486c      	ldr	r0, [pc, #432]	@ (800d814 <rmw_init+0x20c>)
 800d664:	f884 800d 	strb.w	r8, [r4, #13]
 800d668:	f008 fce0 	bl	801602c <get_memory>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	f000 80a9 	beq.w	800d7c4 <rmw_init+0x1bc>
 800d672:	6884      	ldr	r4, [r0, #8]
 800d674:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d676:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d678:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d67c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d680:	9101      	str	r1, [sp, #4]
 800d682:	6a00      	ldr	r0, [r0, #32]
 800d684:	9000      	str	r0, [sp, #0]
 800d686:	f104 0910 	add.w	r9, r4, #16
 800d68a:	4661      	mov	r1, ip
 800d68c:	4648      	mov	r0, r9
 800d68e:	f002 fceb 	bl	8010068 <uxr_set_custom_transport_callbacks>
 800d692:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d696:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d69a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d69e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d6a2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d6a6:	495d      	ldr	r1, [pc, #372]	@ (800d81c <rmw_init+0x214>)
 800d6a8:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d6ac:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d6b0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d6b4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d6b8:	4859      	ldr	r0, [pc, #356]	@ (800d820 <rmw_init+0x218>)
 800d6ba:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d6be:	2201      	movs	r2, #1
 800d6c0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d6c2:	f000 febf 	bl	800e444 <rmw_uxrce_init_node_memory>
 800d6c6:	4957      	ldr	r1, [pc, #348]	@ (800d824 <rmw_init+0x21c>)
 800d6c8:	4857      	ldr	r0, [pc, #348]	@ (800d828 <rmw_init+0x220>)
 800d6ca:	2205      	movs	r2, #5
 800d6cc:	f000 fe9a 	bl	800e404 <rmw_uxrce_init_subscription_memory>
 800d6d0:	4956      	ldr	r1, [pc, #344]	@ (800d82c <rmw_init+0x224>)
 800d6d2:	4857      	ldr	r0, [pc, #348]	@ (800d830 <rmw_init+0x228>)
 800d6d4:	220a      	movs	r2, #10
 800d6d6:	f000 fe75 	bl	800e3c4 <rmw_uxrce_init_publisher_memory>
 800d6da:	4956      	ldr	r1, [pc, #344]	@ (800d834 <rmw_init+0x22c>)
 800d6dc:	4856      	ldr	r0, [pc, #344]	@ (800d838 <rmw_init+0x230>)
 800d6de:	2201      	movs	r2, #1
 800d6e0:	f000 fe30 	bl	800e344 <rmw_uxrce_init_service_memory>
 800d6e4:	4955      	ldr	r1, [pc, #340]	@ (800d83c <rmw_init+0x234>)
 800d6e6:	4856      	ldr	r0, [pc, #344]	@ (800d840 <rmw_init+0x238>)
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	f000 fe4b 	bl	800e384 <rmw_uxrce_init_client_memory>
 800d6ee:	4955      	ldr	r1, [pc, #340]	@ (800d844 <rmw_init+0x23c>)
 800d6f0:	4855      	ldr	r0, [pc, #340]	@ (800d848 <rmw_init+0x240>)
 800d6f2:	220f      	movs	r2, #15
 800d6f4:	f000 fee6 	bl	800e4c4 <rmw_uxrce_init_topic_memory>
 800d6f8:	4954      	ldr	r1, [pc, #336]	@ (800d84c <rmw_init+0x244>)
 800d6fa:	4855      	ldr	r0, [pc, #340]	@ (800d850 <rmw_init+0x248>)
 800d6fc:	2203      	movs	r2, #3
 800d6fe:	f000 ff21 	bl	800e544 <rmw_uxrce_init_init_options_impl_memory>
 800d702:	4954      	ldr	r1, [pc, #336]	@ (800d854 <rmw_init+0x24c>)
 800d704:	4854      	ldr	r0, [pc, #336]	@ (800d858 <rmw_init+0x250>)
 800d706:	2204      	movs	r2, #4
 800d708:	f000 ff3c 	bl	800e584 <rmw_uxrce_init_wait_set_memory>
 800d70c:	4953      	ldr	r1, [pc, #332]	@ (800d85c <rmw_init+0x254>)
 800d70e:	4854      	ldr	r0, [pc, #336]	@ (800d860 <rmw_init+0x258>)
 800d710:	2204      	movs	r2, #4
 800d712:	f000 ff57 	bl	800e5c4 <rmw_uxrce_init_guard_condition_memory>
 800d716:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d718:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d71a:	4642      	mov	r2, r8
 800d71c:	f000 fde2 	bl	800e2e4 <rmw_uxrce_transport_init>
 800d720:	4607      	mov	r7, r0
 800d722:	2800      	cmp	r0, #0
 800d724:	d158      	bne.n	800d7d8 <rmw_init+0x1d0>
 800d726:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d728:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d72c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d72e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d732:	4628      	mov	r0, r5
 800d734:	f002 ffd0 	bl	80106d8 <uxr_init_session>
 800d738:	494a      	ldr	r1, [pc, #296]	@ (800d864 <rmw_init+0x25c>)
 800d73a:	4622      	mov	r2, r4
 800d73c:	4628      	mov	r0, r5
 800d73e:	f002 ffef 	bl	8010720 <uxr_set_topic_callback>
 800d742:	4949      	ldr	r1, [pc, #292]	@ (800d868 <rmw_init+0x260>)
 800d744:	463a      	mov	r2, r7
 800d746:	4628      	mov	r0, r5
 800d748:	f002 ffe6 	bl	8010718 <uxr_set_status_callback>
 800d74c:	4947      	ldr	r1, [pc, #284]	@ (800d86c <rmw_init+0x264>)
 800d74e:	463a      	mov	r2, r7
 800d750:	4628      	mov	r0, r5
 800d752:	f002 ffe9 	bl	8010728 <uxr_set_request_callback>
 800d756:	4946      	ldr	r1, [pc, #280]	@ (800d870 <rmw_init+0x268>)
 800d758:	463a      	mov	r2, r7
 800d75a:	4628      	mov	r0, r5
 800d75c:	f002 ffe8 	bl	8010730 <uxr_set_reply_callback>
 800d760:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d764:	2304      	movs	r3, #4
 800d766:	0092      	lsls	r2, r2, #2
 800d768:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d76c:	4628      	mov	r0, r5
 800d76e:	f003 f81d 	bl	80107ac <uxr_create_input_reliable_stream>
 800d772:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d776:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d77a:	0092      	lsls	r2, r2, #2
 800d77c:	2304      	movs	r3, #4
 800d77e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d782:	4628      	mov	r0, r5
 800d784:	f002 ffea 	bl	801075c <uxr_create_output_reliable_stream>
 800d788:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d78c:	4628      	mov	r0, r5
 800d78e:	f003 f807 	bl	80107a0 <uxr_create_input_best_effort_stream>
 800d792:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d796:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d79a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d79e:	3114      	adds	r1, #20
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	f002 ffc9 	bl	8010738 <uxr_create_output_best_effort_stream>
 800d7a6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	f003 fd7e 	bl	80112ac <uxr_create_session>
 800d7b0:	b1f8      	cbz	r0, 800d7f2 <rmw_init+0x1ea>
 800d7b2:	4638      	mov	r0, r7
 800d7b4:	b003      	add	sp, #12
 800d7b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7ba:	270b      	movs	r7, #11
 800d7bc:	4638      	mov	r0, r7
 800d7be:	b003      	add	sp, #12
 800d7c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7c4:	2701      	movs	r7, #1
 800d7c6:	4638      	mov	r0, r7
 800d7c8:	b003      	add	sp, #12
 800d7ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7ce:	270c      	movs	r7, #12
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	b003      	add	sp, #12
 800d7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7d8:	4648      	mov	r0, r9
 800d7da:	f002 fc87 	bl	80100ec <uxr_close_custom_transport>
 800d7de:	480d      	ldr	r0, [pc, #52]	@ (800d814 <rmw_init+0x20c>)
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	f008 fc33 	bl	801604c <put_memory>
 800d7e6:	4638      	mov	r0, r7
 800d7e8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d7ec:	b003      	add	sp, #12
 800d7ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7f2:	4648      	mov	r0, r9
 800d7f4:	f002 fc7a 	bl	80100ec <uxr_close_custom_transport>
 800d7f8:	4806      	ldr	r0, [pc, #24]	@ (800d814 <rmw_init+0x20c>)
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	f008 fc26 	bl	801604c <put_memory>
 800d800:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d802:	2701      	movs	r7, #1
 800d804:	e7d5      	b.n	800d7b2 <rmw_init+0x1aa>
 800d806:	bf00      	nop
 800d808:	08019f18 	.word	0x08019f18
 800d80c:	20010e3c 	.word	0x20010e3c
 800d810:	2000d0e8 	.word	0x2000d0e8
 800d814:	20010e2c 	.word	0x20010e2c
 800d818:	2000e690 	.word	0x2000e690
 800d81c:	2000c70c 	.word	0x2000c70c
 800d820:	20010dfc 	.word	0x20010dfc
 800d824:	20010790 	.word	0x20010790
 800d828:	20010e4c 	.word	0x20010e4c
 800d82c:	2000c7b0 	.word	0x2000c7b0
 800d830:	20010e0c 	.word	0x20010e0c
 800d834:	2000d020 	.word	0x2000d020
 800d838:	20010e1c 	.word	0x20010e1c
 800d83c:	2000c540 	.word	0x2000c540
 800d840:	2000c52c 	.word	0x2000c52c
 800d844:	20010bc8 	.word	0x20010bc8
 800d848:	20010e5c 	.word	0x20010e5c
 800d84c:	2000c688 	.word	0x2000c688
 800d850:	20010dec 	.word	0x20010dec
 800d854:	20010d6c 	.word	0x20010d6c
 800d858:	20010e6c 	.word	0x20010e6c
 800d85c:	2000c608 	.word	0x2000c608
 800d860:	20010ddc 	.word	0x20010ddc
 800d864:	08015e65 	.word	0x08015e65
 800d868:	08015e5d 	.word	0x08015e5d
 800d86c:	08015efd 	.word	0x08015efd
 800d870:	08015f99 	.word	0x08015f99

0800d874 <rmw_shutdown>:
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	b094      	sub	sp, #80	@ 0x50
 800d878:	2800      	cmp	r0, #0
 800d87a:	d050      	beq.n	800d91e <rmw_shutdown+0xaa>
 800d87c:	4605      	mov	r5, r0
 800d87e:	6880      	ldr	r0, [r0, #8]
 800d880:	b128      	cbz	r0, 800d88e <rmw_shutdown+0x1a>
 800d882:	4b2b      	ldr	r3, [pc, #172]	@ (800d930 <rmw_shutdown+0xbc>)
 800d884:	6819      	ldr	r1, [r3, #0]
 800d886:	f7f2 fcc3 	bl	8000210 <strcmp>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d143      	bne.n	800d916 <rmw_shutdown+0xa2>
 800d88e:	4b29      	ldr	r3, [pc, #164]	@ (800d934 <rmw_shutdown+0xc0>)
 800d890:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d892:	681c      	ldr	r4, [r3, #0]
 800d894:	2c00      	cmp	r4, #0
 800d896:	d046      	beq.n	800d926 <rmw_shutdown+0xb2>
 800d898:	2600      	movs	r6, #0
 800d89a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d89e:	6902      	ldr	r2, [r0, #16]
 800d8a0:	428a      	cmp	r2, r1
 800d8a2:	d024      	beq.n	800d8ee <rmw_shutdown+0x7a>
 800d8a4:	2c00      	cmp	r4, #0
 800d8a6:	d1f8      	bne.n	800d89a <rmw_shutdown+0x26>
 800d8a8:	b189      	cbz	r1, 800d8ce <rmw_shutdown+0x5a>
 800d8aa:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d8ae:	789b      	ldrb	r3, [r3, #2]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d8b6:	bf14      	ite	ne
 800d8b8:	210a      	movne	r1, #10
 800d8ba:	2100      	moveq	r1, #0
 800d8bc:	f003 fcce 	bl	801125c <uxr_delete_session_retries>
 800d8c0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d8c2:	f000 fe9f 	bl	800e604 <rmw_uxrce_fini_session_memory>
 800d8c6:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d8c8:	3010      	adds	r0, #16
 800d8ca:	f002 fc0f 	bl	80100ec <uxr_close_custom_transport>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d8d2:	b1b6      	cbz	r6, 800d902 <rmw_shutdown+0x8e>
 800d8d4:	4d18      	ldr	r5, [pc, #96]	@ (800d938 <rmw_shutdown+0xc4>)
 800d8d6:	682c      	ldr	r4, [r5, #0]
 800d8d8:	b134      	cbz	r4, 800d8e8 <rmw_shutdown+0x74>
 800d8da:	4621      	mov	r1, r4
 800d8dc:	6864      	ldr	r4, [r4, #4]
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f008 fbb4 	bl	801604c <put_memory>
 800d8e4:	2c00      	cmp	r4, #0
 800d8e6:	d1f8      	bne.n	800d8da <rmw_shutdown+0x66>
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	b014      	add	sp, #80	@ 0x50
 800d8ec:	bd70      	pop	{r4, r5, r6, pc}
 800d8ee:	3018      	adds	r0, #24
 800d8f0:	f000 f8e8 	bl	800dac4 <rmw_destroy_node>
 800d8f4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	2c00      	cmp	r4, #0
 800d8fa:	d1ce      	bne.n	800d89a <rmw_shutdown+0x26>
 800d8fc:	2900      	cmp	r1, #0
 800d8fe:	d1d4      	bne.n	800d8aa <rmw_shutdown+0x36>
 800d900:	e7e5      	b.n	800d8ce <rmw_shutdown+0x5a>
 800d902:	4668      	mov	r0, sp
 800d904:	f008 f9a0 	bl	8015c48 <rmw_get_zero_initialized_context>
 800d908:	2250      	movs	r2, #80	@ 0x50
 800d90a:	4669      	mov	r1, sp
 800d90c:	4628      	mov	r0, r5
 800d90e:	f00a fe54 	bl	80185ba <memcpy>
 800d912:	2600      	movs	r6, #0
 800d914:	e7de      	b.n	800d8d4 <rmw_shutdown+0x60>
 800d916:	260c      	movs	r6, #12
 800d918:	4630      	mov	r0, r6
 800d91a:	b014      	add	sp, #80	@ 0x50
 800d91c:	bd70      	pop	{r4, r5, r6, pc}
 800d91e:	260b      	movs	r6, #11
 800d920:	4630      	mov	r0, r6
 800d922:	b014      	add	sp, #80	@ 0x50
 800d924:	bd70      	pop	{r4, r5, r6, pc}
 800d926:	2900      	cmp	r1, #0
 800d928:	d0eb      	beq.n	800d902 <rmw_shutdown+0x8e>
 800d92a:	4626      	mov	r6, r4
 800d92c:	e7bd      	b.n	800d8aa <rmw_shutdown+0x36>
 800d92e:	bf00      	nop
 800d930:	08019f18 	.word	0x08019f18
 800d934:	20010dfc 	.word	0x20010dfc
 800d938:	20010e3c 	.word	0x20010e3c

0800d93c <rmw_context_fini>:
 800d93c:	4b17      	ldr	r3, [pc, #92]	@ (800d99c <rmw_context_fini+0x60>)
 800d93e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d940:	b570      	push	{r4, r5, r6, lr}
 800d942:	681c      	ldr	r4, [r3, #0]
 800d944:	4605      	mov	r5, r0
 800d946:	b334      	cbz	r4, 800d996 <rmw_context_fini+0x5a>
 800d948:	2600      	movs	r6, #0
 800d94a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d94e:	6902      	ldr	r2, [r0, #16]
 800d950:	428a      	cmp	r2, r1
 800d952:	d018      	beq.n	800d986 <rmw_context_fini+0x4a>
 800d954:	2c00      	cmp	r4, #0
 800d956:	d1f8      	bne.n	800d94a <rmw_context_fini+0xe>
 800d958:	b189      	cbz	r1, 800d97e <rmw_context_fini+0x42>
 800d95a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d95e:	789b      	ldrb	r3, [r3, #2]
 800d960:	2b01      	cmp	r3, #1
 800d962:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d966:	bf14      	ite	ne
 800d968:	210a      	movne	r1, #10
 800d96a:	2100      	moveq	r1, #0
 800d96c:	f003 fc76 	bl	801125c <uxr_delete_session_retries>
 800d970:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d972:	f000 fe47 	bl	800e604 <rmw_uxrce_fini_session_memory>
 800d976:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d978:	3010      	adds	r0, #16
 800d97a:	f002 fbb7 	bl	80100ec <uxr_close_custom_transport>
 800d97e:	2300      	movs	r3, #0
 800d980:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d982:	4630      	mov	r0, r6
 800d984:	bd70      	pop	{r4, r5, r6, pc}
 800d986:	3018      	adds	r0, #24
 800d988:	f000 f89c 	bl	800dac4 <rmw_destroy_node>
 800d98c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d98e:	4606      	mov	r6, r0
 800d990:	2c00      	cmp	r4, #0
 800d992:	d1da      	bne.n	800d94a <rmw_context_fini+0xe>
 800d994:	e7e0      	b.n	800d958 <rmw_context_fini+0x1c>
 800d996:	4626      	mov	r6, r4
 800d998:	e7de      	b.n	800d958 <rmw_context_fini+0x1c>
 800d99a:	bf00      	nop
 800d99c:	20010dfc 	.word	0x20010dfc

0800d9a0 <create_node>:
 800d9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d05f      	beq.n	800da6a <create_node+0xca>
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	4835      	ldr	r0, [pc, #212]	@ (800da84 <create_node+0xe4>)
 800d9ae:	460f      	mov	r7, r1
 800d9b0:	4690      	mov	r8, r2
 800d9b2:	461d      	mov	r5, r3
 800d9b4:	f008 fb3a 	bl	801602c <get_memory>
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	d056      	beq.n	800da6a <create_node+0xca>
 800d9bc:	6884      	ldr	r4, [r0, #8]
 800d9be:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d9c0:	6123      	str	r3, [r4, #16]
 800d9c2:	f008 fb9b 	bl	80160fc <rmw_get_implementation_identifier>
 800d9c6:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800d9ca:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d9ce:	f8c4 9020 	str.w	r9, [r4, #32]
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f7f2 fc26 	bl	8000224 <strlen>
 800d9d8:	1c42      	adds	r2, r0, #1
 800d9da:	2a3c      	cmp	r2, #60	@ 0x3c
 800d9dc:	f104 0518 	add.w	r5, r4, #24
 800d9e0:	d840      	bhi.n	800da64 <create_node+0xc4>
 800d9e2:	4648      	mov	r0, r9
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800d9ea:	f00a fde6 	bl	80185ba <memcpy>
 800d9ee:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800d9f2:	4638      	mov	r0, r7
 800d9f4:	f7f2 fc16 	bl	8000224 <strlen>
 800d9f8:	1c42      	adds	r2, r0, #1
 800d9fa:	2a3c      	cmp	r2, #60	@ 0x3c
 800d9fc:	d832      	bhi.n	800da64 <create_node+0xc4>
 800d9fe:	4639      	mov	r1, r7
 800da00:	4648      	mov	r0, r9
 800da02:	f00a fdda 	bl	80185ba <memcpy>
 800da06:	6923      	ldr	r3, [r4, #16]
 800da08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800da0c:	2101      	movs	r1, #1
 800da0e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800da12:	1842      	adds	r2, r0, r1
 800da14:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800da18:	f002 fb6c 	bl	80100f4 <uxr_object_id>
 800da1c:	6160      	str	r0, [r4, #20]
 800da1e:	783b      	ldrb	r3, [r7, #0]
 800da20:	2b2f      	cmp	r3, #47	@ 0x2f
 800da22:	d127      	bne.n	800da74 <create_node+0xd4>
 800da24:	787b      	ldrb	r3, [r7, #1]
 800da26:	bb2b      	cbnz	r3, 800da74 <create_node+0xd4>
 800da28:	4a17      	ldr	r2, [pc, #92]	@ (800da88 <create_node+0xe8>)
 800da2a:	4818      	ldr	r0, [pc, #96]	@ (800da8c <create_node+0xec>)
 800da2c:	4633      	mov	r3, r6
 800da2e:	213c      	movs	r1, #60	@ 0x3c
 800da30:	f00a fbbc 	bl	80181ac <sniprintf>
 800da34:	6920      	ldr	r0, [r4, #16]
 800da36:	4915      	ldr	r1, [pc, #84]	@ (800da8c <create_node+0xec>)
 800da38:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800da3c:	9100      	str	r1, [sp, #0]
 800da3e:	2106      	movs	r1, #6
 800da40:	9101      	str	r1, [sp, #4]
 800da42:	6811      	ldr	r1, [r2, #0]
 800da44:	6962      	ldr	r2, [r4, #20]
 800da46:	fa1f f388 	uxth.w	r3, r8
 800da4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da4e:	f002 f8d9 	bl	800fc04 <uxr_buffer_create_participant_bin>
 800da52:	4602      	mov	r2, r0
 800da54:	6920      	ldr	r0, [r4, #16]
 800da56:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800da5a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800da5e:	f000 ff49 	bl	800e8f4 <run_xrce_session>
 800da62:	b918      	cbnz	r0, 800da6c <create_node+0xcc>
 800da64:	4628      	mov	r0, r5
 800da66:	f000 fdd3 	bl	800e610 <rmw_uxrce_fini_node_memory>
 800da6a:	2500      	movs	r5, #0
 800da6c:	4628      	mov	r0, r5
 800da6e:	b003      	add	sp, #12
 800da70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da74:	4a06      	ldr	r2, [pc, #24]	@ (800da90 <create_node+0xf0>)
 800da76:	9600      	str	r6, [sp, #0]
 800da78:	463b      	mov	r3, r7
 800da7a:	213c      	movs	r1, #60	@ 0x3c
 800da7c:	4803      	ldr	r0, [pc, #12]	@ (800da8c <create_node+0xec>)
 800da7e:	f00a fb95 	bl	80181ac <sniprintf>
 800da82:	e7d7      	b.n	800da34 <create_node+0x94>
 800da84:	20010dfc 	.word	0x20010dfc
 800da88:	08019824 	.word	0x08019824
 800da8c:	2000c4f0 	.word	0x2000c4f0
 800da90:	080194c8 	.word	0x080194c8

0800da94 <rmw_create_node>:
 800da94:	b199      	cbz	r1, 800dabe <rmw_create_node+0x2a>
 800da96:	780b      	ldrb	r3, [r1, #0]
 800da98:	468c      	mov	ip, r1
 800da9a:	b183      	cbz	r3, 800dabe <rmw_create_node+0x2a>
 800da9c:	b410      	push	{r4}
 800da9e:	4614      	mov	r4, r2
 800daa0:	b14a      	cbz	r2, 800dab6 <rmw_create_node+0x22>
 800daa2:	7813      	ldrb	r3, [r2, #0]
 800daa4:	b13b      	cbz	r3, 800dab6 <rmw_create_node+0x22>
 800daa6:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800daa8:	4603      	mov	r3, r0
 800daaa:	4621      	mov	r1, r4
 800daac:	4660      	mov	r0, ip
 800daae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dab2:	f7ff bf75 	b.w	800d9a0 <create_node>
 800dab6:	2000      	movs	r0, #0
 800dab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dabc:	4770      	bx	lr
 800dabe:	2000      	movs	r0, #0
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop

0800dac4 <rmw_destroy_node>:
 800dac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dac6:	b328      	cbz	r0, 800db14 <rmw_destroy_node+0x50>
 800dac8:	4607      	mov	r7, r0
 800daca:	6800      	ldr	r0, [r0, #0]
 800dacc:	b120      	cbz	r0, 800dad8 <rmw_destroy_node+0x14>
 800dace:	4b36      	ldr	r3, [pc, #216]	@ (800dba8 <rmw_destroy_node+0xe4>)
 800dad0:	6819      	ldr	r1, [r3, #0]
 800dad2:	f7f2 fb9d 	bl	8000210 <strcmp>
 800dad6:	b9e8      	cbnz	r0, 800db14 <rmw_destroy_node+0x50>
 800dad8:	687d      	ldr	r5, [r7, #4]
 800dada:	b1dd      	cbz	r5, 800db14 <rmw_destroy_node+0x50>
 800dadc:	4b33      	ldr	r3, [pc, #204]	@ (800dbac <rmw_destroy_node+0xe8>)
 800dade:	681c      	ldr	r4, [r3, #0]
 800dae0:	2c00      	cmp	r4, #0
 800dae2:	d05f      	beq.n	800dba4 <rmw_destroy_node+0xe0>
 800dae4:	2600      	movs	r6, #0
 800dae6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800daea:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800daee:	429d      	cmp	r5, r3
 800daf0:	d013      	beq.n	800db1a <rmw_destroy_node+0x56>
 800daf2:	2c00      	cmp	r4, #0
 800daf4:	d1f7      	bne.n	800dae6 <rmw_destroy_node+0x22>
 800daf6:	4b2e      	ldr	r3, [pc, #184]	@ (800dbb0 <rmw_destroy_node+0xec>)
 800daf8:	681c      	ldr	r4, [r3, #0]
 800dafa:	b1c4      	cbz	r4, 800db2e <rmw_destroy_node+0x6a>
 800dafc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800db00:	6a0b      	ldr	r3, [r1, #32]
 800db02:	429d      	cmp	r5, r3
 800db04:	d1f9      	bne.n	800dafa <rmw_destroy_node+0x36>
 800db06:	317c      	adds	r1, #124	@ 0x7c
 800db08:	4638      	mov	r0, r7
 800db0a:	f000 fb37 	bl	800e17c <rmw_destroy_subscription>
 800db0e:	2801      	cmp	r0, #1
 800db10:	4606      	mov	r6, r0
 800db12:	d1f2      	bne.n	800dafa <rmw_destroy_node+0x36>
 800db14:	2601      	movs	r6, #1
 800db16:	4630      	mov	r0, r6
 800db18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db1a:	3184      	adds	r1, #132	@ 0x84
 800db1c:	4638      	mov	r0, r7
 800db1e:	f000 f9a5 	bl	800de6c <rmw_destroy_publisher>
 800db22:	2801      	cmp	r0, #1
 800db24:	4606      	mov	r6, r0
 800db26:	d0f5      	beq.n	800db14 <rmw_destroy_node+0x50>
 800db28:	2c00      	cmp	r4, #0
 800db2a:	d1dc      	bne.n	800dae6 <rmw_destroy_node+0x22>
 800db2c:	e7e3      	b.n	800daf6 <rmw_destroy_node+0x32>
 800db2e:	4b21      	ldr	r3, [pc, #132]	@ (800dbb4 <rmw_destroy_node+0xf0>)
 800db30:	681c      	ldr	r4, [r3, #0]
 800db32:	b16c      	cbz	r4, 800db50 <rmw_destroy_node+0x8c>
 800db34:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800db38:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800db3a:	429d      	cmp	r5, r3
 800db3c:	d1f9      	bne.n	800db32 <rmw_destroy_node+0x6e>
 800db3e:	317c      	adds	r1, #124	@ 0x7c
 800db40:	4638      	mov	r0, r7
 800db42:	f000 f9e5 	bl	800df10 <rmw_destroy_service>
 800db46:	2801      	cmp	r0, #1
 800db48:	4606      	mov	r6, r0
 800db4a:	d0e3      	beq.n	800db14 <rmw_destroy_node+0x50>
 800db4c:	2c00      	cmp	r4, #0
 800db4e:	d1f1      	bne.n	800db34 <rmw_destroy_node+0x70>
 800db50:	4b19      	ldr	r3, [pc, #100]	@ (800dbb8 <rmw_destroy_node+0xf4>)
 800db52:	681c      	ldr	r4, [r3, #0]
 800db54:	b16c      	cbz	r4, 800db72 <rmw_destroy_node+0xae>
 800db56:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800db5a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800db5c:	429d      	cmp	r5, r3
 800db5e:	d1f9      	bne.n	800db54 <rmw_destroy_node+0x90>
 800db60:	317c      	adds	r1, #124	@ 0x7c
 800db62:	4638      	mov	r0, r7
 800db64:	f008 fa86 	bl	8016074 <rmw_destroy_client>
 800db68:	2801      	cmp	r0, #1
 800db6a:	4606      	mov	r6, r0
 800db6c:	d0d2      	beq.n	800db14 <rmw_destroy_node+0x50>
 800db6e:	2c00      	cmp	r4, #0
 800db70:	d1f1      	bne.n	800db56 <rmw_destroy_node+0x92>
 800db72:	6928      	ldr	r0, [r5, #16]
 800db74:	696a      	ldr	r2, [r5, #20]
 800db76:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800db7a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db7e:	6819      	ldr	r1, [r3, #0]
 800db80:	f001 fff4 	bl	800fb6c <uxr_buffer_delete_entity>
 800db84:	4602      	mov	r2, r0
 800db86:	6928      	ldr	r0, [r5, #16]
 800db88:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800db8c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800db90:	f000 feb0 	bl	800e8f4 <run_xrce_session>
 800db94:	2800      	cmp	r0, #0
 800db96:	bf08      	it	eq
 800db98:	2602      	moveq	r6, #2
 800db9a:	4638      	mov	r0, r7
 800db9c:	f000 fd38 	bl	800e610 <rmw_uxrce_fini_node_memory>
 800dba0:	4630      	mov	r0, r6
 800dba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dba4:	4626      	mov	r6, r4
 800dba6:	e7a6      	b.n	800daf6 <rmw_destroy_node+0x32>
 800dba8:	08019f18 	.word	0x08019f18
 800dbac:	20010e0c 	.word	0x20010e0c
 800dbb0:	20010e4c 	.word	0x20010e4c
 800dbb4:	20010e1c 	.word	0x20010e1c
 800dbb8:	2000c52c 	.word	0x2000c52c

0800dbbc <rmw_node_get_graph_guard_condition>:
 800dbbc:	6843      	ldr	r3, [r0, #4]
 800dbbe:	6918      	ldr	r0, [r3, #16]
 800dbc0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800dbc4:	4770      	bx	lr
 800dbc6:	bf00      	nop

0800dbc8 <flush_session>:
 800dbc8:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800dbca:	f003 b9d5 	b.w	8010f78 <uxr_run_session_until_confirm_delivery>
 800dbce:	bf00      	nop

0800dbd0 <rmw_publish>:
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d053      	beq.n	800dc7c <rmw_publish+0xac>
 800dbd4:	b570      	push	{r4, r5, r6, lr}
 800dbd6:	460d      	mov	r5, r1
 800dbd8:	b08e      	sub	sp, #56	@ 0x38
 800dbda:	2900      	cmp	r1, #0
 800dbdc:	d04b      	beq.n	800dc76 <rmw_publish+0xa6>
 800dbde:	4604      	mov	r4, r0
 800dbe0:	6800      	ldr	r0, [r0, #0]
 800dbe2:	f000 ff07 	bl	800e9f4 <is_uxrce_rmw_identifier_valid>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d045      	beq.n	800dc76 <rmw_publish+0xa6>
 800dbea:	6866      	ldr	r6, [r4, #4]
 800dbec:	2e00      	cmp	r6, #0
 800dbee:	d042      	beq.n	800dc76 <rmw_publish+0xa6>
 800dbf0:	69b4      	ldr	r4, [r6, #24]
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	6923      	ldr	r3, [r4, #16]
 800dbf6:	4798      	blx	r3
 800dbf8:	69f3      	ldr	r3, [r6, #28]
 800dbfa:	9005      	str	r0, [sp, #20]
 800dbfc:	b113      	cbz	r3, 800dc04 <rmw_publish+0x34>
 800dbfe:	a805      	add	r0, sp, #20
 800dc00:	4798      	blx	r3
 800dc02:	9805      	ldr	r0, [sp, #20]
 800dc04:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	9000      	str	r0, [sp, #0]
 800dc0c:	6972      	ldr	r2, [r6, #20]
 800dc0e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dc10:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dc14:	ab06      	add	r3, sp, #24
 800dc16:	f004 fc57 	bl	80124c8 <uxr_prepare_output_stream>
 800dc1a:	b1d8      	cbz	r0, 800dc54 <rmw_publish+0x84>
 800dc1c:	68a3      	ldr	r3, [r4, #8]
 800dc1e:	a906      	add	r1, sp, #24
 800dc20:	4628      	mov	r0, r5
 800dc22:	4798      	blx	r3
 800dc24:	6a33      	ldr	r3, [r6, #32]
 800dc26:	4604      	mov	r4, r0
 800dc28:	b10b      	cbz	r3, 800dc2e <rmw_publish+0x5e>
 800dc2a:	a806      	add	r0, sp, #24
 800dc2c:	4798      	blx	r3
 800dc2e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dc38:	d022      	beq.n	800dc80 <rmw_publish+0xb0>
 800dc3a:	6918      	ldr	r0, [r3, #16]
 800dc3c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800dc3e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc42:	f003 f999 	bl	8010f78 <uxr_run_session_until_confirm_delivery>
 800dc46:	4020      	ands	r0, r4
 800dc48:	b2c4      	uxtb	r4, r0
 800dc4a:	f084 0001 	eor.w	r0, r4, #1
 800dc4e:	b2c0      	uxtb	r0, r0
 800dc50:	b00e      	add	sp, #56	@ 0x38
 800dc52:	bd70      	pop	{r4, r5, r6, pc}
 800dc54:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dc58:	6918      	ldr	r0, [r3, #16]
 800dc5a:	9b05      	ldr	r3, [sp, #20]
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	4b0b      	ldr	r3, [pc, #44]	@ (800dc8c <rmw_publish+0xbc>)
 800dc60:	9301      	str	r3, [sp, #4]
 800dc62:	9602      	str	r6, [sp, #8]
 800dc64:	6972      	ldr	r2, [r6, #20]
 800dc66:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dc68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc6c:	ab06      	add	r3, sp, #24
 800dc6e:	f004 fc5b 	bl	8012528 <uxr_prepare_output_stream_fragmented>
 800dc72:	2800      	cmp	r0, #0
 800dc74:	d1d2      	bne.n	800dc1c <rmw_publish+0x4c>
 800dc76:	2001      	movs	r0, #1
 800dc78:	b00e      	add	sp, #56	@ 0x38
 800dc7a:	bd70      	pop	{r4, r5, r6, pc}
 800dc7c:	2001      	movs	r0, #1
 800dc7e:	4770      	bx	lr
 800dc80:	6918      	ldr	r0, [r3, #16]
 800dc82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc86:	f002 fdb7 	bl	80107f8 <uxr_flash_output_streams>
 800dc8a:	e7de      	b.n	800dc4a <rmw_publish+0x7a>
 800dc8c:	0800dbc9 	.word	0x0800dbc9

0800dc90 <rmw_create_publisher>:
 800dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc94:	b087      	sub	sp, #28
 800dc96:	2800      	cmp	r0, #0
 800dc98:	f000 80cc 	beq.w	800de34 <rmw_create_publisher+0x1a4>
 800dc9c:	460e      	mov	r6, r1
 800dc9e:	2900      	cmp	r1, #0
 800dca0:	f000 80c8 	beq.w	800de34 <rmw_create_publisher+0x1a4>
 800dca4:	4604      	mov	r4, r0
 800dca6:	6800      	ldr	r0, [r0, #0]
 800dca8:	4615      	mov	r5, r2
 800dcaa:	4698      	mov	r8, r3
 800dcac:	f000 fea2 	bl	800e9f4 <is_uxrce_rmw_identifier_valid>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	f000 80bf 	beq.w	800de34 <rmw_create_publisher+0x1a4>
 800dcb6:	2d00      	cmp	r5, #0
 800dcb8:	f000 80bc 	beq.w	800de34 <rmw_create_publisher+0x1a4>
 800dcbc:	782b      	ldrb	r3, [r5, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f000 80b8 	beq.w	800de34 <rmw_create_publisher+0x1a4>
 800dcc4:	f1b8 0f00 	cmp.w	r8, #0
 800dcc8:	f000 80b4 	beq.w	800de34 <rmw_create_publisher+0x1a4>
 800dccc:	485c      	ldr	r0, [pc, #368]	@ (800de40 <rmw_create_publisher+0x1b0>)
 800dcce:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dcd2:	f008 f9ab 	bl	801602c <get_memory>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	f000 80ac 	beq.w	800de34 <rmw_create_publisher+0x1a4>
 800dcdc:	6884      	ldr	r4, [r0, #8]
 800dcde:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800dce2:	f008 fa0b 	bl	80160fc <rmw_get_implementation_identifier>
 800dce6:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800dcea:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800dcee:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	f7f2 fa96 	bl	8000224 <strlen>
 800dcf8:	3001      	adds	r0, #1
 800dcfa:	283c      	cmp	r0, #60	@ 0x3c
 800dcfc:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800dd00:	f200 8091 	bhi.w	800de26 <rmw_create_publisher+0x196>
 800dd04:	4a4f      	ldr	r2, [pc, #316]	@ (800de44 <rmw_create_publisher+0x1b4>)
 800dd06:	462b      	mov	r3, r5
 800dd08:	213c      	movs	r1, #60	@ 0x3c
 800dd0a:	4650      	mov	r0, sl
 800dd0c:	f00a fa4e 	bl	80181ac <sniprintf>
 800dd10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dd14:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800dd16:	4641      	mov	r1, r8
 800dd18:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800dd1c:	2250      	movs	r2, #80	@ 0x50
 800dd1e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800dd22:	f00a fc4a 	bl	80185ba <memcpy>
 800dd26:	f898 3008 	ldrb.w	r3, [r8, #8]
 800dd2a:	4947      	ldr	r1, [pc, #284]	@ (800de48 <rmw_create_publisher+0x1b8>)
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd32:	bf0c      	ite	eq
 800dd34:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800dd38:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800dd3c:	67a3      	str	r3, [r4, #120]	@ 0x78
 800dd3e:	2300      	movs	r3, #0
 800dd40:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800dd44:	4630      	mov	r0, r6
 800dd46:	f000 fe63 	bl	800ea10 <get_message_typesupport_handle>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d06b      	beq.n	800de26 <rmw_create_publisher+0x196>
 800dd4e:	6842      	ldr	r2, [r0, #4]
 800dd50:	61a2      	str	r2, [r4, #24]
 800dd52:	2a00      	cmp	r2, #0
 800dd54:	d067      	beq.n	800de26 <rmw_create_publisher+0x196>
 800dd56:	4629      	mov	r1, r5
 800dd58:	4643      	mov	r3, r8
 800dd5a:	4648      	mov	r0, r9
 800dd5c:	f008 f9fc 	bl	8016158 <create_topic>
 800dd60:	6260      	str	r0, [r4, #36]	@ 0x24
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d063      	beq.n	800de2e <rmw_create_publisher+0x19e>
 800dd66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd6e:	2103      	movs	r1, #3
 800dd70:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800dd74:	1c42      	adds	r2, r0, #1
 800dd76:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800dd7a:	f002 f9bb 	bl	80100f4 <uxr_object_id>
 800dd7e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800dd82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd86:	6120      	str	r0, [r4, #16]
 800dd88:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800dd8c:	6910      	ldr	r0, [r2, #16]
 800dd8e:	2506      	movs	r5, #6
 800dd90:	9500      	str	r5, [sp, #0]
 800dd92:	6819      	ldr	r1, [r3, #0]
 800dd94:	6922      	ldr	r2, [r4, #16]
 800dd96:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800dd9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd9e:	f001 ff99 	bl	800fcd4 <uxr_buffer_create_publisher_bin>
 800dda2:	4602      	mov	r2, r0
 800dda4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dda8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ddac:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ddb0:	f000 fda0 	bl	800e8f4 <run_xrce_session>
 800ddb4:	b3b8      	cbz	r0, 800de26 <rmw_create_publisher+0x196>
 800ddb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ddba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ddbe:	2105      	movs	r1, #5
 800ddc0:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800ddc4:	1c42      	adds	r2, r0, #1
 800ddc6:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800ddca:	f002 f993 	bl	80100f4 <uxr_object_id>
 800ddce:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ddd2:	6160      	str	r0, [r4, #20]
 800ddd4:	691e      	ldr	r6, [r3, #16]
 800ddd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ddda:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800ddde:	f10d 0a10 	add.w	sl, sp, #16
 800dde2:	4641      	mov	r1, r8
 800dde4:	4650      	mov	r0, sl
 800dde6:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800ddea:	f000 fd9f 	bl	800e92c <convert_qos_profile>
 800ddee:	9503      	str	r5, [sp, #12]
 800ddf0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ddf4:	9001      	str	r0, [sp, #4]
 800ddf6:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ddfa:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800de04:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800de08:	f8d8 1000 	ldr.w	r1, [r8]
 800de0c:	4630      	mov	r0, r6
 800de0e:	f001 ffc1 	bl	800fd94 <uxr_buffer_create_datawriter_bin>
 800de12:	4602      	mov	r2, r0
 800de14:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800de18:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800de1c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800de20:	f000 fd68 	bl	800e8f4 <run_xrce_session>
 800de24:	b938      	cbnz	r0, 800de36 <rmw_create_publisher+0x1a6>
 800de26:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800de28:	b108      	cbz	r0, 800de2e <rmw_create_publisher+0x19e>
 800de2a:	f000 fc61 	bl	800e6f0 <rmw_uxrce_fini_topic_memory>
 800de2e:	4638      	mov	r0, r7
 800de30:	f000 fc06 	bl	800e640 <rmw_uxrce_fini_publisher_memory>
 800de34:	2700      	movs	r7, #0
 800de36:	4638      	mov	r0, r7
 800de38:	b007      	add	sp, #28
 800de3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de3e:	bf00      	nop
 800de40:	20010e0c 	.word	0x20010e0c
 800de44:	08019824 	.word	0x08019824
 800de48:	080197f0 	.word	0x080197f0

0800de4c <rmw_publisher_get_actual_qos>:
 800de4c:	b150      	cbz	r0, 800de64 <rmw_publisher_get_actual_qos+0x18>
 800de4e:	b508      	push	{r3, lr}
 800de50:	460b      	mov	r3, r1
 800de52:	b149      	cbz	r1, 800de68 <rmw_publisher_get_actual_qos+0x1c>
 800de54:	6841      	ldr	r1, [r0, #4]
 800de56:	2250      	movs	r2, #80	@ 0x50
 800de58:	3128      	adds	r1, #40	@ 0x28
 800de5a:	4618      	mov	r0, r3
 800de5c:	f00a fbad 	bl	80185ba <memcpy>
 800de60:	2000      	movs	r0, #0
 800de62:	bd08      	pop	{r3, pc}
 800de64:	200b      	movs	r0, #11
 800de66:	4770      	bx	lr
 800de68:	200b      	movs	r0, #11
 800de6a:	bd08      	pop	{r3, pc}

0800de6c <rmw_destroy_publisher>:
 800de6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6e:	b128      	cbz	r0, 800de7c <rmw_destroy_publisher+0x10>
 800de70:	4604      	mov	r4, r0
 800de72:	6800      	ldr	r0, [r0, #0]
 800de74:	460d      	mov	r5, r1
 800de76:	f000 fdbd 	bl	800e9f4 <is_uxrce_rmw_identifier_valid>
 800de7a:	b910      	cbnz	r0, 800de82 <rmw_destroy_publisher+0x16>
 800de7c:	2401      	movs	r4, #1
 800de7e:	4620      	mov	r0, r4
 800de80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de82:	6863      	ldr	r3, [r4, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d0f9      	beq.n	800de7c <rmw_destroy_publisher+0x10>
 800de88:	2d00      	cmp	r5, #0
 800de8a:	d0f7      	beq.n	800de7c <rmw_destroy_publisher+0x10>
 800de8c:	6828      	ldr	r0, [r5, #0]
 800de8e:	f000 fdb1 	bl	800e9f4 <is_uxrce_rmw_identifier_valid>
 800de92:	2800      	cmp	r0, #0
 800de94:	d0f2      	beq.n	800de7c <rmw_destroy_publisher+0x10>
 800de96:	686c      	ldr	r4, [r5, #4]
 800de98:	2c00      	cmp	r4, #0
 800de9a:	d0ef      	beq.n	800de7c <rmw_destroy_publisher+0x10>
 800de9c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800de9e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800dea2:	f008 f9a9 	bl	80161f8 <destroy_topic>
 800dea6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800deaa:	6962      	ldr	r2, [r4, #20]
 800deac:	6918      	ldr	r0, [r3, #16]
 800deae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800deb2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800deb6:	6819      	ldr	r1, [r3, #0]
 800deb8:	f001 fe58 	bl	800fb6c <uxr_buffer_delete_entity>
 800debc:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dec0:	6922      	ldr	r2, [r4, #16]
 800dec2:	691b      	ldr	r3, [r3, #16]
 800dec4:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800dec8:	4604      	mov	r4, r0
 800deca:	6809      	ldr	r1, [r1, #0]
 800decc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ded0:	f001 fe4c 	bl	800fb6c <uxr_buffer_delete_entity>
 800ded4:	693e      	ldr	r6, [r7, #16]
 800ded6:	4622      	mov	r2, r4
 800ded8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800dedc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800dee0:	4604      	mov	r4, r0
 800dee2:	4630      	mov	r0, r6
 800dee4:	f000 fd06 	bl	800e8f4 <run_xrce_session>
 800dee8:	693e      	ldr	r6, [r7, #16]
 800deea:	4622      	mov	r2, r4
 800deec:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800def0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800def4:	4604      	mov	r4, r0
 800def6:	4630      	mov	r0, r6
 800def8:	f000 fcfc 	bl	800e8f4 <run_xrce_session>
 800defc:	b12c      	cbz	r4, 800df0a <rmw_destroy_publisher+0x9e>
 800defe:	b120      	cbz	r0, 800df0a <rmw_destroy_publisher+0x9e>
 800df00:	2400      	movs	r4, #0
 800df02:	4628      	mov	r0, r5
 800df04:	f000 fb9c 	bl	800e640 <rmw_uxrce_fini_publisher_memory>
 800df08:	e7b9      	b.n	800de7e <rmw_destroy_publisher+0x12>
 800df0a:	2402      	movs	r4, #2
 800df0c:	e7f9      	b.n	800df02 <rmw_destroy_publisher+0x96>
 800df0e:	bf00      	nop

0800df10 <rmw_destroy_service>:
 800df10:	b570      	push	{r4, r5, r6, lr}
 800df12:	b128      	cbz	r0, 800df20 <rmw_destroy_service+0x10>
 800df14:	4604      	mov	r4, r0
 800df16:	6800      	ldr	r0, [r0, #0]
 800df18:	460d      	mov	r5, r1
 800df1a:	f000 fd6b 	bl	800e9f4 <is_uxrce_rmw_identifier_valid>
 800df1e:	b910      	cbnz	r0, 800df26 <rmw_destroy_service+0x16>
 800df20:	2401      	movs	r4, #1
 800df22:	4620      	mov	r0, r4
 800df24:	bd70      	pop	{r4, r5, r6, pc}
 800df26:	6863      	ldr	r3, [r4, #4]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d0f9      	beq.n	800df20 <rmw_destroy_service+0x10>
 800df2c:	2d00      	cmp	r5, #0
 800df2e:	d0f7      	beq.n	800df20 <rmw_destroy_service+0x10>
 800df30:	6828      	ldr	r0, [r5, #0]
 800df32:	f000 fd5f 	bl	800e9f4 <is_uxrce_rmw_identifier_valid>
 800df36:	2800      	cmp	r0, #0
 800df38:	d0f2      	beq.n	800df20 <rmw_destroy_service+0x10>
 800df3a:	686e      	ldr	r6, [r5, #4]
 800df3c:	2e00      	cmp	r6, #0
 800df3e:	d0ef      	beq.n	800df20 <rmw_destroy_service+0x10>
 800df40:	6864      	ldr	r4, [r4, #4]
 800df42:	6932      	ldr	r2, [r6, #16]
 800df44:	6920      	ldr	r0, [r4, #16]
 800df46:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df4e:	6819      	ldr	r1, [r3, #0]
 800df50:	f002 fa3e 	bl	80103d0 <uxr_buffer_cancel_data>
 800df54:	4602      	mov	r2, r0
 800df56:	6920      	ldr	r0, [r4, #16]
 800df58:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800df5c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800df60:	f000 fcc8 	bl	800e8f4 <run_xrce_session>
 800df64:	6920      	ldr	r0, [r4, #16]
 800df66:	6932      	ldr	r2, [r6, #16]
 800df68:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df70:	6819      	ldr	r1, [r3, #0]
 800df72:	f001 fdfb 	bl	800fb6c <uxr_buffer_delete_entity>
 800df76:	4602      	mov	r2, r0
 800df78:	6920      	ldr	r0, [r4, #16]
 800df7a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800df7e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800df82:	f000 fcb7 	bl	800e8f4 <run_xrce_session>
 800df86:	2800      	cmp	r0, #0
 800df88:	4628      	mov	r0, r5
 800df8a:	bf14      	ite	ne
 800df8c:	2400      	movne	r4, #0
 800df8e:	2402      	moveq	r4, #2
 800df90:	f000 fb82 	bl	800e698 <rmw_uxrce_fini_service_memory>
 800df94:	e7c5      	b.n	800df22 <rmw_destroy_service+0x12>
 800df96:	bf00      	nop

0800df98 <rmw_create_subscription>:
 800df98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df9c:	b08d      	sub	sp, #52	@ 0x34
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	f000 80d1 	beq.w	800e146 <rmw_create_subscription+0x1ae>
 800dfa4:	460e      	mov	r6, r1
 800dfa6:	2900      	cmp	r1, #0
 800dfa8:	f000 80cd 	beq.w	800e146 <rmw_create_subscription+0x1ae>
 800dfac:	4604      	mov	r4, r0
 800dfae:	6800      	ldr	r0, [r0, #0]
 800dfb0:	4615      	mov	r5, r2
 800dfb2:	4698      	mov	r8, r3
 800dfb4:	f000 fd1e 	bl	800e9f4 <is_uxrce_rmw_identifier_valid>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	f000 80c4 	beq.w	800e146 <rmw_create_subscription+0x1ae>
 800dfbe:	2d00      	cmp	r5, #0
 800dfc0:	f000 80c1 	beq.w	800e146 <rmw_create_subscription+0x1ae>
 800dfc4:	782b      	ldrb	r3, [r5, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	f000 80bd 	beq.w	800e146 <rmw_create_subscription+0x1ae>
 800dfcc:	f1b8 0f00 	cmp.w	r8, #0
 800dfd0:	f000 80b9 	beq.w	800e146 <rmw_create_subscription+0x1ae>
 800dfd4:	485e      	ldr	r0, [pc, #376]	@ (800e150 <rmw_create_subscription+0x1b8>)
 800dfd6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dfda:	f008 f827 	bl	801602c <get_memory>
 800dfde:	4604      	mov	r4, r0
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	f000 80b1 	beq.w	800e148 <rmw_create_subscription+0x1b0>
 800dfe6:	6887      	ldr	r7, [r0, #8]
 800dfe8:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800dfec:	f008 f886 	bl	80160fc <rmw_get_implementation_identifier>
 800dff0:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800dff4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dff6:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800dffa:	4628      	mov	r0, r5
 800dffc:	f7f2 f912 	bl	8000224 <strlen>
 800e000:	3001      	adds	r0, #1
 800e002:	283c      	cmp	r0, #60	@ 0x3c
 800e004:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800e008:	f200 8096 	bhi.w	800e138 <rmw_create_subscription+0x1a0>
 800e00c:	4a51      	ldr	r2, [pc, #324]	@ (800e154 <rmw_create_subscription+0x1bc>)
 800e00e:	462b      	mov	r3, r5
 800e010:	213c      	movs	r1, #60	@ 0x3c
 800e012:	4650      	mov	r0, sl
 800e014:	f00a f8ca 	bl	80181ac <sniprintf>
 800e018:	4641      	mov	r1, r8
 800e01a:	f8c7 9020 	str.w	r9, [r7, #32]
 800e01e:	2250      	movs	r2, #80	@ 0x50
 800e020:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800e024:	f00a fac9 	bl	80185ba <memcpy>
 800e028:	494b      	ldr	r1, [pc, #300]	@ (800e158 <rmw_create_subscription+0x1c0>)
 800e02a:	4630      	mov	r0, r6
 800e02c:	f000 fcf0 	bl	800ea10 <get_message_typesupport_handle>
 800e030:	2800      	cmp	r0, #0
 800e032:	f000 8081 	beq.w	800e138 <rmw_create_subscription+0x1a0>
 800e036:	6842      	ldr	r2, [r0, #4]
 800e038:	61ba      	str	r2, [r7, #24]
 800e03a:	2a00      	cmp	r2, #0
 800e03c:	d07c      	beq.n	800e138 <rmw_create_subscription+0x1a0>
 800e03e:	4629      	mov	r1, r5
 800e040:	4643      	mov	r3, r8
 800e042:	4648      	mov	r0, r9
 800e044:	f008 f888 	bl	8016158 <create_topic>
 800e048:	61f8      	str	r0, [r7, #28]
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d078      	beq.n	800e140 <rmw_create_subscription+0x1a8>
 800e04e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e056:	2104      	movs	r1, #4
 800e058:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800e05c:	1c42      	adds	r2, r0, #1
 800e05e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800e062:	f002 f847 	bl	80100f4 <uxr_object_id>
 800e066:	6138      	str	r0, [r7, #16]
 800e068:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e06c:	2506      	movs	r5, #6
 800e06e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800e072:	9500      	str	r5, [sp, #0]
 800e074:	6819      	ldr	r1, [r3, #0]
 800e076:	693a      	ldr	r2, [r7, #16]
 800e078:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e07c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e080:	f001 fe58 	bl	800fd34 <uxr_buffer_create_subscriber_bin>
 800e084:	4602      	mov	r2, r0
 800e086:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e08a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e08e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e092:	f000 fc2f 	bl	800e8f4 <run_xrce_session>
 800e096:	2800      	cmp	r0, #0
 800e098:	d04e      	beq.n	800e138 <rmw_create_subscription+0x1a0>
 800e09a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e09e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800e0a8:	1c42      	adds	r2, r0, #1
 800e0aa:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800e0ae:	f002 f821 	bl	80100f4 <uxr_object_id>
 800e0b2:	ae08      	add	r6, sp, #32
 800e0b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	6178      	str	r0, [r7, #20]
 800e0bc:	4641      	mov	r1, r8
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800e0c4:	9305      	str	r3, [sp, #20]
 800e0c6:	f000 fc31 	bl	800e92c <convert_qos_profile>
 800e0ca:	9503      	str	r5, [sp, #12]
 800e0cc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e0d0:	9b05      	ldr	r3, [sp, #20]
 800e0d2:	9001      	str	r0, [sp, #4]
 800e0d4:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e0d8:	691b      	ldr	r3, [r3, #16]
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800e0e0:	f8db 1000 	ldr.w	r1, [fp]
 800e0e4:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800e0e8:	f001 feca 	bl	800fe80 <uxr_buffer_create_datareader_bin>
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e0f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e0f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e0fa:	f000 fbfb 	bl	800e8f4 <run_xrce_session>
 800e0fe:	b1d8      	cbz	r0, 800e138 <rmw_create_subscription+0x1a0>
 800e100:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e104:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e108:	2b02      	cmp	r3, #2
 800e10a:	bf0c      	ite	eq
 800e10c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800e110:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800e114:	9307      	str	r3, [sp, #28]
 800e116:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e11a:	2200      	movs	r2, #0
 800e11c:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800e120:	ab0a      	add	r3, sp, #40	@ 0x28
 800e122:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e126:	9300      	str	r3, [sp, #0]
 800e128:	697a      	ldr	r2, [r7, #20]
 800e12a:	9b07      	ldr	r3, [sp, #28]
 800e12c:	6809      	ldr	r1, [r1, #0]
 800e12e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e132:	f002 f913 	bl	801035c <uxr_buffer_request_data>
 800e136:	e007      	b.n	800e148 <rmw_create_subscription+0x1b0>
 800e138:	69f8      	ldr	r0, [r7, #28]
 800e13a:	b108      	cbz	r0, 800e140 <rmw_create_subscription+0x1a8>
 800e13c:	f000 fad8 	bl	800e6f0 <rmw_uxrce_fini_topic_memory>
 800e140:	4620      	mov	r0, r4
 800e142:	f000 fa93 	bl	800e66c <rmw_uxrce_fini_subscription_memory>
 800e146:	2400      	movs	r4, #0
 800e148:	4620      	mov	r0, r4
 800e14a:	b00d      	add	sp, #52	@ 0x34
 800e14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e150:	20010e4c 	.word	0x20010e4c
 800e154:	08019824 	.word	0x08019824
 800e158:	080197f0 	.word	0x080197f0

0800e15c <rmw_subscription_get_actual_qos>:
 800e15c:	b150      	cbz	r0, 800e174 <rmw_subscription_get_actual_qos+0x18>
 800e15e:	b508      	push	{r3, lr}
 800e160:	460b      	mov	r3, r1
 800e162:	b149      	cbz	r1, 800e178 <rmw_subscription_get_actual_qos+0x1c>
 800e164:	6841      	ldr	r1, [r0, #4]
 800e166:	2250      	movs	r2, #80	@ 0x50
 800e168:	3128      	adds	r1, #40	@ 0x28
 800e16a:	4618      	mov	r0, r3
 800e16c:	f00a fa25 	bl	80185ba <memcpy>
 800e170:	2000      	movs	r0, #0
 800e172:	bd08      	pop	{r3, pc}
 800e174:	200b      	movs	r0, #11
 800e176:	4770      	bx	lr
 800e178:	200b      	movs	r0, #11
 800e17a:	bd08      	pop	{r3, pc}

0800e17c <rmw_destroy_subscription>:
 800e17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e17e:	b128      	cbz	r0, 800e18c <rmw_destroy_subscription+0x10>
 800e180:	4604      	mov	r4, r0
 800e182:	6800      	ldr	r0, [r0, #0]
 800e184:	460d      	mov	r5, r1
 800e186:	f000 fc35 	bl	800e9f4 <is_uxrce_rmw_identifier_valid>
 800e18a:	b910      	cbnz	r0, 800e192 <rmw_destroy_subscription+0x16>
 800e18c:	2401      	movs	r4, #1
 800e18e:	4620      	mov	r0, r4
 800e190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e192:	6863      	ldr	r3, [r4, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d0f9      	beq.n	800e18c <rmw_destroy_subscription+0x10>
 800e198:	2d00      	cmp	r5, #0
 800e19a:	d0f7      	beq.n	800e18c <rmw_destroy_subscription+0x10>
 800e19c:	6828      	ldr	r0, [r5, #0]
 800e19e:	f000 fc29 	bl	800e9f4 <is_uxrce_rmw_identifier_valid>
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	d0f2      	beq.n	800e18c <rmw_destroy_subscription+0x10>
 800e1a6:	686c      	ldr	r4, [r5, #4]
 800e1a8:	2c00      	cmp	r4, #0
 800e1aa:	d0ef      	beq.n	800e18c <rmw_destroy_subscription+0x10>
 800e1ac:	6a26      	ldr	r6, [r4, #32]
 800e1ae:	6962      	ldr	r2, [r4, #20]
 800e1b0:	6930      	ldr	r0, [r6, #16]
 800e1b2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e1b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e1ba:	6819      	ldr	r1, [r3, #0]
 800e1bc:	f002 f908 	bl	80103d0 <uxr_buffer_cancel_data>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	6930      	ldr	r0, [r6, #16]
 800e1c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e1c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e1cc:	f000 fb92 	bl	800e8f4 <run_xrce_session>
 800e1d0:	69e0      	ldr	r0, [r4, #28]
 800e1d2:	f008 f811 	bl	80161f8 <destroy_topic>
 800e1d6:	6a23      	ldr	r3, [r4, #32]
 800e1d8:	6962      	ldr	r2, [r4, #20]
 800e1da:	6918      	ldr	r0, [r3, #16]
 800e1dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e1e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e1e4:	6819      	ldr	r1, [r3, #0]
 800e1e6:	f001 fcc1 	bl	800fb6c <uxr_buffer_delete_entity>
 800e1ea:	6a23      	ldr	r3, [r4, #32]
 800e1ec:	6922      	ldr	r2, [r4, #16]
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e1f4:	4604      	mov	r4, r0
 800e1f6:	6809      	ldr	r1, [r1, #0]
 800e1f8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e1fc:	f001 fcb6 	bl	800fb6c <uxr_buffer_delete_entity>
 800e200:	6937      	ldr	r7, [r6, #16]
 800e202:	4622      	mov	r2, r4
 800e204:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800e208:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800e20c:	4604      	mov	r4, r0
 800e20e:	4638      	mov	r0, r7
 800e210:	f000 fb70 	bl	800e8f4 <run_xrce_session>
 800e214:	6936      	ldr	r6, [r6, #16]
 800e216:	4622      	mov	r2, r4
 800e218:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e21c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e220:	4604      	mov	r4, r0
 800e222:	4630      	mov	r0, r6
 800e224:	f000 fb66 	bl	800e8f4 <run_xrce_session>
 800e228:	b12c      	cbz	r4, 800e236 <rmw_destroy_subscription+0xba>
 800e22a:	b120      	cbz	r0, 800e236 <rmw_destroy_subscription+0xba>
 800e22c:	2400      	movs	r4, #0
 800e22e:	4628      	mov	r0, r5
 800e230:	f000 fa1c 	bl	800e66c <rmw_uxrce_fini_subscription_memory>
 800e234:	e7ab      	b.n	800e18e <rmw_destroy_subscription+0x12>
 800e236:	2402      	movs	r4, #2
 800e238:	e7f9      	b.n	800e22e <rmw_destroy_subscription+0xb2>
 800e23a:	bf00      	nop

0800e23c <rmw_take_with_info>:
 800e23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e23e:	4604      	mov	r4, r0
 800e240:	6800      	ldr	r0, [r0, #0]
 800e242:	b089      	sub	sp, #36	@ 0x24
 800e244:	460f      	mov	r7, r1
 800e246:	4615      	mov	r5, r2
 800e248:	b128      	cbz	r0, 800e256 <rmw_take_with_info+0x1a>
 800e24a:	4b24      	ldr	r3, [pc, #144]	@ (800e2dc <rmw_take_with_info+0xa0>)
 800e24c:	6819      	ldr	r1, [r3, #0]
 800e24e:	f7f1 ffdf 	bl	8000210 <strcmp>
 800e252:	2800      	cmp	r0, #0
 800e254:	d13e      	bne.n	800e2d4 <rmw_take_with_info+0x98>
 800e256:	b305      	cbz	r5, 800e29a <rmw_take_with_info+0x5e>
 800e258:	6864      	ldr	r4, [r4, #4]
 800e25a:	2300      	movs	r3, #0
 800e25c:	702b      	strb	r3, [r5, #0]
 800e25e:	f000 facb 	bl	800e7f8 <rmw_uxrce_clean_expired_static_input_buffer>
 800e262:	4620      	mov	r0, r4
 800e264:	f000 faa0 	bl	800e7a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e268:	4606      	mov	r6, r0
 800e26a:	b1f0      	cbz	r0, 800e2aa <rmw_take_with_info+0x6e>
 800e26c:	6881      	ldr	r1, [r0, #8]
 800e26e:	4668      	mov	r0, sp
 800e270:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800e274:	3110      	adds	r1, #16
 800e276:	f001 fc09 	bl	800fa8c <ucdr_init_buffer>
 800e27a:	69a3      	ldr	r3, [r4, #24]
 800e27c:	4639      	mov	r1, r7
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	4668      	mov	r0, sp
 800e282:	4798      	blx	r3
 800e284:	4631      	mov	r1, r6
 800e286:	4604      	mov	r4, r0
 800e288:	4815      	ldr	r0, [pc, #84]	@ (800e2e0 <rmw_take_with_info+0xa4>)
 800e28a:	f007 fedf 	bl	801604c <put_memory>
 800e28e:	702c      	strb	r4, [r5, #0]
 800e290:	f084 0001 	eor.w	r0, r4, #1
 800e294:	b2c0      	uxtb	r0, r0
 800e296:	b009      	add	sp, #36	@ 0x24
 800e298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e29a:	6864      	ldr	r4, [r4, #4]
 800e29c:	f000 faac 	bl	800e7f8 <rmw_uxrce_clean_expired_static_input_buffer>
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	f000 fa81 	bl	800e7a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e2a6:	4605      	mov	r5, r0
 800e2a8:	b910      	cbnz	r0, 800e2b0 <rmw_take_with_info+0x74>
 800e2aa:	2001      	movs	r0, #1
 800e2ac:	b009      	add	sp, #36	@ 0x24
 800e2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2b0:	68a9      	ldr	r1, [r5, #8]
 800e2b2:	4668      	mov	r0, sp
 800e2b4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800e2b8:	3110      	adds	r1, #16
 800e2ba:	f001 fbe7 	bl	800fa8c <ucdr_init_buffer>
 800e2be:	69a3      	ldr	r3, [r4, #24]
 800e2c0:	4639      	mov	r1, r7
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	4668      	mov	r0, sp
 800e2c6:	4798      	blx	r3
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	4804      	ldr	r0, [pc, #16]	@ (800e2e0 <rmw_take_with_info+0xa4>)
 800e2ce:	f007 febd 	bl	801604c <put_memory>
 800e2d2:	e7dd      	b.n	800e290 <rmw_take_with_info+0x54>
 800e2d4:	200c      	movs	r0, #12
 800e2d6:	b009      	add	sp, #36	@ 0x24
 800e2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	08019f18 	.word	0x08019f18
 800e2e0:	20010e3c 	.word	0x20010e3c

0800e2e4 <rmw_uxrce_transport_init>:
 800e2e4:	b508      	push	{r3, lr}
 800e2e6:	b108      	cbz	r0, 800e2ec <rmw_uxrce_transport_init+0x8>
 800e2e8:	f100 0210 	add.w	r2, r0, #16
 800e2ec:	b139      	cbz	r1, 800e2fe <rmw_uxrce_transport_init+0x1a>
 800e2ee:	6949      	ldr	r1, [r1, #20]
 800e2f0:	4610      	mov	r0, r2
 800e2f2:	f001 fec7 	bl	8010084 <uxr_init_custom_transport>
 800e2f6:	f080 0001 	eor.w	r0, r0, #1
 800e2fa:	b2c0      	uxtb	r0, r0
 800e2fc:	bd08      	pop	{r3, pc}
 800e2fe:	4b04      	ldr	r3, [pc, #16]	@ (800e310 <rmw_uxrce_transport_init+0x2c>)
 800e300:	4610      	mov	r0, r2
 800e302:	6859      	ldr	r1, [r3, #4]
 800e304:	f001 febe 	bl	8010084 <uxr_init_custom_transport>
 800e308:	f080 0001 	eor.w	r0, r0, #1
 800e30c:	b2c0      	uxtb	r0, r0
 800e30e:	bd08      	pop	{r3, pc}
 800e310:	2000c4d4 	.word	0x2000c4d4

0800e314 <rmw_uros_set_publisher_session_timeout>:
 800e314:	b118      	cbz	r0, 800e31e <rmw_uros_set_publisher_session_timeout+0xa>
 800e316:	6843      	ldr	r3, [r0, #4]
 800e318:	2000      	movs	r0, #0
 800e31a:	67d9      	str	r1, [r3, #124]	@ 0x7c
 800e31c:	4770      	bx	lr
 800e31e:	200b      	movs	r0, #11
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop

0800e324 <rmw_uros_set_context_entity_destroy_session_timeout>:
 800e324:	b160      	cbz	r0, 800e340 <rmw_uros_set_context_entity_destroy_session_timeout+0x1c>
 800e326:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800e328:	2900      	cmp	r1, #0
 800e32a:	bfd4      	ite	le
 800e32c:	f503 725f 	addle.w	r2, r3, #892	@ 0x37c
 800e330:	f503 725e 	addgt.w	r2, r3, #888	@ 0x378
 800e334:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
 800e338:	f8c3 1390 	str.w	r1, [r3, #912]	@ 0x390
 800e33c:	2000      	movs	r0, #0
 800e33e:	4770      	bx	lr
 800e340:	200b      	movs	r0, #11
 800e342:	4770      	bx	lr

0800e344 <rmw_uxrce_init_service_memory>:
 800e344:	b1e2      	cbz	r2, 800e380 <rmw_uxrce_init_service_memory+0x3c>
 800e346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e34a:	7b05      	ldrb	r5, [r0, #12]
 800e34c:	4606      	mov	r6, r0
 800e34e:	b9ad      	cbnz	r5, 800e37c <rmw_uxrce_init_service_memory+0x38>
 800e350:	23c8      	movs	r3, #200	@ 0xc8
 800e352:	e9c0 5500 	strd	r5, r5, [r0]
 800e356:	6083      	str	r3, [r0, #8]
 800e358:	f240 1301 	movw	r3, #257	@ 0x101
 800e35c:	4617      	mov	r7, r2
 800e35e:	8183      	strh	r3, [r0, #12]
 800e360:	460c      	mov	r4, r1
 800e362:	46a8      	mov	r8, r5
 800e364:	4621      	mov	r1, r4
 800e366:	4630      	mov	r0, r6
 800e368:	3501      	adds	r5, #1
 800e36a:	f007 fe6f 	bl	801604c <put_memory>
 800e36e:	42af      	cmp	r7, r5
 800e370:	60a4      	str	r4, [r4, #8]
 800e372:	f884 800c 	strb.w	r8, [r4, #12]
 800e376:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e37a:	d1f3      	bne.n	800e364 <rmw_uxrce_init_service_memory+0x20>
 800e37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e380:	4770      	bx	lr
 800e382:	bf00      	nop

0800e384 <rmw_uxrce_init_client_memory>:
 800e384:	b1e2      	cbz	r2, 800e3c0 <rmw_uxrce_init_client_memory+0x3c>
 800e386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e38a:	7b05      	ldrb	r5, [r0, #12]
 800e38c:	4606      	mov	r6, r0
 800e38e:	b9ad      	cbnz	r5, 800e3bc <rmw_uxrce_init_client_memory+0x38>
 800e390:	23c8      	movs	r3, #200	@ 0xc8
 800e392:	e9c0 5500 	strd	r5, r5, [r0]
 800e396:	6083      	str	r3, [r0, #8]
 800e398:	f240 1301 	movw	r3, #257	@ 0x101
 800e39c:	4617      	mov	r7, r2
 800e39e:	8183      	strh	r3, [r0, #12]
 800e3a0:	460c      	mov	r4, r1
 800e3a2:	46a8      	mov	r8, r5
 800e3a4:	4621      	mov	r1, r4
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	3501      	adds	r5, #1
 800e3aa:	f007 fe4f 	bl	801604c <put_memory>
 800e3ae:	42af      	cmp	r7, r5
 800e3b0:	60a4      	str	r4, [r4, #8]
 800e3b2:	f884 800c 	strb.w	r8, [r4, #12]
 800e3b6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e3ba:	d1f3      	bne.n	800e3a4 <rmw_uxrce_init_client_memory+0x20>
 800e3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop

0800e3c4 <rmw_uxrce_init_publisher_memory>:
 800e3c4:	b1e2      	cbz	r2, 800e400 <rmw_uxrce_init_publisher_memory+0x3c>
 800e3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ca:	7b05      	ldrb	r5, [r0, #12]
 800e3cc:	4606      	mov	r6, r0
 800e3ce:	b9ad      	cbnz	r5, 800e3fc <rmw_uxrce_init_publisher_memory+0x38>
 800e3d0:	23d8      	movs	r3, #216	@ 0xd8
 800e3d2:	e9c0 5500 	strd	r5, r5, [r0]
 800e3d6:	6083      	str	r3, [r0, #8]
 800e3d8:	f240 1301 	movw	r3, #257	@ 0x101
 800e3dc:	4617      	mov	r7, r2
 800e3de:	8183      	strh	r3, [r0, #12]
 800e3e0:	460c      	mov	r4, r1
 800e3e2:	46a8      	mov	r8, r5
 800e3e4:	4621      	mov	r1, r4
 800e3e6:	4630      	mov	r0, r6
 800e3e8:	3501      	adds	r5, #1
 800e3ea:	f007 fe2f 	bl	801604c <put_memory>
 800e3ee:	42af      	cmp	r7, r5
 800e3f0:	60a4      	str	r4, [r4, #8]
 800e3f2:	f884 800c 	strb.w	r8, [r4, #12]
 800e3f6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e3fa:	d1f3      	bne.n	800e3e4 <rmw_uxrce_init_publisher_memory+0x20>
 800e3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop

0800e404 <rmw_uxrce_init_subscription_memory>:
 800e404:	b1e2      	cbz	r2, 800e440 <rmw_uxrce_init_subscription_memory+0x3c>
 800e406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e40a:	7b05      	ldrb	r5, [r0, #12]
 800e40c:	4606      	mov	r6, r0
 800e40e:	b9ad      	cbnz	r5, 800e43c <rmw_uxrce_init_subscription_memory+0x38>
 800e410:	23d8      	movs	r3, #216	@ 0xd8
 800e412:	e9c0 5500 	strd	r5, r5, [r0]
 800e416:	6083      	str	r3, [r0, #8]
 800e418:	f240 1301 	movw	r3, #257	@ 0x101
 800e41c:	4617      	mov	r7, r2
 800e41e:	8183      	strh	r3, [r0, #12]
 800e420:	460c      	mov	r4, r1
 800e422:	46a8      	mov	r8, r5
 800e424:	4621      	mov	r1, r4
 800e426:	4630      	mov	r0, r6
 800e428:	3501      	adds	r5, #1
 800e42a:	f007 fe0f 	bl	801604c <put_memory>
 800e42e:	42af      	cmp	r7, r5
 800e430:	60a4      	str	r4, [r4, #8]
 800e432:	f884 800c 	strb.w	r8, [r4, #12]
 800e436:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e43a:	d1f3      	bne.n	800e424 <rmw_uxrce_init_subscription_memory+0x20>
 800e43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e440:	4770      	bx	lr
 800e442:	bf00      	nop

0800e444 <rmw_uxrce_init_node_memory>:
 800e444:	b1e2      	cbz	r2, 800e480 <rmw_uxrce_init_node_memory+0x3c>
 800e446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e44a:	7b05      	ldrb	r5, [r0, #12]
 800e44c:	4606      	mov	r6, r0
 800e44e:	b9ad      	cbnz	r5, 800e47c <rmw_uxrce_init_node_memory+0x38>
 800e450:	23a4      	movs	r3, #164	@ 0xa4
 800e452:	e9c0 5500 	strd	r5, r5, [r0]
 800e456:	6083      	str	r3, [r0, #8]
 800e458:	f240 1301 	movw	r3, #257	@ 0x101
 800e45c:	4617      	mov	r7, r2
 800e45e:	8183      	strh	r3, [r0, #12]
 800e460:	460c      	mov	r4, r1
 800e462:	46a8      	mov	r8, r5
 800e464:	4621      	mov	r1, r4
 800e466:	4630      	mov	r0, r6
 800e468:	3501      	adds	r5, #1
 800e46a:	f007 fdef 	bl	801604c <put_memory>
 800e46e:	42af      	cmp	r7, r5
 800e470:	60a4      	str	r4, [r4, #8]
 800e472:	f884 800c 	strb.w	r8, [r4, #12]
 800e476:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e47a:	d1f3      	bne.n	800e464 <rmw_uxrce_init_node_memory+0x20>
 800e47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e480:	4770      	bx	lr
 800e482:	bf00      	nop

0800e484 <rmw_uxrce_init_session_memory>:
 800e484:	b1ea      	cbz	r2, 800e4c2 <rmw_uxrce_init_session_memory+0x3e>
 800e486:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e48a:	7b05      	ldrb	r5, [r0, #12]
 800e48c:	4606      	mov	r6, r0
 800e48e:	b9b5      	cbnz	r5, 800e4be <rmw_uxrce_init_session_memory+0x3a>
 800e490:	e9c0 5500 	strd	r5, r5, [r0]
 800e494:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e498:	f240 1301 	movw	r3, #257	@ 0x101
 800e49c:	4617      	mov	r7, r2
 800e49e:	f8c0 8008 	str.w	r8, [r0, #8]
 800e4a2:	460c      	mov	r4, r1
 800e4a4:	8183      	strh	r3, [r0, #12]
 800e4a6:	46a9      	mov	r9, r5
 800e4a8:	4621      	mov	r1, r4
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	3501      	adds	r5, #1
 800e4ae:	f007 fdcd 	bl	801604c <put_memory>
 800e4b2:	42af      	cmp	r7, r5
 800e4b4:	60a4      	str	r4, [r4, #8]
 800e4b6:	f884 900c 	strb.w	r9, [r4, #12]
 800e4ba:	4444      	add	r4, r8
 800e4bc:	d1f4      	bne.n	800e4a8 <rmw_uxrce_init_session_memory+0x24>
 800e4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c2:	4770      	bx	lr

0800e4c4 <rmw_uxrce_init_topic_memory>:
 800e4c4:	b1e2      	cbz	r2, 800e500 <rmw_uxrce_init_topic_memory+0x3c>
 800e4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ca:	7b05      	ldrb	r5, [r0, #12]
 800e4cc:	4606      	mov	r6, r0
 800e4ce:	b9ad      	cbnz	r5, 800e4fc <rmw_uxrce_init_topic_memory+0x38>
 800e4d0:	231c      	movs	r3, #28
 800e4d2:	e9c0 5500 	strd	r5, r5, [r0]
 800e4d6:	6083      	str	r3, [r0, #8]
 800e4d8:	f240 1301 	movw	r3, #257	@ 0x101
 800e4dc:	4617      	mov	r7, r2
 800e4de:	8183      	strh	r3, [r0, #12]
 800e4e0:	460c      	mov	r4, r1
 800e4e2:	46a8      	mov	r8, r5
 800e4e4:	4621      	mov	r1, r4
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	3501      	adds	r5, #1
 800e4ea:	f007 fdaf 	bl	801604c <put_memory>
 800e4ee:	42af      	cmp	r7, r5
 800e4f0:	60a4      	str	r4, [r4, #8]
 800e4f2:	f884 800c 	strb.w	r8, [r4, #12]
 800e4f6:	f104 041c 	add.w	r4, r4, #28
 800e4fa:	d1f3      	bne.n	800e4e4 <rmw_uxrce_init_topic_memory+0x20>
 800e4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e500:	4770      	bx	lr
 800e502:	bf00      	nop

0800e504 <rmw_uxrce_init_static_input_buffer_memory>:
 800e504:	b1ea      	cbz	r2, 800e542 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50a:	7b05      	ldrb	r5, [r0, #12]
 800e50c:	4606      	mov	r6, r0
 800e50e:	b9b5      	cbnz	r5, 800e53e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e510:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e514:	e9c0 5500 	strd	r5, r5, [r0]
 800e518:	6083      	str	r3, [r0, #8]
 800e51a:	f240 1301 	movw	r3, #257	@ 0x101
 800e51e:	4617      	mov	r7, r2
 800e520:	8183      	strh	r3, [r0, #12]
 800e522:	460c      	mov	r4, r1
 800e524:	46a8      	mov	r8, r5
 800e526:	4621      	mov	r1, r4
 800e528:	4630      	mov	r0, r6
 800e52a:	3501      	adds	r5, #1
 800e52c:	f007 fd8e 	bl	801604c <put_memory>
 800e530:	42af      	cmp	r7, r5
 800e532:	60a4      	str	r4, [r4, #8]
 800e534:	f884 800c 	strb.w	r8, [r4, #12]
 800e538:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e53c:	d1f3      	bne.n	800e526 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e542:	4770      	bx	lr

0800e544 <rmw_uxrce_init_init_options_impl_memory>:
 800e544:	b1e2      	cbz	r2, 800e580 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e54a:	7b05      	ldrb	r5, [r0, #12]
 800e54c:	4606      	mov	r6, r0
 800e54e:	b9ad      	cbnz	r5, 800e57c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e550:	232c      	movs	r3, #44	@ 0x2c
 800e552:	e9c0 5500 	strd	r5, r5, [r0]
 800e556:	6083      	str	r3, [r0, #8]
 800e558:	f240 1301 	movw	r3, #257	@ 0x101
 800e55c:	4617      	mov	r7, r2
 800e55e:	8183      	strh	r3, [r0, #12]
 800e560:	460c      	mov	r4, r1
 800e562:	46a8      	mov	r8, r5
 800e564:	4621      	mov	r1, r4
 800e566:	4630      	mov	r0, r6
 800e568:	3501      	adds	r5, #1
 800e56a:	f007 fd6f 	bl	801604c <put_memory>
 800e56e:	42af      	cmp	r7, r5
 800e570:	60a4      	str	r4, [r4, #8]
 800e572:	f884 800c 	strb.w	r8, [r4, #12]
 800e576:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e57a:	d1f3      	bne.n	800e564 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop

0800e584 <rmw_uxrce_init_wait_set_memory>:
 800e584:	b1e2      	cbz	r2, 800e5c0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e58a:	7b05      	ldrb	r5, [r0, #12]
 800e58c:	4606      	mov	r6, r0
 800e58e:	b9ad      	cbnz	r5, 800e5bc <rmw_uxrce_init_wait_set_memory+0x38>
 800e590:	231c      	movs	r3, #28
 800e592:	e9c0 5500 	strd	r5, r5, [r0]
 800e596:	6083      	str	r3, [r0, #8]
 800e598:	f240 1301 	movw	r3, #257	@ 0x101
 800e59c:	4617      	mov	r7, r2
 800e59e:	8183      	strh	r3, [r0, #12]
 800e5a0:	460c      	mov	r4, r1
 800e5a2:	46a8      	mov	r8, r5
 800e5a4:	4621      	mov	r1, r4
 800e5a6:	4630      	mov	r0, r6
 800e5a8:	3501      	adds	r5, #1
 800e5aa:	f007 fd4f 	bl	801604c <put_memory>
 800e5ae:	42af      	cmp	r7, r5
 800e5b0:	60a4      	str	r4, [r4, #8]
 800e5b2:	f884 800c 	strb.w	r8, [r4, #12]
 800e5b6:	f104 041c 	add.w	r4, r4, #28
 800e5ba:	d1f3      	bne.n	800e5a4 <rmw_uxrce_init_wait_set_memory+0x20>
 800e5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5c0:	4770      	bx	lr
 800e5c2:	bf00      	nop

0800e5c4 <rmw_uxrce_init_guard_condition_memory>:
 800e5c4:	b1e2      	cbz	r2, 800e600 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ca:	7b05      	ldrb	r5, [r0, #12]
 800e5cc:	4606      	mov	r6, r0
 800e5ce:	b9ad      	cbnz	r5, 800e5fc <rmw_uxrce_init_guard_condition_memory+0x38>
 800e5d0:	2320      	movs	r3, #32
 800e5d2:	e9c0 5500 	strd	r5, r5, [r0]
 800e5d6:	6083      	str	r3, [r0, #8]
 800e5d8:	f240 1301 	movw	r3, #257	@ 0x101
 800e5dc:	4617      	mov	r7, r2
 800e5de:	8183      	strh	r3, [r0, #12]
 800e5e0:	460c      	mov	r4, r1
 800e5e2:	46a8      	mov	r8, r5
 800e5e4:	4621      	mov	r1, r4
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	3501      	adds	r5, #1
 800e5ea:	f007 fd2f 	bl	801604c <put_memory>
 800e5ee:	42af      	cmp	r7, r5
 800e5f0:	60a4      	str	r4, [r4, #8]
 800e5f2:	f884 800c 	strb.w	r8, [r4, #12]
 800e5f6:	f104 0420 	add.w	r4, r4, #32
 800e5fa:	d1f3      	bne.n	800e5e4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800e5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop

0800e604 <rmw_uxrce_fini_session_memory>:
 800e604:	4601      	mov	r1, r0
 800e606:	4801      	ldr	r0, [pc, #4]	@ (800e60c <rmw_uxrce_fini_session_memory+0x8>)
 800e608:	f007 bd20 	b.w	801604c <put_memory>
 800e60c:	20010e2c 	.word	0x20010e2c

0800e610 <rmw_uxrce_fini_node_memory>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	4604      	mov	r4, r0
 800e614:	6800      	ldr	r0, [r0, #0]
 800e616:	b128      	cbz	r0, 800e624 <rmw_uxrce_fini_node_memory+0x14>
 800e618:	4b07      	ldr	r3, [pc, #28]	@ (800e638 <rmw_uxrce_fini_node_memory+0x28>)
 800e61a:	6819      	ldr	r1, [r3, #0]
 800e61c:	f7f1 fdf8 	bl	8000210 <strcmp>
 800e620:	b940      	cbnz	r0, 800e634 <rmw_uxrce_fini_node_memory+0x24>
 800e622:	6020      	str	r0, [r4, #0]
 800e624:	6861      	ldr	r1, [r4, #4]
 800e626:	b129      	cbz	r1, 800e634 <rmw_uxrce_fini_node_memory+0x24>
 800e628:	2500      	movs	r5, #0
 800e62a:	4804      	ldr	r0, [pc, #16]	@ (800e63c <rmw_uxrce_fini_node_memory+0x2c>)
 800e62c:	610d      	str	r5, [r1, #16]
 800e62e:	f007 fd0d 	bl	801604c <put_memory>
 800e632:	6065      	str	r5, [r4, #4]
 800e634:	bd38      	pop	{r3, r4, r5, pc}
 800e636:	bf00      	nop
 800e638:	08019f18 	.word	0x08019f18
 800e63c:	20010dfc 	.word	0x20010dfc

0800e640 <rmw_uxrce_fini_publisher_memory>:
 800e640:	b510      	push	{r4, lr}
 800e642:	4604      	mov	r4, r0
 800e644:	6800      	ldr	r0, [r0, #0]
 800e646:	b128      	cbz	r0, 800e654 <rmw_uxrce_fini_publisher_memory+0x14>
 800e648:	4b06      	ldr	r3, [pc, #24]	@ (800e664 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e64a:	6819      	ldr	r1, [r3, #0]
 800e64c:	f7f1 fde0 	bl	8000210 <strcmp>
 800e650:	b938      	cbnz	r0, 800e662 <rmw_uxrce_fini_publisher_memory+0x22>
 800e652:	6020      	str	r0, [r4, #0]
 800e654:	6861      	ldr	r1, [r4, #4]
 800e656:	b121      	cbz	r1, 800e662 <rmw_uxrce_fini_publisher_memory+0x22>
 800e658:	4803      	ldr	r0, [pc, #12]	@ (800e668 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e65a:	f007 fcf7 	bl	801604c <put_memory>
 800e65e:	2300      	movs	r3, #0
 800e660:	6063      	str	r3, [r4, #4]
 800e662:	bd10      	pop	{r4, pc}
 800e664:	08019f18 	.word	0x08019f18
 800e668:	20010e0c 	.word	0x20010e0c

0800e66c <rmw_uxrce_fini_subscription_memory>:
 800e66c:	b510      	push	{r4, lr}
 800e66e:	4604      	mov	r4, r0
 800e670:	6800      	ldr	r0, [r0, #0]
 800e672:	b128      	cbz	r0, 800e680 <rmw_uxrce_fini_subscription_memory+0x14>
 800e674:	4b06      	ldr	r3, [pc, #24]	@ (800e690 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e676:	6819      	ldr	r1, [r3, #0]
 800e678:	f7f1 fdca 	bl	8000210 <strcmp>
 800e67c:	b938      	cbnz	r0, 800e68e <rmw_uxrce_fini_subscription_memory+0x22>
 800e67e:	6020      	str	r0, [r4, #0]
 800e680:	6861      	ldr	r1, [r4, #4]
 800e682:	b121      	cbz	r1, 800e68e <rmw_uxrce_fini_subscription_memory+0x22>
 800e684:	4803      	ldr	r0, [pc, #12]	@ (800e694 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e686:	f007 fce1 	bl	801604c <put_memory>
 800e68a:	2300      	movs	r3, #0
 800e68c:	6063      	str	r3, [r4, #4]
 800e68e:	bd10      	pop	{r4, pc}
 800e690:	08019f18 	.word	0x08019f18
 800e694:	20010e4c 	.word	0x20010e4c

0800e698 <rmw_uxrce_fini_service_memory>:
 800e698:	b510      	push	{r4, lr}
 800e69a:	4604      	mov	r4, r0
 800e69c:	6800      	ldr	r0, [r0, #0]
 800e69e:	b128      	cbz	r0, 800e6ac <rmw_uxrce_fini_service_memory+0x14>
 800e6a0:	4b06      	ldr	r3, [pc, #24]	@ (800e6bc <rmw_uxrce_fini_service_memory+0x24>)
 800e6a2:	6819      	ldr	r1, [r3, #0]
 800e6a4:	f7f1 fdb4 	bl	8000210 <strcmp>
 800e6a8:	b938      	cbnz	r0, 800e6ba <rmw_uxrce_fini_service_memory+0x22>
 800e6aa:	6020      	str	r0, [r4, #0]
 800e6ac:	6861      	ldr	r1, [r4, #4]
 800e6ae:	b121      	cbz	r1, 800e6ba <rmw_uxrce_fini_service_memory+0x22>
 800e6b0:	4803      	ldr	r0, [pc, #12]	@ (800e6c0 <rmw_uxrce_fini_service_memory+0x28>)
 800e6b2:	f007 fccb 	bl	801604c <put_memory>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	6063      	str	r3, [r4, #4]
 800e6ba:	bd10      	pop	{r4, pc}
 800e6bc:	08019f18 	.word	0x08019f18
 800e6c0:	20010e1c 	.word	0x20010e1c

0800e6c4 <rmw_uxrce_fini_client_memory>:
 800e6c4:	b510      	push	{r4, lr}
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	6800      	ldr	r0, [r0, #0]
 800e6ca:	b128      	cbz	r0, 800e6d8 <rmw_uxrce_fini_client_memory+0x14>
 800e6cc:	4b06      	ldr	r3, [pc, #24]	@ (800e6e8 <rmw_uxrce_fini_client_memory+0x24>)
 800e6ce:	6819      	ldr	r1, [r3, #0]
 800e6d0:	f7f1 fd9e 	bl	8000210 <strcmp>
 800e6d4:	b938      	cbnz	r0, 800e6e6 <rmw_uxrce_fini_client_memory+0x22>
 800e6d6:	6020      	str	r0, [r4, #0]
 800e6d8:	6861      	ldr	r1, [r4, #4]
 800e6da:	b121      	cbz	r1, 800e6e6 <rmw_uxrce_fini_client_memory+0x22>
 800e6dc:	4803      	ldr	r0, [pc, #12]	@ (800e6ec <rmw_uxrce_fini_client_memory+0x28>)
 800e6de:	f007 fcb5 	bl	801604c <put_memory>
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	6063      	str	r3, [r4, #4]
 800e6e6:	bd10      	pop	{r4, pc}
 800e6e8:	08019f18 	.word	0x08019f18
 800e6ec:	2000c52c 	.word	0x2000c52c

0800e6f0 <rmw_uxrce_fini_topic_memory>:
 800e6f0:	b510      	push	{r4, lr}
 800e6f2:	4604      	mov	r4, r0
 800e6f4:	4621      	mov	r1, r4
 800e6f6:	4803      	ldr	r0, [pc, #12]	@ (800e704 <rmw_uxrce_fini_topic_memory+0x14>)
 800e6f8:	f007 fca8 	bl	801604c <put_memory>
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	61a3      	str	r3, [r4, #24]
 800e700:	bd10      	pop	{r4, pc}
 800e702:	bf00      	nop
 800e704:	20010e5c 	.word	0x20010e5c

0800e708 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e708:	b082      	sub	sp, #8
 800e70a:	b530      	push	{r4, r5, lr}
 800e70c:	4925      	ldr	r1, [pc, #148]	@ (800e7a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e70e:	680d      	ldr	r5, [r1, #0]
 800e710:	ac03      	add	r4, sp, #12
 800e712:	e884 000c 	stmia.w	r4, {r2, r3}
 800e716:	461c      	mov	r4, r3
 800e718:	2d00      	cmp	r5, #0
 800e71a:	d041      	beq.n	800e7a0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800e71c:	462b      	mov	r3, r5
 800e71e:	2100      	movs	r1, #0
 800e720:	689a      	ldr	r2, [r3, #8]
 800e722:	685b      	ldr	r3, [r3, #4]
 800e724:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800e728:	4290      	cmp	r0, r2
 800e72a:	bf08      	it	eq
 800e72c:	3101      	addeq	r1, #1
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1f6      	bne.n	800e720 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e732:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e736:	2b02      	cmp	r3, #2
 800e738:	d029      	beq.n	800e78e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e73a:	d907      	bls.n	800e74c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e73c:	2b03      	cmp	r3, #3
 800e73e:	d005      	beq.n	800e74c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e740:	2100      	movs	r1, #0
 800e742:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e746:	4608      	mov	r0, r1
 800e748:	b002      	add	sp, #8
 800e74a:	4770      	bx	lr
 800e74c:	b314      	cbz	r4, 800e794 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e74e:	428c      	cmp	r4, r1
 800e750:	d820      	bhi.n	800e794 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e752:	2d00      	cmp	r5, #0
 800e754:	d0f4      	beq.n	800e740 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e756:	2100      	movs	r1, #0
 800e758:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e75c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e760:	e002      	b.n	800e768 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e762:	686d      	ldr	r5, [r5, #4]
 800e764:	2d00      	cmp	r5, #0
 800e766:	d0ec      	beq.n	800e742 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e768:	68ab      	ldr	r3, [r5, #8]
 800e76a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e76e:	4290      	cmp	r0, r2
 800e770:	d1f7      	bne.n	800e762 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e772:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e776:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e77a:	4562      	cmp	r2, ip
 800e77c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e780:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e784:	daed      	bge.n	800e762 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e786:	4694      	mov	ip, r2
 800e788:	461c      	mov	r4, r3
 800e78a:	4629      	mov	r1, r5
 800e78c:	e7e9      	b.n	800e762 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e78e:	b10c      	cbz	r4, 800e794 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e790:	428c      	cmp	r4, r1
 800e792:	d9d5      	bls.n	800e740 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e798:	4802      	ldr	r0, [pc, #8]	@ (800e7a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e79a:	b002      	add	sp, #8
 800e79c:	f007 bc46 	b.w	801602c <get_memory>
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	e7c6      	b.n	800e732 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e7a4:	20010e3c 	.word	0x20010e3c

0800e7a8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e7a8:	4b11      	ldr	r3, [pc, #68]	@ (800e7f0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	b530      	push	{r4, r5, lr}
 800e7ae:	b1e3      	cbz	r3, 800e7ea <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e7b0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e7b4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e7b8:	2400      	movs	r4, #0
 800e7ba:	e001      	b.n	800e7c0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	b193      	cbz	r3, 800e7e6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e7c0:	689a      	ldr	r2, [r3, #8]
 800e7c2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e7c6:	4288      	cmp	r0, r1
 800e7c8:	d1f8      	bne.n	800e7bc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e7ca:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e7ce:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e7d2:	4571      	cmp	r1, lr
 800e7d4:	eb72 050c 	sbcs.w	r5, r2, ip
 800e7d8:	daf0      	bge.n	800e7bc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e7da:	461c      	mov	r4, r3
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	468e      	mov	lr, r1
 800e7e0:	4694      	mov	ip, r2
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1ec      	bne.n	800e7c0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	bd30      	pop	{r4, r5, pc}
 800e7ea:	461c      	mov	r4, r3
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	bd30      	pop	{r4, r5, pc}
 800e7f0:	20010e3c 	.word	0x20010e3c
 800e7f4:	00000000 	.word	0x00000000

0800e7f8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fc:	4b3c      	ldr	r3, [pc, #240]	@ (800e8f0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e7fe:	ed2d 8b06 	vpush	{d8-d10}
 800e802:	681f      	ldr	r7, [r3, #0]
 800e804:	b08d      	sub	sp, #52	@ 0x34
 800e806:	f008 f811 	bl	801682c <rmw_uros_epoch_nanos>
 800e80a:	2f00      	cmp	r7, #0
 800e80c:	d05d      	beq.n	800e8ca <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e80e:	46b8      	mov	r8, r7
 800e810:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e8d8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e814:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e818:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e81c:	2b04      	cmp	r3, #4
 800e81e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e8e0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e822:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e8e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e826:	4681      	mov	r9, r0
 800e828:	468a      	mov	sl, r1
 800e82a:	ac04      	add	r4, sp, #16
 800e82c:	d03f      	beq.n	800e8ae <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e82e:	2b05      	cmp	r3, #5
 800e830:	d044      	beq.n	800e8bc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e832:	2b03      	cmp	r3, #3
 800e834:	d03b      	beq.n	800e8ae <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e836:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e83a:	ed8d ab06 	vstr	d10, [sp, #24]
 800e83e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e842:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e846:	ab08      	add	r3, sp, #32
 800e848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e84a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e84e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e852:	f007 fa09 	bl	8015c68 <rmw_time_equal>
 800e856:	b118      	cbz	r0, 800e860 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e858:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e85c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e860:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e864:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e868:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e86c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e870:	f007 fa4e 	bl	8015d10 <rmw_time_total_nsec>
 800e874:	1830      	adds	r0, r6, r0
 800e876:	eb47 0101 	adc.w	r1, r7, r1
 800e87a:	4548      	cmp	r0, r9
 800e87c:	eb71 030a 	sbcs.w	r3, r1, sl
 800e880:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e884:	db05      	blt.n	800e892 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e886:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e88a:	4591      	cmp	r9, r2
 800e88c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e890:	da03      	bge.n	800e89a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e892:	4817      	ldr	r0, [pc, #92]	@ (800e8f0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e894:	4641      	mov	r1, r8
 800e896:	f007 fbd9 	bl	801604c <put_memory>
 800e89a:	f1bb 0f00 	cmp.w	fp, #0
 800e89e:	d014      	beq.n	800e8ca <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e8a0:	46d8      	mov	r8, fp
 800e8a2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e8a6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e8aa:	2b04      	cmp	r3, #4
 800e8ac:	d1bf      	bne.n	800e82e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e8ae:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e8b2:	3340      	adds	r3, #64	@ 0x40
 800e8b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e8ba:	e7c0      	b.n	800e83e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e8bc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e8c0:	3348      	adds	r3, #72	@ 0x48
 800e8c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e8c8:	e7b9      	b.n	800e83e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e8ca:	b00d      	add	sp, #52	@ 0x34
 800e8cc:	ecbd 8b06 	vpop	{d8-d10}
 800e8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8d4:	f3af 8000 	nop.w
	...
 800e8e0:	00000001 	.word	0x00000001
 800e8e4:	00000000 	.word	0x00000000
 800e8e8:	0000001e 	.word	0x0000001e
 800e8ec:	00000000 	.word	0x00000000
 800e8f0:	20010e3c 	.word	0x20010e3c

0800e8f4 <run_xrce_session>:
 800e8f4:	b510      	push	{r4, lr}
 800e8f6:	788c      	ldrb	r4, [r1, #2]
 800e8f8:	b086      	sub	sp, #24
 800e8fa:	2c01      	cmp	r4, #1
 800e8fc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e900:	d00c      	beq.n	800e91c <run_xrce_session+0x28>
 800e902:	4619      	mov	r1, r3
 800e904:	2301      	movs	r3, #1
 800e906:	9300      	str	r3, [sp, #0]
 800e908:	f10d 020e 	add.w	r2, sp, #14
 800e90c:	f10d 0317 	add.w	r3, sp, #23
 800e910:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e914:	f002 fb56 	bl	8010fc4 <uxr_run_session_until_all_status>
 800e918:	b006      	add	sp, #24
 800e91a:	bd10      	pop	{r4, pc}
 800e91c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e920:	f001 ff6a 	bl	80107f8 <uxr_flash_output_streams>
 800e924:	4620      	mov	r0, r4
 800e926:	b006      	add	sp, #24
 800e928:	bd10      	pop	{r4, pc}
 800e92a:	bf00      	nop

0800e92c <convert_qos_profile>:
 800e92c:	7a4a      	ldrb	r2, [r1, #9]
 800e92e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e932:	2a02      	cmp	r2, #2
 800e934:	bf18      	it	ne
 800e936:	2200      	movne	r2, #0
 800e938:	7002      	strb	r2, [r0, #0]
 800e93a:	780a      	ldrb	r2, [r1, #0]
 800e93c:	8889      	ldrh	r1, [r1, #4]
 800e93e:	8081      	strh	r1, [r0, #4]
 800e940:	f1ac 0c02 	sub.w	ip, ip, #2
 800e944:	f1a2 0202 	sub.w	r2, r2, #2
 800e948:	fabc fc8c 	clz	ip, ip
 800e94c:	fab2 f282 	clz	r2, r2
 800e950:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e954:	0952      	lsrs	r2, r2, #5
 800e956:	f880 c001 	strb.w	ip, [r0, #1]
 800e95a:	7082      	strb	r2, [r0, #2]
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop

0800e960 <generate_type_name>:
 800e960:	b530      	push	{r4, r5, lr}
 800e962:	2300      	movs	r3, #0
 800e964:	700b      	strb	r3, [r1, #0]
 800e966:	6803      	ldr	r3, [r0, #0]
 800e968:	b087      	sub	sp, #28
 800e96a:	4614      	mov	r4, r2
 800e96c:	b1d3      	cbz	r3, 800e9a4 <generate_type_name+0x44>
 800e96e:	4a0f      	ldr	r2, [pc, #60]	@ (800e9ac <generate_type_name+0x4c>)
 800e970:	4615      	mov	r5, r2
 800e972:	9203      	str	r2, [sp, #12]
 800e974:	9500      	str	r5, [sp, #0]
 800e976:	6842      	ldr	r2, [r0, #4]
 800e978:	480d      	ldr	r0, [pc, #52]	@ (800e9b0 <generate_type_name+0x50>)
 800e97a:	9001      	str	r0, [sp, #4]
 800e97c:	4608      	mov	r0, r1
 800e97e:	490d      	ldr	r1, [pc, #52]	@ (800e9b4 <generate_type_name+0x54>)
 800e980:	9204      	str	r2, [sp, #16]
 800e982:	9105      	str	r1, [sp, #20]
 800e984:	9102      	str	r1, [sp, #8]
 800e986:	4a0c      	ldr	r2, [pc, #48]	@ (800e9b8 <generate_type_name+0x58>)
 800e988:	4621      	mov	r1, r4
 800e98a:	f009 fc0f 	bl	80181ac <sniprintf>
 800e98e:	2800      	cmp	r0, #0
 800e990:	db05      	blt.n	800e99e <generate_type_name+0x3e>
 800e992:	4284      	cmp	r4, r0
 800e994:	bfd4      	ite	le
 800e996:	2000      	movle	r0, #0
 800e998:	2001      	movgt	r0, #1
 800e99a:	b007      	add	sp, #28
 800e99c:	bd30      	pop	{r4, r5, pc}
 800e99e:	2000      	movs	r0, #0
 800e9a0:	b007      	add	sp, #28
 800e9a2:	bd30      	pop	{r4, r5, pc}
 800e9a4:	4b05      	ldr	r3, [pc, #20]	@ (800e9bc <generate_type_name+0x5c>)
 800e9a6:	4a01      	ldr	r2, [pc, #4]	@ (800e9ac <generate_type_name+0x4c>)
 800e9a8:	461d      	mov	r5, r3
 800e9aa:	e7e2      	b.n	800e972 <generate_type_name+0x12>
 800e9ac:	08019814 	.word	0x08019814
 800e9b0:	0801982c 	.word	0x0801982c
 800e9b4:	08019828 	.word	0x08019828
 800e9b8:	08019818 	.word	0x08019818
 800e9bc:	08019614 	.word	0x08019614

0800e9c0 <generate_topic_name>:
 800e9c0:	b510      	push	{r4, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	4614      	mov	r4, r2
 800e9c6:	9000      	str	r0, [sp, #0]
 800e9c8:	4b08      	ldr	r3, [pc, #32]	@ (800e9ec <generate_topic_name+0x2c>)
 800e9ca:	4a09      	ldr	r2, [pc, #36]	@ (800e9f0 <generate_topic_name+0x30>)
 800e9cc:	4608      	mov	r0, r1
 800e9ce:	4621      	mov	r1, r4
 800e9d0:	f009 fbec 	bl	80181ac <sniprintf>
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	db05      	blt.n	800e9e4 <generate_topic_name+0x24>
 800e9d8:	4284      	cmp	r4, r0
 800e9da:	bfd4      	ite	le
 800e9dc:	2000      	movle	r0, #0
 800e9de:	2001      	movgt	r0, #1
 800e9e0:	b002      	add	sp, #8
 800e9e2:	bd10      	pop	{r4, pc}
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	b002      	add	sp, #8
 800e9e8:	bd10      	pop	{r4, pc}
 800e9ea:	bf00      	nop
 800e9ec:	08019be8 	.word	0x08019be8
 800e9f0:	080194c0 	.word	0x080194c0

0800e9f4 <is_uxrce_rmw_identifier_valid>:
 800e9f4:	b510      	push	{r4, lr}
 800e9f6:	4604      	mov	r4, r0
 800e9f8:	b140      	cbz	r0, 800ea0c <is_uxrce_rmw_identifier_valid+0x18>
 800e9fa:	f007 fb7f 	bl	80160fc <rmw_get_implementation_identifier>
 800e9fe:	4601      	mov	r1, r0
 800ea00:	4620      	mov	r0, r4
 800ea02:	f7f1 fc05 	bl	8000210 <strcmp>
 800ea06:	fab0 f080 	clz	r0, r0
 800ea0a:	0940      	lsrs	r0, r0, #5
 800ea0c:	bd10      	pop	{r4, pc}
 800ea0e:	bf00      	nop

0800ea10 <get_message_typesupport_handle>:
 800ea10:	6883      	ldr	r3, [r0, #8]
 800ea12:	4718      	bx	r3

0800ea14 <get_message_typesupport_handle_function>:
 800ea14:	b510      	push	{r4, lr}
 800ea16:	4604      	mov	r4, r0
 800ea18:	6800      	ldr	r0, [r0, #0]
 800ea1a:	f7f1 fbf9 	bl	8000210 <strcmp>
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	bf0c      	ite	eq
 800ea22:	4620      	moveq	r0, r4
 800ea24:	2000      	movne	r0, #0
 800ea26:	bd10      	pop	{r4, pc}

0800ea28 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ea28:	4b04      	ldr	r3, [pc, #16]	@ (800ea3c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	b10a      	cbz	r2, 800ea32 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800ea2e:	4803      	ldr	r0, [pc, #12]	@ (800ea3c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ea30:	4770      	bx	lr
 800ea32:	4a03      	ldr	r2, [pc, #12]	@ (800ea40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800ea34:	4801      	ldr	r0, [pc, #4]	@ (800ea3c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ea36:	6812      	ldr	r2, [r2, #0]
 800ea38:	601a      	str	r2, [r3, #0]
 800ea3a:	4770      	bx	lr
 800ea3c:	20000048 	.word	0x20000048
 800ea40:	200000c4 	.word	0x200000c4

0800ea44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ea44:	4a02      	ldr	r2, [pc, #8]	@ (800ea50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800ea46:	4b03      	ldr	r3, [pc, #12]	@ (800ea54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800ea48:	6812      	ldr	r2, [r2, #0]
 800ea4a:	601a      	str	r2, [r3, #0]
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop
 800ea50:	200000c4 	.word	0x200000c4
 800ea54:	20000048 	.word	0x20000048

0800ea58 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800ea58:	f007 bf24 	b.w	80168a4 <std_msgs__msg__Int32__init>

0800ea5c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800ea5c:	f007 bf26 	b.w	80168ac <std_msgs__msg__Int32__fini>

0800ea60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ea60:	4b04      	ldr	r3, [pc, #16]	@ (800ea74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ea62:	681a      	ldr	r2, [r3, #0]
 800ea64:	b10a      	cbz	r2, 800ea6a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800ea66:	4803      	ldr	r0, [pc, #12]	@ (800ea74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ea68:	4770      	bx	lr
 800ea6a:	4a03      	ldr	r2, [pc, #12]	@ (800ea78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800ea6c:	4801      	ldr	r0, [pc, #4]	@ (800ea74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ea6e:	6812      	ldr	r2, [r2, #0]
 800ea70:	601a      	str	r2, [r3, #0]
 800ea72:	4770      	bx	lr
 800ea74:	20000090 	.word	0x20000090
 800ea78:	200000c8 	.word	0x200000c8

0800ea7c <_Int32__max_serialized_size>:
 800ea7c:	b508      	push	{r3, lr}
 800ea7e:	2104      	movs	r1, #4
 800ea80:	2000      	movs	r0, #0
 800ea82:	f001 f807 	bl	800fa94 <ucdr_alignment>
 800ea86:	3004      	adds	r0, #4
 800ea88:	bd08      	pop	{r3, pc}
 800ea8a:	bf00      	nop

0800ea8c <_Int32__cdr_deserialize>:
 800ea8c:	b109      	cbz	r1, 800ea92 <_Int32__cdr_deserialize+0x6>
 800ea8e:	f000 bf19 	b.w	800f8c4 <ucdr_deserialize_int32_t>
 800ea92:	4608      	mov	r0, r1
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop

0800ea98 <get_serialized_size_std_msgs__msg__Int32>:
 800ea98:	b138      	cbz	r0, 800eaaa <get_serialized_size_std_msgs__msg__Int32+0x12>
 800ea9a:	b508      	push	{r3, lr}
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	2104      	movs	r1, #4
 800eaa2:	f000 fff7 	bl	800fa94 <ucdr_alignment>
 800eaa6:	3004      	adds	r0, #4
 800eaa8:	bd08      	pop	{r3, pc}
 800eaaa:	4770      	bx	lr

0800eaac <_Int32__cdr_serialize>:
 800eaac:	460a      	mov	r2, r1
 800eaae:	b118      	cbz	r0, 800eab8 <_Int32__cdr_serialize+0xc>
 800eab0:	6801      	ldr	r1, [r0, #0]
 800eab2:	4610      	mov	r0, r2
 800eab4:	f000 be6e 	b.w	800f794 <ucdr_serialize_int32_t>
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop

0800eabc <_Int32__get_serialized_size>:
 800eabc:	b130      	cbz	r0, 800eacc <_Int32__get_serialized_size+0x10>
 800eabe:	b508      	push	{r3, lr}
 800eac0:	2104      	movs	r1, #4
 800eac2:	2000      	movs	r0, #0
 800eac4:	f000 ffe6 	bl	800fa94 <ucdr_alignment>
 800eac8:	3004      	adds	r0, #4
 800eaca:	bd08      	pop	{r3, pc}
 800eacc:	4770      	bx	lr
 800eace:	bf00      	nop

0800ead0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ead0:	4800      	ldr	r0, [pc, #0]	@ (800ead4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800ead2:	4770      	bx	lr
 800ead4:	2000009c 	.word	0x2000009c

0800ead8 <ucdr_serialize_bool>:
 800ead8:	b538      	push	{r3, r4, r5, lr}
 800eada:	460d      	mov	r5, r1
 800eadc:	2101      	movs	r1, #1
 800eade:	4604      	mov	r4, r0
 800eae0:	f000 ff8c 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800eae4:	b148      	cbz	r0, 800eafa <ucdr_serialize_bool+0x22>
 800eae6:	68a3      	ldr	r3, [r4, #8]
 800eae8:	701d      	strb	r5, [r3, #0]
 800eaea:	68a2      	ldr	r2, [r4, #8]
 800eaec:	6923      	ldr	r3, [r4, #16]
 800eaee:	2101      	movs	r1, #1
 800eaf0:	440a      	add	r2, r1
 800eaf2:	440b      	add	r3, r1
 800eaf4:	60a2      	str	r2, [r4, #8]
 800eaf6:	6123      	str	r3, [r4, #16]
 800eaf8:	7561      	strb	r1, [r4, #21]
 800eafa:	7da0      	ldrb	r0, [r4, #22]
 800eafc:	f080 0001 	eor.w	r0, r0, #1
 800eb00:	bd38      	pop	{r3, r4, r5, pc}
 800eb02:	bf00      	nop

0800eb04 <ucdr_deserialize_bool>:
 800eb04:	b538      	push	{r3, r4, r5, lr}
 800eb06:	460d      	mov	r5, r1
 800eb08:	2101      	movs	r1, #1
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	f000 ff76 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800eb10:	b160      	cbz	r0, 800eb2c <ucdr_deserialize_bool+0x28>
 800eb12:	68a2      	ldr	r2, [r4, #8]
 800eb14:	6923      	ldr	r3, [r4, #16]
 800eb16:	f812 1b01 	ldrb.w	r1, [r2], #1
 800eb1a:	3900      	subs	r1, #0
 800eb1c:	bf18      	it	ne
 800eb1e:	2101      	movne	r1, #1
 800eb20:	7029      	strb	r1, [r5, #0]
 800eb22:	3301      	adds	r3, #1
 800eb24:	2101      	movs	r1, #1
 800eb26:	60a2      	str	r2, [r4, #8]
 800eb28:	6123      	str	r3, [r4, #16]
 800eb2a:	7561      	strb	r1, [r4, #21]
 800eb2c:	7da0      	ldrb	r0, [r4, #22]
 800eb2e:	f080 0001 	eor.w	r0, r0, #1
 800eb32:	bd38      	pop	{r3, r4, r5, pc}

0800eb34 <ucdr_serialize_uint8_t>:
 800eb34:	b538      	push	{r3, r4, r5, lr}
 800eb36:	460d      	mov	r5, r1
 800eb38:	2101      	movs	r1, #1
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	f000 ff5e 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800eb40:	b148      	cbz	r0, 800eb56 <ucdr_serialize_uint8_t+0x22>
 800eb42:	68a3      	ldr	r3, [r4, #8]
 800eb44:	701d      	strb	r5, [r3, #0]
 800eb46:	68a2      	ldr	r2, [r4, #8]
 800eb48:	6923      	ldr	r3, [r4, #16]
 800eb4a:	2101      	movs	r1, #1
 800eb4c:	440a      	add	r2, r1
 800eb4e:	440b      	add	r3, r1
 800eb50:	60a2      	str	r2, [r4, #8]
 800eb52:	6123      	str	r3, [r4, #16]
 800eb54:	7561      	strb	r1, [r4, #21]
 800eb56:	7da0      	ldrb	r0, [r4, #22]
 800eb58:	f080 0001 	eor.w	r0, r0, #1
 800eb5c:	bd38      	pop	{r3, r4, r5, pc}
 800eb5e:	bf00      	nop

0800eb60 <ucdr_deserialize_uint8_t>:
 800eb60:	b538      	push	{r3, r4, r5, lr}
 800eb62:	460d      	mov	r5, r1
 800eb64:	2101      	movs	r1, #1
 800eb66:	4604      	mov	r4, r0
 800eb68:	f000 ff48 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800eb6c:	b150      	cbz	r0, 800eb84 <ucdr_deserialize_uint8_t+0x24>
 800eb6e:	68a3      	ldr	r3, [r4, #8]
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	702b      	strb	r3, [r5, #0]
 800eb74:	68a2      	ldr	r2, [r4, #8]
 800eb76:	6923      	ldr	r3, [r4, #16]
 800eb78:	2101      	movs	r1, #1
 800eb7a:	440a      	add	r2, r1
 800eb7c:	440b      	add	r3, r1
 800eb7e:	60a2      	str	r2, [r4, #8]
 800eb80:	6123      	str	r3, [r4, #16]
 800eb82:	7561      	strb	r1, [r4, #21]
 800eb84:	7da0      	ldrb	r0, [r4, #22]
 800eb86:	f080 0001 	eor.w	r0, r0, #1
 800eb8a:	bd38      	pop	{r3, r4, r5, pc}

0800eb8c <ucdr_serialize_uint16_t>:
 800eb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb90:	b082      	sub	sp, #8
 800eb92:	460b      	mov	r3, r1
 800eb94:	2102      	movs	r1, #2
 800eb96:	4604      	mov	r4, r0
 800eb98:	f8ad 3006 	strh.w	r3, [sp, #6]
 800eb9c:	f000 ff82 	bl	800faa4 <ucdr_buffer_alignment>
 800eba0:	4601      	mov	r1, r0
 800eba2:	4620      	mov	r0, r4
 800eba4:	7d67      	ldrb	r7, [r4, #21]
 800eba6:	f000 ffc1 	bl	800fb2c <ucdr_advance_buffer>
 800ebaa:	2102      	movs	r1, #2
 800ebac:	4620      	mov	r0, r4
 800ebae:	f000 ff19 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800ebb2:	bb78      	cbnz	r0, 800ec14 <ucdr_serialize_uint16_t+0x88>
 800ebb4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ebb8:	42ab      	cmp	r3, r5
 800ebba:	d926      	bls.n	800ec0a <ucdr_serialize_uint16_t+0x7e>
 800ebbc:	1b5e      	subs	r6, r3, r5
 800ebbe:	60a3      	str	r3, [r4, #8]
 800ebc0:	6923      	ldr	r3, [r4, #16]
 800ebc2:	f1c6 0802 	rsb	r8, r6, #2
 800ebc6:	4433      	add	r3, r6
 800ebc8:	6123      	str	r3, [r4, #16]
 800ebca:	4641      	mov	r1, r8
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f000 ff15 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	d03b      	beq.n	800ec4e <ucdr_serialize_uint16_t+0xc2>
 800ebd6:	7d23      	ldrb	r3, [r4, #20]
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d04a      	beq.n	800ec72 <ucdr_serialize_uint16_t+0xe6>
 800ebdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ebe0:	702b      	strb	r3, [r5, #0]
 800ebe2:	2e00      	cmp	r6, #0
 800ebe4:	d040      	beq.n	800ec68 <ucdr_serialize_uint16_t+0xdc>
 800ebe6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ebea:	706b      	strb	r3, [r5, #1]
 800ebec:	6923      	ldr	r3, [r4, #16]
 800ebee:	68a2      	ldr	r2, [r4, #8]
 800ebf0:	7da0      	ldrb	r0, [r4, #22]
 800ebf2:	3302      	adds	r3, #2
 800ebf4:	1b9e      	subs	r6, r3, r6
 800ebf6:	4442      	add	r2, r8
 800ebf8:	2302      	movs	r3, #2
 800ebfa:	f080 0001 	eor.w	r0, r0, #1
 800ebfe:	60a2      	str	r2, [r4, #8]
 800ec00:	6126      	str	r6, [r4, #16]
 800ec02:	7563      	strb	r3, [r4, #21]
 800ec04:	b002      	add	sp, #8
 800ec06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec0a:	2102      	movs	r1, #2
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	f000 fef5 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800ec12:	b190      	cbz	r0, 800ec3a <ucdr_serialize_uint16_t+0xae>
 800ec14:	7d23      	ldrb	r3, [r4, #20]
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	68a3      	ldr	r3, [r4, #8]
 800ec1a:	d014      	beq.n	800ec46 <ucdr_serialize_uint16_t+0xba>
 800ec1c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ec20:	701a      	strb	r2, [r3, #0]
 800ec22:	68a3      	ldr	r3, [r4, #8]
 800ec24:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec28:	705a      	strb	r2, [r3, #1]
 800ec2a:	68a2      	ldr	r2, [r4, #8]
 800ec2c:	6923      	ldr	r3, [r4, #16]
 800ec2e:	3202      	adds	r2, #2
 800ec30:	3302      	adds	r3, #2
 800ec32:	2102      	movs	r1, #2
 800ec34:	60a2      	str	r2, [r4, #8]
 800ec36:	6123      	str	r3, [r4, #16]
 800ec38:	7561      	strb	r1, [r4, #21]
 800ec3a:	7da0      	ldrb	r0, [r4, #22]
 800ec3c:	f080 0001 	eor.w	r0, r0, #1
 800ec40:	b002      	add	sp, #8
 800ec42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec46:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ec4a:	801a      	strh	r2, [r3, #0]
 800ec4c:	e7ed      	b.n	800ec2a <ucdr_serialize_uint16_t+0x9e>
 800ec4e:	68a2      	ldr	r2, [r4, #8]
 800ec50:	6923      	ldr	r3, [r4, #16]
 800ec52:	7da0      	ldrb	r0, [r4, #22]
 800ec54:	7567      	strb	r7, [r4, #21]
 800ec56:	1b92      	subs	r2, r2, r6
 800ec58:	1b9b      	subs	r3, r3, r6
 800ec5a:	f080 0001 	eor.w	r0, r0, #1
 800ec5e:	60a2      	str	r2, [r4, #8]
 800ec60:	6123      	str	r3, [r4, #16]
 800ec62:	b002      	add	sp, #8
 800ec64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec68:	68a3      	ldr	r3, [r4, #8]
 800ec6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec6e:	701a      	strb	r2, [r3, #0]
 800ec70:	e7bc      	b.n	800ebec <ucdr_serialize_uint16_t+0x60>
 800ec72:	4628      	mov	r0, r5
 800ec74:	f10d 0506 	add.w	r5, sp, #6
 800ec78:	4629      	mov	r1, r5
 800ec7a:	4632      	mov	r2, r6
 800ec7c:	f009 fc9d 	bl	80185ba <memcpy>
 800ec80:	68a0      	ldr	r0, [r4, #8]
 800ec82:	4642      	mov	r2, r8
 800ec84:	19a9      	adds	r1, r5, r6
 800ec86:	f009 fc98 	bl	80185ba <memcpy>
 800ec8a:	e7af      	b.n	800ebec <ucdr_serialize_uint16_t+0x60>

0800ec8c <ucdr_serialize_endian_uint16_t>:
 800ec8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec90:	b083      	sub	sp, #12
 800ec92:	460d      	mov	r5, r1
 800ec94:	2102      	movs	r1, #2
 800ec96:	4604      	mov	r4, r0
 800ec98:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ec9c:	f000 ff02 	bl	800faa4 <ucdr_buffer_alignment>
 800eca0:	4601      	mov	r1, r0
 800eca2:	4620      	mov	r0, r4
 800eca4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eca8:	f000 ff40 	bl	800fb2c <ucdr_advance_buffer>
 800ecac:	2102      	movs	r1, #2
 800ecae:	4620      	mov	r0, r4
 800ecb0:	f000 fe98 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800ecb4:	bb70      	cbnz	r0, 800ed14 <ucdr_serialize_endian_uint16_t+0x88>
 800ecb6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ecba:	42be      	cmp	r6, r7
 800ecbc:	d925      	bls.n	800ed0a <ucdr_serialize_endian_uint16_t+0x7e>
 800ecbe:	6923      	ldr	r3, [r4, #16]
 800ecc0:	60a6      	str	r6, [r4, #8]
 800ecc2:	1bf6      	subs	r6, r6, r7
 800ecc4:	4433      	add	r3, r6
 800ecc6:	f1c6 0902 	rsb	r9, r6, #2
 800ecca:	6123      	str	r3, [r4, #16]
 800eccc:	4649      	mov	r1, r9
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f000 fe94 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	d039      	beq.n	800ed4c <ucdr_serialize_endian_uint16_t+0xc0>
 800ecd8:	2d01      	cmp	r5, #1
 800ecda:	d04a      	beq.n	800ed72 <ucdr_serialize_endian_uint16_t+0xe6>
 800ecdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ece0:	703b      	strb	r3, [r7, #0]
 800ece2:	2e00      	cmp	r6, #0
 800ece4:	d040      	beq.n	800ed68 <ucdr_serialize_endian_uint16_t+0xdc>
 800ece6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ecea:	707b      	strb	r3, [r7, #1]
 800ecec:	6923      	ldr	r3, [r4, #16]
 800ecee:	68a2      	ldr	r2, [r4, #8]
 800ecf0:	7da0      	ldrb	r0, [r4, #22]
 800ecf2:	3302      	adds	r3, #2
 800ecf4:	444a      	add	r2, r9
 800ecf6:	1b9b      	subs	r3, r3, r6
 800ecf8:	2102      	movs	r1, #2
 800ecfa:	f080 0001 	eor.w	r0, r0, #1
 800ecfe:	60a2      	str	r2, [r4, #8]
 800ed00:	6123      	str	r3, [r4, #16]
 800ed02:	7561      	strb	r1, [r4, #21]
 800ed04:	b003      	add	sp, #12
 800ed06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed0a:	2102      	movs	r1, #2
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	f000 fe75 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800ed12:	b188      	cbz	r0, 800ed38 <ucdr_serialize_endian_uint16_t+0xac>
 800ed14:	2d01      	cmp	r5, #1
 800ed16:	68a3      	ldr	r3, [r4, #8]
 800ed18:	d014      	beq.n	800ed44 <ucdr_serialize_endian_uint16_t+0xb8>
 800ed1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ed1e:	701a      	strb	r2, [r3, #0]
 800ed20:	68a3      	ldr	r3, [r4, #8]
 800ed22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed26:	705a      	strb	r2, [r3, #1]
 800ed28:	68a2      	ldr	r2, [r4, #8]
 800ed2a:	6923      	ldr	r3, [r4, #16]
 800ed2c:	3202      	adds	r2, #2
 800ed2e:	3302      	adds	r3, #2
 800ed30:	2102      	movs	r1, #2
 800ed32:	60a2      	str	r2, [r4, #8]
 800ed34:	6123      	str	r3, [r4, #16]
 800ed36:	7561      	strb	r1, [r4, #21]
 800ed38:	7da0      	ldrb	r0, [r4, #22]
 800ed3a:	f080 0001 	eor.w	r0, r0, #1
 800ed3e:	b003      	add	sp, #12
 800ed40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ed48:	801a      	strh	r2, [r3, #0]
 800ed4a:	e7ed      	b.n	800ed28 <ucdr_serialize_endian_uint16_t+0x9c>
 800ed4c:	68a2      	ldr	r2, [r4, #8]
 800ed4e:	6923      	ldr	r3, [r4, #16]
 800ed50:	7da0      	ldrb	r0, [r4, #22]
 800ed52:	f884 8015 	strb.w	r8, [r4, #21]
 800ed56:	1b92      	subs	r2, r2, r6
 800ed58:	1b9b      	subs	r3, r3, r6
 800ed5a:	f080 0001 	eor.w	r0, r0, #1
 800ed5e:	60a2      	str	r2, [r4, #8]
 800ed60:	6123      	str	r3, [r4, #16]
 800ed62:	b003      	add	sp, #12
 800ed64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed68:	68a3      	ldr	r3, [r4, #8]
 800ed6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed6e:	701a      	strb	r2, [r3, #0]
 800ed70:	e7bc      	b.n	800ecec <ucdr_serialize_endian_uint16_t+0x60>
 800ed72:	f10d 0506 	add.w	r5, sp, #6
 800ed76:	4629      	mov	r1, r5
 800ed78:	4632      	mov	r2, r6
 800ed7a:	4638      	mov	r0, r7
 800ed7c:	f009 fc1d 	bl	80185ba <memcpy>
 800ed80:	68a0      	ldr	r0, [r4, #8]
 800ed82:	464a      	mov	r2, r9
 800ed84:	19a9      	adds	r1, r5, r6
 800ed86:	f009 fc18 	bl	80185ba <memcpy>
 800ed8a:	e7af      	b.n	800ecec <ucdr_serialize_endian_uint16_t+0x60>

0800ed8c <ucdr_deserialize_uint16_t>:
 800ed8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed90:	460d      	mov	r5, r1
 800ed92:	2102      	movs	r1, #2
 800ed94:	4604      	mov	r4, r0
 800ed96:	f000 fe85 	bl	800faa4 <ucdr_buffer_alignment>
 800ed9a:	4601      	mov	r1, r0
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eda2:	f000 fec3 	bl	800fb2c <ucdr_advance_buffer>
 800eda6:	2102      	movs	r1, #2
 800eda8:	4620      	mov	r0, r4
 800edaa:	f000 fe1b 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800edae:	bb60      	cbnz	r0, 800ee0a <ucdr_deserialize_uint16_t+0x7e>
 800edb0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800edb4:	42be      	cmp	r6, r7
 800edb6:	d923      	bls.n	800ee00 <ucdr_deserialize_uint16_t+0x74>
 800edb8:	6923      	ldr	r3, [r4, #16]
 800edba:	60a6      	str	r6, [r4, #8]
 800edbc:	1bf6      	subs	r6, r6, r7
 800edbe:	4433      	add	r3, r6
 800edc0:	f1c6 0902 	rsb	r9, r6, #2
 800edc4:	6123      	str	r3, [r4, #16]
 800edc6:	4649      	mov	r1, r9
 800edc8:	4620      	mov	r0, r4
 800edca:	f000 fe17 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800edce:	2800      	cmp	r0, #0
 800edd0:	d034      	beq.n	800ee3c <ucdr_deserialize_uint16_t+0xb0>
 800edd2:	7d23      	ldrb	r3, [r4, #20]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d042      	beq.n	800ee5e <ucdr_deserialize_uint16_t+0xd2>
 800edd8:	787b      	ldrb	r3, [r7, #1]
 800edda:	702b      	strb	r3, [r5, #0]
 800eddc:	2e00      	cmp	r6, #0
 800edde:	d03a      	beq.n	800ee56 <ucdr_deserialize_uint16_t+0xca>
 800ede0:	783b      	ldrb	r3, [r7, #0]
 800ede2:	706b      	strb	r3, [r5, #1]
 800ede4:	6923      	ldr	r3, [r4, #16]
 800ede6:	68a2      	ldr	r2, [r4, #8]
 800ede8:	7da0      	ldrb	r0, [r4, #22]
 800edea:	2102      	movs	r1, #2
 800edec:	3302      	adds	r3, #2
 800edee:	444a      	add	r2, r9
 800edf0:	1b9b      	subs	r3, r3, r6
 800edf2:	7561      	strb	r1, [r4, #21]
 800edf4:	60a2      	str	r2, [r4, #8]
 800edf6:	6123      	str	r3, [r4, #16]
 800edf8:	f080 0001 	eor.w	r0, r0, #1
 800edfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee00:	2102      	movs	r1, #2
 800ee02:	4620      	mov	r0, r4
 800ee04:	f000 fdfa 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800ee08:	b180      	cbz	r0, 800ee2c <ucdr_deserialize_uint16_t+0xa0>
 800ee0a:	7d23      	ldrb	r3, [r4, #20]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	68a3      	ldr	r3, [r4, #8]
 800ee10:	d011      	beq.n	800ee36 <ucdr_deserialize_uint16_t+0xaa>
 800ee12:	785b      	ldrb	r3, [r3, #1]
 800ee14:	702b      	strb	r3, [r5, #0]
 800ee16:	68a3      	ldr	r3, [r4, #8]
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	706b      	strb	r3, [r5, #1]
 800ee1c:	68a2      	ldr	r2, [r4, #8]
 800ee1e:	6923      	ldr	r3, [r4, #16]
 800ee20:	3202      	adds	r2, #2
 800ee22:	3302      	adds	r3, #2
 800ee24:	2102      	movs	r1, #2
 800ee26:	60a2      	str	r2, [r4, #8]
 800ee28:	6123      	str	r3, [r4, #16]
 800ee2a:	7561      	strb	r1, [r4, #21]
 800ee2c:	7da0      	ldrb	r0, [r4, #22]
 800ee2e:	f080 0001 	eor.w	r0, r0, #1
 800ee32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee36:	881b      	ldrh	r3, [r3, #0]
 800ee38:	802b      	strh	r3, [r5, #0]
 800ee3a:	e7ef      	b.n	800ee1c <ucdr_deserialize_uint16_t+0x90>
 800ee3c:	68a2      	ldr	r2, [r4, #8]
 800ee3e:	6923      	ldr	r3, [r4, #16]
 800ee40:	7da0      	ldrb	r0, [r4, #22]
 800ee42:	f884 8015 	strb.w	r8, [r4, #21]
 800ee46:	1b92      	subs	r2, r2, r6
 800ee48:	1b9b      	subs	r3, r3, r6
 800ee4a:	60a2      	str	r2, [r4, #8]
 800ee4c:	6123      	str	r3, [r4, #16]
 800ee4e:	f080 0001 	eor.w	r0, r0, #1
 800ee52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee56:	68a3      	ldr	r3, [r4, #8]
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	706b      	strb	r3, [r5, #1]
 800ee5c:	e7c2      	b.n	800ede4 <ucdr_deserialize_uint16_t+0x58>
 800ee5e:	4639      	mov	r1, r7
 800ee60:	4632      	mov	r2, r6
 800ee62:	4628      	mov	r0, r5
 800ee64:	f009 fba9 	bl	80185ba <memcpy>
 800ee68:	68a1      	ldr	r1, [r4, #8]
 800ee6a:	464a      	mov	r2, r9
 800ee6c:	19a8      	adds	r0, r5, r6
 800ee6e:	f009 fba4 	bl	80185ba <memcpy>
 800ee72:	e7b7      	b.n	800ede4 <ucdr_deserialize_uint16_t+0x58>

0800ee74 <ucdr_deserialize_endian_uint16_t>:
 800ee74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee78:	460e      	mov	r6, r1
 800ee7a:	2102      	movs	r1, #2
 800ee7c:	4604      	mov	r4, r0
 800ee7e:	4615      	mov	r5, r2
 800ee80:	f000 fe10 	bl	800faa4 <ucdr_buffer_alignment>
 800ee84:	4601      	mov	r1, r0
 800ee86:	4620      	mov	r0, r4
 800ee88:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ee8c:	f000 fe4e 	bl	800fb2c <ucdr_advance_buffer>
 800ee90:	2102      	movs	r1, #2
 800ee92:	4620      	mov	r0, r4
 800ee94:	f000 fda6 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800ee98:	bb70      	cbnz	r0, 800eef8 <ucdr_deserialize_endian_uint16_t+0x84>
 800ee9a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ee9e:	4547      	cmp	r7, r8
 800eea0:	d925      	bls.n	800eeee <ucdr_deserialize_endian_uint16_t+0x7a>
 800eea2:	6923      	ldr	r3, [r4, #16]
 800eea4:	60a7      	str	r7, [r4, #8]
 800eea6:	eba7 0708 	sub.w	r7, r7, r8
 800eeaa:	443b      	add	r3, r7
 800eeac:	f1c7 0a02 	rsb	sl, r7, #2
 800eeb0:	6123      	str	r3, [r4, #16]
 800eeb2:	4651      	mov	r1, sl
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f000 fda1 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800eeba:	2800      	cmp	r0, #0
 800eebc:	d034      	beq.n	800ef28 <ucdr_deserialize_endian_uint16_t+0xb4>
 800eebe:	2e01      	cmp	r6, #1
 800eec0:	d043      	beq.n	800ef4a <ucdr_deserialize_endian_uint16_t+0xd6>
 800eec2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800eec6:	702b      	strb	r3, [r5, #0]
 800eec8:	2f00      	cmp	r7, #0
 800eeca:	d03a      	beq.n	800ef42 <ucdr_deserialize_endian_uint16_t+0xce>
 800eecc:	f898 3000 	ldrb.w	r3, [r8]
 800eed0:	706b      	strb	r3, [r5, #1]
 800eed2:	6923      	ldr	r3, [r4, #16]
 800eed4:	68a2      	ldr	r2, [r4, #8]
 800eed6:	7da0      	ldrb	r0, [r4, #22]
 800eed8:	2102      	movs	r1, #2
 800eeda:	3302      	adds	r3, #2
 800eedc:	4452      	add	r2, sl
 800eede:	1bdb      	subs	r3, r3, r7
 800eee0:	7561      	strb	r1, [r4, #21]
 800eee2:	60a2      	str	r2, [r4, #8]
 800eee4:	6123      	str	r3, [r4, #16]
 800eee6:	f080 0001 	eor.w	r0, r0, #1
 800eeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeee:	2102      	movs	r1, #2
 800eef0:	4620      	mov	r0, r4
 800eef2:	f000 fd83 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800eef6:	b178      	cbz	r0, 800ef18 <ucdr_deserialize_endian_uint16_t+0xa4>
 800eef8:	2e01      	cmp	r6, #1
 800eefa:	68a3      	ldr	r3, [r4, #8]
 800eefc:	d011      	beq.n	800ef22 <ucdr_deserialize_endian_uint16_t+0xae>
 800eefe:	785b      	ldrb	r3, [r3, #1]
 800ef00:	702b      	strb	r3, [r5, #0]
 800ef02:	68a3      	ldr	r3, [r4, #8]
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	706b      	strb	r3, [r5, #1]
 800ef08:	68a2      	ldr	r2, [r4, #8]
 800ef0a:	6923      	ldr	r3, [r4, #16]
 800ef0c:	3202      	adds	r2, #2
 800ef0e:	3302      	adds	r3, #2
 800ef10:	2102      	movs	r1, #2
 800ef12:	60a2      	str	r2, [r4, #8]
 800ef14:	6123      	str	r3, [r4, #16]
 800ef16:	7561      	strb	r1, [r4, #21]
 800ef18:	7da0      	ldrb	r0, [r4, #22]
 800ef1a:	f080 0001 	eor.w	r0, r0, #1
 800ef1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef22:	881b      	ldrh	r3, [r3, #0]
 800ef24:	802b      	strh	r3, [r5, #0]
 800ef26:	e7ef      	b.n	800ef08 <ucdr_deserialize_endian_uint16_t+0x94>
 800ef28:	68a2      	ldr	r2, [r4, #8]
 800ef2a:	6923      	ldr	r3, [r4, #16]
 800ef2c:	7da0      	ldrb	r0, [r4, #22]
 800ef2e:	f884 9015 	strb.w	r9, [r4, #21]
 800ef32:	1bd2      	subs	r2, r2, r7
 800ef34:	1bdb      	subs	r3, r3, r7
 800ef36:	60a2      	str	r2, [r4, #8]
 800ef38:	6123      	str	r3, [r4, #16]
 800ef3a:	f080 0001 	eor.w	r0, r0, #1
 800ef3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef42:	68a3      	ldr	r3, [r4, #8]
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	706b      	strb	r3, [r5, #1]
 800ef48:	e7c3      	b.n	800eed2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800ef4a:	4641      	mov	r1, r8
 800ef4c:	463a      	mov	r2, r7
 800ef4e:	4628      	mov	r0, r5
 800ef50:	f009 fb33 	bl	80185ba <memcpy>
 800ef54:	68a1      	ldr	r1, [r4, #8]
 800ef56:	4652      	mov	r2, sl
 800ef58:	19e8      	adds	r0, r5, r7
 800ef5a:	f009 fb2e 	bl	80185ba <memcpy>
 800ef5e:	e7b8      	b.n	800eed2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800ef60 <ucdr_serialize_uint32_t>:
 800ef60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef64:	b082      	sub	sp, #8
 800ef66:	4604      	mov	r4, r0
 800ef68:	9101      	str	r1, [sp, #4]
 800ef6a:	2104      	movs	r1, #4
 800ef6c:	f000 fd9a 	bl	800faa4 <ucdr_buffer_alignment>
 800ef70:	4601      	mov	r1, r0
 800ef72:	4620      	mov	r0, r4
 800ef74:	7d67      	ldrb	r7, [r4, #21]
 800ef76:	f000 fdd9 	bl	800fb2c <ucdr_advance_buffer>
 800ef7a:	2104      	movs	r1, #4
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f000 fd31 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800ef82:	2800      	cmp	r0, #0
 800ef84:	d139      	bne.n	800effa <ucdr_serialize_uint32_t+0x9a>
 800ef86:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ef8a:	42ab      	cmp	r3, r5
 800ef8c:	d930      	bls.n	800eff0 <ucdr_serialize_uint32_t+0x90>
 800ef8e:	1b5e      	subs	r6, r3, r5
 800ef90:	60a3      	str	r3, [r4, #8]
 800ef92:	6923      	ldr	r3, [r4, #16]
 800ef94:	f1c6 0804 	rsb	r8, r6, #4
 800ef98:	4433      	add	r3, r6
 800ef9a:	6123      	str	r3, [r4, #16]
 800ef9c:	4641      	mov	r1, r8
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f000 fd2c 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800efa4:	2800      	cmp	r0, #0
 800efa6:	d04c      	beq.n	800f042 <ucdr_serialize_uint32_t+0xe2>
 800efa8:	7d23      	ldrb	r3, [r4, #20]
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d063      	beq.n	800f076 <ucdr_serialize_uint32_t+0x116>
 800efae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800efb2:	702b      	strb	r3, [r5, #0]
 800efb4:	2e00      	cmp	r6, #0
 800efb6:	d051      	beq.n	800f05c <ucdr_serialize_uint32_t+0xfc>
 800efb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800efbc:	706b      	strb	r3, [r5, #1]
 800efbe:	2e01      	cmp	r6, #1
 800efc0:	d050      	beq.n	800f064 <ucdr_serialize_uint32_t+0x104>
 800efc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800efc6:	70ab      	strb	r3, [r5, #2]
 800efc8:	2e02      	cmp	r6, #2
 800efca:	d04f      	beq.n	800f06c <ucdr_serialize_uint32_t+0x10c>
 800efcc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800efd0:	70eb      	strb	r3, [r5, #3]
 800efd2:	6923      	ldr	r3, [r4, #16]
 800efd4:	68a2      	ldr	r2, [r4, #8]
 800efd6:	7da0      	ldrb	r0, [r4, #22]
 800efd8:	3304      	adds	r3, #4
 800efda:	1b9e      	subs	r6, r3, r6
 800efdc:	4442      	add	r2, r8
 800efde:	2304      	movs	r3, #4
 800efe0:	f080 0001 	eor.w	r0, r0, #1
 800efe4:	60a2      	str	r2, [r4, #8]
 800efe6:	6126      	str	r6, [r4, #16]
 800efe8:	7563      	strb	r3, [r4, #21]
 800efea:	b002      	add	sp, #8
 800efec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff0:	2104      	movs	r1, #4
 800eff2:	4620      	mov	r0, r4
 800eff4:	f000 fd02 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800eff8:	b1d0      	cbz	r0, 800f030 <ucdr_serialize_uint32_t+0xd0>
 800effa:	7d23      	ldrb	r3, [r4, #20]
 800effc:	2b01      	cmp	r3, #1
 800effe:	68a3      	ldr	r3, [r4, #8]
 800f000:	d01c      	beq.n	800f03c <ucdr_serialize_uint32_t+0xdc>
 800f002:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f006:	701a      	strb	r2, [r3, #0]
 800f008:	68a3      	ldr	r3, [r4, #8]
 800f00a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f00e:	705a      	strb	r2, [r3, #1]
 800f010:	68a3      	ldr	r3, [r4, #8]
 800f012:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f016:	709a      	strb	r2, [r3, #2]
 800f018:	68a3      	ldr	r3, [r4, #8]
 800f01a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f01e:	70da      	strb	r2, [r3, #3]
 800f020:	68a2      	ldr	r2, [r4, #8]
 800f022:	6923      	ldr	r3, [r4, #16]
 800f024:	3204      	adds	r2, #4
 800f026:	3304      	adds	r3, #4
 800f028:	2104      	movs	r1, #4
 800f02a:	60a2      	str	r2, [r4, #8]
 800f02c:	6123      	str	r3, [r4, #16]
 800f02e:	7561      	strb	r1, [r4, #21]
 800f030:	7da0      	ldrb	r0, [r4, #22]
 800f032:	f080 0001 	eor.w	r0, r0, #1
 800f036:	b002      	add	sp, #8
 800f038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f03c:	9a01      	ldr	r2, [sp, #4]
 800f03e:	601a      	str	r2, [r3, #0]
 800f040:	e7ee      	b.n	800f020 <ucdr_serialize_uint32_t+0xc0>
 800f042:	68a2      	ldr	r2, [r4, #8]
 800f044:	6923      	ldr	r3, [r4, #16]
 800f046:	7da0      	ldrb	r0, [r4, #22]
 800f048:	7567      	strb	r7, [r4, #21]
 800f04a:	1b92      	subs	r2, r2, r6
 800f04c:	1b9b      	subs	r3, r3, r6
 800f04e:	f080 0001 	eor.w	r0, r0, #1
 800f052:	60a2      	str	r2, [r4, #8]
 800f054:	6123      	str	r3, [r4, #16]
 800f056:	b002      	add	sp, #8
 800f058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f05c:	68a3      	ldr	r3, [r4, #8]
 800f05e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f062:	701a      	strb	r2, [r3, #0]
 800f064:	68a3      	ldr	r3, [r4, #8]
 800f066:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f06a:	701a      	strb	r2, [r3, #0]
 800f06c:	68a3      	ldr	r3, [r4, #8]
 800f06e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f072:	701a      	strb	r2, [r3, #0]
 800f074:	e7ad      	b.n	800efd2 <ucdr_serialize_uint32_t+0x72>
 800f076:	4628      	mov	r0, r5
 800f078:	ad01      	add	r5, sp, #4
 800f07a:	4629      	mov	r1, r5
 800f07c:	4632      	mov	r2, r6
 800f07e:	f009 fa9c 	bl	80185ba <memcpy>
 800f082:	68a0      	ldr	r0, [r4, #8]
 800f084:	4642      	mov	r2, r8
 800f086:	19a9      	adds	r1, r5, r6
 800f088:	f009 fa97 	bl	80185ba <memcpy>
 800f08c:	e7a1      	b.n	800efd2 <ucdr_serialize_uint32_t+0x72>
 800f08e:	bf00      	nop

0800f090 <ucdr_serialize_endian_uint32_t>:
 800f090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f094:	b083      	sub	sp, #12
 800f096:	460d      	mov	r5, r1
 800f098:	2104      	movs	r1, #4
 800f09a:	4604      	mov	r4, r0
 800f09c:	9201      	str	r2, [sp, #4]
 800f09e:	f000 fd01 	bl	800faa4 <ucdr_buffer_alignment>
 800f0a2:	4601      	mov	r1, r0
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f0aa:	f000 fd3f 	bl	800fb2c <ucdr_advance_buffer>
 800f0ae:	2104      	movs	r1, #4
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f000 fc97 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	d138      	bne.n	800f12c <ucdr_serialize_endian_uint32_t+0x9c>
 800f0ba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f0be:	42b7      	cmp	r7, r6
 800f0c0:	d92f      	bls.n	800f122 <ucdr_serialize_endian_uint32_t+0x92>
 800f0c2:	6923      	ldr	r3, [r4, #16]
 800f0c4:	60a7      	str	r7, [r4, #8]
 800f0c6:	1bbf      	subs	r7, r7, r6
 800f0c8:	443b      	add	r3, r7
 800f0ca:	f1c7 0904 	rsb	r9, r7, #4
 800f0ce:	6123      	str	r3, [r4, #16]
 800f0d0:	4649      	mov	r1, r9
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f000 fc92 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d04a      	beq.n	800f172 <ucdr_serialize_endian_uint32_t+0xe2>
 800f0dc:	2d01      	cmp	r5, #1
 800f0de:	d063      	beq.n	800f1a8 <ucdr_serialize_endian_uint32_t+0x118>
 800f0e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f0e4:	7033      	strb	r3, [r6, #0]
 800f0e6:	2f00      	cmp	r7, #0
 800f0e8:	d051      	beq.n	800f18e <ucdr_serialize_endian_uint32_t+0xfe>
 800f0ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f0ee:	7073      	strb	r3, [r6, #1]
 800f0f0:	2f01      	cmp	r7, #1
 800f0f2:	d050      	beq.n	800f196 <ucdr_serialize_endian_uint32_t+0x106>
 800f0f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f0f8:	70b3      	strb	r3, [r6, #2]
 800f0fa:	2f02      	cmp	r7, #2
 800f0fc:	d04f      	beq.n	800f19e <ucdr_serialize_endian_uint32_t+0x10e>
 800f0fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f102:	70f3      	strb	r3, [r6, #3]
 800f104:	6923      	ldr	r3, [r4, #16]
 800f106:	68a2      	ldr	r2, [r4, #8]
 800f108:	7da0      	ldrb	r0, [r4, #22]
 800f10a:	3304      	adds	r3, #4
 800f10c:	444a      	add	r2, r9
 800f10e:	1bdb      	subs	r3, r3, r7
 800f110:	2104      	movs	r1, #4
 800f112:	f080 0001 	eor.w	r0, r0, #1
 800f116:	60a2      	str	r2, [r4, #8]
 800f118:	6123      	str	r3, [r4, #16]
 800f11a:	7561      	strb	r1, [r4, #21]
 800f11c:	b003      	add	sp, #12
 800f11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f122:	2104      	movs	r1, #4
 800f124:	4620      	mov	r0, r4
 800f126:	f000 fc69 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f12a:	b1c8      	cbz	r0, 800f160 <ucdr_serialize_endian_uint32_t+0xd0>
 800f12c:	2d01      	cmp	r5, #1
 800f12e:	68a3      	ldr	r3, [r4, #8]
 800f130:	d01c      	beq.n	800f16c <ucdr_serialize_endian_uint32_t+0xdc>
 800f132:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f136:	701a      	strb	r2, [r3, #0]
 800f138:	68a3      	ldr	r3, [r4, #8]
 800f13a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f13e:	705a      	strb	r2, [r3, #1]
 800f140:	68a3      	ldr	r3, [r4, #8]
 800f142:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f146:	709a      	strb	r2, [r3, #2]
 800f148:	68a3      	ldr	r3, [r4, #8]
 800f14a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f14e:	70da      	strb	r2, [r3, #3]
 800f150:	68a2      	ldr	r2, [r4, #8]
 800f152:	6923      	ldr	r3, [r4, #16]
 800f154:	3204      	adds	r2, #4
 800f156:	3304      	adds	r3, #4
 800f158:	2104      	movs	r1, #4
 800f15a:	60a2      	str	r2, [r4, #8]
 800f15c:	6123      	str	r3, [r4, #16]
 800f15e:	7561      	strb	r1, [r4, #21]
 800f160:	7da0      	ldrb	r0, [r4, #22]
 800f162:	f080 0001 	eor.w	r0, r0, #1
 800f166:	b003      	add	sp, #12
 800f168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f16c:	9a01      	ldr	r2, [sp, #4]
 800f16e:	601a      	str	r2, [r3, #0]
 800f170:	e7ee      	b.n	800f150 <ucdr_serialize_endian_uint32_t+0xc0>
 800f172:	68a2      	ldr	r2, [r4, #8]
 800f174:	6923      	ldr	r3, [r4, #16]
 800f176:	7da0      	ldrb	r0, [r4, #22]
 800f178:	f884 8015 	strb.w	r8, [r4, #21]
 800f17c:	1bd2      	subs	r2, r2, r7
 800f17e:	1bdb      	subs	r3, r3, r7
 800f180:	f080 0001 	eor.w	r0, r0, #1
 800f184:	60a2      	str	r2, [r4, #8]
 800f186:	6123      	str	r3, [r4, #16]
 800f188:	b003      	add	sp, #12
 800f18a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f18e:	68a3      	ldr	r3, [r4, #8]
 800f190:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f194:	701a      	strb	r2, [r3, #0]
 800f196:	68a3      	ldr	r3, [r4, #8]
 800f198:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f19c:	701a      	strb	r2, [r3, #0]
 800f19e:	68a3      	ldr	r3, [r4, #8]
 800f1a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f1a4:	701a      	strb	r2, [r3, #0]
 800f1a6:	e7ad      	b.n	800f104 <ucdr_serialize_endian_uint32_t+0x74>
 800f1a8:	ad01      	add	r5, sp, #4
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	463a      	mov	r2, r7
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	f009 fa03 	bl	80185ba <memcpy>
 800f1b4:	68a0      	ldr	r0, [r4, #8]
 800f1b6:	464a      	mov	r2, r9
 800f1b8:	19e9      	adds	r1, r5, r7
 800f1ba:	f009 f9fe 	bl	80185ba <memcpy>
 800f1be:	e7a1      	b.n	800f104 <ucdr_serialize_endian_uint32_t+0x74>

0800f1c0 <ucdr_deserialize_uint32_t>:
 800f1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1c4:	460d      	mov	r5, r1
 800f1c6:	2104      	movs	r1, #4
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	f000 fc6b 	bl	800faa4 <ucdr_buffer_alignment>
 800f1ce:	4601      	mov	r1, r0
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f1d6:	f000 fca9 	bl	800fb2c <ucdr_advance_buffer>
 800f1da:	2104      	movs	r1, #4
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f000 fc01 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800f1e2:	2800      	cmp	r0, #0
 800f1e4:	d138      	bne.n	800f258 <ucdr_deserialize_uint32_t+0x98>
 800f1e6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f1ea:	42b7      	cmp	r7, r6
 800f1ec:	d92f      	bls.n	800f24e <ucdr_deserialize_uint32_t+0x8e>
 800f1ee:	6923      	ldr	r3, [r4, #16]
 800f1f0:	60a7      	str	r7, [r4, #8]
 800f1f2:	1bbf      	subs	r7, r7, r6
 800f1f4:	443b      	add	r3, r7
 800f1f6:	f1c7 0904 	rsb	r9, r7, #4
 800f1fa:	6123      	str	r3, [r4, #16]
 800f1fc:	4649      	mov	r1, r9
 800f1fe:	4620      	mov	r0, r4
 800f200:	f000 fbfc 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f204:	2800      	cmp	r0, #0
 800f206:	d046      	beq.n	800f296 <ucdr_deserialize_uint32_t+0xd6>
 800f208:	7d23      	ldrb	r3, [r4, #20]
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	d05c      	beq.n	800f2c8 <ucdr_deserialize_uint32_t+0x108>
 800f20e:	78f3      	ldrb	r3, [r6, #3]
 800f210:	702b      	strb	r3, [r5, #0]
 800f212:	2f00      	cmp	r7, #0
 800f214:	d04c      	beq.n	800f2b0 <ucdr_deserialize_uint32_t+0xf0>
 800f216:	78b3      	ldrb	r3, [r6, #2]
 800f218:	706b      	strb	r3, [r5, #1]
 800f21a:	2f01      	cmp	r7, #1
 800f21c:	f105 0302 	add.w	r3, r5, #2
 800f220:	d04a      	beq.n	800f2b8 <ucdr_deserialize_uint32_t+0xf8>
 800f222:	7873      	ldrb	r3, [r6, #1]
 800f224:	70ab      	strb	r3, [r5, #2]
 800f226:	2f02      	cmp	r7, #2
 800f228:	f105 0303 	add.w	r3, r5, #3
 800f22c:	d048      	beq.n	800f2c0 <ucdr_deserialize_uint32_t+0x100>
 800f22e:	7833      	ldrb	r3, [r6, #0]
 800f230:	70eb      	strb	r3, [r5, #3]
 800f232:	6923      	ldr	r3, [r4, #16]
 800f234:	68a2      	ldr	r2, [r4, #8]
 800f236:	7da0      	ldrb	r0, [r4, #22]
 800f238:	2104      	movs	r1, #4
 800f23a:	3304      	adds	r3, #4
 800f23c:	444a      	add	r2, r9
 800f23e:	1bdb      	subs	r3, r3, r7
 800f240:	7561      	strb	r1, [r4, #21]
 800f242:	60a2      	str	r2, [r4, #8]
 800f244:	6123      	str	r3, [r4, #16]
 800f246:	f080 0001 	eor.w	r0, r0, #1
 800f24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f24e:	2104      	movs	r1, #4
 800f250:	4620      	mov	r0, r4
 800f252:	f000 fbd3 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f256:	b1b0      	cbz	r0, 800f286 <ucdr_deserialize_uint32_t+0xc6>
 800f258:	7d23      	ldrb	r3, [r4, #20]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	68a3      	ldr	r3, [r4, #8]
 800f25e:	d017      	beq.n	800f290 <ucdr_deserialize_uint32_t+0xd0>
 800f260:	78db      	ldrb	r3, [r3, #3]
 800f262:	702b      	strb	r3, [r5, #0]
 800f264:	68a3      	ldr	r3, [r4, #8]
 800f266:	789b      	ldrb	r3, [r3, #2]
 800f268:	706b      	strb	r3, [r5, #1]
 800f26a:	68a3      	ldr	r3, [r4, #8]
 800f26c:	785b      	ldrb	r3, [r3, #1]
 800f26e:	70ab      	strb	r3, [r5, #2]
 800f270:	68a3      	ldr	r3, [r4, #8]
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	70eb      	strb	r3, [r5, #3]
 800f276:	68a2      	ldr	r2, [r4, #8]
 800f278:	6923      	ldr	r3, [r4, #16]
 800f27a:	3204      	adds	r2, #4
 800f27c:	3304      	adds	r3, #4
 800f27e:	2104      	movs	r1, #4
 800f280:	60a2      	str	r2, [r4, #8]
 800f282:	6123      	str	r3, [r4, #16]
 800f284:	7561      	strb	r1, [r4, #21]
 800f286:	7da0      	ldrb	r0, [r4, #22]
 800f288:	f080 0001 	eor.w	r0, r0, #1
 800f28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	602b      	str	r3, [r5, #0]
 800f294:	e7ef      	b.n	800f276 <ucdr_deserialize_uint32_t+0xb6>
 800f296:	68a2      	ldr	r2, [r4, #8]
 800f298:	6923      	ldr	r3, [r4, #16]
 800f29a:	7da0      	ldrb	r0, [r4, #22]
 800f29c:	f884 8015 	strb.w	r8, [r4, #21]
 800f2a0:	1bd2      	subs	r2, r2, r7
 800f2a2:	1bdb      	subs	r3, r3, r7
 800f2a4:	60a2      	str	r2, [r4, #8]
 800f2a6:	6123      	str	r3, [r4, #16]
 800f2a8:	f080 0001 	eor.w	r0, r0, #1
 800f2ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2b0:	68a3      	ldr	r3, [r4, #8]
 800f2b2:	789b      	ldrb	r3, [r3, #2]
 800f2b4:	706b      	strb	r3, [r5, #1]
 800f2b6:	1cab      	adds	r3, r5, #2
 800f2b8:	68a2      	ldr	r2, [r4, #8]
 800f2ba:	7852      	ldrb	r2, [r2, #1]
 800f2bc:	f803 2b01 	strb.w	r2, [r3], #1
 800f2c0:	68a2      	ldr	r2, [r4, #8]
 800f2c2:	7812      	ldrb	r2, [r2, #0]
 800f2c4:	701a      	strb	r2, [r3, #0]
 800f2c6:	e7b4      	b.n	800f232 <ucdr_deserialize_uint32_t+0x72>
 800f2c8:	4631      	mov	r1, r6
 800f2ca:	463a      	mov	r2, r7
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	f009 f974 	bl	80185ba <memcpy>
 800f2d2:	68a1      	ldr	r1, [r4, #8]
 800f2d4:	464a      	mov	r2, r9
 800f2d6:	19e8      	adds	r0, r5, r7
 800f2d8:	f009 f96f 	bl	80185ba <memcpy>
 800f2dc:	e7a9      	b.n	800f232 <ucdr_deserialize_uint32_t+0x72>
 800f2de:	bf00      	nop

0800f2e0 <ucdr_deserialize_endian_uint32_t>:
 800f2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2e4:	460e      	mov	r6, r1
 800f2e6:	2104      	movs	r1, #4
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	4615      	mov	r5, r2
 800f2ec:	f000 fbda 	bl	800faa4 <ucdr_buffer_alignment>
 800f2f0:	4601      	mov	r1, r0
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f2f8:	f000 fc18 	bl	800fb2c <ucdr_advance_buffer>
 800f2fc:	2104      	movs	r1, #4
 800f2fe:	4620      	mov	r0, r4
 800f300:	f000 fb70 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800f304:	2800      	cmp	r0, #0
 800f306:	d13c      	bne.n	800f382 <ucdr_deserialize_endian_uint32_t+0xa2>
 800f308:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f30c:	42bb      	cmp	r3, r7
 800f30e:	d933      	bls.n	800f378 <ucdr_deserialize_endian_uint32_t+0x98>
 800f310:	eba3 0807 	sub.w	r8, r3, r7
 800f314:	60a3      	str	r3, [r4, #8]
 800f316:	6923      	ldr	r3, [r4, #16]
 800f318:	f1c8 0a04 	rsb	sl, r8, #4
 800f31c:	4443      	add	r3, r8
 800f31e:	6123      	str	r3, [r4, #16]
 800f320:	4651      	mov	r1, sl
 800f322:	4620      	mov	r0, r4
 800f324:	f000 fb6a 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f328:	2800      	cmp	r0, #0
 800f32a:	d048      	beq.n	800f3be <ucdr_deserialize_endian_uint32_t+0xde>
 800f32c:	2e01      	cmp	r6, #1
 800f32e:	d061      	beq.n	800f3f4 <ucdr_deserialize_endian_uint32_t+0x114>
 800f330:	78fb      	ldrb	r3, [r7, #3]
 800f332:	702b      	strb	r3, [r5, #0]
 800f334:	f1b8 0f00 	cmp.w	r8, #0
 800f338:	d050      	beq.n	800f3dc <ucdr_deserialize_endian_uint32_t+0xfc>
 800f33a:	78bb      	ldrb	r3, [r7, #2]
 800f33c:	706b      	strb	r3, [r5, #1]
 800f33e:	f1b8 0f01 	cmp.w	r8, #1
 800f342:	f105 0302 	add.w	r3, r5, #2
 800f346:	d04d      	beq.n	800f3e4 <ucdr_deserialize_endian_uint32_t+0x104>
 800f348:	787b      	ldrb	r3, [r7, #1]
 800f34a:	70ab      	strb	r3, [r5, #2]
 800f34c:	f1b8 0f02 	cmp.w	r8, #2
 800f350:	f105 0303 	add.w	r3, r5, #3
 800f354:	d04a      	beq.n	800f3ec <ucdr_deserialize_endian_uint32_t+0x10c>
 800f356:	783b      	ldrb	r3, [r7, #0]
 800f358:	70eb      	strb	r3, [r5, #3]
 800f35a:	6923      	ldr	r3, [r4, #16]
 800f35c:	68a2      	ldr	r2, [r4, #8]
 800f35e:	7da0      	ldrb	r0, [r4, #22]
 800f360:	2104      	movs	r1, #4
 800f362:	3304      	adds	r3, #4
 800f364:	4452      	add	r2, sl
 800f366:	eba3 0308 	sub.w	r3, r3, r8
 800f36a:	7561      	strb	r1, [r4, #21]
 800f36c:	60a2      	str	r2, [r4, #8]
 800f36e:	6123      	str	r3, [r4, #16]
 800f370:	f080 0001 	eor.w	r0, r0, #1
 800f374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f378:	2104      	movs	r1, #4
 800f37a:	4620      	mov	r0, r4
 800f37c:	f000 fb3e 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f380:	b1a8      	cbz	r0, 800f3ae <ucdr_deserialize_endian_uint32_t+0xce>
 800f382:	2e01      	cmp	r6, #1
 800f384:	68a3      	ldr	r3, [r4, #8]
 800f386:	d017      	beq.n	800f3b8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f388:	78db      	ldrb	r3, [r3, #3]
 800f38a:	702b      	strb	r3, [r5, #0]
 800f38c:	68a3      	ldr	r3, [r4, #8]
 800f38e:	789b      	ldrb	r3, [r3, #2]
 800f390:	706b      	strb	r3, [r5, #1]
 800f392:	68a3      	ldr	r3, [r4, #8]
 800f394:	785b      	ldrb	r3, [r3, #1]
 800f396:	70ab      	strb	r3, [r5, #2]
 800f398:	68a3      	ldr	r3, [r4, #8]
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	70eb      	strb	r3, [r5, #3]
 800f39e:	68a2      	ldr	r2, [r4, #8]
 800f3a0:	6923      	ldr	r3, [r4, #16]
 800f3a2:	3204      	adds	r2, #4
 800f3a4:	3304      	adds	r3, #4
 800f3a6:	2104      	movs	r1, #4
 800f3a8:	60a2      	str	r2, [r4, #8]
 800f3aa:	6123      	str	r3, [r4, #16]
 800f3ac:	7561      	strb	r1, [r4, #21]
 800f3ae:	7da0      	ldrb	r0, [r4, #22]
 800f3b0:	f080 0001 	eor.w	r0, r0, #1
 800f3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	602b      	str	r3, [r5, #0]
 800f3bc:	e7ef      	b.n	800f39e <ucdr_deserialize_endian_uint32_t+0xbe>
 800f3be:	68a2      	ldr	r2, [r4, #8]
 800f3c0:	6923      	ldr	r3, [r4, #16]
 800f3c2:	7da0      	ldrb	r0, [r4, #22]
 800f3c4:	f884 9015 	strb.w	r9, [r4, #21]
 800f3c8:	eba2 0208 	sub.w	r2, r2, r8
 800f3cc:	eba3 0308 	sub.w	r3, r3, r8
 800f3d0:	60a2      	str	r2, [r4, #8]
 800f3d2:	6123      	str	r3, [r4, #16]
 800f3d4:	f080 0001 	eor.w	r0, r0, #1
 800f3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3dc:	68a3      	ldr	r3, [r4, #8]
 800f3de:	789b      	ldrb	r3, [r3, #2]
 800f3e0:	706b      	strb	r3, [r5, #1]
 800f3e2:	1cab      	adds	r3, r5, #2
 800f3e4:	68a2      	ldr	r2, [r4, #8]
 800f3e6:	7852      	ldrb	r2, [r2, #1]
 800f3e8:	f803 2b01 	strb.w	r2, [r3], #1
 800f3ec:	68a2      	ldr	r2, [r4, #8]
 800f3ee:	7812      	ldrb	r2, [r2, #0]
 800f3f0:	701a      	strb	r2, [r3, #0]
 800f3f2:	e7b2      	b.n	800f35a <ucdr_deserialize_endian_uint32_t+0x7a>
 800f3f4:	4639      	mov	r1, r7
 800f3f6:	4642      	mov	r2, r8
 800f3f8:	4628      	mov	r0, r5
 800f3fa:	f009 f8de 	bl	80185ba <memcpy>
 800f3fe:	68a1      	ldr	r1, [r4, #8]
 800f400:	4652      	mov	r2, sl
 800f402:	eb05 0008 	add.w	r0, r5, r8
 800f406:	f009 f8d8 	bl	80185ba <memcpy>
 800f40a:	e7a6      	b.n	800f35a <ucdr_deserialize_endian_uint32_t+0x7a>

0800f40c <ucdr_serialize_uint64_t>:
 800f40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f410:	2108      	movs	r1, #8
 800f412:	b082      	sub	sp, #8
 800f414:	4604      	mov	r4, r0
 800f416:	e9cd 2300 	strd	r2, r3, [sp]
 800f41a:	f000 fb43 	bl	800faa4 <ucdr_buffer_alignment>
 800f41e:	4601      	mov	r1, r0
 800f420:	4620      	mov	r0, r4
 800f422:	7d67      	ldrb	r7, [r4, #21]
 800f424:	f000 fb82 	bl	800fb2c <ucdr_advance_buffer>
 800f428:	2108      	movs	r1, #8
 800f42a:	4620      	mov	r0, r4
 800f42c:	f000 fada 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800f430:	2800      	cmp	r0, #0
 800f432:	d14e      	bne.n	800f4d2 <ucdr_serialize_uint64_t+0xc6>
 800f434:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f438:	42ab      	cmp	r3, r5
 800f43a:	d945      	bls.n	800f4c8 <ucdr_serialize_uint64_t+0xbc>
 800f43c:	1b5e      	subs	r6, r3, r5
 800f43e:	60a3      	str	r3, [r4, #8]
 800f440:	6923      	ldr	r3, [r4, #16]
 800f442:	f1c6 0808 	rsb	r8, r6, #8
 800f446:	4433      	add	r3, r6
 800f448:	6123      	str	r3, [r4, #16]
 800f44a:	4641      	mov	r1, r8
 800f44c:	4620      	mov	r0, r4
 800f44e:	f000 fad5 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f452:	2800      	cmp	r0, #0
 800f454:	d074      	beq.n	800f540 <ucdr_serialize_uint64_t+0x134>
 800f456:	7d23      	ldrb	r3, [r4, #20]
 800f458:	2b01      	cmp	r3, #1
 800f45a:	f000 809b 	beq.w	800f594 <ucdr_serialize_uint64_t+0x188>
 800f45e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f462:	702b      	strb	r3, [r5, #0]
 800f464:	2e00      	cmp	r6, #0
 800f466:	d078      	beq.n	800f55a <ucdr_serialize_uint64_t+0x14e>
 800f468:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f46c:	706b      	strb	r3, [r5, #1]
 800f46e:	2e01      	cmp	r6, #1
 800f470:	d077      	beq.n	800f562 <ucdr_serialize_uint64_t+0x156>
 800f472:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f476:	70ab      	strb	r3, [r5, #2]
 800f478:	2e02      	cmp	r6, #2
 800f47a:	d076      	beq.n	800f56a <ucdr_serialize_uint64_t+0x15e>
 800f47c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f480:	70eb      	strb	r3, [r5, #3]
 800f482:	2e03      	cmp	r6, #3
 800f484:	d075      	beq.n	800f572 <ucdr_serialize_uint64_t+0x166>
 800f486:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f48a:	712b      	strb	r3, [r5, #4]
 800f48c:	2e04      	cmp	r6, #4
 800f48e:	d074      	beq.n	800f57a <ucdr_serialize_uint64_t+0x16e>
 800f490:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f494:	716b      	strb	r3, [r5, #5]
 800f496:	2e05      	cmp	r6, #5
 800f498:	d073      	beq.n	800f582 <ucdr_serialize_uint64_t+0x176>
 800f49a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f49e:	71ab      	strb	r3, [r5, #6]
 800f4a0:	2e06      	cmp	r6, #6
 800f4a2:	d072      	beq.n	800f58a <ucdr_serialize_uint64_t+0x17e>
 800f4a4:	f89d 3000 	ldrb.w	r3, [sp]
 800f4a8:	71eb      	strb	r3, [r5, #7]
 800f4aa:	6923      	ldr	r3, [r4, #16]
 800f4ac:	68a2      	ldr	r2, [r4, #8]
 800f4ae:	7da0      	ldrb	r0, [r4, #22]
 800f4b0:	3308      	adds	r3, #8
 800f4b2:	1b9e      	subs	r6, r3, r6
 800f4b4:	4442      	add	r2, r8
 800f4b6:	2308      	movs	r3, #8
 800f4b8:	f080 0001 	eor.w	r0, r0, #1
 800f4bc:	60a2      	str	r2, [r4, #8]
 800f4be:	6126      	str	r6, [r4, #16]
 800f4c0:	7563      	strb	r3, [r4, #21]
 800f4c2:	b002      	add	sp, #8
 800f4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4c8:	2108      	movs	r1, #8
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	f000 fa96 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f4d0:	b350      	cbz	r0, 800f528 <ucdr_serialize_uint64_t+0x11c>
 800f4d2:	7d23      	ldrb	r3, [r4, #20]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d02d      	beq.n	800f534 <ucdr_serialize_uint64_t+0x128>
 800f4d8:	68a3      	ldr	r3, [r4, #8]
 800f4da:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f4de:	701a      	strb	r2, [r3, #0]
 800f4e0:	68a3      	ldr	r3, [r4, #8]
 800f4e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4e6:	705a      	strb	r2, [r3, #1]
 800f4e8:	68a3      	ldr	r3, [r4, #8]
 800f4ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f4ee:	709a      	strb	r2, [r3, #2]
 800f4f0:	68a3      	ldr	r3, [r4, #8]
 800f4f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f4f6:	70da      	strb	r2, [r3, #3]
 800f4f8:	68a3      	ldr	r3, [r4, #8]
 800f4fa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f4fe:	711a      	strb	r2, [r3, #4]
 800f500:	68a3      	ldr	r3, [r4, #8]
 800f502:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f506:	715a      	strb	r2, [r3, #5]
 800f508:	68a3      	ldr	r3, [r4, #8]
 800f50a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f50e:	719a      	strb	r2, [r3, #6]
 800f510:	68a3      	ldr	r3, [r4, #8]
 800f512:	f89d 2000 	ldrb.w	r2, [sp]
 800f516:	71da      	strb	r2, [r3, #7]
 800f518:	68a2      	ldr	r2, [r4, #8]
 800f51a:	6923      	ldr	r3, [r4, #16]
 800f51c:	3208      	adds	r2, #8
 800f51e:	3308      	adds	r3, #8
 800f520:	2108      	movs	r1, #8
 800f522:	60a2      	str	r2, [r4, #8]
 800f524:	6123      	str	r3, [r4, #16]
 800f526:	7561      	strb	r1, [r4, #21]
 800f528:	7da0      	ldrb	r0, [r4, #22]
 800f52a:	f080 0001 	eor.w	r0, r0, #1
 800f52e:	b002      	add	sp, #8
 800f530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f534:	466b      	mov	r3, sp
 800f536:	cb03      	ldmia	r3!, {r0, r1}
 800f538:	68a3      	ldr	r3, [r4, #8]
 800f53a:	6018      	str	r0, [r3, #0]
 800f53c:	6059      	str	r1, [r3, #4]
 800f53e:	e7eb      	b.n	800f518 <ucdr_serialize_uint64_t+0x10c>
 800f540:	68a2      	ldr	r2, [r4, #8]
 800f542:	6923      	ldr	r3, [r4, #16]
 800f544:	7da0      	ldrb	r0, [r4, #22]
 800f546:	7567      	strb	r7, [r4, #21]
 800f548:	1b92      	subs	r2, r2, r6
 800f54a:	1b9b      	subs	r3, r3, r6
 800f54c:	f080 0001 	eor.w	r0, r0, #1
 800f550:	60a2      	str	r2, [r4, #8]
 800f552:	6123      	str	r3, [r4, #16]
 800f554:	b002      	add	sp, #8
 800f556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f55a:	68a3      	ldr	r3, [r4, #8]
 800f55c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f560:	701a      	strb	r2, [r3, #0]
 800f562:	68a3      	ldr	r3, [r4, #8]
 800f564:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f568:	701a      	strb	r2, [r3, #0]
 800f56a:	68a3      	ldr	r3, [r4, #8]
 800f56c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f570:	701a      	strb	r2, [r3, #0]
 800f572:	68a3      	ldr	r3, [r4, #8]
 800f574:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f578:	701a      	strb	r2, [r3, #0]
 800f57a:	68a3      	ldr	r3, [r4, #8]
 800f57c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f580:	701a      	strb	r2, [r3, #0]
 800f582:	68a3      	ldr	r3, [r4, #8]
 800f584:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f588:	701a      	strb	r2, [r3, #0]
 800f58a:	68a3      	ldr	r3, [r4, #8]
 800f58c:	f89d 2000 	ldrb.w	r2, [sp]
 800f590:	701a      	strb	r2, [r3, #0]
 800f592:	e78a      	b.n	800f4aa <ucdr_serialize_uint64_t+0x9e>
 800f594:	4628      	mov	r0, r5
 800f596:	466d      	mov	r5, sp
 800f598:	4629      	mov	r1, r5
 800f59a:	4632      	mov	r2, r6
 800f59c:	f009 f80d 	bl	80185ba <memcpy>
 800f5a0:	68a0      	ldr	r0, [r4, #8]
 800f5a2:	4642      	mov	r2, r8
 800f5a4:	19a9      	adds	r1, r5, r6
 800f5a6:	f009 f808 	bl	80185ba <memcpy>
 800f5aa:	e77e      	b.n	800f4aa <ucdr_serialize_uint64_t+0x9e>

0800f5ac <ucdr_serialize_int16_t>:
 800f5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b0:	b082      	sub	sp, #8
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	2102      	movs	r1, #2
 800f5b6:	4604      	mov	r4, r0
 800f5b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f5bc:	f000 fa72 	bl	800faa4 <ucdr_buffer_alignment>
 800f5c0:	4601      	mov	r1, r0
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	7d67      	ldrb	r7, [r4, #21]
 800f5c6:	f000 fab1 	bl	800fb2c <ucdr_advance_buffer>
 800f5ca:	2102      	movs	r1, #2
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	f000 fa09 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800f5d2:	bb78      	cbnz	r0, 800f634 <ucdr_serialize_int16_t+0x88>
 800f5d4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f5d8:	42ab      	cmp	r3, r5
 800f5da:	d926      	bls.n	800f62a <ucdr_serialize_int16_t+0x7e>
 800f5dc:	1b5e      	subs	r6, r3, r5
 800f5de:	60a3      	str	r3, [r4, #8]
 800f5e0:	6923      	ldr	r3, [r4, #16]
 800f5e2:	f1c6 0802 	rsb	r8, r6, #2
 800f5e6:	4433      	add	r3, r6
 800f5e8:	6123      	str	r3, [r4, #16]
 800f5ea:	4641      	mov	r1, r8
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	f000 fa05 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	d03b      	beq.n	800f66e <ucdr_serialize_int16_t+0xc2>
 800f5f6:	7d23      	ldrb	r3, [r4, #20]
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d04a      	beq.n	800f692 <ucdr_serialize_int16_t+0xe6>
 800f5fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f600:	702b      	strb	r3, [r5, #0]
 800f602:	2e00      	cmp	r6, #0
 800f604:	d040      	beq.n	800f688 <ucdr_serialize_int16_t+0xdc>
 800f606:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f60a:	706b      	strb	r3, [r5, #1]
 800f60c:	6923      	ldr	r3, [r4, #16]
 800f60e:	68a2      	ldr	r2, [r4, #8]
 800f610:	7da0      	ldrb	r0, [r4, #22]
 800f612:	3302      	adds	r3, #2
 800f614:	1b9e      	subs	r6, r3, r6
 800f616:	4442      	add	r2, r8
 800f618:	2302      	movs	r3, #2
 800f61a:	f080 0001 	eor.w	r0, r0, #1
 800f61e:	60a2      	str	r2, [r4, #8]
 800f620:	6126      	str	r6, [r4, #16]
 800f622:	7563      	strb	r3, [r4, #21]
 800f624:	b002      	add	sp, #8
 800f626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62a:	2102      	movs	r1, #2
 800f62c:	4620      	mov	r0, r4
 800f62e:	f000 f9e5 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f632:	b190      	cbz	r0, 800f65a <ucdr_serialize_int16_t+0xae>
 800f634:	7d23      	ldrb	r3, [r4, #20]
 800f636:	2b01      	cmp	r3, #1
 800f638:	68a3      	ldr	r3, [r4, #8]
 800f63a:	d014      	beq.n	800f666 <ucdr_serialize_int16_t+0xba>
 800f63c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f640:	701a      	strb	r2, [r3, #0]
 800f642:	68a3      	ldr	r3, [r4, #8]
 800f644:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f648:	705a      	strb	r2, [r3, #1]
 800f64a:	68a2      	ldr	r2, [r4, #8]
 800f64c:	6923      	ldr	r3, [r4, #16]
 800f64e:	3202      	adds	r2, #2
 800f650:	3302      	adds	r3, #2
 800f652:	2102      	movs	r1, #2
 800f654:	60a2      	str	r2, [r4, #8]
 800f656:	6123      	str	r3, [r4, #16]
 800f658:	7561      	strb	r1, [r4, #21]
 800f65a:	7da0      	ldrb	r0, [r4, #22]
 800f65c:	f080 0001 	eor.w	r0, r0, #1
 800f660:	b002      	add	sp, #8
 800f662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f666:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f66a:	801a      	strh	r2, [r3, #0]
 800f66c:	e7ed      	b.n	800f64a <ucdr_serialize_int16_t+0x9e>
 800f66e:	68a2      	ldr	r2, [r4, #8]
 800f670:	6923      	ldr	r3, [r4, #16]
 800f672:	7da0      	ldrb	r0, [r4, #22]
 800f674:	7567      	strb	r7, [r4, #21]
 800f676:	1b92      	subs	r2, r2, r6
 800f678:	1b9b      	subs	r3, r3, r6
 800f67a:	f080 0001 	eor.w	r0, r0, #1
 800f67e:	60a2      	str	r2, [r4, #8]
 800f680:	6123      	str	r3, [r4, #16]
 800f682:	b002      	add	sp, #8
 800f684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f688:	68a3      	ldr	r3, [r4, #8]
 800f68a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f68e:	701a      	strb	r2, [r3, #0]
 800f690:	e7bc      	b.n	800f60c <ucdr_serialize_int16_t+0x60>
 800f692:	4628      	mov	r0, r5
 800f694:	f10d 0506 	add.w	r5, sp, #6
 800f698:	4629      	mov	r1, r5
 800f69a:	4632      	mov	r2, r6
 800f69c:	f008 ff8d 	bl	80185ba <memcpy>
 800f6a0:	68a0      	ldr	r0, [r4, #8]
 800f6a2:	4642      	mov	r2, r8
 800f6a4:	19a9      	adds	r1, r5, r6
 800f6a6:	f008 ff88 	bl	80185ba <memcpy>
 800f6aa:	e7af      	b.n	800f60c <ucdr_serialize_int16_t+0x60>

0800f6ac <ucdr_deserialize_int16_t>:
 800f6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6b0:	460d      	mov	r5, r1
 800f6b2:	2102      	movs	r1, #2
 800f6b4:	4604      	mov	r4, r0
 800f6b6:	f000 f9f5 	bl	800faa4 <ucdr_buffer_alignment>
 800f6ba:	4601      	mov	r1, r0
 800f6bc:	4620      	mov	r0, r4
 800f6be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f6c2:	f000 fa33 	bl	800fb2c <ucdr_advance_buffer>
 800f6c6:	2102      	movs	r1, #2
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f000 f98b 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800f6ce:	bb60      	cbnz	r0, 800f72a <ucdr_deserialize_int16_t+0x7e>
 800f6d0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f6d4:	42be      	cmp	r6, r7
 800f6d6:	d923      	bls.n	800f720 <ucdr_deserialize_int16_t+0x74>
 800f6d8:	6923      	ldr	r3, [r4, #16]
 800f6da:	60a6      	str	r6, [r4, #8]
 800f6dc:	1bf6      	subs	r6, r6, r7
 800f6de:	4433      	add	r3, r6
 800f6e0:	f1c6 0902 	rsb	r9, r6, #2
 800f6e4:	6123      	str	r3, [r4, #16]
 800f6e6:	4649      	mov	r1, r9
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f000 f987 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	d034      	beq.n	800f75c <ucdr_deserialize_int16_t+0xb0>
 800f6f2:	7d23      	ldrb	r3, [r4, #20]
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d042      	beq.n	800f77e <ucdr_deserialize_int16_t+0xd2>
 800f6f8:	787b      	ldrb	r3, [r7, #1]
 800f6fa:	702b      	strb	r3, [r5, #0]
 800f6fc:	2e00      	cmp	r6, #0
 800f6fe:	d03a      	beq.n	800f776 <ucdr_deserialize_int16_t+0xca>
 800f700:	783b      	ldrb	r3, [r7, #0]
 800f702:	706b      	strb	r3, [r5, #1]
 800f704:	6923      	ldr	r3, [r4, #16]
 800f706:	68a2      	ldr	r2, [r4, #8]
 800f708:	7da0      	ldrb	r0, [r4, #22]
 800f70a:	2102      	movs	r1, #2
 800f70c:	3302      	adds	r3, #2
 800f70e:	444a      	add	r2, r9
 800f710:	1b9b      	subs	r3, r3, r6
 800f712:	7561      	strb	r1, [r4, #21]
 800f714:	60a2      	str	r2, [r4, #8]
 800f716:	6123      	str	r3, [r4, #16]
 800f718:	f080 0001 	eor.w	r0, r0, #1
 800f71c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f720:	2102      	movs	r1, #2
 800f722:	4620      	mov	r0, r4
 800f724:	f000 f96a 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f728:	b180      	cbz	r0, 800f74c <ucdr_deserialize_int16_t+0xa0>
 800f72a:	7d23      	ldrb	r3, [r4, #20]
 800f72c:	2b01      	cmp	r3, #1
 800f72e:	68a3      	ldr	r3, [r4, #8]
 800f730:	d011      	beq.n	800f756 <ucdr_deserialize_int16_t+0xaa>
 800f732:	785b      	ldrb	r3, [r3, #1]
 800f734:	702b      	strb	r3, [r5, #0]
 800f736:	68a3      	ldr	r3, [r4, #8]
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	706b      	strb	r3, [r5, #1]
 800f73c:	68a2      	ldr	r2, [r4, #8]
 800f73e:	6923      	ldr	r3, [r4, #16]
 800f740:	3202      	adds	r2, #2
 800f742:	3302      	adds	r3, #2
 800f744:	2102      	movs	r1, #2
 800f746:	60a2      	str	r2, [r4, #8]
 800f748:	6123      	str	r3, [r4, #16]
 800f74a:	7561      	strb	r1, [r4, #21]
 800f74c:	7da0      	ldrb	r0, [r4, #22]
 800f74e:	f080 0001 	eor.w	r0, r0, #1
 800f752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f756:	881b      	ldrh	r3, [r3, #0]
 800f758:	802b      	strh	r3, [r5, #0]
 800f75a:	e7ef      	b.n	800f73c <ucdr_deserialize_int16_t+0x90>
 800f75c:	68a2      	ldr	r2, [r4, #8]
 800f75e:	6923      	ldr	r3, [r4, #16]
 800f760:	7da0      	ldrb	r0, [r4, #22]
 800f762:	f884 8015 	strb.w	r8, [r4, #21]
 800f766:	1b92      	subs	r2, r2, r6
 800f768:	1b9b      	subs	r3, r3, r6
 800f76a:	60a2      	str	r2, [r4, #8]
 800f76c:	6123      	str	r3, [r4, #16]
 800f76e:	f080 0001 	eor.w	r0, r0, #1
 800f772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f776:	68a3      	ldr	r3, [r4, #8]
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	706b      	strb	r3, [r5, #1]
 800f77c:	e7c2      	b.n	800f704 <ucdr_deserialize_int16_t+0x58>
 800f77e:	4639      	mov	r1, r7
 800f780:	4632      	mov	r2, r6
 800f782:	4628      	mov	r0, r5
 800f784:	f008 ff19 	bl	80185ba <memcpy>
 800f788:	68a1      	ldr	r1, [r4, #8]
 800f78a:	464a      	mov	r2, r9
 800f78c:	19a8      	adds	r0, r5, r6
 800f78e:	f008 ff14 	bl	80185ba <memcpy>
 800f792:	e7b7      	b.n	800f704 <ucdr_deserialize_int16_t+0x58>

0800f794 <ucdr_serialize_int32_t>:
 800f794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f798:	b082      	sub	sp, #8
 800f79a:	4604      	mov	r4, r0
 800f79c:	9101      	str	r1, [sp, #4]
 800f79e:	2104      	movs	r1, #4
 800f7a0:	f000 f980 	bl	800faa4 <ucdr_buffer_alignment>
 800f7a4:	4601      	mov	r1, r0
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	7d67      	ldrb	r7, [r4, #21]
 800f7aa:	f000 f9bf 	bl	800fb2c <ucdr_advance_buffer>
 800f7ae:	2104      	movs	r1, #4
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f000 f917 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d139      	bne.n	800f82e <ucdr_serialize_int32_t+0x9a>
 800f7ba:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f7be:	42ab      	cmp	r3, r5
 800f7c0:	d930      	bls.n	800f824 <ucdr_serialize_int32_t+0x90>
 800f7c2:	1b5e      	subs	r6, r3, r5
 800f7c4:	60a3      	str	r3, [r4, #8]
 800f7c6:	6923      	ldr	r3, [r4, #16]
 800f7c8:	f1c6 0804 	rsb	r8, r6, #4
 800f7cc:	4433      	add	r3, r6
 800f7ce:	6123      	str	r3, [r4, #16]
 800f7d0:	4641      	mov	r1, r8
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f000 f912 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	d04c      	beq.n	800f876 <ucdr_serialize_int32_t+0xe2>
 800f7dc:	7d23      	ldrb	r3, [r4, #20]
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	d063      	beq.n	800f8aa <ucdr_serialize_int32_t+0x116>
 800f7e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f7e6:	702b      	strb	r3, [r5, #0]
 800f7e8:	2e00      	cmp	r6, #0
 800f7ea:	d051      	beq.n	800f890 <ucdr_serialize_int32_t+0xfc>
 800f7ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f7f0:	706b      	strb	r3, [r5, #1]
 800f7f2:	2e01      	cmp	r6, #1
 800f7f4:	d050      	beq.n	800f898 <ucdr_serialize_int32_t+0x104>
 800f7f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f7fa:	70ab      	strb	r3, [r5, #2]
 800f7fc:	2e02      	cmp	r6, #2
 800f7fe:	d04f      	beq.n	800f8a0 <ucdr_serialize_int32_t+0x10c>
 800f800:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f804:	70eb      	strb	r3, [r5, #3]
 800f806:	6923      	ldr	r3, [r4, #16]
 800f808:	68a2      	ldr	r2, [r4, #8]
 800f80a:	7da0      	ldrb	r0, [r4, #22]
 800f80c:	3304      	adds	r3, #4
 800f80e:	1b9e      	subs	r6, r3, r6
 800f810:	4442      	add	r2, r8
 800f812:	2304      	movs	r3, #4
 800f814:	f080 0001 	eor.w	r0, r0, #1
 800f818:	60a2      	str	r2, [r4, #8]
 800f81a:	6126      	str	r6, [r4, #16]
 800f81c:	7563      	strb	r3, [r4, #21]
 800f81e:	b002      	add	sp, #8
 800f820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f824:	2104      	movs	r1, #4
 800f826:	4620      	mov	r0, r4
 800f828:	f000 f8e8 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f82c:	b1d0      	cbz	r0, 800f864 <ucdr_serialize_int32_t+0xd0>
 800f82e:	7d23      	ldrb	r3, [r4, #20]
 800f830:	2b01      	cmp	r3, #1
 800f832:	68a3      	ldr	r3, [r4, #8]
 800f834:	d01c      	beq.n	800f870 <ucdr_serialize_int32_t+0xdc>
 800f836:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f83a:	701a      	strb	r2, [r3, #0]
 800f83c:	68a3      	ldr	r3, [r4, #8]
 800f83e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f842:	705a      	strb	r2, [r3, #1]
 800f844:	68a3      	ldr	r3, [r4, #8]
 800f846:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f84a:	709a      	strb	r2, [r3, #2]
 800f84c:	68a3      	ldr	r3, [r4, #8]
 800f84e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f852:	70da      	strb	r2, [r3, #3]
 800f854:	68a2      	ldr	r2, [r4, #8]
 800f856:	6923      	ldr	r3, [r4, #16]
 800f858:	3204      	adds	r2, #4
 800f85a:	3304      	adds	r3, #4
 800f85c:	2104      	movs	r1, #4
 800f85e:	60a2      	str	r2, [r4, #8]
 800f860:	6123      	str	r3, [r4, #16]
 800f862:	7561      	strb	r1, [r4, #21]
 800f864:	7da0      	ldrb	r0, [r4, #22]
 800f866:	f080 0001 	eor.w	r0, r0, #1
 800f86a:	b002      	add	sp, #8
 800f86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f870:	9a01      	ldr	r2, [sp, #4]
 800f872:	601a      	str	r2, [r3, #0]
 800f874:	e7ee      	b.n	800f854 <ucdr_serialize_int32_t+0xc0>
 800f876:	68a2      	ldr	r2, [r4, #8]
 800f878:	6923      	ldr	r3, [r4, #16]
 800f87a:	7da0      	ldrb	r0, [r4, #22]
 800f87c:	7567      	strb	r7, [r4, #21]
 800f87e:	1b92      	subs	r2, r2, r6
 800f880:	1b9b      	subs	r3, r3, r6
 800f882:	f080 0001 	eor.w	r0, r0, #1
 800f886:	60a2      	str	r2, [r4, #8]
 800f888:	6123      	str	r3, [r4, #16]
 800f88a:	b002      	add	sp, #8
 800f88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f890:	68a3      	ldr	r3, [r4, #8]
 800f892:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f896:	701a      	strb	r2, [r3, #0]
 800f898:	68a3      	ldr	r3, [r4, #8]
 800f89a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f89e:	701a      	strb	r2, [r3, #0]
 800f8a0:	68a3      	ldr	r3, [r4, #8]
 800f8a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f8a6:	701a      	strb	r2, [r3, #0]
 800f8a8:	e7ad      	b.n	800f806 <ucdr_serialize_int32_t+0x72>
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	ad01      	add	r5, sp, #4
 800f8ae:	4629      	mov	r1, r5
 800f8b0:	4632      	mov	r2, r6
 800f8b2:	f008 fe82 	bl	80185ba <memcpy>
 800f8b6:	68a0      	ldr	r0, [r4, #8]
 800f8b8:	4642      	mov	r2, r8
 800f8ba:	19a9      	adds	r1, r5, r6
 800f8bc:	f008 fe7d 	bl	80185ba <memcpy>
 800f8c0:	e7a1      	b.n	800f806 <ucdr_serialize_int32_t+0x72>
 800f8c2:	bf00      	nop

0800f8c4 <ucdr_deserialize_int32_t>:
 800f8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8c8:	460d      	mov	r5, r1
 800f8ca:	2104      	movs	r1, #4
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	f000 f8e9 	bl	800faa4 <ucdr_buffer_alignment>
 800f8d2:	4601      	mov	r1, r0
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f8da:	f000 f927 	bl	800fb2c <ucdr_advance_buffer>
 800f8de:	2104      	movs	r1, #4
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f000 f87f 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d138      	bne.n	800f95c <ucdr_deserialize_int32_t+0x98>
 800f8ea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f8ee:	42b7      	cmp	r7, r6
 800f8f0:	d92f      	bls.n	800f952 <ucdr_deserialize_int32_t+0x8e>
 800f8f2:	6923      	ldr	r3, [r4, #16]
 800f8f4:	60a7      	str	r7, [r4, #8]
 800f8f6:	1bbf      	subs	r7, r7, r6
 800f8f8:	443b      	add	r3, r7
 800f8fa:	f1c7 0904 	rsb	r9, r7, #4
 800f8fe:	6123      	str	r3, [r4, #16]
 800f900:	4649      	mov	r1, r9
 800f902:	4620      	mov	r0, r4
 800f904:	f000 f87a 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f908:	2800      	cmp	r0, #0
 800f90a:	d046      	beq.n	800f99a <ucdr_deserialize_int32_t+0xd6>
 800f90c:	7d23      	ldrb	r3, [r4, #20]
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d05c      	beq.n	800f9cc <ucdr_deserialize_int32_t+0x108>
 800f912:	78f3      	ldrb	r3, [r6, #3]
 800f914:	702b      	strb	r3, [r5, #0]
 800f916:	2f00      	cmp	r7, #0
 800f918:	d04c      	beq.n	800f9b4 <ucdr_deserialize_int32_t+0xf0>
 800f91a:	78b3      	ldrb	r3, [r6, #2]
 800f91c:	706b      	strb	r3, [r5, #1]
 800f91e:	2f01      	cmp	r7, #1
 800f920:	f105 0302 	add.w	r3, r5, #2
 800f924:	d04a      	beq.n	800f9bc <ucdr_deserialize_int32_t+0xf8>
 800f926:	7873      	ldrb	r3, [r6, #1]
 800f928:	70ab      	strb	r3, [r5, #2]
 800f92a:	2f02      	cmp	r7, #2
 800f92c:	f105 0303 	add.w	r3, r5, #3
 800f930:	d048      	beq.n	800f9c4 <ucdr_deserialize_int32_t+0x100>
 800f932:	7833      	ldrb	r3, [r6, #0]
 800f934:	70eb      	strb	r3, [r5, #3]
 800f936:	6923      	ldr	r3, [r4, #16]
 800f938:	68a2      	ldr	r2, [r4, #8]
 800f93a:	7da0      	ldrb	r0, [r4, #22]
 800f93c:	2104      	movs	r1, #4
 800f93e:	3304      	adds	r3, #4
 800f940:	444a      	add	r2, r9
 800f942:	1bdb      	subs	r3, r3, r7
 800f944:	7561      	strb	r1, [r4, #21]
 800f946:	60a2      	str	r2, [r4, #8]
 800f948:	6123      	str	r3, [r4, #16]
 800f94a:	f080 0001 	eor.w	r0, r0, #1
 800f94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f952:	2104      	movs	r1, #4
 800f954:	4620      	mov	r0, r4
 800f956:	f000 f851 	bl	800f9fc <ucdr_check_final_buffer_behavior>
 800f95a:	b1b0      	cbz	r0, 800f98a <ucdr_deserialize_int32_t+0xc6>
 800f95c:	7d23      	ldrb	r3, [r4, #20]
 800f95e:	2b01      	cmp	r3, #1
 800f960:	68a3      	ldr	r3, [r4, #8]
 800f962:	d017      	beq.n	800f994 <ucdr_deserialize_int32_t+0xd0>
 800f964:	78db      	ldrb	r3, [r3, #3]
 800f966:	702b      	strb	r3, [r5, #0]
 800f968:	68a3      	ldr	r3, [r4, #8]
 800f96a:	789b      	ldrb	r3, [r3, #2]
 800f96c:	706b      	strb	r3, [r5, #1]
 800f96e:	68a3      	ldr	r3, [r4, #8]
 800f970:	785b      	ldrb	r3, [r3, #1]
 800f972:	70ab      	strb	r3, [r5, #2]
 800f974:	68a3      	ldr	r3, [r4, #8]
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	70eb      	strb	r3, [r5, #3]
 800f97a:	68a2      	ldr	r2, [r4, #8]
 800f97c:	6923      	ldr	r3, [r4, #16]
 800f97e:	3204      	adds	r2, #4
 800f980:	3304      	adds	r3, #4
 800f982:	2104      	movs	r1, #4
 800f984:	60a2      	str	r2, [r4, #8]
 800f986:	6123      	str	r3, [r4, #16]
 800f988:	7561      	strb	r1, [r4, #21]
 800f98a:	7da0      	ldrb	r0, [r4, #22]
 800f98c:	f080 0001 	eor.w	r0, r0, #1
 800f990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	602b      	str	r3, [r5, #0]
 800f998:	e7ef      	b.n	800f97a <ucdr_deserialize_int32_t+0xb6>
 800f99a:	68a2      	ldr	r2, [r4, #8]
 800f99c:	6923      	ldr	r3, [r4, #16]
 800f99e:	7da0      	ldrb	r0, [r4, #22]
 800f9a0:	f884 8015 	strb.w	r8, [r4, #21]
 800f9a4:	1bd2      	subs	r2, r2, r7
 800f9a6:	1bdb      	subs	r3, r3, r7
 800f9a8:	60a2      	str	r2, [r4, #8]
 800f9aa:	6123      	str	r3, [r4, #16]
 800f9ac:	f080 0001 	eor.w	r0, r0, #1
 800f9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9b4:	68a3      	ldr	r3, [r4, #8]
 800f9b6:	789b      	ldrb	r3, [r3, #2]
 800f9b8:	706b      	strb	r3, [r5, #1]
 800f9ba:	1cab      	adds	r3, r5, #2
 800f9bc:	68a2      	ldr	r2, [r4, #8]
 800f9be:	7852      	ldrb	r2, [r2, #1]
 800f9c0:	f803 2b01 	strb.w	r2, [r3], #1
 800f9c4:	68a2      	ldr	r2, [r4, #8]
 800f9c6:	7812      	ldrb	r2, [r2, #0]
 800f9c8:	701a      	strb	r2, [r3, #0]
 800f9ca:	e7b4      	b.n	800f936 <ucdr_deserialize_int32_t+0x72>
 800f9cc:	4631      	mov	r1, r6
 800f9ce:	463a      	mov	r2, r7
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	f008 fdf2 	bl	80185ba <memcpy>
 800f9d6:	68a1      	ldr	r1, [r4, #8]
 800f9d8:	464a      	mov	r2, r9
 800f9da:	19e8      	adds	r0, r5, r7
 800f9dc:	f008 fded 	bl	80185ba <memcpy>
 800f9e0:	e7a9      	b.n	800f936 <ucdr_deserialize_int32_t+0x72>
 800f9e2:	bf00      	nop

0800f9e4 <ucdr_check_buffer_available_for>:
 800f9e4:	7d83      	ldrb	r3, [r0, #22]
 800f9e6:	b93b      	cbnz	r3, 800f9f8 <ucdr_check_buffer_available_for+0x14>
 800f9e8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f9ec:	4419      	add	r1, r3
 800f9ee:	4288      	cmp	r0, r1
 800f9f0:	bf34      	ite	cc
 800f9f2:	2000      	movcc	r0, #0
 800f9f4:	2001      	movcs	r0, #1
 800f9f6:	4770      	bx	lr
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	4770      	bx	lr

0800f9fc <ucdr_check_final_buffer_behavior>:
 800f9fc:	7d83      	ldrb	r3, [r0, #22]
 800f9fe:	b943      	cbnz	r3, 800fa12 <ucdr_check_final_buffer_behavior+0x16>
 800fa00:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800fa04:	4291      	cmp	r1, r2
 800fa06:	b510      	push	{r4, lr}
 800fa08:	4604      	mov	r4, r0
 800fa0a:	d205      	bcs.n	800fa18 <ucdr_check_final_buffer_behavior+0x1c>
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	4618      	mov	r0, r3
 800fa10:	bd10      	pop	{r4, pc}
 800fa12:	2300      	movs	r3, #0
 800fa14:	4618      	mov	r0, r3
 800fa16:	4770      	bx	lr
 800fa18:	6982      	ldr	r2, [r0, #24]
 800fa1a:	b13a      	cbz	r2, 800fa2c <ucdr_check_final_buffer_behavior+0x30>
 800fa1c:	69c1      	ldr	r1, [r0, #28]
 800fa1e:	4790      	blx	r2
 800fa20:	f080 0301 	eor.w	r3, r0, #1
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	75a0      	strb	r0, [r4, #22]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	bd10      	pop	{r4, pc}
 800fa2c:	2001      	movs	r0, #1
 800fa2e:	75a0      	strb	r0, [r4, #22]
 800fa30:	e7fa      	b.n	800fa28 <ucdr_check_final_buffer_behavior+0x2c>
 800fa32:	bf00      	nop

0800fa34 <ucdr_set_on_full_buffer_callback>:
 800fa34:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop

0800fa3c <ucdr_init_buffer_origin_offset_endian>:
 800fa3c:	b410      	push	{r4}
 800fa3e:	9c01      	ldr	r4, [sp, #4]
 800fa40:	6001      	str	r1, [r0, #0]
 800fa42:	440a      	add	r2, r1
 800fa44:	6042      	str	r2, [r0, #4]
 800fa46:	190a      	adds	r2, r1, r4
 800fa48:	441c      	add	r4, r3
 800fa4a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800fa4e:	6082      	str	r2, [r0, #8]
 800fa50:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fa54:	7503      	strb	r3, [r0, #20]
 800fa56:	2200      	movs	r2, #0
 800fa58:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800fa5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa60:	7542      	strb	r2, [r0, #21]
 800fa62:	7582      	strb	r2, [r0, #22]
 800fa64:	4770      	bx	lr
 800fa66:	bf00      	nop

0800fa68 <ucdr_init_buffer_origin_offset>:
 800fa68:	b510      	push	{r4, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	9c04      	ldr	r4, [sp, #16]
 800fa6e:	9400      	str	r4, [sp, #0]
 800fa70:	2401      	movs	r4, #1
 800fa72:	9401      	str	r4, [sp, #4]
 800fa74:	f7ff ffe2 	bl	800fa3c <ucdr_init_buffer_origin_offset_endian>
 800fa78:	b002      	add	sp, #8
 800fa7a:	bd10      	pop	{r4, pc}

0800fa7c <ucdr_init_buffer_origin>:
 800fa7c:	b510      	push	{r4, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	2400      	movs	r4, #0
 800fa82:	9400      	str	r4, [sp, #0]
 800fa84:	f7ff fff0 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 800fa88:	b002      	add	sp, #8
 800fa8a:	bd10      	pop	{r4, pc}

0800fa8c <ucdr_init_buffer>:
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f7ff bff5 	b.w	800fa7c <ucdr_init_buffer_origin>
 800fa92:	bf00      	nop

0800fa94 <ucdr_alignment>:
 800fa94:	fbb0 f3f1 	udiv	r3, r0, r1
 800fa98:	fb03 0011 	mls	r0, r3, r1, r0
 800fa9c:	1a08      	subs	r0, r1, r0
 800fa9e:	3901      	subs	r1, #1
 800faa0:	4008      	ands	r0, r1
 800faa2:	4770      	bx	lr

0800faa4 <ucdr_buffer_alignment>:
 800faa4:	7d43      	ldrb	r3, [r0, #21]
 800faa6:	428b      	cmp	r3, r1
 800faa8:	d208      	bcs.n	800fabc <ucdr_buffer_alignment+0x18>
 800faaa:	6900      	ldr	r0, [r0, #16]
 800faac:	fbb0 f3f1 	udiv	r3, r0, r1
 800fab0:	fb01 0013 	mls	r0, r1, r3, r0
 800fab4:	1a08      	subs	r0, r1, r0
 800fab6:	3901      	subs	r1, #1
 800fab8:	4008      	ands	r0, r1
 800faba:	4770      	bx	lr
 800fabc:	2000      	movs	r0, #0
 800fabe:	4770      	bx	lr

0800fac0 <ucdr_align_to>:
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4604      	mov	r4, r0
 800fac4:	460d      	mov	r5, r1
 800fac6:	f7ff ffed 	bl	800faa4 <ucdr_buffer_alignment>
 800faca:	68a3      	ldr	r3, [r4, #8]
 800facc:	6921      	ldr	r1, [r4, #16]
 800face:	7565      	strb	r5, [r4, #21]
 800fad0:	181a      	adds	r2, r3, r0
 800fad2:	6863      	ldr	r3, [r4, #4]
 800fad4:	4293      	cmp	r3, r2
 800fad6:	4408      	add	r0, r1
 800fad8:	bf28      	it	cs
 800fada:	4613      	movcs	r3, r2
 800fadc:	6120      	str	r0, [r4, #16]
 800fade:	60a3      	str	r3, [r4, #8]
 800fae0:	bd38      	pop	{r3, r4, r5, pc}
 800fae2:	bf00      	nop

0800fae4 <ucdr_buffer_length>:
 800fae4:	6882      	ldr	r2, [r0, #8]
 800fae6:	6800      	ldr	r0, [r0, #0]
 800fae8:	1a10      	subs	r0, r2, r0
 800faea:	4770      	bx	lr

0800faec <ucdr_buffer_remaining>:
 800faec:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800faf0:	1a10      	subs	r0, r2, r0
 800faf2:	4770      	bx	lr

0800faf4 <ucdr_check_final_buffer_behavior_array>:
 800faf4:	b538      	push	{r3, r4, r5, lr}
 800faf6:	7d83      	ldrb	r3, [r0, #22]
 800faf8:	b963      	cbnz	r3, 800fb14 <ucdr_check_final_buffer_behavior_array+0x20>
 800fafa:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	4604      	mov	r4, r0
 800fb02:	460d      	mov	r5, r1
 800fb04:	d308      	bcc.n	800fb18 <ucdr_check_final_buffer_behavior_array+0x24>
 800fb06:	b139      	cbz	r1, 800fb18 <ucdr_check_final_buffer_behavior_array+0x24>
 800fb08:	6983      	ldr	r3, [r0, #24]
 800fb0a:	b163      	cbz	r3, 800fb26 <ucdr_check_final_buffer_behavior_array+0x32>
 800fb0c:	69c1      	ldr	r1, [r0, #28]
 800fb0e:	4798      	blx	r3
 800fb10:	75a0      	strb	r0, [r4, #22]
 800fb12:	b108      	cbz	r0, 800fb18 <ucdr_check_final_buffer_behavior_array+0x24>
 800fb14:	2000      	movs	r0, #0
 800fb16:	bd38      	pop	{r3, r4, r5, pc}
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f7ff ffe7 	bl	800faec <ucdr_buffer_remaining>
 800fb1e:	42a8      	cmp	r0, r5
 800fb20:	bf28      	it	cs
 800fb22:	4628      	movcs	r0, r5
 800fb24:	bd38      	pop	{r3, r4, r5, pc}
 800fb26:	2301      	movs	r3, #1
 800fb28:	7583      	strb	r3, [r0, #22]
 800fb2a:	e7f3      	b.n	800fb14 <ucdr_check_final_buffer_behavior_array+0x20>

0800fb2c <ucdr_advance_buffer>:
 800fb2c:	b538      	push	{r3, r4, r5, lr}
 800fb2e:	4604      	mov	r4, r0
 800fb30:	460d      	mov	r5, r1
 800fb32:	f7ff ff57 	bl	800f9e4 <ucdr_check_buffer_available_for>
 800fb36:	b178      	cbz	r0, 800fb58 <ucdr_advance_buffer+0x2c>
 800fb38:	6923      	ldr	r3, [r4, #16]
 800fb3a:	68a2      	ldr	r2, [r4, #8]
 800fb3c:	442b      	add	r3, r5
 800fb3e:	6123      	str	r3, [r4, #16]
 800fb40:	2301      	movs	r3, #1
 800fb42:	442a      	add	r2, r5
 800fb44:	7563      	strb	r3, [r4, #21]
 800fb46:	60a2      	str	r2, [r4, #8]
 800fb48:	bd38      	pop	{r3, r4, r5, pc}
 800fb4a:	68a2      	ldr	r2, [r4, #8]
 800fb4c:	6923      	ldr	r3, [r4, #16]
 800fb4e:	4402      	add	r2, r0
 800fb50:	4403      	add	r3, r0
 800fb52:	1a2d      	subs	r5, r5, r0
 800fb54:	60a2      	str	r2, [r4, #8]
 800fb56:	6123      	str	r3, [r4, #16]
 800fb58:	4629      	mov	r1, r5
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	f7ff ffc9 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 800fb62:	2800      	cmp	r0, #0
 800fb64:	d1f1      	bne.n	800fb4a <ucdr_advance_buffer+0x1e>
 800fb66:	2301      	movs	r3, #1
 800fb68:	7563      	strb	r3, [r4, #21]
 800fb6a:	bd38      	pop	{r3, r4, r5, pc}

0800fb6c <uxr_buffer_delete_entity>:
 800fb6c:	b510      	push	{r4, lr}
 800fb6e:	2300      	movs	r3, #0
 800fb70:	b08e      	sub	sp, #56	@ 0x38
 800fb72:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fb76:	2303      	movs	r3, #3
 800fb78:	9300      	str	r3, [sp, #0]
 800fb7a:	2204      	movs	r2, #4
 800fb7c:	ab06      	add	r3, sp, #24
 800fb7e:	4604      	mov	r4, r0
 800fb80:	9103      	str	r1, [sp, #12]
 800fb82:	f001 fc71 	bl	8011468 <uxr_prepare_stream_to_write_submessage>
 800fb86:	b918      	cbnz	r0, 800fb90 <uxr_buffer_delete_entity+0x24>
 800fb88:	4604      	mov	r4, r0
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	b00e      	add	sp, #56	@ 0x38
 800fb8e:	bd10      	pop	{r4, pc}
 800fb90:	9902      	ldr	r1, [sp, #8]
 800fb92:	aa05      	add	r2, sp, #20
 800fb94:	4620      	mov	r0, r4
 800fb96:	f001 fd9d 	bl	80116d4 <uxr_init_base_object_request>
 800fb9a:	a905      	add	r1, sp, #20
 800fb9c:	4604      	mov	r4, r0
 800fb9e:	a806      	add	r0, sp, #24
 800fba0:	f003 fc94 	bl	80134cc <uxr_serialize_DELETE_Payload>
 800fba4:	4620      	mov	r0, r4
 800fba6:	b00e      	add	sp, #56	@ 0x38
 800fba8:	bd10      	pop	{r4, pc}
 800fbaa:	bf00      	nop

0800fbac <uxr_common_create_entity>:
 800fbac:	b510      	push	{r4, lr}
 800fbae:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fbb2:	b08c      	sub	sp, #48	@ 0x30
 800fbb4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fbb8:	f1bc 0f01 	cmp.w	ip, #1
 800fbbc:	bf0c      	ite	eq
 800fbbe:	f003 0201 	andeq.w	r2, r3, #1
 800fbc2:	2200      	movne	r2, #0
 800fbc4:	330e      	adds	r3, #14
 800fbc6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800fbca:	9101      	str	r1, [sp, #4]
 800fbcc:	441a      	add	r2, r3
 800fbce:	2301      	movs	r3, #1
 800fbd0:	9300      	str	r3, [sp, #0]
 800fbd2:	9903      	ldr	r1, [sp, #12]
 800fbd4:	ab04      	add	r3, sp, #16
 800fbd6:	b292      	uxth	r2, r2
 800fbd8:	4604      	mov	r4, r0
 800fbda:	f001 fc45 	bl	8011468 <uxr_prepare_stream_to_write_submessage>
 800fbde:	b918      	cbnz	r0, 800fbe8 <uxr_common_create_entity+0x3c>
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	b00c      	add	sp, #48	@ 0x30
 800fbe6:	bd10      	pop	{r4, pc}
 800fbe8:	9902      	ldr	r1, [sp, #8]
 800fbea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fbec:	4620      	mov	r0, r4
 800fbee:	f001 fd71 	bl	80116d4 <uxr_init_base_object_request>
 800fbf2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fbf4:	4604      	mov	r4, r0
 800fbf6:	a804      	add	r0, sp, #16
 800fbf8:	f003 fbb0 	bl	801335c <uxr_serialize_CREATE_Payload>
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	b00c      	add	sp, #48	@ 0x30
 800fc00:	bd10      	pop	{r4, pc}
 800fc02:	bf00      	nop

0800fc04 <uxr_buffer_create_participant_bin>:
 800fc04:	b570      	push	{r4, r5, r6, lr}
 800fc06:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800fc0a:	ac11      	add	r4, sp, #68	@ 0x44
 800fc0c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800fc10:	2303      	movs	r3, #3
 800fc12:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fc16:	7223      	strb	r3, [r4, #8]
 800fc18:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800fc1a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800fc1e:	2201      	movs	r2, #1
 800fc20:	2100      	movs	r1, #0
 800fc22:	4605      	mov	r5, r0
 800fc24:	7122      	strb	r2, [r4, #4]
 800fc26:	f88d 1014 	strb.w	r1, [sp, #20]
 800fc2a:	b1cb      	cbz	r3, 800fc60 <uxr_buffer_create_participant_bin+0x5c>
 800fc2c:	f88d 201c 	strb.w	r2, [sp, #28]
 800fc30:	9308      	str	r3, [sp, #32]
 800fc32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc36:	a915      	add	r1, sp, #84	@ 0x54
 800fc38:	a809      	add	r0, sp, #36	@ 0x24
 800fc3a:	f7ff ff27 	bl	800fa8c <ucdr_init_buffer>
 800fc3e:	a905      	add	r1, sp, #20
 800fc40:	a809      	add	r0, sp, #36	@ 0x24
 800fc42:	f002 ff6d 	bl	8012b20 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fc46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc48:	9600      	str	r6, [sp, #0]
 800fc4a:	9401      	str	r4, [sp, #4]
 800fc4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fc50:	60e3      	str	r3, [r4, #12]
 800fc52:	4628      	mov	r0, r5
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	f7ff ffa9 	bl	800fbac <uxr_common_create_entity>
 800fc5a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800fc5e:	bd70      	pop	{r4, r5, r6, pc}
 800fc60:	f88d 301c 	strb.w	r3, [sp, #28]
 800fc64:	e7e5      	b.n	800fc32 <uxr_buffer_create_participant_bin+0x2e>
 800fc66:	bf00      	nop

0800fc68 <uxr_buffer_create_topic_bin>:
 800fc68:	b570      	push	{r4, r5, r6, lr}
 800fc6a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800fc6e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc72:	9105      	str	r1, [sp, #20]
 800fc74:	4605      	mov	r5, r0
 800fc76:	a997      	add	r1, sp, #604	@ 0x25c
 800fc78:	4618      	mov	r0, r3
 800fc7a:	2302      	movs	r3, #2
 800fc7c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800fc80:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800fc84:	f000 fa58 	bl	8010138 <uxr_object_id_to_raw>
 800fc88:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800fc8a:	9306      	str	r3, [sp, #24]
 800fc8c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800fc8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc90:	2303      	movs	r3, #3
 800fc92:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fc96:	2301      	movs	r3, #1
 800fc98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc9c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fca0:	a917      	add	r1, sp, #92	@ 0x5c
 800fca2:	2300      	movs	r3, #0
 800fca4:	a80b      	add	r0, sp, #44	@ 0x2c
 800fca6:	f88d 301c 	strb.w	r3, [sp, #28]
 800fcaa:	f7ff feef 	bl	800fa8c <ucdr_init_buffer>
 800fcae:	a906      	add	r1, sp, #24
 800fcb0:	a80b      	add	r0, sp, #44	@ 0x2c
 800fcb2:	f002 ff57 	bl	8012b64 <uxr_serialize_OBJK_Topic_Binary>
 800fcb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcb8:	9316      	str	r3, [sp, #88]	@ 0x58
 800fcba:	ac13      	add	r4, sp, #76	@ 0x4c
 800fcbc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fcc0:	9600      	str	r6, [sp, #0]
 800fcc2:	9401      	str	r4, [sp, #4]
 800fcc4:	b29b      	uxth	r3, r3
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f7ff ff70 	bl	800fbac <uxr_common_create_entity>
 800fccc:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800fcd0:	bd70      	pop	{r4, r5, r6, pc}
 800fcd2:	bf00      	nop

0800fcd4 <uxr_buffer_create_publisher_bin>:
 800fcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcd6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800fcda:	4605      	mov	r5, r0
 800fcdc:	9105      	str	r1, [sp, #20]
 800fcde:	4618      	mov	r0, r3
 800fce0:	2603      	movs	r6, #3
 800fce2:	a992      	add	r1, sp, #584	@ 0x248
 800fce4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fce8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800fcec:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800fcf0:	f000 fa22 	bl	8010138 <uxr_object_id_to_raw>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fcfa:	a912      	add	r1, sp, #72	@ 0x48
 800fcfc:	a806      	add	r0, sp, #24
 800fcfe:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fd02:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fd06:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800fd0a:	f7ff febf 	bl	800fa8c <ucdr_init_buffer>
 800fd0e:	a993      	add	r1, sp, #588	@ 0x24c
 800fd10:	a806      	add	r0, sp, #24
 800fd12:	f002 ffdb 	bl	8012ccc <uxr_serialize_OBJK_Publisher_Binary>
 800fd16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd18:	9311      	str	r3, [sp, #68]	@ 0x44
 800fd1a:	ac0e      	add	r4, sp, #56	@ 0x38
 800fd1c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd20:	9700      	str	r7, [sp, #0]
 800fd22:	9401      	str	r4, [sp, #4]
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	4628      	mov	r0, r5
 800fd28:	f7ff ff40 	bl	800fbac <uxr_common_create_entity>
 800fd2c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800fd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd32:	bf00      	nop

0800fd34 <uxr_buffer_create_subscriber_bin>:
 800fd34:	b570      	push	{r4, r5, r6, lr}
 800fd36:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800fd3a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fd3e:	9105      	str	r1, [sp, #20]
 800fd40:	4605      	mov	r5, r0
 800fd42:	a992      	add	r1, sp, #584	@ 0x248
 800fd44:	4618      	mov	r0, r3
 800fd46:	2304      	movs	r3, #4
 800fd48:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800fd4c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800fd50:	f000 f9f2 	bl	8010138 <uxr_object_id_to_raw>
 800fd54:	2300      	movs	r3, #0
 800fd56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd5a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fd5e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fd62:	a912      	add	r1, sp, #72	@ 0x48
 800fd64:	2303      	movs	r3, #3
 800fd66:	a806      	add	r0, sp, #24
 800fd68:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800fd6c:	f7ff fe8e 	bl	800fa8c <ucdr_init_buffer>
 800fd70:	a993      	add	r1, sp, #588	@ 0x24c
 800fd72:	a806      	add	r0, sp, #24
 800fd74:	f003 f85a 	bl	8012e2c <uxr_serialize_OBJK_Subscriber_Binary>
 800fd78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd7a:	9311      	str	r3, [sp, #68]	@ 0x44
 800fd7c:	ac0e      	add	r4, sp, #56	@ 0x38
 800fd7e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd82:	9600      	str	r6, [sp, #0]
 800fd84:	9401      	str	r4, [sp, #4]
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	4628      	mov	r0, r5
 800fd8a:	f7ff ff0f 	bl	800fbac <uxr_common_create_entity>
 800fd8e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800fd92:	bd70      	pop	{r4, r5, r6, pc}

0800fd94 <uxr_buffer_create_datawriter_bin>:
 800fd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd98:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800fd9c:	ac1d      	add	r4, sp, #116	@ 0x74
 800fd9e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fda2:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800fda6:	9105      	str	r1, [sp, #20]
 800fda8:	4606      	mov	r6, r0
 800fdaa:	a9a1      	add	r1, sp, #644	@ 0x284
 800fdac:	4618      	mov	r0, r3
 800fdae:	2305      	movs	r3, #5
 800fdb0:	7123      	strb	r3, [r4, #4]
 800fdb2:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800fdb6:	2703      	movs	r7, #3
 800fdb8:	f000 f9be 	bl	8010138 <uxr_object_id_to_raw>
 800fdbc:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800fdbe:	7227      	strb	r7, [r4, #8]
 800fdc0:	a90e      	add	r1, sp, #56	@ 0x38
 800fdc2:	f000 f9b9 	bl	8010138 <uxr_object_id_to_raw>
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800fdcc:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800fdd0:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fdd4:	3d00      	subs	r5, #0
 800fdd6:	bf18      	it	ne
 800fdd8:	2501      	movne	r5, #1
 800fdda:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800fdde:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800fde2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fde6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fdea:	2301      	movs	r3, #1
 800fdec:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800fdf0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800fdf4:	bb8a      	cbnz	r2, 800fe5a <uxr_buffer_create_datawriter_bin+0xc6>
 800fdf6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fdfa:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800fdfe:	f04f 0c13 	mov.w	ip, #19
 800fe02:	250b      	movs	r5, #11
 800fe04:	2221      	movs	r2, #33	@ 0x21
 800fe06:	2111      	movs	r1, #17
 800fe08:	2009      	movs	r0, #9
 800fe0a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800fe0e:	b923      	cbnz	r3, 800fe1a <uxr_buffer_create_datawriter_bin+0x86>
 800fe10:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800fe14:	4672      	mov	r2, lr
 800fe16:	4661      	mov	r1, ip
 800fe18:	4628      	mov	r0, r5
 800fe1a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800fe1e:	2b01      	cmp	r3, #1
 800fe20:	d025      	beq.n	800fe6e <uxr_buffer_create_datawriter_bin+0xda>
 800fe22:	2b03      	cmp	r3, #3
 800fe24:	d029      	beq.n	800fe7a <uxr_buffer_create_datawriter_bin+0xe6>
 800fe26:	b32b      	cbz	r3, 800fe74 <uxr_buffer_create_datawriter_bin+0xe0>
 800fe28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe2c:	a921      	add	r1, sp, #132	@ 0x84
 800fe2e:	a806      	add	r0, sp, #24
 800fe30:	f7ff fe2c 	bl	800fa8c <ucdr_init_buffer>
 800fe34:	a90e      	add	r1, sp, #56	@ 0x38
 800fe36:	a806      	add	r0, sp, #24
 800fe38:	f003 f8aa 	bl	8012f90 <uxr_serialize_OBJK_DataWriter_Binary>
 800fe3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe3e:	f8cd 8000 	str.w	r8, [sp]
 800fe42:	9401      	str	r4, [sp, #4]
 800fe44:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fe48:	60e3      	str	r3, [r4, #12]
 800fe4a:	4630      	mov	r0, r6
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	f7ff fead 	bl	800fbac <uxr_common_create_entity>
 800fe52:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800fe56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe5a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800fe5e:	f04f 0c12 	mov.w	ip, #18
 800fe62:	250a      	movs	r5, #10
 800fe64:	2220      	movs	r2, #32
 800fe66:	2110      	movs	r1, #16
 800fe68:	2008      	movs	r0, #8
 800fe6a:	2702      	movs	r7, #2
 800fe6c:	e7cd      	b.n	800fe0a <uxr_buffer_create_datawriter_bin+0x76>
 800fe6e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800fe72:	e7d9      	b.n	800fe28 <uxr_buffer_create_datawriter_bin+0x94>
 800fe74:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800fe78:	e7d6      	b.n	800fe28 <uxr_buffer_create_datawriter_bin+0x94>
 800fe7a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800fe7e:	e7d3      	b.n	800fe28 <uxr_buffer_create_datawriter_bin+0x94>

0800fe80 <uxr_buffer_create_datareader_bin>:
 800fe80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe84:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800fe88:	ac1f      	add	r4, sp, #124	@ 0x7c
 800fe8a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fe8e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800fe92:	9105      	str	r1, [sp, #20]
 800fe94:	4606      	mov	r6, r0
 800fe96:	a9a3      	add	r1, sp, #652	@ 0x28c
 800fe98:	4618      	mov	r0, r3
 800fe9a:	2306      	movs	r3, #6
 800fe9c:	7123      	strb	r3, [r4, #4]
 800fe9e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800fea2:	2703      	movs	r7, #3
 800fea4:	f000 f948 	bl	8010138 <uxr_object_id_to_raw>
 800fea8:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800feaa:	7227      	strb	r7, [r4, #8]
 800feac:	a90e      	add	r1, sp, #56	@ 0x38
 800feae:	f000 f943 	bl	8010138 <uxr_object_id_to_raw>
 800feb2:	2300      	movs	r3, #0
 800feb4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800feb8:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800febc:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800fec0:	3d00      	subs	r5, #0
 800fec2:	bf18      	it	ne
 800fec4:	2501      	movne	r5, #1
 800fec6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800feca:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800fece:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800fed2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fed6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800feda:	2301      	movs	r3, #1
 800fedc:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800fee0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800fee4:	bb8a      	cbnz	r2, 800ff4a <uxr_buffer_create_datareader_bin+0xca>
 800fee6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800feea:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800feee:	f04f 0c13 	mov.w	ip, #19
 800fef2:	250b      	movs	r5, #11
 800fef4:	2221      	movs	r2, #33	@ 0x21
 800fef6:	2111      	movs	r1, #17
 800fef8:	2009      	movs	r0, #9
 800fefa:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800fefe:	b923      	cbnz	r3, 800ff0a <uxr_buffer_create_datareader_bin+0x8a>
 800ff00:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800ff04:	4672      	mov	r2, lr
 800ff06:	4661      	mov	r1, ip
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800ff0e:	2b01      	cmp	r3, #1
 800ff10:	d025      	beq.n	800ff5e <uxr_buffer_create_datareader_bin+0xde>
 800ff12:	2b03      	cmp	r3, #3
 800ff14:	d029      	beq.n	800ff6a <uxr_buffer_create_datareader_bin+0xea>
 800ff16:	b32b      	cbz	r3, 800ff64 <uxr_buffer_create_datareader_bin+0xe4>
 800ff18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff1c:	a923      	add	r1, sp, #140	@ 0x8c
 800ff1e:	a806      	add	r0, sp, #24
 800ff20:	f7ff fdb4 	bl	800fa8c <ucdr_init_buffer>
 800ff24:	a90e      	add	r1, sp, #56	@ 0x38
 800ff26:	a806      	add	r0, sp, #24
 800ff28:	f002 fff6 	bl	8012f18 <uxr_serialize_OBJK_DataReader_Binary>
 800ff2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff2e:	f8cd 8000 	str.w	r8, [sp]
 800ff32:	9401      	str	r4, [sp, #4]
 800ff34:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ff38:	60e3      	str	r3, [r4, #12]
 800ff3a:	4630      	mov	r0, r6
 800ff3c:	b29b      	uxth	r3, r3
 800ff3e:	f7ff fe35 	bl	800fbac <uxr_common_create_entity>
 800ff42:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ff46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff4a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ff4e:	f04f 0c12 	mov.w	ip, #18
 800ff52:	250a      	movs	r5, #10
 800ff54:	2220      	movs	r2, #32
 800ff56:	2110      	movs	r1, #16
 800ff58:	2008      	movs	r0, #8
 800ff5a:	2702      	movs	r7, #2
 800ff5c:	e7cd      	b.n	800fefa <uxr_buffer_create_datareader_bin+0x7a>
 800ff5e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ff62:	e7d9      	b.n	800ff18 <uxr_buffer_create_datareader_bin+0x98>
 800ff64:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ff68:	e7d6      	b.n	800ff18 <uxr_buffer_create_datareader_bin+0x98>
 800ff6a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ff6e:	e7d3      	b.n	800ff18 <uxr_buffer_create_datareader_bin+0x98>

0800ff70 <get_custom_error>:
 800ff70:	4b01      	ldr	r3, [pc, #4]	@ (800ff78 <get_custom_error+0x8>)
 800ff72:	7818      	ldrb	r0, [r3, #0]
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop
 800ff78:	20010e7c 	.word	0x20010e7c

0800ff7c <recv_custom_msg>:
 800ff7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff80:	4693      	mov	fp, r2
 800ff82:	b089      	sub	sp, #36	@ 0x24
 800ff84:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800ff88:	9305      	str	r3, [sp, #20]
 800ff8a:	468a      	mov	sl, r1
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	4604      	mov	r4, r0
 800ff90:	f88d 101e 	strb.w	r1, [sp, #30]
 800ff94:	b322      	cbz	r2, 800ffe0 <recv_custom_msg+0x64>
 800ff96:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800ff9a:	f10d 081f 	add.w	r8, sp, #31
 800ff9e:	af05      	add	r7, sp, #20
 800ffa0:	f10d 061e 	add.w	r6, sp, #30
 800ffa4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800ffa8:	e002      	b.n	800ffb0 <recv_custom_msg+0x34>
 800ffaa:	9b05      	ldr	r3, [sp, #20]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	dd0f      	ble.n	800ffd0 <recv_custom_msg+0x54>
 800ffb0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800ffb4:	4623      	mov	r3, r4
 800ffb6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ffba:	e9cd 5600 	strd	r5, r6, [sp]
 800ffbe:	4622      	mov	r2, r4
 800ffc0:	4648      	mov	r0, r9
 800ffc2:	f001 fdb5 	bl	8011b30 <uxr_read_framed_msg>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	d0ef      	beq.n	800ffaa <recv_custom_msg+0x2e>
 800ffca:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ffce:	b1b3      	cbz	r3, 800fffe <recv_custom_msg+0x82>
 800ffd0:	4b0f      	ldr	r3, [pc, #60]	@ (8010010 <recv_custom_msg+0x94>)
 800ffd2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ffd6:	701a      	strb	r2, [r3, #0]
 800ffd8:	2000      	movs	r0, #0
 800ffda:	b009      	add	sp, #36	@ 0x24
 800ffdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffe0:	f10d 021f 	add.w	r2, sp, #31
 800ffe4:	9200      	str	r2, [sp, #0]
 800ffe6:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800ffea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ffee:	4601      	mov	r1, r0
 800fff0:	47a8      	blx	r5
 800fff2:	2800      	cmp	r0, #0
 800fff4:	d0ec      	beq.n	800ffd0 <recv_custom_msg+0x54>
 800fff6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d1e8      	bne.n	800ffd0 <recv_custom_msg+0x54>
 800fffe:	f8cb 0000 	str.w	r0, [fp]
 8010002:	2001      	movs	r0, #1
 8010004:	f8ca 4000 	str.w	r4, [sl]
 8010008:	b009      	add	sp, #36	@ 0x24
 801000a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801000e:	bf00      	nop
 8010010:	20010e7c 	.word	0x20010e7c

08010014 <send_custom_msg>:
 8010014:	b530      	push	{r4, r5, lr}
 8010016:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801001a:	b087      	sub	sp, #28
 801001c:	4615      	mov	r5, r2
 801001e:	b974      	cbnz	r4, 801003e <send_custom_msg+0x2a>
 8010020:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010024:	f10d 0317 	add.w	r3, sp, #23
 8010028:	47a0      	blx	r4
 801002a:	b108      	cbz	r0, 8010030 <send_custom_msg+0x1c>
 801002c:	42a8      	cmp	r0, r5
 801002e:	d015      	beq.n	801005c <send_custom_msg+0x48>
 8010030:	4b0c      	ldr	r3, [pc, #48]	@ (8010064 <send_custom_msg+0x50>)
 8010032:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010036:	701a      	strb	r2, [r3, #0]
 8010038:	2000      	movs	r0, #0
 801003a:	b007      	add	sp, #28
 801003c:	bd30      	pop	{r4, r5, pc}
 801003e:	460b      	mov	r3, r1
 8010040:	2200      	movs	r2, #0
 8010042:	f10d 0117 	add.w	r1, sp, #23
 8010046:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801004a:	4602      	mov	r2, r0
 801004c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8010050:	9500      	str	r5, [sp, #0]
 8010052:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010056:	f001 fb73 	bl	8011740 <uxr_write_framed_msg>
 801005a:	e7e6      	b.n	801002a <send_custom_msg+0x16>
 801005c:	2001      	movs	r0, #1
 801005e:	b007      	add	sp, #28
 8010060:	bd30      	pop	{r4, r5, pc}
 8010062:	bf00      	nop
 8010064:	20010e7c 	.word	0x20010e7c

08010068 <uxr_set_custom_transport_callbacks>:
 8010068:	b410      	push	{r4}
 801006a:	9c01      	ldr	r4, [sp, #4]
 801006c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8010070:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010074:	9b02      	ldr	r3, [sp, #8]
 8010076:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801007a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801007e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8010082:	4770      	bx	lr

08010084 <uxr_init_custom_transport>:
 8010084:	b538      	push	{r3, r4, r5, lr}
 8010086:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801008a:	b303      	cbz	r3, 80100ce <uxr_init_custom_transport+0x4a>
 801008c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010090:	4604      	mov	r4, r0
 8010092:	b1e2      	cbz	r2, 80100ce <uxr_init_custom_transport+0x4a>
 8010094:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010098:	b1ca      	cbz	r2, 80100ce <uxr_init_custom_transport+0x4a>
 801009a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801009e:	b1b2      	cbz	r2, 80100ce <uxr_init_custom_transport+0x4a>
 80100a0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80100a4:	4798      	blx	r3
 80100a6:	4605      	mov	r5, r0
 80100a8:	b188      	cbz	r0, 80100ce <uxr_init_custom_transport+0x4a>
 80100aa:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80100ae:	b98b      	cbnz	r3, 80100d4 <uxr_init_custom_transport+0x50>
 80100b0:	490b      	ldr	r1, [pc, #44]	@ (80100e0 <uxr_init_custom_transport+0x5c>)
 80100b2:	4b0c      	ldr	r3, [pc, #48]	@ (80100e4 <uxr_init_custom_transport+0x60>)
 80100b4:	4a0c      	ldr	r2, [pc, #48]	@ (80100e8 <uxr_init_custom_transport+0x64>)
 80100b6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80100ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80100be:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80100c2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80100c6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80100ca:	4628      	mov	r0, r5
 80100cc:	bd38      	pop	{r3, r4, r5, pc}
 80100ce:	2500      	movs	r5, #0
 80100d0:	4628      	mov	r0, r5
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	2100      	movs	r1, #0
 80100d6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80100da:	f001 fb2b 	bl	8011734 <uxr_init_framing_io>
 80100de:	e7e7      	b.n	80100b0 <uxr_init_custom_transport+0x2c>
 80100e0:	08010015 	.word	0x08010015
 80100e4:	0800ff7d 	.word	0x0800ff7d
 80100e8:	0800ff71 	.word	0x0800ff71

080100ec <uxr_close_custom_transport>:
 80100ec:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80100f0:	4718      	bx	r3
 80100f2:	bf00      	nop

080100f4 <uxr_object_id>:
 80100f4:	b082      	sub	sp, #8
 80100f6:	2300      	movs	r3, #0
 80100f8:	f88d 1006 	strb.w	r1, [sp, #6]
 80100fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010100:	f360 030f 	bfi	r3, r0, #0, #16
 8010104:	f362 431f 	bfi	r3, r2, #16, #16
 8010108:	4618      	mov	r0, r3
 801010a:	b002      	add	sp, #8
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop

08010110 <uxr_object_id_from_raw>:
 8010110:	7843      	ldrb	r3, [r0, #1]
 8010112:	7801      	ldrb	r1, [r0, #0]
 8010114:	b082      	sub	sp, #8
 8010116:	f003 020f 	and.w	r2, r3, #15
 801011a:	f88d 2006 	strb.w	r2, [sp, #6]
 801011e:	091b      	lsrs	r3, r3, #4
 8010120:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010124:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010128:	2000      	movs	r0, #0
 801012a:	f363 000f 	bfi	r0, r3, #0, #16
 801012e:	f362 401f 	bfi	r0, r2, #16, #16
 8010132:	b002      	add	sp, #8
 8010134:	4770      	bx	lr
 8010136:	bf00      	nop

08010138 <uxr_object_id_to_raw>:
 8010138:	4602      	mov	r2, r0
 801013a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801013e:	b082      	sub	sp, #8
 8010140:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010144:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010148:	f881 c000 	strb.w	ip, [r1]
 801014c:	7048      	strb	r0, [r1, #1]
 801014e:	b002      	add	sp, #8
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop

08010154 <uxr_ping_agent_session>:
 8010154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010158:	4617      	mov	r7, r2
 801015a:	b091      	sub	sp, #68	@ 0x44
 801015c:	2210      	movs	r2, #16
 801015e:	4606      	mov	r6, r0
 8010160:	4688      	mov	r8, r1
 8010162:	a808      	add	r0, sp, #32
 8010164:	eb0d 0102 	add.w	r1, sp, r2
 8010168:	f7ff fc90 	bl	800fa8c <ucdr_init_buffer>
 801016c:	4b1e      	ldr	r3, [pc, #120]	@ (80101e8 <uxr_ping_agent_session+0x94>)
 801016e:	2500      	movs	r5, #0
 8010170:	881b      	ldrh	r3, [r3, #0]
 8010172:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010176:	9500      	str	r5, [sp, #0]
 8010178:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 801017c:	2402      	movs	r4, #2
 801017e:	7831      	ldrb	r1, [r6, #0]
 8010180:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010184:	462a      	mov	r2, r5
 8010186:	a808      	add	r0, sp, #32
 8010188:	462b      	mov	r3, r5
 801018a:	9403      	str	r4, [sp, #12]
 801018c:	f002 fa96 	bl	80126bc <uxr_serialize_message_header>
 8010190:	4621      	mov	r1, r4
 8010192:	462b      	mov	r3, r5
 8010194:	2208      	movs	r2, #8
 8010196:	a808      	add	r0, sp, #32
 8010198:	f002 f896 	bl	80122c8 <uxr_buffer_submessage_header>
 801019c:	a902      	add	r1, sp, #8
 801019e:	4604      	mov	r4, r0
 80101a0:	a808      	add	r0, sp, #32
 80101a2:	f003 f96b 	bl	801347c <uxr_serialize_GET_INFO_Payload>
 80101a6:	b104      	cbz	r4, 80101aa <uxr_ping_agent_session+0x56>
 80101a8:	b918      	cbnz	r0, 80101b2 <uxr_ping_agent_session+0x5e>
 80101aa:	2000      	movs	r0, #0
 80101ac:	b011      	add	sp, #68	@ 0x44
 80101ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101b2:	a808      	add	r0, sp, #32
 80101b4:	f7ff fc96 	bl	800fae4 <ucdr_buffer_length>
 80101b8:	4681      	mov	r9, r0
 80101ba:	e00d      	b.n	80101d8 <uxr_ping_agent_session+0x84>
 80101bc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80101be:	e9d3 0400 	ldrd	r0, r4, [r3]
 80101c2:	47a0      	blx	r4
 80101c4:	4641      	mov	r1, r8
 80101c6:	4604      	mov	r4, r0
 80101c8:	4630      	mov	r0, r6
 80101ca:	f000 ff4d 	bl	8011068 <uxr_run_session_until_pong>
 80101ce:	ea04 0c00 	and.w	ip, r4, r0
 80101d2:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 80101d6:	d1e9      	bne.n	80101ac <uxr_ping_agent_session+0x58>
 80101d8:	42af      	cmp	r7, r5
 80101da:	464a      	mov	r2, r9
 80101dc:	a904      	add	r1, sp, #16
 80101de:	f105 0501 	add.w	r5, r5, #1
 80101e2:	d1eb      	bne.n	80101bc <uxr_ping_agent_session+0x68>
 80101e4:	e7e1      	b.n	80101aa <uxr_ping_agent_session+0x56>
 80101e6:	bf00      	nop
 80101e8:	08019444 	.word	0x08019444

080101ec <uxr_ping_agent_attempts>:
 80101ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f0:	ed2d 8b02 	vpush	{d8}
 80101f4:	b0d1      	sub	sp, #324	@ 0x144
 80101f6:	4606      	mov	r6, r0
 80101f8:	4688      	mov	r8, r1
 80101fa:	a80e      	add	r0, sp, #56	@ 0x38
 80101fc:	a90a      	add	r1, sp, #40	@ 0x28
 80101fe:	4615      	mov	r5, r2
 8010200:	2210      	movs	r2, #16
 8010202:	f7ff fc43 	bl	800fa8c <ucdr_init_buffer>
 8010206:	4b54      	ldr	r3, [pc, #336]	@ (8010358 <uxr_ping_agent_attempts+0x16c>)
 8010208:	881b      	ldrh	r3, [r3, #0]
 801020a:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
 801020e:	2300      	movs	r3, #0
 8010210:	2402      	movs	r4, #2
 8010212:	461a      	mov	r2, r3
 8010214:	9300      	str	r3, [sp, #0]
 8010216:	2180      	movs	r1, #128	@ 0x80
 8010218:	a80e      	add	r0, sp, #56	@ 0x38
 801021a:	f44f 6720 	mov.w	r7, #2560	@ 0xa00
 801021e:	941f      	str	r4, [sp, #124]	@ 0x7c
 8010220:	f8ad 7078 	strh.w	r7, [sp, #120]	@ 0x78
 8010224:	f002 fa4a 	bl	80126bc <uxr_serialize_message_header>
 8010228:	4621      	mov	r1, r4
 801022a:	2300      	movs	r3, #0
 801022c:	2208      	movs	r2, #8
 801022e:	a80e      	add	r0, sp, #56	@ 0x38
 8010230:	f002 f84a 	bl	80122c8 <uxr_buffer_submessage_header>
 8010234:	a91e      	add	r1, sp, #120	@ 0x78
 8010236:	4604      	mov	r4, r0
 8010238:	a80e      	add	r0, sp, #56	@ 0x38
 801023a:	f003 f91f 	bl	801347c <uxr_serialize_GET_INFO_Payload>
 801023e:	b104      	cbz	r4, 8010242 <uxr_ping_agent_attempts+0x56>
 8010240:	b938      	cbnz	r0, 8010252 <uxr_ping_agent_attempts+0x66>
 8010242:	f04f 0b00 	mov.w	fp, #0
 8010246:	4658      	mov	r0, fp
 8010248:	b051      	add	sp, #324	@ 0x144
 801024a:	ecbd 8b02 	vpop	{d8}
 801024e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010252:	a80e      	add	r0, sp, #56	@ 0x38
 8010254:	f7ff fc46 	bl	800fae4 <ucdr_buffer_length>
 8010258:	1c6b      	adds	r3, r5, #1
 801025a:	ee08 0a10 	vmov	s16, r0
 801025e:	9303      	str	r3, [sp, #12]
 8010260:	f04f 0901 	mov.w	r9, #1
 8010264:	9b03      	ldr	r3, [sp, #12]
 8010266:	454b      	cmp	r3, r9
 8010268:	d0eb      	beq.n	8010242 <uxr_ping_agent_attempts+0x56>
 801026a:	e9d6 0300 	ldrd	r0, r3, [r6]
 801026e:	ee18 2a10 	vmov	r2, s16
 8010272:	a90a      	add	r1, sp, #40	@ 0x28
 8010274:	4798      	blx	r3
 8010276:	f002 f86d 	bl	8012354 <uxr_millis>
 801027a:	4645      	mov	r5, r8
 801027c:	4604      	mov	r4, r0
 801027e:	f04f 0a00 	mov.w	sl, #0
 8010282:	68b7      	ldr	r7, [r6, #8]
 8010284:	6830      	ldr	r0, [r6, #0]
 8010286:	f8cd a018 	str.w	sl, [sp, #24]
 801028a:	4643      	mov	r3, r8
 801028c:	aa07      	add	r2, sp, #28
 801028e:	a906      	add	r1, sp, #24
 8010290:	47b8      	blx	r7
 8010292:	4607      	mov	r7, r0
 8010294:	b958      	cbnz	r0, 80102ae <uxr_ping_agent_attempts+0xc2>
 8010296:	f002 f85d 	bl	8012354 <uxr_millis>
 801029a:	1b00      	subs	r0, r0, r4
 801029c:	1a2d      	subs	r5, r5, r0
 801029e:	f002 f859 	bl	8012354 <uxr_millis>
 80102a2:	2d00      	cmp	r5, #0
 80102a4:	4604      	mov	r4, r0
 80102a6:	dcec      	bgt.n	8010282 <uxr_ping_agent_attempts+0x96>
 80102a8:	f109 0901 	add.w	r9, r9, #1
 80102ac:	e7da      	b.n	8010264 <uxr_ping_agent_attempts+0x78>
 80102ae:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80102b2:	a816      	add	r0, sp, #88	@ 0x58
 80102b4:	f7ff fbea 	bl	800fa8c <ucdr_init_buffer>
 80102b8:	ab05      	add	r3, sp, #20
 80102ba:	f10d 0211 	add.w	r2, sp, #17
 80102be:	a916      	add	r1, sp, #88	@ 0x58
 80102c0:	a808      	add	r0, sp, #32
 80102c2:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80102c6:	f001 f9bb 	bl	8011640 <uxr_read_session_header>
 80102ca:	22c8      	movs	r2, #200	@ 0xc8
 80102cc:	2100      	movs	r1, #0
 80102ce:	a81e      	add	r0, sp, #120	@ 0x78
 80102d0:	f008 f84c 	bl	801836c <memset>
 80102d4:	a816      	add	r0, sp, #88	@ 0x58
 80102d6:	f7ff fc09 	bl	800faec <ucdr_buffer_remaining>
 80102da:	2804      	cmp	r0, #4
 80102dc:	d814      	bhi.n	8010308 <uxr_ping_agent_attempts+0x11c>
 80102de:	f89d b12d 	ldrb.w	fp, [sp, #301]	@ 0x12d
 80102e2:	f002 f837 	bl	8012354 <uxr_millis>
 80102e6:	1b00      	subs	r0, r0, r4
 80102e8:	1a2d      	subs	r5, r5, r0
 80102ea:	f002 f833 	bl	8012354 <uxr_millis>
 80102ee:	2d00      	cmp	r5, #0
 80102f0:	4604      	mov	r4, r0
 80102f2:	dd2a      	ble.n	801034a <uxr_ping_agent_attempts+0x15e>
 80102f4:	f1bb 0f00 	cmp.w	fp, #0
 80102f8:	d0c3      	beq.n	8010282 <uxr_ping_agent_attempts+0x96>
 80102fa:	46bb      	mov	fp, r7
 80102fc:	4658      	mov	r0, fp
 80102fe:	b051      	add	sp, #324	@ 0x144
 8010300:	ecbd 8b02 	vpop	{d8}
 8010304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010308:	f10d 0316 	add.w	r3, sp, #22
 801030c:	f10d 0213 	add.w	r2, sp, #19
 8010310:	f10d 0112 	add.w	r1, sp, #18
 8010314:	a816      	add	r0, sp, #88	@ 0x58
 8010316:	f88d a012 	strb.w	sl, [sp, #18]
 801031a:	f8ad a016 	strh.w	sl, [sp, #22]
 801031e:	f88d a013 	strb.w	sl, [sp, #19]
 8010322:	f002 fa1d 	bl	8012760 <uxr_deserialize_submessage_header>
 8010326:	a816      	add	r0, sp, #88	@ 0x58
 8010328:	f7ff fbe0 	bl	800faec <ucdr_buffer_remaining>
 801032c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8010330:	4298      	cmp	r0, r3
 8010332:	d3d4      	bcc.n	80102de <uxr_ping_agent_attempts+0xf2>
 8010334:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8010338:	2b06      	cmp	r3, #6
 801033a:	d1d0      	bne.n	80102de <uxr_ping_agent_attempts+0xf2>
 801033c:	a916      	add	r1, sp, #88	@ 0x58
 801033e:	a81e      	add	r0, sp, #120	@ 0x78
 8010340:	f88d a12d 	strb.w	sl, [sp, #301]	@ 0x12d
 8010344:	f000 face 	bl	80108e4 <read_submessage_info>
 8010348:	e7c9      	b.n	80102de <uxr_ping_agent_attempts+0xf2>
 801034a:	f1bb 0f00 	cmp.w	fp, #0
 801034e:	d1d4      	bne.n	80102fa <uxr_ping_agent_attempts+0x10e>
 8010350:	f109 0901 	add.w	r9, r9, #1
 8010354:	e786      	b.n	8010264 <uxr_ping_agent_attempts+0x78>
 8010356:	bf00      	nop
 8010358:	08019444 	.word	0x08019444

0801035c <uxr_buffer_request_data>:
 801035c:	b530      	push	{r4, r5, lr}
 801035e:	b095      	sub	sp, #84	@ 0x54
 8010360:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010364:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8010366:	9303      	str	r3, [sp, #12]
 8010368:	2200      	movs	r2, #0
 801036a:	2d00      	cmp	r5, #0
 801036c:	bf14      	ite	ne
 801036e:	2101      	movne	r1, #1
 8010370:	4611      	moveq	r1, r2
 8010372:	4604      	mov	r4, r0
 8010374:	f88d 301c 	strb.w	r3, [sp, #28]
 8010378:	f88d 201d 	strb.w	r2, [sp, #29]
 801037c:	f88d 201e 	strb.w	r2, [sp, #30]
 8010380:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010384:	d021      	beq.n	80103ca <uxr_buffer_request_data+0x6e>
 8010386:	682a      	ldr	r2, [r5, #0]
 8010388:	686b      	ldr	r3, [r5, #4]
 801038a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801038e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010392:	2210      	movs	r2, #16
 8010394:	2308      	movs	r3, #8
 8010396:	2100      	movs	r1, #0
 8010398:	e9cd 3100 	strd	r3, r1, [sp]
 801039c:	4620      	mov	r0, r4
 801039e:	9905      	ldr	r1, [sp, #20]
 80103a0:	ab0c      	add	r3, sp, #48	@ 0x30
 80103a2:	f001 f861 	bl	8011468 <uxr_prepare_stream_to_write_submessage>
 80103a6:	b918      	cbnz	r0, 80103b0 <uxr_buffer_request_data+0x54>
 80103a8:	4604      	mov	r4, r0
 80103aa:	4620      	mov	r0, r4
 80103ac:	b015      	add	sp, #84	@ 0x54
 80103ae:	bd30      	pop	{r4, r5, pc}
 80103b0:	9904      	ldr	r1, [sp, #16]
 80103b2:	aa06      	add	r2, sp, #24
 80103b4:	4620      	mov	r0, r4
 80103b6:	f001 f98d 	bl	80116d4 <uxr_init_base_object_request>
 80103ba:	a906      	add	r1, sp, #24
 80103bc:	4604      	mov	r4, r0
 80103be:	a80c      	add	r0, sp, #48	@ 0x30
 80103c0:	f003 f92e 	bl	8013620 <uxr_serialize_READ_DATA_Payload>
 80103c4:	4620      	mov	r0, r4
 80103c6:	b015      	add	sp, #84	@ 0x54
 80103c8:	bd30      	pop	{r4, r5, pc}
 80103ca:	2208      	movs	r2, #8
 80103cc:	e7e2      	b.n	8010394 <uxr_buffer_request_data+0x38>
 80103ce:	bf00      	nop

080103d0 <uxr_buffer_cancel_data>:
 80103d0:	b510      	push	{r4, lr}
 80103d2:	b094      	sub	sp, #80	@ 0x50
 80103d4:	2300      	movs	r3, #0
 80103d6:	9202      	str	r2, [sp, #8]
 80103d8:	9205      	str	r2, [sp, #20]
 80103da:	9301      	str	r3, [sp, #4]
 80103dc:	2201      	movs	r2, #1
 80103de:	f8ad 301c 	strh.w	r3, [sp, #28]
 80103e2:	f88d 301e 	strb.w	r3, [sp, #30]
 80103e6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80103ea:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80103ee:	2308      	movs	r3, #8
 80103f0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80103f4:	9300      	str	r3, [sp, #0]
 80103f6:	2210      	movs	r2, #16
 80103f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80103fa:	4604      	mov	r4, r0
 80103fc:	9103      	str	r1, [sp, #12]
 80103fe:	f001 f833 	bl	8011468 <uxr_prepare_stream_to_write_submessage>
 8010402:	b918      	cbnz	r0, 801040c <uxr_buffer_cancel_data+0x3c>
 8010404:	4604      	mov	r4, r0
 8010406:	4620      	mov	r0, r4
 8010408:	b014      	add	sp, #80	@ 0x50
 801040a:	bd10      	pop	{r4, pc}
 801040c:	9905      	ldr	r1, [sp, #20]
 801040e:	aa06      	add	r2, sp, #24
 8010410:	4620      	mov	r0, r4
 8010412:	f001 f95f 	bl	80116d4 <uxr_init_base_object_request>
 8010416:	a906      	add	r1, sp, #24
 8010418:	4604      	mov	r4, r0
 801041a:	a80c      	add	r0, sp, #48	@ 0x30
 801041c:	f003 f900 	bl	8013620 <uxr_serialize_READ_DATA_Payload>
 8010420:	4620      	mov	r0, r4
 8010422:	b014      	add	sp, #80	@ 0x50
 8010424:	bd10      	pop	{r4, pc}
 8010426:	bf00      	nop

08010428 <read_submessage_format>:
 8010428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801042c:	b095      	sub	sp, #84	@ 0x54
 801042e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8010432:	b113      	cbz	r3, 801043a <read_submessage_format+0x12>
 8010434:	b015      	add	sp, #84	@ 0x54
 8010436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801043a:	460c      	mov	r4, r1
 801043c:	4615      	mov	r5, r2
 801043e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010442:	4607      	mov	r7, r0
 8010444:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8010446:	9004      	str	r0, [sp, #16]
 8010448:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801044a:	9005      	str	r0, [sp, #20]
 801044c:	1a52      	subs	r2, r2, r1
 801044e:	a80c      	add	r0, sp, #48	@ 0x30
 8010450:	4699      	mov	r9, r3
 8010452:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8010456:	f7ff fb19 	bl	800fa8c <ucdr_init_buffer>
 801045a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801045e:	a80c      	add	r0, sp, #48	@ 0x30
 8010460:	f7ff fae8 	bl	800fa34 <ucdr_set_on_full_buffer_callback>
 8010464:	69e2      	ldr	r2, [r4, #28]
 8010466:	b19a      	cbz	r2, 8010490 <read_submessage_format+0x68>
 8010468:	f1b8 0f07 	cmp.w	r8, #7
 801046c:	f882 9014 	strb.w	r9, [r2, #20]
 8010470:	d040      	beq.n	80104f4 <read_submessage_format+0xcc>
 8010472:	f1b8 0f08 	cmp.w	r8, #8
 8010476:	d02e      	beq.n	80104d6 <read_submessage_format+0xae>
 8010478:	f1b8 0f06 	cmp.w	r8, #6
 801047c:	d011      	beq.n	80104a2 <read_submessage_format+0x7a>
 801047e:	2301      	movs	r3, #1
 8010480:	7513      	strb	r3, [r2, #20]
 8010482:	4629      	mov	r1, r5
 8010484:	4620      	mov	r0, r4
 8010486:	f7ff fb51 	bl	800fb2c <ucdr_advance_buffer>
 801048a:	b015      	add	sp, #84	@ 0x54
 801048c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010490:	f1b8 0f07 	cmp.w	r8, #7
 8010494:	d02e      	beq.n	80104f4 <read_submessage_format+0xcc>
 8010496:	f1b8 0f08 	cmp.w	r8, #8
 801049a:	d01c      	beq.n	80104d6 <read_submessage_format+0xae>
 801049c:	f1b8 0f06 	cmp.w	r8, #6
 80104a0:	d1ef      	bne.n	8010482 <read_submessage_format+0x5a>
 80104a2:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80104a6:	f1b8 0f00 	cmp.w	r8, #0
 80104aa:	d011      	beq.n	80104d0 <read_submessage_format+0xa8>
 80104ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80104ae:	e9cd 3500 	strd	r3, r5, [sp]
 80104b2:	2306      	movs	r3, #6
 80104b4:	f88d 3016 	strb.w	r3, [sp, #22]
 80104b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80104bc:	9302      	str	r3, [sp, #8]
 80104be:	4632      	mov	r2, r6
 80104c0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80104c4:	4638      	mov	r0, r7
 80104c6:	47c0      	blx	r8
 80104c8:	2301      	movs	r3, #1
 80104ca:	69e2      	ldr	r2, [r4, #28]
 80104cc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80104d0:	2a00      	cmp	r2, #0
 80104d2:	d1d4      	bne.n	801047e <read_submessage_format+0x56>
 80104d4:	e7d5      	b.n	8010482 <read_submessage_format+0x5a>
 80104d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d0f8      	beq.n	80104d0 <read_submessage_format+0xa8>
 80104de:	a906      	add	r1, sp, #24
 80104e0:	a80c      	add	r0, sp, #48	@ 0x30
 80104e2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80104e6:	f003 f961 	bl	80137ac <uxr_deserialize_SampleIdentity>
 80104ea:	b9a0      	cbnz	r0, 8010516 <read_submessage_format+0xee>
 80104ec:	69e2      	ldr	r2, [r4, #28]
 80104ee:	2a00      	cmp	r2, #0
 80104f0:	d1c5      	bne.n	801047e <read_submessage_format+0x56>
 80104f2:	e7c6      	b.n	8010482 <read_submessage_format+0x5a>
 80104f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80104f8:	b13b      	cbz	r3, 801050a <read_submessage_format+0xe2>
 80104fa:	a906      	add	r1, sp, #24
 80104fc:	a80c      	add	r0, sp, #48	@ 0x30
 80104fe:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010502:	f002 fe13 	bl	801312c <uxr_deserialize_BaseObjectRequest>
 8010506:	bb60      	cbnz	r0, 8010562 <read_submessage_format+0x13a>
 8010508:	69e2      	ldr	r2, [r4, #28]
 801050a:	68a3      	ldr	r3, [r4, #8]
 801050c:	442b      	add	r3, r5
 801050e:	60a3      	str	r3, [r4, #8]
 8010510:	2a00      	cmp	r2, #0
 8010512:	d1b4      	bne.n	801047e <read_submessage_format+0x56>
 8010514:	e7b5      	b.n	8010482 <read_submessage_format+0x5a>
 8010516:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801051a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801051c:	1a52      	subs	r2, r2, r1
 801051e:	eba8 0803 	sub.w	r8, r8, r3
 8010522:	a80c      	add	r0, sp, #48	@ 0x30
 8010524:	f7ff fab2 	bl	800fa8c <ucdr_init_buffer>
 8010528:	44a8      	add	r8, r5
 801052a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801052e:	a80c      	add	r0, sp, #48	@ 0x30
 8010530:	f7ff fa80 	bl	800fa34 <ucdr_set_on_full_buffer_callback>
 8010534:	fa1f f888 	uxth.w	r8, r8
 8010538:	ab0c      	add	r3, sp, #48	@ 0x30
 801053a:	9300      	str	r3, [sp, #0]
 801053c:	f8cd 8004 	str.w	r8, [sp, #4]
 8010540:	2108      	movs	r1, #8
 8010542:	f88d 1016 	strb.w	r1, [sp, #22]
 8010546:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801054a:	9102      	str	r1, [sp, #8]
 801054c:	ab06      	add	r3, sp, #24
 801054e:	4632      	mov	r2, r6
 8010550:	9905      	ldr	r1, [sp, #20]
 8010552:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8010556:	4638      	mov	r0, r7
 8010558:	47b0      	blx	r6
 801055a:	2301      	movs	r3, #1
 801055c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010560:	e7c4      	b.n	80104ec <read_submessage_format+0xc4>
 8010562:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010566:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010568:	1a52      	subs	r2, r2, r1
 801056a:	a80c      	add	r0, sp, #48	@ 0x30
 801056c:	eba8 0803 	sub.w	r8, r8, r3
 8010570:	f7ff fa8c 	bl	800fa8c <ucdr_init_buffer>
 8010574:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010578:	a80c      	add	r0, sp, #48	@ 0x30
 801057a:	f7ff fa5b 	bl	800fa34 <ucdr_set_on_full_buffer_callback>
 801057e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010580:	9300      	str	r3, [sp, #0]
 8010582:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010586:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801058a:	44a8      	add	r8, r5
 801058c:	fa1f f888 	uxth.w	r8, r8
 8010590:	f8cd 8004 	str.w	r8, [sp, #4]
 8010594:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010598:	2107      	movs	r1, #7
 801059a:	f88d 1016 	strb.w	r1, [sp, #22]
 801059e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80105a2:	9102      	str	r1, [sp, #8]
 80105a4:	4632      	mov	r2, r6
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80105ac:	9905      	ldr	r1, [sp, #20]
 80105ae:	4638      	mov	r0, r7
 80105b0:	47b0      	blx	r6
 80105b2:	2301      	movs	r3, #1
 80105b4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80105b8:	e7a6      	b.n	8010508 <read_submessage_format+0xe0>
 80105ba:	bf00      	nop

080105bc <on_get_fragmentation_info>:
 80105bc:	b500      	push	{lr}
 80105be:	b08b      	sub	sp, #44	@ 0x2c
 80105c0:	4601      	mov	r1, r0
 80105c2:	2204      	movs	r2, #4
 80105c4:	a802      	add	r0, sp, #8
 80105c6:	f7ff fa61 	bl	800fa8c <ucdr_init_buffer>
 80105ca:	f10d 0305 	add.w	r3, sp, #5
 80105ce:	f10d 0206 	add.w	r2, sp, #6
 80105d2:	a901      	add	r1, sp, #4
 80105d4:	a802      	add	r0, sp, #8
 80105d6:	f001 fe91 	bl	80122fc <uxr_read_submessage_header>
 80105da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80105de:	2b0d      	cmp	r3, #13
 80105e0:	d003      	beq.n	80105ea <on_get_fragmentation_info+0x2e>
 80105e2:	2000      	movs	r0, #0
 80105e4:	b00b      	add	sp, #44	@ 0x2c
 80105e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80105ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80105ee:	f013 0f02 	tst.w	r3, #2
 80105f2:	bf14      	ite	ne
 80105f4:	2002      	movne	r0, #2
 80105f6:	2001      	moveq	r0, #1
 80105f8:	b00b      	add	sp, #44	@ 0x2c
 80105fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80105fe:	bf00      	nop

08010600 <read_submessage_get_info>:
 8010600:	b570      	push	{r4, r5, r6, lr}
 8010602:	2500      	movs	r5, #0
 8010604:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010608:	4604      	mov	r4, r0
 801060a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801060e:	460e      	mov	r6, r1
 8010610:	a810      	add	r0, sp, #64	@ 0x40
 8010612:	4629      	mov	r1, r5
 8010614:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010618:	f007 fea8 	bl	801836c <memset>
 801061c:	a903      	add	r1, sp, #12
 801061e:	4630      	mov	r0, r6
 8010620:	f002 ff40 	bl	80134a4 <uxr_deserialize_GET_INFO_Payload>
 8010624:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010628:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801062c:	4620      	mov	r0, r4
 801062e:	f001 f849 	bl	80116c4 <uxr_session_header_offset>
 8010632:	462b      	mov	r3, r5
 8010634:	9000      	str	r0, [sp, #0]
 8010636:	220c      	movs	r2, #12
 8010638:	a905      	add	r1, sp, #20
 801063a:	a808      	add	r0, sp, #32
 801063c:	f7ff fa14 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 8010640:	a910      	add	r1, sp, #64	@ 0x40
 8010642:	a808      	add	r0, sp, #32
 8010644:	f002 ffa0 	bl	8013588 <uxr_serialize_INFO_Payload>
 8010648:	9b08      	ldr	r3, [sp, #32]
 801064a:	462a      	mov	r2, r5
 801064c:	4629      	mov	r1, r5
 801064e:	4620      	mov	r0, r4
 8010650:	f000 ffe2 	bl	8011618 <uxr_stamp_session_header>
 8010654:	a808      	add	r0, sp, #32
 8010656:	f7ff fa45 	bl	800fae4 <ucdr_buffer_length>
 801065a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801065c:	4602      	mov	r2, r0
 801065e:	a905      	add	r1, sp, #20
 8010660:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010664:	47a0      	blx	r4
 8010666:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801066a:	bd70      	pop	{r4, r5, r6, pc}

0801066c <write_submessage_acknack.isra.0>:
 801066c:	b570      	push	{r4, r5, r6, lr}
 801066e:	b092      	sub	sp, #72	@ 0x48
 8010670:	4605      	mov	r5, r0
 8010672:	460e      	mov	r6, r1
 8010674:	4614      	mov	r4, r2
 8010676:	f001 f825 	bl	80116c4 <uxr_session_header_offset>
 801067a:	a905      	add	r1, sp, #20
 801067c:	9000      	str	r0, [sp, #0]
 801067e:	2300      	movs	r3, #0
 8010680:	a80a      	add	r0, sp, #40	@ 0x28
 8010682:	2211      	movs	r2, #17
 8010684:	f7ff f9f0 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 8010688:	2218      	movs	r2, #24
 801068a:	fb02 5404 	mla	r4, r2, r4, r5
 801068e:	2300      	movs	r3, #0
 8010690:	2205      	movs	r2, #5
 8010692:	3450      	adds	r4, #80	@ 0x50
 8010694:	210a      	movs	r1, #10
 8010696:	a80a      	add	r0, sp, #40	@ 0x28
 8010698:	f001 fe16 	bl	80122c8 <uxr_buffer_submessage_header>
 801069c:	a903      	add	r1, sp, #12
 801069e:	4620      	mov	r0, r4
 80106a0:	f006 fc44 	bl	8016f2c <uxr_compute_acknack>
 80106a4:	ba40      	rev16	r0, r0
 80106a6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80106aa:	a903      	add	r1, sp, #12
 80106ac:	a80a      	add	r0, sp, #40	@ 0x28
 80106ae:	f88d 6010 	strb.w	r6, [sp, #16]
 80106b2:	f002 ffd9 	bl	8013668 <uxr_serialize_ACKNACK_Payload>
 80106b6:	2200      	movs	r2, #0
 80106b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106ba:	4611      	mov	r1, r2
 80106bc:	4628      	mov	r0, r5
 80106be:	f000 ffab 	bl	8011618 <uxr_stamp_session_header>
 80106c2:	a80a      	add	r0, sp, #40	@ 0x28
 80106c4:	f7ff fa0e 	bl	800fae4 <ucdr_buffer_length>
 80106c8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80106ca:	4602      	mov	r2, r0
 80106cc:	a905      	add	r1, sp, #20
 80106ce:	e9d3 0400 	ldrd	r0, r4, [r3]
 80106d2:	47a0      	blx	r4
 80106d4:	b012      	add	sp, #72	@ 0x48
 80106d6:	bd70      	pop	{r4, r5, r6, pc}

080106d8 <uxr_init_session>:
 80106d8:	b510      	push	{r4, lr}
 80106da:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010710 <uxr_init_session+0x38>
 80106de:	2300      	movs	r3, #0
 80106e0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80106e4:	4604      	mov	r4, r0
 80106e6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80106ea:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80106ee:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80106f2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80106f6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80106fa:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80106fe:	2181      	movs	r1, #129	@ 0x81
 8010700:	f000 fef6 	bl	80114f0 <uxr_init_session_info>
 8010704:	f104 0008 	add.w	r0, r4, #8
 8010708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801070c:	f001 bcf8 	b.w	8012100 <uxr_init_stream_storage>
	...

08010718 <uxr_set_status_callback>:
 8010718:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801071c:	4770      	bx	lr
 801071e:	bf00      	nop

08010720 <uxr_set_topic_callback>:
 8010720:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010724:	4770      	bx	lr
 8010726:	bf00      	nop

08010728 <uxr_set_request_callback>:
 8010728:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop

08010730 <uxr_set_reply_callback>:
 8010730:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010734:	4770      	bx	lr
 8010736:	bf00      	nop

08010738 <uxr_create_output_best_effort_stream>:
 8010738:	b510      	push	{r4, lr}
 801073a:	b084      	sub	sp, #16
 801073c:	e9cd 2100 	strd	r2, r1, [sp]
 8010740:	4604      	mov	r4, r0
 8010742:	f000 ffbf 	bl	80116c4 <uxr_session_header_offset>
 8010746:	e9dd 2100 	ldrd	r2, r1, [sp]
 801074a:	4603      	mov	r3, r0
 801074c:	f104 0008 	add.w	r0, r4, #8
 8010750:	b004      	add	sp, #16
 8010752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010756:	f001 bd1d 	b.w	8012194 <uxr_add_output_best_effort_buffer>
 801075a:	bf00      	nop

0801075c <uxr_create_output_reliable_stream>:
 801075c:	b510      	push	{r4, lr}
 801075e:	b088      	sub	sp, #32
 8010760:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010764:	4604      	mov	r4, r0
 8010766:	9303      	str	r3, [sp, #12]
 8010768:	f000 ffac 	bl	80116c4 <uxr_session_header_offset>
 801076c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010770:	9000      	str	r0, [sp, #0]
 8010772:	9905      	ldr	r1, [sp, #20]
 8010774:	f104 0008 	add.w	r0, r4, #8
 8010778:	f001 fd20 	bl	80121bc <uxr_add_output_reliable_buffer>
 801077c:	2200      	movs	r2, #0
 801077e:	b2c3      	uxtb	r3, r0
 8010780:	f363 0207 	bfi	r2, r3, #0, #8
 8010784:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010788:	f363 220f 	bfi	r2, r3, #8, #8
 801078c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010790:	f363 4217 	bfi	r2, r3, #16, #8
 8010794:	0e03      	lsrs	r3, r0, #24
 8010796:	f363 621f 	bfi	r2, r3, #24, #8
 801079a:	4610      	mov	r0, r2
 801079c:	b008      	add	sp, #32
 801079e:	bd10      	pop	{r4, pc}

080107a0 <uxr_create_input_best_effort_stream>:
 80107a0:	b082      	sub	sp, #8
 80107a2:	3008      	adds	r0, #8
 80107a4:	b002      	add	sp, #8
 80107a6:	f001 bd23 	b.w	80121f0 <uxr_add_input_best_effort_buffer>
 80107aa:	bf00      	nop

080107ac <uxr_create_input_reliable_stream>:
 80107ac:	b510      	push	{r4, lr}
 80107ae:	b084      	sub	sp, #16
 80107b0:	4c0b      	ldr	r4, [pc, #44]	@ (80107e0 <uxr_create_input_reliable_stream+0x34>)
 80107b2:	9400      	str	r4, [sp, #0]
 80107b4:	3008      	adds	r0, #8
 80107b6:	f001 fd31 	bl	801221c <uxr_add_input_reliable_buffer>
 80107ba:	2200      	movs	r2, #0
 80107bc:	b2c3      	uxtb	r3, r0
 80107be:	f363 0207 	bfi	r2, r3, #0, #8
 80107c2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80107c6:	f363 220f 	bfi	r2, r3, #8, #8
 80107ca:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80107ce:	f363 4217 	bfi	r2, r3, #16, #8
 80107d2:	0e03      	lsrs	r3, r0, #24
 80107d4:	f363 621f 	bfi	r2, r3, #24, #8
 80107d8:	4610      	mov	r0, r2
 80107da:	b004      	add	sp, #16
 80107dc:	bd10      	pop	{r4, pc}
 80107de:	bf00      	nop
 80107e0:	080105bd 	.word	0x080105bd

080107e4 <uxr_epoch_nanos>:
 80107e4:	b510      	push	{r4, lr}
 80107e6:	4604      	mov	r4, r0
 80107e8:	f001 fdce 	bl	8012388 <uxr_nanos>
 80107ec:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80107f0:	1ac0      	subs	r0, r0, r3
 80107f2:	eb61 0102 	sbc.w	r1, r1, r2
 80107f6:	bd10      	pop	{r4, pc}

080107f8 <uxr_flash_output_streams>:
 80107f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107fc:	7e03      	ldrb	r3, [r0, #24]
 80107fe:	b084      	sub	sp, #16
 8010800:	4604      	mov	r4, r0
 8010802:	2b00      	cmp	r3, #0
 8010804:	d035      	beq.n	8010872 <uxr_flash_output_streams+0x7a>
 8010806:	f04f 0900 	mov.w	r9, #0
 801080a:	4648      	mov	r0, r9
 801080c:	f10d 0802 	add.w	r8, sp, #2
 8010810:	af03      	add	r7, sp, #12
 8010812:	ae02      	add	r6, sp, #8
 8010814:	e006      	b.n	8010824 <uxr_flash_output_streams+0x2c>
 8010816:	7e23      	ldrb	r3, [r4, #24]
 8010818:	f109 0901 	add.w	r9, r9, #1
 801081c:	fa5f f089 	uxtb.w	r0, r9
 8010820:	4283      	cmp	r3, r0
 8010822:	d926      	bls.n	8010872 <uxr_flash_output_streams+0x7a>
 8010824:	2201      	movs	r2, #1
 8010826:	4611      	mov	r1, r2
 8010828:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801082c:	f001 fc14 	bl	8012058 <uxr_stream_id>
 8010830:	3508      	adds	r5, #8
 8010832:	4684      	mov	ip, r0
 8010834:	4643      	mov	r3, r8
 8010836:	463a      	mov	r2, r7
 8010838:	4631      	mov	r1, r6
 801083a:	4628      	mov	r0, r5
 801083c:	f8cd c004 	str.w	ip, [sp, #4]
 8010840:	f006 fbfa 	bl	8017038 <uxr_prepare_best_effort_buffer_to_send>
 8010844:	2800      	cmp	r0, #0
 8010846:	d0e6      	beq.n	8010816 <uxr_flash_output_streams+0x1e>
 8010848:	9b02      	ldr	r3, [sp, #8]
 801084a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801084e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010852:	4620      	mov	r0, r4
 8010854:	f000 fee0 	bl	8011618 <uxr_stamp_session_header>
 8010858:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801085a:	9a03      	ldr	r2, [sp, #12]
 801085c:	685d      	ldr	r5, [r3, #4]
 801085e:	6818      	ldr	r0, [r3, #0]
 8010860:	9902      	ldr	r1, [sp, #8]
 8010862:	47a8      	blx	r5
 8010864:	f109 0901 	add.w	r9, r9, #1
 8010868:	7e23      	ldrb	r3, [r4, #24]
 801086a:	fa5f f089 	uxtb.w	r0, r9
 801086e:	4283      	cmp	r3, r0
 8010870:	d8d8      	bhi.n	8010824 <uxr_flash_output_streams+0x2c>
 8010872:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010876:	b38b      	cbz	r3, 80108dc <uxr_flash_output_streams+0xe4>
 8010878:	f04f 0900 	mov.w	r9, #0
 801087c:	f10d 0802 	add.w	r8, sp, #2
 8010880:	af03      	add	r7, sp, #12
 8010882:	ae02      	add	r6, sp, #8
 8010884:	4648      	mov	r0, r9
 8010886:	2201      	movs	r2, #1
 8010888:	2102      	movs	r1, #2
 801088a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801088e:	f001 fbe3 	bl	8012058 <uxr_stream_id>
 8010892:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010896:	3520      	adds	r5, #32
 8010898:	9001      	str	r0, [sp, #4]
 801089a:	e00d      	b.n	80108b8 <uxr_flash_output_streams+0xc0>
 801089c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80108a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80108a4:	9b02      	ldr	r3, [sp, #8]
 80108a6:	f000 feb7 	bl	8011618 <uxr_stamp_session_header>
 80108aa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80108ac:	9a03      	ldr	r2, [sp, #12]
 80108ae:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80108b2:	9902      	ldr	r1, [sp, #8]
 80108b4:	6818      	ldr	r0, [r3, #0]
 80108b6:	47d0      	blx	sl
 80108b8:	4643      	mov	r3, r8
 80108ba:	463a      	mov	r2, r7
 80108bc:	4631      	mov	r1, r6
 80108be:	4628      	mov	r0, r5
 80108c0:	f006 fdd8 	bl	8017474 <uxr_prepare_next_reliable_buffer_to_send>
 80108c4:	4603      	mov	r3, r0
 80108c6:	4620      	mov	r0, r4
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d1e7      	bne.n	801089c <uxr_flash_output_streams+0xa4>
 80108cc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80108d0:	f109 0901 	add.w	r9, r9, #1
 80108d4:	fa5f f089 	uxtb.w	r0, r9
 80108d8:	4283      	cmp	r3, r0
 80108da:	d8d4      	bhi.n	8010886 <uxr_flash_output_streams+0x8e>
 80108dc:	b004      	add	sp, #16
 80108de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108e2:	bf00      	nop

080108e4 <read_submessage_info>:
 80108e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e8:	460d      	mov	r5, r1
 80108ea:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80108ee:	4669      	mov	r1, sp
 80108f0:	4607      	mov	r7, r0
 80108f2:	4628      	mov	r0, r5
 80108f4:	f002 fcd0 	bl	8013298 <uxr_deserialize_BaseObjectReply>
 80108f8:	a902      	add	r1, sp, #8
 80108fa:	4604      	mov	r4, r0
 80108fc:	4628      	mov	r0, r5
 80108fe:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010902:	f7fe f8ff 	bl	800eb04 <ucdr_deserialize_bool>
 8010906:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801090a:	4004      	ands	r4, r0
 801090c:	b2e4      	uxtb	r4, r4
 801090e:	b95b      	cbnz	r3, 8010928 <read_submessage_info+0x44>
 8010910:	a987      	add	r1, sp, #540	@ 0x21c
 8010912:	4628      	mov	r0, r5
 8010914:	f7fe f8f6 	bl	800eb04 <ucdr_deserialize_bool>
 8010918:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801091c:	4606      	mov	r6, r0
 801091e:	b94b      	cbnz	r3, 8010934 <read_submessage_info+0x50>
 8010920:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010928:	a903      	add	r1, sp, #12
 801092a:	4628      	mov	r0, r5
 801092c:	f002 fb5c 	bl	8012fe8 <uxr_deserialize_ObjectVariant>
 8010930:	4004      	ands	r4, r0
 8010932:	e7ed      	b.n	8010910 <read_submessage_info+0x2c>
 8010934:	a988      	add	r1, sp, #544	@ 0x220
 8010936:	4628      	mov	r0, r5
 8010938:	f7fe f912 	bl	800eb60 <ucdr_deserialize_uint8_t>
 801093c:	4234      	tst	r4, r6
 801093e:	d0ef      	beq.n	8010920 <read_submessage_info+0x3c>
 8010940:	2800      	cmp	r0, #0
 8010942:	d0ed      	beq.n	8010920 <read_submessage_info+0x3c>
 8010944:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010948:	2b0d      	cmp	r3, #13
 801094a:	d1e9      	bne.n	8010920 <read_submessage_info+0x3c>
 801094c:	a98a      	add	r1, sp, #552	@ 0x228
 801094e:	4628      	mov	r0, r5
 8010950:	f7fe feac 	bl	800f6ac <ucdr_deserialize_int16_t>
 8010954:	b140      	cbz	r0, 8010968 <read_submessage_info+0x84>
 8010956:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801095a:	2b00      	cmp	r3, #0
 801095c:	dd07      	ble.n	801096e <read_submessage_info+0x8a>
 801095e:	f1b8 0f00 	cmp.w	r8, #0
 8010962:	bf14      	ite	ne
 8010964:	2001      	movne	r0, #1
 8010966:	2002      	moveq	r0, #2
 8010968:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 801096c:	e7d8      	b.n	8010920 <read_submessage_info+0x3c>
 801096e:	2000      	movs	r0, #0
 8010970:	e7fa      	b.n	8010968 <read_submessage_info+0x84>
 8010972:	bf00      	nop

08010974 <read_submessage_list>:
 8010974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010978:	b097      	sub	sp, #92	@ 0x5c
 801097a:	4ec1      	ldr	r6, [pc, #772]	@ (8010c80 <read_submessage_list+0x30c>)
 801097c:	9209      	str	r2, [sp, #36]	@ 0x24
 801097e:	4604      	mov	r4, r0
 8010980:	460d      	mov	r5, r1
 8010982:	f04f 0801 	mov.w	r8, #1
 8010986:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801098a:	aa0c      	add	r2, sp, #48	@ 0x30
 801098c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010990:	4628      	mov	r0, r5
 8010992:	f001 fcb3 	bl	80122fc <uxr_read_submessage_header>
 8010996:	2800      	cmp	r0, #0
 8010998:	f000 813e 	beq.w	8010c18 <read_submessage_list+0x2a4>
 801099c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80109a0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80109a4:	3b02      	subs	r3, #2
 80109a6:	2b0d      	cmp	r3, #13
 80109a8:	d8ed      	bhi.n	8010986 <read_submessage_list+0x12>
 80109aa:	a101      	add	r1, pc, #4	@ (adr r1, 80109b0 <read_submessage_list+0x3c>)
 80109ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80109b0:	08010c0f 	.word	0x08010c0f
 80109b4:	08010987 	.word	0x08010987
 80109b8:	08010bff 	.word	0x08010bff
 80109bc:	08010b9d 	.word	0x08010b9d
 80109c0:	08010b93 	.word	0x08010b93
 80109c4:	08010987 	.word	0x08010987
 80109c8:	08010987 	.word	0x08010987
 80109cc:	08010af3 	.word	0x08010af3
 80109d0:	08010a83 	.word	0x08010a83
 80109d4:	08010a43 	.word	0x08010a43
 80109d8:	08010987 	.word	0x08010987
 80109dc:	08010987 	.word	0x08010987
 80109e0:	08010987 	.word	0x08010987
 80109e4:	080109e9 	.word	0x080109e9
 80109e8:	a910      	add	r1, sp, #64	@ 0x40
 80109ea:	4628      	mov	r0, r5
 80109ec:	f002 fe8c 	bl	8013708 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80109f0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80109f4:	f1b9 0f00 	cmp.w	r9, #0
 80109f8:	f000 8116 	beq.w	8010c28 <read_submessage_list+0x2b4>
 80109fc:	f001 fcc4 	bl	8012388 <uxr_nanos>
 8010a00:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8010a02:	4602      	mov	r2, r0
 8010a04:	460b      	mov	r3, r1
 8010a06:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8010a08:	2100      	movs	r1, #0
 8010a0a:	468c      	mov	ip, r1
 8010a0c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010a10:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010a14:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010a16:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010a18:	468c      	mov	ip, r1
 8010a1a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010a1e:	46e2      	mov	sl, ip
 8010a20:	46bc      	mov	ip, r7
 8010a22:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8010a26:	fbc0 7106 	smlal	r7, r1, r0, r6
 8010a2a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8010a2e:	e9cd 7100 	strd	r7, r1, [sp]
 8010a32:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010a36:	9106      	str	r1, [sp, #24]
 8010a38:	4620      	mov	r0, r4
 8010a3a:	47c8      	blx	r9
 8010a3c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8010a40:	e7a1      	b.n	8010986 <read_submessage_list+0x12>
 8010a42:	a910      	add	r1, sp, #64	@ 0x40
 8010a44:	4628      	mov	r0, r5
 8010a46:	f002 fe4d 	bl	80136e4 <uxr_deserialize_HEARTBEAT_Payload>
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010a50:	f001 fb2c 	bl	80120ac <uxr_stream_id_from_raw>
 8010a54:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010a58:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010a5a:	4639      	mov	r1, r7
 8010a5c:	f104 0008 	add.w	r0, r4, #8
 8010a60:	f001 fc12 	bl	8012288 <uxr_get_input_reliable_stream>
 8010a64:	2800      	cmp	r0, #0
 8010a66:	d08e      	beq.n	8010986 <read_submessage_list+0x12>
 8010a68:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010a6c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010a70:	f006 fa50 	bl	8016f14 <uxr_process_heartbeat>
 8010a74:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010a78:	463a      	mov	r2, r7
 8010a7a:	4620      	mov	r0, r4
 8010a7c:	f7ff fdf6 	bl	801066c <write_submessage_acknack.isra.0>
 8010a80:	e781      	b.n	8010986 <read_submessage_list+0x12>
 8010a82:	a910      	add	r1, sp, #64	@ 0x40
 8010a84:	4628      	mov	r0, r5
 8010a86:	f002 fe05 	bl	8013694 <uxr_deserialize_ACKNACK_Payload>
 8010a8a:	2100      	movs	r1, #0
 8010a8c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010a90:	f001 fb0c 	bl	80120ac <uxr_stream_id_from_raw>
 8010a94:	900d      	str	r0, [sp, #52]	@ 0x34
 8010a96:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010a9a:	f104 0008 	add.w	r0, r4, #8
 8010a9e:	f001 fbdf 	bl	8012260 <uxr_get_output_reliable_stream>
 8010aa2:	4607      	mov	r7, r0
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	f43f af6e 	beq.w	8010986 <read_submessage_list+0x12>
 8010aaa:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8010aae:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8010ab2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010ab6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010aba:	b289      	uxth	r1, r1
 8010abc:	f006 fd84 	bl	80175c8 <uxr_process_acknack>
 8010ac0:	4638      	mov	r0, r7
 8010ac2:	f006 fd41 	bl	8017548 <uxr_begin_output_nack_buffer_it>
 8010ac6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010aca:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8010ace:	e006      	b.n	8010ade <read_submessage_list+0x16a>
 8010ad0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010ad2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010ad4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010ad8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010ada:	6818      	ldr	r0, [r3, #0]
 8010adc:	47c8      	blx	r9
 8010ade:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8010ae2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010ae4:	4651      	mov	r1, sl
 8010ae6:	4638      	mov	r0, r7
 8010ae8:	f006 fd30 	bl	801754c <uxr_next_reliable_nack_buffer_to_send>
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d1ef      	bne.n	8010ad0 <read_submessage_list+0x15c>
 8010af0:	e749      	b.n	8010986 <read_submessage_list+0x12>
 8010af2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8010af6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8010afa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010afe:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8010b02:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8010b06:	4651      	mov	r1, sl
 8010b08:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010b0c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8010b10:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8010b14:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010b18:	4628      	mov	r0, r5
 8010b1a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010b1e:	f002 fb05 	bl	801312c <uxr_deserialize_BaseObjectRequest>
 8010b22:	4650      	mov	r0, sl
 8010b24:	a90f      	add	r1, sp, #60	@ 0x3c
 8010b26:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010b2a:	f000 fdf1 	bl	8011710 <uxr_parse_base_object_request>
 8010b2e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010b32:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010b34:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010b38:	9110      	str	r1, [sp, #64]	@ 0x40
 8010b3a:	3f04      	subs	r7, #4
 8010b3c:	f009 090e 	and.w	r9, r9, #14
 8010b40:	b2bf      	uxth	r7, r7
 8010b42:	f1bb 0f00 	cmp.w	fp, #0
 8010b46:	d006      	beq.n	8010b56 <read_submessage_list+0x1e2>
 8010b48:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010b4c:	9300      	str	r3, [sp, #0]
 8010b4e:	4652      	mov	r2, sl
 8010b50:	2300      	movs	r3, #0
 8010b52:	4620      	mov	r0, r4
 8010b54:	47d8      	blx	fp
 8010b56:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010b58:	b16a      	cbz	r2, 8010b76 <read_submessage_list+0x202>
 8010b5a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	3802      	subs	r0, #2
 8010b60:	e002      	b.n	8010b68 <read_submessage_list+0x1f4>
 8010b62:	3101      	adds	r1, #1
 8010b64:	4291      	cmp	r1, r2
 8010b66:	d006      	beq.n	8010b76 <read_submessage_list+0x202>
 8010b68:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010b6c:	4553      	cmp	r3, sl
 8010b6e:	d1f8      	bne.n	8010b62 <read_submessage_list+0x1ee>
 8010b70:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010b72:	2200      	movs	r2, #0
 8010b74:	545a      	strb	r2, [r3, r1]
 8010b76:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010b7a:	9102      	str	r1, [sp, #8]
 8010b7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010b7e:	9101      	str	r1, [sp, #4]
 8010b80:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010b82:	9100      	str	r1, [sp, #0]
 8010b84:	464b      	mov	r3, r9
 8010b86:	463a      	mov	r2, r7
 8010b88:	4629      	mov	r1, r5
 8010b8a:	4620      	mov	r0, r4
 8010b8c:	f7ff fc4c 	bl	8010428 <read_submessage_format>
 8010b90:	e6f9      	b.n	8010986 <read_submessage_list+0x12>
 8010b92:	4629      	mov	r1, r5
 8010b94:	4620      	mov	r0, r4
 8010b96:	f7ff fea5 	bl	80108e4 <read_submessage_info>
 8010b9a:	e6f4      	b.n	8010986 <read_submessage_list+0x12>
 8010b9c:	2a00      	cmp	r2, #0
 8010b9e:	d03e      	beq.n	8010c1e <read_submessage_list+0x2aa>
 8010ba0:	a910      	add	r1, sp, #64	@ 0x40
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	f002 fcd2 	bl	801354c <uxr_deserialize_STATUS_Payload>
 8010ba8:	a90e      	add	r1, sp, #56	@ 0x38
 8010baa:	aa0d      	add	r2, sp, #52	@ 0x34
 8010bac:	a810      	add	r0, sp, #64	@ 0x40
 8010bae:	f000 fdaf 	bl	8011710 <uxr_parse_base_object_request>
 8010bb2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010bb6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010bb8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8010bbc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8010bc0:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010bc2:	f1ba 0f00 	cmp.w	sl, #0
 8010bc6:	d006      	beq.n	8010bd6 <read_submessage_list+0x262>
 8010bc8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010bcc:	9300      	str	r3, [sp, #0]
 8010bce:	463a      	mov	r2, r7
 8010bd0:	464b      	mov	r3, r9
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	47d0      	blx	sl
 8010bd6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010bd8:	2a00      	cmp	r2, #0
 8010bda:	f43f aed4 	beq.w	8010986 <read_submessage_list+0x12>
 8010bde:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010be0:	2100      	movs	r1, #0
 8010be2:	3802      	subs	r0, #2
 8010be4:	e003      	b.n	8010bee <read_submessage_list+0x27a>
 8010be6:	3101      	adds	r1, #1
 8010be8:	4291      	cmp	r1, r2
 8010bea:	f43f aecc 	beq.w	8010986 <read_submessage_list+0x12>
 8010bee:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010bf2:	42bb      	cmp	r3, r7
 8010bf4:	d1f7      	bne.n	8010be6 <read_submessage_list+0x272>
 8010bf6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010bf8:	f803 9001 	strb.w	r9, [r3, r1]
 8010bfc:	e6c3      	b.n	8010986 <read_submessage_list+0x12>
 8010bfe:	2a00      	cmp	r2, #0
 8010c00:	f47f aec1 	bne.w	8010986 <read_submessage_list+0x12>
 8010c04:	4629      	mov	r1, r5
 8010c06:	4620      	mov	r0, r4
 8010c08:	f000 fcc8 	bl	801159c <uxr_read_create_session_status>
 8010c0c:	e6bb      	b.n	8010986 <read_submessage_list+0x12>
 8010c0e:	4629      	mov	r1, r5
 8010c10:	4620      	mov	r0, r4
 8010c12:	f7ff fcf5 	bl	8010600 <read_submessage_get_info>
 8010c16:	e6b6      	b.n	8010986 <read_submessage_list+0x12>
 8010c18:	b017      	add	sp, #92	@ 0x5c
 8010c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c1e:	4629      	mov	r1, r5
 8010c20:	4620      	mov	r0, r4
 8010c22:	f000 fcc7 	bl	80115b4 <uxr_read_delete_session_status>
 8010c26:	e6ae      	b.n	8010986 <read_submessage_list+0x12>
 8010c28:	f001 fbae 	bl	8012388 <uxr_nanos>
 8010c2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010c2e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010c30:	464f      	mov	r7, r9
 8010c32:	fbc3 2706 	smlal	r2, r7, r3, r6
 8010c36:	1812      	adds	r2, r2, r0
 8010c38:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010c3a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010c3c:	eb47 0101 	adc.w	r1, r7, r1
 8010c40:	464f      	mov	r7, r9
 8010c42:	fbc3 0706 	smlal	r0, r7, r3, r6
 8010c46:	463b      	mov	r3, r7
 8010c48:	4684      	mov	ip, r0
 8010c4a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8010c4e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8010c52:	eb1c 0c00 	adds.w	ip, ip, r0
 8010c56:	464f      	mov	r7, r9
 8010c58:	eb43 0307 	adc.w	r3, r3, r7
 8010c5c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8010c60:	eb61 0303 	sbc.w	r3, r1, r3
 8010c64:	0fda      	lsrs	r2, r3, #31
 8010c66:	eb12 020c 	adds.w	r2, r2, ip
 8010c6a:	f143 0300 	adc.w	r3, r3, #0
 8010c6e:	0852      	lsrs	r2, r2, #1
 8010c70:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010c74:	105b      	asrs	r3, r3, #1
 8010c76:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8010c7a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8010c7e:	e6dd      	b.n	8010a3c <read_submessage_list+0xc8>
 8010c80:	3b9aca00 	.word	0x3b9aca00

08010c84 <listen_message_reliably>:
 8010c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c88:	1e0b      	subs	r3, r1, #0
 8010c8a:	b09d      	sub	sp, #116	@ 0x74
 8010c8c:	bfb8      	it	lt
 8010c8e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8010c92:	4680      	mov	r8, r0
 8010c94:	9305      	str	r3, [sp, #20]
 8010c96:	f001 fb5d 	bl	8012354 <uxr_millis>
 8010c9a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8010c9e:	4681      	mov	r9, r0
 8010ca0:	2a00      	cmp	r2, #0
 8010ca2:	f000 80a1 	beq.w	8010de8 <listen_message_reliably+0x164>
 8010ca6:	2600      	movs	r6, #0
 8010ca8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010cac:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010cb0:	9303      	str	r3, [sp, #12]
 8010cb2:	4630      	mov	r0, r6
 8010cb4:	460f      	mov	r7, r1
 8010cb6:	e00f      	b.n	8010cd8 <listen_message_reliably+0x54>
 8010cb8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010cbc:	9903      	ldr	r1, [sp, #12]
 8010cbe:	455a      	cmp	r2, fp
 8010cc0:	f106 0601 	add.w	r6, r6, #1
 8010cc4:	eb73 0101 	sbcs.w	r1, r3, r1
 8010cc8:	b2f0      	uxtb	r0, r6
 8010cca:	da01      	bge.n	8010cd0 <listen_message_reliably+0x4c>
 8010ccc:	4693      	mov	fp, r2
 8010cce:	9303      	str	r3, [sp, #12]
 8010cd0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010cd4:	4283      	cmp	r3, r0
 8010cd6:	d960      	bls.n	8010d9a <listen_message_reliably+0x116>
 8010cd8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010cdc:	2102      	movs	r1, #2
 8010cde:	2201      	movs	r2, #1
 8010ce0:	f001 f9ba 	bl	8012058 <uxr_stream_id>
 8010ce4:	00e4      	lsls	r4, r4, #3
 8010ce6:	f104 0520 	add.w	r5, r4, #32
 8010cea:	4445      	add	r5, r8
 8010cec:	4601      	mov	r1, r0
 8010cee:	463b      	mov	r3, r7
 8010cf0:	464a      	mov	r2, r9
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	9109      	str	r1, [sp, #36]	@ 0x24
 8010cf6:	f006 fbfd 	bl	80174f4 <uxr_update_output_stream_heartbeat_timestamp>
 8010cfa:	eb08 0304 	add.w	r3, r8, r4
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d0da      	beq.n	8010cb8 <listen_message_reliably+0x34>
 8010d02:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010d06:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8010d0a:	9304      	str	r3, [sp, #16]
 8010d0c:	4640      	mov	r0, r8
 8010d0e:	f000 fcd9 	bl	80116c4 <uxr_session_header_offset>
 8010d12:	3501      	adds	r5, #1
 8010d14:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8010d18:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010d1c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010d20:	2300      	movs	r3, #0
 8010d22:	2211      	movs	r2, #17
 8010d24:	9000      	str	r0, [sp, #0]
 8010d26:	a90c      	add	r1, sp, #48	@ 0x30
 8010d28:	4650      	mov	r0, sl
 8010d2a:	f7fe fe9d 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 8010d2e:	2300      	movs	r3, #0
 8010d30:	2205      	movs	r2, #5
 8010d32:	210b      	movs	r1, #11
 8010d34:	4650      	mov	r0, sl
 8010d36:	f001 fac7 	bl	80122c8 <uxr_buffer_submessage_header>
 8010d3a:	8968      	ldrh	r0, [r5, #10]
 8010d3c:	2101      	movs	r1, #1
 8010d3e:	f006 fc9b 	bl	8017678 <uxr_seq_num_add>
 8010d42:	892b      	ldrh	r3, [r5, #8]
 8010d44:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010d48:	4602      	mov	r2, r0
 8010d4a:	9b04      	ldr	r3, [sp, #16]
 8010d4c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010d50:	a90a      	add	r1, sp, #40	@ 0x28
 8010d52:	4650      	mov	r0, sl
 8010d54:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010d58:	f002 fcb0 	bl	80136bc <uxr_serialize_HEARTBEAT_Payload>
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	4611      	mov	r1, r2
 8010d60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010d62:	4640      	mov	r0, r8
 8010d64:	f000 fc58 	bl	8011618 <uxr_stamp_session_header>
 8010d68:	4650      	mov	r0, sl
 8010d6a:	f7fe febb 	bl	800fae4 <ucdr_buffer_length>
 8010d6e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010d72:	4602      	mov	r2, r0
 8010d74:	a90c      	add	r1, sp, #48	@ 0x30
 8010d76:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010d7a:	4444      	add	r4, r8
 8010d7c:	47a8      	blx	r5
 8010d7e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010d82:	9903      	ldr	r1, [sp, #12]
 8010d84:	455a      	cmp	r2, fp
 8010d86:	f106 0601 	add.w	r6, r6, #1
 8010d8a:	eb73 0101 	sbcs.w	r1, r3, r1
 8010d8e:	b2f0      	uxtb	r0, r6
 8010d90:	db9c      	blt.n	8010ccc <listen_message_reliably+0x48>
 8010d92:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010d96:	4283      	cmp	r3, r0
 8010d98:	d89e      	bhi.n	8010cd8 <listen_message_reliably+0x54>
 8010d9a:	9a03      	ldr	r2, [sp, #12]
 8010d9c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010da0:	429a      	cmp	r2, r3
 8010da2:	bf08      	it	eq
 8010da4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8010da8:	d01e      	beq.n	8010de8 <listen_message_reliably+0x164>
 8010daa:	ebab 0309 	sub.w	r3, fp, r9
 8010dae:	9905      	ldr	r1, [sp, #20]
 8010db0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	bf08      	it	eq
 8010db8:	2301      	moveq	r3, #1
 8010dba:	4299      	cmp	r1, r3
 8010dbc:	bfa8      	it	ge
 8010dbe:	4619      	movge	r1, r3
 8010dc0:	6894      	ldr	r4, [r2, #8]
 8010dc2:	6810      	ldr	r0, [r2, #0]
 8010dc4:	4689      	mov	r9, r1
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	aa08      	add	r2, sp, #32
 8010dca:	a907      	add	r1, sp, #28
 8010dcc:	47a0      	blx	r4
 8010dce:	b968      	cbnz	r0, 8010dec <listen_message_reliably+0x168>
 8010dd0:	9b05      	ldr	r3, [sp, #20]
 8010dd2:	eba3 0309 	sub.w	r3, r3, r9
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	9305      	str	r3, [sp, #20]
 8010dda:	f73f af5c 	bgt.w	8010c96 <listen_message_reliably+0x12>
 8010dde:	4604      	mov	r4, r0
 8010de0:	4620      	mov	r0, r4
 8010de2:	b01d      	add	sp, #116	@ 0x74
 8010de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010de8:	9b05      	ldr	r3, [sp, #20]
 8010dea:	e7e0      	b.n	8010dae <listen_message_reliably+0x12a>
 8010dec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010df0:	4604      	mov	r4, r0
 8010df2:	a80c      	add	r0, sp, #48	@ 0x30
 8010df4:	f7fe fe4a 	bl	800fa8c <ucdr_init_buffer>
 8010df8:	2500      	movs	r5, #0
 8010dfa:	f10d 031a 	add.w	r3, sp, #26
 8010dfe:	aa06      	add	r2, sp, #24
 8010e00:	a90c      	add	r1, sp, #48	@ 0x30
 8010e02:	4640      	mov	r0, r8
 8010e04:	f88d 5018 	strb.w	r5, [sp, #24]
 8010e08:	f000 fc1a 	bl	8011640 <uxr_read_session_header>
 8010e0c:	b918      	cbnz	r0, 8010e16 <listen_message_reliably+0x192>
 8010e0e:	4620      	mov	r0, r4
 8010e10:	b01d      	add	sp, #116	@ 0x74
 8010e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e16:	4629      	mov	r1, r5
 8010e18:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010e1c:	f001 f946 	bl	80120ac <uxr_stream_id_from_raw>
 8010e20:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8010e24:	2d01      	cmp	r5, #1
 8010e26:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010e2a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010e2e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010e32:	d04b      	beq.n	8010ecc <listen_message_reliably+0x248>
 8010e34:	2d02      	cmp	r5, #2
 8010e36:	d00f      	beq.n	8010e58 <listen_message_reliably+0x1d4>
 8010e38:	2d00      	cmp	r5, #0
 8010e3a:	d1e8      	bne.n	8010e0e <listen_message_reliably+0x18a>
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	4628      	mov	r0, r5
 8010e40:	f001 f934 	bl	80120ac <uxr_stream_id_from_raw>
 8010e44:	a90c      	add	r1, sp, #48	@ 0x30
 8010e46:	4602      	mov	r2, r0
 8010e48:	4640      	mov	r0, r8
 8010e4a:	920a      	str	r2, [sp, #40]	@ 0x28
 8010e4c:	f7ff fd92 	bl	8010974 <read_submessage_list>
 8010e50:	4620      	mov	r0, r4
 8010e52:	b01d      	add	sp, #116	@ 0x74
 8010e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e58:	4631      	mov	r1, r6
 8010e5a:	f108 0008 	add.w	r0, r8, #8
 8010e5e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010e62:	f001 fa11 	bl	8012288 <uxr_get_input_reliable_stream>
 8010e66:	4607      	mov	r7, r0
 8010e68:	b338      	cbz	r0, 8010eba <listen_message_reliably+0x236>
 8010e6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e6c:	9203      	str	r2, [sp, #12]
 8010e6e:	a80c      	add	r0, sp, #48	@ 0x30
 8010e70:	f7fe fe3c 	bl	800faec <ucdr_buffer_remaining>
 8010e74:	4603      	mov	r3, r0
 8010e76:	f10d 0019 	add.w	r0, sp, #25
 8010e7a:	9000      	str	r0, [sp, #0]
 8010e7c:	9a03      	ldr	r2, [sp, #12]
 8010e7e:	4651      	mov	r1, sl
 8010e80:	4638      	mov	r0, r7
 8010e82:	f005 ff4d 	bl	8016d20 <uxr_receive_reliable_message>
 8010e86:	b1c0      	cbz	r0, 8010eba <listen_message_reliably+0x236>
 8010e88:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010e8c:	b393      	cbz	r3, 8010ef4 <listen_message_reliably+0x270>
 8010e8e:	ad14      	add	r5, sp, #80	@ 0x50
 8010e90:	f04f 0a02 	mov.w	sl, #2
 8010e94:	e00a      	b.n	8010eac <listen_message_reliably+0x228>
 8010e96:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8010e9a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8010e9e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010ea4:	4629      	mov	r1, r5
 8010ea6:	4640      	mov	r0, r8
 8010ea8:	f7ff fd64 	bl	8010974 <read_submessage_list>
 8010eac:	2204      	movs	r2, #4
 8010eae:	4629      	mov	r1, r5
 8010eb0:	4638      	mov	r0, r7
 8010eb2:	f005 ffb5 	bl	8016e20 <uxr_next_input_reliable_buffer_available>
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	d1ed      	bne.n	8010e96 <listen_message_reliably+0x212>
 8010eba:	4640      	mov	r0, r8
 8010ebc:	4632      	mov	r2, r6
 8010ebe:	4649      	mov	r1, r9
 8010ec0:	f7ff fbd4 	bl	801066c <write_submessage_acknack.isra.0>
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	b01d      	add	sp, #116	@ 0x74
 8010ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ecc:	4631      	mov	r1, r6
 8010ece:	f108 0008 	add.w	r0, r8, #8
 8010ed2:	f001 f9cf 	bl	8012274 <uxr_get_input_best_effort_stream>
 8010ed6:	2800      	cmp	r0, #0
 8010ed8:	d099      	beq.n	8010e0e <listen_message_reliably+0x18a>
 8010eda:	4651      	mov	r1, sl
 8010edc:	f005 fe8c 	bl	8016bf8 <uxr_receive_best_effort_message>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d094      	beq.n	8010e0e <listen_message_reliably+0x18a>
 8010ee4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010ee8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010eea:	a90c      	add	r1, sp, #48	@ 0x30
 8010eec:	4640      	mov	r0, r8
 8010eee:	f7ff fd41 	bl	8010974 <read_submessage_list>
 8010ef2:	e78c      	b.n	8010e0e <listen_message_reliably+0x18a>
 8010ef4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010ef8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010efa:	a90c      	add	r1, sp, #48	@ 0x30
 8010efc:	4640      	mov	r0, r8
 8010efe:	f7ff fd39 	bl	8010974 <read_submessage_list>
 8010f02:	e7c4      	b.n	8010e8e <listen_message_reliably+0x20a>

08010f04 <uxr_run_session_timeout>:
 8010f04:	b570      	push	{r4, r5, r6, lr}
 8010f06:	4604      	mov	r4, r0
 8010f08:	460d      	mov	r5, r1
 8010f0a:	f001 fa23 	bl	8012354 <uxr_millis>
 8010f0e:	4606      	mov	r6, r0
 8010f10:	4620      	mov	r0, r4
 8010f12:	f7ff fc71 	bl	80107f8 <uxr_flash_output_streams>
 8010f16:	4629      	mov	r1, r5
 8010f18:	4620      	mov	r0, r4
 8010f1a:	f7ff feb3 	bl	8010c84 <listen_message_reliably>
 8010f1e:	f001 fa19 	bl	8012354 <uxr_millis>
 8010f22:	1b83      	subs	r3, r0, r6
 8010f24:	1ae9      	subs	r1, r5, r3
 8010f26:	2900      	cmp	r1, #0
 8010f28:	dcf6      	bgt.n	8010f18 <uxr_run_session_timeout+0x14>
 8010f2a:	f104 0008 	add.w	r0, r4, #8
 8010f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f32:	f001 b9b3 	b.w	801229c <uxr_output_streams_confirmed>
 8010f36:	bf00      	nop

08010f38 <uxr_run_session_until_data>:
 8010f38:	b570      	push	{r4, r5, r6, lr}
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	460d      	mov	r5, r1
 8010f3e:	f001 fa09 	bl	8012354 <uxr_millis>
 8010f42:	4606      	mov	r6, r0
 8010f44:	4620      	mov	r0, r4
 8010f46:	f7ff fc57 	bl	80107f8 <uxr_flash_output_streams>
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010f50:	4629      	mov	r1, r5
 8010f52:	e005      	b.n	8010f60 <uxr_run_session_until_data+0x28>
 8010f54:	f001 f9fe 	bl	8012354 <uxr_millis>
 8010f58:	1b83      	subs	r3, r0, r6
 8010f5a:	1ae9      	subs	r1, r5, r3
 8010f5c:	2900      	cmp	r1, #0
 8010f5e:	dd07      	ble.n	8010f70 <uxr_run_session_until_data+0x38>
 8010f60:	4620      	mov	r0, r4
 8010f62:	f7ff fe8f 	bl	8010c84 <listen_message_reliably>
 8010f66:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	d0f2      	beq.n	8010f54 <uxr_run_session_until_data+0x1c>
 8010f6e:	bd70      	pop	{r4, r5, r6, pc}
 8010f70:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010f74:	bd70      	pop	{r4, r5, r6, pc}
 8010f76:	bf00      	nop

08010f78 <uxr_run_session_until_confirm_delivery>:
 8010f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f7c:	4606      	mov	r6, r0
 8010f7e:	460d      	mov	r5, r1
 8010f80:	f001 f9e8 	bl	8012354 <uxr_millis>
 8010f84:	4607      	mov	r7, r0
 8010f86:	4630      	mov	r0, r6
 8010f88:	f7ff fc36 	bl	80107f8 <uxr_flash_output_streams>
 8010f8c:	2d00      	cmp	r5, #0
 8010f8e:	f106 0808 	add.w	r8, r6, #8
 8010f92:	bfa8      	it	ge
 8010f94:	462c      	movge	r4, r5
 8010f96:	da07      	bge.n	8010fa8 <uxr_run_session_until_confirm_delivery+0x30>
 8010f98:	e00e      	b.n	8010fb8 <uxr_run_session_until_confirm_delivery+0x40>
 8010f9a:	f7ff fe73 	bl	8010c84 <listen_message_reliably>
 8010f9e:	f001 f9d9 	bl	8012354 <uxr_millis>
 8010fa2:	1bc3      	subs	r3, r0, r7
 8010fa4:	1aec      	subs	r4, r5, r3
 8010fa6:	d407      	bmi.n	8010fb8 <uxr_run_session_until_confirm_delivery+0x40>
 8010fa8:	4640      	mov	r0, r8
 8010faa:	f001 f977 	bl	801229c <uxr_output_streams_confirmed>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	4621      	mov	r1, r4
 8010fb2:	4630      	mov	r0, r6
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d0f0      	beq.n	8010f9a <uxr_run_session_until_confirm_delivery+0x22>
 8010fb8:	4640      	mov	r0, r8
 8010fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fbe:	f001 b96d 	b.w	801229c <uxr_output_streams_confirmed>
 8010fc2:	bf00      	nop

08010fc4 <uxr_run_session_until_all_status>:
 8010fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fc8:	9c08      	ldr	r4, [sp, #32]
 8010fca:	4606      	mov	r6, r0
 8010fcc:	460f      	mov	r7, r1
 8010fce:	4691      	mov	r9, r2
 8010fd0:	461d      	mov	r5, r3
 8010fd2:	f7ff fc11 	bl	80107f8 <uxr_flash_output_streams>
 8010fd6:	b124      	cbz	r4, 8010fe2 <uxr_run_session_until_all_status+0x1e>
 8010fd8:	4622      	mov	r2, r4
 8010fda:	21ff      	movs	r1, #255	@ 0xff
 8010fdc:	4628      	mov	r0, r5
 8010fde:	f007 f9c5 	bl	801836c <memset>
 8010fe2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8010fe6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010fe8:	f001 f9b4 	bl	8012354 <uxr_millis>
 8010fec:	3d01      	subs	r5, #1
 8010fee:	f1a9 0902 	sub.w	r9, r9, #2
 8010ff2:	4680      	mov	r8, r0
 8010ff4:	4639      	mov	r1, r7
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	f7ff fe44 	bl	8010c84 <listen_message_reliably>
 8010ffc:	f001 f9aa 	bl	8012354 <uxr_millis>
 8011000:	eba0 0008 	sub.w	r0, r0, r8
 8011004:	1a39      	subs	r1, r7, r0
 8011006:	b344      	cbz	r4, 801105a <uxr_run_session_until_all_status+0x96>
 8011008:	4628      	mov	r0, r5
 801100a:	46ac      	mov	ip, r5
 801100c:	2301      	movs	r3, #1
 801100e:	e002      	b.n	8011016 <uxr_run_session_until_all_status+0x52>
 8011010:	42a3      	cmp	r3, r4
 8011012:	d20d      	bcs.n	8011030 <uxr_run_session_until_all_status+0x6c>
 8011014:	3301      	adds	r3, #1
 8011016:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801101a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801101e:	d1f7      	bne.n	8011010 <uxr_run_session_until_all_status+0x4c>
 8011020:	42a3      	cmp	r3, r4
 8011022:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8011026:	d213      	bcs.n	8011050 <uxr_run_session_until_all_status+0x8c>
 8011028:	2a00      	cmp	r2, #0
 801102a:	d0f3      	beq.n	8011014 <uxr_run_session_until_all_status+0x50>
 801102c:	2900      	cmp	r1, #0
 801102e:	dce2      	bgt.n	8010ff6 <uxr_run_session_until_all_status+0x32>
 8011030:	2300      	movs	r3, #0
 8011032:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011034:	442c      	add	r4, r5
 8011036:	e001      	b.n	801103c <uxr_run_session_until_all_status+0x78>
 8011038:	2b01      	cmp	r3, #1
 801103a:	d812      	bhi.n	8011062 <uxr_run_session_until_all_status+0x9e>
 801103c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011040:	4284      	cmp	r4, r0
 8011042:	d1f9      	bne.n	8011038 <uxr_run_session_until_all_status+0x74>
 8011044:	2b01      	cmp	r3, #1
 8011046:	bf8c      	ite	hi
 8011048:	2000      	movhi	r0, #0
 801104a:	2001      	movls	r0, #1
 801104c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011050:	2900      	cmp	r1, #0
 8011052:	dded      	ble.n	8011030 <uxr_run_session_until_all_status+0x6c>
 8011054:	2a00      	cmp	r2, #0
 8011056:	d1ce      	bne.n	8010ff6 <uxr_run_session_until_all_status+0x32>
 8011058:	e7ea      	b.n	8011030 <uxr_run_session_until_all_status+0x6c>
 801105a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801105c:	2001      	movs	r0, #1
 801105e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011062:	2000      	movs	r0, #0
 8011064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011068 <uxr_run_session_until_pong>:
 8011068:	b570      	push	{r4, r5, r6, lr}
 801106a:	4604      	mov	r4, r0
 801106c:	460d      	mov	r5, r1
 801106e:	f001 f971 	bl	8012354 <uxr_millis>
 8011072:	4606      	mov	r6, r0
 8011074:	4620      	mov	r0, r4
 8011076:	f7ff fbbf 	bl	80107f8 <uxr_flash_output_streams>
 801107a:	2300      	movs	r3, #0
 801107c:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 8011080:	4629      	mov	r1, r5
 8011082:	e005      	b.n	8011090 <uxr_run_session_until_pong+0x28>
 8011084:	f001 f966 	bl	8012354 <uxr_millis>
 8011088:	1b83      	subs	r3, r0, r6
 801108a:	1ae9      	subs	r1, r5, r3
 801108c:	2900      	cmp	r1, #0
 801108e:	dd0c      	ble.n	80110aa <uxr_run_session_until_pong+0x42>
 8011090:	4620      	mov	r0, r4
 8011092:	f7ff fdf7 	bl	8010c84 <listen_message_reliably>
 8011096:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 801109a:	2800      	cmp	r0, #0
 801109c:	d0f2      	beq.n	8011084 <uxr_run_session_until_pong+0x1c>
 801109e:	f1a0 0001 	sub.w	r0, r0, #1
 80110a2:	fab0 f080 	clz	r0, r0
 80110a6:	0940      	lsrs	r0, r0, #5
 80110a8:	bd70      	pop	{r4, r5, r6, pc}
 80110aa:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80110ae:	f1a0 0001 	sub.w	r0, r0, #1
 80110b2:	fab0 f080 	clz	r0, r0
 80110b6:	0940      	lsrs	r0, r0, #5
 80110b8:	bd70      	pop	{r4, r5, r6, pc}
 80110ba:	bf00      	nop

080110bc <wait_session_status>:
 80110bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c0:	4604      	mov	r4, r0
 80110c2:	b09d      	sub	sp, #116	@ 0x74
 80110c4:	20ff      	movs	r0, #255	@ 0xff
 80110c6:	7160      	strb	r0, [r4, #5]
 80110c8:	9303      	str	r3, [sp, #12]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	f000 80b6 	beq.w	801123c <wait_session_status+0x180>
 80110d0:	468a      	mov	sl, r1
 80110d2:	4691      	mov	r9, r2
 80110d4:	f04f 0b00 	mov.w	fp, #0
 80110d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80110da:	464a      	mov	r2, r9
 80110dc:	e9d3 0500 	ldrd	r0, r5, [r3]
 80110e0:	4651      	mov	r1, sl
 80110e2:	47a8      	blx	r5
 80110e4:	f001 f936 	bl	8012354 <uxr_millis>
 80110e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80110ec:	4605      	mov	r5, r0
 80110ee:	e009      	b.n	8011104 <wait_session_status+0x48>
 80110f0:	f001 f930 	bl	8012354 <uxr_millis>
 80110f4:	1b40      	subs	r0, r0, r5
 80110f6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	dd40      	ble.n	8011180 <wait_session_status+0xc4>
 80110fe:	7960      	ldrb	r0, [r4, #5]
 8011100:	28ff      	cmp	r0, #255	@ 0xff
 8011102:	d145      	bne.n	8011190 <wait_session_status+0xd4>
 8011104:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011106:	a908      	add	r1, sp, #32
 8011108:	6896      	ldr	r6, [r2, #8]
 801110a:	6810      	ldr	r0, [r2, #0]
 801110c:	aa09      	add	r2, sp, #36	@ 0x24
 801110e:	47b0      	blx	r6
 8011110:	2800      	cmp	r0, #0
 8011112:	d0ed      	beq.n	80110f0 <wait_session_status+0x34>
 8011114:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011118:	a80c      	add	r0, sp, #48	@ 0x30
 801111a:	f7fe fcb7 	bl	800fa8c <ucdr_init_buffer>
 801111e:	2600      	movs	r6, #0
 8011120:	f10d 031e 	add.w	r3, sp, #30
 8011124:	aa07      	add	r2, sp, #28
 8011126:	a90c      	add	r1, sp, #48	@ 0x30
 8011128:	4620      	mov	r0, r4
 801112a:	f88d 601c 	strb.w	r6, [sp, #28]
 801112e:	f000 fa87 	bl	8011640 <uxr_read_session_header>
 8011132:	2800      	cmp	r0, #0
 8011134:	d0dc      	beq.n	80110f0 <wait_session_status+0x34>
 8011136:	4631      	mov	r1, r6
 8011138:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801113c:	f000 ffb6 	bl	80120ac <uxr_stream_id_from_raw>
 8011140:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011144:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011148:	9302      	str	r3, [sp, #8]
 801114a:	2f01      	cmp	r7, #1
 801114c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011150:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011154:	d05c      	beq.n	8011210 <wait_session_status+0x154>
 8011156:	2f02      	cmp	r7, #2
 8011158:	d020      	beq.n	801119c <wait_session_status+0xe0>
 801115a:	2f00      	cmp	r7, #0
 801115c:	d1c8      	bne.n	80110f0 <wait_session_status+0x34>
 801115e:	4639      	mov	r1, r7
 8011160:	4638      	mov	r0, r7
 8011162:	f000 ffa3 	bl	80120ac <uxr_stream_id_from_raw>
 8011166:	a90c      	add	r1, sp, #48	@ 0x30
 8011168:	4602      	mov	r2, r0
 801116a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801116c:	4620      	mov	r0, r4
 801116e:	f7ff fc01 	bl	8010974 <read_submessage_list>
 8011172:	f001 f8ef 	bl	8012354 <uxr_millis>
 8011176:	1b40      	subs	r0, r0, r5
 8011178:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801117c:	2b00      	cmp	r3, #0
 801117e:	dcbe      	bgt.n	80110fe <wait_session_status+0x42>
 8011180:	9b03      	ldr	r3, [sp, #12]
 8011182:	7960      	ldrb	r0, [r4, #5]
 8011184:	f10b 0b01 	add.w	fp, fp, #1
 8011188:	455b      	cmp	r3, fp
 801118a:	d001      	beq.n	8011190 <wait_session_status+0xd4>
 801118c:	28ff      	cmp	r0, #255	@ 0xff
 801118e:	d0a3      	beq.n	80110d8 <wait_session_status+0x1c>
 8011190:	38ff      	subs	r0, #255	@ 0xff
 8011192:	bf18      	it	ne
 8011194:	2001      	movne	r0, #1
 8011196:	b01d      	add	sp, #116	@ 0x74
 8011198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801119c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80111a0:	9304      	str	r3, [sp, #16]
 80111a2:	4631      	mov	r1, r6
 80111a4:	f104 0008 	add.w	r0, r4, #8
 80111a8:	f001 f86e 	bl	8012288 <uxr_get_input_reliable_stream>
 80111ac:	4680      	mov	r8, r0
 80111ae:	b348      	cbz	r0, 8011204 <wait_session_status+0x148>
 80111b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111b2:	9205      	str	r2, [sp, #20]
 80111b4:	a80c      	add	r0, sp, #48	@ 0x30
 80111b6:	f7fe fc99 	bl	800faec <ucdr_buffer_remaining>
 80111ba:	4603      	mov	r3, r0
 80111bc:	f10d 001d 	add.w	r0, sp, #29
 80111c0:	9000      	str	r0, [sp, #0]
 80111c2:	9a05      	ldr	r2, [sp, #20]
 80111c4:	9902      	ldr	r1, [sp, #8]
 80111c6:	4640      	mov	r0, r8
 80111c8:	f005 fdaa 	bl	8016d20 <uxr_receive_reliable_message>
 80111cc:	b1d0      	cbz	r0, 8011204 <wait_session_status+0x148>
 80111ce:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d03a      	beq.n	801124c <wait_session_status+0x190>
 80111d6:	9f04      	ldr	r7, [sp, #16]
 80111d8:	e00a      	b.n	80111f0 <wait_session_status+0x134>
 80111da:	f04f 0302 	mov.w	r3, #2
 80111de:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80111e2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80111e6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80111ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80111ec:	f7ff fbc2 	bl	8010974 <read_submessage_list>
 80111f0:	a914      	add	r1, sp, #80	@ 0x50
 80111f2:	2204      	movs	r2, #4
 80111f4:	4640      	mov	r0, r8
 80111f6:	f005 fe13 	bl	8016e20 <uxr_next_input_reliable_buffer_available>
 80111fa:	4603      	mov	r3, r0
 80111fc:	a914      	add	r1, sp, #80	@ 0x50
 80111fe:	4620      	mov	r0, r4
 8011200:	2b00      	cmp	r3, #0
 8011202:	d1ea      	bne.n	80111da <wait_session_status+0x11e>
 8011204:	9904      	ldr	r1, [sp, #16]
 8011206:	4632      	mov	r2, r6
 8011208:	4620      	mov	r0, r4
 801120a:	f7ff fa2f 	bl	801066c <write_submessage_acknack.isra.0>
 801120e:	e76f      	b.n	80110f0 <wait_session_status+0x34>
 8011210:	4631      	mov	r1, r6
 8011212:	f104 0008 	add.w	r0, r4, #8
 8011216:	f001 f82d 	bl	8012274 <uxr_get_input_best_effort_stream>
 801121a:	2800      	cmp	r0, #0
 801121c:	f43f af68 	beq.w	80110f0 <wait_session_status+0x34>
 8011220:	9902      	ldr	r1, [sp, #8]
 8011222:	f005 fce9 	bl	8016bf8 <uxr_receive_best_effort_message>
 8011226:	2800      	cmp	r0, #0
 8011228:	f43f af62 	beq.w	80110f0 <wait_session_status+0x34>
 801122c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011230:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011232:	a90c      	add	r1, sp, #48	@ 0x30
 8011234:	4620      	mov	r0, r4
 8011236:	f7ff fb9d 	bl	8010974 <read_submessage_list>
 801123a:	e759      	b.n	80110f0 <wait_session_status+0x34>
 801123c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801123e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011242:	47a0      	blx	r4
 8011244:	2001      	movs	r0, #1
 8011246:	b01d      	add	sp, #116	@ 0x74
 8011248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011250:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011252:	a90c      	add	r1, sp, #48	@ 0x30
 8011254:	4620      	mov	r0, r4
 8011256:	f7ff fb8d 	bl	8010974 <read_submessage_list>
 801125a:	e7bc      	b.n	80111d6 <wait_session_status+0x11a>

0801125c <uxr_delete_session_retries>:
 801125c:	b530      	push	{r4, r5, lr}
 801125e:	b08f      	sub	sp, #60	@ 0x3c
 8011260:	4604      	mov	r4, r0
 8011262:	460d      	mov	r5, r1
 8011264:	f000 fa2e 	bl	80116c4 <uxr_session_header_offset>
 8011268:	2300      	movs	r3, #0
 801126a:	2210      	movs	r2, #16
 801126c:	9000      	str	r0, [sp, #0]
 801126e:	a902      	add	r1, sp, #8
 8011270:	a806      	add	r0, sp, #24
 8011272:	f7fe fbf9 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 8011276:	a906      	add	r1, sp, #24
 8011278:	4620      	mov	r0, r4
 801127a:	f000 f973 	bl	8011564 <uxr_buffer_delete_session>
 801127e:	2200      	movs	r2, #0
 8011280:	4611      	mov	r1, r2
 8011282:	9b06      	ldr	r3, [sp, #24]
 8011284:	4620      	mov	r0, r4
 8011286:	f000 f9c7 	bl	8011618 <uxr_stamp_session_header>
 801128a:	a806      	add	r0, sp, #24
 801128c:	f7fe fc2a 	bl	800fae4 <ucdr_buffer_length>
 8011290:	462b      	mov	r3, r5
 8011292:	4602      	mov	r2, r0
 8011294:	a902      	add	r1, sp, #8
 8011296:	4620      	mov	r0, r4
 8011298:	f7ff ff10 	bl	80110bc <wait_session_status>
 801129c:	b118      	cbz	r0, 80112a6 <uxr_delete_session_retries+0x4a>
 801129e:	7960      	ldrb	r0, [r4, #5]
 80112a0:	fab0 f080 	clz	r0, r0
 80112a4:	0940      	lsrs	r0, r0, #5
 80112a6:	b00f      	add	sp, #60	@ 0x3c
 80112a8:	bd30      	pop	{r4, r5, pc}
 80112aa:	bf00      	nop

080112ac <uxr_create_session>:
 80112ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b0:	f100 0b08 	add.w	fp, r0, #8
 80112b4:	b0ab      	sub	sp, #172	@ 0xac
 80112b6:	4604      	mov	r4, r0
 80112b8:	4658      	mov	r0, fp
 80112ba:	f000 ff2b 	bl	8012114 <uxr_reset_stream_storage>
 80112be:	4620      	mov	r0, r4
 80112c0:	f000 fa00 	bl	80116c4 <uxr_session_header_offset>
 80112c4:	2300      	movs	r3, #0
 80112c6:	9000      	str	r0, [sp, #0]
 80112c8:	221c      	movs	r2, #28
 80112ca:	a90b      	add	r1, sp, #44	@ 0x2c
 80112cc:	a812      	add	r0, sp, #72	@ 0x48
 80112ce:	f7fe fbcb 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 80112d2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80112d4:	8a1a      	ldrh	r2, [r3, #16]
 80112d6:	3a04      	subs	r2, #4
 80112d8:	b292      	uxth	r2, r2
 80112da:	a912      	add	r1, sp, #72	@ 0x48
 80112dc:	4620      	mov	r0, r4
 80112de:	f000 f917 	bl	8011510 <uxr_buffer_create_session>
 80112e2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80112e4:	4620      	mov	r0, r4
 80112e6:	f000 f983 	bl	80115f0 <uxr_stamp_create_session_header>
 80112ea:	a812      	add	r0, sp, #72	@ 0x48
 80112ec:	f7fe fbfa 	bl	800fae4 <ucdr_buffer_length>
 80112f0:	23ff      	movs	r3, #255	@ 0xff
 80112f2:	7163      	strb	r3, [r4, #5]
 80112f4:	230a      	movs	r3, #10
 80112f6:	46da      	mov	sl, fp
 80112f8:	9303      	str	r3, [sp, #12]
 80112fa:	4683      	mov	fp, r0
 80112fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80112fe:	465a      	mov	r2, fp
 8011300:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011304:	a90b      	add	r1, sp, #44	@ 0x2c
 8011306:	47a8      	blx	r5
 8011308:	f001 f824 	bl	8012354 <uxr_millis>
 801130c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011310:	4605      	mov	r5, r0
 8011312:	e009      	b.n	8011328 <uxr_create_session+0x7c>
 8011314:	f001 f81e 	bl	8012354 <uxr_millis>
 8011318:	1b40      	subs	r0, r0, r5
 801131a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801131e:	2b00      	cmp	r3, #0
 8011320:	7962      	ldrb	r2, [r4, #5]
 8011322:	dd38      	ble.n	8011396 <uxr_create_session+0xea>
 8011324:	2aff      	cmp	r2, #255	@ 0xff
 8011326:	d13c      	bne.n	80113a2 <uxr_create_session+0xf6>
 8011328:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801132a:	a907      	add	r1, sp, #28
 801132c:	6896      	ldr	r6, [r2, #8]
 801132e:	6810      	ldr	r0, [r2, #0]
 8011330:	aa08      	add	r2, sp, #32
 8011332:	47b0      	blx	r6
 8011334:	2800      	cmp	r0, #0
 8011336:	d0ed      	beq.n	8011314 <uxr_create_session+0x68>
 8011338:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801133c:	a81a      	add	r0, sp, #104	@ 0x68
 801133e:	f7fe fba5 	bl	800fa8c <ucdr_init_buffer>
 8011342:	2600      	movs	r6, #0
 8011344:	f10d 031a 	add.w	r3, sp, #26
 8011348:	aa06      	add	r2, sp, #24
 801134a:	a91a      	add	r1, sp, #104	@ 0x68
 801134c:	4620      	mov	r0, r4
 801134e:	f88d 6018 	strb.w	r6, [sp, #24]
 8011352:	f000 f975 	bl	8011640 <uxr_read_session_header>
 8011356:	2800      	cmp	r0, #0
 8011358:	d0dc      	beq.n	8011314 <uxr_create_session+0x68>
 801135a:	4631      	mov	r1, r6
 801135c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011360:	f000 fea4 	bl	80120ac <uxr_stream_id_from_raw>
 8011364:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011368:	2e01      	cmp	r6, #1
 801136a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801136e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011372:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011376:	d053      	beq.n	8011420 <uxr_create_session+0x174>
 8011378:	2e02      	cmp	r6, #2
 801137a:	d018      	beq.n	80113ae <uxr_create_session+0x102>
 801137c:	2e00      	cmp	r6, #0
 801137e:	d1c9      	bne.n	8011314 <uxr_create_session+0x68>
 8011380:	4631      	mov	r1, r6
 8011382:	4630      	mov	r0, r6
 8011384:	f000 fe92 	bl	80120ac <uxr_stream_id_from_raw>
 8011388:	a91a      	add	r1, sp, #104	@ 0x68
 801138a:	4602      	mov	r2, r0
 801138c:	900a      	str	r0, [sp, #40]	@ 0x28
 801138e:	4620      	mov	r0, r4
 8011390:	f7ff faf0 	bl	8010974 <read_submessage_list>
 8011394:	e7be      	b.n	8011314 <uxr_create_session+0x68>
 8011396:	9b03      	ldr	r3, [sp, #12]
 8011398:	3b01      	subs	r3, #1
 801139a:	9303      	str	r3, [sp, #12]
 801139c:	d001      	beq.n	80113a2 <uxr_create_session+0xf6>
 801139e:	2aff      	cmp	r2, #255	@ 0xff
 80113a0:	d0ac      	beq.n	80112fc <uxr_create_session+0x50>
 80113a2:	2a00      	cmp	r2, #0
 80113a4:	d051      	beq.n	801144a <uxr_create_session+0x19e>
 80113a6:	2000      	movs	r0, #0
 80113a8:	b02b      	add	sp, #172	@ 0xac
 80113aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ae:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80113b2:	9304      	str	r3, [sp, #16]
 80113b4:	4639      	mov	r1, r7
 80113b6:	4650      	mov	r0, sl
 80113b8:	f000 ff66 	bl	8012288 <uxr_get_input_reliable_stream>
 80113bc:	4680      	mov	r8, r0
 80113be:	b348      	cbz	r0, 8011414 <uxr_create_session+0x168>
 80113c0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80113c2:	9205      	str	r2, [sp, #20]
 80113c4:	a81a      	add	r0, sp, #104	@ 0x68
 80113c6:	f7fe fb91 	bl	800faec <ucdr_buffer_remaining>
 80113ca:	4603      	mov	r3, r0
 80113cc:	f10d 0019 	add.w	r0, sp, #25
 80113d0:	9000      	str	r0, [sp, #0]
 80113d2:	9a05      	ldr	r2, [sp, #20]
 80113d4:	4649      	mov	r1, r9
 80113d6:	4640      	mov	r0, r8
 80113d8:	f005 fca2 	bl	8016d20 <uxr_receive_reliable_message>
 80113dc:	b1d0      	cbz	r0, 8011414 <uxr_create_session+0x168>
 80113de:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d038      	beq.n	8011458 <uxr_create_session+0x1ac>
 80113e6:	9e04      	ldr	r6, [sp, #16]
 80113e8:	e00a      	b.n	8011400 <uxr_create_session+0x154>
 80113ea:	f04f 0302 	mov.w	r3, #2
 80113ee:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80113f2:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 80113f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80113fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80113fc:	f7ff faba 	bl	8010974 <read_submessage_list>
 8011400:	a922      	add	r1, sp, #136	@ 0x88
 8011402:	2204      	movs	r2, #4
 8011404:	4640      	mov	r0, r8
 8011406:	f005 fd0b 	bl	8016e20 <uxr_next_input_reliable_buffer_available>
 801140a:	4603      	mov	r3, r0
 801140c:	a922      	add	r1, sp, #136	@ 0x88
 801140e:	4620      	mov	r0, r4
 8011410:	2b00      	cmp	r3, #0
 8011412:	d1ea      	bne.n	80113ea <uxr_create_session+0x13e>
 8011414:	9904      	ldr	r1, [sp, #16]
 8011416:	463a      	mov	r2, r7
 8011418:	4620      	mov	r0, r4
 801141a:	f7ff f927 	bl	801066c <write_submessage_acknack.isra.0>
 801141e:	e779      	b.n	8011314 <uxr_create_session+0x68>
 8011420:	4639      	mov	r1, r7
 8011422:	4650      	mov	r0, sl
 8011424:	f000 ff26 	bl	8012274 <uxr_get_input_best_effort_stream>
 8011428:	2800      	cmp	r0, #0
 801142a:	f43f af73 	beq.w	8011314 <uxr_create_session+0x68>
 801142e:	4649      	mov	r1, r9
 8011430:	f005 fbe2 	bl	8016bf8 <uxr_receive_best_effort_message>
 8011434:	2800      	cmp	r0, #0
 8011436:	f43f af6d 	beq.w	8011314 <uxr_create_session+0x68>
 801143a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801143e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011440:	a91a      	add	r1, sp, #104	@ 0x68
 8011442:	4620      	mov	r0, r4
 8011444:	f7ff fa96 	bl	8010974 <read_submessage_list>
 8011448:	e764      	b.n	8011314 <uxr_create_session+0x68>
 801144a:	4650      	mov	r0, sl
 801144c:	f000 fe62 	bl	8012114 <uxr_reset_stream_storage>
 8011450:	2001      	movs	r0, #1
 8011452:	b02b      	add	sp, #172	@ 0xac
 8011454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011458:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801145c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801145e:	a91a      	add	r1, sp, #104	@ 0x68
 8011460:	4620      	mov	r0, r4
 8011462:	f7ff fa87 	bl	8010974 <read_submessage_list>
 8011466:	e7be      	b.n	80113e6 <uxr_create_session+0x13a>

08011468 <uxr_prepare_stream_to_write_submessage>:
 8011468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801146c:	b082      	sub	sp, #8
 801146e:	4682      	mov	sl, r0
 8011470:	4610      	mov	r0, r2
 8011472:	4615      	mov	r5, r2
 8011474:	461e      	mov	r6, r3
 8011476:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801147a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801147e:	9101      	str	r1, [sp, #4]
 8011480:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011484:	f000 ff60 	bl	8012348 <uxr_submessage_padding>
 8011488:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801148c:	f105 0904 	add.w	r9, r5, #4
 8011490:	2b01      	cmp	r3, #1
 8011492:	4481      	add	r9, r0
 8011494:	d01d      	beq.n	80114d2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8011496:	2b02      	cmp	r3, #2
 8011498:	d116      	bne.n	80114c8 <uxr_prepare_stream_to_write_submessage+0x60>
 801149a:	4621      	mov	r1, r4
 801149c:	f10a 0008 	add.w	r0, sl, #8
 80114a0:	f000 fede 	bl	8012260 <uxr_get_output_reliable_stream>
 80114a4:	4604      	mov	r4, r0
 80114a6:	b158      	cbz	r0, 80114c0 <uxr_prepare_stream_to_write_submessage+0x58>
 80114a8:	4649      	mov	r1, r9
 80114aa:	4632      	mov	r2, r6
 80114ac:	f005 fe74 	bl	8017198 <uxr_prepare_reliable_buffer_to_write>
 80114b0:	4604      	mov	r4, r0
 80114b2:	b12c      	cbz	r4, 80114c0 <uxr_prepare_stream_to_write_submessage+0x58>
 80114b4:	4643      	mov	r3, r8
 80114b6:	b2aa      	uxth	r2, r5
 80114b8:	4639      	mov	r1, r7
 80114ba:	4630      	mov	r0, r6
 80114bc:	f000 ff04 	bl	80122c8 <uxr_buffer_submessage_header>
 80114c0:	4620      	mov	r0, r4
 80114c2:	b002      	add	sp, #8
 80114c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114c8:	2400      	movs	r4, #0
 80114ca:	4620      	mov	r0, r4
 80114cc:	b002      	add	sp, #8
 80114ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114d2:	4621      	mov	r1, r4
 80114d4:	f10a 0008 	add.w	r0, sl, #8
 80114d8:	f000 feba 	bl	8012250 <uxr_get_output_best_effort_stream>
 80114dc:	4604      	mov	r4, r0
 80114de:	2800      	cmp	r0, #0
 80114e0:	d0ee      	beq.n	80114c0 <uxr_prepare_stream_to_write_submessage+0x58>
 80114e2:	4649      	mov	r1, r9
 80114e4:	4632      	mov	r2, r6
 80114e6:	f005 fd87 	bl	8016ff8 <uxr_prepare_best_effort_buffer_to_write>
 80114ea:	4604      	mov	r4, r0
 80114ec:	e7e1      	b.n	80114b2 <uxr_prepare_stream_to_write_submessage+0x4a>
 80114ee:	bf00      	nop

080114f0 <uxr_init_session_info>:
 80114f0:	0e13      	lsrs	r3, r2, #24
 80114f2:	7043      	strb	r3, [r0, #1]
 80114f4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80114f8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80114fc:	7001      	strb	r1, [r0, #0]
 80114fe:	70c3      	strb	r3, [r0, #3]
 8011500:	2109      	movs	r1, #9
 8011502:	23ff      	movs	r3, #255	@ 0xff
 8011504:	f880 c002 	strb.w	ip, [r0, #2]
 8011508:	7102      	strb	r2, [r0, #4]
 801150a:	80c1      	strh	r1, [r0, #6]
 801150c:	7143      	strb	r3, [r0, #5]
 801150e:	4770      	bx	lr

08011510 <uxr_buffer_create_session>:
 8011510:	b530      	push	{r4, r5, lr}
 8011512:	b089      	sub	sp, #36	@ 0x24
 8011514:	2300      	movs	r3, #0
 8011516:	4d12      	ldr	r5, [pc, #72]	@ (8011560 <uxr_buffer_create_session+0x50>)
 8011518:	9307      	str	r3, [sp, #28]
 801151a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801151e:	2201      	movs	r2, #1
 8011520:	9301      	str	r3, [sp, #4]
 8011522:	80c2      	strh	r2, [r0, #6]
 8011524:	f88d 2004 	strb.w	r2, [sp, #4]
 8011528:	682a      	ldr	r2, [r5, #0]
 801152a:	9200      	str	r2, [sp, #0]
 801152c:	88aa      	ldrh	r2, [r5, #4]
 801152e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011532:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011536:	9202      	str	r2, [sp, #8]
 8011538:	460c      	mov	r4, r1
 801153a:	7802      	ldrb	r2, [r0, #0]
 801153c:	9303      	str	r3, [sp, #12]
 801153e:	4619      	mov	r1, r3
 8011540:	f88d 200c 	strb.w	r2, [sp, #12]
 8011544:	4620      	mov	r0, r4
 8011546:	2210      	movs	r2, #16
 8011548:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801154c:	9306      	str	r3, [sp, #24]
 801154e:	f000 febb 	bl	80122c8 <uxr_buffer_submessage_header>
 8011552:	4669      	mov	r1, sp
 8011554:	4620      	mov	r0, r4
 8011556:	f001 feff 	bl	8013358 <uxr_serialize_CREATE_CLIENT_Payload>
 801155a:	b009      	add	sp, #36	@ 0x24
 801155c:	bd30      	pop	{r4, r5, pc}
 801155e:	bf00      	nop
 8011560:	08019448 	.word	0x08019448

08011564 <uxr_buffer_delete_session>:
 8011564:	b510      	push	{r4, lr}
 8011566:	4b0c      	ldr	r3, [pc, #48]	@ (8011598 <uxr_buffer_delete_session+0x34>)
 8011568:	b082      	sub	sp, #8
 801156a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801156e:	f8ad c006 	strh.w	ip, [sp, #6]
 8011572:	460c      	mov	r4, r1
 8011574:	2202      	movs	r2, #2
 8011576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801157a:	80c2      	strh	r2, [r0, #6]
 801157c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011580:	2204      	movs	r2, #4
 8011582:	2300      	movs	r3, #0
 8011584:	2103      	movs	r1, #3
 8011586:	4620      	mov	r0, r4
 8011588:	f000 fe9e 	bl	80122c8 <uxr_buffer_submessage_header>
 801158c:	a901      	add	r1, sp, #4
 801158e:	4620      	mov	r0, r4
 8011590:	f001 ff9c 	bl	80134cc <uxr_serialize_DELETE_Payload>
 8011594:	b002      	add	sp, #8
 8011596:	bd10      	pop	{r4, pc}
 8011598:	08019448 	.word	0x08019448

0801159c <uxr_read_create_session_status>:
 801159c:	b510      	push	{r4, lr}
 801159e:	b088      	sub	sp, #32
 80115a0:	4604      	mov	r4, r0
 80115a2:	4608      	mov	r0, r1
 80115a4:	a901      	add	r1, sp, #4
 80115a6:	f001 ffa1 	bl	80134ec <uxr_deserialize_STATUS_AGENT_Payload>
 80115aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80115ae:	7163      	strb	r3, [r4, #5]
 80115b0:	b008      	add	sp, #32
 80115b2:	bd10      	pop	{r4, pc}

080115b4 <uxr_read_delete_session_status>:
 80115b4:	b510      	push	{r4, lr}
 80115b6:	4604      	mov	r4, r0
 80115b8:	b084      	sub	sp, #16
 80115ba:	4608      	mov	r0, r1
 80115bc:	a902      	add	r1, sp, #8
 80115be:	f001 ffc5 	bl	801354c <uxr_deserialize_STATUS_Payload>
 80115c2:	88e3      	ldrh	r3, [r4, #6]
 80115c4:	2b02      	cmp	r3, #2
 80115c6:	d001      	beq.n	80115cc <uxr_read_delete_session_status+0x18>
 80115c8:	b004      	add	sp, #16
 80115ca:	bd10      	pop	{r4, pc}
 80115cc:	f10d 000a 	add.w	r0, sp, #10
 80115d0:	f7fe fd9e 	bl	8010110 <uxr_object_id_from_raw>
 80115d4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80115d8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80115dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	2b02      	cmp	r3, #2
 80115e4:	bf04      	itt	eq
 80115e6:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80115ea:	7163      	strbeq	r3, [r4, #5]
 80115ec:	b004      	add	sp, #16
 80115ee:	bd10      	pop	{r4, pc}

080115f0 <uxr_stamp_create_session_header>:
 80115f0:	b510      	push	{r4, lr}
 80115f2:	2208      	movs	r2, #8
 80115f4:	b08a      	sub	sp, #40	@ 0x28
 80115f6:	4604      	mov	r4, r0
 80115f8:	eb0d 0002 	add.w	r0, sp, r2
 80115fc:	f7fe fa46 	bl	800fa8c <ucdr_init_buffer>
 8011600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011604:	9400      	str	r4, [sp, #0]
 8011606:	2300      	movs	r3, #0
 8011608:	461a      	mov	r2, r3
 801160a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801160e:	a802      	add	r0, sp, #8
 8011610:	f001 f854 	bl	80126bc <uxr_serialize_message_header>
 8011614:	b00a      	add	sp, #40	@ 0x28
 8011616:	bd10      	pop	{r4, pc}

08011618 <uxr_stamp_session_header>:
 8011618:	b530      	push	{r4, r5, lr}
 801161a:	b08d      	sub	sp, #52	@ 0x34
 801161c:	4604      	mov	r4, r0
 801161e:	460d      	mov	r5, r1
 8011620:	9203      	str	r2, [sp, #12]
 8011622:	4619      	mov	r1, r3
 8011624:	a804      	add	r0, sp, #16
 8011626:	2208      	movs	r2, #8
 8011628:	f7fe fa30 	bl	800fa8c <ucdr_init_buffer>
 801162c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011630:	9b03      	ldr	r3, [sp, #12]
 8011632:	9400      	str	r4, [sp, #0]
 8011634:	462a      	mov	r2, r5
 8011636:	a804      	add	r0, sp, #16
 8011638:	f001 f840 	bl	80126bc <uxr_serialize_message_header>
 801163c:	b00d      	add	sp, #52	@ 0x34
 801163e:	bd30      	pop	{r4, r5, pc}

08011640 <uxr_read_session_header>:
 8011640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011644:	4607      	mov	r7, r0
 8011646:	b084      	sub	sp, #16
 8011648:	4608      	mov	r0, r1
 801164a:	460c      	mov	r4, r1
 801164c:	4615      	mov	r5, r2
 801164e:	461e      	mov	r6, r3
 8011650:	f7fe fa4c 	bl	800faec <ucdr_buffer_remaining>
 8011654:	2808      	cmp	r0, #8
 8011656:	d803      	bhi.n	8011660 <uxr_read_session_header+0x20>
 8011658:	2000      	movs	r0, #0
 801165a:	b004      	add	sp, #16
 801165c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011660:	f10d 080c 	add.w	r8, sp, #12
 8011664:	4633      	mov	r3, r6
 8011666:	462a      	mov	r2, r5
 8011668:	f8cd 8000 	str.w	r8, [sp]
 801166c:	4620      	mov	r0, r4
 801166e:	f10d 010b 	add.w	r1, sp, #11
 8011672:	f001 f841 	bl	80126f8 <uxr_deserialize_message_header>
 8011676:	783a      	ldrb	r2, [r7, #0]
 8011678:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801167c:	4293      	cmp	r3, r2
 801167e:	d1eb      	bne.n	8011658 <uxr_read_session_header+0x18>
 8011680:	061b      	lsls	r3, r3, #24
 8011682:	d41c      	bmi.n	80116be <uxr_read_session_header+0x7e>
 8011684:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011688:	787b      	ldrb	r3, [r7, #1]
 801168a:	429a      	cmp	r2, r3
 801168c:	d003      	beq.n	8011696 <uxr_read_session_header+0x56>
 801168e:	2001      	movs	r0, #1
 8011690:	f080 0001 	eor.w	r0, r0, #1
 8011694:	e7e1      	b.n	801165a <uxr_read_session_header+0x1a>
 8011696:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801169a:	78bb      	ldrb	r3, [r7, #2]
 801169c:	429a      	cmp	r2, r3
 801169e:	f107 0102 	add.w	r1, r7, #2
 80116a2:	d1f4      	bne.n	801168e <uxr_read_session_header+0x4e>
 80116a4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80116a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d1ee      	bne.n	801168e <uxr_read_session_header+0x4e>
 80116b0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80116b4:	784b      	ldrb	r3, [r1, #1]
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d1e9      	bne.n	801168e <uxr_read_session_header+0x4e>
 80116ba:	2000      	movs	r0, #0
 80116bc:	e7e8      	b.n	8011690 <uxr_read_session_header+0x50>
 80116be:	2001      	movs	r0, #1
 80116c0:	e7cb      	b.n	801165a <uxr_read_session_header+0x1a>
 80116c2:	bf00      	nop

080116c4 <uxr_session_header_offset>:
 80116c4:	f990 3000 	ldrsb.w	r3, [r0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	bfac      	ite	ge
 80116cc:	2008      	movge	r0, #8
 80116ce:	2004      	movlt	r0, #4
 80116d0:	4770      	bx	lr
 80116d2:	bf00      	nop

080116d4 <uxr_init_base_object_request>:
 80116d4:	b510      	push	{r4, lr}
 80116d6:	88c3      	ldrh	r3, [r0, #6]
 80116d8:	b082      	sub	sp, #8
 80116da:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80116de:	9101      	str	r1, [sp, #4]
 80116e0:	f1a3 010a 	sub.w	r1, r3, #10
 80116e4:	b289      	uxth	r1, r1
 80116e6:	42a1      	cmp	r1, r4
 80116e8:	d80e      	bhi.n	8011708 <uxr_init_base_object_request+0x34>
 80116ea:	3301      	adds	r3, #1
 80116ec:	b29c      	uxth	r4, r3
 80116ee:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	80c4      	strh	r4, [r0, #6]
 80116f6:	9801      	ldr	r0, [sp, #4]
 80116f8:	7011      	strb	r1, [r2, #0]
 80116fa:	7053      	strb	r3, [r2, #1]
 80116fc:	1c91      	adds	r1, r2, #2
 80116fe:	f7fe fd1b 	bl	8010138 <uxr_object_id_to_raw>
 8011702:	4620      	mov	r0, r4
 8011704:	b002      	add	sp, #8
 8011706:	bd10      	pop	{r4, pc}
 8011708:	230a      	movs	r3, #10
 801170a:	2100      	movs	r1, #0
 801170c:	461c      	mov	r4, r3
 801170e:	e7f1      	b.n	80116f4 <uxr_init_base_object_request+0x20>

08011710 <uxr_parse_base_object_request>:
 8011710:	b570      	push	{r4, r5, r6, lr}
 8011712:	4604      	mov	r4, r0
 8011714:	3002      	adds	r0, #2
 8011716:	460d      	mov	r5, r1
 8011718:	4616      	mov	r6, r2
 801171a:	f7fe fcf9 	bl	8010110 <uxr_object_id_from_raw>
 801171e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011722:	8028      	strh	r0, [r5, #0]
 8011724:	806b      	strh	r3, [r5, #2]
 8011726:	7822      	ldrb	r2, [r4, #0]
 8011728:	7863      	ldrb	r3, [r4, #1]
 801172a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801172e:	8033      	strh	r3, [r6, #0]
 8011730:	bd70      	pop	{r4, r5, r6, pc}
 8011732:	bf00      	nop

08011734 <uxr_init_framing_io>:
 8011734:	2300      	movs	r3, #0
 8011736:	7041      	strb	r1, [r0, #1]
 8011738:	7003      	strb	r3, [r0, #0]
 801173a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801173c:	4770      	bx	lr
 801173e:	bf00      	nop

08011740 <uxr_write_framed_msg>:
 8011740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011744:	4617      	mov	r7, r2
 8011746:	7842      	ldrb	r2, [r0, #1]
 8011748:	b083      	sub	sp, #12
 801174a:	460e      	mov	r6, r1
 801174c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011750:	469a      	mov	sl, r3
 8011752:	2901      	cmp	r1, #1
 8011754:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011758:	4604      	mov	r4, r0
 801175a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801175e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011762:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8011766:	f240 8137 	bls.w	80119d8 <uxr_write_framed_msg+0x298>
 801176a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801176e:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011772:	2901      	cmp	r1, #1
 8011774:	f04f 0202 	mov.w	r2, #2
 8011778:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801177c:	f240 808f 	bls.w	801189e <uxr_write_framed_msg+0x15e>
 8011780:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011782:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8011786:	b2dd      	uxtb	r5, r3
 8011788:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801178c:	2203      	movs	r2, #3
 801178e:	2901      	cmp	r1, #1
 8011790:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011794:	f240 809a 	bls.w	80118cc <uxr_write_framed_msg+0x18c>
 8011798:	18a1      	adds	r1, r4, r2
 801179a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801179c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80117a0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80117a4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80117a8:	3201      	adds	r2, #1
 80117aa:	2801      	cmp	r0, #1
 80117ac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80117b0:	f240 80a0 	bls.w	80118f4 <uxr_write_framed_msg+0x1b4>
 80117b4:	18a0      	adds	r0, r4, r2
 80117b6:	3201      	adds	r2, #1
 80117b8:	b2d2      	uxtb	r2, r2
 80117ba:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80117be:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	f000 80a9 	beq.w	801191a <uxr_write_framed_msg+0x1da>
 80117c8:	f04f 0900 	mov.w	r9, #0
 80117cc:	46c8      	mov	r8, r9
 80117ce:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80117d2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80117d6:	2901      	cmp	r1, #1
 80117d8:	f240 80c3 	bls.w	8011962 <uxr_write_framed_msg+0x222>
 80117dc:	2a29      	cmp	r2, #41	@ 0x29
 80117de:	f200 809f 	bhi.w	8011920 <uxr_write_framed_msg+0x1e0>
 80117e2:	18a1      	adds	r1, r4, r2
 80117e4:	3201      	adds	r2, #1
 80117e6:	b2d2      	uxtb	r2, r2
 80117e8:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80117ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80117f0:	ea89 0303 	eor.w	r3, r9, r3
 80117f4:	498c      	ldr	r1, [pc, #560]	@ (8011a28 <uxr_write_framed_msg+0x2e8>)
 80117f6:	b2db      	uxtb	r3, r3
 80117f8:	f108 0801 	add.w	r8, r8, #1
 80117fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011800:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011804:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011806:	4543      	cmp	r3, r8
 8011808:	d8e1      	bhi.n	80117ce <uxr_write_framed_msg+0x8e>
 801180a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801180e:	fa5f f889 	uxtb.w	r8, r9
 8011812:	9301      	str	r3, [sp, #4]
 8011814:	f04f 0900 	mov.w	r9, #0
 8011818:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 801181c:	fa5f f18a 	uxtb.w	r1, sl
 8011820:	2901      	cmp	r1, #1
 8011822:	d921      	bls.n	8011868 <uxr_write_framed_msg+0x128>
 8011824:	2a29      	cmp	r2, #41	@ 0x29
 8011826:	f240 80af 	bls.w	8011988 <uxr_write_framed_msg+0x248>
 801182a:	2500      	movs	r5, #0
 801182c:	e000      	b.n	8011830 <uxr_write_framed_msg+0xf0>
 801182e:	b160      	cbz	r0, 801184a <uxr_write_framed_msg+0x10a>
 8011830:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011834:	1b52      	subs	r2, r2, r5
 8011836:	465b      	mov	r3, fp
 8011838:	4421      	add	r1, r4
 801183a:	4638      	mov	r0, r7
 801183c:	47b0      	blx	r6
 801183e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011842:	4405      	add	r5, r0
 8011844:	4295      	cmp	r5, r2
 8011846:	d3f2      	bcc.n	801182e <uxr_write_framed_msg+0xee>
 8011848:	d003      	beq.n	8011852 <uxr_write_framed_msg+0x112>
 801184a:	2000      	movs	r0, #0
 801184c:	b003      	add	sp, #12
 801184e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011852:	fa5f f18a 	uxtb.w	r1, sl
 8011856:	f04f 0300 	mov.w	r3, #0
 801185a:	2901      	cmp	r1, #1
 801185c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011860:	f04f 0200 	mov.w	r2, #0
 8011864:	f200 8090 	bhi.w	8011988 <uxr_write_framed_msg+0x248>
 8011868:	1c51      	adds	r1, r2, #1
 801186a:	b2c9      	uxtb	r1, r1
 801186c:	2929      	cmp	r1, #41	@ 0x29
 801186e:	d8dc      	bhi.n	801182a <uxr_write_framed_msg+0xea>
 8011870:	18a5      	adds	r5, r4, r2
 8011872:	4421      	add	r1, r4
 8011874:	3202      	adds	r2, #2
 8011876:	f088 0820 	eor.w	r8, r8, #32
 801187a:	4648      	mov	r0, r9
 801187c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011880:	b2d2      	uxtb	r2, r2
 8011882:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8011886:	f04f 0901 	mov.w	r9, #1
 801188a:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801188e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011892:	2800      	cmp	r0, #0
 8011894:	f040 8085 	bne.w	80119a2 <uxr_write_framed_msg+0x262>
 8011898:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801189c:	e7bc      	b.n	8011818 <uxr_write_framed_msg+0xd8>
 801189e:	4611      	mov	r1, r2
 80118a0:	f04f 0c03 	mov.w	ip, #3
 80118a4:	2204      	movs	r2, #4
 80118a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118a8:	4421      	add	r1, r4
 80118aa:	b2dd      	uxtb	r5, r3
 80118ac:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80118b0:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80118b4:	44a4      	add	ip, r4
 80118b6:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80118ba:	f080 0020 	eor.w	r0, r0, #32
 80118be:	2901      	cmp	r1, #1
 80118c0:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80118c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80118c8:	f63f af66 	bhi.w	8011798 <uxr_write_framed_msg+0x58>
 80118cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118ce:	18a0      	adds	r0, r4, r2
 80118d0:	f085 0520 	eor.w	r5, r5, #32
 80118d4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80118d8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80118dc:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80118e0:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80118e4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80118e8:	3202      	adds	r2, #2
 80118ea:	2801      	cmp	r0, #1
 80118ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80118f0:	f63f af60 	bhi.w	80117b4 <uxr_write_framed_msg+0x74>
 80118f4:	1c50      	adds	r0, r2, #1
 80118f6:	18a5      	adds	r5, r4, r2
 80118f8:	fa54 f080 	uxtab	r0, r4, r0
 80118fc:	3202      	adds	r2, #2
 80118fe:	f081 0120 	eor.w	r1, r1, #32
 8011902:	b2d2      	uxtb	r2, r2
 8011904:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011908:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 801190c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011910:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011914:	2b00      	cmp	r3, #0
 8011916:	f47f af57 	bne.w	80117c8 <uxr_write_framed_msg+0x88>
 801191a:	9301      	str	r3, [sp, #4]
 801191c:	4698      	mov	r8, r3
 801191e:	e779      	b.n	8011814 <uxr_write_framed_msg+0xd4>
 8011920:	2500      	movs	r5, #0
 8011922:	e001      	b.n	8011928 <uxr_write_framed_msg+0x1e8>
 8011924:	2800      	cmp	r0, #0
 8011926:	d090      	beq.n	801184a <uxr_write_framed_msg+0x10a>
 8011928:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801192c:	1b52      	subs	r2, r2, r5
 801192e:	465b      	mov	r3, fp
 8011930:	4421      	add	r1, r4
 8011932:	4638      	mov	r0, r7
 8011934:	47b0      	blx	r6
 8011936:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801193a:	4405      	add	r5, r0
 801193c:	4295      	cmp	r5, r2
 801193e:	d3f1      	bcc.n	8011924 <uxr_write_framed_msg+0x1e4>
 8011940:	d183      	bne.n	801184a <uxr_write_framed_msg+0x10a>
 8011942:	f04f 0300 	mov.w	r3, #0
 8011946:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801194a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801194c:	4543      	cmp	r3, r8
 801194e:	d964      	bls.n	8011a1a <uxr_write_framed_msg+0x2da>
 8011950:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011954:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011958:	2901      	cmp	r1, #1
 801195a:	f04f 0200 	mov.w	r2, #0
 801195e:	f63f af3d 	bhi.w	80117dc <uxr_write_framed_msg+0x9c>
 8011962:	1c51      	adds	r1, r2, #1
 8011964:	b2c9      	uxtb	r1, r1
 8011966:	2929      	cmp	r1, #41	@ 0x29
 8011968:	d8da      	bhi.n	8011920 <uxr_write_framed_msg+0x1e0>
 801196a:	18a0      	adds	r0, r4, r2
 801196c:	4421      	add	r1, r4
 801196e:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011972:	3202      	adds	r2, #2
 8011974:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8011978:	b2d2      	uxtb	r2, r2
 801197a:	f083 0020 	eor.w	r0, r3, #32
 801197e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011982:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011986:	e733      	b.n	80117f0 <uxr_write_framed_msg+0xb0>
 8011988:	18a1      	adds	r1, r4, r2
 801198a:	3201      	adds	r2, #1
 801198c:	4648      	mov	r0, r9
 801198e:	b2d2      	uxtb	r2, r2
 8011990:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011994:	f04f 0901 	mov.w	r9, #1
 8011998:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801199c:	2800      	cmp	r0, #0
 801199e:	f43f af7b 	beq.w	8011898 <uxr_write_framed_msg+0x158>
 80119a2:	2500      	movs	r5, #0
 80119a4:	e002      	b.n	80119ac <uxr_write_framed_msg+0x26c>
 80119a6:	2800      	cmp	r0, #0
 80119a8:	f43f af4f 	beq.w	801184a <uxr_write_framed_msg+0x10a>
 80119ac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80119b0:	1b52      	subs	r2, r2, r5
 80119b2:	465b      	mov	r3, fp
 80119b4:	4421      	add	r1, r4
 80119b6:	4638      	mov	r0, r7
 80119b8:	47b0      	blx	r6
 80119ba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80119be:	4405      	add	r5, r0
 80119c0:	4295      	cmp	r5, r2
 80119c2:	d3f0      	bcc.n	80119a6 <uxr_write_framed_msg+0x266>
 80119c4:	f47f af41 	bne.w	801184a <uxr_write_framed_msg+0x10a>
 80119c8:	2300      	movs	r3, #0
 80119ca:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80119ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80119d0:	b298      	uxth	r0, r3
 80119d2:	b003      	add	sp, #12
 80119d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d8:	217d      	movs	r1, #125	@ 0x7d
 80119da:	f082 0220 	eor.w	r2, r2, #32
 80119de:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80119e2:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80119e6:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80119ea:	2901      	cmp	r1, #1
 80119ec:	f04f 0203 	mov.w	r2, #3
 80119f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80119f4:	d804      	bhi.n	8011a00 <uxr_write_framed_msg+0x2c0>
 80119f6:	4611      	mov	r1, r2
 80119f8:	f04f 0c04 	mov.w	ip, #4
 80119fc:	2205      	movs	r2, #5
 80119fe:	e752      	b.n	80118a6 <uxr_write_framed_msg+0x166>
 8011a00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a02:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8011a06:	b2dd      	uxtb	r5, r3
 8011a08:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011a0c:	2204      	movs	r2, #4
 8011a0e:	2901      	cmp	r1, #1
 8011a10:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011a14:	f63f aec0 	bhi.w	8011798 <uxr_write_framed_msg+0x58>
 8011a18:	e758      	b.n	80118cc <uxr_write_framed_msg+0x18c>
 8011a1a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011a1e:	fa5f f889 	uxtb.w	r8, r9
 8011a22:	9301      	str	r3, [sp, #4]
 8011a24:	2200      	movs	r2, #0
 8011a26:	e6f5      	b.n	8011814 <uxr_write_framed_msg+0xd4>
 8011a28:	08019c2c 	.word	0x08019c2c

08011a2c <uxr_framing_read_transport>:
 8011a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a30:	4604      	mov	r4, r0
 8011a32:	b083      	sub	sp, #12
 8011a34:	461f      	mov	r7, r3
 8011a36:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8011a3a:	4689      	mov	r9, r1
 8011a3c:	4692      	mov	sl, r2
 8011a3e:	f000 fc89 	bl	8012354 <uxr_millis>
 8011a42:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011a46:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8011a4a:	42b3      	cmp	r3, r6
 8011a4c:	4680      	mov	r8, r0
 8011a4e:	d061      	beq.n	8011b14 <uxr_framing_read_transport+0xe8>
 8011a50:	d81c      	bhi.n	8011a8c <uxr_framing_read_transport+0x60>
 8011a52:	1e75      	subs	r5, r6, #1
 8011a54:	1aed      	subs	r5, r5, r3
 8011a56:	b2ed      	uxtb	r5, r5
 8011a58:	2600      	movs	r6, #0
 8011a5a:	455d      	cmp	r5, fp
 8011a5c:	d81f      	bhi.n	8011a9e <uxr_framing_read_transport+0x72>
 8011a5e:	19ab      	adds	r3, r5, r6
 8011a60:	455b      	cmp	r3, fp
 8011a62:	bf84      	itt	hi
 8011a64:	ebab 0605 	subhi.w	r6, fp, r5
 8011a68:	b2f6      	uxtbhi	r6, r6
 8011a6a:	b9ed      	cbnz	r5, 8011aa8 <uxr_framing_read_transport+0x7c>
 8011a6c:	f04f 0b00 	mov.w	fp, #0
 8011a70:	f000 fc70 	bl	8012354 <uxr_millis>
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	eba0 0808 	sub.w	r8, r0, r8
 8011a7a:	eba3 0308 	sub.w	r3, r3, r8
 8011a7e:	4658      	mov	r0, fp
 8011a80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011a84:	603b      	str	r3, [r7, #0]
 8011a86:	b003      	add	sp, #12
 8011a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a8c:	2e00      	cmp	r6, #0
 8011a8e:	d049      	beq.n	8011b24 <uxr_framing_read_transport+0xf8>
 8011a90:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8011a94:	b2ed      	uxtb	r5, r5
 8011a96:	3e01      	subs	r6, #1
 8011a98:	455d      	cmp	r5, fp
 8011a9a:	b2f6      	uxtb	r6, r6
 8011a9c:	d9df      	bls.n	8011a5e <uxr_framing_read_transport+0x32>
 8011a9e:	fa5f f58b 	uxtb.w	r5, fp
 8011aa2:	2600      	movs	r6, #0
 8011aa4:	2d00      	cmp	r5, #0
 8011aa6:	d0e1      	beq.n	8011a6c <uxr_framing_read_transport+0x40>
 8011aa8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011aac:	3102      	adds	r1, #2
 8011aae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ab0:	9300      	str	r3, [sp, #0]
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	4421      	add	r1, r4
 8011ab6:	462a      	mov	r2, r5
 8011ab8:	4650      	mov	r0, sl
 8011aba:	47c8      	blx	r9
 8011abc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8011b2c <uxr_framing_read_transport+0x100>)
 8011ac2:	4403      	add	r3, r0
 8011ac4:	0859      	lsrs	r1, r3, #1
 8011ac6:	fba2 2101 	umull	r2, r1, r2, r1
 8011aca:	0889      	lsrs	r1, r1, #2
 8011acc:	222a      	movs	r2, #42	@ 0x2a
 8011ace:	fb02 3111 	mls	r1, r2, r1, r3
 8011ad2:	4683      	mov	fp, r0
 8011ad4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8011ad8:	2800      	cmp	r0, #0
 8011ada:	d0c7      	beq.n	8011a6c <uxr_framing_read_transport+0x40>
 8011adc:	42a8      	cmp	r0, r5
 8011ade:	d1c7      	bne.n	8011a70 <uxr_framing_read_transport+0x44>
 8011ae0:	2e00      	cmp	r6, #0
 8011ae2:	d0c5      	beq.n	8011a70 <uxr_framing_read_transport+0x44>
 8011ae4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ae6:	9300      	str	r3, [sp, #0]
 8011ae8:	3102      	adds	r1, #2
 8011aea:	4632      	mov	r2, r6
 8011aec:	4421      	add	r1, r4
 8011aee:	2300      	movs	r3, #0
 8011af0:	4650      	mov	r0, sl
 8011af2:	47c8      	blx	r9
 8011af4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011af8:	4a0c      	ldr	r2, [pc, #48]	@ (8011b2c <uxr_framing_read_transport+0x100>)
 8011afa:	180b      	adds	r3, r1, r0
 8011afc:	0859      	lsrs	r1, r3, #1
 8011afe:	fba2 1201 	umull	r1, r2, r2, r1
 8011b02:	0892      	lsrs	r2, r2, #2
 8011b04:	212a      	movs	r1, #42	@ 0x2a
 8011b06:	fb01 3312 	mls	r3, r1, r2, r3
 8011b0a:	eb00 0b05 	add.w	fp, r0, r5
 8011b0e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011b12:	e7ad      	b.n	8011a70 <uxr_framing_read_transport+0x44>
 8011b14:	2600      	movs	r6, #0
 8011b16:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8011b1a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8011b1c:	d9bf      	bls.n	8011a9e <uxr_framing_read_transport+0x72>
 8011b1e:	2102      	movs	r1, #2
 8011b20:	2529      	movs	r5, #41	@ 0x29
 8011b22:	e7c4      	b.n	8011aae <uxr_framing_read_transport+0x82>
 8011b24:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8011b28:	b2ed      	uxtb	r5, r5
 8011b2a:	e796      	b.n	8011a5a <uxr_framing_read_transport+0x2e>
 8011b2c:	30c30c31 	.word	0x30c30c31

08011b30 <uxr_read_framed_msg>:
 8011b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b34:	461e      	mov	r6, r3
 8011b36:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8011b3a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8011b3e:	429d      	cmp	r5, r3
 8011b40:	b083      	sub	sp, #12
 8011b42:	4604      	mov	r4, r0
 8011b44:	4688      	mov	r8, r1
 8011b46:	4691      	mov	r9, r2
 8011b48:	f000 8188 	beq.w	8011e5c <uxr_read_framed_msg+0x32c>
 8011b4c:	7823      	ldrb	r3, [r4, #0]
 8011b4e:	4dc1      	ldr	r5, [pc, #772]	@ (8011e54 <uxr_read_framed_msg+0x324>)
 8011b50:	4fc1      	ldr	r7, [pc, #772]	@ (8011e58 <uxr_read_framed_msg+0x328>)
 8011b52:	2b07      	cmp	r3, #7
 8011b54:	d8fd      	bhi.n	8011b52 <uxr_read_framed_msg+0x22>
 8011b56:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011b5a:	0115      	.short	0x0115
 8011b5c:	00d600f6 	.word	0x00d600f6
 8011b60:	009000b9 	.word	0x009000b9
 8011b64:	0030004d 	.word	0x0030004d
 8011b68:	0008      	.short	0x0008
 8011b6a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011b6e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011b72:	4299      	cmp	r1, r3
 8011b74:	f000 814a 	beq.w	8011e0c <uxr_read_framed_msg+0x2dc>
 8011b78:	18e2      	adds	r2, r4, r3
 8011b7a:	7892      	ldrb	r2, [r2, #2]
 8011b7c:	2a7d      	cmp	r2, #125	@ 0x7d
 8011b7e:	f000 8199 	beq.w	8011eb4 <uxr_read_framed_msg+0x384>
 8011b82:	3301      	adds	r3, #1
 8011b84:	0858      	lsrs	r0, r3, #1
 8011b86:	fba5 1000 	umull	r1, r0, r5, r0
 8011b8a:	0880      	lsrs	r0, r0, #2
 8011b8c:	212a      	movs	r1, #42	@ 0x2a
 8011b8e:	fb01 3310 	mls	r3, r1, r0, r3
 8011b92:	2a7e      	cmp	r2, #126	@ 0x7e
 8011b94:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011b98:	f000 8252 	beq.w	8012040 <uxr_read_framed_msg+0x510>
 8011b9c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8011b9e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8011ba0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	4299      	cmp	r1, r3
 8011baa:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8011bac:	7022      	strb	r2, [r4, #0]
 8011bae:	f000 8179 	beq.w	8011ea4 <uxr_read_framed_msg+0x374>
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	b003      	add	sp, #12
 8011bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bba:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011bbe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011bc2:	4299      	cmp	r1, r3
 8011bc4:	f000 8131 	beq.w	8011e2a <uxr_read_framed_msg+0x2fa>
 8011bc8:	18e2      	adds	r2, r4, r3
 8011bca:	7890      	ldrb	r0, [r2, #2]
 8011bcc:	287d      	cmp	r0, #125	@ 0x7d
 8011bce:	f000 8190 	beq.w	8011ef2 <uxr_read_framed_msg+0x3c2>
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	085a      	lsrs	r2, r3, #1
 8011bd6:	fba5 1202 	umull	r1, r2, r5, r2
 8011bda:	0892      	lsrs	r2, r2, #2
 8011bdc:	212a      	movs	r1, #42	@ 0x2a
 8011bde:	fb01 3312 	mls	r3, r1, r2, r3
 8011be2:	287e      	cmp	r0, #126	@ 0x7e
 8011be4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011be8:	f000 821a 	beq.w	8012020 <uxr_read_framed_msg+0x4f0>
 8011bec:	2307      	movs	r3, #7
 8011bee:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8011bf0:	7023      	strb	r3, [r4, #0]
 8011bf2:	e7ae      	b.n	8011b52 <uxr_read_framed_msg+0x22>
 8011bf4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011bf6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011bfa:	459e      	cmp	lr, r3
 8011bfc:	d938      	bls.n	8011c70 <uxr_read_framed_msg+0x140>
 8011bfe:	ee07 8a90 	vmov	s15, r8
 8011c02:	212a      	movs	r1, #42	@ 0x2a
 8011c04:	e020      	b.n	8011c48 <uxr_read_framed_msg+0x118>
 8011c06:	f89b c002 	ldrb.w	ip, [fp, #2]
 8011c0a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8011c0e:	f000 80d4 	beq.w	8011dba <uxr_read_framed_msg+0x28a>
 8011c12:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011c16:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011c1a:	f000 8219 	beq.w	8012050 <uxr_read_framed_msg+0x520>
 8011c1e:	f806 c003 	strb.w	ip, [r6, r3]
 8011c22:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8011c26:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011c28:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011c2c:	ea8a 000c 	eor.w	r0, sl, ip
 8011c30:	b2c0      	uxtb	r0, r0
 8011c32:	3301      	adds	r3, #1
 8011c34:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8011c3e:	4573      	cmp	r3, lr
 8011c40:	8663      	strh	r3, [r4, #50]	@ 0x32
 8011c42:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011c44:	f080 8120 	bcs.w	8011e88 <uxr_read_framed_msg+0x358>
 8011c48:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8011c4c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011c50:	f100 0c01 	add.w	ip, r0, #1
 8011c54:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011c58:	fba5 8202 	umull	r8, r2, r5, r2
 8011c5c:	0892      	lsrs	r2, r2, #2
 8011c5e:	4582      	cmp	sl, r0
 8011c60:	eb04 0b00 	add.w	fp, r4, r0
 8011c64:	fb01 c212 	mls	r2, r1, r2, ip
 8011c68:	d1cd      	bne.n	8011c06 <uxr_read_framed_msg+0xd6>
 8011c6a:	ee17 8a90 	vmov	r8, s15
 8011c6e:	459e      	cmp	lr, r3
 8011c70:	f040 8111 	bne.w	8011e96 <uxr_read_framed_msg+0x366>
 8011c74:	2306      	movs	r3, #6
 8011c76:	7023      	strb	r3, [r4, #0]
 8011c78:	e76b      	b.n	8011b52 <uxr_read_framed_msg+0x22>
 8011c7a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011c7e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011c82:	4298      	cmp	r0, r3
 8011c84:	f000 80c2 	beq.w	8011e0c <uxr_read_framed_msg+0x2dc>
 8011c88:	18e2      	adds	r2, r4, r3
 8011c8a:	7891      	ldrb	r1, [r2, #2]
 8011c8c:	297d      	cmp	r1, #125	@ 0x7d
 8011c8e:	f000 814c 	beq.w	8011f2a <uxr_read_framed_msg+0x3fa>
 8011c92:	3301      	adds	r3, #1
 8011c94:	085a      	lsrs	r2, r3, #1
 8011c96:	fba5 0202 	umull	r0, r2, r5, r2
 8011c9a:	0892      	lsrs	r2, r2, #2
 8011c9c:	202a      	movs	r0, #42	@ 0x2a
 8011c9e:	fb00 3312 	mls	r3, r0, r2, r3
 8011ca2:	297e      	cmp	r1, #126	@ 0x7e
 8011ca4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011ca8:	f000 81ca 	beq.w	8012040 <uxr_read_framed_msg+0x510>
 8011cac:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8011cae:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011cb2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011cb4:	b29b      	uxth	r3, r3
 8011cb6:	2000      	movs	r0, #0
 8011cb8:	428b      	cmp	r3, r1
 8011cba:	8623      	strh	r3, [r4, #48]	@ 0x30
 8011cbc:	8660      	strh	r0, [r4, #50]	@ 0x32
 8011cbe:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8011cc0:	f240 80df 	bls.w	8011e82 <uxr_read_framed_msg+0x352>
 8011cc4:	7020      	strb	r0, [r4, #0]
 8011cc6:	b003      	add	sp, #12
 8011cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ccc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011cd0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011cd4:	4299      	cmp	r1, r3
 8011cd6:	f000 80a8 	beq.w	8011e2a <uxr_read_framed_msg+0x2fa>
 8011cda:	18e2      	adds	r2, r4, r3
 8011cdc:	7890      	ldrb	r0, [r2, #2]
 8011cde:	287d      	cmp	r0, #125	@ 0x7d
 8011ce0:	f000 8164 	beq.w	8011fac <uxr_read_framed_msg+0x47c>
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	085a      	lsrs	r2, r3, #1
 8011ce8:	fba5 1202 	umull	r1, r2, r5, r2
 8011cec:	0892      	lsrs	r2, r2, #2
 8011cee:	212a      	movs	r1, #42	@ 0x2a
 8011cf0:	fb01 3312 	mls	r3, r1, r2, r3
 8011cf4:	287e      	cmp	r0, #126	@ 0x7e
 8011cf6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011cfa:	f000 8191 	beq.w	8012020 <uxr_read_framed_msg+0x4f0>
 8011cfe:	2304      	movs	r3, #4
 8011d00:	8620      	strh	r0, [r4, #48]	@ 0x30
 8011d02:	7023      	strb	r3, [r4, #0]
 8011d04:	e725      	b.n	8011b52 <uxr_read_framed_msg+0x22>
 8011d06:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011d0a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011d0e:	4290      	cmp	r0, r2
 8011d10:	f000 80b3 	beq.w	8011e7a <uxr_read_framed_msg+0x34a>
 8011d14:	18a3      	adds	r3, r4, r2
 8011d16:	7899      	ldrb	r1, [r3, #2]
 8011d18:	297d      	cmp	r1, #125	@ 0x7d
 8011d1a:	f000 8164 	beq.w	8011fe6 <uxr_read_framed_msg+0x4b6>
 8011d1e:	3201      	adds	r2, #1
 8011d20:	0850      	lsrs	r0, r2, #1
 8011d22:	fba5 3000 	umull	r3, r0, r5, r0
 8011d26:	0880      	lsrs	r0, r0, #2
 8011d28:	232a      	movs	r3, #42	@ 0x2a
 8011d2a:	fb03 2210 	mls	r2, r3, r0, r2
 8011d2e:	297e      	cmp	r1, #126	@ 0x7e
 8011d30:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011d34:	f000 8188 	beq.w	8012048 <uxr_read_framed_msg+0x518>
 8011d38:	7863      	ldrb	r3, [r4, #1]
 8011d3a:	428b      	cmp	r3, r1
 8011d3c:	bf0c      	ite	eq
 8011d3e:	2303      	moveq	r3, #3
 8011d40:	2300      	movne	r3, #0
 8011d42:	7023      	strb	r3, [r4, #0]
 8011d44:	e705      	b.n	8011b52 <uxr_read_framed_msg+0x22>
 8011d46:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011d4a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011d4e:	2200      	movs	r2, #0
 8011d50:	4299      	cmp	r1, r3
 8011d52:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8011d56:	d06c      	beq.n	8011e32 <uxr_read_framed_msg+0x302>
 8011d58:	18e2      	adds	r2, r4, r3
 8011d5a:	7890      	ldrb	r0, [r2, #2]
 8011d5c:	287d      	cmp	r0, #125	@ 0x7d
 8011d5e:	f000 8101 	beq.w	8011f64 <uxr_read_framed_msg+0x434>
 8011d62:	3301      	adds	r3, #1
 8011d64:	085a      	lsrs	r2, r3, #1
 8011d66:	fba5 1202 	umull	r1, r2, r5, r2
 8011d6a:	0892      	lsrs	r2, r2, #2
 8011d6c:	212a      	movs	r1, #42	@ 0x2a
 8011d6e:	fb01 3312 	mls	r3, r1, r2, r3
 8011d72:	287e      	cmp	r0, #126	@ 0x7e
 8011d74:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8011d78:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011d7c:	d059      	beq.n	8011e32 <uxr_read_framed_msg+0x302>
 8011d7e:	2302      	movs	r3, #2
 8011d80:	7023      	strb	r3, [r4, #0]
 8011d82:	e6e6      	b.n	8011b52 <uxr_read_framed_msg+0x22>
 8011d84:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011d88:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011d8c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8011d90:	1c51      	adds	r1, r2, #1
 8011d92:	084b      	lsrs	r3, r1, #1
 8011d94:	fba5 c303 	umull	ip, r3, r5, r3
 8011d98:	089b      	lsrs	r3, r3, #2
 8011d9a:	fb0e 1313 	mls	r3, lr, r3, r1
 8011d9e:	4592      	cmp	sl, r2
 8011da0:	eb04 0002 	add.w	r0, r4, r2
 8011da4:	b2da      	uxtb	r2, r3
 8011da6:	f43f af04 	beq.w	8011bb2 <uxr_read_framed_msg+0x82>
 8011daa:	7883      	ldrb	r3, [r0, #2]
 8011dac:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011db0:	2b7e      	cmp	r3, #126	@ 0x7e
 8011db2:	d1ed      	bne.n	8011d90 <uxr_read_framed_msg+0x260>
 8011db4:	2301      	movs	r3, #1
 8011db6:	7023      	strb	r3, [r4, #0]
 8011db8:	e6cb      	b.n	8011b52 <uxr_read_framed_msg+0x22>
 8011dba:	f100 0c01 	add.w	ip, r0, #1
 8011dbe:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011dc2:	fba5 8202 	umull	r8, r2, r5, r2
 8011dc6:	0892      	lsrs	r2, r2, #2
 8011dc8:	fb01 c212 	mls	r2, r1, r2, ip
 8011dcc:	eb04 0c02 	add.w	ip, r4, r2
 8011dd0:	b2d2      	uxtb	r2, r2
 8011dd2:	4592      	cmp	sl, r2
 8011dd4:	f100 0002 	add.w	r0, r0, #2
 8011dd8:	f43f af47 	beq.w	8011c6a <uxr_read_framed_msg+0x13a>
 8011ddc:	0842      	lsrs	r2, r0, #1
 8011dde:	f89c a002 	ldrb.w	sl, [ip, #2]
 8011de2:	fba5 8202 	umull	r8, r2, r5, r2
 8011de6:	0892      	lsrs	r2, r2, #2
 8011de8:	fb01 0012 	mls	r0, r1, r2, r0
 8011dec:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8011df0:	f08a 0c20 	eor.w	ip, sl, #32
 8011df4:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8011df8:	f47f af11 	bne.w	8011c1e <uxr_read_framed_msg+0xee>
 8011dfc:	459e      	cmp	lr, r3
 8011dfe:	ee17 8a90 	vmov	r8, s15
 8011e02:	f43f af37 	beq.w	8011c74 <uxr_read_framed_msg+0x144>
 8011e06:	2301      	movs	r3, #1
 8011e08:	7023      	strb	r3, [r4, #0]
 8011e0a:	e6a2      	b.n	8011b52 <uxr_read_framed_msg+0x22>
 8011e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e0e:	9300      	str	r3, [sp, #0]
 8011e10:	2301      	movs	r3, #1
 8011e12:	9301      	str	r3, [sp, #4]
 8011e14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e16:	464a      	mov	r2, r9
 8011e18:	4641      	mov	r1, r8
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	f7ff fe06 	bl	8011a2c <uxr_framing_read_transport>
 8011e20:	2800      	cmp	r0, #0
 8011e22:	f43f aec6 	beq.w	8011bb2 <uxr_read_framed_msg+0x82>
 8011e26:	7823      	ldrb	r3, [r4, #0]
 8011e28:	e693      	b.n	8011b52 <uxr_read_framed_msg+0x22>
 8011e2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e2c:	9300      	str	r3, [sp, #0]
 8011e2e:	2302      	movs	r3, #2
 8011e30:	e7ef      	b.n	8011e12 <uxr_read_framed_msg+0x2e2>
 8011e32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e34:	9300      	str	r3, [sp, #0]
 8011e36:	2304      	movs	r3, #4
 8011e38:	9301      	str	r3, [sp, #4]
 8011e3a:	464a      	mov	r2, r9
 8011e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e3e:	4641      	mov	r1, r8
 8011e40:	4620      	mov	r0, r4
 8011e42:	f7ff fdf3 	bl	8011a2c <uxr_framing_read_transport>
 8011e46:	2800      	cmp	r0, #0
 8011e48:	d1ed      	bne.n	8011e26 <uxr_read_framed_msg+0x2f6>
 8011e4a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011e4e:	2b7e      	cmp	r3, #126	@ 0x7e
 8011e50:	d0e9      	beq.n	8011e26 <uxr_read_framed_msg+0x2f6>
 8011e52:	e6ae      	b.n	8011bb2 <uxr_read_framed_msg+0x82>
 8011e54:	30c30c31 	.word	0x30c30c31
 8011e58:	08019c2c 	.word	0x08019c2c
 8011e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e5e:	9300      	str	r3, [sp, #0]
 8011e60:	2305      	movs	r3, #5
 8011e62:	9301      	str	r3, [sp, #4]
 8011e64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e66:	f7ff fde1 	bl	8011a2c <uxr_framing_read_transport>
 8011e6a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011e6e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011e72:	429a      	cmp	r2, r3
 8011e74:	f43f ae9d 	beq.w	8011bb2 <uxr_read_framed_msg+0x82>
 8011e78:	e668      	b.n	8011b4c <uxr_read_framed_msg+0x1c>
 8011e7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e7c:	9300      	str	r3, [sp, #0]
 8011e7e:	2303      	movs	r3, #3
 8011e80:	e7c7      	b.n	8011e12 <uxr_read_framed_msg+0x2e2>
 8011e82:	2305      	movs	r3, #5
 8011e84:	7023      	strb	r3, [r4, #0]
 8011e86:	e664      	b.n	8011b52 <uxr_read_framed_msg+0x22>
 8011e88:	ee17 8a90 	vmov	r8, s15
 8011e8c:	f43f aef2 	beq.w	8011c74 <uxr_read_framed_msg+0x144>
 8011e90:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011e94:	d08e      	beq.n	8011db4 <uxr_read_framed_msg+0x284>
 8011e96:	ebae 0303 	sub.w	r3, lr, r3
 8011e9a:	3302      	adds	r3, #2
 8011e9c:	9301      	str	r3, [sp, #4]
 8011e9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ea0:	9300      	str	r3, [sp, #0]
 8011ea2:	e7b7      	b.n	8011e14 <uxr_read_framed_msg+0x2e4>
 8011ea4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011ea6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011eaa:	7013      	strb	r3, [r2, #0]
 8011eac:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8011eae:	b003      	add	sp, #12
 8011eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eb4:	f103 0c01 	add.w	ip, r3, #1
 8011eb8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011ebc:	fba5 0202 	umull	r0, r2, r5, r2
 8011ec0:	0892      	lsrs	r2, r2, #2
 8011ec2:	202a      	movs	r0, #42	@ 0x2a
 8011ec4:	fb00 c212 	mls	r2, r0, r2, ip
 8011ec8:	fa5f fc82 	uxtb.w	ip, r2
 8011ecc:	4561      	cmp	r1, ip
 8011ece:	d09d      	beq.n	8011e0c <uxr_read_framed_msg+0x2dc>
 8011ed0:	3302      	adds	r3, #2
 8011ed2:	4422      	add	r2, r4
 8011ed4:	0859      	lsrs	r1, r3, #1
 8011ed6:	7892      	ldrb	r2, [r2, #2]
 8011ed8:	fba5 c101 	umull	ip, r1, r5, r1
 8011edc:	0889      	lsrs	r1, r1, #2
 8011ede:	fb00 3311 	mls	r3, r0, r1, r3
 8011ee2:	2a7e      	cmp	r2, #126	@ 0x7e
 8011ee4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011ee8:	f000 80aa 	beq.w	8012040 <uxr_read_framed_msg+0x510>
 8011eec:	f082 0220 	eor.w	r2, r2, #32
 8011ef0:	e654      	b.n	8011b9c <uxr_read_framed_msg+0x6c>
 8011ef2:	1c58      	adds	r0, r3, #1
 8011ef4:	0842      	lsrs	r2, r0, #1
 8011ef6:	fba5 c202 	umull	ip, r2, r5, r2
 8011efa:	0892      	lsrs	r2, r2, #2
 8011efc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011f00:	fb0c 0212 	mls	r2, ip, r2, r0
 8011f04:	b2d0      	uxtb	r0, r2
 8011f06:	4281      	cmp	r1, r0
 8011f08:	d08f      	beq.n	8011e2a <uxr_read_framed_msg+0x2fa>
 8011f0a:	4422      	add	r2, r4
 8011f0c:	3302      	adds	r3, #2
 8011f0e:	7890      	ldrb	r0, [r2, #2]
 8011f10:	085a      	lsrs	r2, r3, #1
 8011f12:	fba5 1202 	umull	r1, r2, r5, r2
 8011f16:	0892      	lsrs	r2, r2, #2
 8011f18:	fb0c 3312 	mls	r3, ip, r2, r3
 8011f1c:	287e      	cmp	r0, #126	@ 0x7e
 8011f1e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011f22:	d07d      	beq.n	8012020 <uxr_read_framed_msg+0x4f0>
 8011f24:	f080 0020 	eor.w	r0, r0, #32
 8011f28:	e660      	b.n	8011bec <uxr_read_framed_msg+0xbc>
 8011f2a:	1c59      	adds	r1, r3, #1
 8011f2c:	084a      	lsrs	r2, r1, #1
 8011f2e:	fba5 c202 	umull	ip, r2, r5, r2
 8011f32:	0892      	lsrs	r2, r2, #2
 8011f34:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011f38:	fb0c 1212 	mls	r2, ip, r2, r1
 8011f3c:	b2d1      	uxtb	r1, r2
 8011f3e:	4288      	cmp	r0, r1
 8011f40:	f43f af64 	beq.w	8011e0c <uxr_read_framed_msg+0x2dc>
 8011f44:	4422      	add	r2, r4
 8011f46:	3302      	adds	r3, #2
 8011f48:	7891      	ldrb	r1, [r2, #2]
 8011f4a:	085a      	lsrs	r2, r3, #1
 8011f4c:	fba5 0202 	umull	r0, r2, r5, r2
 8011f50:	0892      	lsrs	r2, r2, #2
 8011f52:	fb0c 3312 	mls	r3, ip, r2, r3
 8011f56:	297e      	cmp	r1, #126	@ 0x7e
 8011f58:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011f5c:	d070      	beq.n	8012040 <uxr_read_framed_msg+0x510>
 8011f5e:	f081 0120 	eor.w	r1, r1, #32
 8011f62:	e6a3      	b.n	8011cac <uxr_read_framed_msg+0x17c>
 8011f64:	f103 0c01 	add.w	ip, r3, #1
 8011f68:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011f6c:	fba5 0202 	umull	r0, r2, r5, r2
 8011f70:	0892      	lsrs	r2, r2, #2
 8011f72:	202a      	movs	r0, #42	@ 0x2a
 8011f74:	fb00 c212 	mls	r2, r0, r2, ip
 8011f78:	fa5f fc82 	uxtb.w	ip, r2
 8011f7c:	4561      	cmp	r1, ip
 8011f7e:	f43f af58 	beq.w	8011e32 <uxr_read_framed_msg+0x302>
 8011f82:	4422      	add	r2, r4
 8011f84:	3302      	adds	r3, #2
 8011f86:	7891      	ldrb	r1, [r2, #2]
 8011f88:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011f8c:	085a      	lsrs	r2, r3, #1
 8011f8e:	fba5 c202 	umull	ip, r2, r5, r2
 8011f92:	0892      	lsrs	r2, r2, #2
 8011f94:	fb00 3312 	mls	r3, r0, r2, r3
 8011f98:	297e      	cmp	r1, #126	@ 0x7e
 8011f9a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011f9e:	f43f af48 	beq.w	8011e32 <uxr_read_framed_msg+0x302>
 8011fa2:	f081 0120 	eor.w	r1, r1, #32
 8011fa6:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011faa:	e6e8      	b.n	8011d7e <uxr_read_framed_msg+0x24e>
 8011fac:	1c58      	adds	r0, r3, #1
 8011fae:	0842      	lsrs	r2, r0, #1
 8011fb0:	fba5 c202 	umull	ip, r2, r5, r2
 8011fb4:	0892      	lsrs	r2, r2, #2
 8011fb6:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011fba:	fb0c 0212 	mls	r2, ip, r2, r0
 8011fbe:	b2d0      	uxtb	r0, r2
 8011fc0:	4281      	cmp	r1, r0
 8011fc2:	f43f af32 	beq.w	8011e2a <uxr_read_framed_msg+0x2fa>
 8011fc6:	4422      	add	r2, r4
 8011fc8:	3302      	adds	r3, #2
 8011fca:	7890      	ldrb	r0, [r2, #2]
 8011fcc:	085a      	lsrs	r2, r3, #1
 8011fce:	fba5 1202 	umull	r1, r2, r5, r2
 8011fd2:	0892      	lsrs	r2, r2, #2
 8011fd4:	fb0c 3312 	mls	r3, ip, r2, r3
 8011fd8:	287e      	cmp	r0, #126	@ 0x7e
 8011fda:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011fde:	d01f      	beq.n	8012020 <uxr_read_framed_msg+0x4f0>
 8011fe0:	f080 0020 	eor.w	r0, r0, #32
 8011fe4:	e68b      	b.n	8011cfe <uxr_read_framed_msg+0x1ce>
 8011fe6:	1c51      	adds	r1, r2, #1
 8011fe8:	084b      	lsrs	r3, r1, #1
 8011fea:	fba5 c303 	umull	ip, r3, r5, r3
 8011fee:	089b      	lsrs	r3, r3, #2
 8011ff0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011ff4:	fb0c 1313 	mls	r3, ip, r3, r1
 8011ff8:	b2d9      	uxtb	r1, r3
 8011ffa:	4288      	cmp	r0, r1
 8011ffc:	f43f af3d 	beq.w	8011e7a <uxr_read_framed_msg+0x34a>
 8012000:	3202      	adds	r2, #2
 8012002:	4423      	add	r3, r4
 8012004:	0850      	lsrs	r0, r2, #1
 8012006:	789b      	ldrb	r3, [r3, #2]
 8012008:	fba5 1000 	umull	r1, r0, r5, r0
 801200c:	0880      	lsrs	r0, r0, #2
 801200e:	fb0c 2210 	mls	r2, ip, r0, r2
 8012012:	2b7e      	cmp	r3, #126	@ 0x7e
 8012014:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012018:	d016      	beq.n	8012048 <uxr_read_framed_msg+0x518>
 801201a:	f083 0120 	eor.w	r1, r3, #32
 801201e:	e68b      	b.n	8011d38 <uxr_read_framed_msg+0x208>
 8012020:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012022:	9300      	str	r3, [sp, #0]
 8012024:	2302      	movs	r3, #2
 8012026:	9301      	str	r3, [sp, #4]
 8012028:	464a      	mov	r2, r9
 801202a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801202c:	4641      	mov	r1, r8
 801202e:	4620      	mov	r0, r4
 8012030:	f7ff fcfc 	bl	8011a2c <uxr_framing_read_transport>
 8012034:	2800      	cmp	r0, #0
 8012036:	f47f aef6 	bne.w	8011e26 <uxr_read_framed_msg+0x2f6>
 801203a:	2301      	movs	r3, #1
 801203c:	7023      	strb	r3, [r4, #0]
 801203e:	e588      	b.n	8011b52 <uxr_read_framed_msg+0x22>
 8012040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012042:	9300      	str	r3, [sp, #0]
 8012044:	2301      	movs	r3, #1
 8012046:	e7ee      	b.n	8012026 <uxr_read_framed_msg+0x4f6>
 8012048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801204a:	9300      	str	r3, [sp, #0]
 801204c:	2303      	movs	r3, #3
 801204e:	e7ea      	b.n	8012026 <uxr_read_framed_msg+0x4f6>
 8012050:	ee17 8a90 	vmov	r8, s15
 8012054:	e6ae      	b.n	8011db4 <uxr_read_framed_msg+0x284>
 8012056:	bf00      	nop

08012058 <uxr_stream_id>:
 8012058:	2901      	cmp	r1, #1
 801205a:	b082      	sub	sp, #8
 801205c:	d01d      	beq.n	801209a <uxr_stream_id+0x42>
 801205e:	2902      	cmp	r1, #2
 8012060:	f04f 0c00 	mov.w	ip, #0
 8012064:	d01e      	beq.n	80120a4 <uxr_stream_id+0x4c>
 8012066:	2300      	movs	r3, #0
 8012068:	f36c 0307 	bfi	r3, ip, #0, #8
 801206c:	f360 230f 	bfi	r3, r0, #8, #8
 8012070:	f361 4317 	bfi	r3, r1, #16, #8
 8012074:	f362 631f 	bfi	r3, r2, #24, #8
 8012078:	b2da      	uxtb	r2, r3
 801207a:	2000      	movs	r0, #0
 801207c:	f362 0007 	bfi	r0, r2, #0, #8
 8012080:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012084:	f362 200f 	bfi	r0, r2, #8, #8
 8012088:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801208c:	f362 4017 	bfi	r0, r2, #16, #8
 8012090:	0e1b      	lsrs	r3, r3, #24
 8012092:	f363 601f 	bfi	r0, r3, #24, #8
 8012096:	b002      	add	sp, #8
 8012098:	4770      	bx	lr
 801209a:	f100 0c01 	add.w	ip, r0, #1
 801209e:	fa5f fc8c 	uxtb.w	ip, ip
 80120a2:	e7e0      	b.n	8012066 <uxr_stream_id+0xe>
 80120a4:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80120a8:	e7dd      	b.n	8012066 <uxr_stream_id+0xe>
 80120aa:	bf00      	nop

080120ac <uxr_stream_id_from_raw>:
 80120ac:	b082      	sub	sp, #8
 80120ae:	b130      	cbz	r0, 80120be <uxr_stream_id_from_raw+0x12>
 80120b0:	0603      	lsls	r3, r0, #24
 80120b2:	d420      	bmi.n	80120f6 <uxr_stream_id_from_raw+0x4a>
 80120b4:	1e42      	subs	r2, r0, #1
 80120b6:	b2d2      	uxtb	r2, r2
 80120b8:	f04f 0c01 	mov.w	ip, #1
 80120bc:	e001      	b.n	80120c2 <uxr_stream_id_from_raw+0x16>
 80120be:	4684      	mov	ip, r0
 80120c0:	4602      	mov	r2, r0
 80120c2:	2300      	movs	r3, #0
 80120c4:	f360 0307 	bfi	r3, r0, #0, #8
 80120c8:	f362 230f 	bfi	r3, r2, #8, #8
 80120cc:	f36c 4317 	bfi	r3, ip, #16, #8
 80120d0:	f361 631f 	bfi	r3, r1, #24, #8
 80120d4:	b2da      	uxtb	r2, r3
 80120d6:	2000      	movs	r0, #0
 80120d8:	f362 0007 	bfi	r0, r2, #0, #8
 80120dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80120e0:	f362 200f 	bfi	r0, r2, #8, #8
 80120e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80120e8:	f362 4017 	bfi	r0, r2, #16, #8
 80120ec:	0e1b      	lsrs	r3, r3, #24
 80120ee:	f363 601f 	bfi	r0, r3, #24, #8
 80120f2:	b002      	add	sp, #8
 80120f4:	4770      	bx	lr
 80120f6:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80120fa:	f04f 0c02 	mov.w	ip, #2
 80120fe:	e7e0      	b.n	80120c2 <uxr_stream_id_from_raw+0x16>

08012100 <uxr_init_stream_storage>:
 8012100:	2300      	movs	r3, #0
 8012102:	7403      	strb	r3, [r0, #16]
 8012104:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012108:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801210c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012110:	4770      	bx	lr
 8012112:	bf00      	nop

08012114 <uxr_reset_stream_storage>:
 8012114:	b570      	push	{r4, r5, r6, lr}
 8012116:	7c03      	ldrb	r3, [r0, #16]
 8012118:	4604      	mov	r4, r0
 801211a:	b153      	cbz	r3, 8012132 <uxr_reset_stream_storage+0x1e>
 801211c:	4606      	mov	r6, r0
 801211e:	2500      	movs	r5, #0
 8012120:	4630      	mov	r0, r6
 8012122:	f004 ff63 	bl	8016fec <uxr_reset_output_best_effort_stream>
 8012126:	7c23      	ldrb	r3, [r4, #16]
 8012128:	3501      	adds	r5, #1
 801212a:	42ab      	cmp	r3, r5
 801212c:	f106 0610 	add.w	r6, r6, #16
 8012130:	d8f6      	bhi.n	8012120 <uxr_reset_stream_storage+0xc>
 8012132:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012136:	b163      	cbz	r3, 8012152 <uxr_reset_stream_storage+0x3e>
 8012138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801213c:	2500      	movs	r5, #0
 801213e:	4630      	mov	r0, r6
 8012140:	f004 fd56 	bl	8016bf0 <uxr_reset_input_best_effort_stream>
 8012144:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012148:	3501      	adds	r5, #1
 801214a:	42ab      	cmp	r3, r5
 801214c:	f106 0602 	add.w	r6, r6, #2
 8012150:	d8f5      	bhi.n	801213e <uxr_reset_stream_storage+0x2a>
 8012152:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012156:	b163      	cbz	r3, 8012172 <uxr_reset_stream_storage+0x5e>
 8012158:	f104 0618 	add.w	r6, r4, #24
 801215c:	2500      	movs	r5, #0
 801215e:	4630      	mov	r0, r6
 8012160:	f004 fff0 	bl	8017144 <uxr_reset_output_reliable_stream>
 8012164:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012168:	3501      	adds	r5, #1
 801216a:	42ab      	cmp	r3, r5
 801216c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012170:	d8f5      	bhi.n	801215e <uxr_reset_stream_storage+0x4a>
 8012172:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012176:	b163      	cbz	r3, 8012192 <uxr_reset_stream_storage+0x7e>
 8012178:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801217c:	2500      	movs	r5, #0
 801217e:	4630      	mov	r0, r6
 8012180:	f004 fdaa 	bl	8016cd8 <uxr_reset_input_reliable_stream>
 8012184:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012188:	3501      	adds	r5, #1
 801218a:	42ab      	cmp	r3, r5
 801218c:	f106 0618 	add.w	r6, r6, #24
 8012190:	d8f5      	bhi.n	801217e <uxr_reset_stream_storage+0x6a>
 8012192:	bd70      	pop	{r4, r5, r6, pc}

08012194 <uxr_add_output_best_effort_buffer>:
 8012194:	b510      	push	{r4, lr}
 8012196:	7c04      	ldrb	r4, [r0, #16]
 8012198:	f104 0c01 	add.w	ip, r4, #1
 801219c:	b082      	sub	sp, #8
 801219e:	f880 c010 	strb.w	ip, [r0, #16]
 80121a2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80121a6:	f004 ff17 	bl	8016fd8 <uxr_init_output_best_effort_stream>
 80121aa:	2201      	movs	r2, #1
 80121ac:	4611      	mov	r1, r2
 80121ae:	4620      	mov	r0, r4
 80121b0:	b002      	add	sp, #8
 80121b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121b6:	f7ff bf4f 	b.w	8012058 <uxr_stream_id>
 80121ba:	bf00      	nop

080121bc <uxr_add_output_reliable_buffer>:
 80121bc:	b510      	push	{r4, lr}
 80121be:	b084      	sub	sp, #16
 80121c0:	4684      	mov	ip, r0
 80121c2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80121c6:	9000      	str	r0, [sp, #0]
 80121c8:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80121cc:	2028      	movs	r0, #40	@ 0x28
 80121ce:	fb00 c004 	mla	r0, r0, r4, ip
 80121d2:	f104 0e01 	add.w	lr, r4, #1
 80121d6:	3018      	adds	r0, #24
 80121d8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80121dc:	f004 ff7a 	bl	80170d4 <uxr_init_output_reliable_stream>
 80121e0:	2201      	movs	r2, #1
 80121e2:	2102      	movs	r1, #2
 80121e4:	4620      	mov	r0, r4
 80121e6:	b004      	add	sp, #16
 80121e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121ec:	f7ff bf34 	b.w	8012058 <uxr_stream_id>

080121f0 <uxr_add_input_best_effort_buffer>:
 80121f0:	b510      	push	{r4, lr}
 80121f2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80121f6:	4603      	mov	r3, r0
 80121f8:	1c62      	adds	r2, r4, #1
 80121fa:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80121fe:	b082      	sub	sp, #8
 8012200:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012208:	f004 fcee 	bl	8016be8 <uxr_init_input_best_effort_stream>
 801220c:	2200      	movs	r2, #0
 801220e:	2101      	movs	r1, #1
 8012210:	4620      	mov	r0, r4
 8012212:	b002      	add	sp, #8
 8012214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012218:	f7ff bf1e 	b.w	8012058 <uxr_stream_id>

0801221c <uxr_add_input_reliable_buffer>:
 801221c:	b510      	push	{r4, lr}
 801221e:	b084      	sub	sp, #16
 8012220:	4684      	mov	ip, r0
 8012222:	9806      	ldr	r0, [sp, #24]
 8012224:	9000      	str	r0, [sp, #0]
 8012226:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801222a:	2018      	movs	r0, #24
 801222c:	fb00 c004 	mla	r0, r0, r4, ip
 8012230:	f104 0e01 	add.w	lr, r4, #1
 8012234:	3048      	adds	r0, #72	@ 0x48
 8012236:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801223a:	f004 fd21 	bl	8016c80 <uxr_init_input_reliable_stream>
 801223e:	2200      	movs	r2, #0
 8012240:	2102      	movs	r1, #2
 8012242:	4620      	mov	r0, r4
 8012244:	b004      	add	sp, #16
 8012246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801224a:	f7ff bf05 	b.w	8012058 <uxr_stream_id>
 801224e:	bf00      	nop

08012250 <uxr_get_output_best_effort_stream>:
 8012250:	7c03      	ldrb	r3, [r0, #16]
 8012252:	428b      	cmp	r3, r1
 8012254:	bf8c      	ite	hi
 8012256:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801225a:	2000      	movls	r0, #0
 801225c:	4770      	bx	lr
 801225e:	bf00      	nop

08012260 <uxr_get_output_reliable_stream>:
 8012260:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012264:	428b      	cmp	r3, r1
 8012266:	bf83      	ittte	hi
 8012268:	2328      	movhi	r3, #40	@ 0x28
 801226a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801226e:	3018      	addhi	r0, #24
 8012270:	2000      	movls	r0, #0
 8012272:	4770      	bx	lr

08012274 <uxr_get_input_best_effort_stream>:
 8012274:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012278:	428b      	cmp	r3, r1
 801227a:	bf86      	itte	hi
 801227c:	3121      	addhi	r1, #33	@ 0x21
 801227e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012282:	2000      	movls	r0, #0
 8012284:	4770      	bx	lr
 8012286:	bf00      	nop

08012288 <uxr_get_input_reliable_stream>:
 8012288:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801228c:	428b      	cmp	r3, r1
 801228e:	bf83      	ittte	hi
 8012290:	2318      	movhi	r3, #24
 8012292:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012296:	3048      	addhi	r0, #72	@ 0x48
 8012298:	2000      	movls	r0, #0
 801229a:	4770      	bx	lr

0801229c <uxr_output_streams_confirmed>:
 801229c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80122a0:	b183      	cbz	r3, 80122c4 <uxr_output_streams_confirmed+0x28>
 80122a2:	b570      	push	{r4, r5, r6, lr}
 80122a4:	4606      	mov	r6, r0
 80122a6:	f100 0518 	add.w	r5, r0, #24
 80122aa:	2400      	movs	r4, #0
 80122ac:	e001      	b.n	80122b2 <uxr_output_streams_confirmed+0x16>
 80122ae:	3528      	adds	r5, #40	@ 0x28
 80122b0:	b138      	cbz	r0, 80122c2 <uxr_output_streams_confirmed+0x26>
 80122b2:	4628      	mov	r0, r5
 80122b4:	f005 f9b6 	bl	8017624 <uxr_is_output_up_to_date>
 80122b8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80122bc:	3401      	adds	r4, #1
 80122be:	42a3      	cmp	r3, r4
 80122c0:	d8f5      	bhi.n	80122ae <uxr_output_streams_confirmed+0x12>
 80122c2:	bd70      	pop	{r4, r5, r6, pc}
 80122c4:	2001      	movs	r0, #1
 80122c6:	4770      	bx	lr

080122c8 <uxr_buffer_submessage_header>:
 80122c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ca:	4604      	mov	r4, r0
 80122cc:	460e      	mov	r6, r1
 80122ce:	2104      	movs	r1, #4
 80122d0:	4615      	mov	r5, r2
 80122d2:	461f      	mov	r7, r3
 80122d4:	f7fd fbf4 	bl	800fac0 <ucdr_align_to>
 80122d8:	2301      	movs	r3, #1
 80122da:	ea47 0203 	orr.w	r2, r7, r3
 80122de:	4631      	mov	r1, r6
 80122e0:	7523      	strb	r3, [r4, #20]
 80122e2:	4620      	mov	r0, r4
 80122e4:	462b      	mov	r3, r5
 80122e6:	f000 fa27 	bl	8012738 <uxr_serialize_submessage_header>
 80122ea:	4620      	mov	r0, r4
 80122ec:	f7fd fbfe 	bl	800faec <ucdr_buffer_remaining>
 80122f0:	42a8      	cmp	r0, r5
 80122f2:	bf34      	ite	cc
 80122f4:	2000      	movcc	r0, #0
 80122f6:	2001      	movcs	r0, #1
 80122f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122fa:	bf00      	nop

080122fc <uxr_read_submessage_header>:
 80122fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012300:	4604      	mov	r4, r0
 8012302:	460d      	mov	r5, r1
 8012304:	2104      	movs	r1, #4
 8012306:	4616      	mov	r6, r2
 8012308:	4698      	mov	r8, r3
 801230a:	f7fd fbd9 	bl	800fac0 <ucdr_align_to>
 801230e:	4620      	mov	r0, r4
 8012310:	f7fd fbec 	bl	800faec <ucdr_buffer_remaining>
 8012314:	2803      	cmp	r0, #3
 8012316:	bf8c      	ite	hi
 8012318:	2701      	movhi	r7, #1
 801231a:	2700      	movls	r7, #0
 801231c:	d802      	bhi.n	8012324 <uxr_read_submessage_header+0x28>
 801231e:	4638      	mov	r0, r7
 8012320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012324:	4633      	mov	r3, r6
 8012326:	4642      	mov	r2, r8
 8012328:	4620      	mov	r0, r4
 801232a:	4629      	mov	r1, r5
 801232c:	f000 fa18 	bl	8012760 <uxr_deserialize_submessage_header>
 8012330:	f898 3000 	ldrb.w	r3, [r8]
 8012334:	f003 0201 	and.w	r2, r3, #1
 8012338:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801233c:	f888 3000 	strb.w	r3, [r8]
 8012340:	7522      	strb	r2, [r4, #20]
 8012342:	4638      	mov	r0, r7
 8012344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012348 <uxr_submessage_padding>:
 8012348:	f010 0003 	ands.w	r0, r0, #3
 801234c:	bf18      	it	ne
 801234e:	f1c0 0004 	rsbne	r0, r0, #4
 8012352:	4770      	bx	lr

08012354 <uxr_millis>:
 8012354:	b510      	push	{r4, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	4669      	mov	r1, sp
 801235a:	2001      	movs	r0, #1
 801235c:	f7f0 fd04 	bl	8002d68 <clock_gettime>
 8012360:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012364:	4906      	ldr	r1, [pc, #24]	@ (8012380 <uxr_millis+0x2c>)
 8012366:	fba0 0301 	umull	r0, r3, r0, r1
 801236a:	1900      	adds	r0, r0, r4
 801236c:	fb01 3102 	mla	r1, r1, r2, r3
 8012370:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012374:	4a03      	ldr	r2, [pc, #12]	@ (8012384 <uxr_millis+0x30>)
 8012376:	2300      	movs	r3, #0
 8012378:	f7ee fbd0 	bl	8000b1c <__aeabi_ldivmod>
 801237c:	b004      	add	sp, #16
 801237e:	bd10      	pop	{r4, pc}
 8012380:	3b9aca00 	.word	0x3b9aca00
 8012384:	000f4240 	.word	0x000f4240

08012388 <uxr_nanos>:
 8012388:	b510      	push	{r4, lr}
 801238a:	b084      	sub	sp, #16
 801238c:	4669      	mov	r1, sp
 801238e:	2001      	movs	r0, #1
 8012390:	f7f0 fcea 	bl	8002d68 <clock_gettime>
 8012394:	4a06      	ldr	r2, [pc, #24]	@ (80123b0 <uxr_nanos+0x28>)
 8012396:	9800      	ldr	r0, [sp, #0]
 8012398:	9902      	ldr	r1, [sp, #8]
 801239a:	9c01      	ldr	r4, [sp, #4]
 801239c:	fba0 0302 	umull	r0, r3, r0, r2
 80123a0:	1840      	adds	r0, r0, r1
 80123a2:	fb02 3304 	mla	r3, r2, r4, r3
 80123a6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80123aa:	b004      	add	sp, #16
 80123ac:	bd10      	pop	{r4, pc}
 80123ae:	bf00      	nop
 80123b0:	3b9aca00 	.word	0x3b9aca00

080123b4 <on_full_output_buffer_fragmented>:
 80123b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123b8:	460c      	mov	r4, r1
 80123ba:	b08a      	sub	sp, #40	@ 0x28
 80123bc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80123c0:	4606      	mov	r6, r0
 80123c2:	f104 0008 	add.w	r0, r4, #8
 80123c6:	f7ff ff4b 	bl	8012260 <uxr_get_output_reliable_stream>
 80123ca:	4605      	mov	r5, r0
 80123cc:	f005 f934 	bl	8017638 <get_available_free_slots>
 80123d0:	b968      	cbnz	r0, 80123ee <on_full_output_buffer_fragmented+0x3a>
 80123d2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80123d6:	4620      	mov	r0, r4
 80123d8:	4798      	blx	r3
 80123da:	b918      	cbnz	r0, 80123e4 <on_full_output_buffer_fragmented+0x30>
 80123dc:	2001      	movs	r0, #1
 80123de:	b00a      	add	sp, #40	@ 0x28
 80123e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123e4:	4628      	mov	r0, r5
 80123e6:	f005 f927 	bl	8017638 <get_available_free_slots>
 80123ea:	2800      	cmp	r0, #0
 80123ec:	d0f6      	beq.n	80123dc <on_full_output_buffer_fragmented+0x28>
 80123ee:	8929      	ldrh	r1, [r5, #8]
 80123f0:	89eb      	ldrh	r3, [r5, #14]
 80123f2:	7b28      	ldrb	r0, [r5, #12]
 80123f4:	686a      	ldr	r2, [r5, #4]
 80123f6:	fbb2 f8f1 	udiv	r8, r2, r1
 80123fa:	fbb3 f2f1 	udiv	r2, r3, r1
 80123fe:	fb01 3112 	mls	r1, r1, r2, r3
 8012402:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8012406:	b289      	uxth	r1, r1
 8012408:	fb08 f101 	mul.w	r1, r8, r1
 801240c:	30fc      	adds	r0, #252	@ 0xfc
 801240e:	f1a8 0804 	sub.w	r8, r8, #4
 8012412:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8012416:	4440      	add	r0, r8
 8012418:	b287      	uxth	r7, r0
 801241a:	1bdb      	subs	r3, r3, r7
 801241c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8012420:	682b      	ldr	r3, [r5, #0]
 8012422:	3104      	adds	r1, #4
 8012424:	4419      	add	r1, r3
 8012426:	4642      	mov	r2, r8
 8012428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801242c:	9300      	str	r3, [sp, #0]
 801242e:	a802      	add	r0, sp, #8
 8012430:	2300      	movs	r3, #0
 8012432:	f7fd fb19 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 8012436:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801243a:	f102 0308 	add.w	r3, r2, #8
 801243e:	4543      	cmp	r3, r8
 8012440:	d928      	bls.n	8012494 <on_full_output_buffer_fragmented+0xe0>
 8012442:	463a      	mov	r2, r7
 8012444:	2300      	movs	r3, #0
 8012446:	210d      	movs	r1, #13
 8012448:	a802      	add	r0, sp, #8
 801244a:	f7ff ff3d 	bl	80122c8 <uxr_buffer_submessage_header>
 801244e:	8929      	ldrh	r1, [r5, #8]
 8012450:	89eb      	ldrh	r3, [r5, #14]
 8012452:	fbb3 f2f1 	udiv	r2, r3, r1
 8012456:	fb01 3312 	mls	r3, r1, r2, r3
 801245a:	b29b      	uxth	r3, r3
 801245c:	686a      	ldr	r2, [r5, #4]
 801245e:	fbb2 f2f1 	udiv	r2, r2, r1
 8012462:	fb02 f303 	mul.w	r3, r2, r3
 8012466:	682a      	ldr	r2, [r5, #0]
 8012468:	f842 8003 	str.w	r8, [r2, r3]
 801246c:	89e8      	ldrh	r0, [r5, #14]
 801246e:	2101      	movs	r1, #1
 8012470:	f005 f902 	bl	8017678 <uxr_seq_num_add>
 8012474:	9904      	ldr	r1, [sp, #16]
 8012476:	9a03      	ldr	r2, [sp, #12]
 8012478:	81e8      	strh	r0, [r5, #14]
 801247a:	1a52      	subs	r2, r2, r1
 801247c:	4630      	mov	r0, r6
 801247e:	f7fd fb05 	bl	800fa8c <ucdr_init_buffer>
 8012482:	4630      	mov	r0, r6
 8012484:	490f      	ldr	r1, [pc, #60]	@ (80124c4 <on_full_output_buffer_fragmented+0x110>)
 8012486:	4622      	mov	r2, r4
 8012488:	f7fd fad4 	bl	800fa34 <ucdr_set_on_full_buffer_callback>
 801248c:	2000      	movs	r0, #0
 801248e:	b00a      	add	sp, #40	@ 0x28
 8012490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012494:	b292      	uxth	r2, r2
 8012496:	2302      	movs	r3, #2
 8012498:	210d      	movs	r1, #13
 801249a:	a802      	add	r0, sp, #8
 801249c:	f7ff ff14 	bl	80122c8 <uxr_buffer_submessage_header>
 80124a0:	8928      	ldrh	r0, [r5, #8]
 80124a2:	89eb      	ldrh	r3, [r5, #14]
 80124a4:	fbb3 f1f0 	udiv	r1, r3, r0
 80124a8:	fb00 3311 	mls	r3, r0, r1, r3
 80124ac:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80124b0:	6869      	ldr	r1, [r5, #4]
 80124b2:	fbb1 f1f0 	udiv	r1, r1, r0
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	fb01 f303 	mul.w	r3, r1, r3
 80124bc:	6829      	ldr	r1, [r5, #0]
 80124be:	3208      	adds	r2, #8
 80124c0:	50ca      	str	r2, [r1, r3]
 80124c2:	e7d3      	b.n	801246c <on_full_output_buffer_fragmented+0xb8>
 80124c4:	080123b5 	.word	0x080123b5

080124c8 <uxr_prepare_output_stream>:
 80124c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124ca:	b087      	sub	sp, #28
 80124cc:	2707      	movs	r7, #7
 80124ce:	9202      	str	r2, [sp, #8]
 80124d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80124d2:	9103      	str	r1, [sp, #12]
 80124d4:	2500      	movs	r5, #0
 80124d6:	3204      	adds	r2, #4
 80124d8:	e9cd 7500 	strd	r7, r5, [sp]
 80124dc:	461c      	mov	r4, r3
 80124de:	4606      	mov	r6, r0
 80124e0:	f7fe ffc2 	bl	8011468 <uxr_prepare_stream_to_write_submessage>
 80124e4:	f080 0201 	eor.w	r2, r0, #1
 80124e8:	b2d2      	uxtb	r2, r2
 80124ea:	75a2      	strb	r2, [r4, #22]
 80124ec:	b112      	cbz	r2, 80124f4 <uxr_prepare_output_stream+0x2c>
 80124ee:	4628      	mov	r0, r5
 80124f0:	b007      	add	sp, #28
 80124f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124f4:	aa05      	add	r2, sp, #20
 80124f6:	9902      	ldr	r1, [sp, #8]
 80124f8:	4630      	mov	r0, r6
 80124fa:	f7ff f8eb 	bl	80116d4 <uxr_init_base_object_request>
 80124fe:	a905      	add	r1, sp, #20
 8012500:	4605      	mov	r5, r0
 8012502:	4620      	mov	r0, r4
 8012504:	f001 f8a0 	bl	8013648 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012508:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801250c:	69a6      	ldr	r6, [r4, #24]
 801250e:	69e7      	ldr	r7, [r4, #28]
 8012510:	1a52      	subs	r2, r2, r1
 8012512:	4620      	mov	r0, r4
 8012514:	f7fd faba 	bl	800fa8c <ucdr_init_buffer>
 8012518:	4620      	mov	r0, r4
 801251a:	463a      	mov	r2, r7
 801251c:	4631      	mov	r1, r6
 801251e:	f7fd fa89 	bl	800fa34 <ucdr_set_on_full_buffer_callback>
 8012522:	4628      	mov	r0, r5
 8012524:	b007      	add	sp, #28
 8012526:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012528 <uxr_prepare_output_stream_fragmented>:
 8012528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801252c:	b091      	sub	sp, #68	@ 0x44
 801252e:	4605      	mov	r5, r0
 8012530:	9105      	str	r1, [sp, #20]
 8012532:	3008      	adds	r0, #8
 8012534:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012538:	461e      	mov	r6, r3
 801253a:	9204      	str	r2, [sp, #16]
 801253c:	f7ff fe90 	bl	8012260 <uxr_get_output_reliable_stream>
 8012540:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012544:	2b01      	cmp	r3, #1
 8012546:	f000 8091 	beq.w	801266c <uxr_prepare_output_stream_fragmented+0x144>
 801254a:	4604      	mov	r4, r0
 801254c:	2800      	cmp	r0, #0
 801254e:	f000 808d 	beq.w	801266c <uxr_prepare_output_stream_fragmented+0x144>
 8012552:	f005 f871 	bl	8017638 <get_available_free_slots>
 8012556:	2800      	cmp	r0, #0
 8012558:	f000 8083 	beq.w	8012662 <uxr_prepare_output_stream_fragmented+0x13a>
 801255c:	8922      	ldrh	r2, [r4, #8]
 801255e:	89e7      	ldrh	r7, [r4, #14]
 8012560:	fbb7 f9f2 	udiv	r9, r7, r2
 8012564:	fb02 7919 	mls	r9, r2, r9, r7
 8012568:	fa1f f989 	uxth.w	r9, r9
 801256c:	6863      	ldr	r3, [r4, #4]
 801256e:	fbb3 f2f2 	udiv	r2, r3, r2
 8012572:	6823      	ldr	r3, [r4, #0]
 8012574:	9203      	str	r2, [sp, #12]
 8012576:	fb02 f909 	mul.w	r9, r2, r9
 801257a:	f109 0904 	add.w	r9, r9, #4
 801257e:	4499      	add	r9, r3
 8012580:	7b23      	ldrb	r3, [r4, #12]
 8012582:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012586:	4543      	cmp	r3, r8
 8012588:	f1a2 0b04 	sub.w	fp, r2, #4
 801258c:	d37a      	bcc.n	8012684 <uxr_prepare_output_stream_fragmented+0x15c>
 801258e:	f1ab 0a04 	sub.w	sl, fp, #4
 8012592:	ebaa 0a03 	sub.w	sl, sl, r3
 8012596:	465a      	mov	r2, fp
 8012598:	2300      	movs	r3, #0
 801259a:	4649      	mov	r1, r9
 801259c:	a808      	add	r0, sp, #32
 801259e:	f8cd 8000 	str.w	r8, [sp]
 80125a2:	f7fd fa61 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 80125a6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80125a8:	fa1f fa8a 	uxth.w	sl, sl
 80125ac:	4652      	mov	r2, sl
 80125ae:	f103 0a08 	add.w	sl, r3, #8
 80125b2:	45da      	cmp	sl, fp
 80125b4:	bf34      	ite	cc
 80125b6:	2302      	movcc	r3, #2
 80125b8:	2300      	movcs	r3, #0
 80125ba:	210d      	movs	r1, #13
 80125bc:	a808      	add	r0, sp, #32
 80125be:	f7ff fe83 	bl	80122c8 <uxr_buffer_submessage_header>
 80125c2:	8921      	ldrh	r1, [r4, #8]
 80125c4:	fbb7 f2f1 	udiv	r2, r7, r1
 80125c8:	fb01 7212 	mls	r2, r1, r2, r7
 80125cc:	b292      	uxth	r2, r2
 80125ce:	6863      	ldr	r3, [r4, #4]
 80125d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80125d4:	fb02 f303 	mul.w	r3, r2, r3
 80125d8:	6822      	ldr	r2, [r4, #0]
 80125da:	4638      	mov	r0, r7
 80125dc:	f842 b003 	str.w	fp, [r2, r3]
 80125e0:	2101      	movs	r1, #1
 80125e2:	f005 f849 	bl	8017678 <uxr_seq_num_add>
 80125e6:	9b03      	ldr	r3, [sp, #12]
 80125e8:	f108 0104 	add.w	r1, r8, #4
 80125ec:	f1a3 0208 	sub.w	r2, r3, #8
 80125f0:	eba2 0208 	sub.w	r2, r2, r8
 80125f4:	4449      	add	r1, r9
 80125f6:	4607      	mov	r7, r0
 80125f8:	4630      	mov	r0, r6
 80125fa:	f7fd fa47 	bl	800fa8c <ucdr_init_buffer>
 80125fe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012600:	81e7      	strh	r7, [r4, #14]
 8012602:	1d1a      	adds	r2, r3, #4
 8012604:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012608:	bf28      	it	cs
 801260a:	2200      	movcs	r2, #0
 801260c:	2300      	movs	r3, #0
 801260e:	b292      	uxth	r2, r2
 8012610:	2107      	movs	r1, #7
 8012612:	4630      	mov	r0, r6
 8012614:	f7ff fe58 	bl	80122c8 <uxr_buffer_submessage_header>
 8012618:	9904      	ldr	r1, [sp, #16]
 801261a:	aa07      	add	r2, sp, #28
 801261c:	4628      	mov	r0, r5
 801261e:	f7ff f859 	bl	80116d4 <uxr_init_base_object_request>
 8012622:	4604      	mov	r4, r0
 8012624:	b318      	cbz	r0, 801266e <uxr_prepare_output_stream_fragmented+0x146>
 8012626:	a907      	add	r1, sp, #28
 8012628:	4630      	mov	r0, r6
 801262a:	f001 f80d 	bl	8013648 <uxr_serialize_WRITE_DATA_Payload_Data>
 801262e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012632:	4630      	mov	r0, r6
 8012634:	1a52      	subs	r2, r2, r1
 8012636:	f7fd fa29 	bl	800fa8c <ucdr_init_buffer>
 801263a:	9b05      	ldr	r3, [sp, #20]
 801263c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012640:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012642:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012646:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012648:	491b      	ldr	r1, [pc, #108]	@ (80126b8 <uxr_prepare_output_stream_fragmented+0x190>)
 801264a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801264e:	4630      	mov	r0, r6
 8012650:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012654:	462a      	mov	r2, r5
 8012656:	f7fd f9ed 	bl	800fa34 <ucdr_set_on_full_buffer_callback>
 801265a:	4620      	mov	r0, r4
 801265c:	b011      	add	sp, #68	@ 0x44
 801265e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012662:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8012664:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012666:	4628      	mov	r0, r5
 8012668:	4798      	blx	r3
 801266a:	b920      	cbnz	r0, 8012676 <uxr_prepare_output_stream_fragmented+0x14e>
 801266c:	2400      	movs	r4, #0
 801266e:	4620      	mov	r0, r4
 8012670:	b011      	add	sp, #68	@ 0x44
 8012672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012676:	4620      	mov	r0, r4
 8012678:	f004 ffde 	bl	8017638 <get_available_free_slots>
 801267c:	2800      	cmp	r0, #0
 801267e:	f47f af6d 	bne.w	801255c <uxr_prepare_output_stream_fragmented+0x34>
 8012682:	e7f3      	b.n	801266c <uxr_prepare_output_stream_fragmented+0x144>
 8012684:	4638      	mov	r0, r7
 8012686:	2101      	movs	r1, #1
 8012688:	f004 fff6 	bl	8017678 <uxr_seq_num_add>
 801268c:	8921      	ldrh	r1, [r4, #8]
 801268e:	fbb0 f2f1 	udiv	r2, r0, r1
 8012692:	fb01 0912 	mls	r9, r1, r2, r0
 8012696:	fa1f f289 	uxth.w	r2, r9
 801269a:	6863      	ldr	r3, [r4, #4]
 801269c:	fbb3 f9f1 	udiv	r9, r3, r1
 80126a0:	6823      	ldr	r3, [r4, #0]
 80126a2:	fb02 f909 	mul.w	r9, r2, r9
 80126a6:	f109 0904 	add.w	r9, r9, #4
 80126aa:	4499      	add	r9, r3
 80126ac:	4607      	mov	r7, r0
 80126ae:	7b23      	ldrb	r3, [r4, #12]
 80126b0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80126b4:	e76b      	b.n	801258e <uxr_prepare_output_stream_fragmented+0x66>
 80126b6:	bf00      	nop
 80126b8:	080123b5 	.word	0x080123b5

080126bc <uxr_serialize_message_header>:
 80126bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126be:	b083      	sub	sp, #12
 80126c0:	4616      	mov	r6, r2
 80126c2:	4604      	mov	r4, r0
 80126c4:	9301      	str	r3, [sp, #4]
 80126c6:	460d      	mov	r5, r1
 80126c8:	9f08      	ldr	r7, [sp, #32]
 80126ca:	f7fc fa33 	bl	800eb34 <ucdr_serialize_uint8_t>
 80126ce:	4631      	mov	r1, r6
 80126d0:	4620      	mov	r0, r4
 80126d2:	f7fc fa2f 	bl	800eb34 <ucdr_serialize_uint8_t>
 80126d6:	9a01      	ldr	r2, [sp, #4]
 80126d8:	2101      	movs	r1, #1
 80126da:	4620      	mov	r0, r4
 80126dc:	f7fc fad6 	bl	800ec8c <ucdr_serialize_endian_uint16_t>
 80126e0:	062b      	lsls	r3, r5, #24
 80126e2:	d501      	bpl.n	80126e8 <uxr_serialize_message_header+0x2c>
 80126e4:	b003      	add	sp, #12
 80126e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126e8:	2204      	movs	r2, #4
 80126ea:	4639      	mov	r1, r7
 80126ec:	4620      	mov	r0, r4
 80126ee:	b003      	add	sp, #12
 80126f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80126f4:	f004 b940 	b.w	8016978 <ucdr_serialize_array_uint8_t>

080126f8 <uxr_deserialize_message_header>:
 80126f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126fa:	b083      	sub	sp, #12
 80126fc:	4616      	mov	r6, r2
 80126fe:	4604      	mov	r4, r0
 8012700:	9301      	str	r3, [sp, #4]
 8012702:	460d      	mov	r5, r1
 8012704:	9f08      	ldr	r7, [sp, #32]
 8012706:	f7fc fa2b 	bl	800eb60 <ucdr_deserialize_uint8_t>
 801270a:	4631      	mov	r1, r6
 801270c:	4620      	mov	r0, r4
 801270e:	f7fc fa27 	bl	800eb60 <ucdr_deserialize_uint8_t>
 8012712:	9a01      	ldr	r2, [sp, #4]
 8012714:	2101      	movs	r1, #1
 8012716:	4620      	mov	r0, r4
 8012718:	f7fc fbac 	bl	800ee74 <ucdr_deserialize_endian_uint16_t>
 801271c:	f995 3000 	ldrsb.w	r3, [r5]
 8012720:	2b00      	cmp	r3, #0
 8012722:	da01      	bge.n	8012728 <uxr_deserialize_message_header+0x30>
 8012724:	b003      	add	sp, #12
 8012726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012728:	2204      	movs	r2, #4
 801272a:	4639      	mov	r1, r7
 801272c:	4620      	mov	r0, r4
 801272e:	b003      	add	sp, #12
 8012730:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012734:	f004 b984 	b.w	8016a40 <ucdr_deserialize_array_uint8_t>

08012738 <uxr_serialize_submessage_header>:
 8012738:	b530      	push	{r4, r5, lr}
 801273a:	b083      	sub	sp, #12
 801273c:	4615      	mov	r5, r2
 801273e:	4604      	mov	r4, r0
 8012740:	9301      	str	r3, [sp, #4]
 8012742:	f7fc f9f7 	bl	800eb34 <ucdr_serialize_uint8_t>
 8012746:	4629      	mov	r1, r5
 8012748:	4620      	mov	r0, r4
 801274a:	f7fc f9f3 	bl	800eb34 <ucdr_serialize_uint8_t>
 801274e:	9a01      	ldr	r2, [sp, #4]
 8012750:	2101      	movs	r1, #1
 8012752:	4620      	mov	r0, r4
 8012754:	b003      	add	sp, #12
 8012756:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801275a:	f7fc ba97 	b.w	800ec8c <ucdr_serialize_endian_uint16_t>
 801275e:	bf00      	nop

08012760 <uxr_deserialize_submessage_header>:
 8012760:	b530      	push	{r4, r5, lr}
 8012762:	b083      	sub	sp, #12
 8012764:	4615      	mov	r5, r2
 8012766:	4604      	mov	r4, r0
 8012768:	9301      	str	r3, [sp, #4]
 801276a:	f7fc f9f9 	bl	800eb60 <ucdr_deserialize_uint8_t>
 801276e:	4629      	mov	r1, r5
 8012770:	4620      	mov	r0, r4
 8012772:	f7fc f9f5 	bl	800eb60 <ucdr_deserialize_uint8_t>
 8012776:	9a01      	ldr	r2, [sp, #4]
 8012778:	2101      	movs	r1, #1
 801277a:	4620      	mov	r0, r4
 801277c:	b003      	add	sp, #12
 801277e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012782:	f7fc bb77 	b.w	800ee74 <ucdr_deserialize_endian_uint16_t>
 8012786:	bf00      	nop

08012788 <uxr_serialize_CLIENT_Representation>:
 8012788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801278c:	2204      	movs	r2, #4
 801278e:	460e      	mov	r6, r1
 8012790:	4605      	mov	r5, r0
 8012792:	f004 f8f1 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8012796:	2202      	movs	r2, #2
 8012798:	4607      	mov	r7, r0
 801279a:	1d31      	adds	r1, r6, #4
 801279c:	4628      	mov	r0, r5
 801279e:	f004 f8eb 	bl	8016978 <ucdr_serialize_array_uint8_t>
 80127a2:	4038      	ands	r0, r7
 80127a4:	2202      	movs	r2, #2
 80127a6:	1db1      	adds	r1, r6, #6
 80127a8:	b2c7      	uxtb	r7, r0
 80127aa:	4628      	mov	r0, r5
 80127ac:	f004 f8e4 	bl	8016978 <ucdr_serialize_array_uint8_t>
 80127b0:	2204      	movs	r2, #4
 80127b2:	4007      	ands	r7, r0
 80127b4:	f106 0108 	add.w	r1, r6, #8
 80127b8:	4628      	mov	r0, r5
 80127ba:	f004 f8dd 	bl	8016978 <ucdr_serialize_array_uint8_t>
 80127be:	7b31      	ldrb	r1, [r6, #12]
 80127c0:	4007      	ands	r7, r0
 80127c2:	4628      	mov	r0, r5
 80127c4:	f7fc f9b6 	bl	800eb34 <ucdr_serialize_uint8_t>
 80127c8:	7b71      	ldrb	r1, [r6, #13]
 80127ca:	4007      	ands	r7, r0
 80127cc:	4628      	mov	r0, r5
 80127ce:	f7fc f983 	bl	800ead8 <ucdr_serialize_bool>
 80127d2:	7b73      	ldrb	r3, [r6, #13]
 80127d4:	ea07 0800 	and.w	r8, r7, r0
 80127d8:	b93b      	cbnz	r3, 80127ea <uxr_serialize_CLIENT_Representation+0x62>
 80127da:	8bb1      	ldrh	r1, [r6, #28]
 80127dc:	4628      	mov	r0, r5
 80127de:	f7fc f9d5 	bl	800eb8c <ucdr_serialize_uint16_t>
 80127e2:	ea08 0000 	and.w	r0, r8, r0
 80127e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127ea:	6931      	ldr	r1, [r6, #16]
 80127ec:	4628      	mov	r0, r5
 80127ee:	f7fc fbb7 	bl	800ef60 <ucdr_serialize_uint32_t>
 80127f2:	6933      	ldr	r3, [r6, #16]
 80127f4:	b1e3      	cbz	r3, 8012830 <uxr_serialize_CLIENT_Representation+0xa8>
 80127f6:	b1c0      	cbz	r0, 801282a <uxr_serialize_CLIENT_Representation+0xa2>
 80127f8:	4637      	mov	r7, r6
 80127fa:	f04f 0900 	mov.w	r9, #0
 80127fe:	e001      	b.n	8012804 <uxr_serialize_CLIENT_Representation+0x7c>
 8012800:	3708      	adds	r7, #8
 8012802:	b194      	cbz	r4, 801282a <uxr_serialize_CLIENT_Representation+0xa2>
 8012804:	6979      	ldr	r1, [r7, #20]
 8012806:	4628      	mov	r0, r5
 8012808:	f004 f9d6 	bl	8016bb8 <ucdr_serialize_string>
 801280c:	69b9      	ldr	r1, [r7, #24]
 801280e:	4604      	mov	r4, r0
 8012810:	4628      	mov	r0, r5
 8012812:	f004 f9d1 	bl	8016bb8 <ucdr_serialize_string>
 8012816:	6933      	ldr	r3, [r6, #16]
 8012818:	f109 0901 	add.w	r9, r9, #1
 801281c:	4004      	ands	r4, r0
 801281e:	4599      	cmp	r9, r3
 8012820:	b2e4      	uxtb	r4, r4
 8012822:	d3ed      	bcc.n	8012800 <uxr_serialize_CLIENT_Representation+0x78>
 8012824:	ea08 0804 	and.w	r8, r8, r4
 8012828:	e7d7      	b.n	80127da <uxr_serialize_CLIENT_Representation+0x52>
 801282a:	f04f 0800 	mov.w	r8, #0
 801282e:	e7d4      	b.n	80127da <uxr_serialize_CLIENT_Representation+0x52>
 8012830:	ea08 0800 	and.w	r8, r8, r0
 8012834:	e7d1      	b.n	80127da <uxr_serialize_CLIENT_Representation+0x52>
 8012836:	bf00      	nop

08012838 <uxr_deserialize_CLIENT_Representation>:
 8012838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801283c:	2204      	movs	r2, #4
 801283e:	460c      	mov	r4, r1
 8012840:	4605      	mov	r5, r0
 8012842:	f004 f8fd 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 8012846:	2202      	movs	r2, #2
 8012848:	4607      	mov	r7, r0
 801284a:	1d21      	adds	r1, r4, #4
 801284c:	4628      	mov	r0, r5
 801284e:	f004 f8f7 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 8012852:	4038      	ands	r0, r7
 8012854:	2202      	movs	r2, #2
 8012856:	1da1      	adds	r1, r4, #6
 8012858:	b2c6      	uxtb	r6, r0
 801285a:	4628      	mov	r0, r5
 801285c:	f004 f8f0 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 8012860:	2204      	movs	r2, #4
 8012862:	4006      	ands	r6, r0
 8012864:	f104 0108 	add.w	r1, r4, #8
 8012868:	4628      	mov	r0, r5
 801286a:	f004 f8e9 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 801286e:	f104 010c 	add.w	r1, r4, #12
 8012872:	4006      	ands	r6, r0
 8012874:	4628      	mov	r0, r5
 8012876:	f7fc f973 	bl	800eb60 <ucdr_deserialize_uint8_t>
 801287a:	f104 010d 	add.w	r1, r4, #13
 801287e:	ea06 0700 	and.w	r7, r6, r0
 8012882:	4628      	mov	r0, r5
 8012884:	f7fc f93e 	bl	800eb04 <ucdr_deserialize_bool>
 8012888:	7b63      	ldrb	r3, [r4, #13]
 801288a:	4007      	ands	r7, r0
 801288c:	b93b      	cbnz	r3, 801289e <uxr_deserialize_CLIENT_Representation+0x66>
 801288e:	f104 011c 	add.w	r1, r4, #28
 8012892:	4628      	mov	r0, r5
 8012894:	f7fc fa7a 	bl	800ed8c <ucdr_deserialize_uint16_t>
 8012898:	4038      	ands	r0, r7
 801289a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801289e:	f104 0110 	add.w	r1, r4, #16
 80128a2:	4628      	mov	r0, r5
 80128a4:	f7fc fc8c 	bl	800f1c0 <ucdr_deserialize_uint32_t>
 80128a8:	6923      	ldr	r3, [r4, #16]
 80128aa:	2b01      	cmp	r3, #1
 80128ac:	d903      	bls.n	80128b6 <uxr_deserialize_CLIENT_Representation+0x7e>
 80128ae:	2301      	movs	r3, #1
 80128b0:	75ab      	strb	r3, [r5, #22]
 80128b2:	2700      	movs	r7, #0
 80128b4:	e7eb      	b.n	801288e <uxr_deserialize_CLIENT_Representation+0x56>
 80128b6:	b30b      	cbz	r3, 80128fc <uxr_deserialize_CLIENT_Representation+0xc4>
 80128b8:	2800      	cmp	r0, #0
 80128ba:	d0fa      	beq.n	80128b2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80128bc:	46a0      	mov	r8, r4
 80128be:	f04f 0900 	mov.w	r9, #0
 80128c2:	e001      	b.n	80128c8 <uxr_deserialize_CLIENT_Representation+0x90>
 80128c4:	2e00      	cmp	r6, #0
 80128c6:	d0f4      	beq.n	80128b2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80128c8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80128cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80128d0:	4628      	mov	r0, r5
 80128d2:	f004 f981 	bl	8016bd8 <ucdr_deserialize_string>
 80128d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80128da:	4606      	mov	r6, r0
 80128dc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80128e0:	4628      	mov	r0, r5
 80128e2:	f004 f979 	bl	8016bd8 <ucdr_deserialize_string>
 80128e6:	6923      	ldr	r3, [r4, #16]
 80128e8:	f109 0901 	add.w	r9, r9, #1
 80128ec:	4006      	ands	r6, r0
 80128ee:	4599      	cmp	r9, r3
 80128f0:	f108 0808 	add.w	r8, r8, #8
 80128f4:	b2f6      	uxtb	r6, r6
 80128f6:	d3e5      	bcc.n	80128c4 <uxr_deserialize_CLIENT_Representation+0x8c>
 80128f8:	4037      	ands	r7, r6
 80128fa:	e7c8      	b.n	801288e <uxr_deserialize_CLIENT_Representation+0x56>
 80128fc:	4007      	ands	r7, r0
 80128fe:	e7c6      	b.n	801288e <uxr_deserialize_CLIENT_Representation+0x56>

08012900 <uxr_serialize_AGENT_Representation>:
 8012900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012904:	2204      	movs	r2, #4
 8012906:	460f      	mov	r7, r1
 8012908:	4605      	mov	r5, r0
 801290a:	f004 f835 	bl	8016978 <ucdr_serialize_array_uint8_t>
 801290e:	2202      	movs	r2, #2
 8012910:	4604      	mov	r4, r0
 8012912:	1d39      	adds	r1, r7, #4
 8012914:	4628      	mov	r0, r5
 8012916:	f004 f82f 	bl	8016978 <ucdr_serialize_array_uint8_t>
 801291a:	4020      	ands	r0, r4
 801291c:	2202      	movs	r2, #2
 801291e:	1db9      	adds	r1, r7, #6
 8012920:	b2c4      	uxtb	r4, r0
 8012922:	4628      	mov	r0, r5
 8012924:	f004 f828 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8012928:	7a39      	ldrb	r1, [r7, #8]
 801292a:	4004      	ands	r4, r0
 801292c:	4628      	mov	r0, r5
 801292e:	f7fc f8d3 	bl	800ead8 <ucdr_serialize_bool>
 8012932:	7a3b      	ldrb	r3, [r7, #8]
 8012934:	ea00 0804 	and.w	r8, r0, r4
 8012938:	b913      	cbnz	r3, 8012940 <uxr_serialize_AGENT_Representation+0x40>
 801293a:	4640      	mov	r0, r8
 801293c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012940:	68f9      	ldr	r1, [r7, #12]
 8012942:	4628      	mov	r0, r5
 8012944:	f7fc fb0c 	bl	800ef60 <ucdr_serialize_uint32_t>
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	b303      	cbz	r3, 801298e <uxr_serialize_AGENT_Representation+0x8e>
 801294c:	b1d0      	cbz	r0, 8012984 <uxr_serialize_AGENT_Representation+0x84>
 801294e:	463e      	mov	r6, r7
 8012950:	f04f 0900 	mov.w	r9, #0
 8012954:	e001      	b.n	801295a <uxr_serialize_AGENT_Representation+0x5a>
 8012956:	3608      	adds	r6, #8
 8012958:	b1a4      	cbz	r4, 8012984 <uxr_serialize_AGENT_Representation+0x84>
 801295a:	6931      	ldr	r1, [r6, #16]
 801295c:	4628      	mov	r0, r5
 801295e:	f004 f92b 	bl	8016bb8 <ucdr_serialize_string>
 8012962:	6971      	ldr	r1, [r6, #20]
 8012964:	4604      	mov	r4, r0
 8012966:	4628      	mov	r0, r5
 8012968:	f004 f926 	bl	8016bb8 <ucdr_serialize_string>
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	f109 0901 	add.w	r9, r9, #1
 8012972:	4004      	ands	r4, r0
 8012974:	4599      	cmp	r9, r3
 8012976:	b2e4      	uxtb	r4, r4
 8012978:	d3ed      	bcc.n	8012956 <uxr_serialize_AGENT_Representation+0x56>
 801297a:	ea08 0804 	and.w	r8, r8, r4
 801297e:	4640      	mov	r0, r8
 8012980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012984:	f04f 0800 	mov.w	r8, #0
 8012988:	4640      	mov	r0, r8
 801298a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801298e:	ea08 0800 	and.w	r8, r8, r0
 8012992:	e7d2      	b.n	801293a <uxr_serialize_AGENT_Representation+0x3a>

08012994 <uxr_serialize_DATAWRITER_Representation>:
 8012994:	b570      	push	{r4, r5, r6, lr}
 8012996:	460d      	mov	r5, r1
 8012998:	7809      	ldrb	r1, [r1, #0]
 801299a:	4606      	mov	r6, r0
 801299c:	f7fc f8ca 	bl	800eb34 <ucdr_serialize_uint8_t>
 80129a0:	4604      	mov	r4, r0
 80129a2:	b130      	cbz	r0, 80129b2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80129a4:	782b      	ldrb	r3, [r5, #0]
 80129a6:	2b02      	cmp	r3, #2
 80129a8:	d00c      	beq.n	80129c4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80129aa:	2b03      	cmp	r3, #3
 80129ac:	d010      	beq.n	80129d0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80129ae:	2b01      	cmp	r3, #1
 80129b0:	d008      	beq.n	80129c4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80129b2:	2202      	movs	r2, #2
 80129b4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80129b8:	4630      	mov	r0, r6
 80129ba:	f003 ffdd 	bl	8016978 <ucdr_serialize_array_uint8_t>
 80129be:	4020      	ands	r0, r4
 80129c0:	b2c0      	uxtb	r0, r0
 80129c2:	bd70      	pop	{r4, r5, r6, pc}
 80129c4:	6869      	ldr	r1, [r5, #4]
 80129c6:	4630      	mov	r0, r6
 80129c8:	f004 f8f6 	bl	8016bb8 <ucdr_serialize_string>
 80129cc:	4604      	mov	r4, r0
 80129ce:	e7f0      	b.n	80129b2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80129d0:	4629      	mov	r1, r5
 80129d2:	4630      	mov	r0, r6
 80129d4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80129d8:	3104      	adds	r1, #4
 80129da:	f004 f8c1 	bl	8016b60 <ucdr_serialize_sequence_uint8_t>
 80129de:	4604      	mov	r4, r0
 80129e0:	e7e7      	b.n	80129b2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80129e2:	bf00      	nop

080129e4 <uxr_serialize_ObjectVariant.part.0>:
 80129e4:	b570      	push	{r4, r5, r6, lr}
 80129e6:	780b      	ldrb	r3, [r1, #0]
 80129e8:	3b01      	subs	r3, #1
 80129ea:	460c      	mov	r4, r1
 80129ec:	4605      	mov	r5, r0
 80129ee:	2b0d      	cmp	r3, #13
 80129f0:	d854      	bhi.n	8012a9c <uxr_serialize_ObjectVariant.part.0+0xb8>
 80129f2:	e8df f003 	tbb	[pc, r3]
 80129f6:	0730      	.short	0x0730
 80129f8:	07071b1b 	.word	0x07071b1b
 80129fc:	0c530707 	.word	0x0c530707
 8012a00:	494e0c0c 	.word	0x494e0c0c
 8012a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a08:	3104      	adds	r1, #4
 8012a0a:	f7ff bfc3 	b.w	8012994 <uxr_serialize_DATAWRITER_Representation>
 8012a0e:	7909      	ldrb	r1, [r1, #4]
 8012a10:	f7fc f890 	bl	800eb34 <ucdr_serialize_uint8_t>
 8012a14:	b1e8      	cbz	r0, 8012a52 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8012a16:	7923      	ldrb	r3, [r4, #4]
 8012a18:	2b01      	cmp	r3, #1
 8012a1a:	d001      	beq.n	8012a20 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012a1c:	2b02      	cmp	r3, #2
 8012a1e:	d13d      	bne.n	8012a9c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012a20:	68a1      	ldr	r1, [r4, #8]
 8012a22:	4628      	mov	r0, r5
 8012a24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a28:	f004 b8c6 	b.w	8016bb8 <ucdr_serialize_string>
 8012a2c:	7909      	ldrb	r1, [r1, #4]
 8012a2e:	f7fc f881 	bl	800eb34 <ucdr_serialize_uint8_t>
 8012a32:	4606      	mov	r6, r0
 8012a34:	b120      	cbz	r0, 8012a40 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012a36:	7923      	ldrb	r3, [r4, #4]
 8012a38:	2b02      	cmp	r3, #2
 8012a3a:	d039      	beq.n	8012ab0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012a3c:	2b03      	cmp	r3, #3
 8012a3e:	d02f      	beq.n	8012aa0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012a40:	2202      	movs	r2, #2
 8012a42:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012a46:	4628      	mov	r0, r5
 8012a48:	f003 ff96 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8012a4c:	4030      	ands	r0, r6
 8012a4e:	b2c0      	uxtb	r0, r0
 8012a50:	bd70      	pop	{r4, r5, r6, pc}
 8012a52:	2000      	movs	r0, #0
 8012a54:	bd70      	pop	{r4, r5, r6, pc}
 8012a56:	7909      	ldrb	r1, [r1, #4]
 8012a58:	f7fc f86c 	bl	800eb34 <ucdr_serialize_uint8_t>
 8012a5c:	4606      	mov	r6, r0
 8012a5e:	b158      	cbz	r0, 8012a78 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012a60:	7923      	ldrb	r3, [r4, #4]
 8012a62:	2b02      	cmp	r3, #2
 8012a64:	d003      	beq.n	8012a6e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8012a66:	2b03      	cmp	r3, #3
 8012a68:	d028      	beq.n	8012abc <uxr_serialize_ObjectVariant.part.0+0xd8>
 8012a6a:	2b01      	cmp	r3, #1
 8012a6c:	d104      	bne.n	8012a78 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012a6e:	68a1      	ldr	r1, [r4, #8]
 8012a70:	4628      	mov	r0, r5
 8012a72:	f004 f8a1 	bl	8016bb8 <ucdr_serialize_string>
 8012a76:	4606      	mov	r6, r0
 8012a78:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	f7fc fd95 	bl	800f5ac <ucdr_serialize_int16_t>
 8012a82:	4030      	ands	r0, r6
 8012a84:	b2c0      	uxtb	r0, r0
 8012a86:	bd70      	pop	{r4, r5, r6, pc}
 8012a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a8c:	3104      	adds	r1, #4
 8012a8e:	f7ff be7b 	b.w	8012788 <uxr_serialize_CLIENT_Representation>
 8012a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a96:	3104      	adds	r1, #4
 8012a98:	f7ff bf32 	b.w	8012900 <uxr_serialize_AGENT_Representation>
 8012a9c:	2001      	movs	r0, #1
 8012a9e:	bd70      	pop	{r4, r5, r6, pc}
 8012aa0:	68a2      	ldr	r2, [r4, #8]
 8012aa2:	f104 010c 	add.w	r1, r4, #12
 8012aa6:	4628      	mov	r0, r5
 8012aa8:	f004 f85a 	bl	8016b60 <ucdr_serialize_sequence_uint8_t>
 8012aac:	4606      	mov	r6, r0
 8012aae:	e7c7      	b.n	8012a40 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012ab0:	68a1      	ldr	r1, [r4, #8]
 8012ab2:	4628      	mov	r0, r5
 8012ab4:	f004 f880 	bl	8016bb8 <ucdr_serialize_string>
 8012ab8:	4606      	mov	r6, r0
 8012aba:	e7c1      	b.n	8012a40 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012abc:	68a2      	ldr	r2, [r4, #8]
 8012abe:	f104 010c 	add.w	r1, r4, #12
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	f004 f84c 	bl	8016b60 <ucdr_serialize_sequence_uint8_t>
 8012ac8:	4606      	mov	r6, r0
 8012aca:	e7d5      	b.n	8012a78 <uxr_serialize_ObjectVariant.part.0+0x94>

08012acc <uxr_deserialize_DATAWRITER_Representation>:
 8012acc:	b570      	push	{r4, r5, r6, lr}
 8012ace:	4606      	mov	r6, r0
 8012ad0:	460d      	mov	r5, r1
 8012ad2:	f7fc f845 	bl	800eb60 <ucdr_deserialize_uint8_t>
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	b130      	cbz	r0, 8012ae8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012ada:	782b      	ldrb	r3, [r5, #0]
 8012adc:	2b02      	cmp	r3, #2
 8012ade:	d00c      	beq.n	8012afa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012ae0:	2b03      	cmp	r3, #3
 8012ae2:	d012      	beq.n	8012b0a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012ae4:	2b01      	cmp	r3, #1
 8012ae6:	d008      	beq.n	8012afa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012ae8:	2202      	movs	r2, #2
 8012aea:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012aee:	4630      	mov	r0, r6
 8012af0:	f003 ffa6 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 8012af4:	4020      	ands	r0, r4
 8012af6:	b2c0      	uxtb	r0, r0
 8012af8:	bd70      	pop	{r4, r5, r6, pc}
 8012afa:	6869      	ldr	r1, [r5, #4]
 8012afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b00:	4630      	mov	r0, r6
 8012b02:	f004 f869 	bl	8016bd8 <ucdr_deserialize_string>
 8012b06:	4604      	mov	r4, r0
 8012b08:	e7ee      	b.n	8012ae8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012b0a:	1d2b      	adds	r3, r5, #4
 8012b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b10:	f105 0108 	add.w	r1, r5, #8
 8012b14:	4630      	mov	r0, r6
 8012b16:	f004 f835 	bl	8016b84 <ucdr_deserialize_sequence_uint8_t>
 8012b1a:	4604      	mov	r4, r0
 8012b1c:	e7e4      	b.n	8012ae8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012b1e:	bf00      	nop

08012b20 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012b20:	b570      	push	{r4, r5, r6, lr}
 8012b22:	460d      	mov	r5, r1
 8012b24:	7809      	ldrb	r1, [r1, #0]
 8012b26:	4606      	mov	r6, r0
 8012b28:	f7fb ffd6 	bl	800ead8 <ucdr_serialize_bool>
 8012b2c:	782b      	ldrb	r3, [r5, #0]
 8012b2e:	4604      	mov	r4, r0
 8012b30:	b94b      	cbnz	r3, 8012b46 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012b32:	7a29      	ldrb	r1, [r5, #8]
 8012b34:	4630      	mov	r0, r6
 8012b36:	f7fb ffcf 	bl	800ead8 <ucdr_serialize_bool>
 8012b3a:	7a2b      	ldrb	r3, [r5, #8]
 8012b3c:	4004      	ands	r4, r0
 8012b3e:	b2e4      	uxtb	r4, r4
 8012b40:	b943      	cbnz	r3, 8012b54 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012b42:	4620      	mov	r0, r4
 8012b44:	bd70      	pop	{r4, r5, r6, pc}
 8012b46:	6869      	ldr	r1, [r5, #4]
 8012b48:	4630      	mov	r0, r6
 8012b4a:	f004 f835 	bl	8016bb8 <ucdr_serialize_string>
 8012b4e:	4004      	ands	r4, r0
 8012b50:	b2e4      	uxtb	r4, r4
 8012b52:	e7ee      	b.n	8012b32 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012b54:	68e9      	ldr	r1, [r5, #12]
 8012b56:	4630      	mov	r0, r6
 8012b58:	f004 f82e 	bl	8016bb8 <ucdr_serialize_string>
 8012b5c:	4004      	ands	r4, r0
 8012b5e:	4620      	mov	r0, r4
 8012b60:	bd70      	pop	{r4, r5, r6, pc}
 8012b62:	bf00      	nop

08012b64 <uxr_serialize_OBJK_Topic_Binary>:
 8012b64:	b570      	push	{r4, r5, r6, lr}
 8012b66:	460d      	mov	r5, r1
 8012b68:	6809      	ldr	r1, [r1, #0]
 8012b6a:	4606      	mov	r6, r0
 8012b6c:	f004 f824 	bl	8016bb8 <ucdr_serialize_string>
 8012b70:	7929      	ldrb	r1, [r5, #4]
 8012b72:	4604      	mov	r4, r0
 8012b74:	4630      	mov	r0, r6
 8012b76:	f7fb ffaf 	bl	800ead8 <ucdr_serialize_bool>
 8012b7a:	792b      	ldrb	r3, [r5, #4]
 8012b7c:	4004      	ands	r4, r0
 8012b7e:	b2e4      	uxtb	r4, r4
 8012b80:	b943      	cbnz	r3, 8012b94 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012b82:	7b29      	ldrb	r1, [r5, #12]
 8012b84:	4630      	mov	r0, r6
 8012b86:	f7fb ffa7 	bl	800ead8 <ucdr_serialize_bool>
 8012b8a:	7b2b      	ldrb	r3, [r5, #12]
 8012b8c:	4004      	ands	r4, r0
 8012b8e:	b93b      	cbnz	r3, 8012ba0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012b90:	4620      	mov	r0, r4
 8012b92:	bd70      	pop	{r4, r5, r6, pc}
 8012b94:	68a9      	ldr	r1, [r5, #8]
 8012b96:	4630      	mov	r0, r6
 8012b98:	f004 f80e 	bl	8016bb8 <ucdr_serialize_string>
 8012b9c:	4004      	ands	r4, r0
 8012b9e:	e7f0      	b.n	8012b82 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012ba0:	6929      	ldr	r1, [r5, #16]
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	f004 f808 	bl	8016bb8 <ucdr_serialize_string>
 8012ba8:	4004      	ands	r4, r0
 8012baa:	b2e4      	uxtb	r4, r4
 8012bac:	4620      	mov	r0, r4
 8012bae:	bd70      	pop	{r4, r5, r6, pc}

08012bb0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bb4:	460c      	mov	r4, r1
 8012bb6:	7809      	ldrb	r1, [r1, #0]
 8012bb8:	4606      	mov	r6, r0
 8012bba:	f7fb ff8d 	bl	800ead8 <ucdr_serialize_bool>
 8012bbe:	7823      	ldrb	r3, [r4, #0]
 8012bc0:	4605      	mov	r5, r0
 8012bc2:	b96b      	cbnz	r3, 8012be0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012bc4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012bc8:	4630      	mov	r0, r6
 8012bca:	f7fb ff85 	bl	800ead8 <ucdr_serialize_bool>
 8012bce:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012bd2:	4005      	ands	r5, r0
 8012bd4:	b2ed      	uxtb	r5, r5
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d169      	bne.n	8012cae <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012bda:	4628      	mov	r0, r5
 8012bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012be0:	6861      	ldr	r1, [r4, #4]
 8012be2:	4630      	mov	r0, r6
 8012be4:	f7fc f9bc 	bl	800ef60 <ucdr_serialize_uint32_t>
 8012be8:	6863      	ldr	r3, [r4, #4]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d06b      	beq.n	8012cc6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012bee:	2800      	cmp	r0, #0
 8012bf0:	d067      	beq.n	8012cc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012bf2:	68a1      	ldr	r1, [r4, #8]
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	f003 ffdf 	bl	8016bb8 <ucdr_serialize_string>
 8012bfa:	6863      	ldr	r3, [r4, #4]
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d953      	bls.n	8012ca8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c00:	2800      	cmp	r0, #0
 8012c02:	d05e      	beq.n	8012cc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c04:	68e1      	ldr	r1, [r4, #12]
 8012c06:	4630      	mov	r0, r6
 8012c08:	f003 ffd6 	bl	8016bb8 <ucdr_serialize_string>
 8012c0c:	6863      	ldr	r3, [r4, #4]
 8012c0e:	2b02      	cmp	r3, #2
 8012c10:	d94a      	bls.n	8012ca8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c12:	2800      	cmp	r0, #0
 8012c14:	d055      	beq.n	8012cc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c16:	6921      	ldr	r1, [r4, #16]
 8012c18:	4630      	mov	r0, r6
 8012c1a:	f003 ffcd 	bl	8016bb8 <ucdr_serialize_string>
 8012c1e:	6863      	ldr	r3, [r4, #4]
 8012c20:	2b03      	cmp	r3, #3
 8012c22:	d941      	bls.n	8012ca8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c24:	2800      	cmp	r0, #0
 8012c26:	d04c      	beq.n	8012cc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c28:	6961      	ldr	r1, [r4, #20]
 8012c2a:	4630      	mov	r0, r6
 8012c2c:	f003 ffc4 	bl	8016bb8 <ucdr_serialize_string>
 8012c30:	6863      	ldr	r3, [r4, #4]
 8012c32:	2b04      	cmp	r3, #4
 8012c34:	d938      	bls.n	8012ca8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c36:	2800      	cmp	r0, #0
 8012c38:	d043      	beq.n	8012cc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c3a:	69a1      	ldr	r1, [r4, #24]
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	f003 ffbb 	bl	8016bb8 <ucdr_serialize_string>
 8012c42:	6863      	ldr	r3, [r4, #4]
 8012c44:	2b05      	cmp	r3, #5
 8012c46:	d92f      	bls.n	8012ca8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	d03a      	beq.n	8012cc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c4c:	69e1      	ldr	r1, [r4, #28]
 8012c4e:	4630      	mov	r0, r6
 8012c50:	f003 ffb2 	bl	8016bb8 <ucdr_serialize_string>
 8012c54:	6863      	ldr	r3, [r4, #4]
 8012c56:	2b06      	cmp	r3, #6
 8012c58:	d926      	bls.n	8012ca8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c5a:	b390      	cbz	r0, 8012cc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c5c:	6a21      	ldr	r1, [r4, #32]
 8012c5e:	4630      	mov	r0, r6
 8012c60:	f003 ffaa 	bl	8016bb8 <ucdr_serialize_string>
 8012c64:	6863      	ldr	r3, [r4, #4]
 8012c66:	2b07      	cmp	r3, #7
 8012c68:	d91e      	bls.n	8012ca8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c6a:	b350      	cbz	r0, 8012cc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c6c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012c6e:	4630      	mov	r0, r6
 8012c70:	f003 ffa2 	bl	8016bb8 <ucdr_serialize_string>
 8012c74:	6863      	ldr	r3, [r4, #4]
 8012c76:	2b08      	cmp	r3, #8
 8012c78:	d916      	bls.n	8012ca8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c7a:	b310      	cbz	r0, 8012cc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c7c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012c7e:	4630      	mov	r0, r6
 8012c80:	f003 ff9a 	bl	8016bb8 <ucdr_serialize_string>
 8012c84:	6863      	ldr	r3, [r4, #4]
 8012c86:	2b09      	cmp	r3, #9
 8012c88:	d90e      	bls.n	8012ca8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012c8a:	b1d0      	cbz	r0, 8012cc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c8c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012c90:	2709      	movs	r7, #9
 8012c92:	e000      	b.n	8012c96 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012c94:	b1a8      	cbz	r0, 8012cc2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012c96:	f858 1b04 	ldr.w	r1, [r8], #4
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	f003 ff8c 	bl	8016bb8 <ucdr_serialize_string>
 8012ca0:	6862      	ldr	r2, [r4, #4]
 8012ca2:	3701      	adds	r7, #1
 8012ca4:	4297      	cmp	r7, r2
 8012ca6:	d3f5      	bcc.n	8012c94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012ca8:	4005      	ands	r5, r0
 8012caa:	b2ed      	uxtb	r5, r5
 8012cac:	e78a      	b.n	8012bc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012cae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012cb0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012cb4:	4630      	mov	r0, r6
 8012cb6:	f003 ff53 	bl	8016b60 <ucdr_serialize_sequence_uint8_t>
 8012cba:	4005      	ands	r5, r0
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cc2:	2500      	movs	r5, #0
 8012cc4:	e77e      	b.n	8012bc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012cc6:	4028      	ands	r0, r5
 8012cc8:	b2c5      	uxtb	r5, r0
 8012cca:	e77b      	b.n	8012bc4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012ccc <uxr_serialize_OBJK_Publisher_Binary>:
 8012ccc:	b570      	push	{r4, r5, r6, lr}
 8012cce:	460d      	mov	r5, r1
 8012cd0:	7809      	ldrb	r1, [r1, #0]
 8012cd2:	4606      	mov	r6, r0
 8012cd4:	f7fb ff00 	bl	800ead8 <ucdr_serialize_bool>
 8012cd8:	782b      	ldrb	r3, [r5, #0]
 8012cda:	4604      	mov	r4, r0
 8012cdc:	b94b      	cbnz	r3, 8012cf2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012cde:	7a29      	ldrb	r1, [r5, #8]
 8012ce0:	4630      	mov	r0, r6
 8012ce2:	f7fb fef9 	bl	800ead8 <ucdr_serialize_bool>
 8012ce6:	7a2b      	ldrb	r3, [r5, #8]
 8012ce8:	4004      	ands	r4, r0
 8012cea:	b2e4      	uxtb	r4, r4
 8012cec:	b943      	cbnz	r3, 8012d00 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012cee:	4620      	mov	r0, r4
 8012cf0:	bd70      	pop	{r4, r5, r6, pc}
 8012cf2:	6869      	ldr	r1, [r5, #4]
 8012cf4:	4630      	mov	r0, r6
 8012cf6:	f003 ff5f 	bl	8016bb8 <ucdr_serialize_string>
 8012cfa:	4004      	ands	r4, r0
 8012cfc:	b2e4      	uxtb	r4, r4
 8012cfe:	e7ee      	b.n	8012cde <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012d00:	f105 010c 	add.w	r1, r5, #12
 8012d04:	4630      	mov	r0, r6
 8012d06:	f7ff ff53 	bl	8012bb0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012d0a:	4004      	ands	r4, r0
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	bd70      	pop	{r4, r5, r6, pc}

08012d10 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d14:	460c      	mov	r4, r1
 8012d16:	7809      	ldrb	r1, [r1, #0]
 8012d18:	4606      	mov	r6, r0
 8012d1a:	f7fb fedd 	bl	800ead8 <ucdr_serialize_bool>
 8012d1e:	7823      	ldrb	r3, [r4, #0]
 8012d20:	4605      	mov	r5, r0
 8012d22:	b96b      	cbnz	r3, 8012d40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012d24:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012d28:	4630      	mov	r0, r6
 8012d2a:	f7fb fed5 	bl	800ead8 <ucdr_serialize_bool>
 8012d2e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8012d32:	4005      	ands	r5, r0
 8012d34:	b2ed      	uxtb	r5, r5
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d169      	bne.n	8012e0e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012d3a:	4628      	mov	r0, r5
 8012d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d40:	6861      	ldr	r1, [r4, #4]
 8012d42:	4630      	mov	r0, r6
 8012d44:	f7fc f90c 	bl	800ef60 <ucdr_serialize_uint32_t>
 8012d48:	6863      	ldr	r3, [r4, #4]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d06b      	beq.n	8012e26 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d067      	beq.n	8012e22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012d52:	68a1      	ldr	r1, [r4, #8]
 8012d54:	4630      	mov	r0, r6
 8012d56:	f003 ff2f 	bl	8016bb8 <ucdr_serialize_string>
 8012d5a:	6863      	ldr	r3, [r4, #4]
 8012d5c:	2b01      	cmp	r3, #1
 8012d5e:	d953      	bls.n	8012e08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012d60:	2800      	cmp	r0, #0
 8012d62:	d05e      	beq.n	8012e22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012d64:	68e1      	ldr	r1, [r4, #12]
 8012d66:	4630      	mov	r0, r6
 8012d68:	f003 ff26 	bl	8016bb8 <ucdr_serialize_string>
 8012d6c:	6863      	ldr	r3, [r4, #4]
 8012d6e:	2b02      	cmp	r3, #2
 8012d70:	d94a      	bls.n	8012e08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012d72:	2800      	cmp	r0, #0
 8012d74:	d055      	beq.n	8012e22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012d76:	6921      	ldr	r1, [r4, #16]
 8012d78:	4630      	mov	r0, r6
 8012d7a:	f003 ff1d 	bl	8016bb8 <ucdr_serialize_string>
 8012d7e:	6863      	ldr	r3, [r4, #4]
 8012d80:	2b03      	cmp	r3, #3
 8012d82:	d941      	bls.n	8012e08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012d84:	2800      	cmp	r0, #0
 8012d86:	d04c      	beq.n	8012e22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012d88:	6961      	ldr	r1, [r4, #20]
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	f003 ff14 	bl	8016bb8 <ucdr_serialize_string>
 8012d90:	6863      	ldr	r3, [r4, #4]
 8012d92:	2b04      	cmp	r3, #4
 8012d94:	d938      	bls.n	8012e08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	d043      	beq.n	8012e22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012d9a:	69a1      	ldr	r1, [r4, #24]
 8012d9c:	4630      	mov	r0, r6
 8012d9e:	f003 ff0b 	bl	8016bb8 <ucdr_serialize_string>
 8012da2:	6863      	ldr	r3, [r4, #4]
 8012da4:	2b05      	cmp	r3, #5
 8012da6:	d92f      	bls.n	8012e08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012da8:	2800      	cmp	r0, #0
 8012daa:	d03a      	beq.n	8012e22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012dac:	69e1      	ldr	r1, [r4, #28]
 8012dae:	4630      	mov	r0, r6
 8012db0:	f003 ff02 	bl	8016bb8 <ucdr_serialize_string>
 8012db4:	6863      	ldr	r3, [r4, #4]
 8012db6:	2b06      	cmp	r3, #6
 8012db8:	d926      	bls.n	8012e08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012dba:	b390      	cbz	r0, 8012e22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012dbc:	6a21      	ldr	r1, [r4, #32]
 8012dbe:	4630      	mov	r0, r6
 8012dc0:	f003 fefa 	bl	8016bb8 <ucdr_serialize_string>
 8012dc4:	6863      	ldr	r3, [r4, #4]
 8012dc6:	2b07      	cmp	r3, #7
 8012dc8:	d91e      	bls.n	8012e08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012dca:	b350      	cbz	r0, 8012e22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012dcc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012dce:	4630      	mov	r0, r6
 8012dd0:	f003 fef2 	bl	8016bb8 <ucdr_serialize_string>
 8012dd4:	6863      	ldr	r3, [r4, #4]
 8012dd6:	2b08      	cmp	r3, #8
 8012dd8:	d916      	bls.n	8012e08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012dda:	b310      	cbz	r0, 8012e22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012ddc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012dde:	4630      	mov	r0, r6
 8012de0:	f003 feea 	bl	8016bb8 <ucdr_serialize_string>
 8012de4:	6863      	ldr	r3, [r4, #4]
 8012de6:	2b09      	cmp	r3, #9
 8012de8:	d90e      	bls.n	8012e08 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012dea:	b1d0      	cbz	r0, 8012e22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012dec:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012df0:	2709      	movs	r7, #9
 8012df2:	e000      	b.n	8012df6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012df4:	b1a8      	cbz	r0, 8012e22 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012df6:	f858 1b04 	ldr.w	r1, [r8], #4
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	f003 fedc 	bl	8016bb8 <ucdr_serialize_string>
 8012e00:	6862      	ldr	r2, [r4, #4]
 8012e02:	3701      	adds	r7, #1
 8012e04:	4297      	cmp	r7, r2
 8012e06:	d3f5      	bcc.n	8012df4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012e08:	4005      	ands	r5, r0
 8012e0a:	b2ed      	uxtb	r5, r5
 8012e0c:	e78a      	b.n	8012d24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012e0e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012e10:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012e14:	4630      	mov	r0, r6
 8012e16:	f003 fea3 	bl	8016b60 <ucdr_serialize_sequence_uint8_t>
 8012e1a:	4005      	ands	r5, r0
 8012e1c:	4628      	mov	r0, r5
 8012e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e22:	2500      	movs	r5, #0
 8012e24:	e77e      	b.n	8012d24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012e26:	4028      	ands	r0, r5
 8012e28:	b2c5      	uxtb	r5, r0
 8012e2a:	e77b      	b.n	8012d24 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012e2c <uxr_serialize_OBJK_Subscriber_Binary>:
 8012e2c:	b570      	push	{r4, r5, r6, lr}
 8012e2e:	460d      	mov	r5, r1
 8012e30:	7809      	ldrb	r1, [r1, #0]
 8012e32:	4606      	mov	r6, r0
 8012e34:	f7fb fe50 	bl	800ead8 <ucdr_serialize_bool>
 8012e38:	782b      	ldrb	r3, [r5, #0]
 8012e3a:	4604      	mov	r4, r0
 8012e3c:	b94b      	cbnz	r3, 8012e52 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012e3e:	7a29      	ldrb	r1, [r5, #8]
 8012e40:	4630      	mov	r0, r6
 8012e42:	f7fb fe49 	bl	800ead8 <ucdr_serialize_bool>
 8012e46:	7a2b      	ldrb	r3, [r5, #8]
 8012e48:	4004      	ands	r4, r0
 8012e4a:	b2e4      	uxtb	r4, r4
 8012e4c:	b943      	cbnz	r3, 8012e60 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012e4e:	4620      	mov	r0, r4
 8012e50:	bd70      	pop	{r4, r5, r6, pc}
 8012e52:	6869      	ldr	r1, [r5, #4]
 8012e54:	4630      	mov	r0, r6
 8012e56:	f003 feaf 	bl	8016bb8 <ucdr_serialize_string>
 8012e5a:	4004      	ands	r4, r0
 8012e5c:	b2e4      	uxtb	r4, r4
 8012e5e:	e7ee      	b.n	8012e3e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012e60:	f105 010c 	add.w	r1, r5, #12
 8012e64:	4630      	mov	r0, r6
 8012e66:	f7ff ff53 	bl	8012d10 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012e6a:	4004      	ands	r4, r0
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	bd70      	pop	{r4, r5, r6, pc}

08012e70 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012e70:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012e74:	4688      	mov	r8, r1
 8012e76:	8809      	ldrh	r1, [r1, #0]
 8012e78:	4681      	mov	r9, r0
 8012e7a:	f7fb fe87 	bl	800eb8c <ucdr_serialize_uint16_t>
 8012e7e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012e82:	4606      	mov	r6, r0
 8012e84:	4648      	mov	r0, r9
 8012e86:	f7fb fe27 	bl	800ead8 <ucdr_serialize_bool>
 8012e8a:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012e8e:	4006      	ands	r6, r0
 8012e90:	b2f5      	uxtb	r5, r6
 8012e92:	b9eb      	cbnz	r3, 8012ed0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012e94:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012e98:	4648      	mov	r0, r9
 8012e9a:	f7fb fe1d 	bl	800ead8 <ucdr_serialize_bool>
 8012e9e:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012ea2:	4005      	ands	r5, r0
 8012ea4:	bb7b      	cbnz	r3, 8012f06 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012ea6:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012eaa:	4648      	mov	r0, r9
 8012eac:	f7fb fe14 	bl	800ead8 <ucdr_serialize_bool>
 8012eb0:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012eb4:	4005      	ands	r5, r0
 8012eb6:	b9f3      	cbnz	r3, 8012ef6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012eb8:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012ebc:	4648      	mov	r0, r9
 8012ebe:	f7fb fe0b 	bl	800ead8 <ucdr_serialize_bool>
 8012ec2:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012ec6:	4005      	ands	r5, r0
 8012ec8:	b94b      	cbnz	r3, 8012ede <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012eca:	4628      	mov	r0, r5
 8012ecc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012ed0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012ed4:	4648      	mov	r0, r9
 8012ed6:	f7fb fe59 	bl	800eb8c <ucdr_serialize_uint16_t>
 8012eda:	4005      	ands	r5, r0
 8012edc:	e7da      	b.n	8012e94 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012ede:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012ee2:	f108 011c 	add.w	r1, r8, #28
 8012ee6:	4648      	mov	r0, r9
 8012ee8:	f003 fe3a 	bl	8016b60 <ucdr_serialize_sequence_uint8_t>
 8012eec:	4028      	ands	r0, r5
 8012eee:	b2c5      	uxtb	r5, r0
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012ef6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012efa:	4648      	mov	r0, r9
 8012efc:	f7fc f830 	bl	800ef60 <ucdr_serialize_uint32_t>
 8012f00:	4028      	ands	r0, r5
 8012f02:	b2c5      	uxtb	r5, r0
 8012f04:	e7d8      	b.n	8012eb8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012f06:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012f0a:	4648      	mov	r0, r9
 8012f0c:	f7fc f828 	bl	800ef60 <ucdr_serialize_uint32_t>
 8012f10:	4028      	ands	r0, r5
 8012f12:	b2c5      	uxtb	r5, r0
 8012f14:	e7c7      	b.n	8012ea6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012f16:	bf00      	nop

08012f18 <uxr_serialize_OBJK_DataReader_Binary>:
 8012f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f1a:	2202      	movs	r2, #2
 8012f1c:	460c      	mov	r4, r1
 8012f1e:	4606      	mov	r6, r0
 8012f20:	f003 fd2a 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8012f24:	78a1      	ldrb	r1, [r4, #2]
 8012f26:	4605      	mov	r5, r0
 8012f28:	4630      	mov	r0, r6
 8012f2a:	f7fb fdd5 	bl	800ead8 <ucdr_serialize_bool>
 8012f2e:	78a3      	ldrb	r3, [r4, #2]
 8012f30:	4005      	ands	r5, r0
 8012f32:	b2ed      	uxtb	r5, r5
 8012f34:	b90b      	cbnz	r3, 8012f3a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012f36:	4628      	mov	r0, r5
 8012f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f3a:	f104 0108 	add.w	r1, r4, #8
 8012f3e:	4630      	mov	r0, r6
 8012f40:	f7ff ff96 	bl	8012e70 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012f44:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012f48:	4607      	mov	r7, r0
 8012f4a:	4630      	mov	r0, r6
 8012f4c:	f7fb fdc4 	bl	800ead8 <ucdr_serialize_bool>
 8012f50:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012f54:	4038      	ands	r0, r7
 8012f56:	b2c7      	uxtb	r7, r0
 8012f58:	b95b      	cbnz	r3, 8012f72 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012f5a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012f5e:	4630      	mov	r0, r6
 8012f60:	f7fb fdba 	bl	800ead8 <ucdr_serialize_bool>
 8012f64:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012f68:	4007      	ands	r7, r0
 8012f6a:	b94b      	cbnz	r3, 8012f80 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012f6c:	403d      	ands	r5, r7
 8012f6e:	4628      	mov	r0, r5
 8012f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f72:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8012f76:	4630      	mov	r0, r6
 8012f78:	f7fc fa48 	bl	800f40c <ucdr_serialize_uint64_t>
 8012f7c:	4007      	ands	r7, r0
 8012f7e:	e7ec      	b.n	8012f5a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012f80:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8012f82:	4630      	mov	r0, r6
 8012f84:	f003 fe18 	bl	8016bb8 <ucdr_serialize_string>
 8012f88:	4007      	ands	r7, r0
 8012f8a:	b2ff      	uxtb	r7, r7
 8012f8c:	e7ee      	b.n	8012f6c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012f8e:	bf00      	nop

08012f90 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f92:	2202      	movs	r2, #2
 8012f94:	460d      	mov	r5, r1
 8012f96:	4606      	mov	r6, r0
 8012f98:	f003 fcee 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8012f9c:	78a9      	ldrb	r1, [r5, #2]
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	4630      	mov	r0, r6
 8012fa2:	f7fb fd99 	bl	800ead8 <ucdr_serialize_bool>
 8012fa6:	78ab      	ldrb	r3, [r5, #2]
 8012fa8:	4004      	ands	r4, r0
 8012faa:	b2e4      	uxtb	r4, r4
 8012fac:	b90b      	cbnz	r3, 8012fb2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012fae:	4620      	mov	r0, r4
 8012fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fb2:	f105 0108 	add.w	r1, r5, #8
 8012fb6:	4630      	mov	r0, r6
 8012fb8:	f7ff ff5a 	bl	8012e70 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012fbc:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012fc0:	4607      	mov	r7, r0
 8012fc2:	4630      	mov	r0, r6
 8012fc4:	f7fb fd88 	bl	800ead8 <ucdr_serialize_bool>
 8012fc8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012fcc:	4038      	ands	r0, r7
 8012fce:	b2c7      	uxtb	r7, r0
 8012fd0:	b913      	cbnz	r3, 8012fd8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012fd2:	403c      	ands	r4, r7
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fd8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012fdc:	4630      	mov	r0, r6
 8012fde:	f7fc fa15 	bl	800f40c <ucdr_serialize_uint64_t>
 8012fe2:	4007      	ands	r7, r0
 8012fe4:	e7f5      	b.n	8012fd2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012fe6:	bf00      	nop

08012fe8 <uxr_deserialize_ObjectVariant>:
 8012fe8:	b570      	push	{r4, r5, r6, lr}
 8012fea:	4605      	mov	r5, r0
 8012fec:	460e      	mov	r6, r1
 8012fee:	f7fb fdb7 	bl	800eb60 <ucdr_deserialize_uint8_t>
 8012ff2:	b168      	cbz	r0, 8013010 <uxr_deserialize_ObjectVariant+0x28>
 8012ff4:	7833      	ldrb	r3, [r6, #0]
 8012ff6:	3b01      	subs	r3, #1
 8012ff8:	4604      	mov	r4, r0
 8012ffa:	2b0d      	cmp	r3, #13
 8012ffc:	d809      	bhi.n	8013012 <uxr_deserialize_ObjectVariant+0x2a>
 8012ffe:	e8df f003 	tbb	[pc, r3]
 8013002:	0a41      	.short	0x0a41
 8013004:	0a0a2323 	.word	0x0a0a2323
 8013008:	10080a0a 	.word	0x10080a0a
 801300c:	565c1010 	.word	0x565c1010
 8013010:	2400      	movs	r4, #0
 8013012:	4620      	mov	r0, r4
 8013014:	bd70      	pop	{r4, r5, r6, pc}
 8013016:	1d31      	adds	r1, r6, #4
 8013018:	4628      	mov	r0, r5
 801301a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801301e:	f7ff bd55 	b.w	8012acc <uxr_deserialize_DATAWRITER_Representation>
 8013022:	1d31      	adds	r1, r6, #4
 8013024:	4628      	mov	r0, r5
 8013026:	f7fb fd9b 	bl	800eb60 <ucdr_deserialize_uint8_t>
 801302a:	2800      	cmp	r0, #0
 801302c:	d0f0      	beq.n	8013010 <uxr_deserialize_ObjectVariant+0x28>
 801302e:	7933      	ldrb	r3, [r6, #4]
 8013030:	2b01      	cmp	r3, #1
 8013032:	d001      	beq.n	8013038 <uxr_deserialize_ObjectVariant+0x50>
 8013034:	2b02      	cmp	r3, #2
 8013036:	d1ec      	bne.n	8013012 <uxr_deserialize_ObjectVariant+0x2a>
 8013038:	68b1      	ldr	r1, [r6, #8]
 801303a:	4628      	mov	r0, r5
 801303c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013044:	f003 bdc8 	b.w	8016bd8 <ucdr_deserialize_string>
 8013048:	1d31      	adds	r1, r6, #4
 801304a:	4628      	mov	r0, r5
 801304c:	f7fb fd88 	bl	800eb60 <ucdr_deserialize_uint8_t>
 8013050:	4604      	mov	r4, r0
 8013052:	b170      	cbz	r0, 8013072 <uxr_deserialize_ObjectVariant+0x8a>
 8013054:	7933      	ldrb	r3, [r6, #4]
 8013056:	2b02      	cmp	r3, #2
 8013058:	d04c      	beq.n	80130f4 <uxr_deserialize_ObjectVariant+0x10c>
 801305a:	2b03      	cmp	r3, #3
 801305c:	d109      	bne.n	8013072 <uxr_deserialize_ObjectVariant+0x8a>
 801305e:	f106 0308 	add.w	r3, r6, #8
 8013062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013066:	f106 010c 	add.w	r1, r6, #12
 801306a:	4628      	mov	r0, r5
 801306c:	f003 fd8a 	bl	8016b84 <ucdr_deserialize_sequence_uint8_t>
 8013070:	4604      	mov	r4, r0
 8013072:	2202      	movs	r2, #2
 8013074:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013078:	4628      	mov	r0, r5
 801307a:	f003 fce1 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 801307e:	4020      	ands	r0, r4
 8013080:	b2c4      	uxtb	r4, r0
 8013082:	e7c6      	b.n	8013012 <uxr_deserialize_ObjectVariant+0x2a>
 8013084:	1d31      	adds	r1, r6, #4
 8013086:	4628      	mov	r0, r5
 8013088:	f7fb fd6a 	bl	800eb60 <ucdr_deserialize_uint8_t>
 801308c:	4604      	mov	r4, r0
 801308e:	b130      	cbz	r0, 801309e <uxr_deserialize_ObjectVariant+0xb6>
 8013090:	7933      	ldrb	r3, [r6, #4]
 8013092:	2b02      	cmp	r3, #2
 8013094:	d036      	beq.n	8013104 <uxr_deserialize_ObjectVariant+0x11c>
 8013096:	2b03      	cmp	r3, #3
 8013098:	d03c      	beq.n	8013114 <uxr_deserialize_ObjectVariant+0x12c>
 801309a:	2b01      	cmp	r3, #1
 801309c:	d032      	beq.n	8013104 <uxr_deserialize_ObjectVariant+0x11c>
 801309e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80130a2:	4628      	mov	r0, r5
 80130a4:	f7fc fb02 	bl	800f6ac <ucdr_deserialize_int16_t>
 80130a8:	4020      	ands	r0, r4
 80130aa:	b2c4      	uxtb	r4, r0
 80130ac:	e7b1      	b.n	8013012 <uxr_deserialize_ObjectVariant+0x2a>
 80130ae:	1d31      	adds	r1, r6, #4
 80130b0:	4628      	mov	r0, r5
 80130b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130b6:	f7ff bbbf 	b.w	8012838 <uxr_deserialize_CLIENT_Representation>
 80130ba:	2204      	movs	r2, #4
 80130bc:	18b1      	adds	r1, r6, r2
 80130be:	4628      	mov	r0, r5
 80130c0:	f003 fcbe 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 80130c4:	2202      	movs	r2, #2
 80130c6:	f106 0108 	add.w	r1, r6, #8
 80130ca:	4604      	mov	r4, r0
 80130cc:	4628      	mov	r0, r5
 80130ce:	f003 fcb7 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 80130d2:	2202      	movs	r2, #2
 80130d4:	4004      	ands	r4, r0
 80130d6:	f106 010a 	add.w	r1, r6, #10
 80130da:	4628      	mov	r0, r5
 80130dc:	f003 fcb0 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 80130e0:	b2e4      	uxtb	r4, r4
 80130e2:	4603      	mov	r3, r0
 80130e4:	f106 010c 	add.w	r1, r6, #12
 80130e8:	4628      	mov	r0, r5
 80130ea:	401c      	ands	r4, r3
 80130ec:	f7fb fd0a 	bl	800eb04 <ucdr_deserialize_bool>
 80130f0:	4004      	ands	r4, r0
 80130f2:	e78e      	b.n	8013012 <uxr_deserialize_ObjectVariant+0x2a>
 80130f4:	68b1      	ldr	r1, [r6, #8]
 80130f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130fa:	4628      	mov	r0, r5
 80130fc:	f003 fd6c 	bl	8016bd8 <ucdr_deserialize_string>
 8013100:	4604      	mov	r4, r0
 8013102:	e7b6      	b.n	8013072 <uxr_deserialize_ObjectVariant+0x8a>
 8013104:	68b1      	ldr	r1, [r6, #8]
 8013106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801310a:	4628      	mov	r0, r5
 801310c:	f003 fd64 	bl	8016bd8 <ucdr_deserialize_string>
 8013110:	4604      	mov	r4, r0
 8013112:	e7c4      	b.n	801309e <uxr_deserialize_ObjectVariant+0xb6>
 8013114:	f106 0308 	add.w	r3, r6, #8
 8013118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801311c:	f106 010c 	add.w	r1, r6, #12
 8013120:	4628      	mov	r0, r5
 8013122:	f003 fd2f 	bl	8016b84 <ucdr_deserialize_sequence_uint8_t>
 8013126:	4604      	mov	r4, r0
 8013128:	e7b9      	b.n	801309e <uxr_deserialize_ObjectVariant+0xb6>
 801312a:	bf00      	nop

0801312c <uxr_deserialize_BaseObjectRequest>:
 801312c:	b570      	push	{r4, r5, r6, lr}
 801312e:	2202      	movs	r2, #2
 8013130:	4605      	mov	r5, r0
 8013132:	460e      	mov	r6, r1
 8013134:	f003 fc84 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 8013138:	2202      	movs	r2, #2
 801313a:	4604      	mov	r4, r0
 801313c:	18b1      	adds	r1, r6, r2
 801313e:	4628      	mov	r0, r5
 8013140:	f003 fc7e 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 8013144:	4020      	ands	r0, r4
 8013146:	b2c0      	uxtb	r0, r0
 8013148:	bd70      	pop	{r4, r5, r6, pc}
 801314a:	bf00      	nop

0801314c <uxr_serialize_ActivityInfoVariant>:
 801314c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013150:	460d      	mov	r5, r1
 8013152:	7809      	ldrb	r1, [r1, #0]
 8013154:	4607      	mov	r7, r0
 8013156:	f7fb fced 	bl	800eb34 <ucdr_serialize_uint8_t>
 801315a:	4681      	mov	r9, r0
 801315c:	b138      	cbz	r0, 801316e <uxr_serialize_ActivityInfoVariant+0x22>
 801315e:	782b      	ldrb	r3, [r5, #0]
 8013160:	2b06      	cmp	r3, #6
 8013162:	f000 8082 	beq.w	801326a <uxr_serialize_ActivityInfoVariant+0x11e>
 8013166:	2b0d      	cmp	r3, #13
 8013168:	d016      	beq.n	8013198 <uxr_serialize_ActivityInfoVariant+0x4c>
 801316a:	2b05      	cmp	r3, #5
 801316c:	d002      	beq.n	8013174 <uxr_serialize_ActivityInfoVariant+0x28>
 801316e:	4648      	mov	r0, r9
 8013170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013174:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013178:	4638      	mov	r0, r7
 801317a:	f7fc fa17 	bl	800f5ac <ucdr_serialize_int16_t>
 801317e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013182:	4681      	mov	r9, r0
 8013184:	4638      	mov	r0, r7
 8013186:	f7fc f941 	bl	800f40c <ucdr_serialize_uint64_t>
 801318a:	ea09 0000 	and.w	r0, r9, r0
 801318e:	fa5f f980 	uxtb.w	r9, r0
 8013192:	4648      	mov	r0, r9
 8013194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013198:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801319c:	4638      	mov	r0, r7
 801319e:	f7fc fa05 	bl	800f5ac <ucdr_serialize_int16_t>
 80131a2:	68e9      	ldr	r1, [r5, #12]
 80131a4:	4681      	mov	r9, r0
 80131a6:	4638      	mov	r0, r7
 80131a8:	f7fb feda 	bl	800ef60 <ucdr_serialize_uint32_t>
 80131ac:	68eb      	ldr	r3, [r5, #12]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d0eb      	beq.n	801318a <uxr_serialize_ActivityInfoVariant+0x3e>
 80131b2:	b320      	cbz	r0, 80131fe <uxr_serialize_ActivityInfoVariant+0xb2>
 80131b4:	f105 080c 	add.w	r8, r5, #12
 80131b8:	2600      	movs	r6, #0
 80131ba:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80131be:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80131c2:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80131c6:	4638      	mov	r0, r7
 80131c8:	f7fb fcb4 	bl	800eb34 <ucdr_serialize_uint8_t>
 80131cc:	2800      	cmp	r0, #0
 80131ce:	d053      	beq.n	8013278 <uxr_serialize_ActivityInfoVariant+0x12c>
 80131d0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80131d4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80131d8:	0074      	lsls	r4, r6, #1
 80131da:	00c9      	lsls	r1, r1, #3
 80131dc:	2b03      	cmp	r3, #3
 80131de:	d854      	bhi.n	801328a <uxr_serialize_ActivityInfoVariant+0x13e>
 80131e0:	e8df f003 	tbb	[pc, r3]
 80131e4:	02102132 	.word	0x02102132
 80131e8:	4441      	add	r1, r8
 80131ea:	4638      	mov	r0, r7
 80131ec:	6889      	ldr	r1, [r1, #8]
 80131ee:	f003 fce3 	bl	8016bb8 <ucdr_serialize_string>
 80131f2:	68ea      	ldr	r2, [r5, #12]
 80131f4:	3601      	adds	r6, #1
 80131f6:	4296      	cmp	r6, r2
 80131f8:	d242      	bcs.n	8013280 <uxr_serialize_ActivityInfoVariant+0x134>
 80131fa:	2800      	cmp	r0, #0
 80131fc:	d1dd      	bne.n	80131ba <uxr_serialize_ActivityInfoVariant+0x6e>
 80131fe:	f04f 0900 	mov.w	r9, #0
 8013202:	e7b4      	b.n	801316e <uxr_serialize_ActivityInfoVariant+0x22>
 8013204:	3108      	adds	r1, #8
 8013206:	4441      	add	r1, r8
 8013208:	2210      	movs	r2, #16
 801320a:	4638      	mov	r0, r7
 801320c:	f003 fbb4 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013210:	4434      	add	r4, r6
 8013212:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013216:	4604      	mov	r4, r0
 8013218:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801321a:	4638      	mov	r0, r7
 801321c:	f7fb fea0 	bl	800ef60 <ucdr_serialize_uint32_t>
 8013220:	4020      	ands	r0, r4
 8013222:	b2c0      	uxtb	r0, r0
 8013224:	e7e5      	b.n	80131f2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013226:	3108      	adds	r1, #8
 8013228:	4441      	add	r1, r8
 801322a:	2204      	movs	r2, #4
 801322c:	4638      	mov	r0, r7
 801322e:	f003 fba3 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013232:	4434      	add	r4, r6
 8013234:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013238:	4604      	mov	r4, r0
 801323a:	8b19      	ldrh	r1, [r3, #24]
 801323c:	4638      	mov	r0, r7
 801323e:	f7fb fca5 	bl	800eb8c <ucdr_serialize_uint16_t>
 8013242:	4020      	ands	r0, r4
 8013244:	b2c0      	uxtb	r0, r0
 8013246:	e7d4      	b.n	80131f2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013248:	3108      	adds	r1, #8
 801324a:	4441      	add	r1, r8
 801324c:	2202      	movs	r2, #2
 801324e:	4638      	mov	r0, r7
 8013250:	f003 fb92 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013254:	4434      	add	r4, r6
 8013256:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801325a:	4604      	mov	r4, r0
 801325c:	7d99      	ldrb	r1, [r3, #22]
 801325e:	4638      	mov	r0, r7
 8013260:	f7fb fc68 	bl	800eb34 <ucdr_serialize_uint8_t>
 8013264:	4020      	ands	r0, r4
 8013266:	b2c0      	uxtb	r0, r0
 8013268:	e7c3      	b.n	80131f2 <uxr_serialize_ActivityInfoVariant+0xa6>
 801326a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801326e:	4638      	mov	r0, r7
 8013270:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013274:	f7fc b99a 	b.w	800f5ac <ucdr_serialize_int16_t>
 8013278:	68ea      	ldr	r2, [r5, #12]
 801327a:	3601      	adds	r6, #1
 801327c:	42b2      	cmp	r2, r6
 801327e:	d8be      	bhi.n	80131fe <uxr_serialize_ActivityInfoVariant+0xb2>
 8013280:	ea09 0900 	and.w	r9, r9, r0
 8013284:	fa5f f989 	uxtb.w	r9, r9
 8013288:	e771      	b.n	801316e <uxr_serialize_ActivityInfoVariant+0x22>
 801328a:	68eb      	ldr	r3, [r5, #12]
 801328c:	3601      	adds	r6, #1
 801328e:	429e      	cmp	r6, r3
 8013290:	f10a 0a18 	add.w	sl, sl, #24
 8013294:	d395      	bcc.n	80131c2 <uxr_serialize_ActivityInfoVariant+0x76>
 8013296:	e76a      	b.n	801316e <uxr_serialize_ActivityInfoVariant+0x22>

08013298 <uxr_deserialize_BaseObjectReply>:
 8013298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801329c:	2202      	movs	r2, #2
 801329e:	4606      	mov	r6, r0
 80132a0:	460f      	mov	r7, r1
 80132a2:	f003 fbcd 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 80132a6:	2202      	movs	r2, #2
 80132a8:	18b9      	adds	r1, r7, r2
 80132aa:	4605      	mov	r5, r0
 80132ac:	4630      	mov	r0, r6
 80132ae:	f003 fbc7 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 80132b2:	1d39      	adds	r1, r7, #4
 80132b4:	4680      	mov	r8, r0
 80132b6:	4630      	mov	r0, r6
 80132b8:	f7fb fc52 	bl	800eb60 <ucdr_deserialize_uint8_t>
 80132bc:	1d79      	adds	r1, r7, #5
 80132be:	4604      	mov	r4, r0
 80132c0:	4630      	mov	r0, r6
 80132c2:	f7fb fc4d 	bl	800eb60 <ucdr_deserialize_uint8_t>
 80132c6:	ea05 0508 	and.w	r5, r5, r8
 80132ca:	402c      	ands	r4, r5
 80132cc:	4020      	ands	r0, r4
 80132ce:	b2c0      	uxtb	r0, r0
 80132d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132d4 <uxr_serialize_ReadSpecification>:
 80132d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132d8:	460e      	mov	r6, r1
 80132da:	7809      	ldrb	r1, [r1, #0]
 80132dc:	4607      	mov	r7, r0
 80132de:	f7fb fc29 	bl	800eb34 <ucdr_serialize_uint8_t>
 80132e2:	7871      	ldrb	r1, [r6, #1]
 80132e4:	4604      	mov	r4, r0
 80132e6:	4638      	mov	r0, r7
 80132e8:	f7fb fc24 	bl	800eb34 <ucdr_serialize_uint8_t>
 80132ec:	78b1      	ldrb	r1, [r6, #2]
 80132ee:	4004      	ands	r4, r0
 80132f0:	4638      	mov	r0, r7
 80132f2:	f7fb fbf1 	bl	800ead8 <ucdr_serialize_bool>
 80132f6:	78b3      	ldrb	r3, [r6, #2]
 80132f8:	b2e4      	uxtb	r4, r4
 80132fa:	4004      	ands	r4, r0
 80132fc:	b94b      	cbnz	r3, 8013312 <uxr_serialize_ReadSpecification+0x3e>
 80132fe:	7a31      	ldrb	r1, [r6, #8]
 8013300:	4638      	mov	r0, r7
 8013302:	f7fb fbe9 	bl	800ead8 <ucdr_serialize_bool>
 8013306:	7a33      	ldrb	r3, [r6, #8]
 8013308:	4004      	ands	r4, r0
 801330a:	b943      	cbnz	r3, 801331e <uxr_serialize_ReadSpecification+0x4a>
 801330c:	4620      	mov	r0, r4
 801330e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013312:	6871      	ldr	r1, [r6, #4]
 8013314:	4638      	mov	r0, r7
 8013316:	f003 fc4f 	bl	8016bb8 <ucdr_serialize_string>
 801331a:	4004      	ands	r4, r0
 801331c:	e7ef      	b.n	80132fe <uxr_serialize_ReadSpecification+0x2a>
 801331e:	8971      	ldrh	r1, [r6, #10]
 8013320:	4638      	mov	r0, r7
 8013322:	f7fb fc33 	bl	800eb8c <ucdr_serialize_uint16_t>
 8013326:	89b1      	ldrh	r1, [r6, #12]
 8013328:	4605      	mov	r5, r0
 801332a:	4638      	mov	r0, r7
 801332c:	f7fb fc2e 	bl	800eb8c <ucdr_serialize_uint16_t>
 8013330:	89f1      	ldrh	r1, [r6, #14]
 8013332:	4005      	ands	r5, r0
 8013334:	4638      	mov	r0, r7
 8013336:	f7fb fc29 	bl	800eb8c <ucdr_serialize_uint16_t>
 801333a:	8a31      	ldrh	r1, [r6, #16]
 801333c:	4680      	mov	r8, r0
 801333e:	4638      	mov	r0, r7
 8013340:	f7fb fc24 	bl	800eb8c <ucdr_serialize_uint16_t>
 8013344:	b2ed      	uxtb	r5, r5
 8013346:	4025      	ands	r5, r4
 8013348:	ea08 0505 	and.w	r5, r8, r5
 801334c:	ea00 0405 	and.w	r4, r0, r5
 8013350:	4620      	mov	r0, r4
 8013352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013356:	bf00      	nop

08013358 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013358:	f7ff ba16 	b.w	8012788 <uxr_serialize_CLIENT_Representation>

0801335c <uxr_serialize_CREATE_Payload>:
 801335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801335e:	2202      	movs	r2, #2
 8013360:	4607      	mov	r7, r0
 8013362:	460e      	mov	r6, r1
 8013364:	f003 fb08 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013368:	2202      	movs	r2, #2
 801336a:	18b1      	adds	r1, r6, r2
 801336c:	4605      	mov	r5, r0
 801336e:	4638      	mov	r0, r7
 8013370:	f003 fb02 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013374:	7931      	ldrb	r1, [r6, #4]
 8013376:	4604      	mov	r4, r0
 8013378:	4638      	mov	r0, r7
 801337a:	f7fb fbdb 	bl	800eb34 <ucdr_serialize_uint8_t>
 801337e:	b170      	cbz	r0, 801339e <uxr_serialize_CREATE_Payload+0x42>
 8013380:	7933      	ldrb	r3, [r6, #4]
 8013382:	402c      	ands	r4, r5
 8013384:	3b01      	subs	r3, #1
 8013386:	b2e4      	uxtb	r4, r4
 8013388:	2b0d      	cmp	r3, #13
 801338a:	d809      	bhi.n	80133a0 <uxr_serialize_CREATE_Payload+0x44>
 801338c:	e8df f003 	tbb	[pc, r3]
 8013390:	23230a4c 	.word	0x23230a4c
 8013394:	0a0a0a0a 	.word	0x0a0a0a0a
 8013398:	12121208 	.word	0x12121208
 801339c:	3e45      	.short	0x3e45
 801339e:	2400      	movs	r4, #0
 80133a0:	4620      	mov	r0, r4
 80133a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133a4:	f106 0108 	add.w	r1, r6, #8
 80133a8:	4638      	mov	r0, r7
 80133aa:	f7ff faf3 	bl	8012994 <uxr_serialize_DATAWRITER_Representation>
 80133ae:	4004      	ands	r4, r0
 80133b0:	4620      	mov	r0, r4
 80133b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133b4:	7a31      	ldrb	r1, [r6, #8]
 80133b6:	4638      	mov	r0, r7
 80133b8:	f7fb fbbc 	bl	800eb34 <ucdr_serialize_uint8_t>
 80133bc:	2800      	cmp	r0, #0
 80133be:	d0ee      	beq.n	801339e <uxr_serialize_CREATE_Payload+0x42>
 80133c0:	7a33      	ldrb	r3, [r6, #8]
 80133c2:	2b01      	cmp	r3, #1
 80133c4:	d001      	beq.n	80133ca <uxr_serialize_CREATE_Payload+0x6e>
 80133c6:	2b02      	cmp	r3, #2
 80133c8:	d1ea      	bne.n	80133a0 <uxr_serialize_CREATE_Payload+0x44>
 80133ca:	68f1      	ldr	r1, [r6, #12]
 80133cc:	4638      	mov	r0, r7
 80133ce:	f003 fbf3 	bl	8016bb8 <ucdr_serialize_string>
 80133d2:	4004      	ands	r4, r0
 80133d4:	e7e4      	b.n	80133a0 <uxr_serialize_CREATE_Payload+0x44>
 80133d6:	7a31      	ldrb	r1, [r6, #8]
 80133d8:	4638      	mov	r0, r7
 80133da:	f7fb fbab 	bl	800eb34 <ucdr_serialize_uint8_t>
 80133de:	4605      	mov	r5, r0
 80133e0:	b158      	cbz	r0, 80133fa <uxr_serialize_CREATE_Payload+0x9e>
 80133e2:	7a33      	ldrb	r3, [r6, #8]
 80133e4:	2b02      	cmp	r3, #2
 80133e6:	d034      	beq.n	8013452 <uxr_serialize_CREATE_Payload+0xf6>
 80133e8:	2b03      	cmp	r3, #3
 80133ea:	d106      	bne.n	80133fa <uxr_serialize_CREATE_Payload+0x9e>
 80133ec:	68f2      	ldr	r2, [r6, #12]
 80133ee:	f106 0110 	add.w	r1, r6, #16
 80133f2:	4638      	mov	r0, r7
 80133f4:	f003 fbb4 	bl	8016b60 <ucdr_serialize_sequence_uint8_t>
 80133f8:	4605      	mov	r5, r0
 80133fa:	2202      	movs	r2, #2
 80133fc:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8013400:	4638      	mov	r0, r7
 8013402:	f003 fab9 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013406:	4028      	ands	r0, r5
 8013408:	4004      	ands	r4, r0
 801340a:	e7c9      	b.n	80133a0 <uxr_serialize_CREATE_Payload+0x44>
 801340c:	f106 0108 	add.w	r1, r6, #8
 8013410:	4638      	mov	r0, r7
 8013412:	f7ff f9b9 	bl	8012788 <uxr_serialize_CLIENT_Representation>
 8013416:	4004      	ands	r4, r0
 8013418:	e7c2      	b.n	80133a0 <uxr_serialize_CREATE_Payload+0x44>
 801341a:	f106 0108 	add.w	r1, r6, #8
 801341e:	4638      	mov	r0, r7
 8013420:	f7ff fa6e 	bl	8012900 <uxr_serialize_AGENT_Representation>
 8013424:	4004      	ands	r4, r0
 8013426:	e7bb      	b.n	80133a0 <uxr_serialize_CREATE_Payload+0x44>
 8013428:	7a31      	ldrb	r1, [r6, #8]
 801342a:	4638      	mov	r0, r7
 801342c:	f7fb fb82 	bl	800eb34 <ucdr_serialize_uint8_t>
 8013430:	4605      	mov	r5, r0
 8013432:	b130      	cbz	r0, 8013442 <uxr_serialize_CREATE_Payload+0xe6>
 8013434:	7a33      	ldrb	r3, [r6, #8]
 8013436:	2b02      	cmp	r3, #2
 8013438:	d011      	beq.n	801345e <uxr_serialize_CREATE_Payload+0x102>
 801343a:	2b03      	cmp	r3, #3
 801343c:	d015      	beq.n	801346a <uxr_serialize_CREATE_Payload+0x10e>
 801343e:	2b01      	cmp	r3, #1
 8013440:	d00d      	beq.n	801345e <uxr_serialize_CREATE_Payload+0x102>
 8013442:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8013446:	4638      	mov	r0, r7
 8013448:	f7fc f8b0 	bl	800f5ac <ucdr_serialize_int16_t>
 801344c:	4028      	ands	r0, r5
 801344e:	4004      	ands	r4, r0
 8013450:	e7a6      	b.n	80133a0 <uxr_serialize_CREATE_Payload+0x44>
 8013452:	68f1      	ldr	r1, [r6, #12]
 8013454:	4638      	mov	r0, r7
 8013456:	f003 fbaf 	bl	8016bb8 <ucdr_serialize_string>
 801345a:	4605      	mov	r5, r0
 801345c:	e7cd      	b.n	80133fa <uxr_serialize_CREATE_Payload+0x9e>
 801345e:	68f1      	ldr	r1, [r6, #12]
 8013460:	4638      	mov	r0, r7
 8013462:	f003 fba9 	bl	8016bb8 <ucdr_serialize_string>
 8013466:	4605      	mov	r5, r0
 8013468:	e7eb      	b.n	8013442 <uxr_serialize_CREATE_Payload+0xe6>
 801346a:	68f2      	ldr	r2, [r6, #12]
 801346c:	f106 0110 	add.w	r1, r6, #16
 8013470:	4638      	mov	r0, r7
 8013472:	f003 fb75 	bl	8016b60 <ucdr_serialize_sequence_uint8_t>
 8013476:	4605      	mov	r5, r0
 8013478:	e7e3      	b.n	8013442 <uxr_serialize_CREATE_Payload+0xe6>
 801347a:	bf00      	nop

0801347c <uxr_serialize_GET_INFO_Payload>:
 801347c:	b570      	push	{r4, r5, r6, lr}
 801347e:	2202      	movs	r2, #2
 8013480:	4605      	mov	r5, r0
 8013482:	460e      	mov	r6, r1
 8013484:	f003 fa78 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013488:	2202      	movs	r2, #2
 801348a:	18b1      	adds	r1, r6, r2
 801348c:	4604      	mov	r4, r0
 801348e:	4628      	mov	r0, r5
 8013490:	f003 fa72 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013494:	6871      	ldr	r1, [r6, #4]
 8013496:	4004      	ands	r4, r0
 8013498:	4628      	mov	r0, r5
 801349a:	f7fb fd61 	bl	800ef60 <ucdr_serialize_uint32_t>
 801349e:	b2e4      	uxtb	r4, r4
 80134a0:	4020      	ands	r0, r4
 80134a2:	bd70      	pop	{r4, r5, r6, pc}

080134a4 <uxr_deserialize_GET_INFO_Payload>:
 80134a4:	b570      	push	{r4, r5, r6, lr}
 80134a6:	2202      	movs	r2, #2
 80134a8:	4605      	mov	r5, r0
 80134aa:	460e      	mov	r6, r1
 80134ac:	f003 fac8 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 80134b0:	2202      	movs	r2, #2
 80134b2:	18b1      	adds	r1, r6, r2
 80134b4:	4604      	mov	r4, r0
 80134b6:	4628      	mov	r0, r5
 80134b8:	f003 fac2 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 80134bc:	1d31      	adds	r1, r6, #4
 80134be:	4004      	ands	r4, r0
 80134c0:	4628      	mov	r0, r5
 80134c2:	f7fb fe7d 	bl	800f1c0 <ucdr_deserialize_uint32_t>
 80134c6:	b2e4      	uxtb	r4, r4
 80134c8:	4020      	ands	r0, r4
 80134ca:	bd70      	pop	{r4, r5, r6, pc}

080134cc <uxr_serialize_DELETE_Payload>:
 80134cc:	b570      	push	{r4, r5, r6, lr}
 80134ce:	2202      	movs	r2, #2
 80134d0:	4605      	mov	r5, r0
 80134d2:	460e      	mov	r6, r1
 80134d4:	f003 fa50 	bl	8016978 <ucdr_serialize_array_uint8_t>
 80134d8:	2202      	movs	r2, #2
 80134da:	4604      	mov	r4, r0
 80134dc:	18b1      	adds	r1, r6, r2
 80134de:	4628      	mov	r0, r5
 80134e0:	f003 fa4a 	bl	8016978 <ucdr_serialize_array_uint8_t>
 80134e4:	4020      	ands	r0, r4
 80134e6:	b2c0      	uxtb	r0, r0
 80134e8:	bd70      	pop	{r4, r5, r6, pc}
 80134ea:	bf00      	nop

080134ec <uxr_deserialize_STATUS_AGENT_Payload>:
 80134ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134f0:	4605      	mov	r5, r0
 80134f2:	460e      	mov	r6, r1
 80134f4:	f7fb fb34 	bl	800eb60 <ucdr_deserialize_uint8_t>
 80134f8:	1c71      	adds	r1, r6, #1
 80134fa:	4604      	mov	r4, r0
 80134fc:	4628      	mov	r0, r5
 80134fe:	f7fb fb2f 	bl	800eb60 <ucdr_deserialize_uint8_t>
 8013502:	2204      	movs	r2, #4
 8013504:	18b1      	adds	r1, r6, r2
 8013506:	4680      	mov	r8, r0
 8013508:	4628      	mov	r0, r5
 801350a:	f003 fa99 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 801350e:	f106 0108 	add.w	r1, r6, #8
 8013512:	4607      	mov	r7, r0
 8013514:	2202      	movs	r2, #2
 8013516:	4628      	mov	r0, r5
 8013518:	f003 fa92 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 801351c:	ea04 0308 	and.w	r3, r4, r8
 8013520:	b2db      	uxtb	r3, r3
 8013522:	ea03 0407 	and.w	r4, r3, r7
 8013526:	2202      	movs	r2, #2
 8013528:	4607      	mov	r7, r0
 801352a:	f106 010a 	add.w	r1, r6, #10
 801352e:	4628      	mov	r0, r5
 8013530:	f003 fa86 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 8013534:	f106 010c 	add.w	r1, r6, #12
 8013538:	4603      	mov	r3, r0
 801353a:	4628      	mov	r0, r5
 801353c:	461d      	mov	r5, r3
 801353e:	f7fb fae1 	bl	800eb04 <ucdr_deserialize_bool>
 8013542:	403c      	ands	r4, r7
 8013544:	4025      	ands	r5, r4
 8013546:	4028      	ands	r0, r5
 8013548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801354c <uxr_deserialize_STATUS_Payload>:
 801354c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013550:	2202      	movs	r2, #2
 8013552:	4606      	mov	r6, r0
 8013554:	460f      	mov	r7, r1
 8013556:	f003 fa73 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 801355a:	2202      	movs	r2, #2
 801355c:	18b9      	adds	r1, r7, r2
 801355e:	4605      	mov	r5, r0
 8013560:	4630      	mov	r0, r6
 8013562:	f003 fa6d 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 8013566:	1d39      	adds	r1, r7, #4
 8013568:	4680      	mov	r8, r0
 801356a:	4630      	mov	r0, r6
 801356c:	f7fb faf8 	bl	800eb60 <ucdr_deserialize_uint8_t>
 8013570:	1d79      	adds	r1, r7, #5
 8013572:	4604      	mov	r4, r0
 8013574:	4630      	mov	r0, r6
 8013576:	f7fb faf3 	bl	800eb60 <ucdr_deserialize_uint8_t>
 801357a:	ea05 0508 	and.w	r5, r5, r8
 801357e:	402c      	ands	r4, r5
 8013580:	4020      	ands	r0, r4
 8013582:	b2c0      	uxtb	r0, r0
 8013584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013588 <uxr_serialize_INFO_Payload>:
 8013588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801358c:	2202      	movs	r2, #2
 801358e:	460c      	mov	r4, r1
 8013590:	4605      	mov	r5, r0
 8013592:	f003 f9f1 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013596:	2202      	movs	r2, #2
 8013598:	18a1      	adds	r1, r4, r2
 801359a:	4680      	mov	r8, r0
 801359c:	4628      	mov	r0, r5
 801359e:	f003 f9eb 	bl	8016978 <ucdr_serialize_array_uint8_t>
 80135a2:	7921      	ldrb	r1, [r4, #4]
 80135a4:	4607      	mov	r7, r0
 80135a6:	4628      	mov	r0, r5
 80135a8:	f7fb fac4 	bl	800eb34 <ucdr_serialize_uint8_t>
 80135ac:	7961      	ldrb	r1, [r4, #5]
 80135ae:	4606      	mov	r6, r0
 80135b0:	4628      	mov	r0, r5
 80135b2:	f7fb fabf 	bl	800eb34 <ucdr_serialize_uint8_t>
 80135b6:	ea08 0807 	and.w	r8, r8, r7
 80135ba:	ea06 0608 	and.w	r6, r6, r8
 80135be:	4006      	ands	r6, r0
 80135c0:	7a21      	ldrb	r1, [r4, #8]
 80135c2:	4628      	mov	r0, r5
 80135c4:	f7fb fa88 	bl	800ead8 <ucdr_serialize_bool>
 80135c8:	7a23      	ldrb	r3, [r4, #8]
 80135ca:	b2f7      	uxtb	r7, r6
 80135cc:	4606      	mov	r6, r0
 80135ce:	b96b      	cbnz	r3, 80135ec <uxr_serialize_INFO_Payload+0x64>
 80135d0:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80135d4:	4628      	mov	r0, r5
 80135d6:	f7fb fa7f 	bl	800ead8 <ucdr_serialize_bool>
 80135da:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80135de:	4030      	ands	r0, r6
 80135e0:	b2c6      	uxtb	r6, r0
 80135e2:	b983      	cbnz	r3, 8013606 <uxr_serialize_INFO_Payload+0x7e>
 80135e4:	ea06 0007 	and.w	r0, r6, r7
 80135e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135ec:	7b21      	ldrb	r1, [r4, #12]
 80135ee:	4628      	mov	r0, r5
 80135f0:	f7fb faa0 	bl	800eb34 <ucdr_serialize_uint8_t>
 80135f4:	b188      	cbz	r0, 801361a <uxr_serialize_INFO_Payload+0x92>
 80135f6:	f104 010c 	add.w	r1, r4, #12
 80135fa:	4628      	mov	r0, r5
 80135fc:	f7ff f9f2 	bl	80129e4 <uxr_serialize_ObjectVariant.part.0>
 8013600:	4030      	ands	r0, r6
 8013602:	b2c6      	uxtb	r6, r0
 8013604:	e7e4      	b.n	80135d0 <uxr_serialize_INFO_Payload+0x48>
 8013606:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801360a:	4628      	mov	r0, r5
 801360c:	f7ff fd9e 	bl	801314c <uxr_serialize_ActivityInfoVariant>
 8013610:	4006      	ands	r6, r0
 8013612:	ea06 0007 	and.w	r0, r6, r7
 8013616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801361a:	4606      	mov	r6, r0
 801361c:	e7d8      	b.n	80135d0 <uxr_serialize_INFO_Payload+0x48>
 801361e:	bf00      	nop

08013620 <uxr_serialize_READ_DATA_Payload>:
 8013620:	b570      	push	{r4, r5, r6, lr}
 8013622:	2202      	movs	r2, #2
 8013624:	4605      	mov	r5, r0
 8013626:	460e      	mov	r6, r1
 8013628:	f003 f9a6 	bl	8016978 <ucdr_serialize_array_uint8_t>
 801362c:	2202      	movs	r2, #2
 801362e:	18b1      	adds	r1, r6, r2
 8013630:	4604      	mov	r4, r0
 8013632:	4628      	mov	r0, r5
 8013634:	f003 f9a0 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013638:	1d31      	adds	r1, r6, #4
 801363a:	4004      	ands	r4, r0
 801363c:	4628      	mov	r0, r5
 801363e:	f7ff fe49 	bl	80132d4 <uxr_serialize_ReadSpecification>
 8013642:	b2e4      	uxtb	r4, r4
 8013644:	4020      	ands	r0, r4
 8013646:	bd70      	pop	{r4, r5, r6, pc}

08013648 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013648:	b570      	push	{r4, r5, r6, lr}
 801364a:	2202      	movs	r2, #2
 801364c:	4605      	mov	r5, r0
 801364e:	460e      	mov	r6, r1
 8013650:	f003 f992 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013654:	2202      	movs	r2, #2
 8013656:	4604      	mov	r4, r0
 8013658:	18b1      	adds	r1, r6, r2
 801365a:	4628      	mov	r0, r5
 801365c:	f003 f98c 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013660:	4020      	ands	r0, r4
 8013662:	b2c0      	uxtb	r0, r0
 8013664:	bd70      	pop	{r4, r5, r6, pc}
 8013666:	bf00      	nop

08013668 <uxr_serialize_ACKNACK_Payload>:
 8013668:	b570      	push	{r4, r5, r6, lr}
 801366a:	460c      	mov	r4, r1
 801366c:	460e      	mov	r6, r1
 801366e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013672:	4605      	mov	r5, r0
 8013674:	f7fb fa8a 	bl	800eb8c <ucdr_serialize_uint16_t>
 8013678:	2202      	movs	r2, #2
 801367a:	4621      	mov	r1, r4
 801367c:	4604      	mov	r4, r0
 801367e:	4628      	mov	r0, r5
 8013680:	f003 f97a 	bl	8016978 <ucdr_serialize_array_uint8_t>
 8013684:	7931      	ldrb	r1, [r6, #4]
 8013686:	4004      	ands	r4, r0
 8013688:	4628      	mov	r0, r5
 801368a:	f7fb fa53 	bl	800eb34 <ucdr_serialize_uint8_t>
 801368e:	b2e4      	uxtb	r4, r4
 8013690:	4020      	ands	r0, r4
 8013692:	bd70      	pop	{r4, r5, r6, pc}

08013694 <uxr_deserialize_ACKNACK_Payload>:
 8013694:	b570      	push	{r4, r5, r6, lr}
 8013696:	4605      	mov	r5, r0
 8013698:	460e      	mov	r6, r1
 801369a:	f7fb fb77 	bl	800ed8c <ucdr_deserialize_uint16_t>
 801369e:	2202      	movs	r2, #2
 80136a0:	18b1      	adds	r1, r6, r2
 80136a2:	4604      	mov	r4, r0
 80136a4:	4628      	mov	r0, r5
 80136a6:	f003 f9cb 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 80136aa:	1d31      	adds	r1, r6, #4
 80136ac:	4004      	ands	r4, r0
 80136ae:	4628      	mov	r0, r5
 80136b0:	f7fb fa56 	bl	800eb60 <ucdr_deserialize_uint8_t>
 80136b4:	b2e4      	uxtb	r4, r4
 80136b6:	4020      	ands	r0, r4
 80136b8:	bd70      	pop	{r4, r5, r6, pc}
 80136ba:	bf00      	nop

080136bc <uxr_serialize_HEARTBEAT_Payload>:
 80136bc:	b570      	push	{r4, r5, r6, lr}
 80136be:	460d      	mov	r5, r1
 80136c0:	8809      	ldrh	r1, [r1, #0]
 80136c2:	4606      	mov	r6, r0
 80136c4:	f7fb fa62 	bl	800eb8c <ucdr_serialize_uint16_t>
 80136c8:	8869      	ldrh	r1, [r5, #2]
 80136ca:	4604      	mov	r4, r0
 80136cc:	4630      	mov	r0, r6
 80136ce:	f7fb fa5d 	bl	800eb8c <ucdr_serialize_uint16_t>
 80136d2:	7929      	ldrb	r1, [r5, #4]
 80136d4:	4004      	ands	r4, r0
 80136d6:	4630      	mov	r0, r6
 80136d8:	f7fb fa2c 	bl	800eb34 <ucdr_serialize_uint8_t>
 80136dc:	b2e4      	uxtb	r4, r4
 80136de:	4020      	ands	r0, r4
 80136e0:	bd70      	pop	{r4, r5, r6, pc}
 80136e2:	bf00      	nop

080136e4 <uxr_deserialize_HEARTBEAT_Payload>:
 80136e4:	b570      	push	{r4, r5, r6, lr}
 80136e6:	4605      	mov	r5, r0
 80136e8:	460e      	mov	r6, r1
 80136ea:	f7fb fb4f 	bl	800ed8c <ucdr_deserialize_uint16_t>
 80136ee:	1cb1      	adds	r1, r6, #2
 80136f0:	4604      	mov	r4, r0
 80136f2:	4628      	mov	r0, r5
 80136f4:	f7fb fb4a 	bl	800ed8c <ucdr_deserialize_uint16_t>
 80136f8:	1d31      	adds	r1, r6, #4
 80136fa:	4004      	ands	r4, r0
 80136fc:	4628      	mov	r0, r5
 80136fe:	f7fb fa2f 	bl	800eb60 <ucdr_deserialize_uint8_t>
 8013702:	b2e4      	uxtb	r4, r4
 8013704:	4020      	ands	r0, r4
 8013706:	bd70      	pop	{r4, r5, r6, pc}

08013708 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801370c:	4605      	mov	r5, r0
 801370e:	460e      	mov	r6, r1
 8013710:	f7fc f8d8 	bl	800f8c4 <ucdr_deserialize_int32_t>
 8013714:	1d31      	adds	r1, r6, #4
 8013716:	4607      	mov	r7, r0
 8013718:	4628      	mov	r0, r5
 801371a:	f7fb fd51 	bl	800f1c0 <ucdr_deserialize_uint32_t>
 801371e:	f106 0108 	add.w	r1, r6, #8
 8013722:	4680      	mov	r8, r0
 8013724:	4628      	mov	r0, r5
 8013726:	f7fc f8cd 	bl	800f8c4 <ucdr_deserialize_int32_t>
 801372a:	f106 010c 	add.w	r1, r6, #12
 801372e:	4604      	mov	r4, r0
 8013730:	4628      	mov	r0, r5
 8013732:	f7fb fd45 	bl	800f1c0 <ucdr_deserialize_uint32_t>
 8013736:	ea07 0708 	and.w	r7, r7, r8
 801373a:	403c      	ands	r4, r7
 801373c:	f106 0110 	add.w	r1, r6, #16
 8013740:	4004      	ands	r4, r0
 8013742:	4628      	mov	r0, r5
 8013744:	f7fc f8be 	bl	800f8c4 <ucdr_deserialize_int32_t>
 8013748:	f106 0114 	add.w	r1, r6, #20
 801374c:	4607      	mov	r7, r0
 801374e:	4628      	mov	r0, r5
 8013750:	f7fb fd36 	bl	800f1c0 <ucdr_deserialize_uint32_t>
 8013754:	b2e4      	uxtb	r4, r4
 8013756:	403c      	ands	r4, r7
 8013758:	4020      	ands	r0, r4
 801375a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801375e:	bf00      	nop

08013760 <uxr_serialize_SampleIdentity>:
 8013760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013764:	220c      	movs	r2, #12
 8013766:	4604      	mov	r4, r0
 8013768:	460d      	mov	r5, r1
 801376a:	f003 f905 	bl	8016978 <ucdr_serialize_array_uint8_t>
 801376e:	2203      	movs	r2, #3
 8013770:	f105 010c 	add.w	r1, r5, #12
 8013774:	4607      	mov	r7, r0
 8013776:	4620      	mov	r0, r4
 8013778:	f003 f8fe 	bl	8016978 <ucdr_serialize_array_uint8_t>
 801377c:	7be9      	ldrb	r1, [r5, #15]
 801377e:	4680      	mov	r8, r0
 8013780:	4620      	mov	r0, r4
 8013782:	f7fb f9d7 	bl	800eb34 <ucdr_serialize_uint8_t>
 8013786:	6929      	ldr	r1, [r5, #16]
 8013788:	4606      	mov	r6, r0
 801378a:	4620      	mov	r0, r4
 801378c:	f7fc f802 	bl	800f794 <ucdr_serialize_int32_t>
 8013790:	6969      	ldr	r1, [r5, #20]
 8013792:	4603      	mov	r3, r0
 8013794:	4620      	mov	r0, r4
 8013796:	ea07 0708 	and.w	r7, r7, r8
 801379a:	461c      	mov	r4, r3
 801379c:	f7fb fbe0 	bl	800ef60 <ucdr_serialize_uint32_t>
 80137a0:	403e      	ands	r6, r7
 80137a2:	4034      	ands	r4, r6
 80137a4:	4020      	ands	r0, r4
 80137a6:	b2c0      	uxtb	r0, r0
 80137a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080137ac <uxr_deserialize_SampleIdentity>:
 80137ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137b0:	220c      	movs	r2, #12
 80137b2:	4604      	mov	r4, r0
 80137b4:	460d      	mov	r5, r1
 80137b6:	f003 f943 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 80137ba:	2203      	movs	r2, #3
 80137bc:	f105 010c 	add.w	r1, r5, #12
 80137c0:	4607      	mov	r7, r0
 80137c2:	4620      	mov	r0, r4
 80137c4:	f003 f93c 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 80137c8:	f105 010f 	add.w	r1, r5, #15
 80137cc:	4680      	mov	r8, r0
 80137ce:	4620      	mov	r0, r4
 80137d0:	f7fb f9c6 	bl	800eb60 <ucdr_deserialize_uint8_t>
 80137d4:	f105 0110 	add.w	r1, r5, #16
 80137d8:	4606      	mov	r6, r0
 80137da:	4620      	mov	r0, r4
 80137dc:	f7fc f872 	bl	800f8c4 <ucdr_deserialize_int32_t>
 80137e0:	f105 0114 	add.w	r1, r5, #20
 80137e4:	4603      	mov	r3, r0
 80137e6:	4620      	mov	r0, r4
 80137e8:	ea07 0708 	and.w	r7, r7, r8
 80137ec:	461c      	mov	r4, r3
 80137ee:	f7fb fce7 	bl	800f1c0 <ucdr_deserialize_uint32_t>
 80137f2:	403e      	ands	r6, r7
 80137f4:	4034      	ands	r4, r6
 80137f6:	4020      	ands	r0, r4
 80137f8:	b2c0      	uxtb	r0, r0
 80137fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137fe:	bf00      	nop

08013800 <rcl_client_get_rmw_handle>:
 8013800:	b118      	cbz	r0, 801380a <rcl_client_get_rmw_handle+0xa>
 8013802:	6800      	ldr	r0, [r0, #0]
 8013804:	b108      	cbz	r0, 801380a <rcl_client_get_rmw_handle+0xa>
 8013806:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801380a:	4770      	bx	lr

0801380c <rcl_send_request>:
 801380c:	b570      	push	{r4, r5, r6, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	b1e8      	cbz	r0, 801384e <rcl_send_request+0x42>
 8013812:	4604      	mov	r4, r0
 8013814:	6800      	ldr	r0, [r0, #0]
 8013816:	b1d0      	cbz	r0, 801384e <rcl_send_request+0x42>
 8013818:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801381c:	b1bb      	cbz	r3, 801384e <rcl_send_request+0x42>
 801381e:	460e      	mov	r6, r1
 8013820:	b1d1      	cbz	r1, 8013858 <rcl_send_request+0x4c>
 8013822:	4615      	mov	r5, r2
 8013824:	b1c2      	cbz	r2, 8013858 <rcl_send_request+0x4c>
 8013826:	2105      	movs	r1, #5
 8013828:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801382c:	f7f9 f9ca 	bl	800cbc4 <__atomic_load_8>
 8013830:	6823      	ldr	r3, [r4, #0]
 8013832:	e9c5 0100 	strd	r0, r1, [r5]
 8013836:	462a      	mov	r2, r5
 8013838:	4631      	mov	r1, r6
 801383a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801383e:	f002 fcfd 	bl	801623c <rmw_send_request>
 8013842:	4606      	mov	r6, r0
 8013844:	b160      	cbz	r0, 8013860 <rcl_send_request+0x54>
 8013846:	2601      	movs	r6, #1
 8013848:	4630      	mov	r0, r6
 801384a:	b002      	add	sp, #8
 801384c:	bd70      	pop	{r4, r5, r6, pc}
 801384e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8013852:	4630      	mov	r0, r6
 8013854:	b002      	add	sp, #8
 8013856:	bd70      	pop	{r4, r5, r6, pc}
 8013858:	260b      	movs	r6, #11
 801385a:	4630      	mov	r0, r6
 801385c:	b002      	add	sp, #8
 801385e:	bd70      	pop	{r4, r5, r6, pc}
 8013860:	6820      	ldr	r0, [r4, #0]
 8013862:	2105      	movs	r1, #5
 8013864:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013868:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801386c:	9100      	str	r1, [sp, #0]
 801386e:	f7f9 fa15 	bl	800cc9c <__atomic_exchange_8>
 8013872:	4630      	mov	r0, r6
 8013874:	b002      	add	sp, #8
 8013876:	bd70      	pop	{r4, r5, r6, pc}

08013878 <rcl_take_response>:
 8013878:	b570      	push	{r4, r5, r6, lr}
 801387a:	468e      	mov	lr, r1
 801387c:	460c      	mov	r4, r1
 801387e:	4616      	mov	r6, r2
 8013880:	4605      	mov	r5, r0
 8013882:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013886:	b08c      	sub	sp, #48	@ 0x30
 8013888:	f10d 0c18 	add.w	ip, sp, #24
 801388c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013890:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013894:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013898:	b35d      	cbz	r5, 80138f2 <rcl_take_response+0x7a>
 801389a:	682b      	ldr	r3, [r5, #0]
 801389c:	b34b      	cbz	r3, 80138f2 <rcl_take_response+0x7a>
 801389e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80138a2:	b330      	cbz	r0, 80138f2 <rcl_take_response+0x7a>
 80138a4:	b346      	cbz	r6, 80138f8 <rcl_take_response+0x80>
 80138a6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013900 <rcl_take_response+0x88>
 80138aa:	2300      	movs	r3, #0
 80138ac:	f88d 3007 	strb.w	r3, [sp, #7]
 80138b0:	4632      	mov	r2, r6
 80138b2:	f10d 0307 	add.w	r3, sp, #7
 80138b6:	a902      	add	r1, sp, #8
 80138b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80138bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80138c0:	f002 fdc4 	bl	801644c <rmw_take_response>
 80138c4:	4605      	mov	r5, r0
 80138c6:	b9c8      	cbnz	r0, 80138fc <rcl_take_response+0x84>
 80138c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80138cc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80138d0:	2a00      	cmp	r2, #0
 80138d2:	bf08      	it	eq
 80138d4:	461d      	moveq	r5, r3
 80138d6:	f10d 0e18 	add.w	lr, sp, #24
 80138da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80138de:	46a4      	mov	ip, r4
 80138e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80138e4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80138e8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80138ec:	4628      	mov	r0, r5
 80138ee:	b00c      	add	sp, #48	@ 0x30
 80138f0:	bd70      	pop	{r4, r5, r6, pc}
 80138f2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80138f6:	e7ee      	b.n	80138d6 <rcl_take_response+0x5e>
 80138f8:	250b      	movs	r5, #11
 80138fa:	e7ec      	b.n	80138d6 <rcl_take_response+0x5e>
 80138fc:	2501      	movs	r5, #1
 80138fe:	e7ea      	b.n	80138d6 <rcl_take_response+0x5e>
	...

08013908 <rcl_client_is_valid>:
 8013908:	b130      	cbz	r0, 8013918 <rcl_client_is_valid+0x10>
 801390a:	6800      	ldr	r0, [r0, #0]
 801390c:	b120      	cbz	r0, 8013918 <rcl_client_is_valid+0x10>
 801390e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013912:	3800      	subs	r0, #0
 8013914:	bf18      	it	ne
 8013916:	2001      	movne	r0, #1
 8013918:	4770      	bx	lr
 801391a:	bf00      	nop

0801391c <rcl_convert_rmw_ret_to_rcl_ret>:
 801391c:	280b      	cmp	r0, #11
 801391e:	dc0d      	bgt.n	801393c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013920:	2800      	cmp	r0, #0
 8013922:	db09      	blt.n	8013938 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013924:	280b      	cmp	r0, #11
 8013926:	d807      	bhi.n	8013938 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013928:	e8df f000 	tbb	[pc, r0]
 801392c:	07060607 	.word	0x07060607
 8013930:	06060606 	.word	0x06060606
 8013934:	07070606 	.word	0x07070606
 8013938:	2001      	movs	r0, #1
 801393a:	4770      	bx	lr
 801393c:	28cb      	cmp	r0, #203	@ 0xcb
 801393e:	bf18      	it	ne
 8013940:	2001      	movne	r0, #1
 8013942:	4770      	bx	lr

08013944 <rcl_get_zero_initialized_guard_condition>:
 8013944:	4a03      	ldr	r2, [pc, #12]	@ (8013954 <rcl_get_zero_initialized_guard_condition+0x10>)
 8013946:	4603      	mov	r3, r0
 8013948:	e892 0003 	ldmia.w	r2, {r0, r1}
 801394c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013950:	4618      	mov	r0, r3
 8013952:	4770      	bx	lr
 8013954:	08019e2c 	.word	0x08019e2c

08013958 <rcl_guard_condition_init>:
 8013958:	b082      	sub	sp, #8
 801395a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801395c:	b087      	sub	sp, #28
 801395e:	ac0c      	add	r4, sp, #48	@ 0x30
 8013960:	e884 000c 	stmia.w	r4, {r2, r3}
 8013964:	46a6      	mov	lr, r4
 8013966:	460d      	mov	r5, r1
 8013968:	4604      	mov	r4, r0
 801396a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801396e:	f10d 0c04 	add.w	ip, sp, #4
 8013972:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013976:	f8de 3000 	ldr.w	r3, [lr]
 801397a:	f8cc 3000 	str.w	r3, [ip]
 801397e:	a801      	add	r0, sp, #4
 8013980:	f7f9 f912 	bl	800cba8 <rcutils_allocator_is_valid>
 8013984:	b338      	cbz	r0, 80139d6 <rcl_guard_condition_init+0x7e>
 8013986:	b334      	cbz	r4, 80139d6 <rcl_guard_condition_init+0x7e>
 8013988:	6866      	ldr	r6, [r4, #4]
 801398a:	b9ee      	cbnz	r6, 80139c8 <rcl_guard_condition_init+0x70>
 801398c:	b31d      	cbz	r5, 80139d6 <rcl_guard_condition_init+0x7e>
 801398e:	4628      	mov	r0, r5
 8013990:	f7f7 f874 	bl	800aa7c <rcl_context_is_valid>
 8013994:	b308      	cbz	r0, 80139da <rcl_guard_condition_init+0x82>
 8013996:	9b01      	ldr	r3, [sp, #4]
 8013998:	9905      	ldr	r1, [sp, #20]
 801399a:	201c      	movs	r0, #28
 801399c:	4798      	blx	r3
 801399e:	4607      	mov	r7, r0
 80139a0:	6060      	str	r0, [r4, #4]
 80139a2:	b310      	cbz	r0, 80139ea <rcl_guard_condition_init+0x92>
 80139a4:	6828      	ldr	r0, [r5, #0]
 80139a6:	3028      	adds	r0, #40	@ 0x28
 80139a8:	f002 fbae 	bl	8016108 <rmw_create_guard_condition>
 80139ac:	6038      	str	r0, [r7, #0]
 80139ae:	6860      	ldr	r0, [r4, #4]
 80139b0:	6805      	ldr	r5, [r0, #0]
 80139b2:	b1a5      	cbz	r5, 80139de <rcl_guard_condition_init+0x86>
 80139b4:	2301      	movs	r3, #1
 80139b6:	ac01      	add	r4, sp, #4
 80139b8:	7103      	strb	r3, [r0, #4]
 80139ba:	f100 0708 	add.w	r7, r0, #8
 80139be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139c0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80139c2:	6823      	ldr	r3, [r4, #0]
 80139c4:	603b      	str	r3, [r7, #0]
 80139c6:	e000      	b.n	80139ca <rcl_guard_condition_init+0x72>
 80139c8:	2664      	movs	r6, #100	@ 0x64
 80139ca:	4630      	mov	r0, r6
 80139cc:	b007      	add	sp, #28
 80139ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80139d2:	b002      	add	sp, #8
 80139d4:	4770      	bx	lr
 80139d6:	260b      	movs	r6, #11
 80139d8:	e7f7      	b.n	80139ca <rcl_guard_condition_init+0x72>
 80139da:	2665      	movs	r6, #101	@ 0x65
 80139dc:	e7f5      	b.n	80139ca <rcl_guard_condition_init+0x72>
 80139de:	9b02      	ldr	r3, [sp, #8]
 80139e0:	9905      	ldr	r1, [sp, #20]
 80139e2:	4798      	blx	r3
 80139e4:	2601      	movs	r6, #1
 80139e6:	6065      	str	r5, [r4, #4]
 80139e8:	e7ef      	b.n	80139ca <rcl_guard_condition_init+0x72>
 80139ea:	260a      	movs	r6, #10
 80139ec:	e7ed      	b.n	80139ca <rcl_guard_condition_init+0x72>
 80139ee:	bf00      	nop

080139f0 <rcl_guard_condition_init_from_rmw>:
 80139f0:	b082      	sub	sp, #8
 80139f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139f6:	b086      	sub	sp, #24
 80139f8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80139fc:	4604      	mov	r4, r0
 80139fe:	f84c 3f04 	str.w	r3, [ip, #4]!
 8013a02:	460e      	mov	r6, r1
 8013a04:	4617      	mov	r7, r2
 8013a06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a0a:	f10d 0e04 	add.w	lr, sp, #4
 8013a0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013a12:	f8dc 3000 	ldr.w	r3, [ip]
 8013a16:	f8ce 3000 	str.w	r3, [lr]
 8013a1a:	a801      	add	r0, sp, #4
 8013a1c:	f7f9 f8c4 	bl	800cba8 <rcutils_allocator_is_valid>
 8013a20:	b350      	cbz	r0, 8013a78 <rcl_guard_condition_init_from_rmw+0x88>
 8013a22:	b34c      	cbz	r4, 8013a78 <rcl_guard_condition_init_from_rmw+0x88>
 8013a24:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013a28:	f1b8 0f00 	cmp.w	r8, #0
 8013a2c:	d11e      	bne.n	8013a6c <rcl_guard_condition_init_from_rmw+0x7c>
 8013a2e:	b31f      	cbz	r7, 8013a78 <rcl_guard_condition_init_from_rmw+0x88>
 8013a30:	4638      	mov	r0, r7
 8013a32:	f7f7 f823 	bl	800aa7c <rcl_context_is_valid>
 8013a36:	b328      	cbz	r0, 8013a84 <rcl_guard_condition_init_from_rmw+0x94>
 8013a38:	9b01      	ldr	r3, [sp, #4]
 8013a3a:	9905      	ldr	r1, [sp, #20]
 8013a3c:	201c      	movs	r0, #28
 8013a3e:	4798      	blx	r3
 8013a40:	4605      	mov	r5, r0
 8013a42:	6060      	str	r0, [r4, #4]
 8013a44:	b358      	cbz	r0, 8013a9e <rcl_guard_condition_init_from_rmw+0xae>
 8013a46:	b1fe      	cbz	r6, 8013a88 <rcl_guard_condition_init_from_rmw+0x98>
 8013a48:	6006      	str	r6, [r0, #0]
 8013a4a:	f880 8004 	strb.w	r8, [r0, #4]
 8013a4e:	ac01      	add	r4, sp, #4
 8013a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a52:	f105 0c08 	add.w	ip, r5, #8
 8013a56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a5a:	6823      	ldr	r3, [r4, #0]
 8013a5c:	f8cc 3000 	str.w	r3, [ip]
 8013a60:	2000      	movs	r0, #0
 8013a62:	b006      	add	sp, #24
 8013a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a68:	b002      	add	sp, #8
 8013a6a:	4770      	bx	lr
 8013a6c:	2064      	movs	r0, #100	@ 0x64
 8013a6e:	b006      	add	sp, #24
 8013a70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a74:	b002      	add	sp, #8
 8013a76:	4770      	bx	lr
 8013a78:	200b      	movs	r0, #11
 8013a7a:	b006      	add	sp, #24
 8013a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a80:	b002      	add	sp, #8
 8013a82:	4770      	bx	lr
 8013a84:	2065      	movs	r0, #101	@ 0x65
 8013a86:	e7f2      	b.n	8013a6e <rcl_guard_condition_init_from_rmw+0x7e>
 8013a88:	6838      	ldr	r0, [r7, #0]
 8013a8a:	3028      	adds	r0, #40	@ 0x28
 8013a8c:	f002 fb3c 	bl	8016108 <rmw_create_guard_condition>
 8013a90:	6028      	str	r0, [r5, #0]
 8013a92:	6865      	ldr	r5, [r4, #4]
 8013a94:	682e      	ldr	r6, [r5, #0]
 8013a96:	b126      	cbz	r6, 8013aa2 <rcl_guard_condition_init_from_rmw+0xb2>
 8013a98:	2301      	movs	r3, #1
 8013a9a:	712b      	strb	r3, [r5, #4]
 8013a9c:	e7d7      	b.n	8013a4e <rcl_guard_condition_init_from_rmw+0x5e>
 8013a9e:	200a      	movs	r0, #10
 8013aa0:	e7e5      	b.n	8013a6e <rcl_guard_condition_init_from_rmw+0x7e>
 8013aa2:	4628      	mov	r0, r5
 8013aa4:	9b02      	ldr	r3, [sp, #8]
 8013aa6:	9905      	ldr	r1, [sp, #20]
 8013aa8:	4798      	blx	r3
 8013aaa:	6066      	str	r6, [r4, #4]
 8013aac:	2001      	movs	r0, #1
 8013aae:	e7de      	b.n	8013a6e <rcl_guard_condition_init_from_rmw+0x7e>

08013ab0 <rcl_guard_condition_fini>:
 8013ab0:	b570      	push	{r4, r5, r6, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	b1f0      	cbz	r0, 8013af4 <rcl_guard_condition_fini+0x44>
 8013ab6:	6843      	ldr	r3, [r0, #4]
 8013ab8:	4604      	mov	r4, r0
 8013aba:	b163      	cbz	r3, 8013ad6 <rcl_guard_condition_fini+0x26>
 8013abc:	6818      	ldr	r0, [r3, #0]
 8013abe:	68de      	ldr	r6, [r3, #12]
 8013ac0:	6999      	ldr	r1, [r3, #24]
 8013ac2:	b160      	cbz	r0, 8013ade <rcl_guard_condition_fini+0x2e>
 8013ac4:	791d      	ldrb	r5, [r3, #4]
 8013ac6:	b965      	cbnz	r5, 8013ae2 <rcl_guard_condition_fini+0x32>
 8013ac8:	4618      	mov	r0, r3
 8013aca:	47b0      	blx	r6
 8013acc:	2300      	movs	r3, #0
 8013ace:	4628      	mov	r0, r5
 8013ad0:	6063      	str	r3, [r4, #4]
 8013ad2:	b002      	add	sp, #8
 8013ad4:	bd70      	pop	{r4, r5, r6, pc}
 8013ad6:	461d      	mov	r5, r3
 8013ad8:	4628      	mov	r0, r5
 8013ada:	b002      	add	sp, #8
 8013adc:	bd70      	pop	{r4, r5, r6, pc}
 8013ade:	4605      	mov	r5, r0
 8013ae0:	e7f2      	b.n	8013ac8 <rcl_guard_condition_fini+0x18>
 8013ae2:	9101      	str	r1, [sp, #4]
 8013ae4:	f002 fb24 	bl	8016130 <rmw_destroy_guard_condition>
 8013ae8:	1e05      	subs	r5, r0, #0
 8013aea:	6863      	ldr	r3, [r4, #4]
 8013aec:	9901      	ldr	r1, [sp, #4]
 8013aee:	bf18      	it	ne
 8013af0:	2501      	movne	r5, #1
 8013af2:	e7e9      	b.n	8013ac8 <rcl_guard_condition_fini+0x18>
 8013af4:	250b      	movs	r5, #11
 8013af6:	4628      	mov	r0, r5
 8013af8:	b002      	add	sp, #8
 8013afa:	bd70      	pop	{r4, r5, r6, pc}

08013afc <rcl_guard_condition_get_default_options>:
 8013afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013afe:	b087      	sub	sp, #28
 8013b00:	4606      	mov	r6, r0
 8013b02:	4668      	mov	r0, sp
 8013b04:	f7f9 f842 	bl	800cb8c <rcutils_get_default_allocator>
 8013b08:	4b09      	ldr	r3, [pc, #36]	@ (8013b30 <rcl_guard_condition_get_default_options+0x34>)
 8013b0a:	46ee      	mov	lr, sp
 8013b0c:	469c      	mov	ip, r3
 8013b0e:	461d      	mov	r5, r3
 8013b10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b1a:	4634      	mov	r4, r6
 8013b1c:	f8de 7000 	ldr.w	r7, [lr]
 8013b20:	f8cc 7000 	str.w	r7, [ip]
 8013b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013b26:	4630      	mov	r0, r6
 8013b28:	6027      	str	r7, [r4, #0]
 8013b2a:	b007      	add	sp, #28
 8013b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b2e:	bf00      	nop
 8013b30:	20010e80 	.word	0x20010e80

08013b34 <rcl_trigger_guard_condition>:
 8013b34:	b148      	cbz	r0, 8013b4a <rcl_trigger_guard_condition+0x16>
 8013b36:	b508      	push	{r3, lr}
 8013b38:	6843      	ldr	r3, [r0, #4]
 8013b3a:	b143      	cbz	r3, 8013b4e <rcl_trigger_guard_condition+0x1a>
 8013b3c:	6818      	ldr	r0, [r3, #0]
 8013b3e:	f002 fccf 	bl	80164e0 <rmw_trigger_guard_condition>
 8013b42:	3800      	subs	r0, #0
 8013b44:	bf18      	it	ne
 8013b46:	2001      	movne	r0, #1
 8013b48:	bd08      	pop	{r3, pc}
 8013b4a:	200b      	movs	r0, #11
 8013b4c:	4770      	bx	lr
 8013b4e:	200b      	movs	r0, #11
 8013b50:	bd08      	pop	{r3, pc}
 8013b52:	bf00      	nop

08013b54 <rcl_guard_condition_get_rmw_handle>:
 8013b54:	b110      	cbz	r0, 8013b5c <rcl_guard_condition_get_rmw_handle+0x8>
 8013b56:	6840      	ldr	r0, [r0, #4]
 8013b58:	b100      	cbz	r0, 8013b5c <rcl_guard_condition_get_rmw_handle+0x8>
 8013b5a:	6800      	ldr	r0, [r0, #0]
 8013b5c:	4770      	bx	lr
 8013b5e:	bf00      	nop

08013b60 <rcl_init>:
 8013b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b64:	1e05      	subs	r5, r0, #0
 8013b66:	b09c      	sub	sp, #112	@ 0x70
 8013b68:	460e      	mov	r6, r1
 8013b6a:	4690      	mov	r8, r2
 8013b6c:	461f      	mov	r7, r3
 8013b6e:	f340 8099 	ble.w	8013ca4 <rcl_init+0x144>
 8013b72:	2900      	cmp	r1, #0
 8013b74:	f000 8099 	beq.w	8013caa <rcl_init+0x14a>
 8013b78:	f1a1 0e04 	sub.w	lr, r1, #4
 8013b7c:	f04f 0c00 	mov.w	ip, #0
 8013b80:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8013b84:	f10c 0c01 	add.w	ip, ip, #1
 8013b88:	2c00      	cmp	r4, #0
 8013b8a:	f000 808e 	beq.w	8013caa <rcl_init+0x14a>
 8013b8e:	4565      	cmp	r5, ip
 8013b90:	d1f6      	bne.n	8013b80 <rcl_init+0x20>
 8013b92:	f1b8 0f00 	cmp.w	r8, #0
 8013b96:	f000 8088 	beq.w	8013caa <rcl_init+0x14a>
 8013b9a:	f8d8 4000 	ldr.w	r4, [r8]
 8013b9e:	2c00      	cmp	r4, #0
 8013ba0:	f000 8083 	beq.w	8013caa <rcl_init+0x14a>
 8013ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ba6:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8013baa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013bae:	6823      	ldr	r3, [r4, #0]
 8013bb0:	f8cc 3000 	str.w	r3, [ip]
 8013bb4:	a817      	add	r0, sp, #92	@ 0x5c
 8013bb6:	f7f8 fff7 	bl	800cba8 <rcutils_allocator_is_valid>
 8013bba:	2800      	cmp	r0, #0
 8013bbc:	d075      	beq.n	8013caa <rcl_init+0x14a>
 8013bbe:	2f00      	cmp	r7, #0
 8013bc0:	d073      	beq.n	8013caa <rcl_init+0x14a>
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d175      	bne.n	8013cb4 <rcl_init+0x154>
 8013bc8:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8013bcc:	2178      	movs	r1, #120	@ 0x78
 8013bce:	2001      	movs	r0, #1
 8013bd0:	4798      	blx	r3
 8013bd2:	4604      	mov	r4, r0
 8013bd4:	6038      	str	r0, [r7, #0]
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	f000 80a0 	beq.w	8013d1c <rcl_init+0x1bc>
 8013bdc:	a802      	add	r0, sp, #8
 8013bde:	f002 f833 	bl	8015c48 <rmw_get_zero_initialized_context>
 8013be2:	a902      	add	r1, sp, #8
 8013be4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013be8:	2250      	movs	r2, #80	@ 0x50
 8013bea:	ac17      	add	r4, sp, #92	@ 0x5c
 8013bec:	f004 fce5 	bl	80185ba <memcpy>
 8013bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013bf2:	f8d7 e000 	ldr.w	lr, [r7]
 8013bf6:	46f4      	mov	ip, lr
 8013bf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013bfc:	6823      	ldr	r3, [r4, #0]
 8013bfe:	f8cc 3000 	str.w	r3, [ip]
 8013c02:	f10e 0114 	add.w	r1, lr, #20
 8013c06:	4640      	mov	r0, r8
 8013c08:	f7f7 f84a 	bl	800aca0 <rcl_init_options_copy>
 8013c0c:	4604      	mov	r4, r0
 8013c0e:	2800      	cmp	r0, #0
 8013c10:	d144      	bne.n	8013c9c <rcl_init+0x13c>
 8013c12:	f8d7 9000 	ldr.w	r9, [r7]
 8013c16:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8013c1a:	f8c9 0020 	str.w	r0, [r9, #32]
 8013c1e:	f8c9 5018 	str.w	r5, [r9, #24]
 8013c22:	f8c9 801c 	str.w	r8, [r9, #28]
 8013c26:	2d00      	cmp	r5, #0
 8013c28:	d04b      	beq.n	8013cc2 <rcl_init+0x162>
 8013c2a:	2e00      	cmp	r6, #0
 8013c2c:	d049      	beq.n	8013cc2 <rcl_init+0x162>
 8013c2e:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8013c32:	2104      	movs	r1, #4
 8013c34:	4628      	mov	r0, r5
 8013c36:	4798      	blx	r3
 8013c38:	f8c9 0020 	str.w	r0, [r9, #32]
 8013c3c:	f8d7 9000 	ldr.w	r9, [r7]
 8013c40:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013c44:	46ca      	mov	sl, r9
 8013c46:	b343      	cbz	r3, 8013c9a <rcl_init+0x13a>
 8013c48:	2d01      	cmp	r5, #1
 8013c4a:	f178 0300 	sbcs.w	r3, r8, #0
 8013c4e:	db38      	blt.n	8013cc2 <rcl_init+0x162>
 8013c50:	2400      	movs	r4, #0
 8013c52:	3e04      	subs	r6, #4
 8013c54:	46a1      	mov	r9, r4
 8013c56:	e00b      	b.n	8013c70 <rcl_init+0x110>
 8013c58:	6831      	ldr	r1, [r6, #0]
 8013c5a:	f004 fcae 	bl	80185ba <memcpy>
 8013c5e:	3401      	adds	r4, #1
 8013c60:	f149 0900 	adc.w	r9, r9, #0
 8013c64:	45c8      	cmp	r8, r9
 8013c66:	bf08      	it	eq
 8013c68:	42a5      	cmpeq	r5, r4
 8013c6a:	d028      	beq.n	8013cbe <rcl_init+0x15e>
 8013c6c:	f8d7 a000 	ldr.w	sl, [r7]
 8013c70:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013c74:	f7ec fad6 	bl	8000224 <strlen>
 8013c78:	1c42      	adds	r2, r0, #1
 8013c7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013c7c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013c7e:	f8da a020 	ldr.w	sl, [sl, #32]
 8013c82:	9201      	str	r2, [sp, #4]
 8013c84:	4610      	mov	r0, r2
 8013c86:	4798      	blx	r3
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8013c8e:	6a1b      	ldr	r3, [r3, #32]
 8013c90:	9a01      	ldr	r2, [sp, #4]
 8013c92:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013c96:	2800      	cmp	r0, #0
 8013c98:	d1de      	bne.n	8013c58 <rcl_init+0xf8>
 8013c9a:	240a      	movs	r4, #10
 8013c9c:	4638      	mov	r0, r7
 8013c9e:	f7f6 fef9 	bl	800aa94 <__cleanup_context>
 8013ca2:	e003      	b.n	8013cac <rcl_init+0x14c>
 8013ca4:	2900      	cmp	r1, #0
 8013ca6:	f43f af74 	beq.w	8013b92 <rcl_init+0x32>
 8013caa:	240b      	movs	r4, #11
 8013cac:	4620      	mov	r0, r4
 8013cae:	b01c      	add	sp, #112	@ 0x70
 8013cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cb4:	2464      	movs	r4, #100	@ 0x64
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	b01c      	add	sp, #112	@ 0x70
 8013cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cbe:	f8d7 9000 	ldr.w	r9, [r7]
 8013cc2:	491d      	ldr	r1, [pc, #116]	@ (8013d38 <rcl_init+0x1d8>)
 8013cc4:	680b      	ldr	r3, [r1, #0]
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	d023      	beq.n	8013d12 <rcl_init+0x1b2>
 8013cca:	600b      	str	r3, [r1, #0]
 8013ccc:	461a      	mov	r2, r3
 8013cce:	2400      	movs	r4, #0
 8013cd0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013cd4:	607b      	str	r3, [r7, #4]
 8013cd6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013cd8:	6182      	str	r2, [r0, #24]
 8013cda:	3301      	adds	r3, #1
 8013cdc:	61c4      	str	r4, [r0, #28]
 8013cde:	d01f      	beq.n	8013d20 <rcl_init+0x1c0>
 8013ce0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8013ce4:	b94b      	cbnz	r3, 8013cfa <rcl_init+0x19a>
 8013ce6:	3030      	adds	r0, #48	@ 0x30
 8013ce8:	f000 f846 	bl	8013d78 <rcl_get_localhost_only>
 8013cec:	4604      	mov	r4, r0
 8013cee:	2800      	cmp	r0, #0
 8013cf0:	d1d4      	bne.n	8013c9c <rcl_init+0x13c>
 8013cf2:	f8d7 9000 	ldr.w	r9, [r7]
 8013cf6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013cfa:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8013cfe:	3018      	adds	r0, #24
 8013d00:	f7f9 fc82 	bl	800d608 <rmw_init>
 8013d04:	4604      	mov	r4, r0
 8013d06:	2800      	cmp	r0, #0
 8013d08:	d0d0      	beq.n	8013cac <rcl_init+0x14c>
 8013d0a:	f7ff fe07 	bl	801391c <rcl_convert_rmw_ret_to_rcl_ret>
 8013d0e:	4604      	mov	r4, r0
 8013d10:	e7c4      	b.n	8013c9c <rcl_init+0x13c>
 8013d12:	2201      	movs	r2, #1
 8013d14:	461c      	mov	r4, r3
 8013d16:	600a      	str	r2, [r1, #0]
 8013d18:	4613      	mov	r3, r2
 8013d1a:	e7d9      	b.n	8013cd0 <rcl_init+0x170>
 8013d1c:	240a      	movs	r4, #10
 8013d1e:	e7c5      	b.n	8013cac <rcl_init+0x14c>
 8013d20:	3024      	adds	r0, #36	@ 0x24
 8013d22:	f003 fcc9 	bl	80176b8 <rcl_get_default_domain_id>
 8013d26:	4604      	mov	r4, r0
 8013d28:	2800      	cmp	r0, #0
 8013d2a:	d1b7      	bne.n	8013c9c <rcl_init+0x13c>
 8013d2c:	f8d7 9000 	ldr.w	r9, [r7]
 8013d30:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8013d34:	e7d4      	b.n	8013ce0 <rcl_init+0x180>
 8013d36:	bf00      	nop
 8013d38:	20010e94 	.word	0x20010e94

08013d3c <rcl_shutdown>:
 8013d3c:	b1a8      	cbz	r0, 8013d6a <rcl_shutdown+0x2e>
 8013d3e:	6803      	ldr	r3, [r0, #0]
 8013d40:	b510      	push	{r4, lr}
 8013d42:	4604      	mov	r4, r0
 8013d44:	b173      	cbz	r3, 8013d64 <rcl_shutdown+0x28>
 8013d46:	f7f6 fe99 	bl	800aa7c <rcl_context_is_valid>
 8013d4a:	b140      	cbz	r0, 8013d5e <rcl_shutdown+0x22>
 8013d4c:	6820      	ldr	r0, [r4, #0]
 8013d4e:	3028      	adds	r0, #40	@ 0x28
 8013d50:	f7f9 fd90 	bl	800d874 <rmw_shutdown>
 8013d54:	4603      	mov	r3, r0
 8013d56:	b958      	cbnz	r0, 8013d70 <rcl_shutdown+0x34>
 8013d58:	6060      	str	r0, [r4, #4]
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	bd10      	pop	{r4, pc}
 8013d5e:	236a      	movs	r3, #106	@ 0x6a
 8013d60:	4618      	mov	r0, r3
 8013d62:	bd10      	pop	{r4, pc}
 8013d64:	230b      	movs	r3, #11
 8013d66:	4618      	mov	r0, r3
 8013d68:	bd10      	pop	{r4, pc}
 8013d6a:	230b      	movs	r3, #11
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	4770      	bx	lr
 8013d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d74:	f7ff bdd2 	b.w	801391c <rcl_convert_rmw_ret_to_rcl_ret>

08013d78 <rcl_get_localhost_only>:
 8013d78:	b510      	push	{r4, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	9301      	str	r3, [sp, #4]
 8013d80:	b1b8      	cbz	r0, 8013db2 <rcl_get_localhost_only+0x3a>
 8013d82:	4604      	mov	r4, r0
 8013d84:	a901      	add	r1, sp, #4
 8013d86:	480c      	ldr	r0, [pc, #48]	@ (8013db8 <rcl_get_localhost_only+0x40>)
 8013d88:	f7f8 ffc0 	bl	800cd0c <rcutils_get_env>
 8013d8c:	b110      	cbz	r0, 8013d94 <rcl_get_localhost_only+0x1c>
 8013d8e:	2001      	movs	r0, #1
 8013d90:	b002      	add	sp, #8
 8013d92:	bd10      	pop	{r4, pc}
 8013d94:	9b01      	ldr	r3, [sp, #4]
 8013d96:	b113      	cbz	r3, 8013d9e <rcl_get_localhost_only+0x26>
 8013d98:	781a      	ldrb	r2, [r3, #0]
 8013d9a:	2a31      	cmp	r2, #49	@ 0x31
 8013d9c:	d004      	beq.n	8013da8 <rcl_get_localhost_only+0x30>
 8013d9e:	2302      	movs	r3, #2
 8013da0:	2000      	movs	r0, #0
 8013da2:	7023      	strb	r3, [r4, #0]
 8013da4:	b002      	add	sp, #8
 8013da6:	bd10      	pop	{r4, pc}
 8013da8:	785b      	ldrb	r3, [r3, #1]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d1f7      	bne.n	8013d9e <rcl_get_localhost_only+0x26>
 8013dae:	2301      	movs	r3, #1
 8013db0:	e7f6      	b.n	8013da0 <rcl_get_localhost_only+0x28>
 8013db2:	200b      	movs	r0, #11
 8013db4:	b002      	add	sp, #8
 8013db6:	bd10      	pop	{r4, pc}
 8013db8:	08019940 	.word	0x08019940

08013dbc <rcl_node_resolve_name>:
 8013dbc:	b082      	sub	sp, #8
 8013dbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dc2:	b091      	sub	sp, #68	@ 0x44
 8013dc4:	ac1a      	add	r4, sp, #104	@ 0x68
 8013dc6:	e884 000c 	stmia.w	r4, {r2, r3}
 8013dca:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	d03b      	beq.n	8013e4a <rcl_node_resolve_name+0x8e>
 8013dd2:	460c      	mov	r4, r1
 8013dd4:	4605      	mov	r5, r0
 8013dd6:	f7f7 f973 	bl	800b0c0 <rcl_node_get_options>
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	d037      	beq.n	8013e4e <rcl_node_resolve_name+0x92>
 8013dde:	4628      	mov	r0, r5
 8013de0:	f7f7 f95e 	bl	800b0a0 <rcl_node_get_name>
 8013de4:	4606      	mov	r6, r0
 8013de6:	4628      	mov	r0, r5
 8013de8:	f7f7 f962 	bl	800b0b0 <rcl_node_get_namespace>
 8013dec:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013df0:	4681      	mov	r9, r0
 8013df2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013df6:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013df8:	46ac      	mov	ip, r5
 8013dfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013dfe:	f8de 3000 	ldr.w	r3, [lr]
 8013e02:	f8cc 3000 	str.w	r3, [ip]
 8013e06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013e08:	b1fb      	cbz	r3, 8013e4a <rcl_node_resolve_name+0x8e>
 8013e0a:	468a      	mov	sl, r1
 8013e0c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8013e10:	f001 fdee 	bl	80159f0 <rcutils_get_zero_initialized_string_map>
 8013e14:	ab10      	add	r3, sp, #64	@ 0x40
 8013e16:	9008      	str	r0, [sp, #32]
 8013e18:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013e1c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013e20:	2100      	movs	r1, #0
 8013e22:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013e26:	a808      	add	r0, sp, #32
 8013e28:	f001 fe5a 	bl	8015ae0 <rcutils_string_map_init>
 8013e2c:	4607      	mov	r7, r0
 8013e2e:	b180      	cbz	r0, 8013e52 <rcl_node_resolve_name+0x96>
 8013e30:	f7f8 ff84 	bl	800cd3c <rcutils_get_error_string>
 8013e34:	f7f8 ff98 	bl	800cd68 <rcutils_reset_error>
 8013e38:	2f0a      	cmp	r7, #10
 8013e3a:	bf18      	it	ne
 8013e3c:	2701      	movne	r7, #1
 8013e3e:	4638      	mov	r0, r7
 8013e40:	b011      	add	sp, #68	@ 0x44
 8013e42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e46:	b002      	add	sp, #8
 8013e48:	4770      	bx	lr
 8013e4a:	270b      	movs	r7, #11
 8013e4c:	e7f7      	b.n	8013e3e <rcl_node_resolve_name+0x82>
 8013e4e:	2701      	movs	r7, #1
 8013e50:	e7f5      	b.n	8013e3e <rcl_node_resolve_name+0x82>
 8013e52:	9009      	str	r0, [sp, #36]	@ 0x24
 8013e54:	9007      	str	r0, [sp, #28]
 8013e56:	a808      	add	r0, sp, #32
 8013e58:	f003 fdc0 	bl	80179dc <rcl_get_default_topic_name_substitutions>
 8013e5c:	4607      	mov	r7, r0
 8013e5e:	b1a8      	cbz	r0, 8013e8c <rcl_node_resolve_name+0xd0>
 8013e60:	280a      	cmp	r0, #10
 8013e62:	9c07      	ldr	r4, [sp, #28]
 8013e64:	d000      	beq.n	8013e68 <rcl_node_resolve_name+0xac>
 8013e66:	2701      	movs	r7, #1
 8013e68:	a808      	add	r0, sp, #32
 8013e6a:	f001 fe79 	bl	8015b60 <rcutils_string_map_fini>
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	d13d      	bne.n	8013eee <rcl_node_resolve_name+0x132>
 8013e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013e74:	4659      	mov	r1, fp
 8013e76:	47d0      	blx	sl
 8013e78:	4659      	mov	r1, fp
 8013e7a:	4620      	mov	r0, r4
 8013e7c:	47d0      	blx	sl
 8013e7e:	f1b8 0f00 	cmp.w	r8, #0
 8013e82:	d0dc      	beq.n	8013e3e <rcl_node_resolve_name+0x82>
 8013e84:	2f67      	cmp	r7, #103	@ 0x67
 8013e86:	bf08      	it	eq
 8013e88:	2768      	moveq	r7, #104	@ 0x68
 8013e8a:	e7d8      	b.n	8013e3e <rcl_node_resolve_name+0x82>
 8013e8c:	ab09      	add	r3, sp, #36	@ 0x24
 8013e8e:	9305      	str	r3, [sp, #20]
 8013e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e92:	46ec      	mov	ip, sp
 8013e94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e98:	682b      	ldr	r3, [r5, #0]
 8013e9a:	f8cc 3000 	str.w	r3, [ip]
 8013e9e:	464a      	mov	r2, r9
 8013ea0:	4631      	mov	r1, r6
 8013ea2:	4620      	mov	r0, r4
 8013ea4:	ab08      	add	r3, sp, #32
 8013ea6:	f003 fc3b 	bl	8017720 <rcl_expand_topic_name>
 8013eaa:	4607      	mov	r7, r0
 8013eac:	b9b8      	cbnz	r0, 8013ede <rcl_node_resolve_name+0x122>
 8013eae:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013eb0:	9009      	str	r0, [sp, #36]	@ 0x24
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	a90a      	add	r1, sp, #40	@ 0x28
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f001 ff5a 	bl	8015d70 <rmw_validate_full_topic_name>
 8013ebc:	b988      	cbnz	r0, 8013ee2 <rcl_node_resolve_name+0x126>
 8013ebe:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013ec0:	b9d5      	cbnz	r5, 8013ef8 <rcl_node_resolve_name+0x13c>
 8013ec2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013ec4:	a808      	add	r0, sp, #32
 8013ec6:	601c      	str	r4, [r3, #0]
 8013ec8:	f001 fe4a 	bl	8015b60 <rcutils_string_map_fini>
 8013ecc:	4607      	mov	r7, r0
 8013ece:	b1a8      	cbz	r0, 8013efc <rcl_node_resolve_name+0x140>
 8013ed0:	f7f8 ff34 	bl	800cd3c <rcutils_get_error_string>
 8013ed4:	462c      	mov	r4, r5
 8013ed6:	f7f8 ff47 	bl	800cd68 <rcutils_reset_error>
 8013eda:	2701      	movs	r7, #1
 8013edc:	e7c9      	b.n	8013e72 <rcl_node_resolve_name+0xb6>
 8013ede:	9c07      	ldr	r4, [sp, #28]
 8013ee0:	e7c2      	b.n	8013e68 <rcl_node_resolve_name+0xac>
 8013ee2:	f7f8 ff2b 	bl	800cd3c <rcutils_get_error_string>
 8013ee6:	2701      	movs	r7, #1
 8013ee8:	f7f8 ff3e 	bl	800cd68 <rcutils_reset_error>
 8013eec:	e7bc      	b.n	8013e68 <rcl_node_resolve_name+0xac>
 8013eee:	f7f8 ff25 	bl	800cd3c <rcutils_get_error_string>
 8013ef2:	f7f8 ff39 	bl	800cd68 <rcutils_reset_error>
 8013ef6:	e7bc      	b.n	8013e72 <rcl_node_resolve_name+0xb6>
 8013ef8:	2767      	movs	r7, #103	@ 0x67
 8013efa:	e7b5      	b.n	8013e68 <rcl_node_resolve_name+0xac>
 8013efc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013efe:	4659      	mov	r1, fp
 8013f00:	47d0      	blx	sl
 8013f02:	4659      	mov	r1, fp
 8013f04:	4638      	mov	r0, r7
 8013f06:	47d0      	blx	sl
 8013f08:	e799      	b.n	8013e3e <rcl_node_resolve_name+0x82>
 8013f0a:	bf00      	nop

08013f0c <rcl_service_get_rmw_handle>:
 8013f0c:	b118      	cbz	r0, 8013f16 <rcl_service_get_rmw_handle+0xa>
 8013f0e:	6800      	ldr	r0, [r0, #0]
 8013f10:	b108      	cbz	r0, 8013f16 <rcl_service_get_rmw_handle+0xa>
 8013f12:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013f16:	4770      	bx	lr

08013f18 <rcl_take_request>:
 8013f18:	b570      	push	{r4, r5, r6, lr}
 8013f1a:	468e      	mov	lr, r1
 8013f1c:	460c      	mov	r4, r1
 8013f1e:	4616      	mov	r6, r2
 8013f20:	4605      	mov	r5, r0
 8013f22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f26:	b08c      	sub	sp, #48	@ 0x30
 8013f28:	f10d 0c18 	add.w	ip, sp, #24
 8013f2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f30:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013f34:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013f38:	b30d      	cbz	r5, 8013f7e <rcl_take_request+0x66>
 8013f3a:	682b      	ldr	r3, [r5, #0]
 8013f3c:	b1fb      	cbz	r3, 8013f7e <rcl_take_request+0x66>
 8013f3e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013f42:	b1e0      	cbz	r0, 8013f7e <rcl_take_request+0x66>
 8013f44:	b336      	cbz	r6, 8013f94 <rcl_take_request+0x7c>
 8013f46:	2300      	movs	r3, #0
 8013f48:	f88d 3007 	strb.w	r3, [sp, #7]
 8013f4c:	4632      	mov	r2, r6
 8013f4e:	f10d 0307 	add.w	r3, sp, #7
 8013f52:	a902      	add	r1, sp, #8
 8013f54:	f002 f9c0 	bl	80162d8 <rmw_take_request>
 8013f58:	4605      	mov	r5, r0
 8013f5a:	b198      	cbz	r0, 8013f84 <rcl_take_request+0x6c>
 8013f5c:	280a      	cmp	r0, #10
 8013f5e:	bf18      	it	ne
 8013f60:	2501      	movne	r5, #1
 8013f62:	f10d 0e18 	add.w	lr, sp, #24
 8013f66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f6a:	46a4      	mov	ip, r4
 8013f6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f70:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013f74:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013f78:	4628      	mov	r0, r5
 8013f7a:	b00c      	add	sp, #48	@ 0x30
 8013f7c:	bd70      	pop	{r4, r5, r6, pc}
 8013f7e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8013f82:	e7ee      	b.n	8013f62 <rcl_take_request+0x4a>
 8013f84:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013f88:	f240 2359 	movw	r3, #601	@ 0x259
 8013f8c:	2a00      	cmp	r2, #0
 8013f8e:	bf08      	it	eq
 8013f90:	461d      	moveq	r5, r3
 8013f92:	e7e6      	b.n	8013f62 <rcl_take_request+0x4a>
 8013f94:	250b      	movs	r5, #11
 8013f96:	e7e4      	b.n	8013f62 <rcl_take_request+0x4a>

08013f98 <rcl_send_response>:
 8013f98:	b170      	cbz	r0, 8013fb8 <rcl_send_response+0x20>
 8013f9a:	6800      	ldr	r0, [r0, #0]
 8013f9c:	b160      	cbz	r0, 8013fb8 <rcl_send_response+0x20>
 8013f9e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013fa2:	b148      	cbz	r0, 8013fb8 <rcl_send_response+0x20>
 8013fa4:	b159      	cbz	r1, 8013fbe <rcl_send_response+0x26>
 8013fa6:	b510      	push	{r4, lr}
 8013fa8:	b15a      	cbz	r2, 8013fc2 <rcl_send_response+0x2a>
 8013faa:	f002 f9f3 	bl	8016394 <rmw_send_response>
 8013fae:	b110      	cbz	r0, 8013fb6 <rcl_send_response+0x1e>
 8013fb0:	2802      	cmp	r0, #2
 8013fb2:	bf18      	it	ne
 8013fb4:	2001      	movne	r0, #1
 8013fb6:	bd10      	pop	{r4, pc}
 8013fb8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013fbc:	4770      	bx	lr
 8013fbe:	200b      	movs	r0, #11
 8013fc0:	4770      	bx	lr
 8013fc2:	200b      	movs	r0, #11
 8013fc4:	bd10      	pop	{r4, pc}
 8013fc6:	bf00      	nop

08013fc8 <rcl_service_is_valid>:
 8013fc8:	b130      	cbz	r0, 8013fd8 <rcl_service_is_valid+0x10>
 8013fca:	6800      	ldr	r0, [r0, #0]
 8013fcc:	b120      	cbz	r0, 8013fd8 <rcl_service_is_valid+0x10>
 8013fce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013fd2:	3800      	subs	r0, #0
 8013fd4:	bf18      	it	ne
 8013fd6:	2001      	movne	r0, #1
 8013fd8:	4770      	bx	lr
 8013fda:	bf00      	nop

08013fdc <rcl_get_system_time>:
 8013fdc:	4608      	mov	r0, r1
 8013fde:	f7f9 b837 	b.w	800d050 <rcutils_system_time_now>
 8013fe2:	bf00      	nop

08013fe4 <rcl_get_steady_time>:
 8013fe4:	4608      	mov	r0, r1
 8013fe6:	f7f9 b85b 	b.w	800d0a0 <rcutils_steady_time_now>
 8013fea:	bf00      	nop

08013fec <rcl_get_ros_time>:
 8013fec:	7a03      	ldrb	r3, [r0, #8]
 8013fee:	b510      	push	{r4, lr}
 8013ff0:	460c      	mov	r4, r1
 8013ff2:	b133      	cbz	r3, 8014002 <rcl_get_ros_time+0x16>
 8013ff4:	2105      	movs	r1, #5
 8013ff6:	f7f8 fde5 	bl	800cbc4 <__atomic_load_8>
 8013ffa:	e9c4 0100 	strd	r0, r1, [r4]
 8013ffe:	2000      	movs	r0, #0
 8014000:	bd10      	pop	{r4, pc}
 8014002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014006:	4608      	mov	r0, r1
 8014008:	f7f9 b822 	b.w	800d050 <rcutils_system_time_now>

0801400c <rcl_clock_init>:
 801400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801400e:	4605      	mov	r5, r0
 8014010:	4610      	mov	r0, r2
 8014012:	4614      	mov	r4, r2
 8014014:	460e      	mov	r6, r1
 8014016:	f7f8 fdc7 	bl	800cba8 <rcutils_allocator_is_valid>
 801401a:	b128      	cbz	r0, 8014028 <rcl_clock_init+0x1c>
 801401c:	2d03      	cmp	r5, #3
 801401e:	d803      	bhi.n	8014028 <rcl_clock_init+0x1c>
 8014020:	e8df f005 	tbb	[pc, r5]
 8014024:	06532e1d 	.word	0x06532e1d
 8014028:	f04f 0c0b 	mov.w	ip, #11
 801402c:	4660      	mov	r0, ip
 801402e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014030:	2e00      	cmp	r6, #0
 8014032:	d0f9      	beq.n	8014028 <rcl_clock_init+0x1c>
 8014034:	2c00      	cmp	r4, #0
 8014036:	d0f7      	beq.n	8014028 <rcl_clock_init+0x1c>
 8014038:	2300      	movs	r3, #0
 801403a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801403e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80140f4 <rcl_clock_init+0xe8>
 8014042:	6133      	str	r3, [r6, #16]
 8014044:	f106 0514 	add.w	r5, r6, #20
 8014048:	469c      	mov	ip, r3
 801404a:	2703      	movs	r7, #3
 801404c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801404e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014050:	6823      	ldr	r3, [r4, #0]
 8014052:	602b      	str	r3, [r5, #0]
 8014054:	7037      	strb	r7, [r6, #0]
 8014056:	f8c6 e00c 	str.w	lr, [r6, #12]
 801405a:	4660      	mov	r0, ip
 801405c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801405e:	2e00      	cmp	r6, #0
 8014060:	d0e2      	beq.n	8014028 <rcl_clock_init+0x1c>
 8014062:	2300      	movs	r3, #0
 8014064:	7033      	strb	r3, [r6, #0]
 8014066:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801406a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801406e:	469c      	mov	ip, r3
 8014070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014072:	f106 0514 	add.w	r5, r6, #20
 8014076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014078:	6823      	ldr	r3, [r4, #0]
 801407a:	602b      	str	r3, [r5, #0]
 801407c:	4660      	mov	r0, ip
 801407e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014080:	2e00      	cmp	r6, #0
 8014082:	d0d1      	beq.n	8014028 <rcl_clock_init+0x1c>
 8014084:	2c00      	cmp	r4, #0
 8014086:	d0cf      	beq.n	8014028 <rcl_clock_init+0x1c>
 8014088:	2700      	movs	r7, #0
 801408a:	7037      	strb	r7, [r6, #0]
 801408c:	46a4      	mov	ip, r4
 801408e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014092:	f106 0514 	add.w	r5, r6, #20
 8014096:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801409a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801409e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80140a0:	f8dc 3000 	ldr.w	r3, [ip]
 80140a4:	602b      	str	r3, [r5, #0]
 80140a6:	6921      	ldr	r1, [r4, #16]
 80140a8:	6823      	ldr	r3, [r4, #0]
 80140aa:	2010      	movs	r0, #16
 80140ac:	4798      	blx	r3
 80140ae:	6130      	str	r0, [r6, #16]
 80140b0:	b1d0      	cbz	r0, 80140e8 <rcl_clock_init+0xdc>
 80140b2:	2200      	movs	r2, #0
 80140b4:	2300      	movs	r3, #0
 80140b6:	e9c0 2300 	strd	r2, r3, [r0]
 80140ba:	2301      	movs	r3, #1
 80140bc:	7207      	strb	r7, [r0, #8]
 80140be:	4a0c      	ldr	r2, [pc, #48]	@ (80140f0 <rcl_clock_init+0xe4>)
 80140c0:	7033      	strb	r3, [r6, #0]
 80140c2:	46bc      	mov	ip, r7
 80140c4:	60f2      	str	r2, [r6, #12]
 80140c6:	4660      	mov	r0, ip
 80140c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140ca:	2e00      	cmp	r6, #0
 80140cc:	d0ac      	beq.n	8014028 <rcl_clock_init+0x1c>
 80140ce:	2c00      	cmp	r4, #0
 80140d0:	d0aa      	beq.n	8014028 <rcl_clock_init+0x1c>
 80140d2:	2300      	movs	r3, #0
 80140d4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80140d8:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80140f8 <rcl_clock_init+0xec>
 80140dc:	6133      	str	r3, [r6, #16]
 80140de:	f106 0514 	add.w	r5, r6, #20
 80140e2:	469c      	mov	ip, r3
 80140e4:	2702      	movs	r7, #2
 80140e6:	e7b1      	b.n	801404c <rcl_clock_init+0x40>
 80140e8:	f04f 0c0a 	mov.w	ip, #10
 80140ec:	e79e      	b.n	801402c <rcl_clock_init+0x20>
 80140ee:	bf00      	nop
 80140f0:	08013fed 	.word	0x08013fed
 80140f4:	08013fe5 	.word	0x08013fe5
 80140f8:	08013fdd 	.word	0x08013fdd

080140fc <rcl_clock_fini>:
 80140fc:	2800      	cmp	r0, #0
 80140fe:	d02c      	beq.n	801415a <rcl_clock_fini+0x5e>
 8014100:	b538      	push	{r3, r4, r5, lr}
 8014102:	4604      	mov	r4, r0
 8014104:	3014      	adds	r0, #20
 8014106:	f7f8 fd4f 	bl	800cba8 <rcutils_allocator_is_valid>
 801410a:	b140      	cbz	r0, 801411e <rcl_clock_fini+0x22>
 801410c:	7823      	ldrb	r3, [r4, #0]
 801410e:	2b02      	cmp	r3, #2
 8014110:	d007      	beq.n	8014122 <rcl_clock_fini+0x26>
 8014112:	2b03      	cmp	r3, #3
 8014114:	d005      	beq.n	8014122 <rcl_clock_fini+0x26>
 8014116:	2b01      	cmp	r3, #1
 8014118:	d00f      	beq.n	801413a <rcl_clock_fini+0x3e>
 801411a:	200b      	movs	r0, #11
 801411c:	bd38      	pop	{r3, r4, r5, pc}
 801411e:	2001      	movs	r0, #1
 8014120:	bd38      	pop	{r3, r4, r5, pc}
 8014122:	68a0      	ldr	r0, [r4, #8]
 8014124:	2800      	cmp	r0, #0
 8014126:	d0f9      	beq.n	801411c <rcl_clock_fini+0x20>
 8014128:	2500      	movs	r5, #0
 801412a:	6860      	ldr	r0, [r4, #4]
 801412c:	69a3      	ldr	r3, [r4, #24]
 801412e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014130:	60a5      	str	r5, [r4, #8]
 8014132:	4798      	blx	r3
 8014134:	6065      	str	r5, [r4, #4]
 8014136:	4628      	mov	r0, r5
 8014138:	bd38      	pop	{r3, r4, r5, pc}
 801413a:	68a3      	ldr	r3, [r4, #8]
 801413c:	b133      	cbz	r3, 801414c <rcl_clock_fini+0x50>
 801413e:	2500      	movs	r5, #0
 8014140:	69a3      	ldr	r3, [r4, #24]
 8014142:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014144:	6860      	ldr	r0, [r4, #4]
 8014146:	60a5      	str	r5, [r4, #8]
 8014148:	4798      	blx	r3
 801414a:	6065      	str	r5, [r4, #4]
 801414c:	6920      	ldr	r0, [r4, #16]
 801414e:	69a3      	ldr	r3, [r4, #24]
 8014150:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014152:	4798      	blx	r3
 8014154:	2000      	movs	r0, #0
 8014156:	6120      	str	r0, [r4, #16]
 8014158:	bd38      	pop	{r3, r4, r5, pc}
 801415a:	200b      	movs	r0, #11
 801415c:	4770      	bx	lr
 801415e:	bf00      	nop

08014160 <rcl_clock_get_now>:
 8014160:	b140      	cbz	r0, 8014174 <rcl_clock_get_now+0x14>
 8014162:	b139      	cbz	r1, 8014174 <rcl_clock_get_now+0x14>
 8014164:	7803      	ldrb	r3, [r0, #0]
 8014166:	b11b      	cbz	r3, 8014170 <rcl_clock_get_now+0x10>
 8014168:	68c3      	ldr	r3, [r0, #12]
 801416a:	b10b      	cbz	r3, 8014170 <rcl_clock_get_now+0x10>
 801416c:	6900      	ldr	r0, [r0, #16]
 801416e:	4718      	bx	r3
 8014170:	2001      	movs	r0, #1
 8014172:	4770      	bx	lr
 8014174:	200b      	movs	r0, #11
 8014176:	4770      	bx	lr

08014178 <rcl_clock_add_jump_callback>:
 8014178:	b082      	sub	sp, #8
 801417a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801417e:	a906      	add	r1, sp, #24
 8014180:	e881 000c 	stmia.w	r1, {r2, r3}
 8014184:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8014188:	b320      	cbz	r0, 80141d4 <rcl_clock_add_jump_callback+0x5c>
 801418a:	4604      	mov	r4, r0
 801418c:	3014      	adds	r0, #20
 801418e:	f7f8 fd0b 	bl	800cba8 <rcutils_allocator_is_valid>
 8014192:	b1f8      	cbz	r0, 80141d4 <rcl_clock_add_jump_callback+0x5c>
 8014194:	b1f6      	cbz	r6, 80141d4 <rcl_clock_add_jump_callback+0x5c>
 8014196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014198:	2b00      	cmp	r3, #0
 801419a:	db1b      	blt.n	80141d4 <rcl_clock_add_jump_callback+0x5c>
 801419c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80141a0:	2a01      	cmp	r2, #1
 80141a2:	f173 0300 	sbcs.w	r3, r3, #0
 80141a6:	da15      	bge.n	80141d4 <rcl_clock_add_jump_callback+0x5c>
 80141a8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80141ac:	2f00      	cmp	r7, #0
 80141ae:	d042      	beq.n	8014236 <rcl_clock_add_jump_callback+0xbe>
 80141b0:	2300      	movs	r3, #0
 80141b2:	4602      	mov	r2, r0
 80141b4:	e003      	b.n	80141be <rcl_clock_add_jump_callback+0x46>
 80141b6:	42bb      	cmp	r3, r7
 80141b8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80141bc:	d011      	beq.n	80141e2 <rcl_clock_add_jump_callback+0x6a>
 80141be:	6811      	ldr	r1, [r2, #0]
 80141c0:	42b1      	cmp	r1, r6
 80141c2:	f103 0301 	add.w	r3, r3, #1
 80141c6:	d1f6      	bne.n	80141b6 <rcl_clock_add_jump_callback+0x3e>
 80141c8:	6a11      	ldr	r1, [r2, #32]
 80141ca:	42a9      	cmp	r1, r5
 80141cc:	d1f3      	bne.n	80141b6 <rcl_clock_add_jump_callback+0x3e>
 80141ce:	f04f 0e01 	mov.w	lr, #1
 80141d2:	e001      	b.n	80141d8 <rcl_clock_add_jump_callback+0x60>
 80141d4:	f04f 0e0b 	mov.w	lr, #11
 80141d8:	4670      	mov	r0, lr
 80141da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141de:	b002      	add	sp, #8
 80141e0:	4770      	bx	lr
 80141e2:	3301      	adds	r3, #1
 80141e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80141e8:	00d9      	lsls	r1, r3, #3
 80141ea:	69e3      	ldr	r3, [r4, #28]
 80141ec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80141ee:	4798      	blx	r3
 80141f0:	b1f0      	cbz	r0, 8014230 <rcl_clock_add_jump_callback+0xb8>
 80141f2:	68a3      	ldr	r3, [r4, #8]
 80141f4:	6060      	str	r0, [r4, #4]
 80141f6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80141fa:	f10d 0c18 	add.w	ip, sp, #24
 80141fe:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8014202:	f103 0801 	add.w	r8, r3, #1
 8014206:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801420a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801420e:	f106 0708 	add.w	r7, r6, #8
 8014212:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014214:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014218:	f04f 0e00 	mov.w	lr, #0
 801421c:	e887 0003 	stmia.w	r7, {r0, r1}
 8014220:	6235      	str	r5, [r6, #32]
 8014222:	4670      	mov	r0, lr
 8014224:	f8c4 8008 	str.w	r8, [r4, #8]
 8014228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801422c:	b002      	add	sp, #8
 801422e:	4770      	bx	lr
 8014230:	f04f 0e0a 	mov.w	lr, #10
 8014234:	e7d0      	b.n	80141d8 <rcl_clock_add_jump_callback+0x60>
 8014236:	2128      	movs	r1, #40	@ 0x28
 8014238:	e7d7      	b.n	80141ea <rcl_clock_add_jump_callback+0x72>
 801423a:	bf00      	nop

0801423c <rcl_clock_remove_jump_callback>:
 801423c:	2800      	cmp	r0, #0
 801423e:	d057      	beq.n	80142f0 <rcl_clock_remove_jump_callback+0xb4>
 8014240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014244:	4605      	mov	r5, r0
 8014246:	3014      	adds	r0, #20
 8014248:	4688      	mov	r8, r1
 801424a:	4692      	mov	sl, r2
 801424c:	f7f8 fcac 	bl	800cba8 <rcutils_allocator_is_valid>
 8014250:	2800      	cmp	r0, #0
 8014252:	d03b      	beq.n	80142cc <rcl_clock_remove_jump_callback+0x90>
 8014254:	f1b8 0f00 	cmp.w	r8, #0
 8014258:	d038      	beq.n	80142cc <rcl_clock_remove_jump_callback+0x90>
 801425a:	68ae      	ldr	r6, [r5, #8]
 801425c:	b166      	cbz	r6, 8014278 <rcl_clock_remove_jump_callback+0x3c>
 801425e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014262:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8014266:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801426a:	464c      	mov	r4, r9
 801426c:	6823      	ldr	r3, [r4, #0]
 801426e:	4543      	cmp	r3, r8
 8014270:	d005      	beq.n	801427e <rcl_clock_remove_jump_callback+0x42>
 8014272:	3428      	adds	r4, #40	@ 0x28
 8014274:	42a7      	cmp	r7, r4
 8014276:	d1f9      	bne.n	801426c <rcl_clock_remove_jump_callback+0x30>
 8014278:	2001      	movs	r0, #1
 801427a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801427e:	6a23      	ldr	r3, [r4, #32]
 8014280:	3428      	adds	r4, #40	@ 0x28
 8014282:	42bc      	cmp	r4, r7
 8014284:	d02d      	beq.n	80142e2 <rcl_clock_remove_jump_callback+0xa6>
 8014286:	4553      	cmp	r3, sl
 8014288:	d1f0      	bne.n	801426c <rcl_clock_remove_jump_callback+0x30>
 801428a:	46a6      	mov	lr, r4
 801428c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014290:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8014294:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014298:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801429c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80142a4:	3428      	adds	r4, #40	@ 0x28
 80142a6:	42a7      	cmp	r7, r4
 80142a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80142ac:	d1ed      	bne.n	801428a <rcl_clock_remove_jump_callback+0x4e>
 80142ae:	3e01      	subs	r6, #1
 80142b0:	60ae      	str	r6, [r5, #8]
 80142b2:	b176      	cbz	r6, 80142d2 <rcl_clock_remove_jump_callback+0x96>
 80142b4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80142b8:	69eb      	ldr	r3, [r5, #28]
 80142ba:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80142bc:	00f1      	lsls	r1, r6, #3
 80142be:	4648      	mov	r0, r9
 80142c0:	4798      	blx	r3
 80142c2:	b1b8      	cbz	r0, 80142f4 <rcl_clock_remove_jump_callback+0xb8>
 80142c4:	6068      	str	r0, [r5, #4]
 80142c6:	2000      	movs	r0, #0
 80142c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142cc:	200b      	movs	r0, #11
 80142ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142d2:	4648      	mov	r0, r9
 80142d4:	69ab      	ldr	r3, [r5, #24]
 80142d6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80142d8:	4798      	blx	r3
 80142da:	606e      	str	r6, [r5, #4]
 80142dc:	4630      	mov	r0, r6
 80142de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142e2:	4553      	cmp	r3, sl
 80142e4:	d1c8      	bne.n	8014278 <rcl_clock_remove_jump_callback+0x3c>
 80142e6:	3e01      	subs	r6, #1
 80142e8:	60ae      	str	r6, [r5, #8]
 80142ea:	2e00      	cmp	r6, #0
 80142ec:	d1e2      	bne.n	80142b4 <rcl_clock_remove_jump_callback+0x78>
 80142ee:	e7f0      	b.n	80142d2 <rcl_clock_remove_jump_callback+0x96>
 80142f0:	200b      	movs	r0, #11
 80142f2:	4770      	bx	lr
 80142f4:	200a      	movs	r0, #10
 80142f6:	e7ea      	b.n	80142ce <rcl_clock_remove_jump_callback+0x92>

080142f8 <rcl_get_zero_initialized_wait_set>:
 80142f8:	b510      	push	{r4, lr}
 80142fa:	4c08      	ldr	r4, [pc, #32]	@ (801431c <rcl_get_zero_initialized_wait_set+0x24>)
 80142fc:	4686      	mov	lr, r0
 80142fe:	4684      	mov	ip, r0
 8014300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014302:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014308:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801430c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801430e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014312:	6823      	ldr	r3, [r4, #0]
 8014314:	f8cc 3000 	str.w	r3, [ip]
 8014318:	4670      	mov	r0, lr
 801431a:	bd10      	pop	{r4, pc}
 801431c:	08019e34 	.word	0x08019e34

08014320 <rcl_wait_set_is_valid>:
 8014320:	b118      	cbz	r0, 801432a <rcl_wait_set_is_valid+0xa>
 8014322:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014324:	3800      	subs	r0, #0
 8014326:	bf18      	it	ne
 8014328:	2001      	movne	r0, #1
 801432a:	4770      	bx	lr

0801432c <rcl_wait_set_fini>:
 801432c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014330:	b082      	sub	sp, #8
 8014332:	2800      	cmp	r0, #0
 8014334:	f000 8095 	beq.w	8014462 <rcl_wait_set_fini+0x136>
 8014338:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801433a:	4604      	mov	r4, r0
 801433c:	2e00      	cmp	r6, #0
 801433e:	f000 808c 	beq.w	801445a <rcl_wait_set_fini+0x12e>
 8014342:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014344:	f002 fa5e 	bl	8016804 <rmw_destroy_wait_set>
 8014348:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801434a:	1e06      	subs	r6, r0, #0
 801434c:	bf18      	it	ne
 801434e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014352:	2d00      	cmp	r5, #0
 8014354:	f000 8081 	beq.w	801445a <rcl_wait_set_fini+0x12e>
 8014358:	6820      	ldr	r0, [r4, #0]
 801435a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801435e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014360:	2700      	movs	r7, #0
 8014362:	6067      	str	r7, [r4, #4]
 8014364:	602f      	str	r7, [r5, #0]
 8014366:	b120      	cbz	r0, 8014372 <rcl_wait_set_fini+0x46>
 8014368:	9101      	str	r1, [sp, #4]
 801436a:	47c0      	blx	r8
 801436c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801436e:	9901      	ldr	r1, [sp, #4]
 8014370:	6027      	str	r7, [r4, #0]
 8014372:	68a8      	ldr	r0, [r5, #8]
 8014374:	b120      	cbz	r0, 8014380 <rcl_wait_set_fini+0x54>
 8014376:	47c0      	blx	r8
 8014378:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801437a:	2300      	movs	r3, #0
 801437c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014380:	68a0      	ldr	r0, [r4, #8]
 8014382:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014384:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014386:	f04f 0800 	mov.w	r8, #0
 801438a:	f8c4 800c 	str.w	r8, [r4, #12]
 801438e:	f8c5 800c 	str.w	r8, [r5, #12]
 8014392:	b128      	cbz	r0, 80143a0 <rcl_wait_set_fini+0x74>
 8014394:	47b8      	blx	r7
 8014396:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014398:	f8c4 8008 	str.w	r8, [r4, #8]
 801439c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801439e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80143a0:	6968      	ldr	r0, [r5, #20]
 80143a2:	f04f 0800 	mov.w	r8, #0
 80143a6:	f8c5 8010 	str.w	r8, [r5, #16]
 80143aa:	b128      	cbz	r0, 80143b8 <rcl_wait_set_fini+0x8c>
 80143ac:	47b8      	blx	r7
 80143ae:	f8c5 8014 	str.w	r8, [r5, #20]
 80143b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80143b4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80143b6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80143b8:	6920      	ldr	r0, [r4, #16]
 80143ba:	f04f 0800 	mov.w	r8, #0
 80143be:	f8c4 8014 	str.w	r8, [r4, #20]
 80143c2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80143c6:	b128      	cbz	r0, 80143d4 <rcl_wait_set_fini+0xa8>
 80143c8:	47b8      	blx	r7
 80143ca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80143cc:	f8c4 8010 	str.w	r8, [r4, #16]
 80143d0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80143d2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80143d4:	69a0      	ldr	r0, [r4, #24]
 80143d6:	f04f 0800 	mov.w	r8, #0
 80143da:	f8c4 801c 	str.w	r8, [r4, #28]
 80143de:	f8c5 8018 	str.w	r8, [r5, #24]
 80143e2:	b128      	cbz	r0, 80143f0 <rcl_wait_set_fini+0xc4>
 80143e4:	9101      	str	r1, [sp, #4]
 80143e6:	47b8      	blx	r7
 80143e8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80143ea:	9901      	ldr	r1, [sp, #4]
 80143ec:	f8c4 8018 	str.w	r8, [r4, #24]
 80143f0:	6a28      	ldr	r0, [r5, #32]
 80143f2:	b120      	cbz	r0, 80143fe <rcl_wait_set_fini+0xd2>
 80143f4:	47b8      	blx	r7
 80143f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80143f8:	2300      	movs	r3, #0
 80143fa:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80143fe:	6a20      	ldr	r0, [r4, #32]
 8014400:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014404:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014406:	2700      	movs	r7, #0
 8014408:	6267      	str	r7, [r4, #36]	@ 0x24
 801440a:	626f      	str	r7, [r5, #36]	@ 0x24
 801440c:	b120      	cbz	r0, 8014418 <rcl_wait_set_fini+0xec>
 801440e:	9101      	str	r1, [sp, #4]
 8014410:	47c0      	blx	r8
 8014412:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014414:	9901      	ldr	r1, [sp, #4]
 8014416:	6227      	str	r7, [r4, #32]
 8014418:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801441a:	b120      	cbz	r0, 8014426 <rcl_wait_set_fini+0xfa>
 801441c:	47c0      	blx	r8
 801441e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014420:	2300      	movs	r3, #0
 8014422:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014426:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014428:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801442c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801442e:	2700      	movs	r7, #0
 8014430:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014432:	632f      	str	r7, [r5, #48]	@ 0x30
 8014434:	b120      	cbz	r0, 8014440 <rcl_wait_set_fini+0x114>
 8014436:	9101      	str	r1, [sp, #4]
 8014438:	47c0      	blx	r8
 801443a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801443c:	9901      	ldr	r1, [sp, #4]
 801443e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8014440:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014442:	b120      	cbz	r0, 801444e <rcl_wait_set_fini+0x122>
 8014444:	47c0      	blx	r8
 8014446:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014448:	2300      	movs	r3, #0
 801444a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801444e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014450:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014452:	4628      	mov	r0, r5
 8014454:	4798      	blx	r3
 8014456:	2300      	movs	r3, #0
 8014458:	6323      	str	r3, [r4, #48]	@ 0x30
 801445a:	4630      	mov	r0, r6
 801445c:	b002      	add	sp, #8
 801445e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014462:	260b      	movs	r6, #11
 8014464:	4630      	mov	r0, r6
 8014466:	b002      	add	sp, #8
 8014468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801446c <rcl_wait_set_add_subscription>:
 801446c:	b318      	cbz	r0, 80144b6 <rcl_wait_set_add_subscription+0x4a>
 801446e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014470:	b570      	push	{r4, r5, r6, lr}
 8014472:	4604      	mov	r4, r0
 8014474:	b30b      	cbz	r3, 80144ba <rcl_wait_set_add_subscription+0x4e>
 8014476:	b319      	cbz	r1, 80144c0 <rcl_wait_set_add_subscription+0x54>
 8014478:	681d      	ldr	r5, [r3, #0]
 801447a:	6840      	ldr	r0, [r0, #4]
 801447c:	4285      	cmp	r5, r0
 801447e:	d217      	bcs.n	80144b0 <rcl_wait_set_add_subscription+0x44>
 8014480:	6820      	ldr	r0, [r4, #0]
 8014482:	1c6e      	adds	r6, r5, #1
 8014484:	601e      	str	r6, [r3, #0]
 8014486:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801448a:	b102      	cbz	r2, 801448e <rcl_wait_set_add_subscription+0x22>
 801448c:	6015      	str	r5, [r2, #0]
 801448e:	4608      	mov	r0, r1
 8014490:	f7f7 f91a 	bl	800b6c8 <rcl_subscription_get_rmw_handle>
 8014494:	b150      	cbz	r0, 80144ac <rcl_wait_set_add_subscription+0x40>
 8014496:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014498:	6842      	ldr	r2, [r0, #4]
 801449a:	689b      	ldr	r3, [r3, #8]
 801449c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80144a0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80144a2:	6853      	ldr	r3, [r2, #4]
 80144a4:	3301      	adds	r3, #1
 80144a6:	2000      	movs	r0, #0
 80144a8:	6053      	str	r3, [r2, #4]
 80144aa:	bd70      	pop	{r4, r5, r6, pc}
 80144ac:	2001      	movs	r0, #1
 80144ae:	bd70      	pop	{r4, r5, r6, pc}
 80144b0:	f240 3086 	movw	r0, #902	@ 0x386
 80144b4:	bd70      	pop	{r4, r5, r6, pc}
 80144b6:	200b      	movs	r0, #11
 80144b8:	4770      	bx	lr
 80144ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80144be:	bd70      	pop	{r4, r5, r6, pc}
 80144c0:	200b      	movs	r0, #11
 80144c2:	bd70      	pop	{r4, r5, r6, pc}

080144c4 <rcl_wait_set_clear>:
 80144c4:	2800      	cmp	r0, #0
 80144c6:	d073      	beq.n	80145b0 <rcl_wait_set_clear+0xec>
 80144c8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80144ca:	b510      	push	{r4, lr}
 80144cc:	4604      	mov	r4, r0
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d070      	beq.n	80145b4 <rcl_wait_set_clear+0xf0>
 80144d2:	6800      	ldr	r0, [r0, #0]
 80144d4:	b138      	cbz	r0, 80144e6 <rcl_wait_set_clear+0x22>
 80144d6:	6862      	ldr	r2, [r4, #4]
 80144d8:	2100      	movs	r1, #0
 80144da:	0092      	lsls	r2, r2, #2
 80144dc:	f003 ff46 	bl	801836c <memset>
 80144e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80144e2:	2200      	movs	r2, #0
 80144e4:	601a      	str	r2, [r3, #0]
 80144e6:	68a0      	ldr	r0, [r4, #8]
 80144e8:	b138      	cbz	r0, 80144fa <rcl_wait_set_clear+0x36>
 80144ea:	68e2      	ldr	r2, [r4, #12]
 80144ec:	2100      	movs	r1, #0
 80144ee:	0092      	lsls	r2, r2, #2
 80144f0:	f003 ff3c 	bl	801836c <memset>
 80144f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80144f6:	2200      	movs	r2, #0
 80144f8:	60da      	str	r2, [r3, #12]
 80144fa:	69a0      	ldr	r0, [r4, #24]
 80144fc:	b138      	cbz	r0, 801450e <rcl_wait_set_clear+0x4a>
 80144fe:	69e2      	ldr	r2, [r4, #28]
 8014500:	2100      	movs	r1, #0
 8014502:	0092      	lsls	r2, r2, #2
 8014504:	f003 ff32 	bl	801836c <memset>
 8014508:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801450a:	2200      	movs	r2, #0
 801450c:	619a      	str	r2, [r3, #24]
 801450e:	6a20      	ldr	r0, [r4, #32]
 8014510:	b138      	cbz	r0, 8014522 <rcl_wait_set_clear+0x5e>
 8014512:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014514:	2100      	movs	r1, #0
 8014516:	0092      	lsls	r2, r2, #2
 8014518:	f003 ff28 	bl	801836c <memset>
 801451c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801451e:	2200      	movs	r2, #0
 8014520:	625a      	str	r2, [r3, #36]	@ 0x24
 8014522:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014524:	b138      	cbz	r0, 8014536 <rcl_wait_set_clear+0x72>
 8014526:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014528:	2100      	movs	r1, #0
 801452a:	0092      	lsls	r2, r2, #2
 801452c:	f003 ff1e 	bl	801836c <memset>
 8014530:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014532:	2200      	movs	r2, #0
 8014534:	631a      	str	r2, [r3, #48]	@ 0x30
 8014536:	6920      	ldr	r0, [r4, #16]
 8014538:	b138      	cbz	r0, 801454a <rcl_wait_set_clear+0x86>
 801453a:	6962      	ldr	r2, [r4, #20]
 801453c:	2100      	movs	r1, #0
 801453e:	0092      	lsls	r2, r2, #2
 8014540:	f003 ff14 	bl	801836c <memset>
 8014544:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014546:	2200      	movs	r2, #0
 8014548:	641a      	str	r2, [r3, #64]	@ 0x40
 801454a:	6898      	ldr	r0, [r3, #8]
 801454c:	b138      	cbz	r0, 801455e <rcl_wait_set_clear+0x9a>
 801454e:	685a      	ldr	r2, [r3, #4]
 8014550:	2100      	movs	r1, #0
 8014552:	0092      	lsls	r2, r2, #2
 8014554:	f003 ff0a 	bl	801836c <memset>
 8014558:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801455a:	2200      	movs	r2, #0
 801455c:	605a      	str	r2, [r3, #4]
 801455e:	6958      	ldr	r0, [r3, #20]
 8014560:	b138      	cbz	r0, 8014572 <rcl_wait_set_clear+0xae>
 8014562:	691a      	ldr	r2, [r3, #16]
 8014564:	2100      	movs	r1, #0
 8014566:	0092      	lsls	r2, r2, #2
 8014568:	f003 ff00 	bl	801836c <memset>
 801456c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801456e:	2200      	movs	r2, #0
 8014570:	611a      	str	r2, [r3, #16]
 8014572:	6a18      	ldr	r0, [r3, #32]
 8014574:	b138      	cbz	r0, 8014586 <rcl_wait_set_clear+0xc2>
 8014576:	69da      	ldr	r2, [r3, #28]
 8014578:	2100      	movs	r1, #0
 801457a:	0092      	lsls	r2, r2, #2
 801457c:	f003 fef6 	bl	801836c <memset>
 8014580:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014582:	2200      	movs	r2, #0
 8014584:	61da      	str	r2, [r3, #28]
 8014586:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014588:	b138      	cbz	r0, 801459a <rcl_wait_set_clear+0xd6>
 801458a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801458c:	2100      	movs	r1, #0
 801458e:	0092      	lsls	r2, r2, #2
 8014590:	f003 feec 	bl	801836c <memset>
 8014594:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014596:	2200      	movs	r2, #0
 8014598:	629a      	str	r2, [r3, #40]	@ 0x28
 801459a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801459c:	b138      	cbz	r0, 80145ae <rcl_wait_set_clear+0xea>
 801459e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80145a0:	2100      	movs	r1, #0
 80145a2:	0092      	lsls	r2, r2, #2
 80145a4:	f003 fee2 	bl	801836c <memset>
 80145a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80145aa:	2000      	movs	r0, #0
 80145ac:	6358      	str	r0, [r3, #52]	@ 0x34
 80145ae:	bd10      	pop	{r4, pc}
 80145b0:	200b      	movs	r0, #11
 80145b2:	4770      	bx	lr
 80145b4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80145b8:	bd10      	pop	{r4, pc}
 80145ba:	bf00      	nop

080145bc <rcl_wait_set_resize>:
 80145bc:	2800      	cmp	r0, #0
 80145be:	f000 8185 	beq.w	80148cc <rcl_wait_set_resize+0x310>
 80145c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80145c8:	b083      	sub	sp, #12
 80145ca:	4605      	mov	r5, r0
 80145cc:	2c00      	cmp	r4, #0
 80145ce:	f000 817f 	beq.w	80148d0 <rcl_wait_set_resize+0x314>
 80145d2:	f04f 0900 	mov.w	r9, #0
 80145d6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80145da:	461f      	mov	r7, r3
 80145dc:	4688      	mov	r8, r1
 80145de:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80145e2:	4616      	mov	r6, r2
 80145e4:	f8c0 9004 	str.w	r9, [r0, #4]
 80145e8:	f8c4 9000 	str.w	r9, [r4]
 80145ec:	2900      	cmp	r1, #0
 80145ee:	f000 80bd 	beq.w	801476c <rcl_wait_set_resize+0x1b0>
 80145f2:	008c      	lsls	r4, r1, #2
 80145f4:	6800      	ldr	r0, [r0, #0]
 80145f6:	9301      	str	r3, [sp, #4]
 80145f8:	4652      	mov	r2, sl
 80145fa:	4621      	mov	r1, r4
 80145fc:	4798      	blx	r3
 80145fe:	9b01      	ldr	r3, [sp, #4]
 8014600:	6028      	str	r0, [r5, #0]
 8014602:	2800      	cmp	r0, #0
 8014604:	f000 80cb 	beq.w	801479e <rcl_wait_set_resize+0x1e2>
 8014608:	4622      	mov	r2, r4
 801460a:	4649      	mov	r1, r9
 801460c:	9301      	str	r3, [sp, #4]
 801460e:	f003 fead 	bl	801836c <memset>
 8014612:	f8c5 8004 	str.w	r8, [r5, #4]
 8014616:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801461a:	9b01      	ldr	r3, [sp, #4]
 801461c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014620:	f8c8 9004 	str.w	r9, [r8, #4]
 8014624:	4652      	mov	r2, sl
 8014626:	4621      	mov	r1, r4
 8014628:	4798      	blx	r3
 801462a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801462c:	f8c8 0008 	str.w	r0, [r8, #8]
 8014630:	689b      	ldr	r3, [r3, #8]
 8014632:	2b00      	cmp	r3, #0
 8014634:	f000 80ac 	beq.w	8014790 <rcl_wait_set_resize+0x1d4>
 8014638:	4622      	mov	r2, r4
 801463a:	4649      	mov	r1, r9
 801463c:	4618      	mov	r0, r3
 801463e:	f003 fe95 	bl	801836c <memset>
 8014642:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014644:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014648:	f04f 0800 	mov.w	r8, #0
 801464c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8014650:	f8c5 800c 	str.w	r8, [r5, #12]
 8014654:	f8c4 800c 	str.w	r8, [r4, #12]
 8014658:	2e00      	cmp	r6, #0
 801465a:	f040 80a4 	bne.w	80147a6 <rcl_wait_set_resize+0x1ea>
 801465e:	68a8      	ldr	r0, [r5, #8]
 8014660:	b128      	cbz	r0, 801466e <rcl_wait_set_resize+0xb2>
 8014662:	4649      	mov	r1, r9
 8014664:	4790      	blx	r2
 8014666:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014668:	60ae      	str	r6, [r5, #8]
 801466a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801466e:	f04f 0800 	mov.w	r8, #0
 8014672:	19f6      	adds	r6, r6, r7
 8014674:	f8c4 8010 	str.w	r8, [r4, #16]
 8014678:	f040 80ac 	bne.w	80147d4 <rcl_wait_set_resize+0x218>
 801467c:	6960      	ldr	r0, [r4, #20]
 801467e:	b130      	cbz	r0, 801468e <rcl_wait_set_resize+0xd2>
 8014680:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014682:	4649      	mov	r1, r9
 8014684:	4798      	blx	r3
 8014686:	6166      	str	r6, [r4, #20]
 8014688:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801468a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801468e:	2600      	movs	r6, #0
 8014690:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014694:	616e      	str	r6, [r5, #20]
 8014696:	6426      	str	r6, [r4, #64]	@ 0x40
 8014698:	2f00      	cmp	r7, #0
 801469a:	f040 80ad 	bne.w	80147f8 <rcl_wait_set_resize+0x23c>
 801469e:	6928      	ldr	r0, [r5, #16]
 80146a0:	b138      	cbz	r0, 80146b2 <rcl_wait_set_resize+0xf6>
 80146a2:	4649      	mov	r1, r9
 80146a4:	47d0      	blx	sl
 80146a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146a8:	612f      	str	r7, [r5, #16]
 80146aa:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80146ae:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80146b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80146b4:	2600      	movs	r6, #0
 80146b6:	61ee      	str	r6, [r5, #28]
 80146b8:	61a6      	str	r6, [r4, #24]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	f040 80af 	bne.w	801481e <rcl_wait_set_resize+0x262>
 80146c0:	69a8      	ldr	r0, [r5, #24]
 80146c2:	b120      	cbz	r0, 80146ce <rcl_wait_set_resize+0x112>
 80146c4:	4649      	mov	r1, r9
 80146c6:	47d0      	blx	sl
 80146c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80146ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146cc:	61ab      	str	r3, [r5, #24]
 80146ce:	6a20      	ldr	r0, [r4, #32]
 80146d0:	b128      	cbz	r0, 80146de <rcl_wait_set_resize+0x122>
 80146d2:	4649      	mov	r1, r9
 80146d4:	47d0      	blx	sl
 80146d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146d8:	2300      	movs	r3, #0
 80146da:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80146de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80146e0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80146e2:	2600      	movs	r6, #0
 80146e4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80146e8:	626e      	str	r6, [r5, #36]	@ 0x24
 80146ea:	6266      	str	r6, [r4, #36]	@ 0x24
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	f000 80b6 	beq.w	801485e <rcl_wait_set_resize+0x2a2>
 80146f2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80146f6:	6a28      	ldr	r0, [r5, #32]
 80146f8:	463a      	mov	r2, r7
 80146fa:	4651      	mov	r1, sl
 80146fc:	47c8      	blx	r9
 80146fe:	6228      	str	r0, [r5, #32]
 8014700:	2800      	cmp	r0, #0
 8014702:	d04c      	beq.n	801479e <rcl_wait_set_resize+0x1e2>
 8014704:	4652      	mov	r2, sl
 8014706:	4631      	mov	r1, r6
 8014708:	f003 fe30 	bl	801836c <memset>
 801470c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801470e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014710:	626b      	str	r3, [r5, #36]	@ 0x24
 8014712:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014714:	62a6      	str	r6, [r4, #40]	@ 0x28
 8014716:	463a      	mov	r2, r7
 8014718:	4651      	mov	r1, sl
 801471a:	47c8      	blx	r9
 801471c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801471e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8014720:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8014722:	2c00      	cmp	r4, #0
 8014724:	f000 80f0 	beq.w	8014908 <rcl_wait_set_resize+0x34c>
 8014728:	4620      	mov	r0, r4
 801472a:	4652      	mov	r2, sl
 801472c:	4631      	mov	r1, r6
 801472e:	f003 fe1d 	bl	801836c <memset>
 8014732:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014736:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014738:	2600      	movs	r6, #0
 801473a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801473e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8014740:	6326      	str	r6, [r4, #48]	@ 0x30
 8014742:	2b00      	cmp	r3, #0
 8014744:	f040 809d 	bne.w	8014882 <rcl_wait_set_resize+0x2c6>
 8014748:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801474a:	b120      	cbz	r0, 8014756 <rcl_wait_set_resize+0x19a>
 801474c:	4639      	mov	r1, r7
 801474e:	47c0      	blx	r8
 8014750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014752:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014754:	62ab      	str	r3, [r5, #40]	@ 0x28
 8014756:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014758:	b310      	cbz	r0, 80147a0 <rcl_wait_set_resize+0x1e4>
 801475a:	4639      	mov	r1, r7
 801475c:	47c0      	blx	r8
 801475e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014760:	2000      	movs	r0, #0
 8014762:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8014766:	b003      	add	sp, #12
 8014768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801476c:	6800      	ldr	r0, [r0, #0]
 801476e:	b120      	cbz	r0, 801477a <rcl_wait_set_resize+0x1be>
 8014770:	4651      	mov	r1, sl
 8014772:	47d8      	blx	fp
 8014774:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014776:	f8c5 8000 	str.w	r8, [r5]
 801477a:	68a0      	ldr	r0, [r4, #8]
 801477c:	2800      	cmp	r0, #0
 801477e:	f43f af61 	beq.w	8014644 <rcl_wait_set_resize+0x88>
 8014782:	4651      	mov	r1, sl
 8014784:	47d8      	blx	fp
 8014786:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014788:	2300      	movs	r3, #0
 801478a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801478e:	e759      	b.n	8014644 <rcl_wait_set_resize+0x88>
 8014790:	6828      	ldr	r0, [r5, #0]
 8014792:	9301      	str	r3, [sp, #4]
 8014794:	4651      	mov	r1, sl
 8014796:	47d8      	blx	fp
 8014798:	9b01      	ldr	r3, [sp, #4]
 801479a:	e9c5 3300 	strd	r3, r3, [r5]
 801479e:	200a      	movs	r0, #10
 80147a0:	b003      	add	sp, #12
 80147a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147a6:	00b4      	lsls	r4, r6, #2
 80147a8:	68a8      	ldr	r0, [r5, #8]
 80147aa:	464a      	mov	r2, r9
 80147ac:	4621      	mov	r1, r4
 80147ae:	4798      	blx	r3
 80147b0:	60a8      	str	r0, [r5, #8]
 80147b2:	2800      	cmp	r0, #0
 80147b4:	d0f3      	beq.n	801479e <rcl_wait_set_resize+0x1e2>
 80147b6:	4622      	mov	r2, r4
 80147b8:	4641      	mov	r1, r8
 80147ba:	f003 fdd7 	bl	801836c <memset>
 80147be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80147c0:	60ee      	str	r6, [r5, #12]
 80147c2:	f04f 0800 	mov.w	r8, #0
 80147c6:	19f6      	adds	r6, r6, r7
 80147c8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80147cc:	f8c4 8010 	str.w	r8, [r4, #16]
 80147d0:	f43f af54 	beq.w	801467c <rcl_wait_set_resize+0xc0>
 80147d4:	00b6      	lsls	r6, r6, #2
 80147d6:	464a      	mov	r2, r9
 80147d8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80147da:	6960      	ldr	r0, [r4, #20]
 80147dc:	4631      	mov	r1, r6
 80147de:	4798      	blx	r3
 80147e0:	4681      	mov	r9, r0
 80147e2:	6160      	str	r0, [r4, #20]
 80147e4:	2800      	cmp	r0, #0
 80147e6:	d076      	beq.n	80148d6 <rcl_wait_set_resize+0x31a>
 80147e8:	4632      	mov	r2, r6
 80147ea:	4641      	mov	r1, r8
 80147ec:	f003 fdbe 	bl	801836c <memset>
 80147f0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80147f2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80147f6:	e74a      	b.n	801468e <rcl_wait_set_resize+0xd2>
 80147f8:	00bc      	lsls	r4, r7, #2
 80147fa:	6928      	ldr	r0, [r5, #16]
 80147fc:	464a      	mov	r2, r9
 80147fe:	4621      	mov	r1, r4
 8014800:	47c0      	blx	r8
 8014802:	6128      	str	r0, [r5, #16]
 8014804:	2800      	cmp	r0, #0
 8014806:	d0ca      	beq.n	801479e <rcl_wait_set_resize+0x1e2>
 8014808:	4622      	mov	r2, r4
 801480a:	4631      	mov	r1, r6
 801480c:	f003 fdae 	bl	801836c <memset>
 8014810:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014812:	616f      	str	r7, [r5, #20]
 8014814:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014818:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801481c:	e749      	b.n	80146b2 <rcl_wait_set_resize+0xf6>
 801481e:	009c      	lsls	r4, r3, #2
 8014820:	69a8      	ldr	r0, [r5, #24]
 8014822:	464a      	mov	r2, r9
 8014824:	4621      	mov	r1, r4
 8014826:	47c0      	blx	r8
 8014828:	61a8      	str	r0, [r5, #24]
 801482a:	2800      	cmp	r0, #0
 801482c:	d0b7      	beq.n	801479e <rcl_wait_set_resize+0x1e2>
 801482e:	4622      	mov	r2, r4
 8014830:	4631      	mov	r1, r6
 8014832:	f003 fd9b 	bl	801836c <memset>
 8014836:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8014838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801483a:	61eb      	str	r3, [r5, #28]
 801483c:	6a38      	ldr	r0, [r7, #32]
 801483e:	61fe      	str	r6, [r7, #28]
 8014840:	464a      	mov	r2, r9
 8014842:	4621      	mov	r1, r4
 8014844:	47c0      	blx	r8
 8014846:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014848:	6238      	str	r0, [r7, #32]
 801484a:	6a1f      	ldr	r7, [r3, #32]
 801484c:	2f00      	cmp	r7, #0
 801484e:	d054      	beq.n	80148fa <rcl_wait_set_resize+0x33e>
 8014850:	4622      	mov	r2, r4
 8014852:	4631      	mov	r1, r6
 8014854:	4638      	mov	r0, r7
 8014856:	f003 fd89 	bl	801836c <memset>
 801485a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801485c:	e73f      	b.n	80146de <rcl_wait_set_resize+0x122>
 801485e:	6a28      	ldr	r0, [r5, #32]
 8014860:	b120      	cbz	r0, 801486c <rcl_wait_set_resize+0x2b0>
 8014862:	4639      	mov	r1, r7
 8014864:	47c0      	blx	r8
 8014866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014868:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801486a:	622b      	str	r3, [r5, #32]
 801486c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801486e:	2800      	cmp	r0, #0
 8014870:	f43f af60 	beq.w	8014734 <rcl_wait_set_resize+0x178>
 8014874:	4639      	mov	r1, r7
 8014876:	47c0      	blx	r8
 8014878:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801487a:	2300      	movs	r3, #0
 801487c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014880:	e758      	b.n	8014734 <rcl_wait_set_resize+0x178>
 8014882:	009c      	lsls	r4, r3, #2
 8014884:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014886:	463a      	mov	r2, r7
 8014888:	4621      	mov	r1, r4
 801488a:	47c8      	blx	r9
 801488c:	62a8      	str	r0, [r5, #40]	@ 0x28
 801488e:	2800      	cmp	r0, #0
 8014890:	d085      	beq.n	801479e <rcl_wait_set_resize+0x1e2>
 8014892:	4622      	mov	r2, r4
 8014894:	4631      	mov	r1, r6
 8014896:	f003 fd69 	bl	801836c <memset>
 801489a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801489e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80148a0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80148a2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80148a6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80148aa:	463a      	mov	r2, r7
 80148ac:	4621      	mov	r1, r4
 80148ae:	47c8      	blx	r9
 80148b0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80148b2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80148b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148b8:	b36b      	cbz	r3, 8014916 <rcl_wait_set_resize+0x35a>
 80148ba:	4622      	mov	r2, r4
 80148bc:	4631      	mov	r1, r6
 80148be:	4618      	mov	r0, r3
 80148c0:	f003 fd54 	bl	801836c <memset>
 80148c4:	4630      	mov	r0, r6
 80148c6:	b003      	add	sp, #12
 80148c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148cc:	200b      	movs	r0, #11
 80148ce:	4770      	bx	lr
 80148d0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80148d4:	e764      	b.n	80147a0 <rcl_wait_set_resize+0x1e4>
 80148d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80148d8:	68a8      	ldr	r0, [r5, #8]
 80148da:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80148dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80148de:	4798      	blx	r3
 80148e0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80148e2:	6928      	ldr	r0, [r5, #16]
 80148e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80148e6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80148e8:	f8c5 900c 	str.w	r9, [r5, #12]
 80148ec:	f8c5 9008 	str.w	r9, [r5, #8]
 80148f0:	4790      	blx	r2
 80148f2:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80148f6:	200a      	movs	r0, #10
 80148f8:	e752      	b.n	80147a0 <rcl_wait_set_resize+0x1e4>
 80148fa:	69a8      	ldr	r0, [r5, #24]
 80148fc:	4649      	mov	r1, r9
 80148fe:	47d0      	blx	sl
 8014900:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8014904:	200a      	movs	r0, #10
 8014906:	e74b      	b.n	80147a0 <rcl_wait_set_resize+0x1e4>
 8014908:	6a28      	ldr	r0, [r5, #32]
 801490a:	4639      	mov	r1, r7
 801490c:	47c0      	blx	r8
 801490e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8014912:	200a      	movs	r0, #10
 8014914:	e744      	b.n	80147a0 <rcl_wait_set_resize+0x1e4>
 8014916:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014918:	9301      	str	r3, [sp, #4]
 801491a:	4639      	mov	r1, r7
 801491c:	47c0      	blx	r8
 801491e:	9b01      	ldr	r3, [sp, #4]
 8014920:	200a      	movs	r0, #10
 8014922:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014926:	e73b      	b.n	80147a0 <rcl_wait_set_resize+0x1e4>

08014928 <rcl_wait_set_init>:
 8014928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801492c:	b084      	sub	sp, #16
 801492e:	4604      	mov	r4, r0
 8014930:	a810      	add	r0, sp, #64	@ 0x40
 8014932:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8014936:	460f      	mov	r7, r1
 8014938:	4690      	mov	r8, r2
 801493a:	4699      	mov	r9, r3
 801493c:	f7f8 f934 	bl	800cba8 <rcutils_allocator_is_valid>
 8014940:	2800      	cmp	r0, #0
 8014942:	d06b      	beq.n	8014a1c <rcl_wait_set_init+0xf4>
 8014944:	2c00      	cmp	r4, #0
 8014946:	d069      	beq.n	8014a1c <rcl_wait_set_init+0xf4>
 8014948:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801494a:	b125      	cbz	r5, 8014956 <rcl_wait_set_init+0x2e>
 801494c:	2564      	movs	r5, #100	@ 0x64
 801494e:	4628      	mov	r0, r5
 8014950:	b004      	add	sp, #16
 8014952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014956:	f1ba 0f00 	cmp.w	sl, #0
 801495a:	d05f      	beq.n	8014a1c <rcl_wait_set_init+0xf4>
 801495c:	4650      	mov	r0, sl
 801495e:	f7f6 f88d 	bl	800aa7c <rcl_context_is_valid>
 8014962:	2800      	cmp	r0, #0
 8014964:	d067      	beq.n	8014a36 <rcl_wait_set_init+0x10e>
 8014966:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014968:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801496a:	205c      	movs	r0, #92	@ 0x5c
 801496c:	4798      	blx	r3
 801496e:	6320      	str	r0, [r4, #48]	@ 0x30
 8014970:	2800      	cmp	r0, #0
 8014972:	d062      	beq.n	8014a3a <rcl_wait_set_init+0x112>
 8014974:	4629      	mov	r1, r5
 8014976:	225c      	movs	r2, #92	@ 0x5c
 8014978:	f003 fcf8 	bl	801836c <memset>
 801497c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8014980:	eb03 0e02 	add.w	lr, r3, r2
 8014984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014986:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014988:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801498c:	449e      	add	lr, r3
 801498e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014992:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8014996:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801499a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801499e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80149a2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80149a6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80149aa:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80149ae:	f8da a000 	ldr.w	sl, [sl]
 80149b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80149b4:	44c6      	add	lr, r8
 80149b6:	f8dc 3000 	ldr.w	r3, [ip]
 80149ba:	602b      	str	r3, [r5, #0]
 80149bc:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80149c0:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80149c4:	f001 ff14 	bl	80167f0 <rmw_create_wait_set>
 80149c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149ca:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80149cc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80149ce:	b350      	cbz	r0, 8014a26 <rcl_wait_set_init+0xfe>
 80149d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80149d2:	9302      	str	r3, [sp, #8]
 80149d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80149d6:	9301      	str	r3, [sp, #4]
 80149d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80149da:	9300      	str	r3, [sp, #0]
 80149dc:	4642      	mov	r2, r8
 80149de:	464b      	mov	r3, r9
 80149e0:	4639      	mov	r1, r7
 80149e2:	4620      	mov	r0, r4
 80149e4:	f7ff fdea 	bl	80145bc <rcl_wait_set_resize>
 80149e8:	4605      	mov	r5, r0
 80149ea:	2800      	cmp	r0, #0
 80149ec:	d0af      	beq.n	801494e <rcl_wait_set_init+0x26>
 80149ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149f0:	bb2b      	cbnz	r3, 8014a3e <rcl_wait_set_init+0x116>
 80149f2:	2600      	movs	r6, #0
 80149f4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80149f8:	9600      	str	r6, [sp, #0]
 80149fa:	4633      	mov	r3, r6
 80149fc:	4632      	mov	r2, r6
 80149fe:	4631      	mov	r1, r6
 8014a00:	4620      	mov	r0, r4
 8014a02:	f7ff fddb 	bl	80145bc <rcl_wait_set_resize>
 8014a06:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014a08:	2800      	cmp	r0, #0
 8014a0a:	d0a0      	beq.n	801494e <rcl_wait_set_init+0x26>
 8014a0c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8014a0e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8014a10:	4798      	blx	r3
 8014a12:	4628      	mov	r0, r5
 8014a14:	6326      	str	r6, [r4, #48]	@ 0x30
 8014a16:	b004      	add	sp, #16
 8014a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a1c:	250b      	movs	r5, #11
 8014a1e:	4628      	mov	r0, r5
 8014a20:	b004      	add	sp, #16
 8014a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a26:	2501      	movs	r5, #1
 8014a28:	f001 feec 	bl	8016804 <rmw_destroy_wait_set>
 8014a2c:	2800      	cmp	r0, #0
 8014a2e:	bf18      	it	ne
 8014a30:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8014a34:	e7dd      	b.n	80149f2 <rcl_wait_set_init+0xca>
 8014a36:	2565      	movs	r5, #101	@ 0x65
 8014a38:	e789      	b.n	801494e <rcl_wait_set_init+0x26>
 8014a3a:	250a      	movs	r5, #10
 8014a3c:	e787      	b.n	801494e <rcl_wait_set_init+0x26>
 8014a3e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014a40:	e7f2      	b.n	8014a28 <rcl_wait_set_init+0x100>
 8014a42:	bf00      	nop

08014a44 <rcl_wait_set_add_guard_condition>:
 8014a44:	b318      	cbz	r0, 8014a8e <rcl_wait_set_add_guard_condition+0x4a>
 8014a46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014a48:	b570      	push	{r4, r5, r6, lr}
 8014a4a:	4604      	mov	r4, r0
 8014a4c:	b30b      	cbz	r3, 8014a92 <rcl_wait_set_add_guard_condition+0x4e>
 8014a4e:	b319      	cbz	r1, 8014a98 <rcl_wait_set_add_guard_condition+0x54>
 8014a50:	68dd      	ldr	r5, [r3, #12]
 8014a52:	68c0      	ldr	r0, [r0, #12]
 8014a54:	4285      	cmp	r5, r0
 8014a56:	d217      	bcs.n	8014a88 <rcl_wait_set_add_guard_condition+0x44>
 8014a58:	68a0      	ldr	r0, [r4, #8]
 8014a5a:	1c6e      	adds	r6, r5, #1
 8014a5c:	60de      	str	r6, [r3, #12]
 8014a5e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014a62:	b102      	cbz	r2, 8014a66 <rcl_wait_set_add_guard_condition+0x22>
 8014a64:	6015      	str	r5, [r2, #0]
 8014a66:	4608      	mov	r0, r1
 8014a68:	f7ff f874 	bl	8013b54 <rcl_guard_condition_get_rmw_handle>
 8014a6c:	b150      	cbz	r0, 8014a84 <rcl_wait_set_add_guard_condition+0x40>
 8014a6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014a70:	6842      	ldr	r2, [r0, #4]
 8014a72:	695b      	ldr	r3, [r3, #20]
 8014a74:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014a78:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014a7a:	6913      	ldr	r3, [r2, #16]
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	2000      	movs	r0, #0
 8014a80:	6113      	str	r3, [r2, #16]
 8014a82:	bd70      	pop	{r4, r5, r6, pc}
 8014a84:	2001      	movs	r0, #1
 8014a86:	bd70      	pop	{r4, r5, r6, pc}
 8014a88:	f240 3086 	movw	r0, #902	@ 0x386
 8014a8c:	bd70      	pop	{r4, r5, r6, pc}
 8014a8e:	200b      	movs	r0, #11
 8014a90:	4770      	bx	lr
 8014a92:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014a96:	bd70      	pop	{r4, r5, r6, pc}
 8014a98:	200b      	movs	r0, #11
 8014a9a:	bd70      	pop	{r4, r5, r6, pc}

08014a9c <rcl_wait_set_add_timer>:
 8014a9c:	b328      	cbz	r0, 8014aea <rcl_wait_set_add_timer+0x4e>
 8014a9e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014aa0:	b570      	push	{r4, r5, r6, lr}
 8014aa2:	4604      	mov	r4, r0
 8014aa4:	b31b      	cbz	r3, 8014aee <rcl_wait_set_add_timer+0x52>
 8014aa6:	b329      	cbz	r1, 8014af4 <rcl_wait_set_add_timer+0x58>
 8014aa8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8014aaa:	6965      	ldr	r5, [r4, #20]
 8014aac:	42a8      	cmp	r0, r5
 8014aae:	d219      	bcs.n	8014ae4 <rcl_wait_set_add_timer+0x48>
 8014ab0:	6925      	ldr	r5, [r4, #16]
 8014ab2:	1c46      	adds	r6, r0, #1
 8014ab4:	641e      	str	r6, [r3, #64]	@ 0x40
 8014ab6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014aba:	b102      	cbz	r2, 8014abe <rcl_wait_set_add_timer+0x22>
 8014abc:	6010      	str	r0, [r2, #0]
 8014abe:	4608      	mov	r0, r1
 8014ac0:	f7f7 f882 	bl	800bbc8 <rcl_timer_get_guard_condition>
 8014ac4:	b168      	cbz	r0, 8014ae2 <rcl_wait_set_add_timer+0x46>
 8014ac6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014ac8:	68e3      	ldr	r3, [r4, #12]
 8014aca:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8014acc:	3b01      	subs	r3, #1
 8014ace:	441d      	add	r5, r3
 8014ad0:	f7ff f840 	bl	8013b54 <rcl_guard_condition_get_rmw_handle>
 8014ad4:	b180      	cbz	r0, 8014af8 <rcl_wait_set_add_timer+0x5c>
 8014ad6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ad8:	6842      	ldr	r2, [r0, #4]
 8014ada:	695b      	ldr	r3, [r3, #20]
 8014adc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014ae0:	2000      	movs	r0, #0
 8014ae2:	bd70      	pop	{r4, r5, r6, pc}
 8014ae4:	f240 3086 	movw	r0, #902	@ 0x386
 8014ae8:	bd70      	pop	{r4, r5, r6, pc}
 8014aea:	200b      	movs	r0, #11
 8014aec:	4770      	bx	lr
 8014aee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014af2:	bd70      	pop	{r4, r5, r6, pc}
 8014af4:	200b      	movs	r0, #11
 8014af6:	bd70      	pop	{r4, r5, r6, pc}
 8014af8:	2001      	movs	r0, #1
 8014afa:	bd70      	pop	{r4, r5, r6, pc}

08014afc <rcl_wait_set_add_client>:
 8014afc:	b318      	cbz	r0, 8014b46 <rcl_wait_set_add_client+0x4a>
 8014afe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014b00:	b570      	push	{r4, r5, r6, lr}
 8014b02:	4604      	mov	r4, r0
 8014b04:	b30b      	cbz	r3, 8014b4a <rcl_wait_set_add_client+0x4e>
 8014b06:	b319      	cbz	r1, 8014b50 <rcl_wait_set_add_client+0x54>
 8014b08:	699d      	ldr	r5, [r3, #24]
 8014b0a:	69c0      	ldr	r0, [r0, #28]
 8014b0c:	4285      	cmp	r5, r0
 8014b0e:	d217      	bcs.n	8014b40 <rcl_wait_set_add_client+0x44>
 8014b10:	69a0      	ldr	r0, [r4, #24]
 8014b12:	1c6e      	adds	r6, r5, #1
 8014b14:	619e      	str	r6, [r3, #24]
 8014b16:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014b1a:	b102      	cbz	r2, 8014b1e <rcl_wait_set_add_client+0x22>
 8014b1c:	6015      	str	r5, [r2, #0]
 8014b1e:	4608      	mov	r0, r1
 8014b20:	f7fe fe6e 	bl	8013800 <rcl_client_get_rmw_handle>
 8014b24:	b150      	cbz	r0, 8014b3c <rcl_wait_set_add_client+0x40>
 8014b26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b28:	6842      	ldr	r2, [r0, #4]
 8014b2a:	6a1b      	ldr	r3, [r3, #32]
 8014b2c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014b30:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014b32:	69d3      	ldr	r3, [r2, #28]
 8014b34:	3301      	adds	r3, #1
 8014b36:	2000      	movs	r0, #0
 8014b38:	61d3      	str	r3, [r2, #28]
 8014b3a:	bd70      	pop	{r4, r5, r6, pc}
 8014b3c:	2001      	movs	r0, #1
 8014b3e:	bd70      	pop	{r4, r5, r6, pc}
 8014b40:	f240 3086 	movw	r0, #902	@ 0x386
 8014b44:	bd70      	pop	{r4, r5, r6, pc}
 8014b46:	200b      	movs	r0, #11
 8014b48:	4770      	bx	lr
 8014b4a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014b4e:	bd70      	pop	{r4, r5, r6, pc}
 8014b50:	200b      	movs	r0, #11
 8014b52:	bd70      	pop	{r4, r5, r6, pc}

08014b54 <rcl_wait_set_add_service>:
 8014b54:	b318      	cbz	r0, 8014b9e <rcl_wait_set_add_service+0x4a>
 8014b56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014b58:	b570      	push	{r4, r5, r6, lr}
 8014b5a:	4604      	mov	r4, r0
 8014b5c:	b30b      	cbz	r3, 8014ba2 <rcl_wait_set_add_service+0x4e>
 8014b5e:	b319      	cbz	r1, 8014ba8 <rcl_wait_set_add_service+0x54>
 8014b60:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8014b62:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8014b64:	4285      	cmp	r5, r0
 8014b66:	d217      	bcs.n	8014b98 <rcl_wait_set_add_service+0x44>
 8014b68:	6a20      	ldr	r0, [r4, #32]
 8014b6a:	1c6e      	adds	r6, r5, #1
 8014b6c:	625e      	str	r6, [r3, #36]	@ 0x24
 8014b6e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014b72:	b102      	cbz	r2, 8014b76 <rcl_wait_set_add_service+0x22>
 8014b74:	6015      	str	r5, [r2, #0]
 8014b76:	4608      	mov	r0, r1
 8014b78:	f7ff f9c8 	bl	8013f0c <rcl_service_get_rmw_handle>
 8014b7c:	b150      	cbz	r0, 8014b94 <rcl_wait_set_add_service+0x40>
 8014b7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b80:	6842      	ldr	r2, [r0, #4]
 8014b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b84:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014b88:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014b8a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	2000      	movs	r0, #0
 8014b90:	6293      	str	r3, [r2, #40]	@ 0x28
 8014b92:	bd70      	pop	{r4, r5, r6, pc}
 8014b94:	2001      	movs	r0, #1
 8014b96:	bd70      	pop	{r4, r5, r6, pc}
 8014b98:	f240 3086 	movw	r0, #902	@ 0x386
 8014b9c:	bd70      	pop	{r4, r5, r6, pc}
 8014b9e:	200b      	movs	r0, #11
 8014ba0:	4770      	bx	lr
 8014ba2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014ba6:	bd70      	pop	{r4, r5, r6, pc}
 8014ba8:	200b      	movs	r0, #11
 8014baa:	bd70      	pop	{r4, r5, r6, pc}
 8014bac:	0000      	movs	r0, r0
	...

08014bb0 <rcl_wait>:
 8014bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb4:	ed2d 8b02 	vpush	{d8}
 8014bb8:	b08d      	sub	sp, #52	@ 0x34
 8014bba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014bbe:	2800      	cmp	r0, #0
 8014bc0:	f000 8143 	beq.w	8014e4a <rcl_wait+0x29a>
 8014bc4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014bc6:	4605      	mov	r5, r0
 8014bc8:	2e00      	cmp	r6, #0
 8014bca:	f000 8112 	beq.w	8014df2 <rcl_wait+0x242>
 8014bce:	6843      	ldr	r3, [r0, #4]
 8014bd0:	b983      	cbnz	r3, 8014bf4 <rcl_wait+0x44>
 8014bd2:	68eb      	ldr	r3, [r5, #12]
 8014bd4:	b973      	cbnz	r3, 8014bf4 <rcl_wait+0x44>
 8014bd6:	696b      	ldr	r3, [r5, #20]
 8014bd8:	b963      	cbnz	r3, 8014bf4 <rcl_wait+0x44>
 8014bda:	69eb      	ldr	r3, [r5, #28]
 8014bdc:	b953      	cbnz	r3, 8014bf4 <rcl_wait+0x44>
 8014bde:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8014be0:	b943      	cbnz	r3, 8014bf4 <rcl_wait+0x44>
 8014be2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8014be4:	b933      	cbnz	r3, 8014bf4 <rcl_wait+0x44>
 8014be6:	f240 3085 	movw	r0, #901	@ 0x385
 8014bea:	b00d      	add	sp, #52	@ 0x34
 8014bec:	ecbd 8b02 	vpop	{d8}
 8014bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bf4:	9b04      	ldr	r3, [sp, #16]
 8014bf6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8014bf8:	2b01      	cmp	r3, #1
 8014bfa:	9b05      	ldr	r3, [sp, #20]
 8014bfc:	f173 0300 	sbcs.w	r3, r3, #0
 8014c00:	f2c0 80f0 	blt.w	8014de4 <rcl_wait+0x234>
 8014c04:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8014c08:	4643      	mov	r3, r8
 8014c0a:	2a00      	cmp	r2, #0
 8014c0c:	f000 8133 	beq.w	8014e76 <rcl_wait+0x2c6>
 8014c10:	2400      	movs	r4, #0
 8014c12:	4613      	mov	r3, r2
 8014c14:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8014e88 <rcl_wait+0x2d8>
 8014c18:	46a2      	mov	sl, r4
 8014c1a:	46a3      	mov	fp, r4
 8014c1c:	f240 3921 	movw	r9, #801	@ 0x321
 8014c20:	4632      	mov	r2, r6
 8014c22:	e014      	b.n	8014c4e <rcl_wait+0x9e>
 8014c24:	2800      	cmp	r0, #0
 8014c26:	d1e0      	bne.n	8014bea <rcl_wait+0x3a>
 8014c28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014c2c:	4542      	cmp	r2, r8
 8014c2e:	eb73 0107 	sbcs.w	r1, r3, r7
 8014c32:	da03      	bge.n	8014c3c <rcl_wait+0x8c>
 8014c34:	4690      	mov	r8, r2
 8014c36:	461f      	mov	r7, r3
 8014c38:	f04f 0b01 	mov.w	fp, #1
 8014c3c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8014c3e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8014c40:	3401      	adds	r4, #1
 8014c42:	f14a 0a00 	adc.w	sl, sl, #0
 8014c46:	429c      	cmp	r4, r3
 8014c48:	f17a 0100 	sbcs.w	r1, sl, #0
 8014c4c:	d228      	bcs.n	8014ca0 <rcl_wait+0xf0>
 8014c4e:	6928      	ldr	r0, [r5, #16]
 8014c50:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014c54:	a908      	add	r1, sp, #32
 8014c56:	00a6      	lsls	r6, r4, #2
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	d0f1      	beq.n	8014c40 <rcl_wait+0x90>
 8014c5c:	68eb      	ldr	r3, [r5, #12]
 8014c5e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8014c62:	4423      	add	r3, r4
 8014c64:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8014c68:	f1be 0f00 	cmp.w	lr, #0
 8014c6c:	d006      	beq.n	8014c7c <rcl_wait+0xcc>
 8014c6e:	6913      	ldr	r3, [r2, #16]
 8014c70:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8014c74:	3301      	adds	r3, #1
 8014c76:	6113      	str	r3, [r2, #16]
 8014c78:	692b      	ldr	r3, [r5, #16]
 8014c7a:	5998      	ldr	r0, [r3, r6]
 8014c7c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014c80:	f7f6 ff70 	bl	800bb64 <rcl_timer_get_time_until_next_call>
 8014c84:	4548      	cmp	r0, r9
 8014c86:	d1cd      	bne.n	8014c24 <rcl_wait+0x74>
 8014c88:	692b      	ldr	r3, [r5, #16]
 8014c8a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8014c8c:	2100      	movs	r1, #0
 8014c8e:	5199      	str	r1, [r3, r6]
 8014c90:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8014c92:	3401      	adds	r4, #1
 8014c94:	f14a 0a00 	adc.w	sl, sl, #0
 8014c98:	429c      	cmp	r4, r3
 8014c9a:	f17a 0100 	sbcs.w	r1, sl, #0
 8014c9e:	d3d6      	bcc.n	8014c4e <rcl_wait+0x9e>
 8014ca0:	4616      	mov	r6, r2
 8014ca2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014ca6:	4313      	orrs	r3, r2
 8014ca8:	46d9      	mov	r9, fp
 8014caa:	f040 80a9 	bne.w	8014e00 <rcl_wait+0x250>
 8014cae:	2300      	movs	r3, #0
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014cb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8014cba:	ab08      	add	r3, sp, #32
 8014cbc:	9302      	str	r3, [sp, #8]
 8014cbe:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8014cc0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8014cc4:	e9cd 3200 	strd	r3, r2, [sp]
 8014cc8:	f106 0110 	add.w	r1, r6, #16
 8014ccc:	f106 031c 	add.w	r3, r6, #28
 8014cd0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8014cd4:	1d30      	adds	r0, r6, #4
 8014cd6:	f001 fc13 	bl	8016500 <rmw_wait>
 8014cda:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014cdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014cde:	4680      	mov	r8, r0
 8014ce0:	b1ca      	cbz	r2, 8014d16 <rcl_wait+0x166>
 8014ce2:	2400      	movs	r4, #0
 8014ce4:	4627      	mov	r7, r4
 8014ce6:	692a      	ldr	r2, [r5, #16]
 8014ce8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8014cec:	f10d 011f 	add.w	r1, sp, #31
 8014cf0:	00a6      	lsls	r6, r4, #2
 8014cf2:	b160      	cbz	r0, 8014d0e <rcl_wait+0x15e>
 8014cf4:	f88d 701f 	strb.w	r7, [sp, #31]
 8014cf8:	f7f6 fefa 	bl	800baf0 <rcl_timer_is_ready>
 8014cfc:	2800      	cmp	r0, #0
 8014cfe:	f47f af74 	bne.w	8014bea <rcl_wait+0x3a>
 8014d02:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8014d06:	b90b      	cbnz	r3, 8014d0c <rcl_wait+0x15c>
 8014d08:	692a      	ldr	r2, [r5, #16]
 8014d0a:	5193      	str	r3, [r2, r6]
 8014d0c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014d10:	3401      	adds	r4, #1
 8014d12:	42a2      	cmp	r2, r4
 8014d14:	d8e7      	bhi.n	8014ce6 <rcl_wait+0x136>
 8014d16:	f038 0002 	bics.w	r0, r8, #2
 8014d1a:	f040 8090 	bne.w	8014e3e <rcl_wait+0x28e>
 8014d1e:	686e      	ldr	r6, [r5, #4]
 8014d20:	4602      	mov	r2, r0
 8014d22:	b91e      	cbnz	r6, 8014d2c <rcl_wait+0x17c>
 8014d24:	e00d      	b.n	8014d42 <rcl_wait+0x192>
 8014d26:	3201      	adds	r2, #1
 8014d28:	42b2      	cmp	r2, r6
 8014d2a:	d00a      	beq.n	8014d42 <rcl_wait+0x192>
 8014d2c:	6899      	ldr	r1, [r3, #8]
 8014d2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014d32:	2900      	cmp	r1, #0
 8014d34:	d1f7      	bne.n	8014d26 <rcl_wait+0x176>
 8014d36:	682c      	ldr	r4, [r5, #0]
 8014d38:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014d3c:	3201      	adds	r2, #1
 8014d3e:	42b2      	cmp	r2, r6
 8014d40:	d1f4      	bne.n	8014d2c <rcl_wait+0x17c>
 8014d42:	68ee      	ldr	r6, [r5, #12]
 8014d44:	2200      	movs	r2, #0
 8014d46:	b91e      	cbnz	r6, 8014d50 <rcl_wait+0x1a0>
 8014d48:	e00d      	b.n	8014d66 <rcl_wait+0x1b6>
 8014d4a:	3201      	adds	r2, #1
 8014d4c:	42b2      	cmp	r2, r6
 8014d4e:	d00a      	beq.n	8014d66 <rcl_wait+0x1b6>
 8014d50:	6959      	ldr	r1, [r3, #20]
 8014d52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014d56:	2900      	cmp	r1, #0
 8014d58:	d1f7      	bne.n	8014d4a <rcl_wait+0x19a>
 8014d5a:	68ac      	ldr	r4, [r5, #8]
 8014d5c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014d60:	3201      	adds	r2, #1
 8014d62:	42b2      	cmp	r2, r6
 8014d64:	d1f4      	bne.n	8014d50 <rcl_wait+0x1a0>
 8014d66:	69ee      	ldr	r6, [r5, #28]
 8014d68:	2200      	movs	r2, #0
 8014d6a:	b91e      	cbnz	r6, 8014d74 <rcl_wait+0x1c4>
 8014d6c:	e00d      	b.n	8014d8a <rcl_wait+0x1da>
 8014d6e:	3201      	adds	r2, #1
 8014d70:	42b2      	cmp	r2, r6
 8014d72:	d00a      	beq.n	8014d8a <rcl_wait+0x1da>
 8014d74:	6a19      	ldr	r1, [r3, #32]
 8014d76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014d7a:	2900      	cmp	r1, #0
 8014d7c:	d1f7      	bne.n	8014d6e <rcl_wait+0x1be>
 8014d7e:	69ac      	ldr	r4, [r5, #24]
 8014d80:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014d84:	3201      	adds	r2, #1
 8014d86:	42b2      	cmp	r2, r6
 8014d88:	d1f4      	bne.n	8014d74 <rcl_wait+0x1c4>
 8014d8a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	b91e      	cbnz	r6, 8014d98 <rcl_wait+0x1e8>
 8014d90:	e00d      	b.n	8014dae <rcl_wait+0x1fe>
 8014d92:	3201      	adds	r2, #1
 8014d94:	4296      	cmp	r6, r2
 8014d96:	d00a      	beq.n	8014dae <rcl_wait+0x1fe>
 8014d98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014d9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014d9e:	2900      	cmp	r1, #0
 8014da0:	d1f7      	bne.n	8014d92 <rcl_wait+0x1e2>
 8014da2:	6a2c      	ldr	r4, [r5, #32]
 8014da4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014da8:	3201      	adds	r2, #1
 8014daa:	4296      	cmp	r6, r2
 8014dac:	d1f4      	bne.n	8014d98 <rcl_wait+0x1e8>
 8014dae:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8014db0:	2200      	movs	r2, #0
 8014db2:	b91e      	cbnz	r6, 8014dbc <rcl_wait+0x20c>
 8014db4:	e00d      	b.n	8014dd2 <rcl_wait+0x222>
 8014db6:	3201      	adds	r2, #1
 8014db8:	42b2      	cmp	r2, r6
 8014dba:	d00a      	beq.n	8014dd2 <rcl_wait+0x222>
 8014dbc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8014dbe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014dc2:	2900      	cmp	r1, #0
 8014dc4:	d1f7      	bne.n	8014db6 <rcl_wait+0x206>
 8014dc6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8014dc8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014dcc:	3201      	adds	r2, #1
 8014dce:	42b2      	cmp	r2, r6
 8014dd0:	d1f4      	bne.n	8014dbc <rcl_wait+0x20c>
 8014dd2:	f1b8 0f02 	cmp.w	r8, #2
 8014dd6:	f47f af08 	bne.w	8014bea <rcl_wait+0x3a>
 8014dda:	464b      	mov	r3, r9
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	bf08      	it	eq
 8014de0:	2002      	moveq	r0, #2
 8014de2:	e702      	b.n	8014bea <rcl_wait+0x3a>
 8014de4:	2a00      	cmp	r2, #0
 8014de6:	d03a      	beq.n	8014e5e <rcl_wait+0x2ae>
 8014de8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014dec:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014df0:	e70e      	b.n	8014c10 <rcl_wait+0x60>
 8014df2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014df6:	b00d      	add	sp, #52	@ 0x34
 8014df8:	ecbd 8b02 	vpop	{d8}
 8014dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e00:	9b04      	ldr	r3, [sp, #16]
 8014e02:	2b01      	cmp	r3, #1
 8014e04:	9b05      	ldr	r3, [sp, #20]
 8014e06:	f173 0300 	sbcs.w	r3, r3, #0
 8014e0a:	db24      	blt.n	8014e56 <rcl_wait+0x2a6>
 8014e0c:	2f00      	cmp	r7, #0
 8014e0e:	bfbc      	itt	lt
 8014e10:	f04f 0800 	movlt.w	r8, #0
 8014e14:	4647      	movlt	r7, r8
 8014e16:	a31e      	add	r3, pc, #120	@ (adr r3, 8014e90 <rcl_wait+0x2e0>)
 8014e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e1c:	4640      	mov	r0, r8
 8014e1e:	4639      	mov	r1, r7
 8014e20:	f7eb fe7c 	bl	8000b1c <__aeabi_ldivmod>
 8014e24:	a31a      	add	r3, pc, #104	@ (adr r3, 8014e90 <rcl_wait+0x2e0>)
 8014e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014e2e:	4640      	mov	r0, r8
 8014e30:	4639      	mov	r1, r7
 8014e32:	f7eb fe73 	bl	8000b1c <__aeabi_ldivmod>
 8014e36:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8014e3a:	ab08      	add	r3, sp, #32
 8014e3c:	e73e      	b.n	8014cbc <rcl_wait+0x10c>
 8014e3e:	2001      	movs	r0, #1
 8014e40:	b00d      	add	sp, #52	@ 0x34
 8014e42:	ecbd 8b02 	vpop	{d8}
 8014e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e4a:	200b      	movs	r0, #11
 8014e4c:	b00d      	add	sp, #52	@ 0x34
 8014e4e:	ecbd 8b02 	vpop	{d8}
 8014e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e56:	465b      	mov	r3, fp
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d1d7      	bne.n	8014e0c <rcl_wait+0x25c>
 8014e5c:	e72e      	b.n	8014cbc <rcl_wait+0x10c>
 8014e5e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014e62:	430b      	orrs	r3, r1
 8014e64:	bf08      	it	eq
 8014e66:	4691      	moveq	r9, r2
 8014e68:	f43f af21 	beq.w	8014cae <rcl_wait+0xfe>
 8014e6c:	9b04      	ldr	r3, [sp, #16]
 8014e6e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014e72:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014e76:	2b01      	cmp	r3, #1
 8014e78:	9b05      	ldr	r3, [sp, #20]
 8014e7a:	f173 0300 	sbcs.w	r3, r3, #0
 8014e7e:	f04f 0300 	mov.w	r3, #0
 8014e82:	4699      	mov	r9, r3
 8014e84:	dac2      	bge.n	8014e0c <rcl_wait+0x25c>
 8014e86:	e719      	b.n	8014cbc <rcl_wait+0x10c>
 8014e88:	ffffffff 	.word	0xffffffff
 8014e8c:	7fffffff 	.word	0x7fffffff
 8014e90:	3b9aca00 	.word	0x3b9aca00
 8014e94:	00000000 	.word	0x00000000

08014e98 <rcl_action_take_goal_response>:
 8014e98:	2800      	cmp	r0, #0
 8014e9a:	d039      	beq.n	8014f10 <rcl_action_take_goal_response+0x78>
 8014e9c:	b570      	push	{r4, r5, r6, lr}
 8014e9e:	4604      	mov	r4, r0
 8014ea0:	6800      	ldr	r0, [r0, #0]
 8014ea2:	b380      	cbz	r0, 8014f06 <rcl_action_take_goal_response+0x6e>
 8014ea4:	460d      	mov	r5, r1
 8014ea6:	4616      	mov	r6, r2
 8014ea8:	f7fe fd2e 	bl	8013908 <rcl_client_is_valid>
 8014eac:	b330      	cbz	r0, 8014efc <rcl_action_take_goal_response+0x64>
 8014eae:	6820      	ldr	r0, [r4, #0]
 8014eb0:	3004      	adds	r0, #4
 8014eb2:	f7fe fd29 	bl	8013908 <rcl_client_is_valid>
 8014eb6:	b308      	cbz	r0, 8014efc <rcl_action_take_goal_response+0x64>
 8014eb8:	6820      	ldr	r0, [r4, #0]
 8014eba:	3008      	adds	r0, #8
 8014ebc:	f7fe fd24 	bl	8013908 <rcl_client_is_valid>
 8014ec0:	b1e0      	cbz	r0, 8014efc <rcl_action_take_goal_response+0x64>
 8014ec2:	6820      	ldr	r0, [r4, #0]
 8014ec4:	300c      	adds	r0, #12
 8014ec6:	f7f6 fc05 	bl	800b6d4 <rcl_subscription_is_valid>
 8014eca:	b1b8      	cbz	r0, 8014efc <rcl_action_take_goal_response+0x64>
 8014ecc:	6820      	ldr	r0, [r4, #0]
 8014ece:	3010      	adds	r0, #16
 8014ed0:	f7f6 fc00 	bl	800b6d4 <rcl_subscription_is_valid>
 8014ed4:	b190      	cbz	r0, 8014efc <rcl_action_take_goal_response+0x64>
 8014ed6:	b1cd      	cbz	r5, 8014f0c <rcl_action_take_goal_response+0x74>
 8014ed8:	b1c6      	cbz	r6, 8014f0c <rcl_action_take_goal_response+0x74>
 8014eda:	6820      	ldr	r0, [r4, #0]
 8014edc:	4632      	mov	r2, r6
 8014ede:	4629      	mov	r1, r5
 8014ee0:	f7fe fcca 	bl	8013878 <rcl_take_response>
 8014ee4:	b148      	cbz	r0, 8014efa <rcl_action_take_goal_response+0x62>
 8014ee6:	280a      	cmp	r0, #10
 8014ee8:	d007      	beq.n	8014efa <rcl_action_take_goal_response+0x62>
 8014eea:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014eee:	f640 0337 	movw	r3, #2103	@ 0x837
 8014ef2:	4290      	cmp	r0, r2
 8014ef4:	bf0c      	ite	eq
 8014ef6:	4618      	moveq	r0, r3
 8014ef8:	2001      	movne	r0, #1
 8014efa:	bd70      	pop	{r4, r5, r6, pc}
 8014efc:	f7f7 ff34 	bl	800cd68 <rcutils_reset_error>
 8014f00:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f04:	bd70      	pop	{r4, r5, r6, pc}
 8014f06:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f0a:	bd70      	pop	{r4, r5, r6, pc}
 8014f0c:	200b      	movs	r0, #11
 8014f0e:	bd70      	pop	{r4, r5, r6, pc}
 8014f10:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f14:	4770      	bx	lr
 8014f16:	bf00      	nop

08014f18 <rcl_action_send_result_request>:
 8014f18:	b390      	cbz	r0, 8014f80 <rcl_action_send_result_request+0x68>
 8014f1a:	b570      	push	{r4, r5, r6, lr}
 8014f1c:	4604      	mov	r4, r0
 8014f1e:	6800      	ldr	r0, [r0, #0]
 8014f20:	b348      	cbz	r0, 8014f76 <rcl_action_send_result_request+0x5e>
 8014f22:	460d      	mov	r5, r1
 8014f24:	4616      	mov	r6, r2
 8014f26:	f7fe fcef 	bl	8013908 <rcl_client_is_valid>
 8014f2a:	b1f8      	cbz	r0, 8014f6c <rcl_action_send_result_request+0x54>
 8014f2c:	6820      	ldr	r0, [r4, #0]
 8014f2e:	3004      	adds	r0, #4
 8014f30:	f7fe fcea 	bl	8013908 <rcl_client_is_valid>
 8014f34:	b1d0      	cbz	r0, 8014f6c <rcl_action_send_result_request+0x54>
 8014f36:	6820      	ldr	r0, [r4, #0]
 8014f38:	3008      	adds	r0, #8
 8014f3a:	f7fe fce5 	bl	8013908 <rcl_client_is_valid>
 8014f3e:	b1a8      	cbz	r0, 8014f6c <rcl_action_send_result_request+0x54>
 8014f40:	6820      	ldr	r0, [r4, #0]
 8014f42:	300c      	adds	r0, #12
 8014f44:	f7f6 fbc6 	bl	800b6d4 <rcl_subscription_is_valid>
 8014f48:	b180      	cbz	r0, 8014f6c <rcl_action_send_result_request+0x54>
 8014f4a:	6820      	ldr	r0, [r4, #0]
 8014f4c:	3010      	adds	r0, #16
 8014f4e:	f7f6 fbc1 	bl	800b6d4 <rcl_subscription_is_valid>
 8014f52:	b158      	cbz	r0, 8014f6c <rcl_action_send_result_request+0x54>
 8014f54:	b195      	cbz	r5, 8014f7c <rcl_action_send_result_request+0x64>
 8014f56:	b18e      	cbz	r6, 8014f7c <rcl_action_send_result_request+0x64>
 8014f58:	6820      	ldr	r0, [r4, #0]
 8014f5a:	4632      	mov	r2, r6
 8014f5c:	4629      	mov	r1, r5
 8014f5e:	3008      	adds	r0, #8
 8014f60:	f7fe fc54 	bl	801380c <rcl_send_request>
 8014f64:	3800      	subs	r0, #0
 8014f66:	bf18      	it	ne
 8014f68:	2001      	movne	r0, #1
 8014f6a:	bd70      	pop	{r4, r5, r6, pc}
 8014f6c:	f7f7 fefc 	bl	800cd68 <rcutils_reset_error>
 8014f70:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f74:	bd70      	pop	{r4, r5, r6, pc}
 8014f76:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f7a:	bd70      	pop	{r4, r5, r6, pc}
 8014f7c:	200b      	movs	r0, #11
 8014f7e:	bd70      	pop	{r4, r5, r6, pc}
 8014f80:	f640 0036 	movw	r0, #2102	@ 0x836
 8014f84:	4770      	bx	lr
 8014f86:	bf00      	nop

08014f88 <rcl_action_take_result_response>:
 8014f88:	2800      	cmp	r0, #0
 8014f8a:	d03a      	beq.n	8015002 <rcl_action_take_result_response+0x7a>
 8014f8c:	b570      	push	{r4, r5, r6, lr}
 8014f8e:	4604      	mov	r4, r0
 8014f90:	6800      	ldr	r0, [r0, #0]
 8014f92:	b388      	cbz	r0, 8014ff8 <rcl_action_take_result_response+0x70>
 8014f94:	460d      	mov	r5, r1
 8014f96:	4616      	mov	r6, r2
 8014f98:	f7fe fcb6 	bl	8013908 <rcl_client_is_valid>
 8014f9c:	b338      	cbz	r0, 8014fee <rcl_action_take_result_response+0x66>
 8014f9e:	6820      	ldr	r0, [r4, #0]
 8014fa0:	3004      	adds	r0, #4
 8014fa2:	f7fe fcb1 	bl	8013908 <rcl_client_is_valid>
 8014fa6:	b310      	cbz	r0, 8014fee <rcl_action_take_result_response+0x66>
 8014fa8:	6820      	ldr	r0, [r4, #0]
 8014faa:	3008      	adds	r0, #8
 8014fac:	f7fe fcac 	bl	8013908 <rcl_client_is_valid>
 8014fb0:	b1e8      	cbz	r0, 8014fee <rcl_action_take_result_response+0x66>
 8014fb2:	6820      	ldr	r0, [r4, #0]
 8014fb4:	300c      	adds	r0, #12
 8014fb6:	f7f6 fb8d 	bl	800b6d4 <rcl_subscription_is_valid>
 8014fba:	b1c0      	cbz	r0, 8014fee <rcl_action_take_result_response+0x66>
 8014fbc:	6820      	ldr	r0, [r4, #0]
 8014fbe:	3010      	adds	r0, #16
 8014fc0:	f7f6 fb88 	bl	800b6d4 <rcl_subscription_is_valid>
 8014fc4:	b198      	cbz	r0, 8014fee <rcl_action_take_result_response+0x66>
 8014fc6:	b1d5      	cbz	r5, 8014ffe <rcl_action_take_result_response+0x76>
 8014fc8:	b1ce      	cbz	r6, 8014ffe <rcl_action_take_result_response+0x76>
 8014fca:	6820      	ldr	r0, [r4, #0]
 8014fcc:	4632      	mov	r2, r6
 8014fce:	4629      	mov	r1, r5
 8014fd0:	3008      	adds	r0, #8
 8014fd2:	f7fe fc51 	bl	8013878 <rcl_take_response>
 8014fd6:	b148      	cbz	r0, 8014fec <rcl_action_take_result_response+0x64>
 8014fd8:	280a      	cmp	r0, #10
 8014fda:	d007      	beq.n	8014fec <rcl_action_take_result_response+0x64>
 8014fdc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014fe0:	f640 0337 	movw	r3, #2103	@ 0x837
 8014fe4:	4290      	cmp	r0, r2
 8014fe6:	bf0c      	ite	eq
 8014fe8:	4618      	moveq	r0, r3
 8014fea:	2001      	movne	r0, #1
 8014fec:	bd70      	pop	{r4, r5, r6, pc}
 8014fee:	f7f7 febb 	bl	800cd68 <rcutils_reset_error>
 8014ff2:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ff6:	bd70      	pop	{r4, r5, r6, pc}
 8014ff8:	f640 0036 	movw	r0, #2102	@ 0x836
 8014ffc:	bd70      	pop	{r4, r5, r6, pc}
 8014ffe:	200b      	movs	r0, #11
 8015000:	bd70      	pop	{r4, r5, r6, pc}
 8015002:	f640 0036 	movw	r0, #2102	@ 0x836
 8015006:	4770      	bx	lr

08015008 <rcl_action_take_cancel_response>:
 8015008:	2800      	cmp	r0, #0
 801500a:	d03a      	beq.n	8015082 <rcl_action_take_cancel_response+0x7a>
 801500c:	b570      	push	{r4, r5, r6, lr}
 801500e:	4604      	mov	r4, r0
 8015010:	6800      	ldr	r0, [r0, #0]
 8015012:	b388      	cbz	r0, 8015078 <rcl_action_take_cancel_response+0x70>
 8015014:	460d      	mov	r5, r1
 8015016:	4616      	mov	r6, r2
 8015018:	f7fe fc76 	bl	8013908 <rcl_client_is_valid>
 801501c:	b338      	cbz	r0, 801506e <rcl_action_take_cancel_response+0x66>
 801501e:	6820      	ldr	r0, [r4, #0]
 8015020:	3004      	adds	r0, #4
 8015022:	f7fe fc71 	bl	8013908 <rcl_client_is_valid>
 8015026:	b310      	cbz	r0, 801506e <rcl_action_take_cancel_response+0x66>
 8015028:	6820      	ldr	r0, [r4, #0]
 801502a:	3008      	adds	r0, #8
 801502c:	f7fe fc6c 	bl	8013908 <rcl_client_is_valid>
 8015030:	b1e8      	cbz	r0, 801506e <rcl_action_take_cancel_response+0x66>
 8015032:	6820      	ldr	r0, [r4, #0]
 8015034:	300c      	adds	r0, #12
 8015036:	f7f6 fb4d 	bl	800b6d4 <rcl_subscription_is_valid>
 801503a:	b1c0      	cbz	r0, 801506e <rcl_action_take_cancel_response+0x66>
 801503c:	6820      	ldr	r0, [r4, #0]
 801503e:	3010      	adds	r0, #16
 8015040:	f7f6 fb48 	bl	800b6d4 <rcl_subscription_is_valid>
 8015044:	b198      	cbz	r0, 801506e <rcl_action_take_cancel_response+0x66>
 8015046:	b1d5      	cbz	r5, 801507e <rcl_action_take_cancel_response+0x76>
 8015048:	b1ce      	cbz	r6, 801507e <rcl_action_take_cancel_response+0x76>
 801504a:	6820      	ldr	r0, [r4, #0]
 801504c:	4632      	mov	r2, r6
 801504e:	4629      	mov	r1, r5
 8015050:	3004      	adds	r0, #4
 8015052:	f7fe fc11 	bl	8013878 <rcl_take_response>
 8015056:	b148      	cbz	r0, 801506c <rcl_action_take_cancel_response+0x64>
 8015058:	280a      	cmp	r0, #10
 801505a:	d007      	beq.n	801506c <rcl_action_take_cancel_response+0x64>
 801505c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015060:	f640 0337 	movw	r3, #2103	@ 0x837
 8015064:	4290      	cmp	r0, r2
 8015066:	bf0c      	ite	eq
 8015068:	4618      	moveq	r0, r3
 801506a:	2001      	movne	r0, #1
 801506c:	bd70      	pop	{r4, r5, r6, pc}
 801506e:	f7f7 fe7b 	bl	800cd68 <rcutils_reset_error>
 8015072:	f640 0036 	movw	r0, #2102	@ 0x836
 8015076:	bd70      	pop	{r4, r5, r6, pc}
 8015078:	f640 0036 	movw	r0, #2102	@ 0x836
 801507c:	bd70      	pop	{r4, r5, r6, pc}
 801507e:	200b      	movs	r0, #11
 8015080:	bd70      	pop	{r4, r5, r6, pc}
 8015082:	f640 0036 	movw	r0, #2102	@ 0x836
 8015086:	4770      	bx	lr

08015088 <rcl_action_take_feedback>:
 8015088:	2800      	cmp	r0, #0
 801508a:	d038      	beq.n	80150fe <rcl_action_take_feedback+0x76>
 801508c:	b530      	push	{r4, r5, lr}
 801508e:	4604      	mov	r4, r0
 8015090:	6800      	ldr	r0, [r0, #0]
 8015092:	b091      	sub	sp, #68	@ 0x44
 8015094:	b378      	cbz	r0, 80150f6 <rcl_action_take_feedback+0x6e>
 8015096:	460d      	mov	r5, r1
 8015098:	f7fe fc36 	bl	8013908 <rcl_client_is_valid>
 801509c:	b328      	cbz	r0, 80150ea <rcl_action_take_feedback+0x62>
 801509e:	6820      	ldr	r0, [r4, #0]
 80150a0:	3004      	adds	r0, #4
 80150a2:	f7fe fc31 	bl	8013908 <rcl_client_is_valid>
 80150a6:	b300      	cbz	r0, 80150ea <rcl_action_take_feedback+0x62>
 80150a8:	6820      	ldr	r0, [r4, #0]
 80150aa:	3008      	adds	r0, #8
 80150ac:	f7fe fc2c 	bl	8013908 <rcl_client_is_valid>
 80150b0:	b1d8      	cbz	r0, 80150ea <rcl_action_take_feedback+0x62>
 80150b2:	6820      	ldr	r0, [r4, #0]
 80150b4:	300c      	adds	r0, #12
 80150b6:	f7f6 fb0d 	bl	800b6d4 <rcl_subscription_is_valid>
 80150ba:	b1b0      	cbz	r0, 80150ea <rcl_action_take_feedback+0x62>
 80150bc:	6820      	ldr	r0, [r4, #0]
 80150be:	3010      	adds	r0, #16
 80150c0:	f7f6 fb08 	bl	800b6d4 <rcl_subscription_is_valid>
 80150c4:	b188      	cbz	r0, 80150ea <rcl_action_take_feedback+0x62>
 80150c6:	b1ed      	cbz	r5, 8015104 <rcl_action_take_feedback+0x7c>
 80150c8:	6820      	ldr	r0, [r4, #0]
 80150ca:	2300      	movs	r3, #0
 80150cc:	466a      	mov	r2, sp
 80150ce:	4629      	mov	r1, r5
 80150d0:	300c      	adds	r0, #12
 80150d2:	f7f6 faa1 	bl	800b618 <rcl_take>
 80150d6:	b160      	cbz	r0, 80150f2 <rcl_action_take_feedback+0x6a>
 80150d8:	f240 1391 	movw	r3, #401	@ 0x191
 80150dc:	4298      	cmp	r0, r3
 80150de:	d014      	beq.n	801510a <rcl_action_take_feedback+0x82>
 80150e0:	280a      	cmp	r0, #10
 80150e2:	bf18      	it	ne
 80150e4:	2001      	movne	r0, #1
 80150e6:	b011      	add	sp, #68	@ 0x44
 80150e8:	bd30      	pop	{r4, r5, pc}
 80150ea:	f7f7 fe3d 	bl	800cd68 <rcutils_reset_error>
 80150ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80150f2:	b011      	add	sp, #68	@ 0x44
 80150f4:	bd30      	pop	{r4, r5, pc}
 80150f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80150fa:	b011      	add	sp, #68	@ 0x44
 80150fc:	bd30      	pop	{r4, r5, pc}
 80150fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8015102:	4770      	bx	lr
 8015104:	200b      	movs	r0, #11
 8015106:	b011      	add	sp, #68	@ 0x44
 8015108:	bd30      	pop	{r4, r5, pc}
 801510a:	f640 0037 	movw	r0, #2103	@ 0x837
 801510e:	e7f0      	b.n	80150f2 <rcl_action_take_feedback+0x6a>

08015110 <rcl_action_wait_set_add_action_client>:
 8015110:	2800      	cmp	r0, #0
 8015112:	d048      	beq.n	80151a6 <rcl_action_wait_set_add_action_client+0x96>
 8015114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015116:	460c      	mov	r4, r1
 8015118:	2900      	cmp	r1, #0
 801511a:	d03c      	beq.n	8015196 <rcl_action_wait_set_add_action_client+0x86>
 801511c:	4605      	mov	r5, r0
 801511e:	6808      	ldr	r0, [r1, #0]
 8015120:	2800      	cmp	r0, #0
 8015122:	d038      	beq.n	8015196 <rcl_action_wait_set_add_action_client+0x86>
 8015124:	4617      	mov	r7, r2
 8015126:	461e      	mov	r6, r3
 8015128:	f7fe fbee 	bl	8013908 <rcl_client_is_valid>
 801512c:	b3b0      	cbz	r0, 801519c <rcl_action_wait_set_add_action_client+0x8c>
 801512e:	6820      	ldr	r0, [r4, #0]
 8015130:	3004      	adds	r0, #4
 8015132:	f7fe fbe9 	bl	8013908 <rcl_client_is_valid>
 8015136:	b388      	cbz	r0, 801519c <rcl_action_wait_set_add_action_client+0x8c>
 8015138:	6820      	ldr	r0, [r4, #0]
 801513a:	3008      	adds	r0, #8
 801513c:	f7fe fbe4 	bl	8013908 <rcl_client_is_valid>
 8015140:	b360      	cbz	r0, 801519c <rcl_action_wait_set_add_action_client+0x8c>
 8015142:	6820      	ldr	r0, [r4, #0]
 8015144:	300c      	adds	r0, #12
 8015146:	f7f6 fac5 	bl	800b6d4 <rcl_subscription_is_valid>
 801514a:	b338      	cbz	r0, 801519c <rcl_action_wait_set_add_action_client+0x8c>
 801514c:	6820      	ldr	r0, [r4, #0]
 801514e:	3010      	adds	r0, #16
 8015150:	f7f6 fac0 	bl	800b6d4 <rcl_subscription_is_valid>
 8015154:	b310      	cbz	r0, 801519c <rcl_action_wait_set_add_action_client+0x8c>
 8015156:	6821      	ldr	r1, [r4, #0]
 8015158:	4628      	mov	r0, r5
 801515a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801515e:	f7ff fccd 	bl	8014afc <rcl_wait_set_add_client>
 8015162:	b9b8      	cbnz	r0, 8015194 <rcl_action_wait_set_add_action_client+0x84>
 8015164:	6821      	ldr	r1, [r4, #0]
 8015166:	4628      	mov	r0, r5
 8015168:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801516c:	3104      	adds	r1, #4
 801516e:	f7ff fcc5 	bl	8014afc <rcl_wait_set_add_client>
 8015172:	b978      	cbnz	r0, 8015194 <rcl_action_wait_set_add_action_client+0x84>
 8015174:	6821      	ldr	r1, [r4, #0]
 8015176:	4628      	mov	r0, r5
 8015178:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801517c:	3108      	adds	r1, #8
 801517e:	f7ff fcbd 	bl	8014afc <rcl_wait_set_add_client>
 8015182:	b938      	cbnz	r0, 8015194 <rcl_action_wait_set_add_action_client+0x84>
 8015184:	6821      	ldr	r1, [r4, #0]
 8015186:	4628      	mov	r0, r5
 8015188:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801518c:	310c      	adds	r1, #12
 801518e:	f7ff f96d 	bl	801446c <rcl_wait_set_add_subscription>
 8015192:	b158      	cbz	r0, 80151ac <rcl_action_wait_set_add_action_client+0x9c>
 8015194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015196:	f640 0036 	movw	r0, #2102	@ 0x836
 801519a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801519c:	f7f7 fde4 	bl	800cd68 <rcutils_reset_error>
 80151a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80151a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151a6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80151aa:	4770      	bx	lr
 80151ac:	6821      	ldr	r1, [r4, #0]
 80151ae:	4628      	mov	r0, r5
 80151b0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80151b4:	3110      	adds	r1, #16
 80151b6:	f7ff f959 	bl	801446c <rcl_wait_set_add_subscription>
 80151ba:	2800      	cmp	r0, #0
 80151bc:	d1ea      	bne.n	8015194 <rcl_action_wait_set_add_action_client+0x84>
 80151be:	b11f      	cbz	r7, 80151c8 <rcl_action_wait_set_add_action_client+0xb8>
 80151c0:	6823      	ldr	r3, [r4, #0]
 80151c2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80151c6:	603b      	str	r3, [r7, #0]
 80151c8:	2e00      	cmp	r6, #0
 80151ca:	d0e3      	beq.n	8015194 <rcl_action_wait_set_add_action_client+0x84>
 80151cc:	6823      	ldr	r3, [r4, #0]
 80151ce:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80151d2:	6033      	str	r3, [r6, #0]
 80151d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151d6:	bf00      	nop

080151d8 <rcl_action_client_wait_set_get_entities_ready>:
 80151d8:	2800      	cmp	r0, #0
 80151da:	f000 808d 	beq.w	80152f8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80151de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151e2:	460c      	mov	r4, r1
 80151e4:	2900      	cmp	r1, #0
 80151e6:	d077      	beq.n	80152d8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80151e8:	4605      	mov	r5, r0
 80151ea:	6808      	ldr	r0, [r1, #0]
 80151ec:	2800      	cmp	r0, #0
 80151ee:	d073      	beq.n	80152d8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80151f0:	4616      	mov	r6, r2
 80151f2:	461f      	mov	r7, r3
 80151f4:	f7fe fb88 	bl	8013908 <rcl_client_is_valid>
 80151f8:	2800      	cmp	r0, #0
 80151fa:	d071      	beq.n	80152e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80151fc:	6820      	ldr	r0, [r4, #0]
 80151fe:	3004      	adds	r0, #4
 8015200:	f7fe fb82 	bl	8013908 <rcl_client_is_valid>
 8015204:	2800      	cmp	r0, #0
 8015206:	d06b      	beq.n	80152e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015208:	6820      	ldr	r0, [r4, #0]
 801520a:	3008      	adds	r0, #8
 801520c:	f7fe fb7c 	bl	8013908 <rcl_client_is_valid>
 8015210:	2800      	cmp	r0, #0
 8015212:	d065      	beq.n	80152e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015214:	6820      	ldr	r0, [r4, #0]
 8015216:	300c      	adds	r0, #12
 8015218:	f7f6 fa5c 	bl	800b6d4 <rcl_subscription_is_valid>
 801521c:	2800      	cmp	r0, #0
 801521e:	d05f      	beq.n	80152e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015220:	6820      	ldr	r0, [r4, #0]
 8015222:	3010      	adds	r0, #16
 8015224:	f7f6 fa56 	bl	800b6d4 <rcl_subscription_is_valid>
 8015228:	2800      	cmp	r0, #0
 801522a:	d059      	beq.n	80152e0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801522c:	2e00      	cmp	r6, #0
 801522e:	d060      	beq.n	80152f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015230:	2f00      	cmp	r7, #0
 8015232:	d05e      	beq.n	80152f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015234:	9b06      	ldr	r3, [sp, #24]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d05b      	beq.n	80152f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801523a:	9b07      	ldr	r3, [sp, #28]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d058      	beq.n	80152f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015240:	9b08      	ldr	r3, [sp, #32]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d055      	beq.n	80152f2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015246:	6823      	ldr	r3, [r4, #0]
 8015248:	686a      	ldr	r2, [r5, #4]
 801524a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801524e:	428a      	cmp	r2, r1
 8015250:	d94c      	bls.n	80152ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015252:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8015256:	4282      	cmp	r2, r0
 8015258:	d948      	bls.n	80152ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 801525a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801525e:	69ea      	ldr	r2, [r5, #28]
 8015260:	42a2      	cmp	r2, r4
 8015262:	d943      	bls.n	80152ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015264:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015268:	4562      	cmp	r2, ip
 801526a:	d93f      	bls.n	80152ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 801526c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8015270:	4572      	cmp	r2, lr
 8015272:	d93b      	bls.n	80152ec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015274:	69aa      	ldr	r2, [r5, #24]
 8015276:	682d      	ldr	r5, [r5, #0]
 8015278:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801527c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8015280:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8015284:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8015288:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801528c:	f103 0c0c 	add.w	ip, r3, #12
 8015290:	eba5 050c 	sub.w	r5, r5, ip
 8015294:	fab5 f585 	clz	r5, r5
 8015298:	096d      	lsrs	r5, r5, #5
 801529a:	7035      	strb	r5, [r6, #0]
 801529c:	f103 0510 	add.w	r5, r3, #16
 80152a0:	1b64      	subs	r4, r4, r5
 80152a2:	fab4 f484 	clz	r4, r4
 80152a6:	0964      	lsrs	r4, r4, #5
 80152a8:	703c      	strb	r4, [r7, #0]
 80152aa:	eba3 0008 	sub.w	r0, r3, r8
 80152ae:	1d1c      	adds	r4, r3, #4
 80152b0:	3308      	adds	r3, #8
 80152b2:	1ad3      	subs	r3, r2, r3
 80152b4:	fab0 f080 	clz	r0, r0
 80152b8:	9a06      	ldr	r2, [sp, #24]
 80152ba:	0940      	lsrs	r0, r0, #5
 80152bc:	1b09      	subs	r1, r1, r4
 80152be:	7010      	strb	r0, [r2, #0]
 80152c0:	fab1 f181 	clz	r1, r1
 80152c4:	9a07      	ldr	r2, [sp, #28]
 80152c6:	0949      	lsrs	r1, r1, #5
 80152c8:	7011      	strb	r1, [r2, #0]
 80152ca:	fab3 f383 	clz	r3, r3
 80152ce:	9a08      	ldr	r2, [sp, #32]
 80152d0:	095b      	lsrs	r3, r3, #5
 80152d2:	2000      	movs	r0, #0
 80152d4:	7013      	strb	r3, [r2, #0]
 80152d6:	e001      	b.n	80152dc <rcl_action_client_wait_set_get_entities_ready+0x104>
 80152d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80152dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152e0:	f7f7 fd42 	bl	800cd68 <rcutils_reset_error>
 80152e4:	f640 0036 	movw	r0, #2102	@ 0x836
 80152e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152ec:	2001      	movs	r0, #1
 80152ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152f2:	200b      	movs	r0, #11
 80152f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152f8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80152fc:	4770      	bx	lr
 80152fe:	bf00      	nop

08015300 <rcl_action_take_goal_request>:
 8015300:	2800      	cmp	r0, #0
 8015302:	d039      	beq.n	8015378 <rcl_action_take_goal_request+0x78>
 8015304:	b570      	push	{r4, r5, r6, lr}
 8015306:	4604      	mov	r4, r0
 8015308:	6800      	ldr	r0, [r0, #0]
 801530a:	b380      	cbz	r0, 801536e <rcl_action_take_goal_request+0x6e>
 801530c:	460d      	mov	r5, r1
 801530e:	4616      	mov	r6, r2
 8015310:	f7fe fe5a 	bl	8013fc8 <rcl_service_is_valid>
 8015314:	b330      	cbz	r0, 8015364 <rcl_action_take_goal_request+0x64>
 8015316:	6820      	ldr	r0, [r4, #0]
 8015318:	3004      	adds	r0, #4
 801531a:	f7fe fe55 	bl	8013fc8 <rcl_service_is_valid>
 801531e:	b308      	cbz	r0, 8015364 <rcl_action_take_goal_request+0x64>
 8015320:	6820      	ldr	r0, [r4, #0]
 8015322:	3008      	adds	r0, #8
 8015324:	f7fe fe50 	bl	8013fc8 <rcl_service_is_valid>
 8015328:	b1e0      	cbz	r0, 8015364 <rcl_action_take_goal_request+0x64>
 801532a:	6820      	ldr	r0, [r4, #0]
 801532c:	300c      	adds	r0, #12
 801532e:	f7f6 f821 	bl	800b374 <rcl_publisher_is_valid>
 8015332:	b1b8      	cbz	r0, 8015364 <rcl_action_take_goal_request+0x64>
 8015334:	6820      	ldr	r0, [r4, #0]
 8015336:	3010      	adds	r0, #16
 8015338:	f7f6 f81c 	bl	800b374 <rcl_publisher_is_valid>
 801533c:	b190      	cbz	r0, 8015364 <rcl_action_take_goal_request+0x64>
 801533e:	b1cd      	cbz	r5, 8015374 <rcl_action_take_goal_request+0x74>
 8015340:	b1c6      	cbz	r6, 8015374 <rcl_action_take_goal_request+0x74>
 8015342:	6820      	ldr	r0, [r4, #0]
 8015344:	4632      	mov	r2, r6
 8015346:	4629      	mov	r1, r5
 8015348:	f7fe fde6 	bl	8013f18 <rcl_take_request>
 801534c:	b148      	cbz	r0, 8015362 <rcl_action_take_goal_request+0x62>
 801534e:	280a      	cmp	r0, #10
 8015350:	d007      	beq.n	8015362 <rcl_action_take_goal_request+0x62>
 8015352:	f240 2259 	movw	r2, #601	@ 0x259
 8015356:	f640 0399 	movw	r3, #2201	@ 0x899
 801535a:	4290      	cmp	r0, r2
 801535c:	bf0c      	ite	eq
 801535e:	4618      	moveq	r0, r3
 8015360:	2001      	movne	r0, #1
 8015362:	bd70      	pop	{r4, r5, r6, pc}
 8015364:	f7f7 fd00 	bl	800cd68 <rcutils_reset_error>
 8015368:	f640 0098 	movw	r0, #2200	@ 0x898
 801536c:	bd70      	pop	{r4, r5, r6, pc}
 801536e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015372:	bd70      	pop	{r4, r5, r6, pc}
 8015374:	200b      	movs	r0, #11
 8015376:	bd70      	pop	{r4, r5, r6, pc}
 8015378:	f640 0098 	movw	r0, #2200	@ 0x898
 801537c:	4770      	bx	lr
 801537e:	bf00      	nop

08015380 <rcl_action_send_goal_response>:
 8015380:	b390      	cbz	r0, 80153e8 <rcl_action_send_goal_response+0x68>
 8015382:	b570      	push	{r4, r5, r6, lr}
 8015384:	4604      	mov	r4, r0
 8015386:	6800      	ldr	r0, [r0, #0]
 8015388:	b348      	cbz	r0, 80153de <rcl_action_send_goal_response+0x5e>
 801538a:	460d      	mov	r5, r1
 801538c:	4616      	mov	r6, r2
 801538e:	f7fe fe1b 	bl	8013fc8 <rcl_service_is_valid>
 8015392:	b1f8      	cbz	r0, 80153d4 <rcl_action_send_goal_response+0x54>
 8015394:	6820      	ldr	r0, [r4, #0]
 8015396:	3004      	adds	r0, #4
 8015398:	f7fe fe16 	bl	8013fc8 <rcl_service_is_valid>
 801539c:	b1d0      	cbz	r0, 80153d4 <rcl_action_send_goal_response+0x54>
 801539e:	6820      	ldr	r0, [r4, #0]
 80153a0:	3008      	adds	r0, #8
 80153a2:	f7fe fe11 	bl	8013fc8 <rcl_service_is_valid>
 80153a6:	b1a8      	cbz	r0, 80153d4 <rcl_action_send_goal_response+0x54>
 80153a8:	6820      	ldr	r0, [r4, #0]
 80153aa:	300c      	adds	r0, #12
 80153ac:	f7f5 ffe2 	bl	800b374 <rcl_publisher_is_valid>
 80153b0:	b180      	cbz	r0, 80153d4 <rcl_action_send_goal_response+0x54>
 80153b2:	6820      	ldr	r0, [r4, #0]
 80153b4:	3010      	adds	r0, #16
 80153b6:	f7f5 ffdd 	bl	800b374 <rcl_publisher_is_valid>
 80153ba:	b158      	cbz	r0, 80153d4 <rcl_action_send_goal_response+0x54>
 80153bc:	b195      	cbz	r5, 80153e4 <rcl_action_send_goal_response+0x64>
 80153be:	b18e      	cbz	r6, 80153e4 <rcl_action_send_goal_response+0x64>
 80153c0:	6820      	ldr	r0, [r4, #0]
 80153c2:	4632      	mov	r2, r6
 80153c4:	4629      	mov	r1, r5
 80153c6:	f7fe fde7 	bl	8013f98 <rcl_send_response>
 80153ca:	b110      	cbz	r0, 80153d2 <rcl_action_send_goal_response+0x52>
 80153cc:	2802      	cmp	r0, #2
 80153ce:	bf18      	it	ne
 80153d0:	2001      	movne	r0, #1
 80153d2:	bd70      	pop	{r4, r5, r6, pc}
 80153d4:	f7f7 fcc8 	bl	800cd68 <rcutils_reset_error>
 80153d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80153dc:	bd70      	pop	{r4, r5, r6, pc}
 80153de:	f640 0098 	movw	r0, #2200	@ 0x898
 80153e2:	bd70      	pop	{r4, r5, r6, pc}
 80153e4:	200b      	movs	r0, #11
 80153e6:	bd70      	pop	{r4, r5, r6, pc}
 80153e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80153ec:	4770      	bx	lr
 80153ee:	bf00      	nop

080153f0 <rcl_action_take_result_request>:
 80153f0:	2800      	cmp	r0, #0
 80153f2:	d03a      	beq.n	801546a <rcl_action_take_result_request+0x7a>
 80153f4:	b570      	push	{r4, r5, r6, lr}
 80153f6:	4604      	mov	r4, r0
 80153f8:	6800      	ldr	r0, [r0, #0]
 80153fa:	b388      	cbz	r0, 8015460 <rcl_action_take_result_request+0x70>
 80153fc:	460d      	mov	r5, r1
 80153fe:	4616      	mov	r6, r2
 8015400:	f7fe fde2 	bl	8013fc8 <rcl_service_is_valid>
 8015404:	b338      	cbz	r0, 8015456 <rcl_action_take_result_request+0x66>
 8015406:	6820      	ldr	r0, [r4, #0]
 8015408:	3004      	adds	r0, #4
 801540a:	f7fe fddd 	bl	8013fc8 <rcl_service_is_valid>
 801540e:	b310      	cbz	r0, 8015456 <rcl_action_take_result_request+0x66>
 8015410:	6820      	ldr	r0, [r4, #0]
 8015412:	3008      	adds	r0, #8
 8015414:	f7fe fdd8 	bl	8013fc8 <rcl_service_is_valid>
 8015418:	b1e8      	cbz	r0, 8015456 <rcl_action_take_result_request+0x66>
 801541a:	6820      	ldr	r0, [r4, #0]
 801541c:	300c      	adds	r0, #12
 801541e:	f7f5 ffa9 	bl	800b374 <rcl_publisher_is_valid>
 8015422:	b1c0      	cbz	r0, 8015456 <rcl_action_take_result_request+0x66>
 8015424:	6820      	ldr	r0, [r4, #0]
 8015426:	3010      	adds	r0, #16
 8015428:	f7f5 ffa4 	bl	800b374 <rcl_publisher_is_valid>
 801542c:	b198      	cbz	r0, 8015456 <rcl_action_take_result_request+0x66>
 801542e:	b1d5      	cbz	r5, 8015466 <rcl_action_take_result_request+0x76>
 8015430:	b1ce      	cbz	r6, 8015466 <rcl_action_take_result_request+0x76>
 8015432:	6820      	ldr	r0, [r4, #0]
 8015434:	4632      	mov	r2, r6
 8015436:	4629      	mov	r1, r5
 8015438:	3008      	adds	r0, #8
 801543a:	f7fe fd6d 	bl	8013f18 <rcl_take_request>
 801543e:	b148      	cbz	r0, 8015454 <rcl_action_take_result_request+0x64>
 8015440:	280a      	cmp	r0, #10
 8015442:	d007      	beq.n	8015454 <rcl_action_take_result_request+0x64>
 8015444:	f240 2259 	movw	r2, #601	@ 0x259
 8015448:	f640 0399 	movw	r3, #2201	@ 0x899
 801544c:	4290      	cmp	r0, r2
 801544e:	bf0c      	ite	eq
 8015450:	4618      	moveq	r0, r3
 8015452:	2001      	movne	r0, #1
 8015454:	bd70      	pop	{r4, r5, r6, pc}
 8015456:	f7f7 fc87 	bl	800cd68 <rcutils_reset_error>
 801545a:	f640 0098 	movw	r0, #2200	@ 0x898
 801545e:	bd70      	pop	{r4, r5, r6, pc}
 8015460:	f640 0098 	movw	r0, #2200	@ 0x898
 8015464:	bd70      	pop	{r4, r5, r6, pc}
 8015466:	200b      	movs	r0, #11
 8015468:	bd70      	pop	{r4, r5, r6, pc}
 801546a:	f640 0098 	movw	r0, #2200	@ 0x898
 801546e:	4770      	bx	lr

08015470 <rcl_action_take_cancel_request>:
 8015470:	2800      	cmp	r0, #0
 8015472:	d03a      	beq.n	80154ea <rcl_action_take_cancel_request+0x7a>
 8015474:	b570      	push	{r4, r5, r6, lr}
 8015476:	4604      	mov	r4, r0
 8015478:	6800      	ldr	r0, [r0, #0]
 801547a:	b388      	cbz	r0, 80154e0 <rcl_action_take_cancel_request+0x70>
 801547c:	460d      	mov	r5, r1
 801547e:	4616      	mov	r6, r2
 8015480:	f7fe fda2 	bl	8013fc8 <rcl_service_is_valid>
 8015484:	b338      	cbz	r0, 80154d6 <rcl_action_take_cancel_request+0x66>
 8015486:	6820      	ldr	r0, [r4, #0]
 8015488:	3004      	adds	r0, #4
 801548a:	f7fe fd9d 	bl	8013fc8 <rcl_service_is_valid>
 801548e:	b310      	cbz	r0, 80154d6 <rcl_action_take_cancel_request+0x66>
 8015490:	6820      	ldr	r0, [r4, #0]
 8015492:	3008      	adds	r0, #8
 8015494:	f7fe fd98 	bl	8013fc8 <rcl_service_is_valid>
 8015498:	b1e8      	cbz	r0, 80154d6 <rcl_action_take_cancel_request+0x66>
 801549a:	6820      	ldr	r0, [r4, #0]
 801549c:	300c      	adds	r0, #12
 801549e:	f7f5 ff69 	bl	800b374 <rcl_publisher_is_valid>
 80154a2:	b1c0      	cbz	r0, 80154d6 <rcl_action_take_cancel_request+0x66>
 80154a4:	6820      	ldr	r0, [r4, #0]
 80154a6:	3010      	adds	r0, #16
 80154a8:	f7f5 ff64 	bl	800b374 <rcl_publisher_is_valid>
 80154ac:	b198      	cbz	r0, 80154d6 <rcl_action_take_cancel_request+0x66>
 80154ae:	b1d5      	cbz	r5, 80154e6 <rcl_action_take_cancel_request+0x76>
 80154b0:	b1ce      	cbz	r6, 80154e6 <rcl_action_take_cancel_request+0x76>
 80154b2:	6820      	ldr	r0, [r4, #0]
 80154b4:	4632      	mov	r2, r6
 80154b6:	4629      	mov	r1, r5
 80154b8:	3004      	adds	r0, #4
 80154ba:	f7fe fd2d 	bl	8013f18 <rcl_take_request>
 80154be:	b148      	cbz	r0, 80154d4 <rcl_action_take_cancel_request+0x64>
 80154c0:	280a      	cmp	r0, #10
 80154c2:	d007      	beq.n	80154d4 <rcl_action_take_cancel_request+0x64>
 80154c4:	f240 2259 	movw	r2, #601	@ 0x259
 80154c8:	f640 0399 	movw	r3, #2201	@ 0x899
 80154cc:	4290      	cmp	r0, r2
 80154ce:	bf0c      	ite	eq
 80154d0:	4618      	moveq	r0, r3
 80154d2:	2001      	movne	r0, #1
 80154d4:	bd70      	pop	{r4, r5, r6, pc}
 80154d6:	f7f7 fc47 	bl	800cd68 <rcutils_reset_error>
 80154da:	f640 0098 	movw	r0, #2200	@ 0x898
 80154de:	bd70      	pop	{r4, r5, r6, pc}
 80154e0:	f640 0098 	movw	r0, #2200	@ 0x898
 80154e4:	bd70      	pop	{r4, r5, r6, pc}
 80154e6:	200b      	movs	r0, #11
 80154e8:	bd70      	pop	{r4, r5, r6, pc}
 80154ea:	f640 0098 	movw	r0, #2200	@ 0x898
 80154ee:	4770      	bx	lr

080154f0 <rcl_action_send_cancel_response>:
 80154f0:	b398      	cbz	r0, 801555a <rcl_action_send_cancel_response+0x6a>
 80154f2:	b570      	push	{r4, r5, r6, lr}
 80154f4:	4604      	mov	r4, r0
 80154f6:	6800      	ldr	r0, [r0, #0]
 80154f8:	b350      	cbz	r0, 8015550 <rcl_action_send_cancel_response+0x60>
 80154fa:	460d      	mov	r5, r1
 80154fc:	4616      	mov	r6, r2
 80154fe:	f7fe fd63 	bl	8013fc8 <rcl_service_is_valid>
 8015502:	b300      	cbz	r0, 8015546 <rcl_action_send_cancel_response+0x56>
 8015504:	6820      	ldr	r0, [r4, #0]
 8015506:	3004      	adds	r0, #4
 8015508:	f7fe fd5e 	bl	8013fc8 <rcl_service_is_valid>
 801550c:	b1d8      	cbz	r0, 8015546 <rcl_action_send_cancel_response+0x56>
 801550e:	6820      	ldr	r0, [r4, #0]
 8015510:	3008      	adds	r0, #8
 8015512:	f7fe fd59 	bl	8013fc8 <rcl_service_is_valid>
 8015516:	b1b0      	cbz	r0, 8015546 <rcl_action_send_cancel_response+0x56>
 8015518:	6820      	ldr	r0, [r4, #0]
 801551a:	300c      	adds	r0, #12
 801551c:	f7f5 ff2a 	bl	800b374 <rcl_publisher_is_valid>
 8015520:	b188      	cbz	r0, 8015546 <rcl_action_send_cancel_response+0x56>
 8015522:	6820      	ldr	r0, [r4, #0]
 8015524:	3010      	adds	r0, #16
 8015526:	f7f5 ff25 	bl	800b374 <rcl_publisher_is_valid>
 801552a:	b160      	cbz	r0, 8015546 <rcl_action_send_cancel_response+0x56>
 801552c:	b19d      	cbz	r5, 8015556 <rcl_action_send_cancel_response+0x66>
 801552e:	b196      	cbz	r6, 8015556 <rcl_action_send_cancel_response+0x66>
 8015530:	6820      	ldr	r0, [r4, #0]
 8015532:	4632      	mov	r2, r6
 8015534:	4629      	mov	r1, r5
 8015536:	3004      	adds	r0, #4
 8015538:	f7fe fd2e 	bl	8013f98 <rcl_send_response>
 801553c:	b110      	cbz	r0, 8015544 <rcl_action_send_cancel_response+0x54>
 801553e:	2802      	cmp	r0, #2
 8015540:	bf18      	it	ne
 8015542:	2001      	movne	r0, #1
 8015544:	bd70      	pop	{r4, r5, r6, pc}
 8015546:	f7f7 fc0f 	bl	800cd68 <rcutils_reset_error>
 801554a:	f640 0098 	movw	r0, #2200	@ 0x898
 801554e:	bd70      	pop	{r4, r5, r6, pc}
 8015550:	f640 0098 	movw	r0, #2200	@ 0x898
 8015554:	bd70      	pop	{r4, r5, r6, pc}
 8015556:	200b      	movs	r0, #11
 8015558:	bd70      	pop	{r4, r5, r6, pc}
 801555a:	f640 0098 	movw	r0, #2200	@ 0x898
 801555e:	4770      	bx	lr

08015560 <rcl_action_wait_set_add_action_server>:
 8015560:	2800      	cmp	r0, #0
 8015562:	d04d      	beq.n	8015600 <rcl_action_wait_set_add_action_server+0xa0>
 8015564:	b570      	push	{r4, r5, r6, lr}
 8015566:	460c      	mov	r4, r1
 8015568:	b159      	cbz	r1, 8015582 <rcl_action_wait_set_add_action_server+0x22>
 801556a:	4605      	mov	r5, r0
 801556c:	6808      	ldr	r0, [r1, #0]
 801556e:	b140      	cbz	r0, 8015582 <rcl_action_wait_set_add_action_server+0x22>
 8015570:	4616      	mov	r6, r2
 8015572:	f7fe fd29 	bl	8013fc8 <rcl_service_is_valid>
 8015576:	b120      	cbz	r0, 8015582 <rcl_action_wait_set_add_action_server+0x22>
 8015578:	6820      	ldr	r0, [r4, #0]
 801557a:	3004      	adds	r0, #4
 801557c:	f7fe fd24 	bl	8013fc8 <rcl_service_is_valid>
 8015580:	b910      	cbnz	r0, 8015588 <rcl_action_wait_set_add_action_server+0x28>
 8015582:	f640 0098 	movw	r0, #2200	@ 0x898
 8015586:	bd70      	pop	{r4, r5, r6, pc}
 8015588:	6820      	ldr	r0, [r4, #0]
 801558a:	3008      	adds	r0, #8
 801558c:	f7fe fd1c 	bl	8013fc8 <rcl_service_is_valid>
 8015590:	2800      	cmp	r0, #0
 8015592:	d0f6      	beq.n	8015582 <rcl_action_wait_set_add_action_server+0x22>
 8015594:	6820      	ldr	r0, [r4, #0]
 8015596:	300c      	adds	r0, #12
 8015598:	f7f5 ff04 	bl	800b3a4 <rcl_publisher_is_valid_except_context>
 801559c:	2800      	cmp	r0, #0
 801559e:	d0f0      	beq.n	8015582 <rcl_action_wait_set_add_action_server+0x22>
 80155a0:	6820      	ldr	r0, [r4, #0]
 80155a2:	3010      	adds	r0, #16
 80155a4:	f7f5 fefe 	bl	800b3a4 <rcl_publisher_is_valid_except_context>
 80155a8:	2800      	cmp	r0, #0
 80155aa:	d0ea      	beq.n	8015582 <rcl_action_wait_set_add_action_server+0x22>
 80155ac:	6821      	ldr	r1, [r4, #0]
 80155ae:	4628      	mov	r0, r5
 80155b0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80155b4:	f7ff face 	bl	8014b54 <rcl_wait_set_add_service>
 80155b8:	2800      	cmp	r0, #0
 80155ba:	d1e4      	bne.n	8015586 <rcl_action_wait_set_add_action_server+0x26>
 80155bc:	6821      	ldr	r1, [r4, #0]
 80155be:	4628      	mov	r0, r5
 80155c0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80155c4:	3104      	adds	r1, #4
 80155c6:	f7ff fac5 	bl	8014b54 <rcl_wait_set_add_service>
 80155ca:	2800      	cmp	r0, #0
 80155cc:	d1db      	bne.n	8015586 <rcl_action_wait_set_add_action_server+0x26>
 80155ce:	6821      	ldr	r1, [r4, #0]
 80155d0:	4628      	mov	r0, r5
 80155d2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80155d6:	3108      	adds	r1, #8
 80155d8:	f7ff fabc 	bl	8014b54 <rcl_wait_set_add_service>
 80155dc:	2800      	cmp	r0, #0
 80155de:	d1d2      	bne.n	8015586 <rcl_action_wait_set_add_action_server+0x26>
 80155e0:	6821      	ldr	r1, [r4, #0]
 80155e2:	4628      	mov	r0, r5
 80155e4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80155e8:	3114      	adds	r1, #20
 80155ea:	f7ff fa57 	bl	8014a9c <rcl_wait_set_add_timer>
 80155ee:	2800      	cmp	r0, #0
 80155f0:	d1c9      	bne.n	8015586 <rcl_action_wait_set_add_action_server+0x26>
 80155f2:	2e00      	cmp	r6, #0
 80155f4:	d0c7      	beq.n	8015586 <rcl_action_wait_set_add_action_server+0x26>
 80155f6:	6823      	ldr	r3, [r4, #0]
 80155f8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80155fc:	6033      	str	r3, [r6, #0]
 80155fe:	bd70      	pop	{r4, r5, r6, pc}
 8015600:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015604:	4770      	bx	lr
 8015606:	bf00      	nop

08015608 <rcl_action_server_wait_set_get_entities_ready>:
 8015608:	2800      	cmp	r0, #0
 801560a:	d05a      	beq.n	80156c2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801560e:	460c      	mov	r4, r1
 8015610:	b161      	cbz	r1, 801562c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015612:	4605      	mov	r5, r0
 8015614:	6808      	ldr	r0, [r1, #0]
 8015616:	b148      	cbz	r0, 801562c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015618:	4616      	mov	r6, r2
 801561a:	461f      	mov	r7, r3
 801561c:	f7fe fcd4 	bl	8013fc8 <rcl_service_is_valid>
 8015620:	b120      	cbz	r0, 801562c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015622:	6820      	ldr	r0, [r4, #0]
 8015624:	3004      	adds	r0, #4
 8015626:	f7fe fccf 	bl	8013fc8 <rcl_service_is_valid>
 801562a:	b910      	cbnz	r0, 8015632 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801562c:	f640 0098 	movw	r0, #2200	@ 0x898
 8015630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015632:	6820      	ldr	r0, [r4, #0]
 8015634:	3008      	adds	r0, #8
 8015636:	f7fe fcc7 	bl	8013fc8 <rcl_service_is_valid>
 801563a:	2800      	cmp	r0, #0
 801563c:	d0f6      	beq.n	801562c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801563e:	6820      	ldr	r0, [r4, #0]
 8015640:	300c      	adds	r0, #12
 8015642:	f7f5 feaf 	bl	800b3a4 <rcl_publisher_is_valid_except_context>
 8015646:	2800      	cmp	r0, #0
 8015648:	d0f0      	beq.n	801562c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801564a:	6820      	ldr	r0, [r4, #0]
 801564c:	3010      	adds	r0, #16
 801564e:	f7f5 fea9 	bl	800b3a4 <rcl_publisher_is_valid_except_context>
 8015652:	2800      	cmp	r0, #0
 8015654:	d0ea      	beq.n	801562c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015656:	b3be      	cbz	r6, 80156c8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015658:	b3b7      	cbz	r7, 80156c8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801565a:	9b06      	ldr	r3, [sp, #24]
 801565c:	b3a3      	cbz	r3, 80156c8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801565e:	9b07      	ldr	r3, [sp, #28]
 8015660:	b393      	cbz	r3, 80156c8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015662:	6821      	ldr	r1, [r4, #0]
 8015664:	692a      	ldr	r2, [r5, #16]
 8015666:	6a2c      	ldr	r4, [r5, #32]
 8015668:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801566c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015670:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8015674:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8015678:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801567c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015680:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015684:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8015688:	1a64      	subs	r4, r4, r1
 801568a:	fab4 f484 	clz	r4, r4
 801568e:	0964      	lsrs	r4, r4, #5
 8015690:	7034      	strb	r4, [r6, #0]
 8015692:	1d0c      	adds	r4, r1, #4
 8015694:	1b1b      	subs	r3, r3, r4
 8015696:	fab3 f383 	clz	r3, r3
 801569a:	095b      	lsrs	r3, r3, #5
 801569c:	f101 0408 	add.w	r4, r1, #8
 80156a0:	703b      	strb	r3, [r7, #0]
 80156a2:	f101 0314 	add.w	r3, r1, #20
 80156a6:	1b01      	subs	r1, r0, r4
 80156a8:	1ad3      	subs	r3, r2, r3
 80156aa:	fab1 f181 	clz	r1, r1
 80156ae:	9a06      	ldr	r2, [sp, #24]
 80156b0:	0949      	lsrs	r1, r1, #5
 80156b2:	7011      	strb	r1, [r2, #0]
 80156b4:	fab3 f383 	clz	r3, r3
 80156b8:	9a07      	ldr	r2, [sp, #28]
 80156ba:	095b      	lsrs	r3, r3, #5
 80156bc:	2000      	movs	r0, #0
 80156be:	7013      	strb	r3, [r2, #0]
 80156c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80156c6:	4770      	bx	lr
 80156c8:	200b      	movs	r0, #11
 80156ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080156cc <_execute_event_handler>:
 80156cc:	2002      	movs	r0, #2
 80156ce:	4770      	bx	lr

080156d0 <_cancel_goal_event_handler>:
 80156d0:	2003      	movs	r0, #3
 80156d2:	4770      	bx	lr

080156d4 <_succeed_event_handler>:
 80156d4:	2004      	movs	r0, #4
 80156d6:	4770      	bx	lr

080156d8 <_abort_event_handler>:
 80156d8:	2006      	movs	r0, #6
 80156da:	4770      	bx	lr

080156dc <_canceled_event_handler>:
 80156dc:	2005      	movs	r0, #5
 80156de:	4770      	bx	lr

080156e0 <rcl_action_transition_goal_state>:
 80156e0:	b2c2      	uxtb	r2, r0
 80156e2:	2a06      	cmp	r2, #6
 80156e4:	d80c      	bhi.n	8015700 <rcl_action_transition_goal_state+0x20>
 80156e6:	2904      	cmp	r1, #4
 80156e8:	d80a      	bhi.n	8015700 <rcl_action_transition_goal_state+0x20>
 80156ea:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80156ee:	b410      	push	{r4}
 80156f0:	1853      	adds	r3, r2, r1
 80156f2:	4c06      	ldr	r4, [pc, #24]	@ (801570c <rcl_action_transition_goal_state+0x2c>)
 80156f4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80156f8:	b123      	cbz	r3, 8015704 <rcl_action_transition_goal_state+0x24>
 80156fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156fe:	4718      	bx	r3
 8015700:	2000      	movs	r0, #0
 8015702:	4770      	bx	lr
 8015704:	2000      	movs	r0, #0
 8015706:	f85d 4b04 	ldr.w	r4, [sp], #4
 801570a:	4770      	bx	lr
 801570c:	08019e68 	.word	0x08019e68

08015710 <rcl_action_get_zero_initialized_cancel_response>:
 8015710:	b510      	push	{r4, lr}
 8015712:	4c07      	ldr	r4, [pc, #28]	@ (8015730 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8015714:	4686      	mov	lr, r0
 8015716:	4684      	mov	ip, r0
 8015718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801571a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801571e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015720:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015724:	6823      	ldr	r3, [r4, #0]
 8015726:	f8cc 3000 	str.w	r3, [ip]
 801572a:	4670      	mov	r0, lr
 801572c:	bd10      	pop	{r4, pc}
 801572e:	bf00      	nop
 8015730:	08019ef4 	.word	0x08019ef4

08015734 <rclc_action_send_result_request>:
 8015734:	b1d0      	cbz	r0, 801576c <rclc_action_send_result_request+0x38>
 8015736:	b500      	push	{lr}
 8015738:	4684      	mov	ip, r0
 801573a:	b087      	sub	sp, #28
 801573c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8015740:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8015744:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015748:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801574c:	f10d 0e08 	add.w	lr, sp, #8
 8015750:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015754:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015758:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801575c:	a902      	add	r1, sp, #8
 801575e:	3010      	adds	r0, #16
 8015760:	f7ff fbda 	bl	8014f18 <rcl_action_send_result_request>
 8015764:	b920      	cbnz	r0, 8015770 <rclc_action_send_result_request+0x3c>
 8015766:	b007      	add	sp, #28
 8015768:	f85d fb04 	ldr.w	pc, [sp], #4
 801576c:	200b      	movs	r0, #11
 801576e:	4770      	bx	lr
 8015770:	9001      	str	r0, [sp, #4]
 8015772:	f7f7 faf9 	bl	800cd68 <rcutils_reset_error>
 8015776:	9801      	ldr	r0, [sp, #4]
 8015778:	b007      	add	sp, #28
 801577a:	f85d fb04 	ldr.w	pc, [sp], #4
 801577e:	bf00      	nop

08015780 <rclc_action_take_goal_handle>:
 8015780:	b160      	cbz	r0, 801579c <rclc_action_take_goal_handle+0x1c>
 8015782:	6883      	ldr	r3, [r0, #8]
 8015784:	b143      	cbz	r3, 8015798 <rclc_action_take_goal_handle+0x18>
 8015786:	6819      	ldr	r1, [r3, #0]
 8015788:	6081      	str	r1, [r0, #8]
 801578a:	2200      	movs	r2, #0
 801578c:	721a      	strb	r2, [r3, #8]
 801578e:	68c1      	ldr	r1, [r0, #12]
 8015790:	6019      	str	r1, [r3, #0]
 8015792:	621a      	str	r2, [r3, #32]
 8015794:	849a      	strh	r2, [r3, #36]	@ 0x24
 8015796:	60c3      	str	r3, [r0, #12]
 8015798:	4618      	mov	r0, r3
 801579a:	4770      	bx	lr
 801579c:	4603      	mov	r3, r0
 801579e:	e7fb      	b.n	8015798 <rclc_action_take_goal_handle+0x18>

080157a0 <rclc_action_remove_used_goal_handle>:
 80157a0:	b180      	cbz	r0, 80157c4 <rclc_action_remove_used_goal_handle+0x24>
 80157a2:	b179      	cbz	r1, 80157c4 <rclc_action_remove_used_goal_handle+0x24>
 80157a4:	68c3      	ldr	r3, [r0, #12]
 80157a6:	4299      	cmp	r1, r3
 80157a8:	d00d      	beq.n	80157c6 <rclc_action_remove_used_goal_handle+0x26>
 80157aa:	b12b      	cbz	r3, 80157b8 <rclc_action_remove_used_goal_handle+0x18>
 80157ac:	681a      	ldr	r2, [r3, #0]
 80157ae:	4291      	cmp	r1, r2
 80157b0:	d003      	beq.n	80157ba <rclc_action_remove_used_goal_handle+0x1a>
 80157b2:	4613      	mov	r3, r2
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d1f9      	bne.n	80157ac <rclc_action_remove_used_goal_handle+0xc>
 80157b8:	4770      	bx	lr
 80157ba:	680a      	ldr	r2, [r1, #0]
 80157bc:	601a      	str	r2, [r3, #0]
 80157be:	6883      	ldr	r3, [r0, #8]
 80157c0:	600b      	str	r3, [r1, #0]
 80157c2:	6081      	str	r1, [r0, #8]
 80157c4:	4770      	bx	lr
 80157c6:	680b      	ldr	r3, [r1, #0]
 80157c8:	60c3      	str	r3, [r0, #12]
 80157ca:	e7f8      	b.n	80157be <rclc_action_remove_used_goal_handle+0x1e>

080157cc <rclc_action_find_goal_handle_by_uuid>:
 80157cc:	b538      	push	{r3, r4, r5, lr}
 80157ce:	b180      	cbz	r0, 80157f2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80157d0:	460d      	mov	r5, r1
 80157d2:	b181      	cbz	r1, 80157f6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80157d4:	68c4      	ldr	r4, [r0, #12]
 80157d6:	b914      	cbnz	r4, 80157de <rclc_action_find_goal_handle_by_uuid+0x12>
 80157d8:	e009      	b.n	80157ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80157da:	6824      	ldr	r4, [r4, #0]
 80157dc:	b13c      	cbz	r4, 80157ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80157de:	f104 0009 	add.w	r0, r4, #9
 80157e2:	2210      	movs	r2, #16
 80157e4:	4629      	mov	r1, r5
 80157e6:	f002 fd97 	bl	8018318 <memcmp>
 80157ea:	2800      	cmp	r0, #0
 80157ec:	d1f5      	bne.n	80157da <rclc_action_find_goal_handle_by_uuid+0xe>
 80157ee:	4620      	mov	r0, r4
 80157f0:	bd38      	pop	{r3, r4, r5, pc}
 80157f2:	4604      	mov	r4, r0
 80157f4:	e7fb      	b.n	80157ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80157f6:	460c      	mov	r4, r1
 80157f8:	e7f9      	b.n	80157ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80157fa:	bf00      	nop

080157fc <rclc_action_find_first_handle_by_status>:
 80157fc:	b140      	cbz	r0, 8015810 <rclc_action_find_first_handle_by_status+0x14>
 80157fe:	68c0      	ldr	r0, [r0, #12]
 8015800:	b910      	cbnz	r0, 8015808 <rclc_action_find_first_handle_by_status+0xc>
 8015802:	e005      	b.n	8015810 <rclc_action_find_first_handle_by_status+0x14>
 8015804:	6800      	ldr	r0, [r0, #0]
 8015806:	b118      	cbz	r0, 8015810 <rclc_action_find_first_handle_by_status+0x14>
 8015808:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801580c:	428b      	cmp	r3, r1
 801580e:	d1f9      	bne.n	8015804 <rclc_action_find_first_handle_by_status+0x8>
 8015810:	4770      	bx	lr
 8015812:	bf00      	nop

08015814 <rclc_action_find_first_terminated_handle>:
 8015814:	b140      	cbz	r0, 8015828 <rclc_action_find_first_terminated_handle+0x14>
 8015816:	68c0      	ldr	r0, [r0, #12]
 8015818:	b910      	cbnz	r0, 8015820 <rclc_action_find_first_terminated_handle+0xc>
 801581a:	e005      	b.n	8015828 <rclc_action_find_first_terminated_handle+0x14>
 801581c:	6800      	ldr	r0, [r0, #0]
 801581e:	b118      	cbz	r0, 8015828 <rclc_action_find_first_terminated_handle+0x14>
 8015820:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015824:	2b03      	cmp	r3, #3
 8015826:	ddf9      	ble.n	801581c <rclc_action_find_first_terminated_handle+0x8>
 8015828:	4770      	bx	lr
 801582a:	bf00      	nop

0801582c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801582c:	b170      	cbz	r0, 801584c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801582e:	68c0      	ldr	r0, [r0, #12]
 8015830:	b160      	cbz	r0, 801584c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015832:	b410      	push	{r4}
 8015834:	e001      	b.n	801583a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015836:	6800      	ldr	r0, [r0, #0]
 8015838:	b128      	cbz	r0, 8015846 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801583a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801583e:	4299      	cmp	r1, r3
 8015840:	bf08      	it	eq
 8015842:	4294      	cmpeq	r4, r2
 8015844:	d1f7      	bne.n	8015836 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015846:	f85d 4b04 	ldr.w	r4, [sp], #4
 801584a:	4770      	bx	lr
 801584c:	4770      	bx	lr
 801584e:	bf00      	nop

08015850 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015850:	b170      	cbz	r0, 8015870 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015852:	68c0      	ldr	r0, [r0, #12]
 8015854:	b160      	cbz	r0, 8015870 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015856:	b410      	push	{r4}
 8015858:	e001      	b.n	801585e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801585a:	6800      	ldr	r0, [r0, #0]
 801585c:	b128      	cbz	r0, 801586a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801585e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015862:	4299      	cmp	r1, r3
 8015864:	bf08      	it	eq
 8015866:	4294      	cmpeq	r4, r2
 8015868:	d1f7      	bne.n	801585a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801586a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801586e:	4770      	bx	lr
 8015870:	4770      	bx	lr
 8015872:	bf00      	nop

08015874 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8015874:	b170      	cbz	r0, 8015894 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015876:	68c0      	ldr	r0, [r0, #12]
 8015878:	b160      	cbz	r0, 8015894 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801587a:	b410      	push	{r4}
 801587c:	e001      	b.n	8015882 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801587e:	6800      	ldr	r0, [r0, #0]
 8015880:	b128      	cbz	r0, 801588e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015882:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8015886:	4299      	cmp	r1, r3
 8015888:	bf08      	it	eq
 801588a:	4294      	cmpeq	r4, r2
 801588c:	d1f7      	bne.n	801587e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801588e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015892:	4770      	bx	lr
 8015894:	4770      	bx	lr
 8015896:	bf00      	nop

08015898 <rclc_action_find_first_handle_with_goal_response>:
 8015898:	b140      	cbz	r0, 80158ac <rclc_action_find_first_handle_with_goal_response+0x14>
 801589a:	68c0      	ldr	r0, [r0, #12]
 801589c:	b910      	cbnz	r0, 80158a4 <rclc_action_find_first_handle_with_goal_response+0xc>
 801589e:	e005      	b.n	80158ac <rclc_action_find_first_handle_with_goal_response+0x14>
 80158a0:	6800      	ldr	r0, [r0, #0]
 80158a2:	b118      	cbz	r0, 80158ac <rclc_action_find_first_handle_with_goal_response+0x14>
 80158a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d0f9      	beq.n	80158a0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80158ac:	4770      	bx	lr
 80158ae:	bf00      	nop

080158b0 <rclc_action_find_first_handle_with_result_response>:
 80158b0:	b140      	cbz	r0, 80158c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80158b2:	68c0      	ldr	r0, [r0, #12]
 80158b4:	b910      	cbnz	r0, 80158bc <rclc_action_find_first_handle_with_result_response+0xc>
 80158b6:	e005      	b.n	80158c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80158b8:	6800      	ldr	r0, [r0, #0]
 80158ba:	b118      	cbz	r0, 80158c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80158bc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d0f9      	beq.n	80158b8 <rclc_action_find_first_handle_with_result_response+0x8>
 80158c4:	4770      	bx	lr
 80158c6:	bf00      	nop

080158c8 <rclc_action_server_response_goal_request>:
 80158c8:	b198      	cbz	r0, 80158f2 <rclc_action_server_response_goal_request+0x2a>
 80158ca:	b510      	push	{r4, lr}
 80158cc:	6844      	ldr	r4, [r0, #4]
 80158ce:	b086      	sub	sp, #24
 80158d0:	2200      	movs	r2, #0
 80158d2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80158d6:	460b      	mov	r3, r1
 80158d8:	9205      	str	r2, [sp, #20]
 80158da:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80158de:	aa03      	add	r2, sp, #12
 80158e0:	f104 0010 	add.w	r0, r4, #16
 80158e4:	f88d 300c 	strb.w	r3, [sp, #12]
 80158e8:	f7ff fd4a 	bl	8015380 <rcl_action_send_goal_response>
 80158ec:	b918      	cbnz	r0, 80158f6 <rclc_action_server_response_goal_request+0x2e>
 80158ee:	b006      	add	sp, #24
 80158f0:	bd10      	pop	{r4, pc}
 80158f2:	200b      	movs	r0, #11
 80158f4:	4770      	bx	lr
 80158f6:	9001      	str	r0, [sp, #4]
 80158f8:	f7f7 fa36 	bl	800cd68 <rcutils_reset_error>
 80158fc:	9801      	ldr	r0, [sp, #4]
 80158fe:	b006      	add	sp, #24
 8015900:	bd10      	pop	{r4, pc}
 8015902:	bf00      	nop
 8015904:	0000      	movs	r0, r0
	...

08015908 <rclc_action_server_goal_cancel_accept>:
 8015908:	b310      	cbz	r0, 8015950 <rclc_action_server_goal_cancel_accept+0x48>
 801590a:	b510      	push	{r4, lr}
 801590c:	b090      	sub	sp, #64	@ 0x40
 801590e:	4604      	mov	r4, r0
 8015910:	a806      	add	r0, sp, #24
 8015912:	f7ff fefd 	bl	8015710 <rcl_action_get_zero_initialized_cancel_response>
 8015916:	2300      	movs	r3, #0
 8015918:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801591c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8015920:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8015924:	f88d 3018 	strb.w	r3, [sp, #24]
 8015928:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801592c:	f8cd d01c 	str.w	sp, [sp, #28]
 8015930:	46ec      	mov	ip, sp
 8015932:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015936:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015958 <rclc_action_server_goal_cancel_accept+0x50>
 801593a:	6860      	ldr	r0, [r4, #4]
 801593c:	aa06      	add	r2, sp, #24
 801593e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8015942:	3010      	adds	r0, #16
 8015944:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015948:	f7ff fdd2 	bl	80154f0 <rcl_action_send_cancel_response>
 801594c:	b010      	add	sp, #64	@ 0x40
 801594e:	bd10      	pop	{r4, pc}
 8015950:	200b      	movs	r0, #11
 8015952:	4770      	bx	lr
 8015954:	f3af 8000 	nop.w
 8015958:	00000001 	.word	0x00000001
 801595c:	00000001 	.word	0x00000001

08015960 <rclc_action_server_goal_cancel_reject>:
 8015960:	b082      	sub	sp, #8
 8015962:	b530      	push	{r4, r5, lr}
 8015964:	b08b      	sub	sp, #44	@ 0x2c
 8015966:	ac0e      	add	r4, sp, #56	@ 0x38
 8015968:	e884 000c 	stmia.w	r4, {r2, r3}
 801596c:	b188      	cbz	r0, 8015992 <rclc_action_server_goal_cancel_reject+0x32>
 801596e:	4604      	mov	r4, r0
 8015970:	a801      	add	r0, sp, #4
 8015972:	460d      	mov	r5, r1
 8015974:	f7ff fecc 	bl	8015710 <rcl_action_get_zero_initialized_cancel_response>
 8015978:	aa01      	add	r2, sp, #4
 801597a:	a90e      	add	r1, sp, #56	@ 0x38
 801597c:	f104 0010 	add.w	r0, r4, #16
 8015980:	f88d 5004 	strb.w	r5, [sp, #4]
 8015984:	f7ff fdb4 	bl	80154f0 <rcl_action_send_cancel_response>
 8015988:	b00b      	add	sp, #44	@ 0x2c
 801598a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801598e:	b002      	add	sp, #8
 8015990:	4770      	bx	lr
 8015992:	200b      	movs	r0, #11
 8015994:	b00b      	add	sp, #44	@ 0x2c
 8015996:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801599a:	b002      	add	sp, #8
 801599c:	4770      	bx	lr
 801599e:	bf00      	nop

080159a0 <rcutils_string_array_fini>:
 80159a0:	b320      	cbz	r0, 80159ec <rcutils_string_array_fini+0x4c>
 80159a2:	b570      	push	{r4, r5, r6, lr}
 80159a4:	4604      	mov	r4, r0
 80159a6:	6840      	ldr	r0, [r0, #4]
 80159a8:	b1d8      	cbz	r0, 80159e2 <rcutils_string_array_fini+0x42>
 80159aa:	f104 0008 	add.w	r0, r4, #8
 80159ae:	f7f7 f8fb 	bl	800cba8 <rcutils_allocator_is_valid>
 80159b2:	b1b8      	cbz	r0, 80159e4 <rcutils_string_array_fini+0x44>
 80159b4:	6823      	ldr	r3, [r4, #0]
 80159b6:	b1bb      	cbz	r3, 80159e8 <rcutils_string_array_fini+0x48>
 80159b8:	2500      	movs	r5, #0
 80159ba:	6860      	ldr	r0, [r4, #4]
 80159bc:	462e      	mov	r6, r5
 80159be:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80159c2:	68e3      	ldr	r3, [r4, #12]
 80159c4:	69a1      	ldr	r1, [r4, #24]
 80159c6:	4798      	blx	r3
 80159c8:	e9d4 3000 	ldrd	r3, r0, [r4]
 80159cc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80159d0:	3501      	adds	r5, #1
 80159d2:	429d      	cmp	r5, r3
 80159d4:	d3f3      	bcc.n	80159be <rcutils_string_array_fini+0x1e>
 80159d6:	68e3      	ldr	r3, [r4, #12]
 80159d8:	69a1      	ldr	r1, [r4, #24]
 80159da:	4798      	blx	r3
 80159dc:	2000      	movs	r0, #0
 80159de:	e9c4 0000 	strd	r0, r0, [r4]
 80159e2:	bd70      	pop	{r4, r5, r6, pc}
 80159e4:	200b      	movs	r0, #11
 80159e6:	bd70      	pop	{r4, r5, r6, pc}
 80159e8:	6860      	ldr	r0, [r4, #4]
 80159ea:	e7f4      	b.n	80159d6 <rcutils_string_array_fini+0x36>
 80159ec:	200b      	movs	r0, #11
 80159ee:	4770      	bx	lr

080159f0 <rcutils_get_zero_initialized_string_map>:
 80159f0:	4b01      	ldr	r3, [pc, #4]	@ (80159f8 <rcutils_get_zero_initialized_string_map+0x8>)
 80159f2:	2000      	movs	r0, #0
 80159f4:	6018      	str	r0, [r3, #0]
 80159f6:	4770      	bx	lr
 80159f8:	20010e98 	.word	0x20010e98

080159fc <rcutils_string_map_reserve>:
 80159fc:	2800      	cmp	r0, #0
 80159fe:	d05f      	beq.n	8015ac0 <rcutils_string_map_reserve+0xc4>
 8015a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a04:	460c      	mov	r4, r1
 8015a06:	6801      	ldr	r1, [r0, #0]
 8015a08:	b082      	sub	sp, #8
 8015a0a:	4605      	mov	r5, r0
 8015a0c:	b129      	cbz	r1, 8015a1a <rcutils_string_map_reserve+0x1e>
 8015a0e:	68cb      	ldr	r3, [r1, #12]
 8015a10:	42a3      	cmp	r3, r4
 8015a12:	d906      	bls.n	8015a22 <rcutils_string_map_reserve+0x26>
 8015a14:	461c      	mov	r4, r3
 8015a16:	2900      	cmp	r1, #0
 8015a18:	d1f9      	bne.n	8015a0e <rcutils_string_map_reserve+0x12>
 8015a1a:	201f      	movs	r0, #31
 8015a1c:	b002      	add	sp, #8
 8015a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a22:	688b      	ldr	r3, [r1, #8]
 8015a24:	42a3      	cmp	r3, r4
 8015a26:	d047      	beq.n	8015ab8 <rcutils_string_map_reserve+0xbc>
 8015a28:	6a0e      	ldr	r6, [r1, #32]
 8015a2a:	2c00      	cmp	r4, #0
 8015a2c:	d034      	beq.n	8015a98 <rcutils_string_map_reserve+0x9c>
 8015a2e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8015a32:	d243      	bcs.n	8015abc <rcutils_string_map_reserve+0xc0>
 8015a34:	00a7      	lsls	r7, r4, #2
 8015a36:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8015a3a:	6808      	ldr	r0, [r1, #0]
 8015a3c:	4632      	mov	r2, r6
 8015a3e:	4639      	mov	r1, r7
 8015a40:	47c0      	blx	r8
 8015a42:	2800      	cmp	r0, #0
 8015a44:	d03a      	beq.n	8015abc <rcutils_string_map_reserve+0xc0>
 8015a46:	682b      	ldr	r3, [r5, #0]
 8015a48:	4632      	mov	r2, r6
 8015a4a:	6018      	str	r0, [r3, #0]
 8015a4c:	4639      	mov	r1, r7
 8015a4e:	6858      	ldr	r0, [r3, #4]
 8015a50:	47c0      	blx	r8
 8015a52:	2800      	cmp	r0, #0
 8015a54:	d032      	beq.n	8015abc <rcutils_string_map_reserve+0xc0>
 8015a56:	682d      	ldr	r5, [r5, #0]
 8015a58:	68ab      	ldr	r3, [r5, #8]
 8015a5a:	6068      	str	r0, [r5, #4]
 8015a5c:	42a3      	cmp	r3, r4
 8015a5e:	d226      	bcs.n	8015aae <rcutils_string_map_reserve+0xb2>
 8015a60:	682a      	ldr	r2, [r5, #0]
 8015a62:	eb00 0c07 	add.w	ip, r0, r7
 8015a66:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8015a6a:	45e6      	cmp	lr, ip
 8015a6c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8015a70:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8015a74:	d203      	bcs.n	8015a7e <rcutils_string_map_reserve+0x82>
 8015a76:	eb02 0c07 	add.w	ip, r2, r7
 8015a7a:	4566      	cmp	r6, ip
 8015a7c:	d322      	bcc.n	8015ac4 <rcutils_string_map_reserve+0xc8>
 8015a7e:	1ae3      	subs	r3, r4, r3
 8015a80:	009a      	lsls	r2, r3, #2
 8015a82:	4670      	mov	r0, lr
 8015a84:	2100      	movs	r1, #0
 8015a86:	9201      	str	r2, [sp, #4]
 8015a88:	f002 fc70 	bl	801836c <memset>
 8015a8c:	9a01      	ldr	r2, [sp, #4]
 8015a8e:	2100      	movs	r1, #0
 8015a90:	4630      	mov	r0, r6
 8015a92:	f002 fc6b 	bl	801836c <memset>
 8015a96:	e00a      	b.n	8015aae <rcutils_string_map_reserve+0xb2>
 8015a98:	694f      	ldr	r7, [r1, #20]
 8015a9a:	6808      	ldr	r0, [r1, #0]
 8015a9c:	4631      	mov	r1, r6
 8015a9e:	47b8      	blx	r7
 8015aa0:	682b      	ldr	r3, [r5, #0]
 8015aa2:	4631      	mov	r1, r6
 8015aa4:	6858      	ldr	r0, [r3, #4]
 8015aa6:	601c      	str	r4, [r3, #0]
 8015aa8:	47b8      	blx	r7
 8015aaa:	682d      	ldr	r5, [r5, #0]
 8015aac:	606c      	str	r4, [r5, #4]
 8015aae:	2000      	movs	r0, #0
 8015ab0:	60ac      	str	r4, [r5, #8]
 8015ab2:	b002      	add	sp, #8
 8015ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ab8:	2000      	movs	r0, #0
 8015aba:	e7af      	b.n	8015a1c <rcutils_string_map_reserve+0x20>
 8015abc:	200a      	movs	r0, #10
 8015abe:	e7ad      	b.n	8015a1c <rcutils_string_map_reserve+0x20>
 8015ac0:	200b      	movs	r0, #11
 8015ac2:	4770      	bx	lr
 8015ac4:	1f0b      	subs	r3, r1, #4
 8015ac6:	4418      	add	r0, r3
 8015ac8:	4413      	add	r3, r2
 8015aca:	3a04      	subs	r2, #4
 8015acc:	4417      	add	r7, r2
 8015ace:	2200      	movs	r2, #0
 8015ad0:	f843 2f04 	str.w	r2, [r3, #4]!
 8015ad4:	42bb      	cmp	r3, r7
 8015ad6:	f840 2f04 	str.w	r2, [r0, #4]!
 8015ada:	d1f9      	bne.n	8015ad0 <rcutils_string_map_reserve+0xd4>
 8015adc:	e7e7      	b.n	8015aae <rcutils_string_map_reserve+0xb2>
 8015ade:	bf00      	nop

08015ae0 <rcutils_string_map_init>:
 8015ae0:	b082      	sub	sp, #8
 8015ae2:	b570      	push	{r4, r5, r6, lr}
 8015ae4:	ac04      	add	r4, sp, #16
 8015ae6:	e884 000c 	stmia.w	r4, {r2, r3}
 8015aea:	b380      	cbz	r0, 8015b4e <rcutils_string_map_init+0x6e>
 8015aec:	6806      	ldr	r6, [r0, #0]
 8015aee:	4604      	mov	r4, r0
 8015af0:	b12e      	cbz	r6, 8015afe <rcutils_string_map_init+0x1e>
 8015af2:	251e      	movs	r5, #30
 8015af4:	4628      	mov	r0, r5
 8015af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015afa:	b002      	add	sp, #8
 8015afc:	4770      	bx	lr
 8015afe:	a804      	add	r0, sp, #16
 8015b00:	460d      	mov	r5, r1
 8015b02:	f7f7 f851 	bl	800cba8 <rcutils_allocator_is_valid>
 8015b06:	b310      	cbz	r0, 8015b4e <rcutils_string_map_init+0x6e>
 8015b08:	9b04      	ldr	r3, [sp, #16]
 8015b0a:	9908      	ldr	r1, [sp, #32]
 8015b0c:	2024      	movs	r0, #36	@ 0x24
 8015b0e:	4798      	blx	r3
 8015b10:	6020      	str	r0, [r4, #0]
 8015b12:	b310      	cbz	r0, 8015b5a <rcutils_string_map_init+0x7a>
 8015b14:	f10d 0e10 	add.w	lr, sp, #16
 8015b18:	e9c0 6600 	strd	r6, r6, [r0]
 8015b1c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8015b20:	f100 0c10 	add.w	ip, r0, #16
 8015b24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b2c:	f8de 3000 	ldr.w	r3, [lr]
 8015b30:	f8cc 3000 	str.w	r3, [ip]
 8015b34:	4629      	mov	r1, r5
 8015b36:	4620      	mov	r0, r4
 8015b38:	f7ff ff60 	bl	80159fc <rcutils_string_map_reserve>
 8015b3c:	4605      	mov	r5, r0
 8015b3e:	2800      	cmp	r0, #0
 8015b40:	d0d8      	beq.n	8015af4 <rcutils_string_map_init+0x14>
 8015b42:	9b05      	ldr	r3, [sp, #20]
 8015b44:	9908      	ldr	r1, [sp, #32]
 8015b46:	6820      	ldr	r0, [r4, #0]
 8015b48:	4798      	blx	r3
 8015b4a:	6026      	str	r6, [r4, #0]
 8015b4c:	e7d2      	b.n	8015af4 <rcutils_string_map_init+0x14>
 8015b4e:	250b      	movs	r5, #11
 8015b50:	4628      	mov	r0, r5
 8015b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b56:	b002      	add	sp, #8
 8015b58:	4770      	bx	lr
 8015b5a:	250a      	movs	r5, #10
 8015b5c:	e7ca      	b.n	8015af4 <rcutils_string_map_init+0x14>
 8015b5e:	bf00      	nop

08015b60 <rcutils_string_map_fini>:
 8015b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b64:	b082      	sub	sp, #8
 8015b66:	2800      	cmp	r0, #0
 8015b68:	d03a      	beq.n	8015be0 <rcutils_string_map_fini+0x80>
 8015b6a:	6804      	ldr	r4, [r0, #0]
 8015b6c:	4606      	mov	r6, r0
 8015b6e:	2c00      	cmp	r4, #0
 8015b70:	d032      	beq.n	8015bd8 <rcutils_string_map_fini+0x78>
 8015b72:	68a3      	ldr	r3, [r4, #8]
 8015b74:	b32b      	cbz	r3, 8015bc2 <rcutils_string_map_fini+0x62>
 8015b76:	2500      	movs	r5, #0
 8015b78:	6822      	ldr	r2, [r4, #0]
 8015b7a:	462f      	mov	r7, r5
 8015b7c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015b80:	b1e0      	cbz	r0, 8015bbc <rcutils_string_map_fini+0x5c>
 8015b82:	6a21      	ldr	r1, [r4, #32]
 8015b84:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8015b88:	9101      	str	r1, [sp, #4]
 8015b8a:	47c0      	blx	r8
 8015b8c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015b90:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015b94:	9901      	ldr	r1, [sp, #4]
 8015b96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015b9a:	47c0      	blx	r8
 8015b9c:	68e3      	ldr	r3, [r4, #12]
 8015b9e:	6862      	ldr	r2, [r4, #4]
 8015ba0:	3b01      	subs	r3, #1
 8015ba2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8015ba6:	60e3      	str	r3, [r4, #12]
 8015ba8:	6834      	ldr	r4, [r6, #0]
 8015baa:	68a3      	ldr	r3, [r4, #8]
 8015bac:	3501      	adds	r5, #1
 8015bae:	429d      	cmp	r5, r3
 8015bb0:	d207      	bcs.n	8015bc2 <rcutils_string_map_fini+0x62>
 8015bb2:	6822      	ldr	r2, [r4, #0]
 8015bb4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015bb8:	2800      	cmp	r0, #0
 8015bba:	d1e2      	bne.n	8015b82 <rcutils_string_map_fini+0x22>
 8015bbc:	3501      	adds	r5, #1
 8015bbe:	429d      	cmp	r5, r3
 8015bc0:	d3dc      	bcc.n	8015b7c <rcutils_string_map_fini+0x1c>
 8015bc2:	2100      	movs	r1, #0
 8015bc4:	4630      	mov	r0, r6
 8015bc6:	f7ff ff19 	bl	80159fc <rcutils_string_map_reserve>
 8015bca:	4604      	mov	r4, r0
 8015bcc:	b920      	cbnz	r0, 8015bd8 <rcutils_string_map_fini+0x78>
 8015bce:	6830      	ldr	r0, [r6, #0]
 8015bd0:	6943      	ldr	r3, [r0, #20]
 8015bd2:	6a01      	ldr	r1, [r0, #32]
 8015bd4:	4798      	blx	r3
 8015bd6:	6034      	str	r4, [r6, #0]
 8015bd8:	4620      	mov	r0, r4
 8015bda:	b002      	add	sp, #8
 8015bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015be0:	240b      	movs	r4, #11
 8015be2:	4620      	mov	r0, r4
 8015be4:	b002      	add	sp, #8
 8015be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bea:	bf00      	nop

08015bec <rcutils_string_map_getn>:
 8015bec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bf0:	b300      	cbz	r0, 8015c34 <rcutils_string_map_getn+0x48>
 8015bf2:	6807      	ldr	r7, [r0, #0]
 8015bf4:	b1ff      	cbz	r7, 8015c36 <rcutils_string_map_getn+0x4a>
 8015bf6:	4688      	mov	r8, r1
 8015bf8:	b1e1      	cbz	r1, 8015c34 <rcutils_string_map_getn+0x48>
 8015bfa:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8015bfe:	683e      	ldr	r6, [r7, #0]
 8015c00:	f1ba 0f00 	cmp.w	sl, #0
 8015c04:	d016      	beq.n	8015c34 <rcutils_string_map_getn+0x48>
 8015c06:	4691      	mov	r9, r2
 8015c08:	3e04      	subs	r6, #4
 8015c0a:	2400      	movs	r4, #0
 8015c0c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8015c10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015c14:	4628      	mov	r0, r5
 8015c16:	3401      	adds	r4, #1
 8015c18:	b155      	cbz	r5, 8015c30 <rcutils_string_map_getn+0x44>
 8015c1a:	f7ea fb03 	bl	8000224 <strlen>
 8015c1e:	4548      	cmp	r0, r9
 8015c20:	4602      	mov	r2, r0
 8015c22:	4629      	mov	r1, r5
 8015c24:	bf38      	it	cc
 8015c26:	464a      	movcc	r2, r9
 8015c28:	4640      	mov	r0, r8
 8015c2a:	f002 fbb4 	bl	8018396 <strncmp>
 8015c2e:	b128      	cbz	r0, 8015c3c <rcutils_string_map_getn+0x50>
 8015c30:	45a2      	cmp	sl, r4
 8015c32:	d1eb      	bne.n	8015c0c <rcutils_string_map_getn+0x20>
 8015c34:	2700      	movs	r7, #0
 8015c36:	4638      	mov	r0, r7
 8015c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f853 700b 	ldr.w	r7, [r3, fp]
 8015c42:	4638      	mov	r0, r7
 8015c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c48 <rmw_get_zero_initialized_context>:
 8015c48:	b510      	push	{r4, lr}
 8015c4a:	4604      	mov	r4, r0
 8015c4c:	3010      	adds	r0, #16
 8015c4e:	f7f7 fa4f 	bl	800d0f0 <rmw_get_zero_initialized_init_options>
 8015c52:	2300      	movs	r3, #0
 8015c54:	2000      	movs	r0, #0
 8015c56:	2100      	movs	r1, #0
 8015c58:	e9c4 0100 	strd	r0, r1, [r4]
 8015c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8015c60:	60a3      	str	r3, [r4, #8]
 8015c62:	4620      	mov	r0, r4
 8015c64:	bd10      	pop	{r4, pc}
 8015c66:	bf00      	nop

08015c68 <rmw_time_equal>:
 8015c68:	b4f0      	push	{r4, r5, r6, r7}
 8015c6a:	b084      	sub	sp, #16
 8015c6c:	ac04      	add	r4, sp, #16
 8015c6e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015c72:	4603      	mov	r3, r0
 8015c74:	4924      	ldr	r1, [pc, #144]	@ (8015d08 <rmw_time_equal+0xa0>)
 8015c76:	9e03      	ldr	r6, [sp, #12]
 8015c78:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015c7c:	2202      	movs	r2, #2
 8015c7e:	4299      	cmp	r1, r3
 8015c80:	41aa      	sbcs	r2, r5
 8015c82:	d330      	bcc.n	8015ce6 <rmw_time_equal+0x7e>
 8015c84:	4c21      	ldr	r4, [pc, #132]	@ (8015d0c <rmw_time_equal+0xa4>)
 8015c86:	fba3 3204 	umull	r3, r2, r3, r4
 8015c8a:	fb04 2205 	mla	r2, r4, r5, r2
 8015c8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015c92:	43dd      	mvns	r5, r3
 8015c94:	1a8c      	subs	r4, r1, r2
 8015c96:	4285      	cmp	r5, r0
 8015c98:	41b4      	sbcs	r4, r6
 8015c9a:	d332      	bcc.n	8015d02 <rmw_time_equal+0x9a>
 8015c9c:	eb10 0c03 	adds.w	ip, r0, r3
 8015ca0:	eb42 0106 	adc.w	r1, r2, r6
 8015ca4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015ca8:	4817      	ldr	r0, [pc, #92]	@ (8015d08 <rmw_time_equal+0xa0>)
 8015caa:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015cac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8015cae:	2202      	movs	r2, #2
 8015cb0:	4298      	cmp	r0, r3
 8015cb2:	41b2      	sbcs	r2, r6
 8015cb4:	d31c      	bcc.n	8015cf0 <rmw_time_equal+0x88>
 8015cb6:	4c15      	ldr	r4, [pc, #84]	@ (8015d0c <rmw_time_equal+0xa4>)
 8015cb8:	fba3 3204 	umull	r3, r2, r3, r4
 8015cbc:	fb04 2206 	mla	r2, r4, r6, r2
 8015cc0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8015cc4:	43de      	mvns	r6, r3
 8015cc6:	1a84      	subs	r4, r0, r2
 8015cc8:	42ae      	cmp	r6, r5
 8015cca:	41bc      	sbcs	r4, r7
 8015ccc:	d315      	bcc.n	8015cfa <rmw_time_equal+0x92>
 8015cce:	195b      	adds	r3, r3, r5
 8015cd0:	eb42 0207 	adc.w	r2, r2, r7
 8015cd4:	428a      	cmp	r2, r1
 8015cd6:	bf08      	it	eq
 8015cd8:	4563      	cmpeq	r3, ip
 8015cda:	bf0c      	ite	eq
 8015cdc:	2001      	moveq	r0, #1
 8015cde:	2000      	movne	r0, #0
 8015ce0:	b004      	add	sp, #16
 8015ce2:	bcf0      	pop	{r4, r5, r6, r7}
 8015ce4:	4770      	bx	lr
 8015ce6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015cea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015cee:	e7d9      	b.n	8015ca4 <rmw_time_equal+0x3c>
 8015cf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015cf4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8015cf8:	e7ec      	b.n	8015cd4 <rmw_time_equal+0x6c>
 8015cfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015cfe:	4602      	mov	r2, r0
 8015d00:	e7e8      	b.n	8015cd4 <rmw_time_equal+0x6c>
 8015d02:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015d06:	e7cd      	b.n	8015ca4 <rmw_time_equal+0x3c>
 8015d08:	25c17d04 	.word	0x25c17d04
 8015d0c:	3b9aca00 	.word	0x3b9aca00

08015d10 <rmw_time_total_nsec>:
 8015d10:	b470      	push	{r4, r5, r6}
 8015d12:	b085      	sub	sp, #20
 8015d14:	ac04      	add	r4, sp, #16
 8015d16:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	4912      	ldr	r1, [pc, #72]	@ (8015d68 <rmw_time_total_nsec+0x58>)
 8015d1e:	9e03      	ldr	r6, [sp, #12]
 8015d20:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015d24:	2202      	movs	r2, #2
 8015d26:	4299      	cmp	r1, r3
 8015d28:	41aa      	sbcs	r2, r5
 8015d2a:	d311      	bcc.n	8015d50 <rmw_time_total_nsec+0x40>
 8015d2c:	4c0f      	ldr	r4, [pc, #60]	@ (8015d6c <rmw_time_total_nsec+0x5c>)
 8015d2e:	fba3 3204 	umull	r3, r2, r3, r4
 8015d32:	fb04 2205 	mla	r2, r4, r5, r2
 8015d36:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015d3a:	43dd      	mvns	r5, r3
 8015d3c:	1a8c      	subs	r4, r1, r2
 8015d3e:	4285      	cmp	r5, r0
 8015d40:	41b4      	sbcs	r4, r6
 8015d42:	d30c      	bcc.n	8015d5e <rmw_time_total_nsec+0x4e>
 8015d44:	1818      	adds	r0, r3, r0
 8015d46:	eb42 0106 	adc.w	r1, r2, r6
 8015d4a:	b005      	add	sp, #20
 8015d4c:	bc70      	pop	{r4, r5, r6}
 8015d4e:	4770      	bx	lr
 8015d50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015d58:	b005      	add	sp, #20
 8015d5a:	bc70      	pop	{r4, r5, r6}
 8015d5c:	4770      	bx	lr
 8015d5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d62:	b005      	add	sp, #20
 8015d64:	bc70      	pop	{r4, r5, r6}
 8015d66:	4770      	bx	lr
 8015d68:	25c17d04 	.word	0x25c17d04
 8015d6c:	3b9aca00 	.word	0x3b9aca00

08015d70 <rmw_validate_full_topic_name>:
 8015d70:	2800      	cmp	r0, #0
 8015d72:	d057      	beq.n	8015e24 <rmw_validate_full_topic_name+0xb4>
 8015d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d78:	460d      	mov	r5, r1
 8015d7a:	2900      	cmp	r1, #0
 8015d7c:	d054      	beq.n	8015e28 <rmw_validate_full_topic_name+0xb8>
 8015d7e:	4616      	mov	r6, r2
 8015d80:	4604      	mov	r4, r0
 8015d82:	f7ea fa4f 	bl	8000224 <strlen>
 8015d86:	b148      	cbz	r0, 8015d9c <rmw_validate_full_topic_name+0x2c>
 8015d88:	7823      	ldrb	r3, [r4, #0]
 8015d8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8015d8c:	d00d      	beq.n	8015daa <rmw_validate_full_topic_name+0x3a>
 8015d8e:	2302      	movs	r3, #2
 8015d90:	602b      	str	r3, [r5, #0]
 8015d92:	b13e      	cbz	r6, 8015da4 <rmw_validate_full_topic_name+0x34>
 8015d94:	2000      	movs	r0, #0
 8015d96:	6030      	str	r0, [r6, #0]
 8015d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	602b      	str	r3, [r5, #0]
 8015da0:	2e00      	cmp	r6, #0
 8015da2:	d1f7      	bne.n	8015d94 <rmw_validate_full_topic_name+0x24>
 8015da4:	2000      	movs	r0, #0
 8015da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015daa:	1e43      	subs	r3, r0, #1
 8015dac:	5ce2      	ldrb	r2, [r4, r3]
 8015dae:	2a2f      	cmp	r2, #47	@ 0x2f
 8015db0:	d03c      	beq.n	8015e2c <rmw_validate_full_topic_name+0xbc>
 8015db2:	1e63      	subs	r3, r4, #1
 8015db4:	eb03 0800 	add.w	r8, r3, r0
 8015db8:	f1c4 0e01 	rsb	lr, r4, #1
 8015dbc:	eb0e 0703 	add.w	r7, lr, r3
 8015dc0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015dc4:	f021 0220 	bic.w	r2, r1, #32
 8015dc8:	3a41      	subs	r2, #65	@ 0x41
 8015dca:	2a19      	cmp	r2, #25
 8015dcc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015dd0:	d90b      	bls.n	8015dea <rmw_validate_full_topic_name+0x7a>
 8015dd2:	295f      	cmp	r1, #95	@ 0x5f
 8015dd4:	d009      	beq.n	8015dea <rmw_validate_full_topic_name+0x7a>
 8015dd6:	f1bc 0f0a 	cmp.w	ip, #10
 8015dda:	d906      	bls.n	8015dea <rmw_validate_full_topic_name+0x7a>
 8015ddc:	2304      	movs	r3, #4
 8015dde:	602b      	str	r3, [r5, #0]
 8015de0:	2e00      	cmp	r6, #0
 8015de2:	d0df      	beq.n	8015da4 <rmw_validate_full_topic_name+0x34>
 8015de4:	6037      	str	r7, [r6, #0]
 8015de6:	2000      	movs	r0, #0
 8015de8:	e7d6      	b.n	8015d98 <rmw_validate_full_topic_name+0x28>
 8015dea:	4543      	cmp	r3, r8
 8015dec:	d1e6      	bne.n	8015dbc <rmw_validate_full_topic_name+0x4c>
 8015dee:	4f1a      	ldr	r7, [pc, #104]	@ (8015e58 <rmw_validate_full_topic_name+0xe8>)
 8015df0:	2301      	movs	r3, #1
 8015df2:	e004      	b.n	8015dfe <rmw_validate_full_topic_name+0x8e>
 8015df4:	4298      	cmp	r0, r3
 8015df6:	f104 0401 	add.w	r4, r4, #1
 8015dfa:	d91c      	bls.n	8015e36 <rmw_validate_full_topic_name+0xc6>
 8015dfc:	4613      	mov	r3, r2
 8015dfe:	4298      	cmp	r0, r3
 8015e00:	f103 0201 	add.w	r2, r3, #1
 8015e04:	d0f6      	beq.n	8015df4 <rmw_validate_full_topic_name+0x84>
 8015e06:	7821      	ldrb	r1, [r4, #0]
 8015e08:	292f      	cmp	r1, #47	@ 0x2f
 8015e0a:	d1f3      	bne.n	8015df4 <rmw_validate_full_topic_name+0x84>
 8015e0c:	7861      	ldrb	r1, [r4, #1]
 8015e0e:	292f      	cmp	r1, #47	@ 0x2f
 8015e10:	d01c      	beq.n	8015e4c <rmw_validate_full_topic_name+0xdc>
 8015e12:	5dc9      	ldrb	r1, [r1, r7]
 8015e14:	0749      	lsls	r1, r1, #29
 8015e16:	d5ed      	bpl.n	8015df4 <rmw_validate_full_topic_name+0x84>
 8015e18:	2206      	movs	r2, #6
 8015e1a:	602a      	str	r2, [r5, #0]
 8015e1c:	2e00      	cmp	r6, #0
 8015e1e:	d0c1      	beq.n	8015da4 <rmw_validate_full_topic_name+0x34>
 8015e20:	6033      	str	r3, [r6, #0]
 8015e22:	e7bf      	b.n	8015da4 <rmw_validate_full_topic_name+0x34>
 8015e24:	200b      	movs	r0, #11
 8015e26:	4770      	bx	lr
 8015e28:	200b      	movs	r0, #11
 8015e2a:	e7b5      	b.n	8015d98 <rmw_validate_full_topic_name+0x28>
 8015e2c:	2203      	movs	r2, #3
 8015e2e:	602a      	str	r2, [r5, #0]
 8015e30:	2e00      	cmp	r6, #0
 8015e32:	d1f5      	bne.n	8015e20 <rmw_validate_full_topic_name+0xb0>
 8015e34:	e7b6      	b.n	8015da4 <rmw_validate_full_topic_name+0x34>
 8015e36:	28f7      	cmp	r0, #247	@ 0xf7
 8015e38:	d802      	bhi.n	8015e40 <rmw_validate_full_topic_name+0xd0>
 8015e3a:	2000      	movs	r0, #0
 8015e3c:	6028      	str	r0, [r5, #0]
 8015e3e:	e7ab      	b.n	8015d98 <rmw_validate_full_topic_name+0x28>
 8015e40:	2307      	movs	r3, #7
 8015e42:	602b      	str	r3, [r5, #0]
 8015e44:	2e00      	cmp	r6, #0
 8015e46:	d0ad      	beq.n	8015da4 <rmw_validate_full_topic_name+0x34>
 8015e48:	23f6      	movs	r3, #246	@ 0xf6
 8015e4a:	e7e9      	b.n	8015e20 <rmw_validate_full_topic_name+0xb0>
 8015e4c:	2205      	movs	r2, #5
 8015e4e:	602a      	str	r2, [r5, #0]
 8015e50:	2e00      	cmp	r6, #0
 8015e52:	d1e5      	bne.n	8015e20 <rmw_validate_full_topic_name+0xb0>
 8015e54:	e7a6      	b.n	8015da4 <rmw_validate_full_topic_name+0x34>
 8015e56:	bf00      	nop
 8015e58:	08019ffb 	.word	0x08019ffb

08015e5c <on_status>:
 8015e5c:	b082      	sub	sp, #8
 8015e5e:	b002      	add	sp, #8
 8015e60:	4770      	bx	lr
 8015e62:	bf00      	nop

08015e64 <on_topic>:
 8015e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e68:	4a22      	ldr	r2, [pc, #136]	@ (8015ef4 <on_topic+0x90>)
 8015e6a:	b094      	sub	sp, #80	@ 0x50
 8015e6c:	6812      	ldr	r2, [r2, #0]
 8015e6e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8015e70:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015e74:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8015e78:	b3c2      	cbz	r2, 8015eec <on_topic+0x88>
 8015e7a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015e7e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015e82:	e001      	b.n	8015e88 <on_topic+0x24>
 8015e84:	6852      	ldr	r2, [r2, #4]
 8015e86:	b38a      	cbz	r2, 8015eec <on_topic+0x88>
 8015e88:	6894      	ldr	r4, [r2, #8]
 8015e8a:	8aa3      	ldrh	r3, [r4, #20]
 8015e8c:	428b      	cmp	r3, r1
 8015e8e:	d1f9      	bne.n	8015e84 <on_topic+0x20>
 8015e90:	7da3      	ldrb	r3, [r4, #22]
 8015e92:	4283      	cmp	r3, r0
 8015e94:	d1f6      	bne.n	8015e84 <on_topic+0x20>
 8015e96:	2248      	movs	r2, #72	@ 0x48
 8015e98:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015e9c:	4668      	mov	r0, sp
 8015e9e:	f002 fb8c 	bl	80185ba <memcpy>
 8015ea2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015ea6:	cb0c      	ldmia	r3, {r2, r3}
 8015ea8:	4620      	mov	r0, r4
 8015eaa:	f7f8 fc2d 	bl	800e708 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015eae:	4607      	mov	r7, r0
 8015eb0:	b1e0      	cbz	r0, 8015eec <on_topic+0x88>
 8015eb2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015eb6:	4632      	mov	r2, r6
 8015eb8:	4628      	mov	r0, r5
 8015eba:	f108 0110 	add.w	r1, r8, #16
 8015ebe:	f000 fdbf 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 8015ec2:	b930      	cbnz	r0, 8015ed2 <on_topic+0x6e>
 8015ec4:	480c      	ldr	r0, [pc, #48]	@ (8015ef8 <on_topic+0x94>)
 8015ec6:	4639      	mov	r1, r7
 8015ec8:	b014      	add	sp, #80	@ 0x50
 8015eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ece:	f000 b8bd 	b.w	801604c <put_memory>
 8015ed2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015ed6:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8015eda:	f000 fca7 	bl	801682c <rmw_uros_epoch_nanos>
 8015ede:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015ee2:	2305      	movs	r3, #5
 8015ee4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015ee8:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015eec:	b014      	add	sp, #80	@ 0x50
 8015eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ef2:	bf00      	nop
 8015ef4:	20010e4c 	.word	0x20010e4c
 8015ef8:	20010e3c 	.word	0x20010e3c

08015efc <on_request>:
 8015efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f00:	4823      	ldr	r0, [pc, #140]	@ (8015f90 <on_request+0x94>)
 8015f02:	b094      	sub	sp, #80	@ 0x50
 8015f04:	6800      	ldr	r0, [r0, #0]
 8015f06:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015f08:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015f0c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015f0e:	2800      	cmp	r0, #0
 8015f10:	d03b      	beq.n	8015f8a <on_request+0x8e>
 8015f12:	461d      	mov	r5, r3
 8015f14:	e001      	b.n	8015f1a <on_request+0x1e>
 8015f16:	6840      	ldr	r0, [r0, #4]
 8015f18:	b3b8      	cbz	r0, 8015f8a <on_request+0x8e>
 8015f1a:	6884      	ldr	r4, [r0, #8]
 8015f1c:	8b21      	ldrh	r1, [r4, #24]
 8015f1e:	4291      	cmp	r1, r2
 8015f20:	d1f9      	bne.n	8015f16 <on_request+0x1a>
 8015f22:	2248      	movs	r2, #72	@ 0x48
 8015f24:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015f28:	4668      	mov	r0, sp
 8015f2a:	f002 fb46 	bl	80185ba <memcpy>
 8015f2e:	f104 0320 	add.w	r3, r4, #32
 8015f32:	cb0c      	ldmia	r3, {r2, r3}
 8015f34:	4620      	mov	r0, r4
 8015f36:	f7f8 fbe7 	bl	800e708 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015f3a:	4680      	mov	r8, r0
 8015f3c:	b328      	cbz	r0, 8015f8a <on_request+0x8e>
 8015f3e:	4638      	mov	r0, r7
 8015f40:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015f44:	4632      	mov	r2, r6
 8015f46:	f107 0110 	add.w	r1, r7, #16
 8015f4a:	f000 fd79 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 8015f4e:	b930      	cbnz	r0, 8015f5e <on_request+0x62>
 8015f50:	4810      	ldr	r0, [pc, #64]	@ (8015f94 <on_request+0x98>)
 8015f52:	4641      	mov	r1, r8
 8015f54:	b014      	add	sp, #80	@ 0x50
 8015f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f5a:	f000 b877 	b.w	801604c <put_memory>
 8015f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015f60:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015f64:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015f68:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015f6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015f74:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015f78:	f000 fc58 	bl	801682c <rmw_uros_epoch_nanos>
 8015f7c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015f80:	2303      	movs	r3, #3
 8015f82:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015f86:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015f8a:	b014      	add	sp, #80	@ 0x50
 8015f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f90:	20010e1c 	.word	0x20010e1c
 8015f94:	20010e3c 	.word	0x20010e3c

08015f98 <on_reply>:
 8015f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f9c:	4821      	ldr	r0, [pc, #132]	@ (8016024 <on_reply+0x8c>)
 8015f9e:	b094      	sub	sp, #80	@ 0x50
 8015fa0:	6800      	ldr	r0, [r0, #0]
 8015fa2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015fa4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015fa8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015faa:	b3b8      	cbz	r0, 801601c <on_reply+0x84>
 8015fac:	461d      	mov	r5, r3
 8015fae:	e001      	b.n	8015fb4 <on_reply+0x1c>
 8015fb0:	6840      	ldr	r0, [r0, #4]
 8015fb2:	b398      	cbz	r0, 801601c <on_reply+0x84>
 8015fb4:	6884      	ldr	r4, [r0, #8]
 8015fb6:	8b21      	ldrh	r1, [r4, #24]
 8015fb8:	4291      	cmp	r1, r2
 8015fba:	d1f9      	bne.n	8015fb0 <on_reply+0x18>
 8015fbc:	2248      	movs	r2, #72	@ 0x48
 8015fbe:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015fc2:	4668      	mov	r0, sp
 8015fc4:	f002 faf9 	bl	80185ba <memcpy>
 8015fc8:	f104 0320 	add.w	r3, r4, #32
 8015fcc:	cb0c      	ldmia	r3, {r2, r3}
 8015fce:	4620      	mov	r0, r4
 8015fd0:	f7f8 fb9a 	bl	800e708 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015fd4:	4680      	mov	r8, r0
 8015fd6:	b308      	cbz	r0, 801601c <on_reply+0x84>
 8015fd8:	4638      	mov	r0, r7
 8015fda:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015fde:	4632      	mov	r2, r6
 8015fe0:	f107 0110 	add.w	r1, r7, #16
 8015fe4:	f000 fd2c 	bl	8016a40 <ucdr_deserialize_array_uint8_t>
 8015fe8:	b930      	cbnz	r0, 8015ff8 <on_reply+0x60>
 8015fea:	480f      	ldr	r0, [pc, #60]	@ (8016028 <on_reply+0x90>)
 8015fec:	4641      	mov	r1, r8
 8015fee:	b014      	add	sp, #80	@ 0x50
 8015ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ff4:	f000 b82a 	b.w	801604c <put_memory>
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8015ffe:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016002:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016006:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801600a:	f000 fc0f 	bl	801682c <rmw_uros_epoch_nanos>
 801600e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016012:	2304      	movs	r3, #4
 8016014:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016018:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801601c:	b014      	add	sp, #80	@ 0x50
 801601e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016022:	bf00      	nop
 8016024:	2000c52c 	.word	0x2000c52c
 8016028:	20010e3c 	.word	0x20010e3c

0801602c <get_memory>:
 801602c:	4603      	mov	r3, r0
 801602e:	6840      	ldr	r0, [r0, #4]
 8016030:	b158      	cbz	r0, 801604a <get_memory+0x1e>
 8016032:	6842      	ldr	r2, [r0, #4]
 8016034:	605a      	str	r2, [r3, #4]
 8016036:	b10a      	cbz	r2, 801603c <get_memory+0x10>
 8016038:	2100      	movs	r1, #0
 801603a:	6011      	str	r1, [r2, #0]
 801603c:	681a      	ldr	r2, [r3, #0]
 801603e:	6042      	str	r2, [r0, #4]
 8016040:	b102      	cbz	r2, 8016044 <get_memory+0x18>
 8016042:	6010      	str	r0, [r2, #0]
 8016044:	2200      	movs	r2, #0
 8016046:	6002      	str	r2, [r0, #0]
 8016048:	6018      	str	r0, [r3, #0]
 801604a:	4770      	bx	lr

0801604c <put_memory>:
 801604c:	680b      	ldr	r3, [r1, #0]
 801604e:	b10b      	cbz	r3, 8016054 <put_memory+0x8>
 8016050:	684a      	ldr	r2, [r1, #4]
 8016052:	605a      	str	r2, [r3, #4]
 8016054:	684a      	ldr	r2, [r1, #4]
 8016056:	b102      	cbz	r2, 801605a <put_memory+0xe>
 8016058:	6013      	str	r3, [r2, #0]
 801605a:	6803      	ldr	r3, [r0, #0]
 801605c:	428b      	cmp	r3, r1
 801605e:	6843      	ldr	r3, [r0, #4]
 8016060:	bf08      	it	eq
 8016062:	6002      	streq	r2, [r0, #0]
 8016064:	604b      	str	r3, [r1, #4]
 8016066:	b103      	cbz	r3, 801606a <put_memory+0x1e>
 8016068:	6019      	str	r1, [r3, #0]
 801606a:	2300      	movs	r3, #0
 801606c:	600b      	str	r3, [r1, #0]
 801606e:	6041      	str	r1, [r0, #4]
 8016070:	4770      	bx	lr
 8016072:	bf00      	nop

08016074 <rmw_destroy_client>:
 8016074:	b570      	push	{r4, r5, r6, lr}
 8016076:	b128      	cbz	r0, 8016084 <rmw_destroy_client+0x10>
 8016078:	4604      	mov	r4, r0
 801607a:	6800      	ldr	r0, [r0, #0]
 801607c:	460d      	mov	r5, r1
 801607e:	f7f8 fcb9 	bl	800e9f4 <is_uxrce_rmw_identifier_valid>
 8016082:	b910      	cbnz	r0, 801608a <rmw_destroy_client+0x16>
 8016084:	2401      	movs	r4, #1
 8016086:	4620      	mov	r0, r4
 8016088:	bd70      	pop	{r4, r5, r6, pc}
 801608a:	6863      	ldr	r3, [r4, #4]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d0f9      	beq.n	8016084 <rmw_destroy_client+0x10>
 8016090:	2d00      	cmp	r5, #0
 8016092:	d0f7      	beq.n	8016084 <rmw_destroy_client+0x10>
 8016094:	6828      	ldr	r0, [r5, #0]
 8016096:	f7f8 fcad 	bl	800e9f4 <is_uxrce_rmw_identifier_valid>
 801609a:	2800      	cmp	r0, #0
 801609c:	d0f2      	beq.n	8016084 <rmw_destroy_client+0x10>
 801609e:	686e      	ldr	r6, [r5, #4]
 80160a0:	2e00      	cmp	r6, #0
 80160a2:	d0ef      	beq.n	8016084 <rmw_destroy_client+0x10>
 80160a4:	6864      	ldr	r4, [r4, #4]
 80160a6:	6932      	ldr	r2, [r6, #16]
 80160a8:	6920      	ldr	r0, [r4, #16]
 80160aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80160ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80160b2:	6819      	ldr	r1, [r3, #0]
 80160b4:	f7fa f98c 	bl	80103d0 <uxr_buffer_cancel_data>
 80160b8:	4602      	mov	r2, r0
 80160ba:	6920      	ldr	r0, [r4, #16]
 80160bc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80160c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80160c4:	f7f8 fc16 	bl	800e8f4 <run_xrce_session>
 80160c8:	6920      	ldr	r0, [r4, #16]
 80160ca:	6932      	ldr	r2, [r6, #16]
 80160cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80160d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80160d4:	6819      	ldr	r1, [r3, #0]
 80160d6:	f7f9 fd49 	bl	800fb6c <uxr_buffer_delete_entity>
 80160da:	4602      	mov	r2, r0
 80160dc:	6920      	ldr	r0, [r4, #16]
 80160de:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80160e2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80160e6:	f7f8 fc05 	bl	800e8f4 <run_xrce_session>
 80160ea:	2800      	cmp	r0, #0
 80160ec:	4628      	mov	r0, r5
 80160ee:	bf14      	ite	ne
 80160f0:	2400      	movne	r4, #0
 80160f2:	2402      	moveq	r4, #2
 80160f4:	f7f8 fae6 	bl	800e6c4 <rmw_uxrce_fini_client_memory>
 80160f8:	e7c5      	b.n	8016086 <rmw_destroy_client+0x12>
 80160fa:	bf00      	nop

080160fc <rmw_get_implementation_identifier>:
 80160fc:	4b01      	ldr	r3, [pc, #4]	@ (8016104 <rmw_get_implementation_identifier+0x8>)
 80160fe:	6818      	ldr	r0, [r3, #0]
 8016100:	4770      	bx	lr
 8016102:	bf00      	nop
 8016104:	08019f18 	.word	0x08019f18

08016108 <rmw_create_guard_condition>:
 8016108:	b538      	push	{r3, r4, r5, lr}
 801610a:	4605      	mov	r5, r0
 801610c:	4807      	ldr	r0, [pc, #28]	@ (801612c <rmw_create_guard_condition+0x24>)
 801610e:	f7ff ff8d 	bl	801602c <get_memory>
 8016112:	b148      	cbz	r0, 8016128 <rmw_create_guard_condition+0x20>
 8016114:	6884      	ldr	r4, [r0, #8]
 8016116:	2300      	movs	r3, #0
 8016118:	7423      	strb	r3, [r4, #16]
 801611a:	61e5      	str	r5, [r4, #28]
 801611c:	f7ff ffee 	bl	80160fc <rmw_get_implementation_identifier>
 8016120:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016124:	f104 0014 	add.w	r0, r4, #20
 8016128:	bd38      	pop	{r3, r4, r5, pc}
 801612a:	bf00      	nop
 801612c:	20010ddc 	.word	0x20010ddc

08016130 <rmw_destroy_guard_condition>:
 8016130:	b508      	push	{r3, lr}
 8016132:	4b08      	ldr	r3, [pc, #32]	@ (8016154 <rmw_destroy_guard_condition+0x24>)
 8016134:	6819      	ldr	r1, [r3, #0]
 8016136:	b911      	cbnz	r1, 801613e <rmw_destroy_guard_condition+0xe>
 8016138:	e00a      	b.n	8016150 <rmw_destroy_guard_condition+0x20>
 801613a:	6849      	ldr	r1, [r1, #4]
 801613c:	b141      	cbz	r1, 8016150 <rmw_destroy_guard_condition+0x20>
 801613e:	688b      	ldr	r3, [r1, #8]
 8016140:	3314      	adds	r3, #20
 8016142:	4298      	cmp	r0, r3
 8016144:	d1f9      	bne.n	801613a <rmw_destroy_guard_condition+0xa>
 8016146:	4803      	ldr	r0, [pc, #12]	@ (8016154 <rmw_destroy_guard_condition+0x24>)
 8016148:	f7ff ff80 	bl	801604c <put_memory>
 801614c:	2000      	movs	r0, #0
 801614e:	bd08      	pop	{r3, pc}
 8016150:	2001      	movs	r0, #1
 8016152:	bd08      	pop	{r3, pc}
 8016154:	20010ddc 	.word	0x20010ddc

08016158 <create_topic>:
 8016158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801615c:	4605      	mov	r5, r0
 801615e:	b084      	sub	sp, #16
 8016160:	4822      	ldr	r0, [pc, #136]	@ (80161ec <create_topic+0x94>)
 8016162:	460f      	mov	r7, r1
 8016164:	4616      	mov	r6, r2
 8016166:	f7ff ff61 	bl	801602c <get_memory>
 801616a:	4604      	mov	r4, r0
 801616c:	2800      	cmp	r0, #0
 801616e:	d039      	beq.n	80161e4 <create_topic+0x8c>
 8016170:	692b      	ldr	r3, [r5, #16]
 8016172:	6884      	ldr	r4, [r0, #8]
 8016174:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80161f4 <create_topic+0x9c>
 8016178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801617c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8016180:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8016184:	1c42      	adds	r2, r0, #1
 8016186:	2102      	movs	r1, #2
 8016188:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801618c:	f7f9 ffb2 	bl	80100f4 <uxr_object_id>
 8016190:	223c      	movs	r2, #60	@ 0x3c
 8016192:	6120      	str	r0, [r4, #16]
 8016194:	4641      	mov	r1, r8
 8016196:	4638      	mov	r0, r7
 8016198:	f7f8 fc12 	bl	800e9c0 <generate_topic_name>
 801619c:	b1f0      	cbz	r0, 80161dc <create_topic+0x84>
 801619e:	4f14      	ldr	r7, [pc, #80]	@ (80161f0 <create_topic+0x98>)
 80161a0:	4630      	mov	r0, r6
 80161a2:	2264      	movs	r2, #100	@ 0x64
 80161a4:	4639      	mov	r1, r7
 80161a6:	f7f8 fbdb 	bl	800e960 <generate_type_name>
 80161aa:	b1b8      	cbz	r0, 80161dc <create_topic+0x84>
 80161ac:	6928      	ldr	r0, [r5, #16]
 80161ae:	2306      	movs	r3, #6
 80161b0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80161b4:	f8cd 8000 	str.w	r8, [sp]
 80161b8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80161bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80161c0:	6811      	ldr	r1, [r2, #0]
 80161c2:	696b      	ldr	r3, [r5, #20]
 80161c4:	6922      	ldr	r2, [r4, #16]
 80161c6:	f7f9 fd4f 	bl	800fc68 <uxr_buffer_create_topic_bin>
 80161ca:	4602      	mov	r2, r0
 80161cc:	6928      	ldr	r0, [r5, #16]
 80161ce:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80161d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80161d6:	f7f8 fb8d 	bl	800e8f4 <run_xrce_session>
 80161da:	b918      	cbnz	r0, 80161e4 <create_topic+0x8c>
 80161dc:	4620      	mov	r0, r4
 80161de:	f7f8 fa87 	bl	800e6f0 <rmw_uxrce_fini_topic_memory>
 80161e2:	2400      	movs	r4, #0
 80161e4:	4620      	mov	r0, r4
 80161e6:	b004      	add	sp, #16
 80161e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ec:	20010e5c 	.word	0x20010e5c
 80161f0:	20010ed8 	.word	0x20010ed8
 80161f4:	20010e9c 	.word	0x20010e9c

080161f8 <destroy_topic>:
 80161f8:	b538      	push	{r3, r4, r5, lr}
 80161fa:	6985      	ldr	r5, [r0, #24]
 80161fc:	b1d5      	cbz	r5, 8016234 <destroy_topic+0x3c>
 80161fe:	4604      	mov	r4, r0
 8016200:	6928      	ldr	r0, [r5, #16]
 8016202:	6922      	ldr	r2, [r4, #16]
 8016204:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016208:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801620c:	6819      	ldr	r1, [r3, #0]
 801620e:	f7f9 fcad 	bl	800fb6c <uxr_buffer_delete_entity>
 8016212:	4602      	mov	r2, r0
 8016214:	6928      	ldr	r0, [r5, #16]
 8016216:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801621a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801621e:	f7f8 fb69 	bl	800e8f4 <run_xrce_session>
 8016222:	2800      	cmp	r0, #0
 8016224:	4620      	mov	r0, r4
 8016226:	bf14      	ite	ne
 8016228:	2400      	movne	r4, #0
 801622a:	2402      	moveq	r4, #2
 801622c:	f7f8 fa60 	bl	800e6f0 <rmw_uxrce_fini_topic_memory>
 8016230:	4620      	mov	r0, r4
 8016232:	bd38      	pop	{r3, r4, r5, pc}
 8016234:	2401      	movs	r4, #1
 8016236:	4620      	mov	r0, r4
 8016238:	bd38      	pop	{r3, r4, r5, pc}
 801623a:	bf00      	nop

0801623c <rmw_send_request>:
 801623c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016240:	4604      	mov	r4, r0
 8016242:	6800      	ldr	r0, [r0, #0]
 8016244:	b08b      	sub	sp, #44	@ 0x2c
 8016246:	460e      	mov	r6, r1
 8016248:	4615      	mov	r5, r2
 801624a:	b128      	cbz	r0, 8016258 <rmw_send_request+0x1c>
 801624c:	4b21      	ldr	r3, [pc, #132]	@ (80162d4 <rmw_send_request+0x98>)
 801624e:	6819      	ldr	r1, [r3, #0]
 8016250:	f7e9 ffde 	bl	8000210 <strcmp>
 8016254:	2800      	cmp	r0, #0
 8016256:	d139      	bne.n	80162cc <rmw_send_request+0x90>
 8016258:	6864      	ldr	r4, [r4, #4]
 801625a:	6963      	ldr	r3, [r4, #20]
 801625c:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8016260:	689b      	ldr	r3, [r3, #8]
 8016262:	4798      	blx	r3
 8016264:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016268:	4630      	mov	r0, r6
 801626a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801626e:	4798      	blx	r3
 8016270:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016274:	9000      	str	r0, [sp, #0]
 8016276:	6922      	ldr	r2, [r4, #16]
 8016278:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801627a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801627e:	ab02      	add	r3, sp, #8
 8016280:	f7fc f922 	bl	80124c8 <uxr_prepare_output_stream>
 8016284:	2700      	movs	r7, #0
 8016286:	6028      	str	r0, [r5, #0]
 8016288:	606f      	str	r7, [r5, #4]
 801628a:	b198      	cbz	r0, 80162b4 <rmw_send_request+0x78>
 801628c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016290:	a902      	add	r1, sp, #8
 8016292:	4630      	mov	r0, r6
 8016294:	4798      	blx	r3
 8016296:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801629a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801629e:	2b01      	cmp	r3, #1
 80162a0:	d00c      	beq.n	80162bc <rmw_send_request+0x80>
 80162a2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80162a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80162a8:	f7fa fe66 	bl	8010f78 <uxr_run_session_until_confirm_delivery>
 80162ac:	4638      	mov	r0, r7
 80162ae:	b00b      	add	sp, #44	@ 0x2c
 80162b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162b4:	2001      	movs	r0, #1
 80162b6:	b00b      	add	sp, #44	@ 0x2c
 80162b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80162c0:	f7fa fa9a 	bl	80107f8 <uxr_flash_output_streams>
 80162c4:	4638      	mov	r0, r7
 80162c6:	b00b      	add	sp, #44	@ 0x2c
 80162c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162cc:	200c      	movs	r0, #12
 80162ce:	b00b      	add	sp, #44	@ 0x2c
 80162d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162d4:	08019f18 	.word	0x08019f18

080162d8 <rmw_take_request>:
 80162d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162dc:	4605      	mov	r5, r0
 80162de:	6800      	ldr	r0, [r0, #0]
 80162e0:	b089      	sub	sp, #36	@ 0x24
 80162e2:	460c      	mov	r4, r1
 80162e4:	4690      	mov	r8, r2
 80162e6:	461e      	mov	r6, r3
 80162e8:	b128      	cbz	r0, 80162f6 <rmw_take_request+0x1e>
 80162ea:	4b28      	ldr	r3, [pc, #160]	@ (801638c <rmw_take_request+0xb4>)
 80162ec:	6819      	ldr	r1, [r3, #0]
 80162ee:	f7e9 ff8f 	bl	8000210 <strcmp>
 80162f2:	2800      	cmp	r0, #0
 80162f4:	d146      	bne.n	8016384 <rmw_take_request+0xac>
 80162f6:	b10e      	cbz	r6, 80162fc <rmw_take_request+0x24>
 80162f8:	2300      	movs	r3, #0
 80162fa:	7033      	strb	r3, [r6, #0]
 80162fc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016300:	f7f8 fa7a 	bl	800e7f8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016304:	4648      	mov	r0, r9
 8016306:	f7f8 fa4f 	bl	800e7a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801630a:	4607      	mov	r7, r0
 801630c:	b3b0      	cbz	r0, 801637c <rmw_take_request+0xa4>
 801630e:	6885      	ldr	r5, [r0, #8]
 8016310:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8016314:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8016318:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801631c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016320:	7423      	strb	r3, [r4, #16]
 8016322:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016326:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801632a:	74e2      	strb	r2, [r4, #19]
 801632c:	f8a4 3011 	strh.w	r3, [r4, #17]
 8016330:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016334:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016338:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 801633c:	61e1      	str	r1, [r4, #28]
 801633e:	6162      	str	r2, [r4, #20]
 8016340:	61a3      	str	r3, [r4, #24]
 8016342:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016346:	689b      	ldr	r3, [r3, #8]
 8016348:	4798      	blx	r3
 801634a:	6844      	ldr	r4, [r0, #4]
 801634c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016350:	f105 0110 	add.w	r1, r5, #16
 8016354:	4668      	mov	r0, sp
 8016356:	f7f9 fb99 	bl	800fa8c <ucdr_init_buffer>
 801635a:	68e3      	ldr	r3, [r4, #12]
 801635c:	4641      	mov	r1, r8
 801635e:	4668      	mov	r0, sp
 8016360:	4798      	blx	r3
 8016362:	4639      	mov	r1, r7
 8016364:	4604      	mov	r4, r0
 8016366:	480a      	ldr	r0, [pc, #40]	@ (8016390 <rmw_take_request+0xb8>)
 8016368:	f7ff fe70 	bl	801604c <put_memory>
 801636c:	b106      	cbz	r6, 8016370 <rmw_take_request+0x98>
 801636e:	7034      	strb	r4, [r6, #0]
 8016370:	f084 0001 	eor.w	r0, r4, #1
 8016374:	b2c0      	uxtb	r0, r0
 8016376:	b009      	add	sp, #36	@ 0x24
 8016378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801637c:	2001      	movs	r0, #1
 801637e:	b009      	add	sp, #36	@ 0x24
 8016380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016384:	200c      	movs	r0, #12
 8016386:	b009      	add	sp, #36	@ 0x24
 8016388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801638c:	08019f18 	.word	0x08019f18
 8016390:	20010e3c 	.word	0x20010e3c

08016394 <rmw_send_response>:
 8016394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016396:	4605      	mov	r5, r0
 8016398:	6800      	ldr	r0, [r0, #0]
 801639a:	b091      	sub	sp, #68	@ 0x44
 801639c:	460c      	mov	r4, r1
 801639e:	4616      	mov	r6, r2
 80163a0:	b128      	cbz	r0, 80163ae <rmw_send_response+0x1a>
 80163a2:	4b29      	ldr	r3, [pc, #164]	@ (8016448 <rmw_send_response+0xb4>)
 80163a4:	6819      	ldr	r1, [r3, #0]
 80163a6:	f7e9 ff33 	bl	8000210 <strcmp>
 80163aa:	2800      	cmp	r0, #0
 80163ac:	d141      	bne.n	8016432 <rmw_send_response+0x9e>
 80163ae:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80163b2:	9306      	str	r3, [sp, #24]
 80163b4:	4623      	mov	r3, r4
 80163b6:	9207      	str	r2, [sp, #28]
 80163b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163bc:	686d      	ldr	r5, [r5, #4]
 80163be:	789b      	ldrb	r3, [r3, #2]
 80163c0:	68a1      	ldr	r1, [r4, #8]
 80163c2:	f88d 2017 	strb.w	r2, [sp, #23]
 80163c6:	f88d 3016 	strb.w	r3, [sp, #22]
 80163ca:	68e2      	ldr	r2, [r4, #12]
 80163cc:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80163d0:	6860      	ldr	r0, [r4, #4]
 80163d2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80163d6:	ab02      	add	r3, sp, #8
 80163d8:	c307      	stmia	r3!, {r0, r1, r2}
 80163da:	696b      	ldr	r3, [r5, #20]
 80163dc:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80163de:	68db      	ldr	r3, [r3, #12]
 80163e0:	4798      	blx	r3
 80163e2:	6844      	ldr	r4, [r0, #4]
 80163e4:	4630      	mov	r0, r6
 80163e6:	6923      	ldr	r3, [r4, #16]
 80163e8:	4798      	blx	r3
 80163ea:	f100 0318 	add.w	r3, r0, #24
 80163ee:	6938      	ldr	r0, [r7, #16]
 80163f0:	9300      	str	r3, [sp, #0]
 80163f2:	692a      	ldr	r2, [r5, #16]
 80163f4:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80163f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80163fa:	ab08      	add	r3, sp, #32
 80163fc:	f7fc f864 	bl	80124c8 <uxr_prepare_output_stream>
 8016400:	b910      	cbnz	r0, 8016408 <rmw_send_response+0x74>
 8016402:	2001      	movs	r0, #1
 8016404:	b011      	add	sp, #68	@ 0x44
 8016406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016408:	a902      	add	r1, sp, #8
 801640a:	a808      	add	r0, sp, #32
 801640c:	f7fd f9a8 	bl	8013760 <uxr_serialize_SampleIdentity>
 8016410:	68a3      	ldr	r3, [r4, #8]
 8016412:	a908      	add	r1, sp, #32
 8016414:	4630      	mov	r0, r6
 8016416:	4798      	blx	r3
 8016418:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801641c:	6938      	ldr	r0, [r7, #16]
 801641e:	2b01      	cmp	r3, #1
 8016420:	d00a      	beq.n	8016438 <rmw_send_response+0xa4>
 8016422:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016424:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016428:	f7fa fda6 	bl	8010f78 <uxr_run_session_until_confirm_delivery>
 801642c:	2000      	movs	r0, #0
 801642e:	b011      	add	sp, #68	@ 0x44
 8016430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016432:	200c      	movs	r0, #12
 8016434:	b011      	add	sp, #68	@ 0x44
 8016436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016438:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801643c:	f7fa f9dc 	bl	80107f8 <uxr_flash_output_streams>
 8016440:	2000      	movs	r0, #0
 8016442:	b011      	add	sp, #68	@ 0x44
 8016444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016446:	bf00      	nop
 8016448:	08019f18 	.word	0x08019f18

0801644c <rmw_take_response>:
 801644c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016450:	4604      	mov	r4, r0
 8016452:	6800      	ldr	r0, [r0, #0]
 8016454:	b088      	sub	sp, #32
 8016456:	4688      	mov	r8, r1
 8016458:	4617      	mov	r7, r2
 801645a:	461d      	mov	r5, r3
 801645c:	b120      	cbz	r0, 8016468 <rmw_take_response+0x1c>
 801645e:	4b1e      	ldr	r3, [pc, #120]	@ (80164d8 <rmw_take_response+0x8c>)
 8016460:	6819      	ldr	r1, [r3, #0]
 8016462:	f7e9 fed5 	bl	8000210 <strcmp>
 8016466:	bb78      	cbnz	r0, 80164c8 <rmw_take_response+0x7c>
 8016468:	b10d      	cbz	r5, 801646e <rmw_take_response+0x22>
 801646a:	2300      	movs	r3, #0
 801646c:	702b      	strb	r3, [r5, #0]
 801646e:	6864      	ldr	r4, [r4, #4]
 8016470:	f7f8 f9c2 	bl	800e7f8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016474:	4620      	mov	r0, r4
 8016476:	f7f8 f997 	bl	800e7a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801647a:	4606      	mov	r6, r0
 801647c:	b340      	cbz	r0, 80164d0 <rmw_take_response+0x84>
 801647e:	6963      	ldr	r3, [r4, #20]
 8016480:	6884      	ldr	r4, [r0, #8]
 8016482:	68db      	ldr	r3, [r3, #12]
 8016484:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016488:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801648c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8016490:	4798      	blx	r3
 8016492:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016496:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801649a:	f104 0110 	add.w	r1, r4, #16
 801649e:	4668      	mov	r0, sp
 80164a0:	f7f9 faf4 	bl	800fa8c <ucdr_init_buffer>
 80164a4:	4639      	mov	r1, r7
 80164a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80164aa:	4668      	mov	r0, sp
 80164ac:	4798      	blx	r3
 80164ae:	4631      	mov	r1, r6
 80164b0:	4604      	mov	r4, r0
 80164b2:	480a      	ldr	r0, [pc, #40]	@ (80164dc <rmw_take_response+0x90>)
 80164b4:	f7ff fdca 	bl	801604c <put_memory>
 80164b8:	b105      	cbz	r5, 80164bc <rmw_take_response+0x70>
 80164ba:	702c      	strb	r4, [r5, #0]
 80164bc:	f084 0001 	eor.w	r0, r4, #1
 80164c0:	b2c0      	uxtb	r0, r0
 80164c2:	b008      	add	sp, #32
 80164c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164c8:	200c      	movs	r0, #12
 80164ca:	b008      	add	sp, #32
 80164cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164d0:	2001      	movs	r0, #1
 80164d2:	b008      	add	sp, #32
 80164d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164d8:	08019f18 	.word	0x08019f18
 80164dc:	20010e3c 	.word	0x20010e3c

080164e0 <rmw_trigger_guard_condition>:
 80164e0:	b160      	cbz	r0, 80164fc <rmw_trigger_guard_condition+0x1c>
 80164e2:	b510      	push	{r4, lr}
 80164e4:	4604      	mov	r4, r0
 80164e6:	6800      	ldr	r0, [r0, #0]
 80164e8:	f7f8 fa84 	bl	800e9f4 <is_uxrce_rmw_identifier_valid>
 80164ec:	b908      	cbnz	r0, 80164f2 <rmw_trigger_guard_condition+0x12>
 80164ee:	2001      	movs	r0, #1
 80164f0:	bd10      	pop	{r4, pc}
 80164f2:	6863      	ldr	r3, [r4, #4]
 80164f4:	2201      	movs	r2, #1
 80164f6:	741a      	strb	r2, [r3, #16]
 80164f8:	2000      	movs	r0, #0
 80164fa:	bd10      	pop	{r4, pc}
 80164fc:	2001      	movs	r0, #1
 80164fe:	4770      	bx	lr

08016500 <rmw_wait>:
 8016500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016504:	b089      	sub	sp, #36	@ 0x24
 8016506:	4605      	mov	r5, r0
 8016508:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801650a:	460e      	mov	r6, r1
 801650c:	4698      	mov	r8, r3
 801650e:	4691      	mov	r9, r2
 8016510:	2a00      	cmp	r2, #0
 8016512:	f000 810a 	beq.w	801672a <rmw_wait+0x22a>
 8016516:	b16c      	cbz	r4, 8016534 <rmw_wait+0x34>
 8016518:	4bae      	ldr	r3, [pc, #696]	@ (80167d4 <rmw_wait+0x2d4>)
 801651a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801651c:	af04      	add	r7, sp, #16
 801651e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8016522:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016526:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801652a:	f7ff fb9d 	bl	8015c68 <rmw_time_equal>
 801652e:	2800      	cmp	r0, #0
 8016530:	f000 8127 	beq.w	8016782 <rmw_wait+0x282>
 8016534:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016538:	f7f8 f95e 	bl	800e7f8 <rmw_uxrce_clean_expired_static_input_buffer>
 801653c:	4ba6      	ldr	r3, [pc, #664]	@ (80167d8 <rmw_wait+0x2d8>)
 801653e:	681c      	ldr	r4, [r3, #0]
 8016540:	b14c      	cbz	r4, 8016556 <rmw_wait+0x56>
 8016542:	4623      	mov	r3, r4
 8016544:	2100      	movs	r1, #0
 8016546:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801654a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801654e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8016552:	2b00      	cmp	r3, #0
 8016554:	d1f7      	bne.n	8016546 <rmw_wait+0x46>
 8016556:	f1b9 0f00 	cmp.w	r9, #0
 801655a:	d011      	beq.n	8016580 <rmw_wait+0x80>
 801655c:	f8d9 1000 	ldr.w	r1, [r9]
 8016560:	b171      	cbz	r1, 8016580 <rmw_wait+0x80>
 8016562:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016566:	2300      	movs	r3, #0
 8016568:	2001      	movs	r0, #1
 801656a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801656e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016570:	6912      	ldr	r2, [r2, #16]
 8016572:	3301      	adds	r3, #1
 8016574:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016578:	4299      	cmp	r1, r3
 801657a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801657e:	d1f4      	bne.n	801656a <rmw_wait+0x6a>
 8016580:	f1b8 0f00 	cmp.w	r8, #0
 8016584:	d011      	beq.n	80165aa <rmw_wait+0xaa>
 8016586:	f8d8 1000 	ldr.w	r1, [r8]
 801658a:	b171      	cbz	r1, 80165aa <rmw_wait+0xaa>
 801658c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016590:	2300      	movs	r3, #0
 8016592:	2001      	movs	r0, #1
 8016594:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016598:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801659a:	6912      	ldr	r2, [r2, #16]
 801659c:	3301      	adds	r3, #1
 801659e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80165a2:	4299      	cmp	r1, r3
 80165a4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80165a8:	d1f4      	bne.n	8016594 <rmw_wait+0x94>
 80165aa:	b185      	cbz	r5, 80165ce <rmw_wait+0xce>
 80165ac:	6829      	ldr	r1, [r5, #0]
 80165ae:	b171      	cbz	r1, 80165ce <rmw_wait+0xce>
 80165b0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80165b4:	2300      	movs	r3, #0
 80165b6:	2001      	movs	r0, #1
 80165b8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80165bc:	6a12      	ldr	r2, [r2, #32]
 80165be:	6912      	ldr	r2, [r2, #16]
 80165c0:	3301      	adds	r3, #1
 80165c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80165c6:	4299      	cmp	r1, r3
 80165c8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80165cc:	d1f4      	bne.n	80165b8 <rmw_wait+0xb8>
 80165ce:	b34c      	cbz	r4, 8016624 <rmw_wait+0x124>
 80165d0:	4622      	mov	r2, r4
 80165d2:	2300      	movs	r3, #0
 80165d4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80165d8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80165dc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80165e0:	440b      	add	r3, r1
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	2a00      	cmp	r2, #0
 80165e6:	d1f5      	bne.n	80165d4 <rmw_wait+0xd4>
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	f000 8084 	beq.w	80166f6 <rmw_wait+0x1f6>
 80165ee:	1c7a      	adds	r2, r7, #1
 80165f0:	d00d      	beq.n	801660e <rmw_wait+0x10e>
 80165f2:	ee07 7a90 	vmov	s15, r7
 80165f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80165fa:	ee07 3a90 	vmov	s15, r3
 80165fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016606:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801660a:	ee17 7a90 	vmov	r7, s15
 801660e:	68a0      	ldr	r0, [r4, #8]
 8016610:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8016614:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8016618:	2b00      	cmp	r3, #0
 801661a:	f040 8090 	bne.w	801673e <rmw_wait+0x23e>
 801661e:	6864      	ldr	r4, [r4, #4]
 8016620:	2c00      	cmp	r4, #0
 8016622:	d1f4      	bne.n	801660e <rmw_wait+0x10e>
 8016624:	f1b9 0f00 	cmp.w	r9, #0
 8016628:	f000 80bc 	beq.w	80167a4 <rmw_wait+0x2a4>
 801662c:	f8d9 7000 	ldr.w	r7, [r9]
 8016630:	2f00      	cmp	r7, #0
 8016632:	f000 808e 	beq.w	8016752 <rmw_wait+0x252>
 8016636:	2400      	movs	r4, #0
 8016638:	4627      	mov	r7, r4
 801663a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801663e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016642:	f7f8 f8b1 	bl	800e7a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016646:	2800      	cmp	r0, #0
 8016648:	d05f      	beq.n	801670a <rmw_wait+0x20a>
 801664a:	f8d9 3000 	ldr.w	r3, [r9]
 801664e:	3401      	adds	r4, #1
 8016650:	42a3      	cmp	r3, r4
 8016652:	f04f 0701 	mov.w	r7, #1
 8016656:	d8f0      	bhi.n	801663a <rmw_wait+0x13a>
 8016658:	f1b8 0f00 	cmp.w	r8, #0
 801665c:	d012      	beq.n	8016684 <rmw_wait+0x184>
 801665e:	f8d8 3000 	ldr.w	r3, [r8]
 8016662:	b17b      	cbz	r3, 8016684 <rmw_wait+0x184>
 8016664:	2400      	movs	r4, #0
 8016666:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801666a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801666e:	f7f8 f89b 	bl	800e7a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016672:	2800      	cmp	r0, #0
 8016674:	d051      	beq.n	801671a <rmw_wait+0x21a>
 8016676:	f8d8 3000 	ldr.w	r3, [r8]
 801667a:	3401      	adds	r4, #1
 801667c:	42a3      	cmp	r3, r4
 801667e:	f04f 0701 	mov.w	r7, #1
 8016682:	d8f0      	bhi.n	8016666 <rmw_wait+0x166>
 8016684:	b1dd      	cbz	r5, 80166be <rmw_wait+0x1be>
 8016686:	682b      	ldr	r3, [r5, #0]
 8016688:	b1cb      	cbz	r3, 80166be <rmw_wait+0x1be>
 801668a:	2400      	movs	r4, #0
 801668c:	686b      	ldr	r3, [r5, #4]
 801668e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016692:	f7f8 f889 	bl	800e7a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016696:	b158      	cbz	r0, 80166b0 <rmw_wait+0x1b0>
 8016698:	682b      	ldr	r3, [r5, #0]
 801669a:	3401      	adds	r4, #1
 801669c:	42a3      	cmp	r3, r4
 801669e:	d969      	bls.n	8016774 <rmw_wait+0x274>
 80166a0:	686b      	ldr	r3, [r5, #4]
 80166a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80166a6:	2701      	movs	r7, #1
 80166a8:	f7f8 f87e 	bl	800e7a8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80166ac:	2800      	cmp	r0, #0
 80166ae:	d1f3      	bne.n	8016698 <rmw_wait+0x198>
 80166b0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80166b4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80166b8:	3401      	adds	r4, #1
 80166ba:	42a3      	cmp	r3, r4
 80166bc:	d8e6      	bhi.n	801668c <rmw_wait+0x18c>
 80166be:	b1a6      	cbz	r6, 80166ea <rmw_wait+0x1ea>
 80166c0:	6834      	ldr	r4, [r6, #0]
 80166c2:	b194      	cbz	r4, 80166ea <rmw_wait+0x1ea>
 80166c4:	2300      	movs	r3, #0
 80166c6:	461d      	mov	r5, r3
 80166c8:	e004      	b.n	80166d4 <rmw_wait+0x1d4>
 80166ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80166ce:	3301      	adds	r3, #1
 80166d0:	42a3      	cmp	r3, r4
 80166d2:	d00a      	beq.n	80166ea <rmw_wait+0x1ea>
 80166d4:	6870      	ldr	r0, [r6, #4]
 80166d6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80166da:	7c0a      	ldrb	r2, [r1, #16]
 80166dc:	2a00      	cmp	r2, #0
 80166de:	d0f4      	beq.n	80166ca <rmw_wait+0x1ca>
 80166e0:	3301      	adds	r3, #1
 80166e2:	42a3      	cmp	r3, r4
 80166e4:	740d      	strb	r5, [r1, #16]
 80166e6:	4617      	mov	r7, r2
 80166e8:	d1f4      	bne.n	80166d4 <rmw_wait+0x1d4>
 80166ea:	2f00      	cmp	r7, #0
 80166ec:	d03e      	beq.n	801676c <rmw_wait+0x26c>
 80166ee:	2000      	movs	r0, #0
 80166f0:	b009      	add	sp, #36	@ 0x24
 80166f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166f6:	68a0      	ldr	r0, [r4, #8]
 80166f8:	2100      	movs	r1, #0
 80166fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80166fe:	f7fa fc01 	bl	8010f04 <uxr_run_session_timeout>
 8016702:	6864      	ldr	r4, [r4, #4]
 8016704:	2c00      	cmp	r4, #0
 8016706:	d1f6      	bne.n	80166f6 <rmw_wait+0x1f6>
 8016708:	e78c      	b.n	8016624 <rmw_wait+0x124>
 801670a:	e9d9 3200 	ldrd	r3, r2, [r9]
 801670e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016712:	3401      	adds	r4, #1
 8016714:	42a3      	cmp	r3, r4
 8016716:	d890      	bhi.n	801663a <rmw_wait+0x13a>
 8016718:	e79e      	b.n	8016658 <rmw_wait+0x158>
 801671a:	e9d8 3200 	ldrd	r3, r2, [r8]
 801671e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016722:	3401      	adds	r4, #1
 8016724:	429c      	cmp	r4, r3
 8016726:	d39e      	bcc.n	8016666 <rmw_wait+0x166>
 8016728:	e7ac      	b.n	8016684 <rmw_wait+0x184>
 801672a:	2b00      	cmp	r3, #0
 801672c:	f47f aef3 	bne.w	8016516 <rmw_wait+0x16>
 8016730:	2800      	cmp	r0, #0
 8016732:	f47f aef0 	bne.w	8016516 <rmw_wait+0x16>
 8016736:	2900      	cmp	r1, #0
 8016738:	f47f aeed 	bne.w	8016516 <rmw_wait+0x16>
 801673c:	e7d7      	b.n	80166ee <rmw_wait+0x1ee>
 801673e:	4639      	mov	r1, r7
 8016740:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016744:	f7fa fbf8 	bl	8010f38 <uxr_run_session_until_data>
 8016748:	6864      	ldr	r4, [r4, #4]
 801674a:	2c00      	cmp	r4, #0
 801674c:	f47f af5f 	bne.w	801660e <rmw_wait+0x10e>
 8016750:	e768      	b.n	8016624 <rmw_wait+0x124>
 8016752:	f1b8 0f00 	cmp.w	r8, #0
 8016756:	d032      	beq.n	80167be <rmw_wait+0x2be>
 8016758:	f8d8 3000 	ldr.w	r3, [r8]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d181      	bne.n	8016664 <rmw_wait+0x164>
 8016760:	461f      	mov	r7, r3
 8016762:	2d00      	cmp	r5, #0
 8016764:	d18f      	bne.n	8016686 <rmw_wait+0x186>
 8016766:	462f      	mov	r7, r5
 8016768:	2e00      	cmp	r6, #0
 801676a:	d1a9      	bne.n	80166c0 <rmw_wait+0x1c0>
 801676c:	2002      	movs	r0, #2
 801676e:	b009      	add	sp, #36	@ 0x24
 8016770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016774:	2e00      	cmp	r6, #0
 8016776:	d0ba      	beq.n	80166ee <rmw_wait+0x1ee>
 8016778:	6834      	ldr	r4, [r6, #0]
 801677a:	2701      	movs	r7, #1
 801677c:	2c00      	cmp	r4, #0
 801677e:	d1a1      	bne.n	80166c4 <rmw_wait+0x1c4>
 8016780:	e7b5      	b.n	80166ee <rmw_wait+0x1ee>
 8016782:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016786:	f7ff fac3 	bl	8015d10 <rmw_time_total_nsec>
 801678a:	2300      	movs	r3, #0
 801678c:	4a13      	ldr	r2, [pc, #76]	@ (80167dc <rmw_wait+0x2dc>)
 801678e:	f7ea fa15 	bl	8000bbc <__aeabi_uldivmod>
 8016792:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8016796:	f171 0300 	sbcs.w	r3, r1, #0
 801679a:	4607      	mov	r7, r0
 801679c:	bfa8      	it	ge
 801679e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80167a2:	e6c9      	b.n	8016538 <rmw_wait+0x38>
 80167a4:	f1b8 0f00 	cmp.w	r8, #0
 80167a8:	d009      	beq.n	80167be <rmw_wait+0x2be>
 80167aa:	f8d8 3000 	ldr.w	r3, [r8]
 80167ae:	464f      	mov	r7, r9
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	f47f af57 	bne.w	8016664 <rmw_wait+0x164>
 80167b6:	2d00      	cmp	r5, #0
 80167b8:	f47f af65 	bne.w	8016686 <rmw_wait+0x186>
 80167bc:	e7d3      	b.n	8016766 <rmw_wait+0x266>
 80167be:	b17d      	cbz	r5, 80167e0 <rmw_wait+0x2e0>
 80167c0:	682b      	ldr	r3, [r5, #0]
 80167c2:	4647      	mov	r7, r8
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	f47f af60 	bne.w	801668a <rmw_wait+0x18a>
 80167ca:	2e00      	cmp	r6, #0
 80167cc:	f47f af78 	bne.w	80166c0 <rmw_wait+0x1c0>
 80167d0:	e7cc      	b.n	801676c <rmw_wait+0x26c>
 80167d2:	bf00      	nop
 80167d4:	08019458 	.word	0x08019458
 80167d8:	20010e2c 	.word	0x20010e2c
 80167dc:	000f4240 	.word	0x000f4240
 80167e0:	2e00      	cmp	r6, #0
 80167e2:	d0c3      	beq.n	801676c <rmw_wait+0x26c>
 80167e4:	6834      	ldr	r4, [r6, #0]
 80167e6:	462f      	mov	r7, r5
 80167e8:	2c00      	cmp	r4, #0
 80167ea:	f47f af6b 	bne.w	80166c4 <rmw_wait+0x1c4>
 80167ee:	e7bd      	b.n	801676c <rmw_wait+0x26c>

080167f0 <rmw_create_wait_set>:
 80167f0:	b508      	push	{r3, lr}
 80167f2:	4803      	ldr	r0, [pc, #12]	@ (8016800 <rmw_create_wait_set+0x10>)
 80167f4:	f7ff fc1a 	bl	801602c <get_memory>
 80167f8:	b108      	cbz	r0, 80167fe <rmw_create_wait_set+0xe>
 80167fa:	6880      	ldr	r0, [r0, #8]
 80167fc:	3010      	adds	r0, #16
 80167fe:	bd08      	pop	{r3, pc}
 8016800:	20010e6c 	.word	0x20010e6c

08016804 <rmw_destroy_wait_set>:
 8016804:	b508      	push	{r3, lr}
 8016806:	4b08      	ldr	r3, [pc, #32]	@ (8016828 <rmw_destroy_wait_set+0x24>)
 8016808:	6819      	ldr	r1, [r3, #0]
 801680a:	b911      	cbnz	r1, 8016812 <rmw_destroy_wait_set+0xe>
 801680c:	e00a      	b.n	8016824 <rmw_destroy_wait_set+0x20>
 801680e:	6849      	ldr	r1, [r1, #4]
 8016810:	b141      	cbz	r1, 8016824 <rmw_destroy_wait_set+0x20>
 8016812:	688b      	ldr	r3, [r1, #8]
 8016814:	3310      	adds	r3, #16
 8016816:	4298      	cmp	r0, r3
 8016818:	d1f9      	bne.n	801680e <rmw_destroy_wait_set+0xa>
 801681a:	4803      	ldr	r0, [pc, #12]	@ (8016828 <rmw_destroy_wait_set+0x24>)
 801681c:	f7ff fc16 	bl	801604c <put_memory>
 8016820:	2000      	movs	r0, #0
 8016822:	bd08      	pop	{r3, pc}
 8016824:	2001      	movs	r0, #1
 8016826:	bd08      	pop	{r3, pc}
 8016828:	20010e6c 	.word	0x20010e6c

0801682c <rmw_uros_epoch_nanos>:
 801682c:	4b05      	ldr	r3, [pc, #20]	@ (8016844 <rmw_uros_epoch_nanos+0x18>)
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	b123      	cbz	r3, 801683c <rmw_uros_epoch_nanos+0x10>
 8016832:	6898      	ldr	r0, [r3, #8]
 8016834:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016838:	f7f9 bfd4 	b.w	80107e4 <uxr_epoch_nanos>
 801683c:	2000      	movs	r0, #0
 801683e:	2100      	movs	r1, #0
 8016840:	4770      	bx	lr
 8016842:	bf00      	nop
 8016844:	20010e2c 	.word	0x20010e2c

08016848 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8016848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801684c:	6805      	ldr	r5, [r0, #0]
 801684e:	4604      	mov	r4, r0
 8016850:	4628      	mov	r0, r5
 8016852:	460e      	mov	r6, r1
 8016854:	f7e9 fcdc 	bl	8000210 <strcmp>
 8016858:	b1c8      	cbz	r0, 801688e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801685a:	4b11      	ldr	r3, [pc, #68]	@ (80168a0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	429d      	cmp	r5, r3
 8016860:	d112      	bne.n	8016888 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8016862:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016866:	f8d8 4000 	ldr.w	r4, [r8]
 801686a:	b16c      	cbz	r4, 8016888 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801686c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016870:	2700      	movs	r7, #0
 8016872:	3d04      	subs	r5, #4
 8016874:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8016878:	4631      	mov	r1, r6
 801687a:	f7e9 fcc9 	bl	8000210 <strcmp>
 801687e:	00bb      	lsls	r3, r7, #2
 8016880:	b140      	cbz	r0, 8016894 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8016882:	3701      	adds	r7, #1
 8016884:	42bc      	cmp	r4, r7
 8016886:	d1f5      	bne.n	8016874 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8016888:	2000      	movs	r0, #0
 801688a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801688e:	4620      	mov	r0, r4
 8016890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016894:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801689c:	58d3      	ldr	r3, [r2, r3]
 801689e:	4718      	bx	r3
 80168a0:	200000c4 	.word	0x200000c4

080168a4 <std_msgs__msg__Int32__init>:
 80168a4:	3800      	subs	r0, #0
 80168a6:	bf18      	it	ne
 80168a8:	2001      	movne	r0, #1
 80168aa:	4770      	bx	lr

080168ac <std_msgs__msg__Int32__fini>:
 80168ac:	4770      	bx	lr
 80168ae:	bf00      	nop

080168b0 <ucdr_serialize_endian_array_char>:
 80168b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168b4:	4619      	mov	r1, r3
 80168b6:	461f      	mov	r7, r3
 80168b8:	4605      	mov	r5, r0
 80168ba:	4690      	mov	r8, r2
 80168bc:	f7f9 f892 	bl	800f9e4 <ucdr_check_buffer_available_for>
 80168c0:	b9e0      	cbnz	r0, 80168fc <ucdr_serialize_endian_array_char+0x4c>
 80168c2:	463e      	mov	r6, r7
 80168c4:	e009      	b.n	80168da <ucdr_serialize_endian_array_char+0x2a>
 80168c6:	68a8      	ldr	r0, [r5, #8]
 80168c8:	f001 fe77 	bl	80185ba <memcpy>
 80168cc:	68ab      	ldr	r3, [r5, #8]
 80168ce:	6928      	ldr	r0, [r5, #16]
 80168d0:	4423      	add	r3, r4
 80168d2:	4420      	add	r0, r4
 80168d4:	1b36      	subs	r6, r6, r4
 80168d6:	60ab      	str	r3, [r5, #8]
 80168d8:	6128      	str	r0, [r5, #16]
 80168da:	4631      	mov	r1, r6
 80168dc:	2201      	movs	r2, #1
 80168de:	4628      	mov	r0, r5
 80168e0:	f7f9 f908 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 80168e4:	1bb9      	subs	r1, r7, r6
 80168e6:	4441      	add	r1, r8
 80168e8:	4604      	mov	r4, r0
 80168ea:	4602      	mov	r2, r0
 80168ec:	2800      	cmp	r0, #0
 80168ee:	d1ea      	bne.n	80168c6 <ucdr_serialize_endian_array_char+0x16>
 80168f0:	2301      	movs	r3, #1
 80168f2:	7da8      	ldrb	r0, [r5, #22]
 80168f4:	756b      	strb	r3, [r5, #21]
 80168f6:	4058      	eors	r0, r3
 80168f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168fc:	463a      	mov	r2, r7
 80168fe:	68a8      	ldr	r0, [r5, #8]
 8016900:	4641      	mov	r1, r8
 8016902:	f001 fe5a 	bl	80185ba <memcpy>
 8016906:	68aa      	ldr	r2, [r5, #8]
 8016908:	692b      	ldr	r3, [r5, #16]
 801690a:	443a      	add	r2, r7
 801690c:	443b      	add	r3, r7
 801690e:	60aa      	str	r2, [r5, #8]
 8016910:	612b      	str	r3, [r5, #16]
 8016912:	e7ed      	b.n	80168f0 <ucdr_serialize_endian_array_char+0x40>

08016914 <ucdr_deserialize_endian_array_char>:
 8016914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016918:	4619      	mov	r1, r3
 801691a:	461f      	mov	r7, r3
 801691c:	4605      	mov	r5, r0
 801691e:	4690      	mov	r8, r2
 8016920:	f7f9 f860 	bl	800f9e4 <ucdr_check_buffer_available_for>
 8016924:	b9e0      	cbnz	r0, 8016960 <ucdr_deserialize_endian_array_char+0x4c>
 8016926:	463e      	mov	r6, r7
 8016928:	e009      	b.n	801693e <ucdr_deserialize_endian_array_char+0x2a>
 801692a:	68a9      	ldr	r1, [r5, #8]
 801692c:	f001 fe45 	bl	80185ba <memcpy>
 8016930:	68ab      	ldr	r3, [r5, #8]
 8016932:	6928      	ldr	r0, [r5, #16]
 8016934:	4423      	add	r3, r4
 8016936:	4420      	add	r0, r4
 8016938:	1b36      	subs	r6, r6, r4
 801693a:	60ab      	str	r3, [r5, #8]
 801693c:	6128      	str	r0, [r5, #16]
 801693e:	2201      	movs	r2, #1
 8016940:	4631      	mov	r1, r6
 8016942:	4628      	mov	r0, r5
 8016944:	f7f9 f8d6 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 8016948:	4604      	mov	r4, r0
 801694a:	1bb8      	subs	r0, r7, r6
 801694c:	4440      	add	r0, r8
 801694e:	4622      	mov	r2, r4
 8016950:	2c00      	cmp	r4, #0
 8016952:	d1ea      	bne.n	801692a <ucdr_deserialize_endian_array_char+0x16>
 8016954:	2301      	movs	r3, #1
 8016956:	7da8      	ldrb	r0, [r5, #22]
 8016958:	756b      	strb	r3, [r5, #21]
 801695a:	4058      	eors	r0, r3
 801695c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016960:	463a      	mov	r2, r7
 8016962:	68a9      	ldr	r1, [r5, #8]
 8016964:	4640      	mov	r0, r8
 8016966:	f001 fe28 	bl	80185ba <memcpy>
 801696a:	68aa      	ldr	r2, [r5, #8]
 801696c:	692b      	ldr	r3, [r5, #16]
 801696e:	443a      	add	r2, r7
 8016970:	443b      	add	r3, r7
 8016972:	60aa      	str	r2, [r5, #8]
 8016974:	612b      	str	r3, [r5, #16]
 8016976:	e7ed      	b.n	8016954 <ucdr_deserialize_endian_array_char+0x40>

08016978 <ucdr_serialize_array_uint8_t>:
 8016978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801697c:	4688      	mov	r8, r1
 801697e:	4611      	mov	r1, r2
 8016980:	4617      	mov	r7, r2
 8016982:	4605      	mov	r5, r0
 8016984:	f7f9 f82e 	bl	800f9e4 <ucdr_check_buffer_available_for>
 8016988:	b9e0      	cbnz	r0, 80169c4 <ucdr_serialize_array_uint8_t+0x4c>
 801698a:	463e      	mov	r6, r7
 801698c:	e009      	b.n	80169a2 <ucdr_serialize_array_uint8_t+0x2a>
 801698e:	68a8      	ldr	r0, [r5, #8]
 8016990:	f001 fe13 	bl	80185ba <memcpy>
 8016994:	68aa      	ldr	r2, [r5, #8]
 8016996:	692b      	ldr	r3, [r5, #16]
 8016998:	4422      	add	r2, r4
 801699a:	4423      	add	r3, r4
 801699c:	1b36      	subs	r6, r6, r4
 801699e:	60aa      	str	r2, [r5, #8]
 80169a0:	612b      	str	r3, [r5, #16]
 80169a2:	4631      	mov	r1, r6
 80169a4:	2201      	movs	r2, #1
 80169a6:	4628      	mov	r0, r5
 80169a8:	f7f9 f8a4 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 80169ac:	1bb9      	subs	r1, r7, r6
 80169ae:	4441      	add	r1, r8
 80169b0:	4604      	mov	r4, r0
 80169b2:	4602      	mov	r2, r0
 80169b4:	2800      	cmp	r0, #0
 80169b6:	d1ea      	bne.n	801698e <ucdr_serialize_array_uint8_t+0x16>
 80169b8:	2301      	movs	r3, #1
 80169ba:	7da8      	ldrb	r0, [r5, #22]
 80169bc:	756b      	strb	r3, [r5, #21]
 80169be:	4058      	eors	r0, r3
 80169c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169c4:	463a      	mov	r2, r7
 80169c6:	68a8      	ldr	r0, [r5, #8]
 80169c8:	4641      	mov	r1, r8
 80169ca:	f001 fdf6 	bl	80185ba <memcpy>
 80169ce:	68aa      	ldr	r2, [r5, #8]
 80169d0:	692b      	ldr	r3, [r5, #16]
 80169d2:	443a      	add	r2, r7
 80169d4:	443b      	add	r3, r7
 80169d6:	60aa      	str	r2, [r5, #8]
 80169d8:	612b      	str	r3, [r5, #16]
 80169da:	e7ed      	b.n	80169b8 <ucdr_serialize_array_uint8_t+0x40>

080169dc <ucdr_serialize_endian_array_uint8_t>:
 80169dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169e0:	4619      	mov	r1, r3
 80169e2:	461f      	mov	r7, r3
 80169e4:	4605      	mov	r5, r0
 80169e6:	4690      	mov	r8, r2
 80169e8:	f7f8 fffc 	bl	800f9e4 <ucdr_check_buffer_available_for>
 80169ec:	b9e0      	cbnz	r0, 8016a28 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80169ee:	463e      	mov	r6, r7
 80169f0:	e009      	b.n	8016a06 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80169f2:	68a8      	ldr	r0, [r5, #8]
 80169f4:	f001 fde1 	bl	80185ba <memcpy>
 80169f8:	68ab      	ldr	r3, [r5, #8]
 80169fa:	6928      	ldr	r0, [r5, #16]
 80169fc:	4423      	add	r3, r4
 80169fe:	4420      	add	r0, r4
 8016a00:	1b36      	subs	r6, r6, r4
 8016a02:	60ab      	str	r3, [r5, #8]
 8016a04:	6128      	str	r0, [r5, #16]
 8016a06:	4631      	mov	r1, r6
 8016a08:	2201      	movs	r2, #1
 8016a0a:	4628      	mov	r0, r5
 8016a0c:	f7f9 f872 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 8016a10:	1bb9      	subs	r1, r7, r6
 8016a12:	4441      	add	r1, r8
 8016a14:	4604      	mov	r4, r0
 8016a16:	4602      	mov	r2, r0
 8016a18:	2800      	cmp	r0, #0
 8016a1a:	d1ea      	bne.n	80169f2 <ucdr_serialize_endian_array_uint8_t+0x16>
 8016a1c:	2301      	movs	r3, #1
 8016a1e:	7da8      	ldrb	r0, [r5, #22]
 8016a20:	756b      	strb	r3, [r5, #21]
 8016a22:	4058      	eors	r0, r3
 8016a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a28:	463a      	mov	r2, r7
 8016a2a:	68a8      	ldr	r0, [r5, #8]
 8016a2c:	4641      	mov	r1, r8
 8016a2e:	f001 fdc4 	bl	80185ba <memcpy>
 8016a32:	68aa      	ldr	r2, [r5, #8]
 8016a34:	692b      	ldr	r3, [r5, #16]
 8016a36:	443a      	add	r2, r7
 8016a38:	443b      	add	r3, r7
 8016a3a:	60aa      	str	r2, [r5, #8]
 8016a3c:	612b      	str	r3, [r5, #16]
 8016a3e:	e7ed      	b.n	8016a1c <ucdr_serialize_endian_array_uint8_t+0x40>

08016a40 <ucdr_deserialize_array_uint8_t>:
 8016a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a44:	4688      	mov	r8, r1
 8016a46:	4611      	mov	r1, r2
 8016a48:	4617      	mov	r7, r2
 8016a4a:	4605      	mov	r5, r0
 8016a4c:	f7f8 ffca 	bl	800f9e4 <ucdr_check_buffer_available_for>
 8016a50:	b9e0      	cbnz	r0, 8016a8c <ucdr_deserialize_array_uint8_t+0x4c>
 8016a52:	463e      	mov	r6, r7
 8016a54:	e009      	b.n	8016a6a <ucdr_deserialize_array_uint8_t+0x2a>
 8016a56:	68a9      	ldr	r1, [r5, #8]
 8016a58:	f001 fdaf 	bl	80185ba <memcpy>
 8016a5c:	68aa      	ldr	r2, [r5, #8]
 8016a5e:	692b      	ldr	r3, [r5, #16]
 8016a60:	4422      	add	r2, r4
 8016a62:	4423      	add	r3, r4
 8016a64:	1b36      	subs	r6, r6, r4
 8016a66:	60aa      	str	r2, [r5, #8]
 8016a68:	612b      	str	r3, [r5, #16]
 8016a6a:	2201      	movs	r2, #1
 8016a6c:	4631      	mov	r1, r6
 8016a6e:	4628      	mov	r0, r5
 8016a70:	f7f9 f840 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 8016a74:	4604      	mov	r4, r0
 8016a76:	1bb8      	subs	r0, r7, r6
 8016a78:	4440      	add	r0, r8
 8016a7a:	4622      	mov	r2, r4
 8016a7c:	2c00      	cmp	r4, #0
 8016a7e:	d1ea      	bne.n	8016a56 <ucdr_deserialize_array_uint8_t+0x16>
 8016a80:	2301      	movs	r3, #1
 8016a82:	7da8      	ldrb	r0, [r5, #22]
 8016a84:	756b      	strb	r3, [r5, #21]
 8016a86:	4058      	eors	r0, r3
 8016a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a8c:	463a      	mov	r2, r7
 8016a8e:	68a9      	ldr	r1, [r5, #8]
 8016a90:	4640      	mov	r0, r8
 8016a92:	f001 fd92 	bl	80185ba <memcpy>
 8016a96:	68aa      	ldr	r2, [r5, #8]
 8016a98:	692b      	ldr	r3, [r5, #16]
 8016a9a:	443a      	add	r2, r7
 8016a9c:	443b      	add	r3, r7
 8016a9e:	60aa      	str	r2, [r5, #8]
 8016aa0:	612b      	str	r3, [r5, #16]
 8016aa2:	e7ed      	b.n	8016a80 <ucdr_deserialize_array_uint8_t+0x40>

08016aa4 <ucdr_deserialize_endian_array_uint8_t>:
 8016aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aa8:	4619      	mov	r1, r3
 8016aaa:	461f      	mov	r7, r3
 8016aac:	4605      	mov	r5, r0
 8016aae:	4690      	mov	r8, r2
 8016ab0:	f7f8 ff98 	bl	800f9e4 <ucdr_check_buffer_available_for>
 8016ab4:	b9e0      	cbnz	r0, 8016af0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8016ab6:	463e      	mov	r6, r7
 8016ab8:	e009      	b.n	8016ace <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8016aba:	68a9      	ldr	r1, [r5, #8]
 8016abc:	f001 fd7d 	bl	80185ba <memcpy>
 8016ac0:	68ab      	ldr	r3, [r5, #8]
 8016ac2:	6928      	ldr	r0, [r5, #16]
 8016ac4:	4423      	add	r3, r4
 8016ac6:	4420      	add	r0, r4
 8016ac8:	1b36      	subs	r6, r6, r4
 8016aca:	60ab      	str	r3, [r5, #8]
 8016acc:	6128      	str	r0, [r5, #16]
 8016ace:	2201      	movs	r2, #1
 8016ad0:	4631      	mov	r1, r6
 8016ad2:	4628      	mov	r0, r5
 8016ad4:	f7f9 f80e 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 8016ad8:	4604      	mov	r4, r0
 8016ada:	1bb8      	subs	r0, r7, r6
 8016adc:	4440      	add	r0, r8
 8016ade:	4622      	mov	r2, r4
 8016ae0:	2c00      	cmp	r4, #0
 8016ae2:	d1ea      	bne.n	8016aba <ucdr_deserialize_endian_array_uint8_t+0x16>
 8016ae4:	2301      	movs	r3, #1
 8016ae6:	7da8      	ldrb	r0, [r5, #22]
 8016ae8:	756b      	strb	r3, [r5, #21]
 8016aea:	4058      	eors	r0, r3
 8016aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016af0:	463a      	mov	r2, r7
 8016af2:	68a9      	ldr	r1, [r5, #8]
 8016af4:	4640      	mov	r0, r8
 8016af6:	f001 fd60 	bl	80185ba <memcpy>
 8016afa:	68aa      	ldr	r2, [r5, #8]
 8016afc:	692b      	ldr	r3, [r5, #16]
 8016afe:	443a      	add	r2, r7
 8016b00:	443b      	add	r3, r7
 8016b02:	60aa      	str	r2, [r5, #8]
 8016b04:	612b      	str	r3, [r5, #16]
 8016b06:	e7ed      	b.n	8016ae4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08016b08 <ucdr_serialize_sequence_char>:
 8016b08:	b570      	push	{r4, r5, r6, lr}
 8016b0a:	4615      	mov	r5, r2
 8016b0c:	460e      	mov	r6, r1
 8016b0e:	7d01      	ldrb	r1, [r0, #20]
 8016b10:	4604      	mov	r4, r0
 8016b12:	f7f8 fabd 	bl	800f090 <ucdr_serialize_endian_uint32_t>
 8016b16:	b90d      	cbnz	r5, 8016b1c <ucdr_serialize_sequence_char+0x14>
 8016b18:	2001      	movs	r0, #1
 8016b1a:	bd70      	pop	{r4, r5, r6, pc}
 8016b1c:	7d21      	ldrb	r1, [r4, #20]
 8016b1e:	462b      	mov	r3, r5
 8016b20:	4632      	mov	r2, r6
 8016b22:	4620      	mov	r0, r4
 8016b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b28:	f7ff bec2 	b.w	80168b0 <ucdr_serialize_endian_array_char>

08016b2c <ucdr_deserialize_sequence_char>:
 8016b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b30:	461d      	mov	r5, r3
 8016b32:	4616      	mov	r6, r2
 8016b34:	460f      	mov	r7, r1
 8016b36:	461a      	mov	r2, r3
 8016b38:	7d01      	ldrb	r1, [r0, #20]
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	f7f8 fbd0 	bl	800f2e0 <ucdr_deserialize_endian_uint32_t>
 8016b40:	682b      	ldr	r3, [r5, #0]
 8016b42:	429e      	cmp	r6, r3
 8016b44:	bf3c      	itt	cc
 8016b46:	2201      	movcc	r2, #1
 8016b48:	75a2      	strbcc	r2, [r4, #22]
 8016b4a:	b913      	cbnz	r3, 8016b52 <ucdr_deserialize_sequence_char+0x26>
 8016b4c:	2001      	movs	r0, #1
 8016b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b52:	7d21      	ldrb	r1, [r4, #20]
 8016b54:	463a      	mov	r2, r7
 8016b56:	4620      	mov	r0, r4
 8016b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b5c:	f7ff beda 	b.w	8016914 <ucdr_deserialize_endian_array_char>

08016b60 <ucdr_serialize_sequence_uint8_t>:
 8016b60:	b570      	push	{r4, r5, r6, lr}
 8016b62:	4615      	mov	r5, r2
 8016b64:	460e      	mov	r6, r1
 8016b66:	7d01      	ldrb	r1, [r0, #20]
 8016b68:	4604      	mov	r4, r0
 8016b6a:	f7f8 fa91 	bl	800f090 <ucdr_serialize_endian_uint32_t>
 8016b6e:	b90d      	cbnz	r5, 8016b74 <ucdr_serialize_sequence_uint8_t+0x14>
 8016b70:	2001      	movs	r0, #1
 8016b72:	bd70      	pop	{r4, r5, r6, pc}
 8016b74:	7d21      	ldrb	r1, [r4, #20]
 8016b76:	462b      	mov	r3, r5
 8016b78:	4632      	mov	r2, r6
 8016b7a:	4620      	mov	r0, r4
 8016b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b80:	f7ff bf2c 	b.w	80169dc <ucdr_serialize_endian_array_uint8_t>

08016b84 <ucdr_deserialize_sequence_uint8_t>:
 8016b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b88:	461d      	mov	r5, r3
 8016b8a:	4616      	mov	r6, r2
 8016b8c:	460f      	mov	r7, r1
 8016b8e:	461a      	mov	r2, r3
 8016b90:	7d01      	ldrb	r1, [r0, #20]
 8016b92:	4604      	mov	r4, r0
 8016b94:	f7f8 fba4 	bl	800f2e0 <ucdr_deserialize_endian_uint32_t>
 8016b98:	682b      	ldr	r3, [r5, #0]
 8016b9a:	429e      	cmp	r6, r3
 8016b9c:	bf3c      	itt	cc
 8016b9e:	2201      	movcc	r2, #1
 8016ba0:	75a2      	strbcc	r2, [r4, #22]
 8016ba2:	b913      	cbnz	r3, 8016baa <ucdr_deserialize_sequence_uint8_t+0x26>
 8016ba4:	2001      	movs	r0, #1
 8016ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016baa:	7d21      	ldrb	r1, [r4, #20]
 8016bac:	463a      	mov	r2, r7
 8016bae:	4620      	mov	r0, r4
 8016bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016bb4:	f7ff bf76 	b.w	8016aa4 <ucdr_deserialize_endian_array_uint8_t>

08016bb8 <ucdr_serialize_string>:
 8016bb8:	b510      	push	{r4, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	4604      	mov	r4, r0
 8016bbe:	4608      	mov	r0, r1
 8016bc0:	9101      	str	r1, [sp, #4]
 8016bc2:	f7e9 fb2f 	bl	8000224 <strlen>
 8016bc6:	9901      	ldr	r1, [sp, #4]
 8016bc8:	1c42      	adds	r2, r0, #1
 8016bca:	4620      	mov	r0, r4
 8016bcc:	b002      	add	sp, #8
 8016bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bd2:	f7ff bf99 	b.w	8016b08 <ucdr_serialize_sequence_char>
 8016bd6:	bf00      	nop

08016bd8 <ucdr_deserialize_string>:
 8016bd8:	b500      	push	{lr}
 8016bda:	b083      	sub	sp, #12
 8016bdc:	ab01      	add	r3, sp, #4
 8016bde:	f7ff ffa5 	bl	8016b2c <ucdr_deserialize_sequence_char>
 8016be2:	b003      	add	sp, #12
 8016be4:	f85d fb04 	ldr.w	pc, [sp], #4

08016be8 <uxr_init_input_best_effort_stream>:
 8016be8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016bec:	8003      	strh	r3, [r0, #0]
 8016bee:	4770      	bx	lr

08016bf0 <uxr_reset_input_best_effort_stream>:
 8016bf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016bf4:	8003      	strh	r3, [r0, #0]
 8016bf6:	4770      	bx	lr

08016bf8 <uxr_receive_best_effort_message>:
 8016bf8:	b538      	push	{r3, r4, r5, lr}
 8016bfa:	4604      	mov	r4, r0
 8016bfc:	8800      	ldrh	r0, [r0, #0]
 8016bfe:	460d      	mov	r5, r1
 8016c00:	f000 fd42 	bl	8017688 <uxr_seq_num_cmp>
 8016c04:	4603      	mov	r3, r0
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016c0c:	bfb8      	it	lt
 8016c0e:	8025      	strhlt	r5, [r4, #0]
 8016c10:	bd38      	pop	{r3, r4, r5, pc}
 8016c12:	bf00      	nop

08016c14 <on_full_input_buffer>:
 8016c14:	b570      	push	{r4, r5, r6, lr}
 8016c16:	4605      	mov	r5, r0
 8016c18:	460c      	mov	r4, r1
 8016c1a:	682b      	ldr	r3, [r5, #0]
 8016c1c:	6809      	ldr	r1, [r1, #0]
 8016c1e:	8920      	ldrh	r0, [r4, #8]
 8016c20:	6862      	ldr	r2, [r4, #4]
 8016c22:	fbb2 f2f0 	udiv	r2, r2, r0
 8016c26:	eba3 0c01 	sub.w	ip, r3, r1
 8016c2a:	fbbc fcf2 	udiv	ip, ip, r2
 8016c2e:	f10c 0c01 	add.w	ip, ip, #1
 8016c32:	fa1f f38c 	uxth.w	r3, ip
 8016c36:	fbb3 f6f0 	udiv	r6, r3, r0
 8016c3a:	fb00 3316 	mls	r3, r0, r6, r3
 8016c3e:	b29b      	uxth	r3, r3
 8016c40:	fb02 f303 	mul.w	r3, r2, r3
 8016c44:	1d18      	adds	r0, r3, #4
 8016c46:	4408      	add	r0, r1
 8016c48:	7d26      	ldrb	r6, [r4, #20]
 8016c4a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016c4e:	b116      	cbz	r6, 8016c56 <on_full_input_buffer+0x42>
 8016c50:	2600      	movs	r6, #0
 8016c52:	f840 6c04 	str.w	r6, [r0, #-4]
 8016c56:	2a03      	cmp	r2, #3
 8016c58:	d801      	bhi.n	8016c5e <on_full_input_buffer+0x4a>
 8016c5a:	2001      	movs	r0, #1
 8016c5c:	bd70      	pop	{r4, r5, r6, pc}
 8016c5e:	3308      	adds	r3, #8
 8016c60:	4419      	add	r1, r3
 8016c62:	4628      	mov	r0, r5
 8016c64:	692b      	ldr	r3, [r5, #16]
 8016c66:	3a04      	subs	r2, #4
 8016c68:	f7f8 ff08 	bl	800fa7c <ucdr_init_buffer_origin>
 8016c6c:	4628      	mov	r0, r5
 8016c6e:	4903      	ldr	r1, [pc, #12]	@ (8016c7c <on_full_input_buffer+0x68>)
 8016c70:	4622      	mov	r2, r4
 8016c72:	f7f8 fedf 	bl	800fa34 <ucdr_set_on_full_buffer_callback>
 8016c76:	2000      	movs	r0, #0
 8016c78:	bd70      	pop	{r4, r5, r6, pc}
 8016c7a:	bf00      	nop
 8016c7c:	08016c15 	.word	0x08016c15

08016c80 <uxr_init_input_reliable_stream>:
 8016c80:	b500      	push	{lr}
 8016c82:	e9c0 1200 	strd	r1, r2, [r0]
 8016c86:	f04f 0e00 	mov.w	lr, #0
 8016c8a:	9a01      	ldr	r2, [sp, #4]
 8016c8c:	8103      	strh	r3, [r0, #8]
 8016c8e:	6102      	str	r2, [r0, #16]
 8016c90:	f880 e014 	strb.w	lr, [r0, #20]
 8016c94:	b1d3      	cbz	r3, 8016ccc <uxr_init_input_reliable_stream+0x4c>
 8016c96:	f8c1 e000 	str.w	lr, [r1]
 8016c9a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016c9e:	f1bc 0f01 	cmp.w	ip, #1
 8016ca2:	d913      	bls.n	8016ccc <uxr_init_input_reliable_stream+0x4c>
 8016ca4:	2301      	movs	r3, #1
 8016ca6:	fbb3 f1fc 	udiv	r1, r3, ip
 8016caa:	fb0c 3111 	mls	r1, ip, r1, r3
 8016cae:	b289      	uxth	r1, r1
 8016cb0:	6842      	ldr	r2, [r0, #4]
 8016cb2:	fbb2 f2fc 	udiv	r2, r2, ip
 8016cb6:	fb01 f202 	mul.w	r2, r1, r2
 8016cba:	6801      	ldr	r1, [r0, #0]
 8016cbc:	f841 e002 	str.w	lr, [r1, r2]
 8016cc0:	3301      	adds	r3, #1
 8016cc2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016cc6:	b29b      	uxth	r3, r3
 8016cc8:	459c      	cmp	ip, r3
 8016cca:	d8ec      	bhi.n	8016ca6 <uxr_init_input_reliable_stream+0x26>
 8016ccc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016cd0:	60c3      	str	r3, [r0, #12]
 8016cd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8016cd6:	bf00      	nop

08016cd8 <uxr_reset_input_reliable_stream>:
 8016cd8:	8901      	ldrh	r1, [r0, #8]
 8016cda:	b1e9      	cbz	r1, 8016d18 <uxr_reset_input_reliable_stream+0x40>
 8016cdc:	f04f 0c00 	mov.w	ip, #0
 8016ce0:	b500      	push	{lr}
 8016ce2:	4663      	mov	r3, ip
 8016ce4:	46e6      	mov	lr, ip
 8016ce6:	fbb3 f2f1 	udiv	r2, r3, r1
 8016cea:	fb01 3312 	mls	r3, r1, r2, r3
 8016cee:	b29b      	uxth	r3, r3
 8016cf0:	6842      	ldr	r2, [r0, #4]
 8016cf2:	fbb2 f2f1 	udiv	r2, r2, r1
 8016cf6:	fb02 f303 	mul.w	r3, r2, r3
 8016cfa:	6802      	ldr	r2, [r0, #0]
 8016cfc:	f842 e003 	str.w	lr, [r2, r3]
 8016d00:	f10c 0c01 	add.w	ip, ip, #1
 8016d04:	8901      	ldrh	r1, [r0, #8]
 8016d06:	fa1f f38c 	uxth.w	r3, ip
 8016d0a:	4299      	cmp	r1, r3
 8016d0c:	d8eb      	bhi.n	8016ce6 <uxr_reset_input_reliable_stream+0xe>
 8016d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016d12:	60c3      	str	r3, [r0, #12]
 8016d14:	f85d fb04 	ldr.w	pc, [sp], #4
 8016d18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016d1c:	60c3      	str	r3, [r0, #12]
 8016d1e:	4770      	bx	lr

08016d20 <uxr_receive_reliable_message>:
 8016d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d24:	4604      	mov	r4, r0
 8016d26:	460d      	mov	r5, r1
 8016d28:	8901      	ldrh	r1, [r0, #8]
 8016d2a:	8980      	ldrh	r0, [r0, #12]
 8016d2c:	4690      	mov	r8, r2
 8016d2e:	461f      	mov	r7, r3
 8016d30:	f000 fca2 	bl	8017678 <uxr_seq_num_add>
 8016d34:	4629      	mov	r1, r5
 8016d36:	4606      	mov	r6, r0
 8016d38:	89a0      	ldrh	r0, [r4, #12]
 8016d3a:	f000 fca5 	bl	8017688 <uxr_seq_num_cmp>
 8016d3e:	2800      	cmp	r0, #0
 8016d40:	db0a      	blt.n	8016d58 <uxr_receive_reliable_message+0x38>
 8016d42:	2600      	movs	r6, #0
 8016d44:	89e0      	ldrh	r0, [r4, #14]
 8016d46:	4629      	mov	r1, r5
 8016d48:	f000 fc9e 	bl	8017688 <uxr_seq_num_cmp>
 8016d4c:	2800      	cmp	r0, #0
 8016d4e:	da00      	bge.n	8016d52 <uxr_receive_reliable_message+0x32>
 8016d50:	81e5      	strh	r5, [r4, #14]
 8016d52:	4630      	mov	r0, r6
 8016d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d58:	4630      	mov	r0, r6
 8016d5a:	4629      	mov	r1, r5
 8016d5c:	f000 fc94 	bl	8017688 <uxr_seq_num_cmp>
 8016d60:	2800      	cmp	r0, #0
 8016d62:	dbee      	blt.n	8016d42 <uxr_receive_reliable_message+0x22>
 8016d64:	6923      	ldr	r3, [r4, #16]
 8016d66:	4640      	mov	r0, r8
 8016d68:	4798      	blx	r3
 8016d6a:	2101      	movs	r1, #1
 8016d6c:	4681      	mov	r9, r0
 8016d6e:	89a0      	ldrh	r0, [r4, #12]
 8016d70:	f000 fc82 	bl	8017678 <uxr_seq_num_add>
 8016d74:	f1b9 0f00 	cmp.w	r9, #0
 8016d78:	d101      	bne.n	8016d7e <uxr_receive_reliable_message+0x5e>
 8016d7a:	4285      	cmp	r5, r0
 8016d7c:	d047      	beq.n	8016e0e <uxr_receive_reliable_message+0xee>
 8016d7e:	8922      	ldrh	r2, [r4, #8]
 8016d80:	fbb5 f0f2 	udiv	r0, r5, r2
 8016d84:	fb02 5010 	mls	r0, r2, r0, r5
 8016d88:	b280      	uxth	r0, r0
 8016d8a:	6863      	ldr	r3, [r4, #4]
 8016d8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d90:	fb00 f303 	mul.w	r3, r0, r3
 8016d94:	6820      	ldr	r0, [r4, #0]
 8016d96:	3304      	adds	r3, #4
 8016d98:	4418      	add	r0, r3
 8016d9a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d1cf      	bne.n	8016d42 <uxr_receive_reliable_message+0x22>
 8016da2:	4641      	mov	r1, r8
 8016da4:	463a      	mov	r2, r7
 8016da6:	f001 fc08 	bl	80185ba <memcpy>
 8016daa:	8921      	ldrh	r1, [r4, #8]
 8016dac:	fbb5 f2f1 	udiv	r2, r5, r1
 8016db0:	fb01 5212 	mls	r2, r1, r2, r5
 8016db4:	b292      	uxth	r2, r2
 8016db6:	6863      	ldr	r3, [r4, #4]
 8016db8:	fbb3 f3f1 	udiv	r3, r3, r1
 8016dbc:	fb02 f303 	mul.w	r3, r2, r3
 8016dc0:	6822      	ldr	r2, [r4, #0]
 8016dc2:	50d7      	str	r7, [r2, r3]
 8016dc4:	9a08      	ldr	r2, [sp, #32]
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	7013      	strb	r3, [r2, #0]
 8016dca:	f1b9 0f00 	cmp.w	r9, #0
 8016dce:	d0b8      	beq.n	8016d42 <uxr_receive_reliable_message+0x22>
 8016dd0:	89a6      	ldrh	r6, [r4, #12]
 8016dd2:	4630      	mov	r0, r6
 8016dd4:	2101      	movs	r1, #1
 8016dd6:	f000 fc4f 	bl	8017678 <uxr_seq_num_add>
 8016dda:	8922      	ldrh	r2, [r4, #8]
 8016ddc:	6863      	ldr	r3, [r4, #4]
 8016dde:	fbb3 f3f2 	udiv	r3, r3, r2
 8016de2:	4606      	mov	r6, r0
 8016de4:	fbb0 f0f2 	udiv	r0, r0, r2
 8016de8:	fb02 6010 	mls	r0, r2, r0, r6
 8016dec:	b280      	uxth	r0, r0
 8016dee:	fb00 f303 	mul.w	r3, r0, r3
 8016df2:	6820      	ldr	r0, [r4, #0]
 8016df4:	3304      	adds	r3, #4
 8016df6:	4418      	add	r0, r3
 8016df8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d0a0      	beq.n	8016d42 <uxr_receive_reliable_message+0x22>
 8016e00:	6923      	ldr	r3, [r4, #16]
 8016e02:	4798      	blx	r3
 8016e04:	2802      	cmp	r0, #2
 8016e06:	d008      	beq.n	8016e1a <uxr_receive_reliable_message+0xfa>
 8016e08:	2801      	cmp	r0, #1
 8016e0a:	d0e2      	beq.n	8016dd2 <uxr_receive_reliable_message+0xb2>
 8016e0c:	e799      	b.n	8016d42 <uxr_receive_reliable_message+0x22>
 8016e0e:	9b08      	ldr	r3, [sp, #32]
 8016e10:	81a5      	strh	r5, [r4, #12]
 8016e12:	2601      	movs	r6, #1
 8016e14:	f883 9000 	strb.w	r9, [r3]
 8016e18:	e794      	b.n	8016d44 <uxr_receive_reliable_message+0x24>
 8016e1a:	2601      	movs	r6, #1
 8016e1c:	e792      	b.n	8016d44 <uxr_receive_reliable_message+0x24>
 8016e1e:	bf00      	nop

08016e20 <uxr_next_input_reliable_buffer_available>:
 8016e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e24:	4604      	mov	r4, r0
 8016e26:	460f      	mov	r7, r1
 8016e28:	8980      	ldrh	r0, [r0, #12]
 8016e2a:	2101      	movs	r1, #1
 8016e2c:	4690      	mov	r8, r2
 8016e2e:	f000 fc23 	bl	8017678 <uxr_seq_num_add>
 8016e32:	8922      	ldrh	r2, [r4, #8]
 8016e34:	fbb0 f6f2 	udiv	r6, r0, r2
 8016e38:	fb02 0616 	mls	r6, r2, r6, r0
 8016e3c:	b2b6      	uxth	r6, r6
 8016e3e:	6863      	ldr	r3, [r4, #4]
 8016e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8016e44:	fb06 f303 	mul.w	r3, r6, r3
 8016e48:	6826      	ldr	r6, [r4, #0]
 8016e4a:	3304      	adds	r3, #4
 8016e4c:	441e      	add	r6, r3
 8016e4e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8016e52:	f1b9 0f00 	cmp.w	r9, #0
 8016e56:	d023      	beq.n	8016ea0 <uxr_next_input_reliable_buffer_available+0x80>
 8016e58:	6923      	ldr	r3, [r4, #16]
 8016e5a:	4605      	mov	r5, r0
 8016e5c:	4630      	mov	r0, r6
 8016e5e:	4798      	blx	r3
 8016e60:	4682      	mov	sl, r0
 8016e62:	b300      	cbz	r0, 8016ea6 <uxr_next_input_reliable_buffer_available+0x86>
 8016e64:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016e68:	2101      	movs	r1, #1
 8016e6a:	4650      	mov	r0, sl
 8016e6c:	f000 fc04 	bl	8017678 <uxr_seq_num_add>
 8016e70:	8921      	ldrh	r1, [r4, #8]
 8016e72:	fbb0 f2f1 	udiv	r2, r0, r1
 8016e76:	4682      	mov	sl, r0
 8016e78:	fb01 0212 	mls	r2, r1, r2, r0
 8016e7c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016e80:	b292      	uxth	r2, r2
 8016e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8016e86:	fb02 f303 	mul.w	r3, r2, r3
 8016e8a:	3304      	adds	r3, #4
 8016e8c:	4418      	add	r0, r3
 8016e8e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016e92:	b12b      	cbz	r3, 8016ea0 <uxr_next_input_reliable_buffer_available+0x80>
 8016e94:	6923      	ldr	r3, [r4, #16]
 8016e96:	4798      	blx	r3
 8016e98:	2802      	cmp	r0, #2
 8016e9a:	d01b      	beq.n	8016ed4 <uxr_next_input_reliable_buffer_available+0xb4>
 8016e9c:	2801      	cmp	r0, #1
 8016e9e:	d0e3      	beq.n	8016e68 <uxr_next_input_reliable_buffer_available+0x48>
 8016ea0:	2000      	movs	r0, #0
 8016ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ea6:	464a      	mov	r2, r9
 8016ea8:	4631      	mov	r1, r6
 8016eaa:	4638      	mov	r0, r7
 8016eac:	f7f8 fdee 	bl	800fa8c <ucdr_init_buffer>
 8016eb0:	8921      	ldrh	r1, [r4, #8]
 8016eb2:	fbb5 f2f1 	udiv	r2, r5, r1
 8016eb6:	fb01 5212 	mls	r2, r1, r2, r5
 8016eba:	b292      	uxth	r2, r2
 8016ebc:	6863      	ldr	r3, [r4, #4]
 8016ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8016ec2:	fb02 f303 	mul.w	r3, r2, r3
 8016ec6:	6822      	ldr	r2, [r4, #0]
 8016ec8:	f842 a003 	str.w	sl, [r2, r3]
 8016ecc:	2001      	movs	r0, #1
 8016ece:	81a5      	strh	r5, [r4, #12]
 8016ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ed4:	8920      	ldrh	r0, [r4, #8]
 8016ed6:	fbb5 f3f0 	udiv	r3, r5, r0
 8016eda:	fb00 5513 	mls	r5, r0, r3, r5
 8016ede:	b2ad      	uxth	r5, r5
 8016ee0:	6863      	ldr	r3, [r4, #4]
 8016ee2:	fbb3 f3f0 	udiv	r3, r3, r0
 8016ee6:	fb03 f505 	mul.w	r5, r3, r5
 8016eea:	6823      	ldr	r3, [r4, #0]
 8016eec:	2000      	movs	r0, #0
 8016eee:	5158      	str	r0, [r3, r5]
 8016ef0:	eb06 0108 	add.w	r1, r6, r8
 8016ef4:	eba9 0208 	sub.w	r2, r9, r8
 8016ef8:	4638      	mov	r0, r7
 8016efa:	f7f8 fdc7 	bl	800fa8c <ucdr_init_buffer>
 8016efe:	4638      	mov	r0, r7
 8016f00:	4903      	ldr	r1, [pc, #12]	@ (8016f10 <uxr_next_input_reliable_buffer_available+0xf0>)
 8016f02:	4622      	mov	r2, r4
 8016f04:	f7f8 fd96 	bl	800fa34 <ucdr_set_on_full_buffer_callback>
 8016f08:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016f0c:	2001      	movs	r0, #1
 8016f0e:	e7c8      	b.n	8016ea2 <uxr_next_input_reliable_buffer_available+0x82>
 8016f10:	08016c15 	.word	0x08016c15

08016f14 <uxr_process_heartbeat>:
 8016f14:	b538      	push	{r3, r4, r5, lr}
 8016f16:	4611      	mov	r1, r2
 8016f18:	4604      	mov	r4, r0
 8016f1a:	89c0      	ldrh	r0, [r0, #14]
 8016f1c:	4615      	mov	r5, r2
 8016f1e:	f000 fbb3 	bl	8017688 <uxr_seq_num_cmp>
 8016f22:	2800      	cmp	r0, #0
 8016f24:	bfb8      	it	lt
 8016f26:	81e5      	strhlt	r5, [r4, #14]
 8016f28:	bd38      	pop	{r3, r4, r5, pc}
 8016f2a:	bf00      	nop

08016f2c <uxr_compute_acknack>:
 8016f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f30:	8903      	ldrh	r3, [r0, #8]
 8016f32:	8985      	ldrh	r5, [r0, #12]
 8016f34:	4604      	mov	r4, r0
 8016f36:	460e      	mov	r6, r1
 8016f38:	b1d3      	cbz	r3, 8016f70 <uxr_compute_acknack+0x44>
 8016f3a:	4628      	mov	r0, r5
 8016f3c:	2701      	movs	r7, #1
 8016f3e:	e003      	b.n	8016f48 <uxr_compute_acknack+0x1c>
 8016f40:	4567      	cmp	r7, ip
 8016f42:	d215      	bcs.n	8016f70 <uxr_compute_acknack+0x44>
 8016f44:	89a0      	ldrh	r0, [r4, #12]
 8016f46:	3701      	adds	r7, #1
 8016f48:	b2b9      	uxth	r1, r7
 8016f4a:	f000 fb95 	bl	8017678 <uxr_seq_num_add>
 8016f4e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016f52:	fbb0 f3fc 	udiv	r3, r0, ip
 8016f56:	fb0c 0313 	mls	r3, ip, r3, r0
 8016f5a:	b29a      	uxth	r2, r3
 8016f5c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016f60:	fbb3 f3fc 	udiv	r3, r3, ip
 8016f64:	fb02 f303 	mul.w	r3, r2, r3
 8016f68:	58cb      	ldr	r3, [r1, r3]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d1e8      	bne.n	8016f40 <uxr_compute_acknack+0x14>
 8016f6e:	4605      	mov	r5, r0
 8016f70:	8035      	strh	r5, [r6, #0]
 8016f72:	2101      	movs	r1, #1
 8016f74:	4628      	mov	r0, r5
 8016f76:	89e7      	ldrh	r7, [r4, #14]
 8016f78:	f000 fb82 	bl	8017680 <uxr_seq_num_sub>
 8016f7c:	4601      	mov	r1, r0
 8016f7e:	4638      	mov	r0, r7
 8016f80:	f000 fb7e 	bl	8017680 <uxr_seq_num_sub>
 8016f84:	4605      	mov	r5, r0
 8016f86:	b318      	cbz	r0, 8016fd0 <uxr_compute_acknack+0xa4>
 8016f88:	f04f 0900 	mov.w	r9, #0
 8016f8c:	464f      	mov	r7, r9
 8016f8e:	f04f 0801 	mov.w	r8, #1
 8016f92:	fa1f f189 	uxth.w	r1, r9
 8016f96:	8830      	ldrh	r0, [r6, #0]
 8016f98:	f000 fb6e 	bl	8017678 <uxr_seq_num_add>
 8016f9c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016fa0:	fbb0 f3fc 	udiv	r3, r0, ip
 8016fa4:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016fa8:	fb03 001c 	mls	r0, r3, ip, r0
 8016fac:	b283      	uxth	r3, r0
 8016fae:	fbb2 f2fc 	udiv	r2, r2, ip
 8016fb2:	fb02 f303 	mul.w	r3, r2, r3
 8016fb6:	fa08 f209 	lsl.w	r2, r8, r9
 8016fba:	58cb      	ldr	r3, [r1, r3]
 8016fbc:	f109 0901 	add.w	r9, r9, #1
 8016fc0:	b90b      	cbnz	r3, 8016fc6 <uxr_compute_acknack+0x9a>
 8016fc2:	4317      	orrs	r7, r2
 8016fc4:	b2bf      	uxth	r7, r7
 8016fc6:	454d      	cmp	r5, r9
 8016fc8:	d1e3      	bne.n	8016f92 <uxr_compute_acknack+0x66>
 8016fca:	4638      	mov	r0, r7
 8016fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fd0:	4607      	mov	r7, r0
 8016fd2:	4638      	mov	r0, r7
 8016fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016fd8 <uxr_init_output_best_effort_stream>:
 8016fd8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8016fdc:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016fe0:	6001      	str	r1, [r0, #0]
 8016fe2:	7303      	strb	r3, [r0, #12]
 8016fe4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016fe8:	4770      	bx	lr
 8016fea:	bf00      	nop

08016fec <uxr_reset_output_best_effort_stream>:
 8016fec:	7b02      	ldrb	r2, [r0, #12]
 8016fee:	6042      	str	r2, [r0, #4]
 8016ff0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016ff4:	81c3      	strh	r3, [r0, #14]
 8016ff6:	4770      	bx	lr

08016ff8 <uxr_prepare_best_effort_buffer_to_write>:
 8016ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ffa:	4604      	mov	r4, r0
 8016ffc:	b083      	sub	sp, #12
 8016ffe:	6840      	ldr	r0, [r0, #4]
 8017000:	460d      	mov	r5, r1
 8017002:	4616      	mov	r6, r2
 8017004:	f7fb f9a0 	bl	8012348 <uxr_submessage_padding>
 8017008:	6863      	ldr	r3, [r4, #4]
 801700a:	4418      	add	r0, r3
 801700c:	68a3      	ldr	r3, [r4, #8]
 801700e:	1942      	adds	r2, r0, r5
 8017010:	4293      	cmp	r3, r2
 8017012:	bf2c      	ite	cs
 8017014:	2701      	movcs	r7, #1
 8017016:	2700      	movcc	r7, #0
 8017018:	d202      	bcs.n	8017020 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801701a:	4638      	mov	r0, r7
 801701c:	b003      	add	sp, #12
 801701e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017020:	9000      	str	r0, [sp, #0]
 8017022:	6821      	ldr	r1, [r4, #0]
 8017024:	4630      	mov	r0, r6
 8017026:	2300      	movs	r3, #0
 8017028:	f7f8 fd1e 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 801702c:	6861      	ldr	r1, [r4, #4]
 801702e:	4638      	mov	r0, r7
 8017030:	4429      	add	r1, r5
 8017032:	6061      	str	r1, [r4, #4]
 8017034:	b003      	add	sp, #12
 8017036:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017038 <uxr_prepare_best_effort_buffer_to_send>:
 8017038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801703c:	4604      	mov	r4, r0
 801703e:	461d      	mov	r5, r3
 8017040:	6840      	ldr	r0, [r0, #4]
 8017042:	7b23      	ldrb	r3, [r4, #12]
 8017044:	4298      	cmp	r0, r3
 8017046:	bf8c      	ite	hi
 8017048:	2601      	movhi	r6, #1
 801704a:	2600      	movls	r6, #0
 801704c:	d802      	bhi.n	8017054 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801704e:	4630      	mov	r0, r6
 8017050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017054:	4688      	mov	r8, r1
 8017056:	89e0      	ldrh	r0, [r4, #14]
 8017058:	2101      	movs	r1, #1
 801705a:	4617      	mov	r7, r2
 801705c:	f000 fb0c 	bl	8017678 <uxr_seq_num_add>
 8017060:	6823      	ldr	r3, [r4, #0]
 8017062:	81e0      	strh	r0, [r4, #14]
 8017064:	8028      	strh	r0, [r5, #0]
 8017066:	f8c8 3000 	str.w	r3, [r8]
 801706a:	6863      	ldr	r3, [r4, #4]
 801706c:	603b      	str	r3, [r7, #0]
 801706e:	7b23      	ldrb	r3, [r4, #12]
 8017070:	6063      	str	r3, [r4, #4]
 8017072:	4630      	mov	r0, r6
 8017074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017078 <on_full_output_buffer>:
 8017078:	b538      	push	{r3, r4, r5, lr}
 801707a:	6802      	ldr	r2, [r0, #0]
 801707c:	460c      	mov	r4, r1
 801707e:	6809      	ldr	r1, [r1, #0]
 8017080:	8923      	ldrh	r3, [r4, #8]
 8017082:	eba2 0c01 	sub.w	ip, r2, r1
 8017086:	6862      	ldr	r2, [r4, #4]
 8017088:	fbb2 f2f3 	udiv	r2, r2, r3
 801708c:	fbbc fcf2 	udiv	ip, ip, r2
 8017090:	f10c 0c01 	add.w	ip, ip, #1
 8017094:	fa1f fc8c 	uxth.w	ip, ip
 8017098:	fbbc fef3 	udiv	lr, ip, r3
 801709c:	fb03 c31e 	mls	r3, r3, lr, ip
 80170a0:	b29b      	uxth	r3, r3
 80170a2:	fb02 f303 	mul.w	r3, r2, r3
 80170a6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80170aa:	58ca      	ldr	r2, [r1, r3]
 80170ac:	4463      	add	r3, ip
 80170ae:	eba2 020c 	sub.w	r2, r2, ip
 80170b2:	3308      	adds	r3, #8
 80170b4:	4605      	mov	r5, r0
 80170b6:	4419      	add	r1, r3
 80170b8:	3a04      	subs	r2, #4
 80170ba:	6903      	ldr	r3, [r0, #16]
 80170bc:	f7f8 fcde 	bl	800fa7c <ucdr_init_buffer_origin>
 80170c0:	4628      	mov	r0, r5
 80170c2:	4903      	ldr	r1, [pc, #12]	@ (80170d0 <on_full_output_buffer+0x58>)
 80170c4:	4622      	mov	r2, r4
 80170c6:	f7f8 fcb5 	bl	800fa34 <ucdr_set_on_full_buffer_callback>
 80170ca:	2000      	movs	r0, #0
 80170cc:	bd38      	pop	{r3, r4, r5, pc}
 80170ce:	bf00      	nop
 80170d0:	08017079 	.word	0x08017079

080170d4 <uxr_init_output_reliable_stream>:
 80170d4:	b410      	push	{r4}
 80170d6:	f89d c004 	ldrb.w	ip, [sp, #4]
 80170da:	8103      	strh	r3, [r0, #8]
 80170dc:	e9c0 1200 	strd	r1, r2, [r0]
 80170e0:	f880 c00c 	strb.w	ip, [r0, #12]
 80170e4:	b1d3      	cbz	r3, 801711c <uxr_init_output_reliable_stream+0x48>
 80170e6:	f8c1 c000 	str.w	ip, [r1]
 80170ea:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80170ee:	f1bc 0f01 	cmp.w	ip, #1
 80170f2:	d913      	bls.n	801711c <uxr_init_output_reliable_stream+0x48>
 80170f4:	2301      	movs	r3, #1
 80170f6:	fbb3 f1fc 	udiv	r1, r3, ip
 80170fa:	fb0c 3111 	mls	r1, ip, r1, r3
 80170fe:	b289      	uxth	r1, r1
 8017100:	6842      	ldr	r2, [r0, #4]
 8017102:	6804      	ldr	r4, [r0, #0]
 8017104:	fbb2 f2fc 	udiv	r2, r2, ip
 8017108:	fb01 f202 	mul.w	r2, r1, r2
 801710c:	7b01      	ldrb	r1, [r0, #12]
 801710e:	50a1      	str	r1, [r4, r2]
 8017110:	3301      	adds	r3, #1
 8017112:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017116:	b29b      	uxth	r3, r3
 8017118:	459c      	cmp	ip, r3
 801711a:	d8ec      	bhi.n	80170f6 <uxr_init_output_reliable_stream+0x22>
 801711c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017120:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017124:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017128:	4905      	ldr	r1, [pc, #20]	@ (8017140 <uxr_init_output_reliable_stream+0x6c>)
 801712a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801712e:	f8c0 100e 	str.w	r1, [r0, #14]
 8017132:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017136:	2300      	movs	r3, #0
 8017138:	8242      	strh	r2, [r0, #18]
 801713a:	8403      	strh	r3, [r0, #32]
 801713c:	4770      	bx	lr
 801713e:	bf00      	nop
 8017140:	ffff0000 	.word	0xffff0000

08017144 <uxr_reset_output_reliable_stream>:
 8017144:	8901      	ldrh	r1, [r0, #8]
 8017146:	b1b1      	cbz	r1, 8017176 <uxr_reset_output_reliable_stream+0x32>
 8017148:	f04f 0c00 	mov.w	ip, #0
 801714c:	4663      	mov	r3, ip
 801714e:	fbb3 f2f1 	udiv	r2, r3, r1
 8017152:	fb01 3312 	mls	r3, r1, r2, r3
 8017156:	b29b      	uxth	r3, r3
 8017158:	6842      	ldr	r2, [r0, #4]
 801715a:	fbb2 f2f1 	udiv	r2, r2, r1
 801715e:	6801      	ldr	r1, [r0, #0]
 8017160:	fb02 f303 	mul.w	r3, r2, r3
 8017164:	7b02      	ldrb	r2, [r0, #12]
 8017166:	50ca      	str	r2, [r1, r3]
 8017168:	f10c 0c01 	add.w	ip, ip, #1
 801716c:	8901      	ldrh	r1, [r0, #8]
 801716e:	fa1f f38c 	uxth.w	r3, ip
 8017172:	4299      	cmp	r1, r3
 8017174:	d8eb      	bhi.n	801714e <uxr_reset_output_reliable_stream+0xa>
 8017176:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801717a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801717e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017182:	4904      	ldr	r1, [pc, #16]	@ (8017194 <uxr_reset_output_reliable_stream+0x50>)
 8017184:	f8c0 100e 	str.w	r1, [r0, #14]
 8017188:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801718c:	2300      	movs	r3, #0
 801718e:	8242      	strh	r2, [r0, #18]
 8017190:	8403      	strh	r3, [r0, #32]
 8017192:	4770      	bx	lr
 8017194:	ffff0000 	.word	0xffff0000

08017198 <uxr_prepare_reliable_buffer_to_write>:
 8017198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801719c:	4604      	mov	r4, r0
 801719e:	b091      	sub	sp, #68	@ 0x44
 80171a0:	8900      	ldrh	r0, [r0, #8]
 80171a2:	89e6      	ldrh	r6, [r4, #14]
 80171a4:	6823      	ldr	r3, [r4, #0]
 80171a6:	9204      	str	r2, [sp, #16]
 80171a8:	fbb6 f2f0 	udiv	r2, r6, r0
 80171ac:	fb00 6212 	mls	r2, r0, r2, r6
 80171b0:	b292      	uxth	r2, r2
 80171b2:	6865      	ldr	r5, [r4, #4]
 80171b4:	fbb5 f5f0 	udiv	r5, r5, r0
 80171b8:	fb05 3202 	mla	r2, r5, r2, r3
 80171bc:	3204      	adds	r2, #4
 80171be:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80171c2:	f894 900c 	ldrb.w	r9, [r4, #12]
 80171c6:	9203      	str	r2, [sp, #12]
 80171c8:	468b      	mov	fp, r1
 80171ca:	1f2f      	subs	r7, r5, #4
 80171cc:	2800      	cmp	r0, #0
 80171ce:	f000 814c 	beq.w	801746a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80171d2:	f04f 0c00 	mov.w	ip, #0
 80171d6:	46e2      	mov	sl, ip
 80171d8:	4661      	mov	r1, ip
 80171da:	fbb1 f2f0 	udiv	r2, r1, r0
 80171de:	fb00 1212 	mls	r2, r0, r2, r1
 80171e2:	b292      	uxth	r2, r2
 80171e4:	fb05 f202 	mul.w	r2, r5, r2
 80171e8:	f10c 0c01 	add.w	ip, ip, #1
 80171ec:	589a      	ldr	r2, [r3, r2]
 80171ee:	454a      	cmp	r2, r9
 80171f0:	bf08      	it	eq
 80171f2:	f10a 0a01 	addeq.w	sl, sl, #1
 80171f6:	fa1f f18c 	uxth.w	r1, ip
 80171fa:	bf08      	it	eq
 80171fc:	fa1f fa8a 	uxtheq.w	sl, sl
 8017200:	4281      	cmp	r1, r0
 8017202:	d3ea      	bcc.n	80171da <uxr_prepare_reliable_buffer_to_write+0x42>
 8017204:	4640      	mov	r0, r8
 8017206:	2104      	movs	r1, #4
 8017208:	f8cd a014 	str.w	sl, [sp, #20]
 801720c:	f7f8 fc42 	bl	800fa94 <ucdr_alignment>
 8017210:	4480      	add	r8, r0
 8017212:	eb08 020b 	add.w	r2, r8, fp
 8017216:	42ba      	cmp	r2, r7
 8017218:	f240 80cd 	bls.w	80173b6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801721c:	7b22      	ldrb	r2, [r4, #12]
 801721e:	445a      	add	r2, fp
 8017220:	42ba      	cmp	r2, r7
 8017222:	f240 80b5 	bls.w	8017390 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8017226:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801722a:	33fc      	adds	r3, #252	@ 0xfc
 801722c:	b2ba      	uxth	r2, r7
 801722e:	4413      	add	r3, r2
 8017230:	b29b      	uxth	r3, r3
 8017232:	fb0a f903 	mul.w	r9, sl, r3
 8017236:	45d9      	cmp	r9, fp
 8017238:	9305      	str	r3, [sp, #20]
 801723a:	9306      	str	r3, [sp, #24]
 801723c:	f0c0 80b7 	bcc.w	80173ae <uxr_prepare_reliable_buffer_to_write+0x216>
 8017240:	f108 0304 	add.w	r3, r8, #4
 8017244:	42bb      	cmp	r3, r7
 8017246:	f080 80db 	bcs.w	8017400 <uxr_prepare_reliable_buffer_to_write+0x268>
 801724a:	f1a2 0904 	sub.w	r9, r2, #4
 801724e:	eba9 0908 	sub.w	r9, r9, r8
 8017252:	9b05      	ldr	r3, [sp, #20]
 8017254:	fa1f f989 	uxth.w	r9, r9
 8017258:	ebab 0b09 	sub.w	fp, fp, r9
 801725c:	fbbb f2f3 	udiv	r2, fp, r3
 8017260:	fb03 b312 	mls	r3, r3, r2, fp
 8017264:	2b00      	cmp	r3, #0
 8017266:	f000 80c8 	beq.w	80173fa <uxr_prepare_reliable_buffer_to_write+0x262>
 801726a:	3201      	adds	r2, #1
 801726c:	b292      	uxth	r2, r2
 801726e:	9306      	str	r3, [sp, #24]
 8017270:	4552      	cmp	r2, sl
 8017272:	f200 809c 	bhi.w	80173ae <uxr_prepare_reliable_buffer_to_write+0x216>
 8017276:	f10d 0b20 	add.w	fp, sp, #32
 801727a:	2a00      	cmp	r2, #0
 801727c:	d042      	beq.n	8017304 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801727e:	f8cd 801c 	str.w	r8, [sp, #28]
 8017282:	f04f 0a00 	mov.w	sl, #0
 8017286:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801728a:	9505      	str	r5, [sp, #20]
 801728c:	f10d 0b20 	add.w	fp, sp, #32
 8017290:	4615      	mov	r5, r2
 8017292:	e000      	b.n	8017296 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8017294:	46c1      	mov	r9, r8
 8017296:	8920      	ldrh	r0, [r4, #8]
 8017298:	fbb6 f2f0 	udiv	r2, r6, r0
 801729c:	fb00 6112 	mls	r1, r0, r2, r6
 80172a0:	b28a      	uxth	r2, r1
 80172a2:	6863      	ldr	r3, [r4, #4]
 80172a4:	fbb3 f1f0 	udiv	r1, r3, r0
 80172a8:	6823      	ldr	r3, [r4, #0]
 80172aa:	fb02 f101 	mul.w	r1, r2, r1
 80172ae:	3104      	adds	r1, #4
 80172b0:	4419      	add	r1, r3
 80172b2:	4658      	mov	r0, fp
 80172b4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80172b8:	9200      	str	r2, [sp, #0]
 80172ba:	2300      	movs	r3, #0
 80172bc:	463a      	mov	r2, r7
 80172be:	f7f8 fbd3 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 80172c2:	464a      	mov	r2, r9
 80172c4:	2300      	movs	r3, #0
 80172c6:	210d      	movs	r1, #13
 80172c8:	4658      	mov	r0, fp
 80172ca:	f7fa fffd 	bl	80122c8 <uxr_buffer_submessage_header>
 80172ce:	8921      	ldrh	r1, [r4, #8]
 80172d0:	fbb6 f2f1 	udiv	r2, r6, r1
 80172d4:	fb01 6212 	mls	r2, r1, r2, r6
 80172d8:	b292      	uxth	r2, r2
 80172da:	6863      	ldr	r3, [r4, #4]
 80172dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80172e0:	fb02 f303 	mul.w	r3, r2, r3
 80172e4:	6822      	ldr	r2, [r4, #0]
 80172e6:	4630      	mov	r0, r6
 80172e8:	50d7      	str	r7, [r2, r3]
 80172ea:	2101      	movs	r1, #1
 80172ec:	f000 f9c4 	bl	8017678 <uxr_seq_num_add>
 80172f0:	f10a 0a01 	add.w	sl, sl, #1
 80172f4:	fa1f f38a 	uxth.w	r3, sl
 80172f8:	429d      	cmp	r5, r3
 80172fa:	4606      	mov	r6, r0
 80172fc:	d8ca      	bhi.n	8017294 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80172fe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017302:	9d05      	ldr	r5, [sp, #20]
 8017304:	8920      	ldrh	r0, [r4, #8]
 8017306:	fbb6 f3f0 	udiv	r3, r6, r0
 801730a:	fb00 6313 	mls	r3, r0, r3, r6
 801730e:	b299      	uxth	r1, r3
 8017310:	6863      	ldr	r3, [r4, #4]
 8017312:	fbb3 f3f0 	udiv	r3, r3, r0
 8017316:	fb01 f303 	mul.w	r3, r1, r3
 801731a:	6821      	ldr	r1, [r4, #0]
 801731c:	3304      	adds	r3, #4
 801731e:	4419      	add	r1, r3
 8017320:	463a      	mov	r2, r7
 8017322:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8017326:	9000      	str	r0, [sp, #0]
 8017328:	2300      	movs	r3, #0
 801732a:	4658      	mov	r0, fp
 801732c:	f7f8 fb9c 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 8017330:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017334:	4658      	mov	r0, fp
 8017336:	fa1f f289 	uxth.w	r2, r9
 801733a:	2302      	movs	r3, #2
 801733c:	210d      	movs	r1, #13
 801733e:	f7fa ffc3 	bl	80122c8 <uxr_buffer_submessage_header>
 8017342:	9b03      	ldr	r3, [sp, #12]
 8017344:	8927      	ldrh	r7, [r4, #8]
 8017346:	7b20      	ldrb	r0, [r4, #12]
 8017348:	f108 0104 	add.w	r1, r8, #4
 801734c:	440b      	add	r3, r1
 801734e:	4619      	mov	r1, r3
 8017350:	fbb6 f3f7 	udiv	r3, r6, r7
 8017354:	fb07 6313 	mls	r3, r7, r3, r6
 8017358:	f1a5 0208 	sub.w	r2, r5, #8
 801735c:	b29d      	uxth	r5, r3
 801735e:	3004      	adds	r0, #4
 8017360:	6863      	ldr	r3, [r4, #4]
 8017362:	fbb3 f3f7 	udiv	r3, r3, r7
 8017366:	fb05 f303 	mul.w	r3, r5, r3
 801736a:	6825      	ldr	r5, [r4, #0]
 801736c:	4448      	add	r0, r9
 801736e:	50e8      	str	r0, [r5, r3]
 8017370:	9d04      	ldr	r5, [sp, #16]
 8017372:	eba2 0208 	sub.w	r2, r2, r8
 8017376:	4628      	mov	r0, r5
 8017378:	f7f8 fb88 	bl	800fa8c <ucdr_init_buffer>
 801737c:	4628      	mov	r0, r5
 801737e:	493c      	ldr	r1, [pc, #240]	@ (8017470 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8017380:	4622      	mov	r2, r4
 8017382:	f7f8 fb57 	bl	800fa34 <ucdr_set_on_full_buffer_callback>
 8017386:	2001      	movs	r0, #1
 8017388:	81e6      	strh	r6, [r4, #14]
 801738a:	b011      	add	sp, #68	@ 0x44
 801738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017390:	2101      	movs	r1, #1
 8017392:	89e0      	ldrh	r0, [r4, #14]
 8017394:	f000 f970 	bl	8017678 <uxr_seq_num_add>
 8017398:	8921      	ldrh	r1, [r4, #8]
 801739a:	4605      	mov	r5, r0
 801739c:	8a60      	ldrh	r0, [r4, #18]
 801739e:	f000 f96b 	bl	8017678 <uxr_seq_num_add>
 80173a2:	4601      	mov	r1, r0
 80173a4:	4628      	mov	r0, r5
 80173a6:	f000 f96f 	bl	8017688 <uxr_seq_num_cmp>
 80173aa:	2800      	cmp	r0, #0
 80173ac:	dd42      	ble.n	8017434 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80173ae:	2000      	movs	r0, #0
 80173b0:	b011      	add	sp, #68	@ 0x44
 80173b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173b6:	8921      	ldrh	r1, [r4, #8]
 80173b8:	8a60      	ldrh	r0, [r4, #18]
 80173ba:	9205      	str	r2, [sp, #20]
 80173bc:	f000 f95c 	bl	8017678 <uxr_seq_num_add>
 80173c0:	4601      	mov	r1, r0
 80173c2:	4630      	mov	r0, r6
 80173c4:	f000 f960 	bl	8017688 <uxr_seq_num_cmp>
 80173c8:	2800      	cmp	r0, #0
 80173ca:	9a05      	ldr	r2, [sp, #20]
 80173cc:	dcef      	bgt.n	80173ae <uxr_prepare_reliable_buffer_to_write+0x216>
 80173ce:	8927      	ldrh	r7, [r4, #8]
 80173d0:	fbb6 f3f7 	udiv	r3, r6, r7
 80173d4:	fb07 6313 	mls	r3, r7, r3, r6
 80173d8:	b29d      	uxth	r5, r3
 80173da:	6863      	ldr	r3, [r4, #4]
 80173dc:	6824      	ldr	r4, [r4, #0]
 80173de:	fbb3 f3f7 	udiv	r3, r3, r7
 80173e2:	fb05 f303 	mul.w	r3, r5, r3
 80173e6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80173ea:	50e2      	str	r2, [r4, r3]
 80173ec:	2300      	movs	r3, #0
 80173ee:	f8cd 8000 	str.w	r8, [sp]
 80173f2:	f7f8 fb39 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 80173f6:	2001      	movs	r0, #1
 80173f8:	e7da      	b.n	80173b0 <uxr_prepare_reliable_buffer_to_write+0x218>
 80173fa:	b293      	uxth	r3, r2
 80173fc:	461a      	mov	r2, r3
 80173fe:	e737      	b.n	8017270 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8017400:	4630      	mov	r0, r6
 8017402:	2101      	movs	r1, #1
 8017404:	9207      	str	r2, [sp, #28]
 8017406:	f000 f937 	bl	8017678 <uxr_seq_num_add>
 801740a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801740e:	fbb0 f1fc 	udiv	r1, r0, ip
 8017412:	fb0c 0111 	mls	r1, ip, r1, r0
 8017416:	4606      	mov	r6, r0
 8017418:	b288      	uxth	r0, r1
 801741a:	6863      	ldr	r3, [r4, #4]
 801741c:	fbb3 f1fc 	udiv	r1, r3, ip
 8017420:	6823      	ldr	r3, [r4, #0]
 8017422:	9a07      	ldr	r2, [sp, #28]
 8017424:	fb00 f101 	mul.w	r1, r0, r1
 8017428:	3104      	adds	r1, #4
 801742a:	440b      	add	r3, r1
 801742c:	9303      	str	r3, [sp, #12]
 801742e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8017432:	e70a      	b.n	801724a <uxr_prepare_reliable_buffer_to_write+0xb2>
 8017434:	8921      	ldrh	r1, [r4, #8]
 8017436:	fbb5 f3f1 	udiv	r3, r5, r1
 801743a:	fb01 5313 	mls	r3, r1, r3, r5
 801743e:	b29a      	uxth	r2, r3
 8017440:	6863      	ldr	r3, [r4, #4]
 8017442:	fbb3 f3f1 	udiv	r3, r3, r1
 8017446:	6821      	ldr	r1, [r4, #0]
 8017448:	9804      	ldr	r0, [sp, #16]
 801744a:	fb02 f303 	mul.w	r3, r2, r3
 801744e:	3304      	adds	r3, #4
 8017450:	7b22      	ldrb	r2, [r4, #12]
 8017452:	4419      	add	r1, r3
 8017454:	445a      	add	r2, fp
 8017456:	f841 2c04 	str.w	r2, [r1, #-4]
 801745a:	7b23      	ldrb	r3, [r4, #12]
 801745c:	9300      	str	r3, [sp, #0]
 801745e:	2300      	movs	r3, #0
 8017460:	f7f8 fb02 	bl	800fa68 <ucdr_init_buffer_origin_offset>
 8017464:	81e5      	strh	r5, [r4, #14]
 8017466:	2001      	movs	r0, #1
 8017468:	e7a2      	b.n	80173b0 <uxr_prepare_reliable_buffer_to_write+0x218>
 801746a:	4682      	mov	sl, r0
 801746c:	e6ca      	b.n	8017204 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801746e:	bf00      	nop
 8017470:	08017079 	.word	0x08017079

08017474 <uxr_prepare_next_reliable_buffer_to_send>:
 8017474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017476:	4604      	mov	r4, r0
 8017478:	460f      	mov	r7, r1
 801747a:	8a00      	ldrh	r0, [r0, #16]
 801747c:	2101      	movs	r1, #1
 801747e:	4616      	mov	r6, r2
 8017480:	461d      	mov	r5, r3
 8017482:	f000 f8f9 	bl	8017678 <uxr_seq_num_add>
 8017486:	8028      	strh	r0, [r5, #0]
 8017488:	8922      	ldrh	r2, [r4, #8]
 801748a:	fbb0 f3f2 	udiv	r3, r0, r2
 801748e:	fb02 0c13 	mls	ip, r2, r3, r0
 8017492:	fa1f fc8c 	uxth.w	ip, ip
 8017496:	6863      	ldr	r3, [r4, #4]
 8017498:	fbb3 f3f2 	udiv	r3, r3, r2
 801749c:	fb0c fc03 	mul.w	ip, ip, r3
 80174a0:	6823      	ldr	r3, [r4, #0]
 80174a2:	89e1      	ldrh	r1, [r4, #14]
 80174a4:	f10c 0c04 	add.w	ip, ip, #4
 80174a8:	4463      	add	r3, ip
 80174aa:	603b      	str	r3, [r7, #0]
 80174ac:	6823      	ldr	r3, [r4, #0]
 80174ae:	449c      	add	ip, r3
 80174b0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80174b4:	6033      	str	r3, [r6, #0]
 80174b6:	f000 f8e7 	bl	8017688 <uxr_seq_num_cmp>
 80174ba:	2800      	cmp	r0, #0
 80174bc:	dd01      	ble.n	80174c2 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80174be:	2000      	movs	r0, #0
 80174c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174c2:	7b23      	ldrb	r3, [r4, #12]
 80174c4:	6832      	ldr	r2, [r6, #0]
 80174c6:	429a      	cmp	r2, r3
 80174c8:	d9f9      	bls.n	80174be <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80174ca:	8a61      	ldrh	r1, [r4, #18]
 80174cc:	8a20      	ldrh	r0, [r4, #16]
 80174ce:	f000 f8d7 	bl	8017680 <uxr_seq_num_sub>
 80174d2:	8923      	ldrh	r3, [r4, #8]
 80174d4:	4283      	cmp	r3, r0
 80174d6:	d0f2      	beq.n	80174be <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80174d8:	8828      	ldrh	r0, [r5, #0]
 80174da:	89e3      	ldrh	r3, [r4, #14]
 80174dc:	8220      	strh	r0, [r4, #16]
 80174de:	4298      	cmp	r0, r3
 80174e0:	d001      	beq.n	80174e6 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80174e2:	2001      	movs	r0, #1
 80174e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174e6:	2101      	movs	r1, #1
 80174e8:	f000 f8c6 	bl	8017678 <uxr_seq_num_add>
 80174ec:	81e0      	strh	r0, [r4, #14]
 80174ee:	2001      	movs	r0, #1
 80174f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174f2:	bf00      	nop

080174f4 <uxr_update_output_stream_heartbeat_timestamp>:
 80174f4:	b570      	push	{r4, r5, r6, lr}
 80174f6:	8a01      	ldrh	r1, [r0, #16]
 80174f8:	4604      	mov	r4, r0
 80174fa:	8a40      	ldrh	r0, [r0, #18]
 80174fc:	4615      	mov	r5, r2
 80174fe:	461e      	mov	r6, r3
 8017500:	f000 f8c2 	bl	8017688 <uxr_seq_num_cmp>
 8017504:	2800      	cmp	r0, #0
 8017506:	db07      	blt.n	8017518 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8017508:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801750c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017510:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8017514:	2000      	movs	r0, #0
 8017516:	bd70      	pop	{r4, r5, r6, pc}
 8017518:	f894 0020 	ldrb.w	r0, [r4, #32]
 801751c:	b940      	cbnz	r0, 8017530 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801751e:	2301      	movs	r3, #1
 8017520:	f884 3020 	strb.w	r3, [r4, #32]
 8017524:	3564      	adds	r5, #100	@ 0x64
 8017526:	f146 0600 	adc.w	r6, r6, #0
 801752a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801752e:	bd70      	pop	{r4, r5, r6, pc}
 8017530:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8017534:	4295      	cmp	r5, r2
 8017536:	eb76 0303 	sbcs.w	r3, r6, r3
 801753a:	bfa5      	ittet	ge
 801753c:	3001      	addge	r0, #1
 801753e:	f884 0020 	strbge.w	r0, [r4, #32]
 8017542:	2000      	movlt	r0, #0
 8017544:	2001      	movge	r0, #1
 8017546:	e7ed      	b.n	8017524 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08017548 <uxr_begin_output_nack_buffer_it>:
 8017548:	8a40      	ldrh	r0, [r0, #18]
 801754a:	4770      	bx	lr

0801754c <uxr_next_reliable_nack_buffer_to_send>:
 801754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017550:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8017554:	b082      	sub	sp, #8
 8017556:	f1b8 0f00 	cmp.w	r8, #0
 801755a:	d011      	beq.n	8017580 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801755c:	4604      	mov	r4, r0
 801755e:	8818      	ldrh	r0, [r3, #0]
 8017560:	460e      	mov	r6, r1
 8017562:	4617      	mov	r7, r2
 8017564:	461d      	mov	r5, r3
 8017566:	2101      	movs	r1, #1
 8017568:	f000 f886 	bl	8017678 <uxr_seq_num_add>
 801756c:	8028      	strh	r0, [r5, #0]
 801756e:	8a21      	ldrh	r1, [r4, #16]
 8017570:	f000 f88a 	bl	8017688 <uxr_seq_num_cmp>
 8017574:	2800      	cmp	r0, #0
 8017576:	dd07      	ble.n	8017588 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8017578:	f04f 0800 	mov.w	r8, #0
 801757c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8017580:	4640      	mov	r0, r8
 8017582:	b002      	add	sp, #8
 8017584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017588:	8921      	ldrh	r1, [r4, #8]
 801758a:	8828      	ldrh	r0, [r5, #0]
 801758c:	6823      	ldr	r3, [r4, #0]
 801758e:	fbb0 f2f1 	udiv	r2, r0, r1
 8017592:	fb01 0c12 	mls	ip, r1, r2, r0
 8017596:	fa1f f28c 	uxth.w	r2, ip
 801759a:	9301      	str	r3, [sp, #4]
 801759c:	6863      	ldr	r3, [r4, #4]
 801759e:	fbb3 fcf1 	udiv	ip, r3, r1
 80175a2:	9b01      	ldr	r3, [sp, #4]
 80175a4:	fb02 fc0c 	mul.w	ip, r2, ip
 80175a8:	f10c 0c04 	add.w	ip, ip, #4
 80175ac:	4463      	add	r3, ip
 80175ae:	6033      	str	r3, [r6, #0]
 80175b0:	6823      	ldr	r3, [r4, #0]
 80175b2:	4463      	add	r3, ip
 80175b4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80175b8:	603b      	str	r3, [r7, #0]
 80175ba:	7b22      	ldrb	r2, [r4, #12]
 80175bc:	429a      	cmp	r2, r3
 80175be:	d0d2      	beq.n	8017566 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80175c0:	4640      	mov	r0, r8
 80175c2:	b002      	add	sp, #8
 80175c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080175c8 <uxr_process_acknack>:
 80175c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ca:	4604      	mov	r4, r0
 80175cc:	460e      	mov	r6, r1
 80175ce:	4610      	mov	r0, r2
 80175d0:	2101      	movs	r1, #1
 80175d2:	f000 f855 	bl	8017680 <uxr_seq_num_sub>
 80175d6:	8a61      	ldrh	r1, [r4, #18]
 80175d8:	f000 f852 	bl	8017680 <uxr_seq_num_sub>
 80175dc:	b1c0      	cbz	r0, 8017610 <uxr_process_acknack+0x48>
 80175de:	4605      	mov	r5, r0
 80175e0:	2700      	movs	r7, #0
 80175e2:	2101      	movs	r1, #1
 80175e4:	8a60      	ldrh	r0, [r4, #18]
 80175e6:	f000 f847 	bl	8017678 <uxr_seq_num_add>
 80175ea:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80175ee:	fbb0 f1fc 	udiv	r1, r0, ip
 80175f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80175f6:	fb0c 0111 	mls	r1, ip, r1, r0
 80175fa:	b289      	uxth	r1, r1
 80175fc:	3701      	adds	r7, #1
 80175fe:	fbb3 f3fc 	udiv	r3, r3, ip
 8017602:	fb01 f303 	mul.w	r3, r1, r3
 8017606:	42bd      	cmp	r5, r7
 8017608:	7b21      	ldrb	r1, [r4, #12]
 801760a:	8260      	strh	r0, [r4, #18]
 801760c:	50d1      	str	r1, [r2, r3]
 801760e:	d1e8      	bne.n	80175e2 <uxr_process_acknack+0x1a>
 8017610:	3e00      	subs	r6, #0
 8017612:	f04f 0300 	mov.w	r3, #0
 8017616:	bf18      	it	ne
 8017618:	2601      	movne	r6, #1
 801761a:	f884 3020 	strb.w	r3, [r4, #32]
 801761e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8017622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017624 <uxr_is_output_up_to_date>:
 8017624:	8a01      	ldrh	r1, [r0, #16]
 8017626:	8a40      	ldrh	r0, [r0, #18]
 8017628:	b508      	push	{r3, lr}
 801762a:	f000 f82d 	bl	8017688 <uxr_seq_num_cmp>
 801762e:	fab0 f080 	clz	r0, r0
 8017632:	0940      	lsrs	r0, r0, #5
 8017634:	bd08      	pop	{r3, pc}
 8017636:	bf00      	nop

08017638 <get_available_free_slots>:
 8017638:	8902      	ldrh	r2, [r0, #8]
 801763a:	b1da      	cbz	r2, 8017674 <get_available_free_slots+0x3c>
 801763c:	b530      	push	{r4, r5, lr}
 801763e:	2100      	movs	r1, #0
 8017640:	6843      	ldr	r3, [r0, #4]
 8017642:	6805      	ldr	r5, [r0, #0]
 8017644:	7b04      	ldrb	r4, [r0, #12]
 8017646:	fbb3 fef2 	udiv	lr, r3, r2
 801764a:	4608      	mov	r0, r1
 801764c:	460b      	mov	r3, r1
 801764e:	fbb3 fcf2 	udiv	ip, r3, r2
 8017652:	fb02 331c 	mls	r3, r2, ip, r3
 8017656:	b29b      	uxth	r3, r3
 8017658:	fb0e f303 	mul.w	r3, lr, r3
 801765c:	3101      	adds	r1, #1
 801765e:	f855 c003 	ldr.w	ip, [r5, r3]
 8017662:	4564      	cmp	r4, ip
 8017664:	bf08      	it	eq
 8017666:	3001      	addeq	r0, #1
 8017668:	b28b      	uxth	r3, r1
 801766a:	bf08      	it	eq
 801766c:	b280      	uxtheq	r0, r0
 801766e:	4293      	cmp	r3, r2
 8017670:	d3ed      	bcc.n	801764e <get_available_free_slots+0x16>
 8017672:	bd30      	pop	{r4, r5, pc}
 8017674:	4610      	mov	r0, r2
 8017676:	4770      	bx	lr

08017678 <uxr_seq_num_add>:
 8017678:	4408      	add	r0, r1
 801767a:	b280      	uxth	r0, r0
 801767c:	4770      	bx	lr
 801767e:	bf00      	nop

08017680 <uxr_seq_num_sub>:
 8017680:	1a40      	subs	r0, r0, r1
 8017682:	b280      	uxth	r0, r0
 8017684:	4770      	bx	lr
 8017686:	bf00      	nop

08017688 <uxr_seq_num_cmp>:
 8017688:	4288      	cmp	r0, r1
 801768a:	d011      	beq.n	80176b0 <uxr_seq_num_cmp+0x28>
 801768c:	d309      	bcc.n	80176a2 <uxr_seq_num_cmp+0x1a>
 801768e:	4288      	cmp	r0, r1
 8017690:	d910      	bls.n	80176b4 <uxr_seq_num_cmp+0x2c>
 8017692:	1a40      	subs	r0, r0, r1
 8017694:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8017698:	bfd4      	ite	le
 801769a:	2001      	movle	r0, #1
 801769c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80176a0:	4770      	bx	lr
 80176a2:	1a0b      	subs	r3, r1, r0
 80176a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80176a8:	daf1      	bge.n	801768e <uxr_seq_num_cmp+0x6>
 80176aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80176ae:	4770      	bx	lr
 80176b0:	2000      	movs	r0, #0
 80176b2:	4770      	bx	lr
 80176b4:	2001      	movs	r0, #1
 80176b6:	4770      	bx	lr

080176b8 <rcl_get_default_domain_id>:
 80176b8:	b530      	push	{r4, r5, lr}
 80176ba:	b083      	sub	sp, #12
 80176bc:	2300      	movs	r3, #0
 80176be:	9300      	str	r3, [sp, #0]
 80176c0:	b1d0      	cbz	r0, 80176f8 <rcl_get_default_domain_id+0x40>
 80176c2:	4604      	mov	r4, r0
 80176c4:	4669      	mov	r1, sp
 80176c6:	4815      	ldr	r0, [pc, #84]	@ (801771c <rcl_get_default_domain_id+0x64>)
 80176c8:	f7f5 fb20 	bl	800cd0c <rcutils_get_env>
 80176cc:	4602      	mov	r2, r0
 80176ce:	b110      	cbz	r0, 80176d6 <rcl_get_default_domain_id+0x1e>
 80176d0:	2001      	movs	r0, #1
 80176d2:	b003      	add	sp, #12
 80176d4:	bd30      	pop	{r4, r5, pc}
 80176d6:	9b00      	ldr	r3, [sp, #0]
 80176d8:	b18b      	cbz	r3, 80176fe <rcl_get_default_domain_id+0x46>
 80176da:	7818      	ldrb	r0, [r3, #0]
 80176dc:	2800      	cmp	r0, #0
 80176de:	d0f8      	beq.n	80176d2 <rcl_get_default_domain_id+0x1a>
 80176e0:	a901      	add	r1, sp, #4
 80176e2:	4618      	mov	r0, r3
 80176e4:	9201      	str	r2, [sp, #4]
 80176e6:	f000 fc83 	bl	8017ff0 <strtoul>
 80176ea:	4605      	mov	r5, r0
 80176ec:	b150      	cbz	r0, 8017704 <rcl_get_default_domain_id+0x4c>
 80176ee:	1c43      	adds	r3, r0, #1
 80176f0:	d00d      	beq.n	801770e <rcl_get_default_domain_id+0x56>
 80176f2:	6025      	str	r5, [r4, #0]
 80176f4:	2000      	movs	r0, #0
 80176f6:	e7ec      	b.n	80176d2 <rcl_get_default_domain_id+0x1a>
 80176f8:	200b      	movs	r0, #11
 80176fa:	b003      	add	sp, #12
 80176fc:	bd30      	pop	{r4, r5, pc}
 80176fe:	4618      	mov	r0, r3
 8017700:	b003      	add	sp, #12
 8017702:	bd30      	pop	{r4, r5, pc}
 8017704:	9b01      	ldr	r3, [sp, #4]
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d0f2      	beq.n	80176f2 <rcl_get_default_domain_id+0x3a>
 801770c:	e7e0      	b.n	80176d0 <rcl_get_default_domain_id+0x18>
 801770e:	f000 ff1f 	bl	8018550 <__errno>
 8017712:	6803      	ldr	r3, [r0, #0]
 8017714:	2b22      	cmp	r3, #34	@ 0x22
 8017716:	d1ec      	bne.n	80176f2 <rcl_get_default_domain_id+0x3a>
 8017718:	e7da      	b.n	80176d0 <rcl_get_default_domain_id+0x18>
 801771a:	bf00      	nop
 801771c:	08019984 	.word	0x08019984

08017720 <rcl_expand_topic_name>:
 8017720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017724:	b08b      	sub	sp, #44	@ 0x2c
 8017726:	9306      	str	r3, [sp, #24]
 8017728:	2800      	cmp	r0, #0
 801772a:	f000 80ad 	beq.w	8017888 <rcl_expand_topic_name+0x168>
 801772e:	460e      	mov	r6, r1
 8017730:	2900      	cmp	r1, #0
 8017732:	f000 80a9 	beq.w	8017888 <rcl_expand_topic_name+0x168>
 8017736:	4617      	mov	r7, r2
 8017738:	2a00      	cmp	r2, #0
 801773a:	f000 80a5 	beq.w	8017888 <rcl_expand_topic_name+0x168>
 801773e:	2b00      	cmp	r3, #0
 8017740:	f000 80a2 	beq.w	8017888 <rcl_expand_topic_name+0x168>
 8017744:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017746:	2b00      	cmp	r3, #0
 8017748:	f000 809e 	beq.w	8017888 <rcl_expand_topic_name+0x168>
 801774c:	2200      	movs	r2, #0
 801774e:	a909      	add	r1, sp, #36	@ 0x24
 8017750:	4680      	mov	r8, r0
 8017752:	f000 f949 	bl	80179e8 <rcl_validate_topic_name>
 8017756:	4604      	mov	r4, r0
 8017758:	2800      	cmp	r0, #0
 801775a:	f040 8096 	bne.w	801788a <rcl_expand_topic_name+0x16a>
 801775e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017760:	2b00      	cmp	r3, #0
 8017762:	f040 809a 	bne.w	801789a <rcl_expand_topic_name+0x17a>
 8017766:	4602      	mov	r2, r0
 8017768:	a909      	add	r1, sp, #36	@ 0x24
 801776a:	4630      	mov	r0, r6
 801776c:	f7f5 fd6c 	bl	800d248 <rmw_validate_node_name>
 8017770:	2800      	cmp	r0, #0
 8017772:	f040 808e 	bne.w	8017892 <rcl_expand_topic_name+0x172>
 8017776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017778:	2a00      	cmp	r2, #0
 801777a:	f040 8093 	bne.w	80178a4 <rcl_expand_topic_name+0x184>
 801777e:	a909      	add	r1, sp, #36	@ 0x24
 8017780:	4638      	mov	r0, r7
 8017782:	f7f5 fd43 	bl	800d20c <rmw_validate_namespace>
 8017786:	2800      	cmp	r0, #0
 8017788:	f040 8083 	bne.w	8017892 <rcl_expand_topic_name+0x172>
 801778c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801778e:	2c00      	cmp	r4, #0
 8017790:	f040 80ed 	bne.w	801796e <rcl_expand_topic_name+0x24e>
 8017794:	217b      	movs	r1, #123	@ 0x7b
 8017796:	4640      	mov	r0, r8
 8017798:	f000 fdf0 	bl	801837c <strchr>
 801779c:	f898 3000 	ldrb.w	r3, [r8]
 80177a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80177a2:	4605      	mov	r5, r0
 80177a4:	f000 809e 	beq.w	80178e4 <rcl_expand_topic_name+0x1c4>
 80177a8:	2b7e      	cmp	r3, #126	@ 0x7e
 80177aa:	f040 80a2 	bne.w	80178f2 <rcl_expand_topic_name+0x1d2>
 80177ae:	4638      	mov	r0, r7
 80177b0:	f7e8 fd38 	bl	8000224 <strlen>
 80177b4:	4a82      	ldr	r2, [pc, #520]	@ (80179c0 <rcl_expand_topic_name+0x2a0>)
 80177b6:	4b83      	ldr	r3, [pc, #524]	@ (80179c4 <rcl_expand_topic_name+0x2a4>)
 80177b8:	2801      	cmp	r0, #1
 80177ba:	bf18      	it	ne
 80177bc:	4613      	movne	r3, r2
 80177be:	9302      	str	r3, [sp, #8]
 80177c0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80177c2:	9300      	str	r3, [sp, #0]
 80177c4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80177c8:	f108 0301 	add.w	r3, r8, #1
 80177cc:	9305      	str	r3, [sp, #20]
 80177ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80177d2:	9301      	str	r3, [sp, #4]
 80177d4:	ab14      	add	r3, sp, #80	@ 0x50
 80177d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80177d8:	f7f5 fae2 	bl	800cda0 <rcutils_format_string_limit>
 80177dc:	4682      	mov	sl, r0
 80177de:	2800      	cmp	r0, #0
 80177e0:	f000 80c7 	beq.w	8017972 <rcl_expand_topic_name+0x252>
 80177e4:	2d00      	cmp	r5, #0
 80177e6:	f000 80a2 	beq.w	801792e <rcl_expand_topic_name+0x20e>
 80177ea:	217b      	movs	r1, #123	@ 0x7b
 80177ec:	f000 fdc6 	bl	801837c <strchr>
 80177f0:	46d1      	mov	r9, sl
 80177f2:	4605      	mov	r5, r0
 80177f4:	9407      	str	r4, [sp, #28]
 80177f6:	46d3      	mov	fp, sl
 80177f8:	464c      	mov	r4, r9
 80177fa:	2d00      	cmp	r5, #0
 80177fc:	f000 80be 	beq.w	801797c <rcl_expand_topic_name+0x25c>
 8017800:	217d      	movs	r1, #125	@ 0x7d
 8017802:	4620      	mov	r0, r4
 8017804:	f000 fdba 	bl	801837c <strchr>
 8017808:	eba0 0905 	sub.w	r9, r0, r5
 801780c:	f109 0a01 	add.w	sl, r9, #1
 8017810:	486d      	ldr	r0, [pc, #436]	@ (80179c8 <rcl_expand_topic_name+0x2a8>)
 8017812:	4652      	mov	r2, sl
 8017814:	4629      	mov	r1, r5
 8017816:	f000 fdbe 	bl	8018396 <strncmp>
 801781a:	2800      	cmp	r0, #0
 801781c:	d067      	beq.n	80178ee <rcl_expand_topic_name+0x1ce>
 801781e:	486b      	ldr	r0, [pc, #428]	@ (80179cc <rcl_expand_topic_name+0x2ac>)
 8017820:	4652      	mov	r2, sl
 8017822:	4629      	mov	r1, r5
 8017824:	f000 fdb7 	bl	8018396 <strncmp>
 8017828:	b130      	cbz	r0, 8017838 <rcl_expand_topic_name+0x118>
 801782a:	4869      	ldr	r0, [pc, #420]	@ (80179d0 <rcl_expand_topic_name+0x2b0>)
 801782c:	4652      	mov	r2, sl
 801782e:	4629      	mov	r1, r5
 8017830:	f000 fdb1 	bl	8018396 <strncmp>
 8017834:	2800      	cmp	r0, #0
 8017836:	d137      	bne.n	80178a8 <rcl_expand_topic_name+0x188>
 8017838:	46b9      	mov	r9, r7
 801783a:	ab16      	add	r3, sp, #88	@ 0x58
 801783c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017840:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017844:	ab14      	add	r3, sp, #80	@ 0x50
 8017846:	4628      	mov	r0, r5
 8017848:	cb0c      	ldmia	r3, {r2, r3}
 801784a:	4651      	mov	r1, sl
 801784c:	f7f5 fbe4 	bl	800d018 <rcutils_strndup>
 8017850:	4605      	mov	r5, r0
 8017852:	2800      	cmp	r0, #0
 8017854:	f000 809c 	beq.w	8017990 <rcl_expand_topic_name+0x270>
 8017858:	464a      	mov	r2, r9
 801785a:	4620      	mov	r0, r4
 801785c:	ab14      	add	r3, sp, #80	@ 0x50
 801785e:	4629      	mov	r1, r5
 8017860:	f7f5 fad8 	bl	800ce14 <rcutils_repl_str>
 8017864:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017866:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017868:	4604      	mov	r4, r0
 801786a:	4628      	mov	r0, r5
 801786c:	4798      	blx	r3
 801786e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017870:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017872:	4658      	mov	r0, fp
 8017874:	4798      	blx	r3
 8017876:	2c00      	cmp	r4, #0
 8017878:	d07b      	beq.n	8017972 <rcl_expand_topic_name+0x252>
 801787a:	217b      	movs	r1, #123	@ 0x7b
 801787c:	4620      	mov	r0, r4
 801787e:	f000 fd7d 	bl	801837c <strchr>
 8017882:	46a3      	mov	fp, r4
 8017884:	4605      	mov	r5, r0
 8017886:	e7b8      	b.n	80177fa <rcl_expand_topic_name+0xda>
 8017888:	240b      	movs	r4, #11
 801788a:	4620      	mov	r0, r4
 801788c:	b00b      	add	sp, #44	@ 0x2c
 801788e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017892:	f7fc f843 	bl	801391c <rcl_convert_rmw_ret_to_rcl_ret>
 8017896:	4604      	mov	r4, r0
 8017898:	e7f7      	b.n	801788a <rcl_expand_topic_name+0x16a>
 801789a:	2467      	movs	r4, #103	@ 0x67
 801789c:	4620      	mov	r0, r4
 801789e:	b00b      	add	sp, #44	@ 0x2c
 80178a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178a4:	24c9      	movs	r4, #201	@ 0xc9
 80178a6:	e7f0      	b.n	801788a <rcl_expand_topic_name+0x16a>
 80178a8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80178ac:	9806      	ldr	r0, [sp, #24]
 80178ae:	1c69      	adds	r1, r5, #1
 80178b0:	f7fe f99c 	bl	8015bec <rcutils_string_map_getn>
 80178b4:	4681      	mov	r9, r0
 80178b6:	2800      	cmp	r0, #0
 80178b8:	d1bf      	bne.n	801783a <rcl_expand_topic_name+0x11a>
 80178ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80178bc:	aa16      	add	r2, sp, #88	@ 0x58
 80178be:	6018      	str	r0, [r3, #0]
 80178c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80178c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80178c6:	ab14      	add	r3, sp, #80	@ 0x50
 80178c8:	cb0c      	ldmia	r3, {r2, r3}
 80178ca:	4651      	mov	r1, sl
 80178cc:	4628      	mov	r0, r5
 80178ce:	f7f5 fba3 	bl	800d018 <rcutils_strndup>
 80178d2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80178d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80178d6:	4798      	blx	r3
 80178d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80178da:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80178dc:	4658      	mov	r0, fp
 80178de:	2469      	movs	r4, #105	@ 0x69
 80178e0:	4798      	blx	r3
 80178e2:	e7d2      	b.n	801788a <rcl_expand_topic_name+0x16a>
 80178e4:	2800      	cmp	r0, #0
 80178e6:	d05b      	beq.n	80179a0 <rcl_expand_topic_name+0x280>
 80178e8:	46c1      	mov	r9, r8
 80178ea:	46a2      	mov	sl, r4
 80178ec:	e782      	b.n	80177f4 <rcl_expand_topic_name+0xd4>
 80178ee:	46b1      	mov	r9, r6
 80178f0:	e7a3      	b.n	801783a <rcl_expand_topic_name+0x11a>
 80178f2:	2800      	cmp	r0, #0
 80178f4:	d1f8      	bne.n	80178e8 <rcl_expand_topic_name+0x1c8>
 80178f6:	4638      	mov	r0, r7
 80178f8:	f7e8 fc94 	bl	8000224 <strlen>
 80178fc:	4a35      	ldr	r2, [pc, #212]	@ (80179d4 <rcl_expand_topic_name+0x2b4>)
 80178fe:	4b36      	ldr	r3, [pc, #216]	@ (80179d8 <rcl_expand_topic_name+0x2b8>)
 8017900:	f8cd 8010 	str.w	r8, [sp, #16]
 8017904:	2801      	cmp	r0, #1
 8017906:	bf18      	it	ne
 8017908:	4613      	movne	r3, r2
 801790a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801790e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017912:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017914:	9703      	str	r7, [sp, #12]
 8017916:	9200      	str	r2, [sp, #0]
 8017918:	ab14      	add	r3, sp, #80	@ 0x50
 801791a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801791c:	f7f5 fa40 	bl	800cda0 <rcutils_format_string_limit>
 8017920:	4682      	mov	sl, r0
 8017922:	4653      	mov	r3, sl
 8017924:	b32b      	cbz	r3, 8017972 <rcl_expand_topic_name+0x252>
 8017926:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017928:	f8c3 a000 	str.w	sl, [r3]
 801792c:	e7ad      	b.n	801788a <rcl_expand_topic_name+0x16a>
 801792e:	f89a 3000 	ldrb.w	r3, [sl]
 8017932:	2b2f      	cmp	r3, #47	@ 0x2f
 8017934:	d0f7      	beq.n	8017926 <rcl_expand_topic_name+0x206>
 8017936:	4638      	mov	r0, r7
 8017938:	f7e8 fc74 	bl	8000224 <strlen>
 801793c:	4a25      	ldr	r2, [pc, #148]	@ (80179d4 <rcl_expand_topic_name+0x2b4>)
 801793e:	4b26      	ldr	r3, [pc, #152]	@ (80179d8 <rcl_expand_topic_name+0x2b8>)
 8017940:	f8cd a010 	str.w	sl, [sp, #16]
 8017944:	2801      	cmp	r0, #1
 8017946:	bf18      	it	ne
 8017948:	4613      	movne	r3, r2
 801794a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801794e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017952:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017954:	9703      	str	r7, [sp, #12]
 8017956:	9200      	str	r2, [sp, #0]
 8017958:	ab14      	add	r3, sp, #80	@ 0x50
 801795a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801795c:	f7f5 fa20 	bl	800cda0 <rcutils_format_string_limit>
 8017960:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017962:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017964:	4605      	mov	r5, r0
 8017966:	4650      	mov	r0, sl
 8017968:	4798      	blx	r3
 801796a:	46aa      	mov	sl, r5
 801796c:	e7d9      	b.n	8017922 <rcl_expand_topic_name+0x202>
 801796e:	24ca      	movs	r4, #202	@ 0xca
 8017970:	e78b      	b.n	801788a <rcl_expand_topic_name+0x16a>
 8017972:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017974:	2300      	movs	r3, #0
 8017976:	6013      	str	r3, [r2, #0]
 8017978:	240a      	movs	r4, #10
 801797a:	e786      	b.n	801788a <rcl_expand_topic_name+0x16a>
 801797c:	465b      	mov	r3, fp
 801797e:	9c07      	ldr	r4, [sp, #28]
 8017980:	46da      	mov	sl, fp
 8017982:	2b00      	cmp	r3, #0
 8017984:	d1d3      	bne.n	801792e <rcl_expand_topic_name+0x20e>
 8017986:	f898 3000 	ldrb.w	r3, [r8]
 801798a:	2b2f      	cmp	r3, #47	@ 0x2f
 801798c:	d0cb      	beq.n	8017926 <rcl_expand_topic_name+0x206>
 801798e:	e7b2      	b.n	80178f6 <rcl_expand_topic_name+0x1d6>
 8017990:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8017994:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017996:	6015      	str	r5, [r2, #0]
 8017998:	4658      	mov	r0, fp
 801799a:	4798      	blx	r3
 801799c:	240a      	movs	r4, #10
 801799e:	e774      	b.n	801788a <rcl_expand_topic_name+0x16a>
 80179a0:	ab17      	add	r3, sp, #92	@ 0x5c
 80179a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80179a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80179aa:	ab14      	add	r3, sp, #80	@ 0x50
 80179ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80179ae:	4640      	mov	r0, r8
 80179b0:	f7f5 fb10 	bl	800cfd4 <rcutils_strdup>
 80179b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80179b6:	2800      	cmp	r0, #0
 80179b8:	6018      	str	r0, [r3, #0]
 80179ba:	bf08      	it	eq
 80179bc:	240a      	moveq	r4, #10
 80179be:	e764      	b.n	801788a <rcl_expand_topic_name+0x16a>
 80179c0:	08019994 	.word	0x08019994
 80179c4:	08019820 	.word	0x08019820
 80179c8:	0801999c 	.word	0x0801999c
 80179cc:	080199a4 	.word	0x080199a4
 80179d0:	080199ac 	.word	0x080199ac
 80179d4:	080194c8 	.word	0x080194c8
 80179d8:	080194c0 	.word	0x080194c0

080179dc <rcl_get_default_topic_name_substitutions>:
 80179dc:	2800      	cmp	r0, #0
 80179de:	bf0c      	ite	eq
 80179e0:	200b      	moveq	r0, #11
 80179e2:	2000      	movne	r0, #0
 80179e4:	4770      	bx	lr
 80179e6:	bf00      	nop

080179e8 <rcl_validate_topic_name>:
 80179e8:	2800      	cmp	r0, #0
 80179ea:	d07a      	beq.n	8017ae2 <rcl_validate_topic_name+0xfa>
 80179ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179f0:	460e      	mov	r6, r1
 80179f2:	2900      	cmp	r1, #0
 80179f4:	d07c      	beq.n	8017af0 <rcl_validate_topic_name+0x108>
 80179f6:	4617      	mov	r7, r2
 80179f8:	4605      	mov	r5, r0
 80179fa:	f7e8 fc13 	bl	8000224 <strlen>
 80179fe:	b1b0      	cbz	r0, 8017a2e <rcl_validate_topic_name+0x46>
 8017a00:	f895 9000 	ldrb.w	r9, [r5]
 8017a04:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017b88 <rcl_validate_topic_name+0x1a0>
 8017a08:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8017a0c:	f013 0304 	ands.w	r3, r3, #4
 8017a10:	d169      	bne.n	8017ae6 <rcl_validate_topic_name+0xfe>
 8017a12:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8017a16:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017a1a:	2a2f      	cmp	r2, #47	@ 0x2f
 8017a1c:	d10e      	bne.n	8017a3c <rcl_validate_topic_name+0x54>
 8017a1e:	2202      	movs	r2, #2
 8017a20:	6032      	str	r2, [r6, #0]
 8017a22:	b36f      	cbz	r7, 8017a80 <rcl_validate_topic_name+0x98>
 8017a24:	f8c7 8000 	str.w	r8, [r7]
 8017a28:	4618      	mov	r0, r3
 8017a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a2e:	2301      	movs	r3, #1
 8017a30:	6033      	str	r3, [r6, #0]
 8017a32:	b32f      	cbz	r7, 8017a80 <rcl_validate_topic_name+0x98>
 8017a34:	2000      	movs	r0, #0
 8017a36:	6038      	str	r0, [r7, #0]
 8017a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a3c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8017a40:	461c      	mov	r4, r3
 8017a42:	4619      	mov	r1, r3
 8017a44:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017a48:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017a4c:	f1be 0f09 	cmp.w	lr, #9
 8017a50:	d919      	bls.n	8017a86 <rcl_validate_topic_name+0x9e>
 8017a52:	f022 0e20 	bic.w	lr, r2, #32
 8017a56:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017a5a:	f1be 0f19 	cmp.w	lr, #25
 8017a5e:	d912      	bls.n	8017a86 <rcl_validate_topic_name+0x9e>
 8017a60:	2a5f      	cmp	r2, #95	@ 0x5f
 8017a62:	d019      	beq.n	8017a98 <rcl_validate_topic_name+0xb0>
 8017a64:	2a2f      	cmp	r2, #47	@ 0x2f
 8017a66:	d051      	beq.n	8017b0c <rcl_validate_topic_name+0x124>
 8017a68:	2a7e      	cmp	r2, #126	@ 0x7e
 8017a6a:	d048      	beq.n	8017afe <rcl_validate_topic_name+0x116>
 8017a6c:	2a7b      	cmp	r2, #123	@ 0x7b
 8017a6e:	d054      	beq.n	8017b1a <rcl_validate_topic_name+0x132>
 8017a70:	2a7d      	cmp	r2, #125	@ 0x7d
 8017a72:	d161      	bne.n	8017b38 <rcl_validate_topic_name+0x150>
 8017a74:	2c00      	cmp	r4, #0
 8017a76:	d155      	bne.n	8017b24 <rcl_validate_topic_name+0x13c>
 8017a78:	2305      	movs	r3, #5
 8017a7a:	6033      	str	r3, [r6, #0]
 8017a7c:	b107      	cbz	r7, 8017a80 <rcl_validate_topic_name+0x98>
 8017a7e:	6039      	str	r1, [r7, #0]
 8017a80:	2000      	movs	r0, #0
 8017a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a86:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017a8a:	0752      	lsls	r2, r2, #29
 8017a8c:	d504      	bpl.n	8017a98 <rcl_validate_topic_name+0xb0>
 8017a8e:	b11c      	cbz	r4, 8017a98 <rcl_validate_topic_name+0xb0>
 8017a90:	b111      	cbz	r1, 8017a98 <rcl_validate_topic_name+0xb0>
 8017a92:	1e4a      	subs	r2, r1, #1
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d02d      	beq.n	8017af4 <rcl_validate_topic_name+0x10c>
 8017a98:	3101      	adds	r1, #1
 8017a9a:	4288      	cmp	r0, r1
 8017a9c:	d1d2      	bne.n	8017a44 <rcl_validate_topic_name+0x5c>
 8017a9e:	2c00      	cmp	r4, #0
 8017aa0:	d145      	bne.n	8017b2e <rcl_validate_topic_name+0x146>
 8017aa2:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8017aa6:	d04f      	beq.n	8017b48 <rcl_validate_topic_name+0x160>
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	2301      	movs	r3, #1
 8017aac:	e006      	b.n	8017abc <rcl_validate_topic_name+0xd4>
 8017aae:	428b      	cmp	r3, r1
 8017ab0:	f105 0501 	add.w	r5, r5, #1
 8017ab4:	f103 0201 	add.w	r2, r3, #1
 8017ab8:	d236      	bcs.n	8017b28 <rcl_validate_topic_name+0x140>
 8017aba:	4613      	mov	r3, r2
 8017abc:	4580      	cmp	r8, r0
 8017abe:	f100 0001 	add.w	r0, r0, #1
 8017ac2:	d0f4      	beq.n	8017aae <rcl_validate_topic_name+0xc6>
 8017ac4:	782a      	ldrb	r2, [r5, #0]
 8017ac6:	2a2f      	cmp	r2, #47	@ 0x2f
 8017ac8:	d1f1      	bne.n	8017aae <rcl_validate_topic_name+0xc6>
 8017aca:	786a      	ldrb	r2, [r5, #1]
 8017acc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017ad0:	0754      	lsls	r4, r2, #29
 8017ad2:	d5ec      	bpl.n	8017aae <rcl_validate_topic_name+0xc6>
 8017ad4:	2204      	movs	r2, #4
 8017ad6:	6032      	str	r2, [r6, #0]
 8017ad8:	2f00      	cmp	r7, #0
 8017ada:	d0d1      	beq.n	8017a80 <rcl_validate_topic_name+0x98>
 8017adc:	603b      	str	r3, [r7, #0]
 8017ade:	2000      	movs	r0, #0
 8017ae0:	e7aa      	b.n	8017a38 <rcl_validate_topic_name+0x50>
 8017ae2:	200b      	movs	r0, #11
 8017ae4:	4770      	bx	lr
 8017ae6:	2304      	movs	r3, #4
 8017ae8:	6033      	str	r3, [r6, #0]
 8017aea:	2f00      	cmp	r7, #0
 8017aec:	d1a2      	bne.n	8017a34 <rcl_validate_topic_name+0x4c>
 8017aee:	e7c7      	b.n	8017a80 <rcl_validate_topic_name+0x98>
 8017af0:	200b      	movs	r0, #11
 8017af2:	e7a1      	b.n	8017a38 <rcl_validate_topic_name+0x50>
 8017af4:	2309      	movs	r3, #9
 8017af6:	6033      	str	r3, [r6, #0]
 8017af8:	2f00      	cmp	r7, #0
 8017afa:	d1c0      	bne.n	8017a7e <rcl_validate_topic_name+0x96>
 8017afc:	e7c0      	b.n	8017a80 <rcl_validate_topic_name+0x98>
 8017afe:	2900      	cmp	r1, #0
 8017b00:	d0ca      	beq.n	8017a98 <rcl_validate_topic_name+0xb0>
 8017b02:	2306      	movs	r3, #6
 8017b04:	6033      	str	r3, [r6, #0]
 8017b06:	2f00      	cmp	r7, #0
 8017b08:	d1b9      	bne.n	8017a7e <rcl_validate_topic_name+0x96>
 8017b0a:	e7b9      	b.n	8017a80 <rcl_validate_topic_name+0x98>
 8017b0c:	2c00      	cmp	r4, #0
 8017b0e:	d0c3      	beq.n	8017a98 <rcl_validate_topic_name+0xb0>
 8017b10:	2308      	movs	r3, #8
 8017b12:	6033      	str	r3, [r6, #0]
 8017b14:	2f00      	cmp	r7, #0
 8017b16:	d1b2      	bne.n	8017a7e <rcl_validate_topic_name+0x96>
 8017b18:	e7b2      	b.n	8017a80 <rcl_validate_topic_name+0x98>
 8017b1a:	2c00      	cmp	r4, #0
 8017b1c:	d1f8      	bne.n	8017b10 <rcl_validate_topic_name+0x128>
 8017b1e:	460b      	mov	r3, r1
 8017b20:	2401      	movs	r4, #1
 8017b22:	e7b9      	b.n	8017a98 <rcl_validate_topic_name+0xb0>
 8017b24:	2400      	movs	r4, #0
 8017b26:	e7b7      	b.n	8017a98 <rcl_validate_topic_name+0xb0>
 8017b28:	2000      	movs	r0, #0
 8017b2a:	6030      	str	r0, [r6, #0]
 8017b2c:	e784      	b.n	8017a38 <rcl_validate_topic_name+0x50>
 8017b2e:	2205      	movs	r2, #5
 8017b30:	6032      	str	r2, [r6, #0]
 8017b32:	2f00      	cmp	r7, #0
 8017b34:	d1d2      	bne.n	8017adc <rcl_validate_topic_name+0xf4>
 8017b36:	e7a3      	b.n	8017a80 <rcl_validate_topic_name+0x98>
 8017b38:	2c00      	cmp	r4, #0
 8017b3a:	bf14      	ite	ne
 8017b3c:	2308      	movne	r3, #8
 8017b3e:	2303      	moveq	r3, #3
 8017b40:	6033      	str	r3, [r6, #0]
 8017b42:	2f00      	cmp	r7, #0
 8017b44:	d19b      	bne.n	8017a7e <rcl_validate_topic_name+0x96>
 8017b46:	e79b      	b.n	8017a80 <rcl_validate_topic_name+0x98>
 8017b48:	2301      	movs	r3, #1
 8017b4a:	e00a      	b.n	8017b62 <rcl_validate_topic_name+0x17a>
 8017b4c:	2c01      	cmp	r4, #1
 8017b4e:	d013      	beq.n	8017b78 <rcl_validate_topic_name+0x190>
 8017b50:	4299      	cmp	r1, r3
 8017b52:	f104 0401 	add.w	r4, r4, #1
 8017b56:	f105 0501 	add.w	r5, r5, #1
 8017b5a:	f103 0201 	add.w	r2, r3, #1
 8017b5e:	d9e3      	bls.n	8017b28 <rcl_validate_topic_name+0x140>
 8017b60:	4613      	mov	r3, r2
 8017b62:	45a0      	cmp	r8, r4
 8017b64:	d0f4      	beq.n	8017b50 <rcl_validate_topic_name+0x168>
 8017b66:	782a      	ldrb	r2, [r5, #0]
 8017b68:	2a2f      	cmp	r2, #47	@ 0x2f
 8017b6a:	d1ef      	bne.n	8017b4c <rcl_validate_topic_name+0x164>
 8017b6c:	786a      	ldrb	r2, [r5, #1]
 8017b6e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017b72:	0752      	lsls	r2, r2, #29
 8017b74:	d5ec      	bpl.n	8017b50 <rcl_validate_topic_name+0x168>
 8017b76:	e7ad      	b.n	8017ad4 <rcl_validate_topic_name+0xec>
 8017b78:	2307      	movs	r3, #7
 8017b7a:	6033      	str	r3, [r6, #0]
 8017b7c:	2f00      	cmp	r7, #0
 8017b7e:	f43f af7f 	beq.w	8017a80 <rcl_validate_topic_name+0x98>
 8017b82:	603c      	str	r4, [r7, #0]
 8017b84:	2000      	movs	r0, #0
 8017b86:	e757      	b.n	8017a38 <rcl_validate_topic_name+0x50>
 8017b88:	08019ffb 	.word	0x08019ffb

08017b8c <calloc>:
 8017b8c:	4b02      	ldr	r3, [pc, #8]	@ (8017b98 <calloc+0xc>)
 8017b8e:	460a      	mov	r2, r1
 8017b90:	4601      	mov	r1, r0
 8017b92:	6818      	ldr	r0, [r3, #0]
 8017b94:	f000 b802 	b.w	8017b9c <_calloc_r>
 8017b98:	200000d8 	.word	0x200000d8

08017b9c <_calloc_r>:
 8017b9c:	b570      	push	{r4, r5, r6, lr}
 8017b9e:	fba1 5402 	umull	r5, r4, r1, r2
 8017ba2:	b934      	cbnz	r4, 8017bb2 <_calloc_r+0x16>
 8017ba4:	4629      	mov	r1, r5
 8017ba6:	f000 f887 	bl	8017cb8 <_malloc_r>
 8017baa:	4606      	mov	r6, r0
 8017bac:	b928      	cbnz	r0, 8017bba <_calloc_r+0x1e>
 8017bae:	4630      	mov	r0, r6
 8017bb0:	bd70      	pop	{r4, r5, r6, pc}
 8017bb2:	220c      	movs	r2, #12
 8017bb4:	6002      	str	r2, [r0, #0]
 8017bb6:	2600      	movs	r6, #0
 8017bb8:	e7f9      	b.n	8017bae <_calloc_r+0x12>
 8017bba:	462a      	mov	r2, r5
 8017bbc:	4621      	mov	r1, r4
 8017bbe:	f000 fbd5 	bl	801836c <memset>
 8017bc2:	e7f4      	b.n	8017bae <_calloc_r+0x12>

08017bc4 <getenv>:
 8017bc4:	b507      	push	{r0, r1, r2, lr}
 8017bc6:	4b04      	ldr	r3, [pc, #16]	@ (8017bd8 <getenv+0x14>)
 8017bc8:	4601      	mov	r1, r0
 8017bca:	aa01      	add	r2, sp, #4
 8017bcc:	6818      	ldr	r0, [r3, #0]
 8017bce:	f000 f805 	bl	8017bdc <_findenv_r>
 8017bd2:	b003      	add	sp, #12
 8017bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8017bd8:	200000d8 	.word	0x200000d8

08017bdc <_findenv_r>:
 8017bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017be0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017c50 <_findenv_r+0x74>
 8017be4:	4606      	mov	r6, r0
 8017be6:	4689      	mov	r9, r1
 8017be8:	4617      	mov	r7, r2
 8017bea:	f000 fd13 	bl	8018614 <__env_lock>
 8017bee:	f8da 4000 	ldr.w	r4, [sl]
 8017bf2:	b134      	cbz	r4, 8017c02 <_findenv_r+0x26>
 8017bf4:	464b      	mov	r3, r9
 8017bf6:	4698      	mov	r8, r3
 8017bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bfc:	b13a      	cbz	r2, 8017c0e <_findenv_r+0x32>
 8017bfe:	2a3d      	cmp	r2, #61	@ 0x3d
 8017c00:	d1f9      	bne.n	8017bf6 <_findenv_r+0x1a>
 8017c02:	4630      	mov	r0, r6
 8017c04:	f000 fd0c 	bl	8018620 <__env_unlock>
 8017c08:	2000      	movs	r0, #0
 8017c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c0e:	eba8 0809 	sub.w	r8, r8, r9
 8017c12:	46a3      	mov	fp, r4
 8017c14:	f854 0b04 	ldr.w	r0, [r4], #4
 8017c18:	2800      	cmp	r0, #0
 8017c1a:	d0f2      	beq.n	8017c02 <_findenv_r+0x26>
 8017c1c:	4642      	mov	r2, r8
 8017c1e:	4649      	mov	r1, r9
 8017c20:	f000 fbb9 	bl	8018396 <strncmp>
 8017c24:	2800      	cmp	r0, #0
 8017c26:	d1f4      	bne.n	8017c12 <_findenv_r+0x36>
 8017c28:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017c2c:	eb03 0508 	add.w	r5, r3, r8
 8017c30:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017c34:	2b3d      	cmp	r3, #61	@ 0x3d
 8017c36:	d1ec      	bne.n	8017c12 <_findenv_r+0x36>
 8017c38:	f8da 3000 	ldr.w	r3, [sl]
 8017c3c:	ebab 0303 	sub.w	r3, fp, r3
 8017c40:	109b      	asrs	r3, r3, #2
 8017c42:	4630      	mov	r0, r6
 8017c44:	603b      	str	r3, [r7, #0]
 8017c46:	f000 fceb 	bl	8018620 <__env_unlock>
 8017c4a:	1c68      	adds	r0, r5, #1
 8017c4c:	e7dd      	b.n	8017c0a <_findenv_r+0x2e>
 8017c4e:	bf00      	nop
 8017c50:	20000018 	.word	0x20000018

08017c54 <malloc>:
 8017c54:	4b02      	ldr	r3, [pc, #8]	@ (8017c60 <malloc+0xc>)
 8017c56:	4601      	mov	r1, r0
 8017c58:	6818      	ldr	r0, [r3, #0]
 8017c5a:	f000 b82d 	b.w	8017cb8 <_malloc_r>
 8017c5e:	bf00      	nop
 8017c60:	200000d8 	.word	0x200000d8

08017c64 <free>:
 8017c64:	4b02      	ldr	r3, [pc, #8]	@ (8017c70 <free+0xc>)
 8017c66:	4601      	mov	r1, r0
 8017c68:	6818      	ldr	r0, [r3, #0]
 8017c6a:	f000 bcdf 	b.w	801862c <_free_r>
 8017c6e:	bf00      	nop
 8017c70:	200000d8 	.word	0x200000d8

08017c74 <sbrk_aligned>:
 8017c74:	b570      	push	{r4, r5, r6, lr}
 8017c76:	4e0f      	ldr	r6, [pc, #60]	@ (8017cb4 <sbrk_aligned+0x40>)
 8017c78:	460c      	mov	r4, r1
 8017c7a:	6831      	ldr	r1, [r6, #0]
 8017c7c:	4605      	mov	r5, r0
 8017c7e:	b911      	cbnz	r1, 8017c86 <sbrk_aligned+0x12>
 8017c80:	f000 fc44 	bl	801850c <_sbrk_r>
 8017c84:	6030      	str	r0, [r6, #0]
 8017c86:	4621      	mov	r1, r4
 8017c88:	4628      	mov	r0, r5
 8017c8a:	f000 fc3f 	bl	801850c <_sbrk_r>
 8017c8e:	1c43      	adds	r3, r0, #1
 8017c90:	d103      	bne.n	8017c9a <sbrk_aligned+0x26>
 8017c92:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017c96:	4620      	mov	r0, r4
 8017c98:	bd70      	pop	{r4, r5, r6, pc}
 8017c9a:	1cc4      	adds	r4, r0, #3
 8017c9c:	f024 0403 	bic.w	r4, r4, #3
 8017ca0:	42a0      	cmp	r0, r4
 8017ca2:	d0f8      	beq.n	8017c96 <sbrk_aligned+0x22>
 8017ca4:	1a21      	subs	r1, r4, r0
 8017ca6:	4628      	mov	r0, r5
 8017ca8:	f000 fc30 	bl	801850c <_sbrk_r>
 8017cac:	3001      	adds	r0, #1
 8017cae:	d1f2      	bne.n	8017c96 <sbrk_aligned+0x22>
 8017cb0:	e7ef      	b.n	8017c92 <sbrk_aligned+0x1e>
 8017cb2:	bf00      	nop
 8017cb4:	20010f3c 	.word	0x20010f3c

08017cb8 <_malloc_r>:
 8017cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cbc:	1ccd      	adds	r5, r1, #3
 8017cbe:	f025 0503 	bic.w	r5, r5, #3
 8017cc2:	3508      	adds	r5, #8
 8017cc4:	2d0c      	cmp	r5, #12
 8017cc6:	bf38      	it	cc
 8017cc8:	250c      	movcc	r5, #12
 8017cca:	2d00      	cmp	r5, #0
 8017ccc:	4606      	mov	r6, r0
 8017cce:	db01      	blt.n	8017cd4 <_malloc_r+0x1c>
 8017cd0:	42a9      	cmp	r1, r5
 8017cd2:	d904      	bls.n	8017cde <_malloc_r+0x26>
 8017cd4:	230c      	movs	r3, #12
 8017cd6:	6033      	str	r3, [r6, #0]
 8017cd8:	2000      	movs	r0, #0
 8017cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017db4 <_malloc_r+0xfc>
 8017ce2:	f000 f869 	bl	8017db8 <__malloc_lock>
 8017ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8017cea:	461c      	mov	r4, r3
 8017cec:	bb44      	cbnz	r4, 8017d40 <_malloc_r+0x88>
 8017cee:	4629      	mov	r1, r5
 8017cf0:	4630      	mov	r0, r6
 8017cf2:	f7ff ffbf 	bl	8017c74 <sbrk_aligned>
 8017cf6:	1c43      	adds	r3, r0, #1
 8017cf8:	4604      	mov	r4, r0
 8017cfa:	d158      	bne.n	8017dae <_malloc_r+0xf6>
 8017cfc:	f8d8 4000 	ldr.w	r4, [r8]
 8017d00:	4627      	mov	r7, r4
 8017d02:	2f00      	cmp	r7, #0
 8017d04:	d143      	bne.n	8017d8e <_malloc_r+0xd6>
 8017d06:	2c00      	cmp	r4, #0
 8017d08:	d04b      	beq.n	8017da2 <_malloc_r+0xea>
 8017d0a:	6823      	ldr	r3, [r4, #0]
 8017d0c:	4639      	mov	r1, r7
 8017d0e:	4630      	mov	r0, r6
 8017d10:	eb04 0903 	add.w	r9, r4, r3
 8017d14:	f000 fbfa 	bl	801850c <_sbrk_r>
 8017d18:	4581      	cmp	r9, r0
 8017d1a:	d142      	bne.n	8017da2 <_malloc_r+0xea>
 8017d1c:	6821      	ldr	r1, [r4, #0]
 8017d1e:	1a6d      	subs	r5, r5, r1
 8017d20:	4629      	mov	r1, r5
 8017d22:	4630      	mov	r0, r6
 8017d24:	f7ff ffa6 	bl	8017c74 <sbrk_aligned>
 8017d28:	3001      	adds	r0, #1
 8017d2a:	d03a      	beq.n	8017da2 <_malloc_r+0xea>
 8017d2c:	6823      	ldr	r3, [r4, #0]
 8017d2e:	442b      	add	r3, r5
 8017d30:	6023      	str	r3, [r4, #0]
 8017d32:	f8d8 3000 	ldr.w	r3, [r8]
 8017d36:	685a      	ldr	r2, [r3, #4]
 8017d38:	bb62      	cbnz	r2, 8017d94 <_malloc_r+0xdc>
 8017d3a:	f8c8 7000 	str.w	r7, [r8]
 8017d3e:	e00f      	b.n	8017d60 <_malloc_r+0xa8>
 8017d40:	6822      	ldr	r2, [r4, #0]
 8017d42:	1b52      	subs	r2, r2, r5
 8017d44:	d420      	bmi.n	8017d88 <_malloc_r+0xd0>
 8017d46:	2a0b      	cmp	r2, #11
 8017d48:	d917      	bls.n	8017d7a <_malloc_r+0xc2>
 8017d4a:	1961      	adds	r1, r4, r5
 8017d4c:	42a3      	cmp	r3, r4
 8017d4e:	6025      	str	r5, [r4, #0]
 8017d50:	bf18      	it	ne
 8017d52:	6059      	strne	r1, [r3, #4]
 8017d54:	6863      	ldr	r3, [r4, #4]
 8017d56:	bf08      	it	eq
 8017d58:	f8c8 1000 	streq.w	r1, [r8]
 8017d5c:	5162      	str	r2, [r4, r5]
 8017d5e:	604b      	str	r3, [r1, #4]
 8017d60:	4630      	mov	r0, r6
 8017d62:	f000 f82f 	bl	8017dc4 <__malloc_unlock>
 8017d66:	f104 000b 	add.w	r0, r4, #11
 8017d6a:	1d23      	adds	r3, r4, #4
 8017d6c:	f020 0007 	bic.w	r0, r0, #7
 8017d70:	1ac2      	subs	r2, r0, r3
 8017d72:	bf1c      	itt	ne
 8017d74:	1a1b      	subne	r3, r3, r0
 8017d76:	50a3      	strne	r3, [r4, r2]
 8017d78:	e7af      	b.n	8017cda <_malloc_r+0x22>
 8017d7a:	6862      	ldr	r2, [r4, #4]
 8017d7c:	42a3      	cmp	r3, r4
 8017d7e:	bf0c      	ite	eq
 8017d80:	f8c8 2000 	streq.w	r2, [r8]
 8017d84:	605a      	strne	r2, [r3, #4]
 8017d86:	e7eb      	b.n	8017d60 <_malloc_r+0xa8>
 8017d88:	4623      	mov	r3, r4
 8017d8a:	6864      	ldr	r4, [r4, #4]
 8017d8c:	e7ae      	b.n	8017cec <_malloc_r+0x34>
 8017d8e:	463c      	mov	r4, r7
 8017d90:	687f      	ldr	r7, [r7, #4]
 8017d92:	e7b6      	b.n	8017d02 <_malloc_r+0x4a>
 8017d94:	461a      	mov	r2, r3
 8017d96:	685b      	ldr	r3, [r3, #4]
 8017d98:	42a3      	cmp	r3, r4
 8017d9a:	d1fb      	bne.n	8017d94 <_malloc_r+0xdc>
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	6053      	str	r3, [r2, #4]
 8017da0:	e7de      	b.n	8017d60 <_malloc_r+0xa8>
 8017da2:	230c      	movs	r3, #12
 8017da4:	6033      	str	r3, [r6, #0]
 8017da6:	4630      	mov	r0, r6
 8017da8:	f000 f80c 	bl	8017dc4 <__malloc_unlock>
 8017dac:	e794      	b.n	8017cd8 <_malloc_r+0x20>
 8017dae:	6005      	str	r5, [r0, #0]
 8017db0:	e7d6      	b.n	8017d60 <_malloc_r+0xa8>
 8017db2:	bf00      	nop
 8017db4:	20010f40 	.word	0x20010f40

08017db8 <__malloc_lock>:
 8017db8:	4801      	ldr	r0, [pc, #4]	@ (8017dc0 <__malloc_lock+0x8>)
 8017dba:	f000 bbf4 	b.w	80185a6 <__retarget_lock_acquire_recursive>
 8017dbe:	bf00      	nop
 8017dc0:	20011085 	.word	0x20011085

08017dc4 <__malloc_unlock>:
 8017dc4:	4801      	ldr	r0, [pc, #4]	@ (8017dcc <__malloc_unlock+0x8>)
 8017dc6:	f000 bbef 	b.w	80185a8 <__retarget_lock_release_recursive>
 8017dca:	bf00      	nop
 8017dcc:	20011085 	.word	0x20011085

08017dd0 <srand>:
 8017dd0:	b538      	push	{r3, r4, r5, lr}
 8017dd2:	4b10      	ldr	r3, [pc, #64]	@ (8017e14 <srand+0x44>)
 8017dd4:	681d      	ldr	r5, [r3, #0]
 8017dd6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017dd8:	4604      	mov	r4, r0
 8017dda:	b9b3      	cbnz	r3, 8017e0a <srand+0x3a>
 8017ddc:	2018      	movs	r0, #24
 8017dde:	f7ff ff39 	bl	8017c54 <malloc>
 8017de2:	4602      	mov	r2, r0
 8017de4:	6328      	str	r0, [r5, #48]	@ 0x30
 8017de6:	b920      	cbnz	r0, 8017df2 <srand+0x22>
 8017de8:	4b0b      	ldr	r3, [pc, #44]	@ (8017e18 <srand+0x48>)
 8017dea:	480c      	ldr	r0, [pc, #48]	@ (8017e1c <srand+0x4c>)
 8017dec:	2146      	movs	r1, #70	@ 0x46
 8017dee:	f000 fbf3 	bl	80185d8 <__assert_func>
 8017df2:	490b      	ldr	r1, [pc, #44]	@ (8017e20 <srand+0x50>)
 8017df4:	4b0b      	ldr	r3, [pc, #44]	@ (8017e24 <srand+0x54>)
 8017df6:	e9c0 1300 	strd	r1, r3, [r0]
 8017dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8017e28 <srand+0x58>)
 8017dfc:	6083      	str	r3, [r0, #8]
 8017dfe:	230b      	movs	r3, #11
 8017e00:	8183      	strh	r3, [r0, #12]
 8017e02:	2100      	movs	r1, #0
 8017e04:	2001      	movs	r0, #1
 8017e06:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017e0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	611c      	str	r4, [r3, #16]
 8017e10:	615a      	str	r2, [r3, #20]
 8017e12:	bd38      	pop	{r3, r4, r5, pc}
 8017e14:	200000d8 	.word	0x200000d8
 8017e18:	08019f1c 	.word	0x08019f1c
 8017e1c:	08019f33 	.word	0x08019f33
 8017e20:	abcd330e 	.word	0xabcd330e
 8017e24:	e66d1234 	.word	0xe66d1234
 8017e28:	0005deec 	.word	0x0005deec

08017e2c <rand>:
 8017e2c:	4b16      	ldr	r3, [pc, #88]	@ (8017e88 <rand+0x5c>)
 8017e2e:	b510      	push	{r4, lr}
 8017e30:	681c      	ldr	r4, [r3, #0]
 8017e32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017e34:	b9b3      	cbnz	r3, 8017e64 <rand+0x38>
 8017e36:	2018      	movs	r0, #24
 8017e38:	f7ff ff0c 	bl	8017c54 <malloc>
 8017e3c:	4602      	mov	r2, r0
 8017e3e:	6320      	str	r0, [r4, #48]	@ 0x30
 8017e40:	b920      	cbnz	r0, 8017e4c <rand+0x20>
 8017e42:	4b12      	ldr	r3, [pc, #72]	@ (8017e8c <rand+0x60>)
 8017e44:	4812      	ldr	r0, [pc, #72]	@ (8017e90 <rand+0x64>)
 8017e46:	2152      	movs	r1, #82	@ 0x52
 8017e48:	f000 fbc6 	bl	80185d8 <__assert_func>
 8017e4c:	4911      	ldr	r1, [pc, #68]	@ (8017e94 <rand+0x68>)
 8017e4e:	4b12      	ldr	r3, [pc, #72]	@ (8017e98 <rand+0x6c>)
 8017e50:	e9c0 1300 	strd	r1, r3, [r0]
 8017e54:	4b11      	ldr	r3, [pc, #68]	@ (8017e9c <rand+0x70>)
 8017e56:	6083      	str	r3, [r0, #8]
 8017e58:	230b      	movs	r3, #11
 8017e5a:	8183      	strh	r3, [r0, #12]
 8017e5c:	2100      	movs	r1, #0
 8017e5e:	2001      	movs	r0, #1
 8017e60:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017e64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017e66:	480e      	ldr	r0, [pc, #56]	@ (8017ea0 <rand+0x74>)
 8017e68:	690b      	ldr	r3, [r1, #16]
 8017e6a:	694c      	ldr	r4, [r1, #20]
 8017e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8017ea4 <rand+0x78>)
 8017e6e:	4358      	muls	r0, r3
 8017e70:	fb02 0004 	mla	r0, r2, r4, r0
 8017e74:	fba3 3202 	umull	r3, r2, r3, r2
 8017e78:	3301      	adds	r3, #1
 8017e7a:	eb40 0002 	adc.w	r0, r0, r2
 8017e7e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017e82:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017e86:	bd10      	pop	{r4, pc}
 8017e88:	200000d8 	.word	0x200000d8
 8017e8c:	08019f1c 	.word	0x08019f1c
 8017e90:	08019f33 	.word	0x08019f33
 8017e94:	abcd330e 	.word	0xabcd330e
 8017e98:	e66d1234 	.word	0xe66d1234
 8017e9c:	0005deec 	.word	0x0005deec
 8017ea0:	5851f42d 	.word	0x5851f42d
 8017ea4:	4c957f2d 	.word	0x4c957f2d

08017ea8 <realloc>:
 8017ea8:	4b02      	ldr	r3, [pc, #8]	@ (8017eb4 <realloc+0xc>)
 8017eaa:	460a      	mov	r2, r1
 8017eac:	4601      	mov	r1, r0
 8017eae:	6818      	ldr	r0, [r3, #0]
 8017eb0:	f000 b802 	b.w	8017eb8 <_realloc_r>
 8017eb4:	200000d8 	.word	0x200000d8

08017eb8 <_realloc_r>:
 8017eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ebc:	4607      	mov	r7, r0
 8017ebe:	4614      	mov	r4, r2
 8017ec0:	460d      	mov	r5, r1
 8017ec2:	b921      	cbnz	r1, 8017ece <_realloc_r+0x16>
 8017ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ec8:	4611      	mov	r1, r2
 8017eca:	f7ff bef5 	b.w	8017cb8 <_malloc_r>
 8017ece:	b92a      	cbnz	r2, 8017edc <_realloc_r+0x24>
 8017ed0:	f000 fbac 	bl	801862c <_free_r>
 8017ed4:	4625      	mov	r5, r4
 8017ed6:	4628      	mov	r0, r5
 8017ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017edc:	f000 fbf0 	bl	80186c0 <_malloc_usable_size_r>
 8017ee0:	4284      	cmp	r4, r0
 8017ee2:	4606      	mov	r6, r0
 8017ee4:	d802      	bhi.n	8017eec <_realloc_r+0x34>
 8017ee6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017eea:	d8f4      	bhi.n	8017ed6 <_realloc_r+0x1e>
 8017eec:	4621      	mov	r1, r4
 8017eee:	4638      	mov	r0, r7
 8017ef0:	f7ff fee2 	bl	8017cb8 <_malloc_r>
 8017ef4:	4680      	mov	r8, r0
 8017ef6:	b908      	cbnz	r0, 8017efc <_realloc_r+0x44>
 8017ef8:	4645      	mov	r5, r8
 8017efa:	e7ec      	b.n	8017ed6 <_realloc_r+0x1e>
 8017efc:	42b4      	cmp	r4, r6
 8017efe:	4622      	mov	r2, r4
 8017f00:	4629      	mov	r1, r5
 8017f02:	bf28      	it	cs
 8017f04:	4632      	movcs	r2, r6
 8017f06:	f000 fb58 	bl	80185ba <memcpy>
 8017f0a:	4629      	mov	r1, r5
 8017f0c:	4638      	mov	r0, r7
 8017f0e:	f000 fb8d 	bl	801862c <_free_r>
 8017f12:	e7f1      	b.n	8017ef8 <_realloc_r+0x40>

08017f14 <_strtoul_l.isra.0>:
 8017f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f18:	4e34      	ldr	r6, [pc, #208]	@ (8017fec <_strtoul_l.isra.0+0xd8>)
 8017f1a:	4686      	mov	lr, r0
 8017f1c:	460d      	mov	r5, r1
 8017f1e:	4628      	mov	r0, r5
 8017f20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f24:	5d37      	ldrb	r7, [r6, r4]
 8017f26:	f017 0708 	ands.w	r7, r7, #8
 8017f2a:	d1f8      	bne.n	8017f1e <_strtoul_l.isra.0+0xa>
 8017f2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8017f2e:	d110      	bne.n	8017f52 <_strtoul_l.isra.0+0x3e>
 8017f30:	782c      	ldrb	r4, [r5, #0]
 8017f32:	2701      	movs	r7, #1
 8017f34:	1c85      	adds	r5, r0, #2
 8017f36:	f033 0010 	bics.w	r0, r3, #16
 8017f3a:	d115      	bne.n	8017f68 <_strtoul_l.isra.0+0x54>
 8017f3c:	2c30      	cmp	r4, #48	@ 0x30
 8017f3e:	d10d      	bne.n	8017f5c <_strtoul_l.isra.0+0x48>
 8017f40:	7828      	ldrb	r0, [r5, #0]
 8017f42:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017f46:	2858      	cmp	r0, #88	@ 0x58
 8017f48:	d108      	bne.n	8017f5c <_strtoul_l.isra.0+0x48>
 8017f4a:	786c      	ldrb	r4, [r5, #1]
 8017f4c:	3502      	adds	r5, #2
 8017f4e:	2310      	movs	r3, #16
 8017f50:	e00a      	b.n	8017f68 <_strtoul_l.isra.0+0x54>
 8017f52:	2c2b      	cmp	r4, #43	@ 0x2b
 8017f54:	bf04      	itt	eq
 8017f56:	782c      	ldrbeq	r4, [r5, #0]
 8017f58:	1c85      	addeq	r5, r0, #2
 8017f5a:	e7ec      	b.n	8017f36 <_strtoul_l.isra.0+0x22>
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d1f6      	bne.n	8017f4e <_strtoul_l.isra.0+0x3a>
 8017f60:	2c30      	cmp	r4, #48	@ 0x30
 8017f62:	bf14      	ite	ne
 8017f64:	230a      	movne	r3, #10
 8017f66:	2308      	moveq	r3, #8
 8017f68:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017f6c:	2600      	movs	r6, #0
 8017f6e:	fbb8 f8f3 	udiv	r8, r8, r3
 8017f72:	fb03 f908 	mul.w	r9, r3, r8
 8017f76:	ea6f 0909 	mvn.w	r9, r9
 8017f7a:	4630      	mov	r0, r6
 8017f7c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017f80:	f1bc 0f09 	cmp.w	ip, #9
 8017f84:	d810      	bhi.n	8017fa8 <_strtoul_l.isra.0+0x94>
 8017f86:	4664      	mov	r4, ip
 8017f88:	42a3      	cmp	r3, r4
 8017f8a:	dd1e      	ble.n	8017fca <_strtoul_l.isra.0+0xb6>
 8017f8c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017f90:	d007      	beq.n	8017fa2 <_strtoul_l.isra.0+0x8e>
 8017f92:	4580      	cmp	r8, r0
 8017f94:	d316      	bcc.n	8017fc4 <_strtoul_l.isra.0+0xb0>
 8017f96:	d101      	bne.n	8017f9c <_strtoul_l.isra.0+0x88>
 8017f98:	45a1      	cmp	r9, r4
 8017f9a:	db13      	blt.n	8017fc4 <_strtoul_l.isra.0+0xb0>
 8017f9c:	fb00 4003 	mla	r0, r0, r3, r4
 8017fa0:	2601      	movs	r6, #1
 8017fa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017fa6:	e7e9      	b.n	8017f7c <_strtoul_l.isra.0+0x68>
 8017fa8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017fac:	f1bc 0f19 	cmp.w	ip, #25
 8017fb0:	d801      	bhi.n	8017fb6 <_strtoul_l.isra.0+0xa2>
 8017fb2:	3c37      	subs	r4, #55	@ 0x37
 8017fb4:	e7e8      	b.n	8017f88 <_strtoul_l.isra.0+0x74>
 8017fb6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017fba:	f1bc 0f19 	cmp.w	ip, #25
 8017fbe:	d804      	bhi.n	8017fca <_strtoul_l.isra.0+0xb6>
 8017fc0:	3c57      	subs	r4, #87	@ 0x57
 8017fc2:	e7e1      	b.n	8017f88 <_strtoul_l.isra.0+0x74>
 8017fc4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017fc8:	e7eb      	b.n	8017fa2 <_strtoul_l.isra.0+0x8e>
 8017fca:	1c73      	adds	r3, r6, #1
 8017fcc:	d106      	bne.n	8017fdc <_strtoul_l.isra.0+0xc8>
 8017fce:	2322      	movs	r3, #34	@ 0x22
 8017fd0:	f8ce 3000 	str.w	r3, [lr]
 8017fd4:	4630      	mov	r0, r6
 8017fd6:	b932      	cbnz	r2, 8017fe6 <_strtoul_l.isra.0+0xd2>
 8017fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fdc:	b107      	cbz	r7, 8017fe0 <_strtoul_l.isra.0+0xcc>
 8017fde:	4240      	negs	r0, r0
 8017fe0:	2a00      	cmp	r2, #0
 8017fe2:	d0f9      	beq.n	8017fd8 <_strtoul_l.isra.0+0xc4>
 8017fe4:	b106      	cbz	r6, 8017fe8 <_strtoul_l.isra.0+0xd4>
 8017fe6:	1e69      	subs	r1, r5, #1
 8017fe8:	6011      	str	r1, [r2, #0]
 8017fea:	e7f5      	b.n	8017fd8 <_strtoul_l.isra.0+0xc4>
 8017fec:	08019ffb 	.word	0x08019ffb

08017ff0 <strtoul>:
 8017ff0:	4613      	mov	r3, r2
 8017ff2:	460a      	mov	r2, r1
 8017ff4:	4601      	mov	r1, r0
 8017ff6:	4802      	ldr	r0, [pc, #8]	@ (8018000 <strtoul+0x10>)
 8017ff8:	6800      	ldr	r0, [r0, #0]
 8017ffa:	f7ff bf8b 	b.w	8017f14 <_strtoul_l.isra.0>
 8017ffe:	bf00      	nop
 8018000:	200000d8 	.word	0x200000d8

08018004 <std>:
 8018004:	2300      	movs	r3, #0
 8018006:	b510      	push	{r4, lr}
 8018008:	4604      	mov	r4, r0
 801800a:	e9c0 3300 	strd	r3, r3, [r0]
 801800e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018012:	6083      	str	r3, [r0, #8]
 8018014:	8181      	strh	r1, [r0, #12]
 8018016:	6643      	str	r3, [r0, #100]	@ 0x64
 8018018:	81c2      	strh	r2, [r0, #14]
 801801a:	6183      	str	r3, [r0, #24]
 801801c:	4619      	mov	r1, r3
 801801e:	2208      	movs	r2, #8
 8018020:	305c      	adds	r0, #92	@ 0x5c
 8018022:	f000 f9a3 	bl	801836c <memset>
 8018026:	4b0d      	ldr	r3, [pc, #52]	@ (801805c <std+0x58>)
 8018028:	6263      	str	r3, [r4, #36]	@ 0x24
 801802a:	4b0d      	ldr	r3, [pc, #52]	@ (8018060 <std+0x5c>)
 801802c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801802e:	4b0d      	ldr	r3, [pc, #52]	@ (8018064 <std+0x60>)
 8018030:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018032:	4b0d      	ldr	r3, [pc, #52]	@ (8018068 <std+0x64>)
 8018034:	6323      	str	r3, [r4, #48]	@ 0x30
 8018036:	4b0d      	ldr	r3, [pc, #52]	@ (801806c <std+0x68>)
 8018038:	6224      	str	r4, [r4, #32]
 801803a:	429c      	cmp	r4, r3
 801803c:	d006      	beq.n	801804c <std+0x48>
 801803e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018042:	4294      	cmp	r4, r2
 8018044:	d002      	beq.n	801804c <std+0x48>
 8018046:	33d0      	adds	r3, #208	@ 0xd0
 8018048:	429c      	cmp	r4, r3
 801804a:	d105      	bne.n	8018058 <std+0x54>
 801804c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018054:	f000 baa6 	b.w	80185a4 <__retarget_lock_init_recursive>
 8018058:	bd10      	pop	{r4, pc}
 801805a:	bf00      	nop
 801805c:	08018219 	.word	0x08018219
 8018060:	0801823b 	.word	0x0801823b
 8018064:	08018273 	.word	0x08018273
 8018068:	08018297 	.word	0x08018297
 801806c:	20010f44 	.word	0x20010f44

08018070 <stdio_exit_handler>:
 8018070:	4a02      	ldr	r2, [pc, #8]	@ (801807c <stdio_exit_handler+0xc>)
 8018072:	4903      	ldr	r1, [pc, #12]	@ (8018080 <stdio_exit_handler+0x10>)
 8018074:	4803      	ldr	r0, [pc, #12]	@ (8018084 <stdio_exit_handler+0x14>)
 8018076:	f000 b869 	b.w	801814c <_fwalk_sglue>
 801807a:	bf00      	nop
 801807c:	200000cc 	.word	0x200000cc
 8018080:	08019025 	.word	0x08019025
 8018084:	200000dc 	.word	0x200000dc

08018088 <cleanup_stdio>:
 8018088:	6841      	ldr	r1, [r0, #4]
 801808a:	4b0c      	ldr	r3, [pc, #48]	@ (80180bc <cleanup_stdio+0x34>)
 801808c:	4299      	cmp	r1, r3
 801808e:	b510      	push	{r4, lr}
 8018090:	4604      	mov	r4, r0
 8018092:	d001      	beq.n	8018098 <cleanup_stdio+0x10>
 8018094:	f000 ffc6 	bl	8019024 <_fflush_r>
 8018098:	68a1      	ldr	r1, [r4, #8]
 801809a:	4b09      	ldr	r3, [pc, #36]	@ (80180c0 <cleanup_stdio+0x38>)
 801809c:	4299      	cmp	r1, r3
 801809e:	d002      	beq.n	80180a6 <cleanup_stdio+0x1e>
 80180a0:	4620      	mov	r0, r4
 80180a2:	f000 ffbf 	bl	8019024 <_fflush_r>
 80180a6:	68e1      	ldr	r1, [r4, #12]
 80180a8:	4b06      	ldr	r3, [pc, #24]	@ (80180c4 <cleanup_stdio+0x3c>)
 80180aa:	4299      	cmp	r1, r3
 80180ac:	d004      	beq.n	80180b8 <cleanup_stdio+0x30>
 80180ae:	4620      	mov	r0, r4
 80180b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180b4:	f000 bfb6 	b.w	8019024 <_fflush_r>
 80180b8:	bd10      	pop	{r4, pc}
 80180ba:	bf00      	nop
 80180bc:	20010f44 	.word	0x20010f44
 80180c0:	20010fac 	.word	0x20010fac
 80180c4:	20011014 	.word	0x20011014

080180c8 <global_stdio_init.part.0>:
 80180c8:	b510      	push	{r4, lr}
 80180ca:	4b0b      	ldr	r3, [pc, #44]	@ (80180f8 <global_stdio_init.part.0+0x30>)
 80180cc:	4c0b      	ldr	r4, [pc, #44]	@ (80180fc <global_stdio_init.part.0+0x34>)
 80180ce:	4a0c      	ldr	r2, [pc, #48]	@ (8018100 <global_stdio_init.part.0+0x38>)
 80180d0:	601a      	str	r2, [r3, #0]
 80180d2:	4620      	mov	r0, r4
 80180d4:	2200      	movs	r2, #0
 80180d6:	2104      	movs	r1, #4
 80180d8:	f7ff ff94 	bl	8018004 <std>
 80180dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80180e0:	2201      	movs	r2, #1
 80180e2:	2109      	movs	r1, #9
 80180e4:	f7ff ff8e 	bl	8018004 <std>
 80180e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80180ec:	2202      	movs	r2, #2
 80180ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180f2:	2112      	movs	r1, #18
 80180f4:	f7ff bf86 	b.w	8018004 <std>
 80180f8:	2001107c 	.word	0x2001107c
 80180fc:	20010f44 	.word	0x20010f44
 8018100:	08018071 	.word	0x08018071

08018104 <__sfp_lock_acquire>:
 8018104:	4801      	ldr	r0, [pc, #4]	@ (801810c <__sfp_lock_acquire+0x8>)
 8018106:	f000 ba4e 	b.w	80185a6 <__retarget_lock_acquire_recursive>
 801810a:	bf00      	nop
 801810c:	20011086 	.word	0x20011086

08018110 <__sfp_lock_release>:
 8018110:	4801      	ldr	r0, [pc, #4]	@ (8018118 <__sfp_lock_release+0x8>)
 8018112:	f000 ba49 	b.w	80185a8 <__retarget_lock_release_recursive>
 8018116:	bf00      	nop
 8018118:	20011086 	.word	0x20011086

0801811c <__sinit>:
 801811c:	b510      	push	{r4, lr}
 801811e:	4604      	mov	r4, r0
 8018120:	f7ff fff0 	bl	8018104 <__sfp_lock_acquire>
 8018124:	6a23      	ldr	r3, [r4, #32]
 8018126:	b11b      	cbz	r3, 8018130 <__sinit+0x14>
 8018128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801812c:	f7ff bff0 	b.w	8018110 <__sfp_lock_release>
 8018130:	4b04      	ldr	r3, [pc, #16]	@ (8018144 <__sinit+0x28>)
 8018132:	6223      	str	r3, [r4, #32]
 8018134:	4b04      	ldr	r3, [pc, #16]	@ (8018148 <__sinit+0x2c>)
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d1f5      	bne.n	8018128 <__sinit+0xc>
 801813c:	f7ff ffc4 	bl	80180c8 <global_stdio_init.part.0>
 8018140:	e7f2      	b.n	8018128 <__sinit+0xc>
 8018142:	bf00      	nop
 8018144:	08018089 	.word	0x08018089
 8018148:	2001107c 	.word	0x2001107c

0801814c <_fwalk_sglue>:
 801814c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018150:	4607      	mov	r7, r0
 8018152:	4688      	mov	r8, r1
 8018154:	4614      	mov	r4, r2
 8018156:	2600      	movs	r6, #0
 8018158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801815c:	f1b9 0901 	subs.w	r9, r9, #1
 8018160:	d505      	bpl.n	801816e <_fwalk_sglue+0x22>
 8018162:	6824      	ldr	r4, [r4, #0]
 8018164:	2c00      	cmp	r4, #0
 8018166:	d1f7      	bne.n	8018158 <_fwalk_sglue+0xc>
 8018168:	4630      	mov	r0, r6
 801816a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801816e:	89ab      	ldrh	r3, [r5, #12]
 8018170:	2b01      	cmp	r3, #1
 8018172:	d907      	bls.n	8018184 <_fwalk_sglue+0x38>
 8018174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018178:	3301      	adds	r3, #1
 801817a:	d003      	beq.n	8018184 <_fwalk_sglue+0x38>
 801817c:	4629      	mov	r1, r5
 801817e:	4638      	mov	r0, r7
 8018180:	47c0      	blx	r8
 8018182:	4306      	orrs	r6, r0
 8018184:	3568      	adds	r5, #104	@ 0x68
 8018186:	e7e9      	b.n	801815c <_fwalk_sglue+0x10>

08018188 <iprintf>:
 8018188:	b40f      	push	{r0, r1, r2, r3}
 801818a:	b507      	push	{r0, r1, r2, lr}
 801818c:	4906      	ldr	r1, [pc, #24]	@ (80181a8 <iprintf+0x20>)
 801818e:	ab04      	add	r3, sp, #16
 8018190:	6808      	ldr	r0, [r1, #0]
 8018192:	f853 2b04 	ldr.w	r2, [r3], #4
 8018196:	6881      	ldr	r1, [r0, #8]
 8018198:	9301      	str	r3, [sp, #4]
 801819a:	f000 fc1b 	bl	80189d4 <_vfiprintf_r>
 801819e:	b003      	add	sp, #12
 80181a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80181a4:	b004      	add	sp, #16
 80181a6:	4770      	bx	lr
 80181a8:	200000d8 	.word	0x200000d8

080181ac <sniprintf>:
 80181ac:	b40c      	push	{r2, r3}
 80181ae:	b530      	push	{r4, r5, lr}
 80181b0:	4b18      	ldr	r3, [pc, #96]	@ (8018214 <sniprintf+0x68>)
 80181b2:	1e0c      	subs	r4, r1, #0
 80181b4:	681d      	ldr	r5, [r3, #0]
 80181b6:	b09d      	sub	sp, #116	@ 0x74
 80181b8:	da08      	bge.n	80181cc <sniprintf+0x20>
 80181ba:	238b      	movs	r3, #139	@ 0x8b
 80181bc:	602b      	str	r3, [r5, #0]
 80181be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80181c2:	b01d      	add	sp, #116	@ 0x74
 80181c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80181c8:	b002      	add	sp, #8
 80181ca:	4770      	bx	lr
 80181cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80181d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80181d4:	f04f 0300 	mov.w	r3, #0
 80181d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80181da:	bf14      	ite	ne
 80181dc:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80181e0:	4623      	moveq	r3, r4
 80181e2:	9304      	str	r3, [sp, #16]
 80181e4:	9307      	str	r3, [sp, #28]
 80181e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80181ea:	9002      	str	r0, [sp, #8]
 80181ec:	9006      	str	r0, [sp, #24]
 80181ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 80181f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80181f4:	ab21      	add	r3, sp, #132	@ 0x84
 80181f6:	a902      	add	r1, sp, #8
 80181f8:	4628      	mov	r0, r5
 80181fa:	9301      	str	r3, [sp, #4]
 80181fc:	f000 fac4 	bl	8018788 <_svfiprintf_r>
 8018200:	1c43      	adds	r3, r0, #1
 8018202:	bfbc      	itt	lt
 8018204:	238b      	movlt	r3, #139	@ 0x8b
 8018206:	602b      	strlt	r3, [r5, #0]
 8018208:	2c00      	cmp	r4, #0
 801820a:	d0da      	beq.n	80181c2 <sniprintf+0x16>
 801820c:	9b02      	ldr	r3, [sp, #8]
 801820e:	2200      	movs	r2, #0
 8018210:	701a      	strb	r2, [r3, #0]
 8018212:	e7d6      	b.n	80181c2 <sniprintf+0x16>
 8018214:	200000d8 	.word	0x200000d8

08018218 <__sread>:
 8018218:	b510      	push	{r4, lr}
 801821a:	460c      	mov	r4, r1
 801821c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018220:	f000 f962 	bl	80184e8 <_read_r>
 8018224:	2800      	cmp	r0, #0
 8018226:	bfab      	itete	ge
 8018228:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801822a:	89a3      	ldrhlt	r3, [r4, #12]
 801822c:	181b      	addge	r3, r3, r0
 801822e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018232:	bfac      	ite	ge
 8018234:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018236:	81a3      	strhlt	r3, [r4, #12]
 8018238:	bd10      	pop	{r4, pc}

0801823a <__swrite>:
 801823a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801823e:	461f      	mov	r7, r3
 8018240:	898b      	ldrh	r3, [r1, #12]
 8018242:	05db      	lsls	r3, r3, #23
 8018244:	4605      	mov	r5, r0
 8018246:	460c      	mov	r4, r1
 8018248:	4616      	mov	r6, r2
 801824a:	d505      	bpl.n	8018258 <__swrite+0x1e>
 801824c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018250:	2302      	movs	r3, #2
 8018252:	2200      	movs	r2, #0
 8018254:	f000 f936 	bl	80184c4 <_lseek_r>
 8018258:	89a3      	ldrh	r3, [r4, #12]
 801825a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801825e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018262:	81a3      	strh	r3, [r4, #12]
 8018264:	4632      	mov	r2, r6
 8018266:	463b      	mov	r3, r7
 8018268:	4628      	mov	r0, r5
 801826a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801826e:	f000 b95d 	b.w	801852c <_write_r>

08018272 <__sseek>:
 8018272:	b510      	push	{r4, lr}
 8018274:	460c      	mov	r4, r1
 8018276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801827a:	f000 f923 	bl	80184c4 <_lseek_r>
 801827e:	1c43      	adds	r3, r0, #1
 8018280:	89a3      	ldrh	r3, [r4, #12]
 8018282:	bf15      	itete	ne
 8018284:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018286:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801828a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801828e:	81a3      	strheq	r3, [r4, #12]
 8018290:	bf18      	it	ne
 8018292:	81a3      	strhne	r3, [r4, #12]
 8018294:	bd10      	pop	{r4, pc}

08018296 <__sclose>:
 8018296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801829a:	f000 b8a5 	b.w	80183e8 <_close_r>

0801829e <_vsniprintf_r>:
 801829e:	b530      	push	{r4, r5, lr}
 80182a0:	4614      	mov	r4, r2
 80182a2:	2c00      	cmp	r4, #0
 80182a4:	b09b      	sub	sp, #108	@ 0x6c
 80182a6:	4605      	mov	r5, r0
 80182a8:	461a      	mov	r2, r3
 80182aa:	da05      	bge.n	80182b8 <_vsniprintf_r+0x1a>
 80182ac:	238b      	movs	r3, #139	@ 0x8b
 80182ae:	6003      	str	r3, [r0, #0]
 80182b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80182b4:	b01b      	add	sp, #108	@ 0x6c
 80182b6:	bd30      	pop	{r4, r5, pc}
 80182b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80182bc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80182c0:	f04f 0300 	mov.w	r3, #0
 80182c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80182c6:	bf14      	ite	ne
 80182c8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80182cc:	4623      	moveq	r3, r4
 80182ce:	9302      	str	r3, [sp, #8]
 80182d0:	9305      	str	r3, [sp, #20]
 80182d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80182d6:	9100      	str	r1, [sp, #0]
 80182d8:	9104      	str	r1, [sp, #16]
 80182da:	f8ad 300e 	strh.w	r3, [sp, #14]
 80182de:	4669      	mov	r1, sp
 80182e0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80182e2:	f000 fa51 	bl	8018788 <_svfiprintf_r>
 80182e6:	1c43      	adds	r3, r0, #1
 80182e8:	bfbc      	itt	lt
 80182ea:	238b      	movlt	r3, #139	@ 0x8b
 80182ec:	602b      	strlt	r3, [r5, #0]
 80182ee:	2c00      	cmp	r4, #0
 80182f0:	d0e0      	beq.n	80182b4 <_vsniprintf_r+0x16>
 80182f2:	9b00      	ldr	r3, [sp, #0]
 80182f4:	2200      	movs	r2, #0
 80182f6:	701a      	strb	r2, [r3, #0]
 80182f8:	e7dc      	b.n	80182b4 <_vsniprintf_r+0x16>
	...

080182fc <vsniprintf>:
 80182fc:	b507      	push	{r0, r1, r2, lr}
 80182fe:	9300      	str	r3, [sp, #0]
 8018300:	4613      	mov	r3, r2
 8018302:	460a      	mov	r2, r1
 8018304:	4601      	mov	r1, r0
 8018306:	4803      	ldr	r0, [pc, #12]	@ (8018314 <vsniprintf+0x18>)
 8018308:	6800      	ldr	r0, [r0, #0]
 801830a:	f7ff ffc8 	bl	801829e <_vsniprintf_r>
 801830e:	b003      	add	sp, #12
 8018310:	f85d fb04 	ldr.w	pc, [sp], #4
 8018314:	200000d8 	.word	0x200000d8

08018318 <memcmp>:
 8018318:	b510      	push	{r4, lr}
 801831a:	3901      	subs	r1, #1
 801831c:	4402      	add	r2, r0
 801831e:	4290      	cmp	r0, r2
 8018320:	d101      	bne.n	8018326 <memcmp+0xe>
 8018322:	2000      	movs	r0, #0
 8018324:	e005      	b.n	8018332 <memcmp+0x1a>
 8018326:	7803      	ldrb	r3, [r0, #0]
 8018328:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801832c:	42a3      	cmp	r3, r4
 801832e:	d001      	beq.n	8018334 <memcmp+0x1c>
 8018330:	1b18      	subs	r0, r3, r4
 8018332:	bd10      	pop	{r4, pc}
 8018334:	3001      	adds	r0, #1
 8018336:	e7f2      	b.n	801831e <memcmp+0x6>

08018338 <memmove>:
 8018338:	4288      	cmp	r0, r1
 801833a:	b510      	push	{r4, lr}
 801833c:	eb01 0402 	add.w	r4, r1, r2
 8018340:	d902      	bls.n	8018348 <memmove+0x10>
 8018342:	4284      	cmp	r4, r0
 8018344:	4623      	mov	r3, r4
 8018346:	d807      	bhi.n	8018358 <memmove+0x20>
 8018348:	1e43      	subs	r3, r0, #1
 801834a:	42a1      	cmp	r1, r4
 801834c:	d008      	beq.n	8018360 <memmove+0x28>
 801834e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018356:	e7f8      	b.n	801834a <memmove+0x12>
 8018358:	4402      	add	r2, r0
 801835a:	4601      	mov	r1, r0
 801835c:	428a      	cmp	r2, r1
 801835e:	d100      	bne.n	8018362 <memmove+0x2a>
 8018360:	bd10      	pop	{r4, pc}
 8018362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801836a:	e7f7      	b.n	801835c <memmove+0x24>

0801836c <memset>:
 801836c:	4402      	add	r2, r0
 801836e:	4603      	mov	r3, r0
 8018370:	4293      	cmp	r3, r2
 8018372:	d100      	bne.n	8018376 <memset+0xa>
 8018374:	4770      	bx	lr
 8018376:	f803 1b01 	strb.w	r1, [r3], #1
 801837a:	e7f9      	b.n	8018370 <memset+0x4>

0801837c <strchr>:
 801837c:	b2c9      	uxtb	r1, r1
 801837e:	4603      	mov	r3, r0
 8018380:	4618      	mov	r0, r3
 8018382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018386:	b112      	cbz	r2, 801838e <strchr+0x12>
 8018388:	428a      	cmp	r2, r1
 801838a:	d1f9      	bne.n	8018380 <strchr+0x4>
 801838c:	4770      	bx	lr
 801838e:	2900      	cmp	r1, #0
 8018390:	bf18      	it	ne
 8018392:	2000      	movne	r0, #0
 8018394:	4770      	bx	lr

08018396 <strncmp>:
 8018396:	b510      	push	{r4, lr}
 8018398:	b16a      	cbz	r2, 80183b6 <strncmp+0x20>
 801839a:	3901      	subs	r1, #1
 801839c:	1884      	adds	r4, r0, r2
 801839e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80183a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80183a6:	429a      	cmp	r2, r3
 80183a8:	d103      	bne.n	80183b2 <strncmp+0x1c>
 80183aa:	42a0      	cmp	r0, r4
 80183ac:	d001      	beq.n	80183b2 <strncmp+0x1c>
 80183ae:	2a00      	cmp	r2, #0
 80183b0:	d1f5      	bne.n	801839e <strncmp+0x8>
 80183b2:	1ad0      	subs	r0, r2, r3
 80183b4:	bd10      	pop	{r4, pc}
 80183b6:	4610      	mov	r0, r2
 80183b8:	e7fc      	b.n	80183b4 <strncmp+0x1e>

080183ba <strstr>:
 80183ba:	780a      	ldrb	r2, [r1, #0]
 80183bc:	b570      	push	{r4, r5, r6, lr}
 80183be:	b96a      	cbnz	r2, 80183dc <strstr+0x22>
 80183c0:	bd70      	pop	{r4, r5, r6, pc}
 80183c2:	429a      	cmp	r2, r3
 80183c4:	d109      	bne.n	80183da <strstr+0x20>
 80183c6:	460c      	mov	r4, r1
 80183c8:	4605      	mov	r5, r0
 80183ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d0f6      	beq.n	80183c0 <strstr+0x6>
 80183d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80183d6:	429e      	cmp	r6, r3
 80183d8:	d0f7      	beq.n	80183ca <strstr+0x10>
 80183da:	3001      	adds	r0, #1
 80183dc:	7803      	ldrb	r3, [r0, #0]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d1ef      	bne.n	80183c2 <strstr+0x8>
 80183e2:	4618      	mov	r0, r3
 80183e4:	e7ec      	b.n	80183c0 <strstr+0x6>
	...

080183e8 <_close_r>:
 80183e8:	b538      	push	{r3, r4, r5, lr}
 80183ea:	4d06      	ldr	r5, [pc, #24]	@ (8018404 <_close_r+0x1c>)
 80183ec:	2300      	movs	r3, #0
 80183ee:	4604      	mov	r4, r0
 80183f0:	4608      	mov	r0, r1
 80183f2:	602b      	str	r3, [r5, #0]
 80183f4:	f7eb f8e8 	bl	80035c8 <_close>
 80183f8:	1c43      	adds	r3, r0, #1
 80183fa:	d102      	bne.n	8018402 <_close_r+0x1a>
 80183fc:	682b      	ldr	r3, [r5, #0]
 80183fe:	b103      	cbz	r3, 8018402 <_close_r+0x1a>
 8018400:	6023      	str	r3, [r4, #0]
 8018402:	bd38      	pop	{r3, r4, r5, pc}
 8018404:	20011080 	.word	0x20011080

08018408 <_reclaim_reent>:
 8018408:	4b2d      	ldr	r3, [pc, #180]	@ (80184c0 <_reclaim_reent+0xb8>)
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	4283      	cmp	r3, r0
 801840e:	b570      	push	{r4, r5, r6, lr}
 8018410:	4604      	mov	r4, r0
 8018412:	d053      	beq.n	80184bc <_reclaim_reent+0xb4>
 8018414:	69c3      	ldr	r3, [r0, #28]
 8018416:	b31b      	cbz	r3, 8018460 <_reclaim_reent+0x58>
 8018418:	68db      	ldr	r3, [r3, #12]
 801841a:	b163      	cbz	r3, 8018436 <_reclaim_reent+0x2e>
 801841c:	2500      	movs	r5, #0
 801841e:	69e3      	ldr	r3, [r4, #28]
 8018420:	68db      	ldr	r3, [r3, #12]
 8018422:	5959      	ldr	r1, [r3, r5]
 8018424:	b9b1      	cbnz	r1, 8018454 <_reclaim_reent+0x4c>
 8018426:	3504      	adds	r5, #4
 8018428:	2d80      	cmp	r5, #128	@ 0x80
 801842a:	d1f8      	bne.n	801841e <_reclaim_reent+0x16>
 801842c:	69e3      	ldr	r3, [r4, #28]
 801842e:	4620      	mov	r0, r4
 8018430:	68d9      	ldr	r1, [r3, #12]
 8018432:	f000 f8fb 	bl	801862c <_free_r>
 8018436:	69e3      	ldr	r3, [r4, #28]
 8018438:	6819      	ldr	r1, [r3, #0]
 801843a:	b111      	cbz	r1, 8018442 <_reclaim_reent+0x3a>
 801843c:	4620      	mov	r0, r4
 801843e:	f000 f8f5 	bl	801862c <_free_r>
 8018442:	69e3      	ldr	r3, [r4, #28]
 8018444:	689d      	ldr	r5, [r3, #8]
 8018446:	b15d      	cbz	r5, 8018460 <_reclaim_reent+0x58>
 8018448:	4629      	mov	r1, r5
 801844a:	4620      	mov	r0, r4
 801844c:	682d      	ldr	r5, [r5, #0]
 801844e:	f000 f8ed 	bl	801862c <_free_r>
 8018452:	e7f8      	b.n	8018446 <_reclaim_reent+0x3e>
 8018454:	680e      	ldr	r6, [r1, #0]
 8018456:	4620      	mov	r0, r4
 8018458:	f000 f8e8 	bl	801862c <_free_r>
 801845c:	4631      	mov	r1, r6
 801845e:	e7e1      	b.n	8018424 <_reclaim_reent+0x1c>
 8018460:	6961      	ldr	r1, [r4, #20]
 8018462:	b111      	cbz	r1, 801846a <_reclaim_reent+0x62>
 8018464:	4620      	mov	r0, r4
 8018466:	f000 f8e1 	bl	801862c <_free_r>
 801846a:	69e1      	ldr	r1, [r4, #28]
 801846c:	b111      	cbz	r1, 8018474 <_reclaim_reent+0x6c>
 801846e:	4620      	mov	r0, r4
 8018470:	f000 f8dc 	bl	801862c <_free_r>
 8018474:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018476:	b111      	cbz	r1, 801847e <_reclaim_reent+0x76>
 8018478:	4620      	mov	r0, r4
 801847a:	f000 f8d7 	bl	801862c <_free_r>
 801847e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018480:	b111      	cbz	r1, 8018488 <_reclaim_reent+0x80>
 8018482:	4620      	mov	r0, r4
 8018484:	f000 f8d2 	bl	801862c <_free_r>
 8018488:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801848a:	b111      	cbz	r1, 8018492 <_reclaim_reent+0x8a>
 801848c:	4620      	mov	r0, r4
 801848e:	f000 f8cd 	bl	801862c <_free_r>
 8018492:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8018494:	b111      	cbz	r1, 801849c <_reclaim_reent+0x94>
 8018496:	4620      	mov	r0, r4
 8018498:	f000 f8c8 	bl	801862c <_free_r>
 801849c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801849e:	b111      	cbz	r1, 80184a6 <_reclaim_reent+0x9e>
 80184a0:	4620      	mov	r0, r4
 80184a2:	f000 f8c3 	bl	801862c <_free_r>
 80184a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80184a8:	b111      	cbz	r1, 80184b0 <_reclaim_reent+0xa8>
 80184aa:	4620      	mov	r0, r4
 80184ac:	f000 f8be 	bl	801862c <_free_r>
 80184b0:	6a23      	ldr	r3, [r4, #32]
 80184b2:	b11b      	cbz	r3, 80184bc <_reclaim_reent+0xb4>
 80184b4:	4620      	mov	r0, r4
 80184b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184ba:	4718      	bx	r3
 80184bc:	bd70      	pop	{r4, r5, r6, pc}
 80184be:	bf00      	nop
 80184c0:	200000d8 	.word	0x200000d8

080184c4 <_lseek_r>:
 80184c4:	b538      	push	{r3, r4, r5, lr}
 80184c6:	4d07      	ldr	r5, [pc, #28]	@ (80184e4 <_lseek_r+0x20>)
 80184c8:	4604      	mov	r4, r0
 80184ca:	4608      	mov	r0, r1
 80184cc:	4611      	mov	r1, r2
 80184ce:	2200      	movs	r2, #0
 80184d0:	602a      	str	r2, [r5, #0]
 80184d2:	461a      	mov	r2, r3
 80184d4:	f7eb f89f 	bl	8003616 <_lseek>
 80184d8:	1c43      	adds	r3, r0, #1
 80184da:	d102      	bne.n	80184e2 <_lseek_r+0x1e>
 80184dc:	682b      	ldr	r3, [r5, #0]
 80184de:	b103      	cbz	r3, 80184e2 <_lseek_r+0x1e>
 80184e0:	6023      	str	r3, [r4, #0]
 80184e2:	bd38      	pop	{r3, r4, r5, pc}
 80184e4:	20011080 	.word	0x20011080

080184e8 <_read_r>:
 80184e8:	b538      	push	{r3, r4, r5, lr}
 80184ea:	4d07      	ldr	r5, [pc, #28]	@ (8018508 <_read_r+0x20>)
 80184ec:	4604      	mov	r4, r0
 80184ee:	4608      	mov	r0, r1
 80184f0:	4611      	mov	r1, r2
 80184f2:	2200      	movs	r2, #0
 80184f4:	602a      	str	r2, [r5, #0]
 80184f6:	461a      	mov	r2, r3
 80184f8:	f7eb f82d 	bl	8003556 <_read>
 80184fc:	1c43      	adds	r3, r0, #1
 80184fe:	d102      	bne.n	8018506 <_read_r+0x1e>
 8018500:	682b      	ldr	r3, [r5, #0]
 8018502:	b103      	cbz	r3, 8018506 <_read_r+0x1e>
 8018504:	6023      	str	r3, [r4, #0]
 8018506:	bd38      	pop	{r3, r4, r5, pc}
 8018508:	20011080 	.word	0x20011080

0801850c <_sbrk_r>:
 801850c:	b538      	push	{r3, r4, r5, lr}
 801850e:	4d06      	ldr	r5, [pc, #24]	@ (8018528 <_sbrk_r+0x1c>)
 8018510:	2300      	movs	r3, #0
 8018512:	4604      	mov	r4, r0
 8018514:	4608      	mov	r0, r1
 8018516:	602b      	str	r3, [r5, #0]
 8018518:	f7eb f88a 	bl	8003630 <_sbrk>
 801851c:	1c43      	adds	r3, r0, #1
 801851e:	d102      	bne.n	8018526 <_sbrk_r+0x1a>
 8018520:	682b      	ldr	r3, [r5, #0]
 8018522:	b103      	cbz	r3, 8018526 <_sbrk_r+0x1a>
 8018524:	6023      	str	r3, [r4, #0]
 8018526:	bd38      	pop	{r3, r4, r5, pc}
 8018528:	20011080 	.word	0x20011080

0801852c <_write_r>:
 801852c:	b538      	push	{r3, r4, r5, lr}
 801852e:	4d07      	ldr	r5, [pc, #28]	@ (801854c <_write_r+0x20>)
 8018530:	4604      	mov	r4, r0
 8018532:	4608      	mov	r0, r1
 8018534:	4611      	mov	r1, r2
 8018536:	2200      	movs	r2, #0
 8018538:	602a      	str	r2, [r5, #0]
 801853a:	461a      	mov	r2, r3
 801853c:	f7eb f828 	bl	8003590 <_write>
 8018540:	1c43      	adds	r3, r0, #1
 8018542:	d102      	bne.n	801854a <_write_r+0x1e>
 8018544:	682b      	ldr	r3, [r5, #0]
 8018546:	b103      	cbz	r3, 801854a <_write_r+0x1e>
 8018548:	6023      	str	r3, [r4, #0]
 801854a:	bd38      	pop	{r3, r4, r5, pc}
 801854c:	20011080 	.word	0x20011080

08018550 <__errno>:
 8018550:	4b01      	ldr	r3, [pc, #4]	@ (8018558 <__errno+0x8>)
 8018552:	6818      	ldr	r0, [r3, #0]
 8018554:	4770      	bx	lr
 8018556:	bf00      	nop
 8018558:	200000d8 	.word	0x200000d8

0801855c <__libc_init_array>:
 801855c:	b570      	push	{r4, r5, r6, lr}
 801855e:	4d0d      	ldr	r5, [pc, #52]	@ (8018594 <__libc_init_array+0x38>)
 8018560:	4c0d      	ldr	r4, [pc, #52]	@ (8018598 <__libc_init_array+0x3c>)
 8018562:	1b64      	subs	r4, r4, r5
 8018564:	10a4      	asrs	r4, r4, #2
 8018566:	2600      	movs	r6, #0
 8018568:	42a6      	cmp	r6, r4
 801856a:	d109      	bne.n	8018580 <__libc_init_array+0x24>
 801856c:	4d0b      	ldr	r5, [pc, #44]	@ (801859c <__libc_init_array+0x40>)
 801856e:	4c0c      	ldr	r4, [pc, #48]	@ (80185a0 <__libc_init_array+0x44>)
 8018570:	f000 fef6 	bl	8019360 <_init>
 8018574:	1b64      	subs	r4, r4, r5
 8018576:	10a4      	asrs	r4, r4, #2
 8018578:	2600      	movs	r6, #0
 801857a:	42a6      	cmp	r6, r4
 801857c:	d105      	bne.n	801858a <__libc_init_array+0x2e>
 801857e:	bd70      	pop	{r4, r5, r6, pc}
 8018580:	f855 3b04 	ldr.w	r3, [r5], #4
 8018584:	4798      	blx	r3
 8018586:	3601      	adds	r6, #1
 8018588:	e7ee      	b.n	8018568 <__libc_init_array+0xc>
 801858a:	f855 3b04 	ldr.w	r3, [r5], #4
 801858e:	4798      	blx	r3
 8018590:	3601      	adds	r6, #1
 8018592:	e7f2      	b.n	801857a <__libc_init_array+0x1e>
 8018594:	0801a104 	.word	0x0801a104
 8018598:	0801a104 	.word	0x0801a104
 801859c:	0801a104 	.word	0x0801a104
 80185a0:	0801a110 	.word	0x0801a110

080185a4 <__retarget_lock_init_recursive>:
 80185a4:	4770      	bx	lr

080185a6 <__retarget_lock_acquire_recursive>:
 80185a6:	4770      	bx	lr

080185a8 <__retarget_lock_release_recursive>:
 80185a8:	4770      	bx	lr

080185aa <strcpy>:
 80185aa:	4603      	mov	r3, r0
 80185ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80185b0:	f803 2b01 	strb.w	r2, [r3], #1
 80185b4:	2a00      	cmp	r2, #0
 80185b6:	d1f9      	bne.n	80185ac <strcpy+0x2>
 80185b8:	4770      	bx	lr

080185ba <memcpy>:
 80185ba:	440a      	add	r2, r1
 80185bc:	4291      	cmp	r1, r2
 80185be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80185c2:	d100      	bne.n	80185c6 <memcpy+0xc>
 80185c4:	4770      	bx	lr
 80185c6:	b510      	push	{r4, lr}
 80185c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80185cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80185d0:	4291      	cmp	r1, r2
 80185d2:	d1f9      	bne.n	80185c8 <memcpy+0xe>
 80185d4:	bd10      	pop	{r4, pc}
	...

080185d8 <__assert_func>:
 80185d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80185da:	4614      	mov	r4, r2
 80185dc:	461a      	mov	r2, r3
 80185de:	4b09      	ldr	r3, [pc, #36]	@ (8018604 <__assert_func+0x2c>)
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	4605      	mov	r5, r0
 80185e4:	68d8      	ldr	r0, [r3, #12]
 80185e6:	b14c      	cbz	r4, 80185fc <__assert_func+0x24>
 80185e8:	4b07      	ldr	r3, [pc, #28]	@ (8018608 <__assert_func+0x30>)
 80185ea:	9100      	str	r1, [sp, #0]
 80185ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80185f0:	4906      	ldr	r1, [pc, #24]	@ (801860c <__assert_func+0x34>)
 80185f2:	462b      	mov	r3, r5
 80185f4:	f000 fd3e 	bl	8019074 <fiprintf>
 80185f8:	f000 fde2 	bl	80191c0 <abort>
 80185fc:	4b04      	ldr	r3, [pc, #16]	@ (8018610 <__assert_func+0x38>)
 80185fe:	461c      	mov	r4, r3
 8018600:	e7f3      	b.n	80185ea <__assert_func+0x12>
 8018602:	bf00      	nop
 8018604:	200000d8 	.word	0x200000d8
 8018608:	08019f8b 	.word	0x08019f8b
 801860c:	08019f98 	.word	0x08019f98
 8018610:	08019fc6 	.word	0x08019fc6

08018614 <__env_lock>:
 8018614:	4801      	ldr	r0, [pc, #4]	@ (801861c <__env_lock+0x8>)
 8018616:	f7ff bfc6 	b.w	80185a6 <__retarget_lock_acquire_recursive>
 801861a:	bf00      	nop
 801861c:	20011084 	.word	0x20011084

08018620 <__env_unlock>:
 8018620:	4801      	ldr	r0, [pc, #4]	@ (8018628 <__env_unlock+0x8>)
 8018622:	f7ff bfc1 	b.w	80185a8 <__retarget_lock_release_recursive>
 8018626:	bf00      	nop
 8018628:	20011084 	.word	0x20011084

0801862c <_free_r>:
 801862c:	b538      	push	{r3, r4, r5, lr}
 801862e:	4605      	mov	r5, r0
 8018630:	2900      	cmp	r1, #0
 8018632:	d041      	beq.n	80186b8 <_free_r+0x8c>
 8018634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018638:	1f0c      	subs	r4, r1, #4
 801863a:	2b00      	cmp	r3, #0
 801863c:	bfb8      	it	lt
 801863e:	18e4      	addlt	r4, r4, r3
 8018640:	f7ff fbba 	bl	8017db8 <__malloc_lock>
 8018644:	4a1d      	ldr	r2, [pc, #116]	@ (80186bc <_free_r+0x90>)
 8018646:	6813      	ldr	r3, [r2, #0]
 8018648:	b933      	cbnz	r3, 8018658 <_free_r+0x2c>
 801864a:	6063      	str	r3, [r4, #4]
 801864c:	6014      	str	r4, [r2, #0]
 801864e:	4628      	mov	r0, r5
 8018650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018654:	f7ff bbb6 	b.w	8017dc4 <__malloc_unlock>
 8018658:	42a3      	cmp	r3, r4
 801865a:	d908      	bls.n	801866e <_free_r+0x42>
 801865c:	6820      	ldr	r0, [r4, #0]
 801865e:	1821      	adds	r1, r4, r0
 8018660:	428b      	cmp	r3, r1
 8018662:	bf01      	itttt	eq
 8018664:	6819      	ldreq	r1, [r3, #0]
 8018666:	685b      	ldreq	r3, [r3, #4]
 8018668:	1809      	addeq	r1, r1, r0
 801866a:	6021      	streq	r1, [r4, #0]
 801866c:	e7ed      	b.n	801864a <_free_r+0x1e>
 801866e:	461a      	mov	r2, r3
 8018670:	685b      	ldr	r3, [r3, #4]
 8018672:	b10b      	cbz	r3, 8018678 <_free_r+0x4c>
 8018674:	42a3      	cmp	r3, r4
 8018676:	d9fa      	bls.n	801866e <_free_r+0x42>
 8018678:	6811      	ldr	r1, [r2, #0]
 801867a:	1850      	adds	r0, r2, r1
 801867c:	42a0      	cmp	r0, r4
 801867e:	d10b      	bne.n	8018698 <_free_r+0x6c>
 8018680:	6820      	ldr	r0, [r4, #0]
 8018682:	4401      	add	r1, r0
 8018684:	1850      	adds	r0, r2, r1
 8018686:	4283      	cmp	r3, r0
 8018688:	6011      	str	r1, [r2, #0]
 801868a:	d1e0      	bne.n	801864e <_free_r+0x22>
 801868c:	6818      	ldr	r0, [r3, #0]
 801868e:	685b      	ldr	r3, [r3, #4]
 8018690:	6053      	str	r3, [r2, #4]
 8018692:	4408      	add	r0, r1
 8018694:	6010      	str	r0, [r2, #0]
 8018696:	e7da      	b.n	801864e <_free_r+0x22>
 8018698:	d902      	bls.n	80186a0 <_free_r+0x74>
 801869a:	230c      	movs	r3, #12
 801869c:	602b      	str	r3, [r5, #0]
 801869e:	e7d6      	b.n	801864e <_free_r+0x22>
 80186a0:	6820      	ldr	r0, [r4, #0]
 80186a2:	1821      	adds	r1, r4, r0
 80186a4:	428b      	cmp	r3, r1
 80186a6:	bf04      	itt	eq
 80186a8:	6819      	ldreq	r1, [r3, #0]
 80186aa:	685b      	ldreq	r3, [r3, #4]
 80186ac:	6063      	str	r3, [r4, #4]
 80186ae:	bf04      	itt	eq
 80186b0:	1809      	addeq	r1, r1, r0
 80186b2:	6021      	streq	r1, [r4, #0]
 80186b4:	6054      	str	r4, [r2, #4]
 80186b6:	e7ca      	b.n	801864e <_free_r+0x22>
 80186b8:	bd38      	pop	{r3, r4, r5, pc}
 80186ba:	bf00      	nop
 80186bc:	20010f40 	.word	0x20010f40

080186c0 <_malloc_usable_size_r>:
 80186c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80186c4:	1f18      	subs	r0, r3, #4
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	bfbc      	itt	lt
 80186ca:	580b      	ldrlt	r3, [r1, r0]
 80186cc:	18c0      	addlt	r0, r0, r3
 80186ce:	4770      	bx	lr

080186d0 <__ssputs_r>:
 80186d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186d4:	688e      	ldr	r6, [r1, #8]
 80186d6:	461f      	mov	r7, r3
 80186d8:	42be      	cmp	r6, r7
 80186da:	680b      	ldr	r3, [r1, #0]
 80186dc:	4682      	mov	sl, r0
 80186de:	460c      	mov	r4, r1
 80186e0:	4690      	mov	r8, r2
 80186e2:	d82d      	bhi.n	8018740 <__ssputs_r+0x70>
 80186e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80186e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80186ec:	d026      	beq.n	801873c <__ssputs_r+0x6c>
 80186ee:	6965      	ldr	r5, [r4, #20]
 80186f0:	6909      	ldr	r1, [r1, #16]
 80186f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80186f6:	eba3 0901 	sub.w	r9, r3, r1
 80186fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80186fe:	1c7b      	adds	r3, r7, #1
 8018700:	444b      	add	r3, r9
 8018702:	106d      	asrs	r5, r5, #1
 8018704:	429d      	cmp	r5, r3
 8018706:	bf38      	it	cc
 8018708:	461d      	movcc	r5, r3
 801870a:	0553      	lsls	r3, r2, #21
 801870c:	d527      	bpl.n	801875e <__ssputs_r+0x8e>
 801870e:	4629      	mov	r1, r5
 8018710:	f7ff fad2 	bl	8017cb8 <_malloc_r>
 8018714:	4606      	mov	r6, r0
 8018716:	b360      	cbz	r0, 8018772 <__ssputs_r+0xa2>
 8018718:	6921      	ldr	r1, [r4, #16]
 801871a:	464a      	mov	r2, r9
 801871c:	f7ff ff4d 	bl	80185ba <memcpy>
 8018720:	89a3      	ldrh	r3, [r4, #12]
 8018722:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801872a:	81a3      	strh	r3, [r4, #12]
 801872c:	6126      	str	r6, [r4, #16]
 801872e:	6165      	str	r5, [r4, #20]
 8018730:	444e      	add	r6, r9
 8018732:	eba5 0509 	sub.w	r5, r5, r9
 8018736:	6026      	str	r6, [r4, #0]
 8018738:	60a5      	str	r5, [r4, #8]
 801873a:	463e      	mov	r6, r7
 801873c:	42be      	cmp	r6, r7
 801873e:	d900      	bls.n	8018742 <__ssputs_r+0x72>
 8018740:	463e      	mov	r6, r7
 8018742:	6820      	ldr	r0, [r4, #0]
 8018744:	4632      	mov	r2, r6
 8018746:	4641      	mov	r1, r8
 8018748:	f7ff fdf6 	bl	8018338 <memmove>
 801874c:	68a3      	ldr	r3, [r4, #8]
 801874e:	1b9b      	subs	r3, r3, r6
 8018750:	60a3      	str	r3, [r4, #8]
 8018752:	6823      	ldr	r3, [r4, #0]
 8018754:	4433      	add	r3, r6
 8018756:	6023      	str	r3, [r4, #0]
 8018758:	2000      	movs	r0, #0
 801875a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801875e:	462a      	mov	r2, r5
 8018760:	f7ff fbaa 	bl	8017eb8 <_realloc_r>
 8018764:	4606      	mov	r6, r0
 8018766:	2800      	cmp	r0, #0
 8018768:	d1e0      	bne.n	801872c <__ssputs_r+0x5c>
 801876a:	6921      	ldr	r1, [r4, #16]
 801876c:	4650      	mov	r0, sl
 801876e:	f7ff ff5d 	bl	801862c <_free_r>
 8018772:	230c      	movs	r3, #12
 8018774:	f8ca 3000 	str.w	r3, [sl]
 8018778:	89a3      	ldrh	r3, [r4, #12]
 801877a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801877e:	81a3      	strh	r3, [r4, #12]
 8018780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018784:	e7e9      	b.n	801875a <__ssputs_r+0x8a>
	...

08018788 <_svfiprintf_r>:
 8018788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801878c:	4698      	mov	r8, r3
 801878e:	898b      	ldrh	r3, [r1, #12]
 8018790:	061b      	lsls	r3, r3, #24
 8018792:	b09d      	sub	sp, #116	@ 0x74
 8018794:	4607      	mov	r7, r0
 8018796:	460d      	mov	r5, r1
 8018798:	4614      	mov	r4, r2
 801879a:	d510      	bpl.n	80187be <_svfiprintf_r+0x36>
 801879c:	690b      	ldr	r3, [r1, #16]
 801879e:	b973      	cbnz	r3, 80187be <_svfiprintf_r+0x36>
 80187a0:	2140      	movs	r1, #64	@ 0x40
 80187a2:	f7ff fa89 	bl	8017cb8 <_malloc_r>
 80187a6:	6028      	str	r0, [r5, #0]
 80187a8:	6128      	str	r0, [r5, #16]
 80187aa:	b930      	cbnz	r0, 80187ba <_svfiprintf_r+0x32>
 80187ac:	230c      	movs	r3, #12
 80187ae:	603b      	str	r3, [r7, #0]
 80187b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80187b4:	b01d      	add	sp, #116	@ 0x74
 80187b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187ba:	2340      	movs	r3, #64	@ 0x40
 80187bc:	616b      	str	r3, [r5, #20]
 80187be:	2300      	movs	r3, #0
 80187c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80187c2:	2320      	movs	r3, #32
 80187c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80187c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80187cc:	2330      	movs	r3, #48	@ 0x30
 80187ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801896c <_svfiprintf_r+0x1e4>
 80187d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80187d6:	f04f 0901 	mov.w	r9, #1
 80187da:	4623      	mov	r3, r4
 80187dc:	469a      	mov	sl, r3
 80187de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80187e2:	b10a      	cbz	r2, 80187e8 <_svfiprintf_r+0x60>
 80187e4:	2a25      	cmp	r2, #37	@ 0x25
 80187e6:	d1f9      	bne.n	80187dc <_svfiprintf_r+0x54>
 80187e8:	ebba 0b04 	subs.w	fp, sl, r4
 80187ec:	d00b      	beq.n	8018806 <_svfiprintf_r+0x7e>
 80187ee:	465b      	mov	r3, fp
 80187f0:	4622      	mov	r2, r4
 80187f2:	4629      	mov	r1, r5
 80187f4:	4638      	mov	r0, r7
 80187f6:	f7ff ff6b 	bl	80186d0 <__ssputs_r>
 80187fa:	3001      	adds	r0, #1
 80187fc:	f000 80a7 	beq.w	801894e <_svfiprintf_r+0x1c6>
 8018800:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018802:	445a      	add	r2, fp
 8018804:	9209      	str	r2, [sp, #36]	@ 0x24
 8018806:	f89a 3000 	ldrb.w	r3, [sl]
 801880a:	2b00      	cmp	r3, #0
 801880c:	f000 809f 	beq.w	801894e <_svfiprintf_r+0x1c6>
 8018810:	2300      	movs	r3, #0
 8018812:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801881a:	f10a 0a01 	add.w	sl, sl, #1
 801881e:	9304      	str	r3, [sp, #16]
 8018820:	9307      	str	r3, [sp, #28]
 8018822:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018826:	931a      	str	r3, [sp, #104]	@ 0x68
 8018828:	4654      	mov	r4, sl
 801882a:	2205      	movs	r2, #5
 801882c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018830:	484e      	ldr	r0, [pc, #312]	@ (801896c <_svfiprintf_r+0x1e4>)
 8018832:	f7e7 fd05 	bl	8000240 <memchr>
 8018836:	9a04      	ldr	r2, [sp, #16]
 8018838:	b9d8      	cbnz	r0, 8018872 <_svfiprintf_r+0xea>
 801883a:	06d0      	lsls	r0, r2, #27
 801883c:	bf44      	itt	mi
 801883e:	2320      	movmi	r3, #32
 8018840:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018844:	0711      	lsls	r1, r2, #28
 8018846:	bf44      	itt	mi
 8018848:	232b      	movmi	r3, #43	@ 0x2b
 801884a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801884e:	f89a 3000 	ldrb.w	r3, [sl]
 8018852:	2b2a      	cmp	r3, #42	@ 0x2a
 8018854:	d015      	beq.n	8018882 <_svfiprintf_r+0xfa>
 8018856:	9a07      	ldr	r2, [sp, #28]
 8018858:	4654      	mov	r4, sl
 801885a:	2000      	movs	r0, #0
 801885c:	f04f 0c0a 	mov.w	ip, #10
 8018860:	4621      	mov	r1, r4
 8018862:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018866:	3b30      	subs	r3, #48	@ 0x30
 8018868:	2b09      	cmp	r3, #9
 801886a:	d94b      	bls.n	8018904 <_svfiprintf_r+0x17c>
 801886c:	b1b0      	cbz	r0, 801889c <_svfiprintf_r+0x114>
 801886e:	9207      	str	r2, [sp, #28]
 8018870:	e014      	b.n	801889c <_svfiprintf_r+0x114>
 8018872:	eba0 0308 	sub.w	r3, r0, r8
 8018876:	fa09 f303 	lsl.w	r3, r9, r3
 801887a:	4313      	orrs	r3, r2
 801887c:	9304      	str	r3, [sp, #16]
 801887e:	46a2      	mov	sl, r4
 8018880:	e7d2      	b.n	8018828 <_svfiprintf_r+0xa0>
 8018882:	9b03      	ldr	r3, [sp, #12]
 8018884:	1d19      	adds	r1, r3, #4
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	9103      	str	r1, [sp, #12]
 801888a:	2b00      	cmp	r3, #0
 801888c:	bfbb      	ittet	lt
 801888e:	425b      	neglt	r3, r3
 8018890:	f042 0202 	orrlt.w	r2, r2, #2
 8018894:	9307      	strge	r3, [sp, #28]
 8018896:	9307      	strlt	r3, [sp, #28]
 8018898:	bfb8      	it	lt
 801889a:	9204      	strlt	r2, [sp, #16]
 801889c:	7823      	ldrb	r3, [r4, #0]
 801889e:	2b2e      	cmp	r3, #46	@ 0x2e
 80188a0:	d10a      	bne.n	80188b8 <_svfiprintf_r+0x130>
 80188a2:	7863      	ldrb	r3, [r4, #1]
 80188a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80188a6:	d132      	bne.n	801890e <_svfiprintf_r+0x186>
 80188a8:	9b03      	ldr	r3, [sp, #12]
 80188aa:	1d1a      	adds	r2, r3, #4
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	9203      	str	r2, [sp, #12]
 80188b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80188b4:	3402      	adds	r4, #2
 80188b6:	9305      	str	r3, [sp, #20]
 80188b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801897c <_svfiprintf_r+0x1f4>
 80188bc:	7821      	ldrb	r1, [r4, #0]
 80188be:	2203      	movs	r2, #3
 80188c0:	4650      	mov	r0, sl
 80188c2:	f7e7 fcbd 	bl	8000240 <memchr>
 80188c6:	b138      	cbz	r0, 80188d8 <_svfiprintf_r+0x150>
 80188c8:	9b04      	ldr	r3, [sp, #16]
 80188ca:	eba0 000a 	sub.w	r0, r0, sl
 80188ce:	2240      	movs	r2, #64	@ 0x40
 80188d0:	4082      	lsls	r2, r0
 80188d2:	4313      	orrs	r3, r2
 80188d4:	3401      	adds	r4, #1
 80188d6:	9304      	str	r3, [sp, #16]
 80188d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188dc:	4824      	ldr	r0, [pc, #144]	@ (8018970 <_svfiprintf_r+0x1e8>)
 80188de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80188e2:	2206      	movs	r2, #6
 80188e4:	f7e7 fcac 	bl	8000240 <memchr>
 80188e8:	2800      	cmp	r0, #0
 80188ea:	d036      	beq.n	801895a <_svfiprintf_r+0x1d2>
 80188ec:	4b21      	ldr	r3, [pc, #132]	@ (8018974 <_svfiprintf_r+0x1ec>)
 80188ee:	bb1b      	cbnz	r3, 8018938 <_svfiprintf_r+0x1b0>
 80188f0:	9b03      	ldr	r3, [sp, #12]
 80188f2:	3307      	adds	r3, #7
 80188f4:	f023 0307 	bic.w	r3, r3, #7
 80188f8:	3308      	adds	r3, #8
 80188fa:	9303      	str	r3, [sp, #12]
 80188fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188fe:	4433      	add	r3, r6
 8018900:	9309      	str	r3, [sp, #36]	@ 0x24
 8018902:	e76a      	b.n	80187da <_svfiprintf_r+0x52>
 8018904:	fb0c 3202 	mla	r2, ip, r2, r3
 8018908:	460c      	mov	r4, r1
 801890a:	2001      	movs	r0, #1
 801890c:	e7a8      	b.n	8018860 <_svfiprintf_r+0xd8>
 801890e:	2300      	movs	r3, #0
 8018910:	3401      	adds	r4, #1
 8018912:	9305      	str	r3, [sp, #20]
 8018914:	4619      	mov	r1, r3
 8018916:	f04f 0c0a 	mov.w	ip, #10
 801891a:	4620      	mov	r0, r4
 801891c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018920:	3a30      	subs	r2, #48	@ 0x30
 8018922:	2a09      	cmp	r2, #9
 8018924:	d903      	bls.n	801892e <_svfiprintf_r+0x1a6>
 8018926:	2b00      	cmp	r3, #0
 8018928:	d0c6      	beq.n	80188b8 <_svfiprintf_r+0x130>
 801892a:	9105      	str	r1, [sp, #20]
 801892c:	e7c4      	b.n	80188b8 <_svfiprintf_r+0x130>
 801892e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018932:	4604      	mov	r4, r0
 8018934:	2301      	movs	r3, #1
 8018936:	e7f0      	b.n	801891a <_svfiprintf_r+0x192>
 8018938:	ab03      	add	r3, sp, #12
 801893a:	9300      	str	r3, [sp, #0]
 801893c:	462a      	mov	r2, r5
 801893e:	4b0e      	ldr	r3, [pc, #56]	@ (8018978 <_svfiprintf_r+0x1f0>)
 8018940:	a904      	add	r1, sp, #16
 8018942:	4638      	mov	r0, r7
 8018944:	f3af 8000 	nop.w
 8018948:	1c42      	adds	r2, r0, #1
 801894a:	4606      	mov	r6, r0
 801894c:	d1d6      	bne.n	80188fc <_svfiprintf_r+0x174>
 801894e:	89ab      	ldrh	r3, [r5, #12]
 8018950:	065b      	lsls	r3, r3, #25
 8018952:	f53f af2d 	bmi.w	80187b0 <_svfiprintf_r+0x28>
 8018956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018958:	e72c      	b.n	80187b4 <_svfiprintf_r+0x2c>
 801895a:	ab03      	add	r3, sp, #12
 801895c:	9300      	str	r3, [sp, #0]
 801895e:	462a      	mov	r2, r5
 8018960:	4b05      	ldr	r3, [pc, #20]	@ (8018978 <_svfiprintf_r+0x1f0>)
 8018962:	a904      	add	r1, sp, #16
 8018964:	4638      	mov	r0, r7
 8018966:	f000 f9bb 	bl	8018ce0 <_printf_i>
 801896a:	e7ed      	b.n	8018948 <_svfiprintf_r+0x1c0>
 801896c:	08019fc7 	.word	0x08019fc7
 8018970:	08019fd1 	.word	0x08019fd1
 8018974:	00000000 	.word	0x00000000
 8018978:	080186d1 	.word	0x080186d1
 801897c:	08019fcd 	.word	0x08019fcd

08018980 <__sfputc_r>:
 8018980:	6893      	ldr	r3, [r2, #8]
 8018982:	3b01      	subs	r3, #1
 8018984:	2b00      	cmp	r3, #0
 8018986:	b410      	push	{r4}
 8018988:	6093      	str	r3, [r2, #8]
 801898a:	da08      	bge.n	801899e <__sfputc_r+0x1e>
 801898c:	6994      	ldr	r4, [r2, #24]
 801898e:	42a3      	cmp	r3, r4
 8018990:	db01      	blt.n	8018996 <__sfputc_r+0x16>
 8018992:	290a      	cmp	r1, #10
 8018994:	d103      	bne.n	801899e <__sfputc_r+0x1e>
 8018996:	f85d 4b04 	ldr.w	r4, [sp], #4
 801899a:	f000 bb7d 	b.w	8019098 <__swbuf_r>
 801899e:	6813      	ldr	r3, [r2, #0]
 80189a0:	1c58      	adds	r0, r3, #1
 80189a2:	6010      	str	r0, [r2, #0]
 80189a4:	7019      	strb	r1, [r3, #0]
 80189a6:	4608      	mov	r0, r1
 80189a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189ac:	4770      	bx	lr

080189ae <__sfputs_r>:
 80189ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189b0:	4606      	mov	r6, r0
 80189b2:	460f      	mov	r7, r1
 80189b4:	4614      	mov	r4, r2
 80189b6:	18d5      	adds	r5, r2, r3
 80189b8:	42ac      	cmp	r4, r5
 80189ba:	d101      	bne.n	80189c0 <__sfputs_r+0x12>
 80189bc:	2000      	movs	r0, #0
 80189be:	e007      	b.n	80189d0 <__sfputs_r+0x22>
 80189c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189c4:	463a      	mov	r2, r7
 80189c6:	4630      	mov	r0, r6
 80189c8:	f7ff ffda 	bl	8018980 <__sfputc_r>
 80189cc:	1c43      	adds	r3, r0, #1
 80189ce:	d1f3      	bne.n	80189b8 <__sfputs_r+0xa>
 80189d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080189d4 <_vfiprintf_r>:
 80189d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189d8:	460d      	mov	r5, r1
 80189da:	b09d      	sub	sp, #116	@ 0x74
 80189dc:	4614      	mov	r4, r2
 80189de:	4698      	mov	r8, r3
 80189e0:	4606      	mov	r6, r0
 80189e2:	b118      	cbz	r0, 80189ec <_vfiprintf_r+0x18>
 80189e4:	6a03      	ldr	r3, [r0, #32]
 80189e6:	b90b      	cbnz	r3, 80189ec <_vfiprintf_r+0x18>
 80189e8:	f7ff fb98 	bl	801811c <__sinit>
 80189ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80189ee:	07d9      	lsls	r1, r3, #31
 80189f0:	d405      	bmi.n	80189fe <_vfiprintf_r+0x2a>
 80189f2:	89ab      	ldrh	r3, [r5, #12]
 80189f4:	059a      	lsls	r2, r3, #22
 80189f6:	d402      	bmi.n	80189fe <_vfiprintf_r+0x2a>
 80189f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80189fa:	f7ff fdd4 	bl	80185a6 <__retarget_lock_acquire_recursive>
 80189fe:	89ab      	ldrh	r3, [r5, #12]
 8018a00:	071b      	lsls	r3, r3, #28
 8018a02:	d501      	bpl.n	8018a08 <_vfiprintf_r+0x34>
 8018a04:	692b      	ldr	r3, [r5, #16]
 8018a06:	b99b      	cbnz	r3, 8018a30 <_vfiprintf_r+0x5c>
 8018a08:	4629      	mov	r1, r5
 8018a0a:	4630      	mov	r0, r6
 8018a0c:	f000 fb82 	bl	8019114 <__swsetup_r>
 8018a10:	b170      	cbz	r0, 8018a30 <_vfiprintf_r+0x5c>
 8018a12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018a14:	07dc      	lsls	r4, r3, #31
 8018a16:	d504      	bpl.n	8018a22 <_vfiprintf_r+0x4e>
 8018a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a1c:	b01d      	add	sp, #116	@ 0x74
 8018a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a22:	89ab      	ldrh	r3, [r5, #12]
 8018a24:	0598      	lsls	r0, r3, #22
 8018a26:	d4f7      	bmi.n	8018a18 <_vfiprintf_r+0x44>
 8018a28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018a2a:	f7ff fdbd 	bl	80185a8 <__retarget_lock_release_recursive>
 8018a2e:	e7f3      	b.n	8018a18 <_vfiprintf_r+0x44>
 8018a30:	2300      	movs	r3, #0
 8018a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a34:	2320      	movs	r3, #32
 8018a36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a3e:	2330      	movs	r3, #48	@ 0x30
 8018a40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018bf0 <_vfiprintf_r+0x21c>
 8018a44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018a48:	f04f 0901 	mov.w	r9, #1
 8018a4c:	4623      	mov	r3, r4
 8018a4e:	469a      	mov	sl, r3
 8018a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a54:	b10a      	cbz	r2, 8018a5a <_vfiprintf_r+0x86>
 8018a56:	2a25      	cmp	r2, #37	@ 0x25
 8018a58:	d1f9      	bne.n	8018a4e <_vfiprintf_r+0x7a>
 8018a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8018a5e:	d00b      	beq.n	8018a78 <_vfiprintf_r+0xa4>
 8018a60:	465b      	mov	r3, fp
 8018a62:	4622      	mov	r2, r4
 8018a64:	4629      	mov	r1, r5
 8018a66:	4630      	mov	r0, r6
 8018a68:	f7ff ffa1 	bl	80189ae <__sfputs_r>
 8018a6c:	3001      	adds	r0, #1
 8018a6e:	f000 80a7 	beq.w	8018bc0 <_vfiprintf_r+0x1ec>
 8018a72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018a74:	445a      	add	r2, fp
 8018a76:	9209      	str	r2, [sp, #36]	@ 0x24
 8018a78:	f89a 3000 	ldrb.w	r3, [sl]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	f000 809f 	beq.w	8018bc0 <_vfiprintf_r+0x1ec>
 8018a82:	2300      	movs	r3, #0
 8018a84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018a8c:	f10a 0a01 	add.w	sl, sl, #1
 8018a90:	9304      	str	r3, [sp, #16]
 8018a92:	9307      	str	r3, [sp, #28]
 8018a94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018a98:	931a      	str	r3, [sp, #104]	@ 0x68
 8018a9a:	4654      	mov	r4, sl
 8018a9c:	2205      	movs	r2, #5
 8018a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018aa2:	4853      	ldr	r0, [pc, #332]	@ (8018bf0 <_vfiprintf_r+0x21c>)
 8018aa4:	f7e7 fbcc 	bl	8000240 <memchr>
 8018aa8:	9a04      	ldr	r2, [sp, #16]
 8018aaa:	b9d8      	cbnz	r0, 8018ae4 <_vfiprintf_r+0x110>
 8018aac:	06d1      	lsls	r1, r2, #27
 8018aae:	bf44      	itt	mi
 8018ab0:	2320      	movmi	r3, #32
 8018ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018ab6:	0713      	lsls	r3, r2, #28
 8018ab8:	bf44      	itt	mi
 8018aba:	232b      	movmi	r3, #43	@ 0x2b
 8018abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8018ac4:	2b2a      	cmp	r3, #42	@ 0x2a
 8018ac6:	d015      	beq.n	8018af4 <_vfiprintf_r+0x120>
 8018ac8:	9a07      	ldr	r2, [sp, #28]
 8018aca:	4654      	mov	r4, sl
 8018acc:	2000      	movs	r0, #0
 8018ace:	f04f 0c0a 	mov.w	ip, #10
 8018ad2:	4621      	mov	r1, r4
 8018ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ad8:	3b30      	subs	r3, #48	@ 0x30
 8018ada:	2b09      	cmp	r3, #9
 8018adc:	d94b      	bls.n	8018b76 <_vfiprintf_r+0x1a2>
 8018ade:	b1b0      	cbz	r0, 8018b0e <_vfiprintf_r+0x13a>
 8018ae0:	9207      	str	r2, [sp, #28]
 8018ae2:	e014      	b.n	8018b0e <_vfiprintf_r+0x13a>
 8018ae4:	eba0 0308 	sub.w	r3, r0, r8
 8018ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8018aec:	4313      	orrs	r3, r2
 8018aee:	9304      	str	r3, [sp, #16]
 8018af0:	46a2      	mov	sl, r4
 8018af2:	e7d2      	b.n	8018a9a <_vfiprintf_r+0xc6>
 8018af4:	9b03      	ldr	r3, [sp, #12]
 8018af6:	1d19      	adds	r1, r3, #4
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	9103      	str	r1, [sp, #12]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	bfbb      	ittet	lt
 8018b00:	425b      	neglt	r3, r3
 8018b02:	f042 0202 	orrlt.w	r2, r2, #2
 8018b06:	9307      	strge	r3, [sp, #28]
 8018b08:	9307      	strlt	r3, [sp, #28]
 8018b0a:	bfb8      	it	lt
 8018b0c:	9204      	strlt	r2, [sp, #16]
 8018b0e:	7823      	ldrb	r3, [r4, #0]
 8018b10:	2b2e      	cmp	r3, #46	@ 0x2e
 8018b12:	d10a      	bne.n	8018b2a <_vfiprintf_r+0x156>
 8018b14:	7863      	ldrb	r3, [r4, #1]
 8018b16:	2b2a      	cmp	r3, #42	@ 0x2a
 8018b18:	d132      	bne.n	8018b80 <_vfiprintf_r+0x1ac>
 8018b1a:	9b03      	ldr	r3, [sp, #12]
 8018b1c:	1d1a      	adds	r2, r3, #4
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	9203      	str	r2, [sp, #12]
 8018b22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018b26:	3402      	adds	r4, #2
 8018b28:	9305      	str	r3, [sp, #20]
 8018b2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018c00 <_vfiprintf_r+0x22c>
 8018b2e:	7821      	ldrb	r1, [r4, #0]
 8018b30:	2203      	movs	r2, #3
 8018b32:	4650      	mov	r0, sl
 8018b34:	f7e7 fb84 	bl	8000240 <memchr>
 8018b38:	b138      	cbz	r0, 8018b4a <_vfiprintf_r+0x176>
 8018b3a:	9b04      	ldr	r3, [sp, #16]
 8018b3c:	eba0 000a 	sub.w	r0, r0, sl
 8018b40:	2240      	movs	r2, #64	@ 0x40
 8018b42:	4082      	lsls	r2, r0
 8018b44:	4313      	orrs	r3, r2
 8018b46:	3401      	adds	r4, #1
 8018b48:	9304      	str	r3, [sp, #16]
 8018b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b4e:	4829      	ldr	r0, [pc, #164]	@ (8018bf4 <_vfiprintf_r+0x220>)
 8018b50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018b54:	2206      	movs	r2, #6
 8018b56:	f7e7 fb73 	bl	8000240 <memchr>
 8018b5a:	2800      	cmp	r0, #0
 8018b5c:	d03f      	beq.n	8018bde <_vfiprintf_r+0x20a>
 8018b5e:	4b26      	ldr	r3, [pc, #152]	@ (8018bf8 <_vfiprintf_r+0x224>)
 8018b60:	bb1b      	cbnz	r3, 8018baa <_vfiprintf_r+0x1d6>
 8018b62:	9b03      	ldr	r3, [sp, #12]
 8018b64:	3307      	adds	r3, #7
 8018b66:	f023 0307 	bic.w	r3, r3, #7
 8018b6a:	3308      	adds	r3, #8
 8018b6c:	9303      	str	r3, [sp, #12]
 8018b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b70:	443b      	add	r3, r7
 8018b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b74:	e76a      	b.n	8018a4c <_vfiprintf_r+0x78>
 8018b76:	fb0c 3202 	mla	r2, ip, r2, r3
 8018b7a:	460c      	mov	r4, r1
 8018b7c:	2001      	movs	r0, #1
 8018b7e:	e7a8      	b.n	8018ad2 <_vfiprintf_r+0xfe>
 8018b80:	2300      	movs	r3, #0
 8018b82:	3401      	adds	r4, #1
 8018b84:	9305      	str	r3, [sp, #20]
 8018b86:	4619      	mov	r1, r3
 8018b88:	f04f 0c0a 	mov.w	ip, #10
 8018b8c:	4620      	mov	r0, r4
 8018b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018b92:	3a30      	subs	r2, #48	@ 0x30
 8018b94:	2a09      	cmp	r2, #9
 8018b96:	d903      	bls.n	8018ba0 <_vfiprintf_r+0x1cc>
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d0c6      	beq.n	8018b2a <_vfiprintf_r+0x156>
 8018b9c:	9105      	str	r1, [sp, #20]
 8018b9e:	e7c4      	b.n	8018b2a <_vfiprintf_r+0x156>
 8018ba0:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ba4:	4604      	mov	r4, r0
 8018ba6:	2301      	movs	r3, #1
 8018ba8:	e7f0      	b.n	8018b8c <_vfiprintf_r+0x1b8>
 8018baa:	ab03      	add	r3, sp, #12
 8018bac:	9300      	str	r3, [sp, #0]
 8018bae:	462a      	mov	r2, r5
 8018bb0:	4b12      	ldr	r3, [pc, #72]	@ (8018bfc <_vfiprintf_r+0x228>)
 8018bb2:	a904      	add	r1, sp, #16
 8018bb4:	4630      	mov	r0, r6
 8018bb6:	f3af 8000 	nop.w
 8018bba:	4607      	mov	r7, r0
 8018bbc:	1c78      	adds	r0, r7, #1
 8018bbe:	d1d6      	bne.n	8018b6e <_vfiprintf_r+0x19a>
 8018bc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018bc2:	07d9      	lsls	r1, r3, #31
 8018bc4:	d405      	bmi.n	8018bd2 <_vfiprintf_r+0x1fe>
 8018bc6:	89ab      	ldrh	r3, [r5, #12]
 8018bc8:	059a      	lsls	r2, r3, #22
 8018bca:	d402      	bmi.n	8018bd2 <_vfiprintf_r+0x1fe>
 8018bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018bce:	f7ff fceb 	bl	80185a8 <__retarget_lock_release_recursive>
 8018bd2:	89ab      	ldrh	r3, [r5, #12]
 8018bd4:	065b      	lsls	r3, r3, #25
 8018bd6:	f53f af1f 	bmi.w	8018a18 <_vfiprintf_r+0x44>
 8018bda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018bdc:	e71e      	b.n	8018a1c <_vfiprintf_r+0x48>
 8018bde:	ab03      	add	r3, sp, #12
 8018be0:	9300      	str	r3, [sp, #0]
 8018be2:	462a      	mov	r2, r5
 8018be4:	4b05      	ldr	r3, [pc, #20]	@ (8018bfc <_vfiprintf_r+0x228>)
 8018be6:	a904      	add	r1, sp, #16
 8018be8:	4630      	mov	r0, r6
 8018bea:	f000 f879 	bl	8018ce0 <_printf_i>
 8018bee:	e7e4      	b.n	8018bba <_vfiprintf_r+0x1e6>
 8018bf0:	08019fc7 	.word	0x08019fc7
 8018bf4:	08019fd1 	.word	0x08019fd1
 8018bf8:	00000000 	.word	0x00000000
 8018bfc:	080189af 	.word	0x080189af
 8018c00:	08019fcd 	.word	0x08019fcd

08018c04 <_printf_common>:
 8018c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c08:	4616      	mov	r6, r2
 8018c0a:	4698      	mov	r8, r3
 8018c0c:	688a      	ldr	r2, [r1, #8]
 8018c0e:	690b      	ldr	r3, [r1, #16]
 8018c10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018c14:	4293      	cmp	r3, r2
 8018c16:	bfb8      	it	lt
 8018c18:	4613      	movlt	r3, r2
 8018c1a:	6033      	str	r3, [r6, #0]
 8018c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018c20:	4607      	mov	r7, r0
 8018c22:	460c      	mov	r4, r1
 8018c24:	b10a      	cbz	r2, 8018c2a <_printf_common+0x26>
 8018c26:	3301      	adds	r3, #1
 8018c28:	6033      	str	r3, [r6, #0]
 8018c2a:	6823      	ldr	r3, [r4, #0]
 8018c2c:	0699      	lsls	r1, r3, #26
 8018c2e:	bf42      	ittt	mi
 8018c30:	6833      	ldrmi	r3, [r6, #0]
 8018c32:	3302      	addmi	r3, #2
 8018c34:	6033      	strmi	r3, [r6, #0]
 8018c36:	6825      	ldr	r5, [r4, #0]
 8018c38:	f015 0506 	ands.w	r5, r5, #6
 8018c3c:	d106      	bne.n	8018c4c <_printf_common+0x48>
 8018c3e:	f104 0a19 	add.w	sl, r4, #25
 8018c42:	68e3      	ldr	r3, [r4, #12]
 8018c44:	6832      	ldr	r2, [r6, #0]
 8018c46:	1a9b      	subs	r3, r3, r2
 8018c48:	42ab      	cmp	r3, r5
 8018c4a:	dc26      	bgt.n	8018c9a <_printf_common+0x96>
 8018c4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018c50:	6822      	ldr	r2, [r4, #0]
 8018c52:	3b00      	subs	r3, #0
 8018c54:	bf18      	it	ne
 8018c56:	2301      	movne	r3, #1
 8018c58:	0692      	lsls	r2, r2, #26
 8018c5a:	d42b      	bmi.n	8018cb4 <_printf_common+0xb0>
 8018c5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018c60:	4641      	mov	r1, r8
 8018c62:	4638      	mov	r0, r7
 8018c64:	47c8      	blx	r9
 8018c66:	3001      	adds	r0, #1
 8018c68:	d01e      	beq.n	8018ca8 <_printf_common+0xa4>
 8018c6a:	6823      	ldr	r3, [r4, #0]
 8018c6c:	6922      	ldr	r2, [r4, #16]
 8018c6e:	f003 0306 	and.w	r3, r3, #6
 8018c72:	2b04      	cmp	r3, #4
 8018c74:	bf02      	ittt	eq
 8018c76:	68e5      	ldreq	r5, [r4, #12]
 8018c78:	6833      	ldreq	r3, [r6, #0]
 8018c7a:	1aed      	subeq	r5, r5, r3
 8018c7c:	68a3      	ldr	r3, [r4, #8]
 8018c7e:	bf0c      	ite	eq
 8018c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018c84:	2500      	movne	r5, #0
 8018c86:	4293      	cmp	r3, r2
 8018c88:	bfc4      	itt	gt
 8018c8a:	1a9b      	subgt	r3, r3, r2
 8018c8c:	18ed      	addgt	r5, r5, r3
 8018c8e:	2600      	movs	r6, #0
 8018c90:	341a      	adds	r4, #26
 8018c92:	42b5      	cmp	r5, r6
 8018c94:	d11a      	bne.n	8018ccc <_printf_common+0xc8>
 8018c96:	2000      	movs	r0, #0
 8018c98:	e008      	b.n	8018cac <_printf_common+0xa8>
 8018c9a:	2301      	movs	r3, #1
 8018c9c:	4652      	mov	r2, sl
 8018c9e:	4641      	mov	r1, r8
 8018ca0:	4638      	mov	r0, r7
 8018ca2:	47c8      	blx	r9
 8018ca4:	3001      	adds	r0, #1
 8018ca6:	d103      	bne.n	8018cb0 <_printf_common+0xac>
 8018ca8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cb0:	3501      	adds	r5, #1
 8018cb2:	e7c6      	b.n	8018c42 <_printf_common+0x3e>
 8018cb4:	18e1      	adds	r1, r4, r3
 8018cb6:	1c5a      	adds	r2, r3, #1
 8018cb8:	2030      	movs	r0, #48	@ 0x30
 8018cba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018cbe:	4422      	add	r2, r4
 8018cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018cc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018cc8:	3302      	adds	r3, #2
 8018cca:	e7c7      	b.n	8018c5c <_printf_common+0x58>
 8018ccc:	2301      	movs	r3, #1
 8018cce:	4622      	mov	r2, r4
 8018cd0:	4641      	mov	r1, r8
 8018cd2:	4638      	mov	r0, r7
 8018cd4:	47c8      	blx	r9
 8018cd6:	3001      	adds	r0, #1
 8018cd8:	d0e6      	beq.n	8018ca8 <_printf_common+0xa4>
 8018cda:	3601      	adds	r6, #1
 8018cdc:	e7d9      	b.n	8018c92 <_printf_common+0x8e>
	...

08018ce0 <_printf_i>:
 8018ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018ce4:	7e0f      	ldrb	r7, [r1, #24]
 8018ce6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018ce8:	2f78      	cmp	r7, #120	@ 0x78
 8018cea:	4691      	mov	r9, r2
 8018cec:	4680      	mov	r8, r0
 8018cee:	460c      	mov	r4, r1
 8018cf0:	469a      	mov	sl, r3
 8018cf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018cf6:	d807      	bhi.n	8018d08 <_printf_i+0x28>
 8018cf8:	2f62      	cmp	r7, #98	@ 0x62
 8018cfa:	d80a      	bhi.n	8018d12 <_printf_i+0x32>
 8018cfc:	2f00      	cmp	r7, #0
 8018cfe:	f000 80d1 	beq.w	8018ea4 <_printf_i+0x1c4>
 8018d02:	2f58      	cmp	r7, #88	@ 0x58
 8018d04:	f000 80b8 	beq.w	8018e78 <_printf_i+0x198>
 8018d08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018d0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018d10:	e03a      	b.n	8018d88 <_printf_i+0xa8>
 8018d12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018d16:	2b15      	cmp	r3, #21
 8018d18:	d8f6      	bhi.n	8018d08 <_printf_i+0x28>
 8018d1a:	a101      	add	r1, pc, #4	@ (adr r1, 8018d20 <_printf_i+0x40>)
 8018d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018d20:	08018d79 	.word	0x08018d79
 8018d24:	08018d8d 	.word	0x08018d8d
 8018d28:	08018d09 	.word	0x08018d09
 8018d2c:	08018d09 	.word	0x08018d09
 8018d30:	08018d09 	.word	0x08018d09
 8018d34:	08018d09 	.word	0x08018d09
 8018d38:	08018d8d 	.word	0x08018d8d
 8018d3c:	08018d09 	.word	0x08018d09
 8018d40:	08018d09 	.word	0x08018d09
 8018d44:	08018d09 	.word	0x08018d09
 8018d48:	08018d09 	.word	0x08018d09
 8018d4c:	08018e8b 	.word	0x08018e8b
 8018d50:	08018db7 	.word	0x08018db7
 8018d54:	08018e45 	.word	0x08018e45
 8018d58:	08018d09 	.word	0x08018d09
 8018d5c:	08018d09 	.word	0x08018d09
 8018d60:	08018ead 	.word	0x08018ead
 8018d64:	08018d09 	.word	0x08018d09
 8018d68:	08018db7 	.word	0x08018db7
 8018d6c:	08018d09 	.word	0x08018d09
 8018d70:	08018d09 	.word	0x08018d09
 8018d74:	08018e4d 	.word	0x08018e4d
 8018d78:	6833      	ldr	r3, [r6, #0]
 8018d7a:	1d1a      	adds	r2, r3, #4
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	6032      	str	r2, [r6, #0]
 8018d80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018d84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018d88:	2301      	movs	r3, #1
 8018d8a:	e09c      	b.n	8018ec6 <_printf_i+0x1e6>
 8018d8c:	6833      	ldr	r3, [r6, #0]
 8018d8e:	6820      	ldr	r0, [r4, #0]
 8018d90:	1d19      	adds	r1, r3, #4
 8018d92:	6031      	str	r1, [r6, #0]
 8018d94:	0606      	lsls	r6, r0, #24
 8018d96:	d501      	bpl.n	8018d9c <_printf_i+0xbc>
 8018d98:	681d      	ldr	r5, [r3, #0]
 8018d9a:	e003      	b.n	8018da4 <_printf_i+0xc4>
 8018d9c:	0645      	lsls	r5, r0, #25
 8018d9e:	d5fb      	bpl.n	8018d98 <_printf_i+0xb8>
 8018da0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018da4:	2d00      	cmp	r5, #0
 8018da6:	da03      	bge.n	8018db0 <_printf_i+0xd0>
 8018da8:	232d      	movs	r3, #45	@ 0x2d
 8018daa:	426d      	negs	r5, r5
 8018dac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018db0:	4858      	ldr	r0, [pc, #352]	@ (8018f14 <_printf_i+0x234>)
 8018db2:	230a      	movs	r3, #10
 8018db4:	e011      	b.n	8018dda <_printf_i+0xfa>
 8018db6:	6821      	ldr	r1, [r4, #0]
 8018db8:	6833      	ldr	r3, [r6, #0]
 8018dba:	0608      	lsls	r0, r1, #24
 8018dbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8018dc0:	d402      	bmi.n	8018dc8 <_printf_i+0xe8>
 8018dc2:	0649      	lsls	r1, r1, #25
 8018dc4:	bf48      	it	mi
 8018dc6:	b2ad      	uxthmi	r5, r5
 8018dc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8018dca:	4852      	ldr	r0, [pc, #328]	@ (8018f14 <_printf_i+0x234>)
 8018dcc:	6033      	str	r3, [r6, #0]
 8018dce:	bf14      	ite	ne
 8018dd0:	230a      	movne	r3, #10
 8018dd2:	2308      	moveq	r3, #8
 8018dd4:	2100      	movs	r1, #0
 8018dd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018dda:	6866      	ldr	r6, [r4, #4]
 8018ddc:	60a6      	str	r6, [r4, #8]
 8018dde:	2e00      	cmp	r6, #0
 8018de0:	db05      	blt.n	8018dee <_printf_i+0x10e>
 8018de2:	6821      	ldr	r1, [r4, #0]
 8018de4:	432e      	orrs	r6, r5
 8018de6:	f021 0104 	bic.w	r1, r1, #4
 8018dea:	6021      	str	r1, [r4, #0]
 8018dec:	d04b      	beq.n	8018e86 <_printf_i+0x1a6>
 8018dee:	4616      	mov	r6, r2
 8018df0:	fbb5 f1f3 	udiv	r1, r5, r3
 8018df4:	fb03 5711 	mls	r7, r3, r1, r5
 8018df8:	5dc7      	ldrb	r7, [r0, r7]
 8018dfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018dfe:	462f      	mov	r7, r5
 8018e00:	42bb      	cmp	r3, r7
 8018e02:	460d      	mov	r5, r1
 8018e04:	d9f4      	bls.n	8018df0 <_printf_i+0x110>
 8018e06:	2b08      	cmp	r3, #8
 8018e08:	d10b      	bne.n	8018e22 <_printf_i+0x142>
 8018e0a:	6823      	ldr	r3, [r4, #0]
 8018e0c:	07df      	lsls	r7, r3, #31
 8018e0e:	d508      	bpl.n	8018e22 <_printf_i+0x142>
 8018e10:	6923      	ldr	r3, [r4, #16]
 8018e12:	6861      	ldr	r1, [r4, #4]
 8018e14:	4299      	cmp	r1, r3
 8018e16:	bfde      	ittt	le
 8018e18:	2330      	movle	r3, #48	@ 0x30
 8018e1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018e1e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018e22:	1b92      	subs	r2, r2, r6
 8018e24:	6122      	str	r2, [r4, #16]
 8018e26:	f8cd a000 	str.w	sl, [sp]
 8018e2a:	464b      	mov	r3, r9
 8018e2c:	aa03      	add	r2, sp, #12
 8018e2e:	4621      	mov	r1, r4
 8018e30:	4640      	mov	r0, r8
 8018e32:	f7ff fee7 	bl	8018c04 <_printf_common>
 8018e36:	3001      	adds	r0, #1
 8018e38:	d14a      	bne.n	8018ed0 <_printf_i+0x1f0>
 8018e3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e3e:	b004      	add	sp, #16
 8018e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e44:	6823      	ldr	r3, [r4, #0]
 8018e46:	f043 0320 	orr.w	r3, r3, #32
 8018e4a:	6023      	str	r3, [r4, #0]
 8018e4c:	4832      	ldr	r0, [pc, #200]	@ (8018f18 <_printf_i+0x238>)
 8018e4e:	2778      	movs	r7, #120	@ 0x78
 8018e50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018e54:	6823      	ldr	r3, [r4, #0]
 8018e56:	6831      	ldr	r1, [r6, #0]
 8018e58:	061f      	lsls	r7, r3, #24
 8018e5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8018e5e:	d402      	bmi.n	8018e66 <_printf_i+0x186>
 8018e60:	065f      	lsls	r7, r3, #25
 8018e62:	bf48      	it	mi
 8018e64:	b2ad      	uxthmi	r5, r5
 8018e66:	6031      	str	r1, [r6, #0]
 8018e68:	07d9      	lsls	r1, r3, #31
 8018e6a:	bf44      	itt	mi
 8018e6c:	f043 0320 	orrmi.w	r3, r3, #32
 8018e70:	6023      	strmi	r3, [r4, #0]
 8018e72:	b11d      	cbz	r5, 8018e7c <_printf_i+0x19c>
 8018e74:	2310      	movs	r3, #16
 8018e76:	e7ad      	b.n	8018dd4 <_printf_i+0xf4>
 8018e78:	4826      	ldr	r0, [pc, #152]	@ (8018f14 <_printf_i+0x234>)
 8018e7a:	e7e9      	b.n	8018e50 <_printf_i+0x170>
 8018e7c:	6823      	ldr	r3, [r4, #0]
 8018e7e:	f023 0320 	bic.w	r3, r3, #32
 8018e82:	6023      	str	r3, [r4, #0]
 8018e84:	e7f6      	b.n	8018e74 <_printf_i+0x194>
 8018e86:	4616      	mov	r6, r2
 8018e88:	e7bd      	b.n	8018e06 <_printf_i+0x126>
 8018e8a:	6833      	ldr	r3, [r6, #0]
 8018e8c:	6825      	ldr	r5, [r4, #0]
 8018e8e:	6961      	ldr	r1, [r4, #20]
 8018e90:	1d18      	adds	r0, r3, #4
 8018e92:	6030      	str	r0, [r6, #0]
 8018e94:	062e      	lsls	r6, r5, #24
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	d501      	bpl.n	8018e9e <_printf_i+0x1be>
 8018e9a:	6019      	str	r1, [r3, #0]
 8018e9c:	e002      	b.n	8018ea4 <_printf_i+0x1c4>
 8018e9e:	0668      	lsls	r0, r5, #25
 8018ea0:	d5fb      	bpl.n	8018e9a <_printf_i+0x1ba>
 8018ea2:	8019      	strh	r1, [r3, #0]
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	6123      	str	r3, [r4, #16]
 8018ea8:	4616      	mov	r6, r2
 8018eaa:	e7bc      	b.n	8018e26 <_printf_i+0x146>
 8018eac:	6833      	ldr	r3, [r6, #0]
 8018eae:	1d1a      	adds	r2, r3, #4
 8018eb0:	6032      	str	r2, [r6, #0]
 8018eb2:	681e      	ldr	r6, [r3, #0]
 8018eb4:	6862      	ldr	r2, [r4, #4]
 8018eb6:	2100      	movs	r1, #0
 8018eb8:	4630      	mov	r0, r6
 8018eba:	f7e7 f9c1 	bl	8000240 <memchr>
 8018ebe:	b108      	cbz	r0, 8018ec4 <_printf_i+0x1e4>
 8018ec0:	1b80      	subs	r0, r0, r6
 8018ec2:	6060      	str	r0, [r4, #4]
 8018ec4:	6863      	ldr	r3, [r4, #4]
 8018ec6:	6123      	str	r3, [r4, #16]
 8018ec8:	2300      	movs	r3, #0
 8018eca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018ece:	e7aa      	b.n	8018e26 <_printf_i+0x146>
 8018ed0:	6923      	ldr	r3, [r4, #16]
 8018ed2:	4632      	mov	r2, r6
 8018ed4:	4649      	mov	r1, r9
 8018ed6:	4640      	mov	r0, r8
 8018ed8:	47d0      	blx	sl
 8018eda:	3001      	adds	r0, #1
 8018edc:	d0ad      	beq.n	8018e3a <_printf_i+0x15a>
 8018ede:	6823      	ldr	r3, [r4, #0]
 8018ee0:	079b      	lsls	r3, r3, #30
 8018ee2:	d413      	bmi.n	8018f0c <_printf_i+0x22c>
 8018ee4:	68e0      	ldr	r0, [r4, #12]
 8018ee6:	9b03      	ldr	r3, [sp, #12]
 8018ee8:	4298      	cmp	r0, r3
 8018eea:	bfb8      	it	lt
 8018eec:	4618      	movlt	r0, r3
 8018eee:	e7a6      	b.n	8018e3e <_printf_i+0x15e>
 8018ef0:	2301      	movs	r3, #1
 8018ef2:	4632      	mov	r2, r6
 8018ef4:	4649      	mov	r1, r9
 8018ef6:	4640      	mov	r0, r8
 8018ef8:	47d0      	blx	sl
 8018efa:	3001      	adds	r0, #1
 8018efc:	d09d      	beq.n	8018e3a <_printf_i+0x15a>
 8018efe:	3501      	adds	r5, #1
 8018f00:	68e3      	ldr	r3, [r4, #12]
 8018f02:	9903      	ldr	r1, [sp, #12]
 8018f04:	1a5b      	subs	r3, r3, r1
 8018f06:	42ab      	cmp	r3, r5
 8018f08:	dcf2      	bgt.n	8018ef0 <_printf_i+0x210>
 8018f0a:	e7eb      	b.n	8018ee4 <_printf_i+0x204>
 8018f0c:	2500      	movs	r5, #0
 8018f0e:	f104 0619 	add.w	r6, r4, #25
 8018f12:	e7f5      	b.n	8018f00 <_printf_i+0x220>
 8018f14:	08019fd8 	.word	0x08019fd8
 8018f18:	08019fe9 	.word	0x08019fe9

08018f1c <__sflush_r>:
 8018f1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f24:	0716      	lsls	r6, r2, #28
 8018f26:	4605      	mov	r5, r0
 8018f28:	460c      	mov	r4, r1
 8018f2a:	d454      	bmi.n	8018fd6 <__sflush_r+0xba>
 8018f2c:	684b      	ldr	r3, [r1, #4]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	dc02      	bgt.n	8018f38 <__sflush_r+0x1c>
 8018f32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	dd48      	ble.n	8018fca <__sflush_r+0xae>
 8018f38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018f3a:	2e00      	cmp	r6, #0
 8018f3c:	d045      	beq.n	8018fca <__sflush_r+0xae>
 8018f3e:	2300      	movs	r3, #0
 8018f40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018f44:	682f      	ldr	r7, [r5, #0]
 8018f46:	6a21      	ldr	r1, [r4, #32]
 8018f48:	602b      	str	r3, [r5, #0]
 8018f4a:	d030      	beq.n	8018fae <__sflush_r+0x92>
 8018f4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018f4e:	89a3      	ldrh	r3, [r4, #12]
 8018f50:	0759      	lsls	r1, r3, #29
 8018f52:	d505      	bpl.n	8018f60 <__sflush_r+0x44>
 8018f54:	6863      	ldr	r3, [r4, #4]
 8018f56:	1ad2      	subs	r2, r2, r3
 8018f58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018f5a:	b10b      	cbz	r3, 8018f60 <__sflush_r+0x44>
 8018f5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018f5e:	1ad2      	subs	r2, r2, r3
 8018f60:	2300      	movs	r3, #0
 8018f62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018f64:	6a21      	ldr	r1, [r4, #32]
 8018f66:	4628      	mov	r0, r5
 8018f68:	47b0      	blx	r6
 8018f6a:	1c43      	adds	r3, r0, #1
 8018f6c:	89a3      	ldrh	r3, [r4, #12]
 8018f6e:	d106      	bne.n	8018f7e <__sflush_r+0x62>
 8018f70:	6829      	ldr	r1, [r5, #0]
 8018f72:	291d      	cmp	r1, #29
 8018f74:	d82b      	bhi.n	8018fce <__sflush_r+0xb2>
 8018f76:	4a2a      	ldr	r2, [pc, #168]	@ (8019020 <__sflush_r+0x104>)
 8018f78:	40ca      	lsrs	r2, r1
 8018f7a:	07d6      	lsls	r6, r2, #31
 8018f7c:	d527      	bpl.n	8018fce <__sflush_r+0xb2>
 8018f7e:	2200      	movs	r2, #0
 8018f80:	6062      	str	r2, [r4, #4]
 8018f82:	04d9      	lsls	r1, r3, #19
 8018f84:	6922      	ldr	r2, [r4, #16]
 8018f86:	6022      	str	r2, [r4, #0]
 8018f88:	d504      	bpl.n	8018f94 <__sflush_r+0x78>
 8018f8a:	1c42      	adds	r2, r0, #1
 8018f8c:	d101      	bne.n	8018f92 <__sflush_r+0x76>
 8018f8e:	682b      	ldr	r3, [r5, #0]
 8018f90:	b903      	cbnz	r3, 8018f94 <__sflush_r+0x78>
 8018f92:	6560      	str	r0, [r4, #84]	@ 0x54
 8018f94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018f96:	602f      	str	r7, [r5, #0]
 8018f98:	b1b9      	cbz	r1, 8018fca <__sflush_r+0xae>
 8018f9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018f9e:	4299      	cmp	r1, r3
 8018fa0:	d002      	beq.n	8018fa8 <__sflush_r+0x8c>
 8018fa2:	4628      	mov	r0, r5
 8018fa4:	f7ff fb42 	bl	801862c <_free_r>
 8018fa8:	2300      	movs	r3, #0
 8018faa:	6363      	str	r3, [r4, #52]	@ 0x34
 8018fac:	e00d      	b.n	8018fca <__sflush_r+0xae>
 8018fae:	2301      	movs	r3, #1
 8018fb0:	4628      	mov	r0, r5
 8018fb2:	47b0      	blx	r6
 8018fb4:	4602      	mov	r2, r0
 8018fb6:	1c50      	adds	r0, r2, #1
 8018fb8:	d1c9      	bne.n	8018f4e <__sflush_r+0x32>
 8018fba:	682b      	ldr	r3, [r5, #0]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d0c6      	beq.n	8018f4e <__sflush_r+0x32>
 8018fc0:	2b1d      	cmp	r3, #29
 8018fc2:	d001      	beq.n	8018fc8 <__sflush_r+0xac>
 8018fc4:	2b16      	cmp	r3, #22
 8018fc6:	d11e      	bne.n	8019006 <__sflush_r+0xea>
 8018fc8:	602f      	str	r7, [r5, #0]
 8018fca:	2000      	movs	r0, #0
 8018fcc:	e022      	b.n	8019014 <__sflush_r+0xf8>
 8018fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018fd2:	b21b      	sxth	r3, r3
 8018fd4:	e01b      	b.n	801900e <__sflush_r+0xf2>
 8018fd6:	690f      	ldr	r7, [r1, #16]
 8018fd8:	2f00      	cmp	r7, #0
 8018fda:	d0f6      	beq.n	8018fca <__sflush_r+0xae>
 8018fdc:	0793      	lsls	r3, r2, #30
 8018fde:	680e      	ldr	r6, [r1, #0]
 8018fe0:	bf08      	it	eq
 8018fe2:	694b      	ldreq	r3, [r1, #20]
 8018fe4:	600f      	str	r7, [r1, #0]
 8018fe6:	bf18      	it	ne
 8018fe8:	2300      	movne	r3, #0
 8018fea:	eba6 0807 	sub.w	r8, r6, r7
 8018fee:	608b      	str	r3, [r1, #8]
 8018ff0:	f1b8 0f00 	cmp.w	r8, #0
 8018ff4:	dde9      	ble.n	8018fca <__sflush_r+0xae>
 8018ff6:	6a21      	ldr	r1, [r4, #32]
 8018ff8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018ffa:	4643      	mov	r3, r8
 8018ffc:	463a      	mov	r2, r7
 8018ffe:	4628      	mov	r0, r5
 8019000:	47b0      	blx	r6
 8019002:	2800      	cmp	r0, #0
 8019004:	dc08      	bgt.n	8019018 <__sflush_r+0xfc>
 8019006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801900a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801900e:	81a3      	strh	r3, [r4, #12]
 8019010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019018:	4407      	add	r7, r0
 801901a:	eba8 0800 	sub.w	r8, r8, r0
 801901e:	e7e7      	b.n	8018ff0 <__sflush_r+0xd4>
 8019020:	20400001 	.word	0x20400001

08019024 <_fflush_r>:
 8019024:	b538      	push	{r3, r4, r5, lr}
 8019026:	690b      	ldr	r3, [r1, #16]
 8019028:	4605      	mov	r5, r0
 801902a:	460c      	mov	r4, r1
 801902c:	b913      	cbnz	r3, 8019034 <_fflush_r+0x10>
 801902e:	2500      	movs	r5, #0
 8019030:	4628      	mov	r0, r5
 8019032:	bd38      	pop	{r3, r4, r5, pc}
 8019034:	b118      	cbz	r0, 801903e <_fflush_r+0x1a>
 8019036:	6a03      	ldr	r3, [r0, #32]
 8019038:	b90b      	cbnz	r3, 801903e <_fflush_r+0x1a>
 801903a:	f7ff f86f 	bl	801811c <__sinit>
 801903e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019042:	2b00      	cmp	r3, #0
 8019044:	d0f3      	beq.n	801902e <_fflush_r+0xa>
 8019046:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019048:	07d0      	lsls	r0, r2, #31
 801904a:	d404      	bmi.n	8019056 <_fflush_r+0x32>
 801904c:	0599      	lsls	r1, r3, #22
 801904e:	d402      	bmi.n	8019056 <_fflush_r+0x32>
 8019050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019052:	f7ff faa8 	bl	80185a6 <__retarget_lock_acquire_recursive>
 8019056:	4628      	mov	r0, r5
 8019058:	4621      	mov	r1, r4
 801905a:	f7ff ff5f 	bl	8018f1c <__sflush_r>
 801905e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019060:	07da      	lsls	r2, r3, #31
 8019062:	4605      	mov	r5, r0
 8019064:	d4e4      	bmi.n	8019030 <_fflush_r+0xc>
 8019066:	89a3      	ldrh	r3, [r4, #12]
 8019068:	059b      	lsls	r3, r3, #22
 801906a:	d4e1      	bmi.n	8019030 <_fflush_r+0xc>
 801906c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801906e:	f7ff fa9b 	bl	80185a8 <__retarget_lock_release_recursive>
 8019072:	e7dd      	b.n	8019030 <_fflush_r+0xc>

08019074 <fiprintf>:
 8019074:	b40e      	push	{r1, r2, r3}
 8019076:	b503      	push	{r0, r1, lr}
 8019078:	4601      	mov	r1, r0
 801907a:	ab03      	add	r3, sp, #12
 801907c:	4805      	ldr	r0, [pc, #20]	@ (8019094 <fiprintf+0x20>)
 801907e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019082:	6800      	ldr	r0, [r0, #0]
 8019084:	9301      	str	r3, [sp, #4]
 8019086:	f7ff fca5 	bl	80189d4 <_vfiprintf_r>
 801908a:	b002      	add	sp, #8
 801908c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019090:	b003      	add	sp, #12
 8019092:	4770      	bx	lr
 8019094:	200000d8 	.word	0x200000d8

08019098 <__swbuf_r>:
 8019098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801909a:	460e      	mov	r6, r1
 801909c:	4614      	mov	r4, r2
 801909e:	4605      	mov	r5, r0
 80190a0:	b118      	cbz	r0, 80190aa <__swbuf_r+0x12>
 80190a2:	6a03      	ldr	r3, [r0, #32]
 80190a4:	b90b      	cbnz	r3, 80190aa <__swbuf_r+0x12>
 80190a6:	f7ff f839 	bl	801811c <__sinit>
 80190aa:	69a3      	ldr	r3, [r4, #24]
 80190ac:	60a3      	str	r3, [r4, #8]
 80190ae:	89a3      	ldrh	r3, [r4, #12]
 80190b0:	071a      	lsls	r2, r3, #28
 80190b2:	d501      	bpl.n	80190b8 <__swbuf_r+0x20>
 80190b4:	6923      	ldr	r3, [r4, #16]
 80190b6:	b943      	cbnz	r3, 80190ca <__swbuf_r+0x32>
 80190b8:	4621      	mov	r1, r4
 80190ba:	4628      	mov	r0, r5
 80190bc:	f000 f82a 	bl	8019114 <__swsetup_r>
 80190c0:	b118      	cbz	r0, 80190ca <__swbuf_r+0x32>
 80190c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80190c6:	4638      	mov	r0, r7
 80190c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190ca:	6823      	ldr	r3, [r4, #0]
 80190cc:	6922      	ldr	r2, [r4, #16]
 80190ce:	1a98      	subs	r0, r3, r2
 80190d0:	6963      	ldr	r3, [r4, #20]
 80190d2:	b2f6      	uxtb	r6, r6
 80190d4:	4283      	cmp	r3, r0
 80190d6:	4637      	mov	r7, r6
 80190d8:	dc05      	bgt.n	80190e6 <__swbuf_r+0x4e>
 80190da:	4621      	mov	r1, r4
 80190dc:	4628      	mov	r0, r5
 80190de:	f7ff ffa1 	bl	8019024 <_fflush_r>
 80190e2:	2800      	cmp	r0, #0
 80190e4:	d1ed      	bne.n	80190c2 <__swbuf_r+0x2a>
 80190e6:	68a3      	ldr	r3, [r4, #8]
 80190e8:	3b01      	subs	r3, #1
 80190ea:	60a3      	str	r3, [r4, #8]
 80190ec:	6823      	ldr	r3, [r4, #0]
 80190ee:	1c5a      	adds	r2, r3, #1
 80190f0:	6022      	str	r2, [r4, #0]
 80190f2:	701e      	strb	r6, [r3, #0]
 80190f4:	6962      	ldr	r2, [r4, #20]
 80190f6:	1c43      	adds	r3, r0, #1
 80190f8:	429a      	cmp	r2, r3
 80190fa:	d004      	beq.n	8019106 <__swbuf_r+0x6e>
 80190fc:	89a3      	ldrh	r3, [r4, #12]
 80190fe:	07db      	lsls	r3, r3, #31
 8019100:	d5e1      	bpl.n	80190c6 <__swbuf_r+0x2e>
 8019102:	2e0a      	cmp	r6, #10
 8019104:	d1df      	bne.n	80190c6 <__swbuf_r+0x2e>
 8019106:	4621      	mov	r1, r4
 8019108:	4628      	mov	r0, r5
 801910a:	f7ff ff8b 	bl	8019024 <_fflush_r>
 801910e:	2800      	cmp	r0, #0
 8019110:	d0d9      	beq.n	80190c6 <__swbuf_r+0x2e>
 8019112:	e7d6      	b.n	80190c2 <__swbuf_r+0x2a>

08019114 <__swsetup_r>:
 8019114:	b538      	push	{r3, r4, r5, lr}
 8019116:	4b29      	ldr	r3, [pc, #164]	@ (80191bc <__swsetup_r+0xa8>)
 8019118:	4605      	mov	r5, r0
 801911a:	6818      	ldr	r0, [r3, #0]
 801911c:	460c      	mov	r4, r1
 801911e:	b118      	cbz	r0, 8019128 <__swsetup_r+0x14>
 8019120:	6a03      	ldr	r3, [r0, #32]
 8019122:	b90b      	cbnz	r3, 8019128 <__swsetup_r+0x14>
 8019124:	f7fe fffa 	bl	801811c <__sinit>
 8019128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801912c:	0719      	lsls	r1, r3, #28
 801912e:	d422      	bmi.n	8019176 <__swsetup_r+0x62>
 8019130:	06da      	lsls	r2, r3, #27
 8019132:	d407      	bmi.n	8019144 <__swsetup_r+0x30>
 8019134:	2209      	movs	r2, #9
 8019136:	602a      	str	r2, [r5, #0]
 8019138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801913c:	81a3      	strh	r3, [r4, #12]
 801913e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019142:	e033      	b.n	80191ac <__swsetup_r+0x98>
 8019144:	0758      	lsls	r0, r3, #29
 8019146:	d512      	bpl.n	801916e <__swsetup_r+0x5a>
 8019148:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801914a:	b141      	cbz	r1, 801915e <__swsetup_r+0x4a>
 801914c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019150:	4299      	cmp	r1, r3
 8019152:	d002      	beq.n	801915a <__swsetup_r+0x46>
 8019154:	4628      	mov	r0, r5
 8019156:	f7ff fa69 	bl	801862c <_free_r>
 801915a:	2300      	movs	r3, #0
 801915c:	6363      	str	r3, [r4, #52]	@ 0x34
 801915e:	89a3      	ldrh	r3, [r4, #12]
 8019160:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019164:	81a3      	strh	r3, [r4, #12]
 8019166:	2300      	movs	r3, #0
 8019168:	6063      	str	r3, [r4, #4]
 801916a:	6923      	ldr	r3, [r4, #16]
 801916c:	6023      	str	r3, [r4, #0]
 801916e:	89a3      	ldrh	r3, [r4, #12]
 8019170:	f043 0308 	orr.w	r3, r3, #8
 8019174:	81a3      	strh	r3, [r4, #12]
 8019176:	6923      	ldr	r3, [r4, #16]
 8019178:	b94b      	cbnz	r3, 801918e <__swsetup_r+0x7a>
 801917a:	89a3      	ldrh	r3, [r4, #12]
 801917c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019184:	d003      	beq.n	801918e <__swsetup_r+0x7a>
 8019186:	4621      	mov	r1, r4
 8019188:	4628      	mov	r0, r5
 801918a:	f000 f846 	bl	801921a <__smakebuf_r>
 801918e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019192:	f013 0201 	ands.w	r2, r3, #1
 8019196:	d00a      	beq.n	80191ae <__swsetup_r+0x9a>
 8019198:	2200      	movs	r2, #0
 801919a:	60a2      	str	r2, [r4, #8]
 801919c:	6962      	ldr	r2, [r4, #20]
 801919e:	4252      	negs	r2, r2
 80191a0:	61a2      	str	r2, [r4, #24]
 80191a2:	6922      	ldr	r2, [r4, #16]
 80191a4:	b942      	cbnz	r2, 80191b8 <__swsetup_r+0xa4>
 80191a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80191aa:	d1c5      	bne.n	8019138 <__swsetup_r+0x24>
 80191ac:	bd38      	pop	{r3, r4, r5, pc}
 80191ae:	0799      	lsls	r1, r3, #30
 80191b0:	bf58      	it	pl
 80191b2:	6962      	ldrpl	r2, [r4, #20]
 80191b4:	60a2      	str	r2, [r4, #8]
 80191b6:	e7f4      	b.n	80191a2 <__swsetup_r+0x8e>
 80191b8:	2000      	movs	r0, #0
 80191ba:	e7f7      	b.n	80191ac <__swsetup_r+0x98>
 80191bc:	200000d8 	.word	0x200000d8

080191c0 <abort>:
 80191c0:	b508      	push	{r3, lr}
 80191c2:	2006      	movs	r0, #6
 80191c4:	f000 f88e 	bl	80192e4 <raise>
 80191c8:	2001      	movs	r0, #1
 80191ca:	f7ea f9b9 	bl	8003540 <_exit>

080191ce <__swhatbuf_r>:
 80191ce:	b570      	push	{r4, r5, r6, lr}
 80191d0:	460c      	mov	r4, r1
 80191d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191d6:	2900      	cmp	r1, #0
 80191d8:	b096      	sub	sp, #88	@ 0x58
 80191da:	4615      	mov	r5, r2
 80191dc:	461e      	mov	r6, r3
 80191de:	da0d      	bge.n	80191fc <__swhatbuf_r+0x2e>
 80191e0:	89a3      	ldrh	r3, [r4, #12]
 80191e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80191e6:	f04f 0100 	mov.w	r1, #0
 80191ea:	bf14      	ite	ne
 80191ec:	2340      	movne	r3, #64	@ 0x40
 80191ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80191f2:	2000      	movs	r0, #0
 80191f4:	6031      	str	r1, [r6, #0]
 80191f6:	602b      	str	r3, [r5, #0]
 80191f8:	b016      	add	sp, #88	@ 0x58
 80191fa:	bd70      	pop	{r4, r5, r6, pc}
 80191fc:	466a      	mov	r2, sp
 80191fe:	f000 f879 	bl	80192f4 <_fstat_r>
 8019202:	2800      	cmp	r0, #0
 8019204:	dbec      	blt.n	80191e0 <__swhatbuf_r+0x12>
 8019206:	9901      	ldr	r1, [sp, #4]
 8019208:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801920c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019210:	4259      	negs	r1, r3
 8019212:	4159      	adcs	r1, r3
 8019214:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019218:	e7eb      	b.n	80191f2 <__swhatbuf_r+0x24>

0801921a <__smakebuf_r>:
 801921a:	898b      	ldrh	r3, [r1, #12]
 801921c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801921e:	079d      	lsls	r5, r3, #30
 8019220:	4606      	mov	r6, r0
 8019222:	460c      	mov	r4, r1
 8019224:	d507      	bpl.n	8019236 <__smakebuf_r+0x1c>
 8019226:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801922a:	6023      	str	r3, [r4, #0]
 801922c:	6123      	str	r3, [r4, #16]
 801922e:	2301      	movs	r3, #1
 8019230:	6163      	str	r3, [r4, #20]
 8019232:	b003      	add	sp, #12
 8019234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019236:	ab01      	add	r3, sp, #4
 8019238:	466a      	mov	r2, sp
 801923a:	f7ff ffc8 	bl	80191ce <__swhatbuf_r>
 801923e:	9f00      	ldr	r7, [sp, #0]
 8019240:	4605      	mov	r5, r0
 8019242:	4639      	mov	r1, r7
 8019244:	4630      	mov	r0, r6
 8019246:	f7fe fd37 	bl	8017cb8 <_malloc_r>
 801924a:	b948      	cbnz	r0, 8019260 <__smakebuf_r+0x46>
 801924c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019250:	059a      	lsls	r2, r3, #22
 8019252:	d4ee      	bmi.n	8019232 <__smakebuf_r+0x18>
 8019254:	f023 0303 	bic.w	r3, r3, #3
 8019258:	f043 0302 	orr.w	r3, r3, #2
 801925c:	81a3      	strh	r3, [r4, #12]
 801925e:	e7e2      	b.n	8019226 <__smakebuf_r+0xc>
 8019260:	89a3      	ldrh	r3, [r4, #12]
 8019262:	6020      	str	r0, [r4, #0]
 8019264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019268:	81a3      	strh	r3, [r4, #12]
 801926a:	9b01      	ldr	r3, [sp, #4]
 801926c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019270:	b15b      	cbz	r3, 801928a <__smakebuf_r+0x70>
 8019272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019276:	4630      	mov	r0, r6
 8019278:	f000 f84e 	bl	8019318 <_isatty_r>
 801927c:	b128      	cbz	r0, 801928a <__smakebuf_r+0x70>
 801927e:	89a3      	ldrh	r3, [r4, #12]
 8019280:	f023 0303 	bic.w	r3, r3, #3
 8019284:	f043 0301 	orr.w	r3, r3, #1
 8019288:	81a3      	strh	r3, [r4, #12]
 801928a:	89a3      	ldrh	r3, [r4, #12]
 801928c:	431d      	orrs	r5, r3
 801928e:	81a5      	strh	r5, [r4, #12]
 8019290:	e7cf      	b.n	8019232 <__smakebuf_r+0x18>

08019292 <_raise_r>:
 8019292:	291f      	cmp	r1, #31
 8019294:	b538      	push	{r3, r4, r5, lr}
 8019296:	4605      	mov	r5, r0
 8019298:	460c      	mov	r4, r1
 801929a:	d904      	bls.n	80192a6 <_raise_r+0x14>
 801929c:	2316      	movs	r3, #22
 801929e:	6003      	str	r3, [r0, #0]
 80192a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80192a4:	bd38      	pop	{r3, r4, r5, pc}
 80192a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80192a8:	b112      	cbz	r2, 80192b0 <_raise_r+0x1e>
 80192aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80192ae:	b94b      	cbnz	r3, 80192c4 <_raise_r+0x32>
 80192b0:	4628      	mov	r0, r5
 80192b2:	f000 f853 	bl	801935c <_getpid_r>
 80192b6:	4622      	mov	r2, r4
 80192b8:	4601      	mov	r1, r0
 80192ba:	4628      	mov	r0, r5
 80192bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80192c0:	f000 b83a 	b.w	8019338 <_kill_r>
 80192c4:	2b01      	cmp	r3, #1
 80192c6:	d00a      	beq.n	80192de <_raise_r+0x4c>
 80192c8:	1c59      	adds	r1, r3, #1
 80192ca:	d103      	bne.n	80192d4 <_raise_r+0x42>
 80192cc:	2316      	movs	r3, #22
 80192ce:	6003      	str	r3, [r0, #0]
 80192d0:	2001      	movs	r0, #1
 80192d2:	e7e7      	b.n	80192a4 <_raise_r+0x12>
 80192d4:	2100      	movs	r1, #0
 80192d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80192da:	4620      	mov	r0, r4
 80192dc:	4798      	blx	r3
 80192de:	2000      	movs	r0, #0
 80192e0:	e7e0      	b.n	80192a4 <_raise_r+0x12>
	...

080192e4 <raise>:
 80192e4:	4b02      	ldr	r3, [pc, #8]	@ (80192f0 <raise+0xc>)
 80192e6:	4601      	mov	r1, r0
 80192e8:	6818      	ldr	r0, [r3, #0]
 80192ea:	f7ff bfd2 	b.w	8019292 <_raise_r>
 80192ee:	bf00      	nop
 80192f0:	200000d8 	.word	0x200000d8

080192f4 <_fstat_r>:
 80192f4:	b538      	push	{r3, r4, r5, lr}
 80192f6:	4d07      	ldr	r5, [pc, #28]	@ (8019314 <_fstat_r+0x20>)
 80192f8:	2300      	movs	r3, #0
 80192fa:	4604      	mov	r4, r0
 80192fc:	4608      	mov	r0, r1
 80192fe:	4611      	mov	r1, r2
 8019300:	602b      	str	r3, [r5, #0]
 8019302:	f7ea f96d 	bl	80035e0 <_fstat>
 8019306:	1c43      	adds	r3, r0, #1
 8019308:	d102      	bne.n	8019310 <_fstat_r+0x1c>
 801930a:	682b      	ldr	r3, [r5, #0]
 801930c:	b103      	cbz	r3, 8019310 <_fstat_r+0x1c>
 801930e:	6023      	str	r3, [r4, #0]
 8019310:	bd38      	pop	{r3, r4, r5, pc}
 8019312:	bf00      	nop
 8019314:	20011080 	.word	0x20011080

08019318 <_isatty_r>:
 8019318:	b538      	push	{r3, r4, r5, lr}
 801931a:	4d06      	ldr	r5, [pc, #24]	@ (8019334 <_isatty_r+0x1c>)
 801931c:	2300      	movs	r3, #0
 801931e:	4604      	mov	r4, r0
 8019320:	4608      	mov	r0, r1
 8019322:	602b      	str	r3, [r5, #0]
 8019324:	f7ea f96c 	bl	8003600 <_isatty>
 8019328:	1c43      	adds	r3, r0, #1
 801932a:	d102      	bne.n	8019332 <_isatty_r+0x1a>
 801932c:	682b      	ldr	r3, [r5, #0]
 801932e:	b103      	cbz	r3, 8019332 <_isatty_r+0x1a>
 8019330:	6023      	str	r3, [r4, #0]
 8019332:	bd38      	pop	{r3, r4, r5, pc}
 8019334:	20011080 	.word	0x20011080

08019338 <_kill_r>:
 8019338:	b538      	push	{r3, r4, r5, lr}
 801933a:	4d07      	ldr	r5, [pc, #28]	@ (8019358 <_kill_r+0x20>)
 801933c:	2300      	movs	r3, #0
 801933e:	4604      	mov	r4, r0
 8019340:	4608      	mov	r0, r1
 8019342:	4611      	mov	r1, r2
 8019344:	602b      	str	r3, [r5, #0]
 8019346:	f7ea f8eb 	bl	8003520 <_kill>
 801934a:	1c43      	adds	r3, r0, #1
 801934c:	d102      	bne.n	8019354 <_kill_r+0x1c>
 801934e:	682b      	ldr	r3, [r5, #0]
 8019350:	b103      	cbz	r3, 8019354 <_kill_r+0x1c>
 8019352:	6023      	str	r3, [r4, #0]
 8019354:	bd38      	pop	{r3, r4, r5, pc}
 8019356:	bf00      	nop
 8019358:	20011080 	.word	0x20011080

0801935c <_getpid_r>:
 801935c:	f7ea b8d8 	b.w	8003510 <_getpid>

08019360 <_init>:
 8019360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019362:	bf00      	nop
 8019364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019366:	bc08      	pop	{r3}
 8019368:	469e      	mov	lr, r3
 801936a:	4770      	bx	lr

0801936c <_fini>:
 801936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801936e:	bf00      	nop
 8019370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019372:	bc08      	pop	{r3}
 8019374:	469e      	mov	lr, r3
 8019376:	4770      	bx	lr
